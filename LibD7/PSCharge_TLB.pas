unit PSCharge_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// PASTLWTR : 1.2
// File generated on 9/10/2008 7:49:22 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: pscharge.dll (1)
// LIBID: {FB41FE7A-A669-41EF-9048-02BA99F33307}
// LCID: 0
// Helpfile: C:\WINDOWS\system32\PCCDevKit.dhp
// HelpString: Verifone's ActiveX Payment Server DLL
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// Errors:
//   Hint: Parameter 'Record' of _AuthReport.GetReportRecord changed to 'Record_'
//   Hint: Parameter 'Record' of _OffLine.GetVoid changed to 'Record_'
//   Hint: Parameter 'Record' of _OffLine.GetRecord changed to 'Record_'
//   Hint: Parameter 'Record' of _OffLine.UpdateRecord changed to 'Record_'
//   Hint: Parameter 'Record' of _Batch.GetAccepted changed to 'Record_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Enum Member 'TTYPE_CLR' of 'RespFileType' changed to 'TTYPE_CLR_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Enum Member 'TTYPE_CLR' of 'RespFileType' changed to 'TTYPE_CLR_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Error creating palette bitmap of (TAuthReport) : Server C:\WINDOWS\system32\pscharge.dll contains no icons
//   Error creating palette bitmap of (TOffLine) : Server C:\WINDOWS\system32\pscharge.dll contains no icons
//   Error creating palette bitmap of (TCheck) : Server C:\WINDOWS\system32\pscharge.dll contains no icons
//   Error creating palette bitmap of (TGift) : Server C:\WINDOWS\system32\pscharge.dll contains no icons
//   Error creating palette bitmap of (TDebit) : Server C:\WINDOWS\system32\pscharge.dll contains no icons
//   Error creating palette bitmap of (TBatch) : Server C:\WINDOWS\system32\pscharge.dll contains no icons
//   Error creating palette bitmap of (TpccTran) : Server C:\WINDOWS\system32\pscharge.dll contains no icons
//   Error creating palette bitmap of (TPccResponse) : Server C:\WINDOWS\system32\pscharge.dll contains no icons
//   Error creating palette bitmap of (TCharge) : Server C:\WINDOWS\system32\pscharge.dll contains no icons
// ************************************************************************ //
// *************************************************************************//
// NOTE:                                                                      
// Items guarded by $IFDEF_LIVE_SERVER_AT_DESIGN_TIME are used by properties  
// which return objects that may need to be explicitly created via a function 
// call prior to any access via the property. These items have been disabled  
// in order to prevent accidental use from within the object inspector. You   
// may enable them by defining LIVE_SERVER_AT_DESIGN_TIME or by selectively   
// removing them from the $IFDEF blocks. However, such items must still be    
// programmatically created via a method of the appropriate CoClass before    
// they can be used.                                                          
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
interface

uses Windows, ActiveX, Classes, Graphics, OleServer, StdVCL, Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  PSChargeMajorVersion = 1;
  PSChargeMinorVersion = 0;

  LIBID_PSCharge: TGUID = '{FB41FE7A-A669-41EF-9048-02BA99F33307}';

  IID__AuthReport: TGUID = '{F75B7AF5-7190-41E4-96DA-D00A78F082C9}';
  DIID___AuthReport: TGUID = '{DDAD8D3F-0814-4399-9F17-4F2534E48A1E}';
  IID__OffLine: TGUID = '{79219CB4-8927-4CC8-8CF8-12C08D3FFF7C}';
  DIID___OffLine: TGUID = '{CF279BE9-B1BB-4257-B23E-06107E57E1BD}';
  IID__Check: TGUID = '{B1C4E3B9-DEA4-4357-A41C-4D496FDAD869}';
  DIID___Check: TGUID = '{2D0EC6BE-A510-463D-AAFF-FB48E0D44CC2}';
  IID__Gift: TGUID = '{80DFC293-8409-4ED3-A459-EDB8F43F974D}';
  DIID___Gift: TGUID = '{279DEAA9-DA50-47F0-B470-4E17C125053D}';
  IID__Debit: TGUID = '{CF9FE2C2-ED1D-4390-A1C3-04DABEDD0DCF}';
  DIID___Debit: TGUID = '{0F15BA88-A983-4977-B6F2-E5339BED2F78}';
  IID__Batch: TGUID = '{82EA8AD8-A55E-47AD-90C7-CCBBF773622B}';
  DIID___Batch: TGUID = '{9A39F2CD-6B68-420D-9EAD-FDBBE613A873}';
  IID__pccTran: TGUID = '{775006E5-ED8B-4817-9FF9-BF4D2E7EBE5B}';
  CLASS_pccTran: TGUID = '{FC6FDFBF-5E22-4351-BD2A-2BB066896BAA}';
  IID__PccResponse: TGUID = '{5B2DC0C7-7617-4EB5-B53C-B600698A0D4E}';
  CLASS_PccResponse: TGUID = '{516AA90D-D843-4F72-B96A-8D504B2EE34E}';
  IID__Charge: TGUID = '{A128CBE4-B760-4F9F-A72E-95EFA3753C70}';
  DIID___Charge: TGUID = '{63AA7D57-F014-42CE-B747-7FEFF2F8875B}';
  CLASS_AuthReport: TGUID = '{91266AEB-DDE4-44B0-BDE0-D1D6A838450E}';
  CLASS_OffLine: TGUID = '{347F1008-D6AD-4BB5-AFCE-DF3604BACAF3}';
  CLASS_Check: TGUID = '{48F9A627-0370-46B7-BB40-C9714D0C481B}';
  CLASS_Gift: TGUID = '{0BC68D72-B131-4E39-B7B6-9793E58701D5}';
  CLASS_Debit: TGUID = '{66422F6B-EA9A-4EC4-9D69-3D0E3D94FA42}';
  CLASS_Batch: TGUID = '{6B82D694-3349-4CA4-A649-89811FAB730B}';
  CLASS_Charge: TGUID = '{66B49CB0-30E6-448C-8B2B-33F0E5868789}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum CheckReaderCode
type
  CheckReaderCode = TOleEnum;
const
  Magtek_Mini_Micr = $00000001;
  EnCheck_3000 = $00000002;
  IVI_2500 = $00000003;
  IVI_430 = $00000004;
  IVI_431 = $00000005;
  ICE_5700 = $00000006;
  MagtekImager = $00000007;
  VeriFone_CR1000i = $00000008;
  Epson_TMH6000 = $00000009;
  Epson_TMH6000Imager = $0000000A;
  WelchAllyn_ScanTeam_8300 = $0000000B;
  VeriFone_CR600 = $0000000C;
  Magtek_Imager_with_Modem = $0000000D;
  IBM_4610_reader_printer = $0000000E;
  Ingenico_EC2600 = $0000000F;
  RDM_EC5000 = $00000010;
  RDM_EC6000 = $00000011;
  NCD_7158_and_7167 = $00000012;
  LS_100 = $00000013;
  Magtek_Excella = $00000014;
  Magtek_Excella_DLCapture_FBChkImg = $00000015;
  Verifone_Model_Quartet = $00000016;

// Constants for enum ServicesType
type
  ServicesType = TOleEnum;
const
  MICR = $00000000;
  COD = $00000001;
  DL = $00000002;
  DI = $00000003;
  SPS = $00000004;
  ECA = $00000005;

// Constants for enum Status
type
  Status = TOleEnum;
const
  PROC = $00000000;
  BTOUT = $00000001;
  RTOUT = $00000002;
  RECL = $00000003;

// Constants for enum SysStat
type
  SysStat = TOleEnum;
const
  NORUN = $00000000;
  Batchinp = $00000001;
  BAKUP = $00000002;
  RUNOK = $00000003;

// Constants for enum FileType
type
  FileType = TOleEnum;
const
  TTYPE_CLR = $00000000;
  TTYPE_INP = $00000001;
  TTYPE_PRO = $00000002;
  TTYPE_XML = $00000003;
  TTYPE_INF = $00000004;
  TTYPE_BCH = $00000005;
  TTYPE_DUP = $00000006;

// Constants for enum TRespType
type
  TRespType = TOleEnum;
const
  TRESP_CLR = $00000000;
  TRESP_INP = $00000001;
  TRESP_XML = $00000003;

// Constants for enum TranErrType
type
  TranErrType = TOleEnum;
const
  TRAN_ERR_CLR = $00000000;
  TRAN_ERR_FILE_NOTFOUND = $00000001;
  TRAN_ERR_FILE_INVALID = $00000002;
  TRAN_ERR_FILE_OPENFAIL = $00000003;
  TRAN_ERR_FILE_WRITEFAIL = $00000004;
  TRAN_ERR_XML_LOAD_INCPLT = $00000005;
  TRAN_ERR_INVALID_USER = $00000006;
  TRAN_ERR_INVALID_ACTION = $00000007;
  TRAN_ERR_INVALID_RESPTYPE = $00000008;

// Constants for enum TxnMethodType
type
  TxnMethodType = TOleEnum;
const
  TM_DLL_FILE = $00000000;
  TM_COM = $00000001;
  TM_GUI = $00000002;
  TM_DLL_TCP = $00000003;

// Constants for enum RespFileType
type
  RespFileType = TOleEnum;
const
  TTYPE_CLR_ = $00000000;
  TTYPE_OUT = $00000001;
  TTYPE_OUX = $00000002;

// Constants for enum RespErrType
type
  RespErrType = TOleEnum;
const
  RESP_ERR_CLR = $00000000;
  RESP_ERR_FILE_NOTFOUND = $00000001;
  RESP_ERR_FILE_INVALID = $00000002;
  RESP_ERR_FILE_OPENFAIL = $00000003;
  RESP_ERR_FILE_WRITEFAIL = $00000004;
  RESP_ERR_XML_LOAD_INCPLT = $00000005;
  RESP_ERR_INVALID_USER = $00000006;
  RESP_ERR_INVALID_ACTION = $00000007;
  RESP_ERR_INVALID_RESPTYPE = $00000008;
  RESP_ERR_GENERAL_ERROR = $00000009;

// Constants for enum CommMethod
type
  CommMethod = TOleEnum;
const
  File_Transfer = $00000000;
  TCPIP = $00000001;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  _AuthReport = interface;
  _AuthReportDisp = dispinterface;
  __AuthReport = dispinterface;
  _OffLine = interface;
  _OffLineDisp = dispinterface;
  __OffLine = dispinterface;
  _Check = interface;
  _CheckDisp = dispinterface;
  __Check = dispinterface;
  _Gift = interface;
  _GiftDisp = dispinterface;
  __Gift = dispinterface;
  _Debit = interface;
  _DebitDisp = dispinterface;
  __Debit = dispinterface;
  _Batch = interface;
  _BatchDisp = dispinterface;
  __Batch = dispinterface;
  _pccTran = interface;
  _pccTranDisp = dispinterface;
  _PccResponse = interface;
  _PccResponseDisp = dispinterface;
  _Charge = interface;
  _ChargeDisp = dispinterface;
  __Charge = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  pccTran = _pccTran;
  PccResponse = _PccResponse;
  AuthReport = _AuthReport;
  OffLine = _OffLine;
  Check = _Check;
  Gift = _Gift;
  Debit = _Debit;
  Batch = _Batch;
  Charge = _Charge;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
  TranError = packed record
    type_: TranErrType;
    Reason: WideString;
    Line: WideString;
    Source: WideString;
  end;

  RespError = packed record
    type_: RespErrType;
    Reason: WideString;
    Line: WideString;
    Source: WideString;
  end;


// *********************************************************************//
// Interface: _AuthReport
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F75B7AF5-7190-41E4-96DA-D00A78F082C9}
// *********************************************************************//
  _AuthReport = interface(IDispatch)
    ['{F75B7AF5-7190-41E4-96DA-D00A78F082C9}']
    function Get_Processor: WideString; safecall;
    procedure Set_Processor(const Param1: WideString); safecall;
    function Get_MerchantNumber: WideString; safecall;
    procedure Set_MerchantNumber(const Param1: WideString); safecall;
    function GetIndex: Integer; safecall;
    function Get_Path: WideString; safecall;
    procedure Set_Path(const Param1: WideString); safecall;
    function GetReportCount: Smallint; safecall;
    function GetReportRecord(var Record_: Smallint): Smallint; safecall;
    function GetReportCard: WideString; safecall;
    function GetReportItem: WideString; safecall;
    function GetReportIssuer: WideString; safecall;
    function GetReportExpDate: WideString; safecall;
    function GetReportTransType: WideString; safecall;
    function GetReportAmount: WideString; safecall;
    function GetReportTransNumber: WideString; safecall;
    function GetReportAppCode: WideString; safecall;
    property Processor: WideString read Get_Processor write Set_Processor;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
  end;

// *********************************************************************//
// DispIntf:  _AuthReportDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F75B7AF5-7190-41E4-96DA-D00A78F082C9}
// *********************************************************************//
  _AuthReportDisp = dispinterface
    ['{F75B7AF5-7190-41E4-96DA-D00A78F082C9}']
    property Processor: WideString dispid 1745027074;
    property MerchantNumber: WideString dispid 1745027073;
    function GetIndex: Integer; dispid 1610809347;
    property Path: WideString dispid 1745027072;
    function GetReportCount: Smallint; dispid 1610809348;
    function GetReportRecord(var Record_: Smallint): Smallint; dispid 1610809349;
    function GetReportCard: WideString; dispid 1610809350;
    function GetReportItem: WideString; dispid 1610809351;
    function GetReportIssuer: WideString; dispid 1610809352;
    function GetReportExpDate: WideString; dispid 1610809353;
    function GetReportTransType: WideString; dispid 1610809354;
    function GetReportAmount: WideString; dispid 1610809355;
    function GetReportTransNumber: WideString; dispid 1610809356;
    function GetReportAppCode: WideString; dispid 1610809357;
  end;

// *********************************************************************//
// DispIntf:  __AuthReport
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {DDAD8D3F-0814-4399-9F17-4F2534E48A1E}
// *********************************************************************//
  __AuthReport = dispinterface
    ['{DDAD8D3F-0814-4399-9F17-4F2534E48A1E}']
    procedure Resize; dispid 1;
    procedure Click; dispid 2;
    procedure DblClick; dispid 3;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid 4;
    procedure KeyPress(var KeyAscii: Smallint); dispid 5;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid 6;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 7;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 8;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 9;
  end;

// *********************************************************************//
// Interface: _OffLine
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {79219CB4-8927-4CC8-8CF8-12C08D3FFF7C}
// *********************************************************************//
  _OffLine = interface(IDispatch)
    ['{79219CB4-8927-4CC8-8CF8-12C08D3FFF7C}']
    function Connect(var CallBack: IDispatch): WordBool; safecall;
    function Disconnect: WordBool; safecall;
    function Get_User: WideString; safecall;
    function Get_GetVoid(var Record_: OleVariant; var BCHFile: WideString): WordBool; safecall;
    function Get_GetInProcessRecord: Integer; safecall;
    procedure Set_User(const Param1: WideString); safecall;
    function ProcessFile(var BCHFile: WideString): WordBool; safecall;
    function GetErrorCode: Integer; safecall;
    function GetErrorDesc: WideString; safecall;
    function GetTotals(var BCHFile: WideString): WordBool; safecall;
    function Get_Processor: WideString; safecall;
    procedure Set_Processor(const Param1: WideString); safecall;
    function Get_MerchantNumber: WideString; safecall;
    procedure Set_MerchantNumber(const Param1: WideString); safecall;
    function Get_Path: WideString; safecall;
    function Get_PccwPath: WideString; safecall;
    procedure Set_Path(const Param1: WideString); safecall;
    procedure Set_Void(Param1: WordBool); safecall;
    procedure Set_PccwPath(const Param1: WideString); safecall;
    function GetCard: WideString; safecall;
    function GetItem: WideString; safecall;
    function GetCount: Integer; safecall;
    function GetRecords: Integer; safecall;
    function GetBalance: Currency; safecall;
    function GetExpDate: WideString; safecall;
    function GetTransType: WideString; safecall;
    function GetAmount: WideString; safecall;
    function GetTicket: WideString; safecall;
    function GetAppCode: WideString; safecall;
    function GetIndex: Integer; safecall;
    function GetBchFile: WideString; safecall;
    function GetRecord(var Record_: OleVariant; var BCHFile: WideString): WordBool; safecall;
    function UpdateRecord(var Record_: OleVariant; var BCHFile: WideString): WordBool; safecall;
    function EraseFile(var BCHFile: WideString): WordBool; safecall;
    function Compact(var BCHFile: WideString): WordBool; safecall;
    property User: WideString read Get_User write Set_User;
    property GetVoid[var Record_: OleVariant; var BCHFile: WideString]: WordBool read Get_GetVoid;
    property GetInProcessRecord: Integer read Get_GetInProcessRecord;
    property Processor: WideString read Get_Processor write Set_Processor;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
    property PccwPath: WideString read Get_PccwPath write Set_PccwPath;
    property Void: WordBool write Set_Void;
  end;

// *********************************************************************//
// DispIntf:  _OffLineDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {79219CB4-8927-4CC8-8CF8-12C08D3FFF7C}
// *********************************************************************//
  _OffLineDisp = dispinterface
    ['{79219CB4-8927-4CC8-8CF8-12C08D3FFF7C}']
    function Connect(var CallBack: IDispatch): WordBool; dispid 1610809352;
    function Disconnect: WordBool; dispid 1610809353;
    property User: WideString dispid 1745027079;
    property GetVoid[var Record_: OleVariant; var BCHFile: WideString]: WordBool readonly dispid 1745027078;
    property GetInProcessRecord: Integer readonly dispid 1745027077;
    function ProcessFile(var BCHFile: WideString): WordBool; dispid 1610809354;
    function GetErrorCode: Integer; dispid 1610809355;
    function GetErrorDesc: WideString; dispid 1610809356;
    function GetTotals(var BCHFile: WideString): WordBool; dispid 1610809357;
    property Processor: WideString dispid 1745027076;
    property MerchantNumber: WideString dispid 1745027075;
    property Path: WideString dispid 1745027074;
    property PccwPath: WideString dispid 1745027073;
    property Void: WordBool writeonly dispid 1745027072;
    function GetCard: WideString; dispid 1610809358;
    function GetItem: WideString; dispid 1610809359;
    function GetCount: Integer; dispid 1610809360;
    function GetRecords: Integer; dispid 1610809361;
    function GetBalance: Currency; dispid 1610809362;
    function GetExpDate: WideString; dispid 1610809363;
    function GetTransType: WideString; dispid 1610809364;
    function GetAmount: WideString; dispid 1610809365;
    function GetTicket: WideString; dispid 1610809366;
    function GetAppCode: WideString; dispid 1610809367;
    function GetIndex: Integer; dispid 1610809368;
    function GetBchFile: WideString; dispid 1610809369;
    function GetRecord(var Record_: OleVariant; var BCHFile: WideString): WordBool; dispid 1610809371;
    function UpdateRecord(var Record_: OleVariant; var BCHFile: WideString): WordBool; dispid 1610809372;
    function EraseFile(var BCHFile: WideString): WordBool; dispid 1610809373;
    function Compact(var BCHFile: WideString): WordBool; dispid 1610809374;
  end;

// *********************************************************************//
// DispIntf:  __OffLine
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {CF279BE9-B1BB-4257-B23E-06107E57E1BD}
// *********************************************************************//
  __OffLine = dispinterface
    ['{CF279BE9-B1BB-4257-B23E-06107E57E1BD}']
    procedure Resize; dispid 1;
    procedure Click; dispid 2;
    procedure DblClick; dispid 3;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid 4;
    procedure KeyPress(var KeyAscii: Smallint); dispid 5;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid 6;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 7;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 8;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 9;
  end;

// *********************************************************************//
// Interface: _Check
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B1C4E3B9-DEA4-4357-A41C-4D496FDAD869}
// *********************************************************************//
  _Check = interface(IDispatch)
    ['{B1C4E3B9-DEA4-4357-A41C-4D496FDAD869}']
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(Param1: Integer); safecall;
    function Get_ForeColor: Integer; safecall;
    procedure Set_ForeColor(Param1: Integer); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(Param1: WordBool); safecall;
    function Get_Font: IFontDisp; safecall;
    procedure _Set_Font(const Param1: IFontDisp); safecall;
    function Get_BackStyle: Smallint; safecall;
    procedure Set_BackStyle(Param1: Smallint); safecall;
    function Get_BorderStyle: Smallint; safecall;
    procedure Set_BorderStyle(Param1: Smallint); safecall;
    procedure Set_Services(Param1: ServicesType); safecall;
    function Get_Services: ServicesType; safecall;
    procedure Refresh; safecall;
    function Get_Action: WideString; safecall;
    procedure Set_Action(const Param1: WideString); safecall;
    function Get_Processor: WideString; safecall;
    procedure Set_Processor(const Param1: WideString); safecall;
    function Get_CheckReaderCode: CheckReaderCode; safecall;
    procedure Set_CheckReaderCode(Param1: CheckReaderCode); safecall;
    function Get_MerchantNumber: WideString; safecall;
    procedure Set_MerchantNumber(const Param1: WideString); safecall;
    function Get_Drivers_License: WideString; safecall;
    procedure Set_Drivers_License(const Param1: WideString); safecall;
    function Get_Phone_Number: WideString; safecall;
    procedure Set_Phone_Number(const Param1: WideString); safecall;
    function Get_Account_Number: WideString; safecall;
    procedure Set_Account_Number(const Param1: WideString); safecall;
    function Get_Manual: WideString; safecall;
    procedure Set_Manual(const Param1: WideString); safecall;
    function Get_AdjustmentAmount: WideString; safecall;
    procedure Set_AdjustmentAmount(const Param1: WideString); safecall;
    function Get_Amount: WideString; safecall;
    procedure Set_Amount(const Param1: WideString); safecall;
    function Get_Transit_Number: WideString; safecall;
    procedure Set_Transit_Number(const Param1: WideString); safecall;
    function Get_State: WideString; safecall;
    procedure Set_State(const Param1: WideString); safecall;
    function Get_Ticket: WideString; safecall;
    procedure Set_Ticket(const Param1: WideString); safecall;
    function Get_Multi: WideString; safecall;
    procedure Set_Multi(const Param1: WideString); safecall;
    function Get_User: WideString; safecall;
    procedure Set_User(const Param1: WideString); safecall;
    function Get_Path: WideString; safecall;
    procedure Set_Path(const Param1: WideString); safecall;
    function Get_TimeOut: Integer; safecall;
    procedure Set_TimeOut(Param1: Integer); safecall;
    function Get_Check_Number: WideString; safecall;
    procedure Set_Check_Number(const Param1: WideString); safecall;
    function Get_Birth_Date: WideString; safecall;
    procedure Set_Birth_Date(const Param1: WideString); safecall;
    procedure Set_Cash_Back(const Param1: WideString); safecall;
    function Get_Cash_Back: WideString; safecall;
    procedure Set_Manager_Card(const Param1: WideString); safecall;
    function Get_Manager_Card: WideString; safecall;
    function Get_Zip_Code: WideString; safecall;
    procedure Set_Zip_Code(const Param1: WideString); safecall;
    function Get_OutDelay: Single; safecall;
    procedure Set_OutDelay(Param1: Single); safecall;
    procedure Set_PrintReceipts(const Param1: WideString); safecall;
    function Get_PrintReceipts: WideString; safecall;
    function Get_XMLTrans: WordBool; safecall;
    procedure Set_XMLTrans(Param1: WordBool); safecall;
    function Get_TroutD: WideString; safecall;
    procedure Set_TroutD(const Param1: WideString); safecall;
    function Get_MICR_DATA: WideString; safecall;
    procedure Set_MICR_DATA(const Param1: WideString); safecall;
    procedure Set_IPAddress(const Param1: WideString); safecall;
    function Get_IPAddress: WideString; safecall;
    procedure Set_Port(Param1: Smallint); safecall;
    function Get_Port: Smallint; safecall;
    procedure Set_EnableSSL(Param1: WordBool); safecall;
    function Get_EnableSSL: WordBool; safecall;
    function Get_CommMethod: CommMethod; safecall;
    procedure Set_CommMethod(Param1: CommMethod); safecall;
    procedure Set_CheckType(const Param1: WideString); safecall;
    function Get_CheckType: WideString; safecall;
    procedure Set_CheckAccType(const Param1: WideString); safecall;
    function Get_CheckAccType: WideString; safecall;
    procedure Set_MICRStatus(const Param1: WideString); safecall;
    function Get_MICRStatus: WideString; safecall;
    procedure Set_CustomerName(const Param1: WideString); safecall;
    function Get_CustomerName: WideString; safecall;
    procedure Set_CustomerFirstName(const Param1: WideString); safecall;
    function Get_CustomerFirstName: WideString; safecall;
    procedure Set_CustomerLastName(const Param1: WideString); safecall;
    function Get_CustomerLastName: WideString; safecall;
    procedure Set_CustomerStreet(const Param1: WideString); safecall;
    function Get_CustomerStreet: WideString; safecall;
    procedure Set_CustomerCity(const Param1: WideString); safecall;
    function Get_CustomerCity: WideString; safecall;
    procedure Set_IDType(const Param1: WideString); safecall;
    function Get_IDType: WideString; safecall;
    procedure Set_IDCountry(const Param1: WideString); safecall;
    function Get_IDCountry: WideString; safecall;
    procedure Set_DLTrackII(const Param1: WideString); safecall;
    function Get_DLTrackII: WideString; safecall;
    function Get_ManagerNum: WideString; safecall;
    procedure Set_ManagerNum(const Param1: WideString); safecall;
    function Get_CashierNum: WideString; safecall;
    procedure Set_CashierNum(const Param1: WideString); safecall;
    function GetTroutD: WideString; safecall;
    function GetRespCode: WideString; safecall;
    function GetResult: WideString; safecall;
    function GetReference: WideString; safecall;
    function GetApproved: WordBool; safecall;
    function GetCaptured: WordBool; safecall;
    function GetAuth: WideString; safecall;
    function GetTraceID: WideString; safecall;
    function GetImageStatus: WideString; safecall;
    function GetResultCode: WideString; safecall;
    function GetTransNum: WideString; safecall;
    function GetReturnCheckNote: WideString; safecall;
    function GetReturnCheckFee: WideString; safecall;
    function GetErrorCode: Integer; safecall;
    function GetErrorDesc: WideString; safecall;
    function GetXMLRequest: WideString; safecall;
    function GetXMLResponse: WideString; safecall;
    function VerifyAmount: WordBool; safecall;
    function Send(var FileType: FileType): OleVariant; safecall;
    function Cancel: OleVariant; safecall;
    function DeleteUserFiles: OleVariant; safecall;
    procedure Clear; safecall;
    function PccSysExists: WordBool; safecall;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Font: IFontDisp read Get_Font write _Set_Font;
    property BackStyle: Smallint read Get_BackStyle write Set_BackStyle;
    property BorderStyle: Smallint read Get_BorderStyle write Set_BorderStyle;
    property Services: ServicesType read Get_Services write Set_Services;
    property Action: WideString read Get_Action write Set_Action;
    property Processor: WideString read Get_Processor write Set_Processor;
    property CheckReaderCode: CheckReaderCode read Get_CheckReaderCode write Set_CheckReaderCode;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Drivers_License: WideString read Get_Drivers_License write Set_Drivers_License;
    property Phone_Number: WideString read Get_Phone_Number write Set_Phone_Number;
    property Account_Number: WideString read Get_Account_Number write Set_Account_Number;
    property Manual: WideString read Get_Manual write Set_Manual;
    property AdjustmentAmount: WideString read Get_AdjustmentAmount write Set_AdjustmentAmount;
    property Amount: WideString read Get_Amount write Set_Amount;
    property Transit_Number: WideString read Get_Transit_Number write Set_Transit_Number;
    property State: WideString read Get_State write Set_State;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property Multi: WideString read Get_Multi write Set_Multi;
    property User: WideString read Get_User write Set_User;
    property Path: WideString read Get_Path write Set_Path;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property Check_Number: WideString read Get_Check_Number write Set_Check_Number;
    property Birth_Date: WideString read Get_Birth_Date write Set_Birth_Date;
    property Cash_Back: WideString read Get_Cash_Back write Set_Cash_Back;
    property Manager_Card: WideString read Get_Manager_Card write Set_Manager_Card;
    property Zip_Code: WideString read Get_Zip_Code write Set_Zip_Code;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property XMLTrans: WordBool read Get_XMLTrans write Set_XMLTrans;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property MICR_DATA: WideString read Get_MICR_DATA write Set_MICR_DATA;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property CheckType: WideString read Get_CheckType write Set_CheckType;
    property CheckAccType: WideString read Get_CheckAccType write Set_CheckAccType;
    property MICRStatus: WideString read Get_MICRStatus write Set_MICRStatus;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property CustomerFirstName: WideString read Get_CustomerFirstName write Set_CustomerFirstName;
    property CustomerLastName: WideString read Get_CustomerLastName write Set_CustomerLastName;
    property CustomerStreet: WideString read Get_CustomerStreet write Set_CustomerStreet;
    property CustomerCity: WideString read Get_CustomerCity write Set_CustomerCity;
    property IDType: WideString read Get_IDType write Set_IDType;
    property IDCountry: WideString read Get_IDCountry write Set_IDCountry;
    property DLTrackII: WideString read Get_DLTrackII write Set_DLTrackII;
    property ManagerNum: WideString read Get_ManagerNum write Set_ManagerNum;
    property CashierNum: WideString read Get_CashierNum write Set_CashierNum;
  end;

// *********************************************************************//
// DispIntf:  _CheckDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B1C4E3B9-DEA4-4357-A41C-4D496FDAD869}
// *********************************************************************//
  _CheckDisp = dispinterface
    ['{B1C4E3B9-DEA4-4357-A41C-4D496FDAD869}']
    property BackColor: Integer dispid 1745027122;
    property ForeColor: Integer dispid 1745027121;
    property Enabled: WordBool dispid 1745027120;
    property Font: IFontDisp dispid 1745027119;
    property BackStyle: Smallint dispid 1745027118;
    property BorderStyle: Smallint dispid 1745027117;
    property Services: ServicesType dispid 1745027116;
    procedure Refresh; dispid 1610809395;
    property Action: WideString dispid 1745027115;
    property Processor: WideString dispid 1745027114;
    property CheckReaderCode: CheckReaderCode dispid 1745027113;
    property MerchantNumber: WideString dispid 1745027112;
    property Drivers_License: WideString dispid 1745027111;
    property Phone_Number: WideString dispid 1745027110;
    property Account_Number: WideString dispid 1745027109;
    property Manual: WideString dispid 1745027108;
    property AdjustmentAmount: WideString dispid 1745027107;
    property Amount: WideString dispid 1745027106;
    property Transit_Number: WideString dispid 1745027105;
    property State: WideString dispid 1745027104;
    property Ticket: WideString dispid 1745027103;
    property Multi: WideString dispid 1745027102;
    property User: WideString dispid 1745027101;
    property Path: WideString dispid 1745027100;
    property TimeOut: Integer dispid 1745027099;
    property Check_Number: WideString dispid 1745027098;
    property Birth_Date: WideString dispid 1745027097;
    property Cash_Back: WideString dispid 1745027096;
    property Manager_Card: WideString dispid 1745027095;
    property Zip_Code: WideString dispid 1745027094;
    property OutDelay: Single dispid 1745027093;
    property PrintReceipts: WideString dispid 1745027092;
    property XMLTrans: WordBool dispid 1745027091;
    property TroutD: WideString dispid 1745027090;
    property MICR_DATA: WideString dispid 1745027089;
    property IPAddress: WideString dispid 1745027088;
    property Port: Smallint dispid 1745027087;
    property EnableSSL: WordBool dispid 1745027086;
    property CommMethod: CommMethod dispid 1745027085;
    property CheckType: WideString dispid 1745027084;
    property CheckAccType: WideString dispid 1745027083;
    property MICRStatus: WideString dispid 1745027082;
    property CustomerName: WideString dispid 1745027081;
    property CustomerFirstName: WideString dispid 1745027080;
    property CustomerLastName: WideString dispid 1745027079;
    property CustomerStreet: WideString dispid 1745027078;
    property CustomerCity: WideString dispid 1745027077;
    property IDType: WideString dispid 1745027076;
    property IDCountry: WideString dispid 1745027075;
    property DLTrackII: WideString dispid 1745027074;
    property ManagerNum: WideString dispid 1745027073;
    property CashierNum: WideString dispid 1745027072;
    function GetTroutD: WideString; dispid 1610809396;
    function GetRespCode: WideString; dispid 1610809397;
    function GetResult: WideString; dispid 1610809398;
    function GetReference: WideString; dispid 1610809399;
    function GetApproved: WordBool; dispid 1610809400;
    function GetCaptured: WordBool; dispid 1610809401;
    function GetAuth: WideString; dispid 1610809402;
    function GetTraceID: WideString; dispid 1610809403;
    function GetImageStatus: WideString; dispid 1610809404;
    function GetResultCode: WideString; dispid 1610809405;
    function GetTransNum: WideString; dispid 1610809406;
    function GetReturnCheckNote: WideString; dispid 1610809407;
    function GetReturnCheckFee: WideString; dispid 1610809408;
    function GetErrorCode: Integer; dispid 1610809409;
    function GetErrorDesc: WideString; dispid 1610809410;
    function GetXMLRequest: WideString; dispid 1610809411;
    function GetXMLResponse: WideString; dispid 1610809412;
    function VerifyAmount: WordBool; dispid 1610809414;
    function Send(var FileType: FileType): OleVariant; dispid 1610809415;
    function Cancel: OleVariant; dispid 1610809416;
    function DeleteUserFiles: OleVariant; dispid 1610809417;
    procedure Clear; dispid 1610809420;
    function PccSysExists: WordBool; dispid 1610809426;
  end;

// *********************************************************************//
// DispIntf:  __Check
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {2D0EC6BE-A510-463D-AAFF-FB48E0D44CC2}
// *********************************************************************//
  __Check = dispinterface
    ['{2D0EC6BE-A510-463D-AAFF-FB48E0D44CC2}']
    procedure Resize; dispid 1;
    procedure Click; dispid 2;
    procedure DblClick; dispid 3;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid 4;
    procedure KeyPress(var KeyAscii: Smallint); dispid 5;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid 6;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 7;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 8;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 9;
  end;

// *********************************************************************//
// Interface: _Gift
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {80DFC293-8409-4ED3-A459-EDB8F43F974D}
// *********************************************************************//
  _Gift = interface(IDispatch)
    ['{80DFC293-8409-4ED3-A459-EDB8F43F974D}']
    procedure Set_Demo(Param1: WordBool); safecall;
    function Get_Demo: WordBool; safecall;
    procedure Set_PrintReceipts(const Param1: WideString); safecall;
    function Get_PrintReceipts: WideString; safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(Param1: Integer); safecall;
    function Get_ForeColor: Integer; safecall;
    procedure Set_ForeColor(Param1: Integer); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(Param1: WordBool); safecall;
    function Get_Font: IFontDisp; safecall;
    procedure _Set_Font(const Param1: IFontDisp); safecall;
    function Get_BackStyle: Smallint; safecall;
    procedure Set_BackStyle(Param1: Smallint); safecall;
    function Get_BorderStyle: Smallint; safecall;
    procedure Set_BorderStyle(Param1: Smallint); safecall;
    function Get_PromoCode: WideString; safecall;
    procedure Set_PromoCode(const Param1: WideString); safecall;
    function Get_Partial: WordBool; safecall;
    procedure Set_Partial(Param1: WordBool); safecall;
    procedure Set_Points(const Param1: WideString); safecall;
    function Get_Points: WideString; safecall;
    procedure Set_CashierID(const Param1: WideString); safecall;
    function Get_CashierID: WideString; safecall;
    procedure Set_Authcode(const Param1: WideString); safecall;
    function Get_Authcode: WideString; safecall;
    procedure Set_OldCard(const Param1: WideString); safecall;
    function Get_OldCard: WideString; safecall;
    procedure Set_Loyalty(Param1: WordBool); safecall;
    function Get_Loyalty: WordBool; safecall;
    procedure Set_TIP(const Param1: WideString); safecall;
    function Get_TIP: WideString; safecall;
    procedure Set_Refund(const Param1: WideString); safecall;
    function Get_Refund: WideString; safecall;
    procedure Set_RFID(const Param1: WideString); safecall;
    function Get_RFID: WideString; safecall;
    procedure Set_Industry(const Param1: WideString); safecall;
    function Get_Industry: WideString; safecall;
    function Get_Force: WordBool; safecall;
    procedure Set_Force(Param1: WordBool); safecall;
    function Get_ExpDate: WideString; safecall;
    procedure Set_ExpDate(const Param1: WideString); safecall;
    procedure Set_LastValidDate(const Param1: WideString); safecall;
    function Get_LastValidDate: WideString; safecall;
    procedure Set_TotalCardNum(const Param1: WideString); safecall;
    function Get_TotalCardNum: WideString; safecall;
    procedure Set_IPAddress(const Param1: WideString); safecall;
    function Get_IPAddress: WideString; safecall;
    procedure Set_Port(Param1: Smallint); safecall;
    function Get_Port: Smallint; safecall;
    procedure Set_EnableSSL(Param1: WordBool); safecall;
    function Get_EnableSSL: WordBool; safecall;
    function Get_CommMethod: CommMethod; safecall;
    procedure Set_CommMethod(Param1: CommMethod); safecall;
    function Get_Ticket: WideString; safecall;
    procedure Set_Ticket(const Param1: WideString); safecall;
    procedure Set_CardSeqNum(const Param1: WideString); safecall;
    function Get_CardSeqNum: WideString; safecall;
    function Get_OutDelay: Single; safecall;
    procedure Set_OutDelay(Param1: Single); safecall;
    function Get_Action: WideString; safecall;
    procedure Set_Action(const Param1: WideString); safecall;
    function Get_XMLTran: WordBool; safecall;
    procedure Set_XMLTran(Param1: WordBool); safecall;
    function GetTroutD: WideString; safecall;
    function Get_TroutD: WideString; safecall;
    procedure Set_TroutD(const Param1: WideString); safecall;
    function Get_CheckCard: WordBool; safecall;
    procedure Set_CheckCard(Param1: WordBool); safecall;
    function Get_Amount: WideString; safecall;
    procedure Set_Amount(const Param1: WideString); safecall;
    function Get_Card: WideString; safecall;
    procedure Set_Card(const Param1: WideString); safecall;
    function Get_Manual: Integer; safecall;
    procedure Set_Manual(Param1: Integer); safecall;
    function Get_MerchantNumber: WideString; safecall;
    procedure Set_MerchantNumber(const Param1: WideString); safecall;
    function Get_Path: WideString; safecall;
    procedure Set_Path(const Param1: WideString); safecall;
    function Get_Processor: WideString; safecall;
    procedure Set_Processor(const Param1: WideString); safecall;
    function Get_TimeOut: Integer; safecall;
    procedure Set_TimeOut(Param1: Integer); safecall;
    function Get_Track: WideString; safecall;
    procedure Set_Track(const Param1: WideString); safecall;
    function Get_User: WideString; safecall;
    procedure Set_User(const Param1: WideString); safecall;
    function Get_GratuityAmount: WideString; safecall;
    procedure Set_GratuityAmount(const Param1: WideString); safecall;
    procedure Set_VirtualGiftCardFlag(Param1: WordBool); safecall;
    function Get_VirtualGiftCardFlag: WordBool; safecall;
    function Get_GiftPin: WideString; safecall;
    procedure Set_GiftPin(const Param1: WideString); safecall;
    procedure Set_Multi(const Param1: WideString); safecall;
    function Get_Multi: WideString; safecall;
    procedure Set_TableNumber(const Param1: WideString); safecall;
    function Get_TableNumber: WideString; safecall;
    procedure Set_TrackI(const Param1: WideString); safecall;
    function Get_TrackI: WideString; safecall;
    function GetAuth: WideString; safecall;
    function GetRespCode: WideString; safecall;
    function GetCaptured: WordBool; safecall;
    function GetPointsCount: WideString; safecall;
    function GetPointsTotalAmount: WideString; safecall;
    function GetSaleCount: WideString; safecall;
    function GetSaleTotalAmount: WideString; safecall;
    function GetTIM: WideString; safecall;
    function GetTipCount: WideString; safecall;
    function GetTipTotalAmount: WideString; safecall;
    function GetTransDateTime: WideString; safecall;
    function GetUpdateData: WideString; safecall;
    function GetVoidBalance: WideString; safecall;
    function GetVoidCount: WideString; safecall;
    function GetVoidTotalAmount: WideString; safecall;
    function GetActivationCount: WideString; safecall;
    function GetActivationTotalAmount: WideString; safecall;
    function GetAddPointsCount: WideString; safecall;
    function GetAddPointsTotalAmount: WideString; safecall;
    function GetAddValueCount: WideString; safecall;
    function GetAddValueTotalAmount: WideString; safecall;
    function GetAmountDue: WideString; safecall;
    function GetAuthAmount: WideString; safecall;
    function GetBalanceTransferCount: WideString; safecall;
    function GetBalanceTransferTotalAmount: WideString; safecall;
    function GetCashBack: WideString; safecall;
    function GetCreditCount: WideString; safecall;
    function GetCreditTotalAmount: WideString; safecall;
    function GetExp: WideString; safecall;
    function GetRefNumber: WideString; safecall;
    function GetResult: WideString; safecall;
    function GetRet: WideString; safecall;
    function GetTI: WideString; safecall;
    function GetTicket: WideString; safecall;
    function GetTransNum: WideString; safecall;
    function GetGiftCardIssuer: WideString; safecall;
    function GetGiftPin: WideString; safecall;
    function GetMiscMessage: WideString; safecall;
    function GetPointsBalance: WideString; safecall;
    function GetPreAuthCount: WideString; safecall;
    function GetPreAuthAmount: WideString; safecall;
    function GetPostAuthCount: WideString; safecall;
    function GetPostAuthAmount: WideString; safecall;
    function GetIssuanceCount: WideString; safecall;
    function GetIssuanceTotalAmount: WideString; safecall;
    function GetDeactivateCount: WideString; safecall;
    function GetDeactivateTotalAmount: WideString; safecall;
    function GetBalanceMergeCount: WideString; safecall;
    function GetBalanceMergeTotalAmount: WideString; safecall;
    function GetBalanceAdjustCount: WideString; safecall;
    function GetBalanceAdjustTotalAmount: WideString; safecall;
    function GetReportLostStolenCount: WideString; safecall;
    function GetReportLostStolenTotalAmount: WideString; safecall;
    function GetCashoutCount: WideString; safecall;
    function GetCashoutTotalAmount: WideString; safecall;
    function GetReactivateCount: WideString; safecall;
    function GetReactivateTotalAmount: WideString; safecall;
    function VerifyMerchantNumber: WordBool; safecall;
    function VerifyProcessor: WordBool; safecall;
    function Send(var FileType: FileType): OleVariant; safecall;
    function Cancel: OleVariant; safecall;
    function DeleteUserFiles: OleVariant; safecall;
    function GetGiftCardType(var CardNumber: WideString): WideString; safecall;
    function GetErrorCode: Integer; safecall;
    function GetErrorDesc: WideString; safecall;
    function GetParseData(var Data: WideString): Smallint; safecall;
    function GetXMLResponse: WideString; safecall;
    function VerifyAmount: WordBool; safecall;
    function VerifyAmount2: WordBool; safecall;
    function VerifyGiftCard(var CardNumber: WideString): WordBool; safecall;
    function ValidCardLength(var CardNumber: WideString): WordBool; safecall;
    function PccSysExists: WordBool; safecall;
    procedure Clear; safecall;
    function Abort: WordBool; safecall;
    function ValidDate: WordBool; safecall;
    function VerifyExpDate: WordBool; safecall;
    function GetGiftCardBalance: WideString; safecall;
    function ValidIssuer(var CardIssuer: WideString): WordBool; safecall;
    function GetXMLRequest: WideString; safecall;
    property Demo: WordBool read Get_Demo write Set_Demo;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Font: IFontDisp read Get_Font write _Set_Font;
    property BackStyle: Smallint read Get_BackStyle write Set_BackStyle;
    property BorderStyle: Smallint read Get_BorderStyle write Set_BorderStyle;
    property PromoCode: WideString read Get_PromoCode write Set_PromoCode;
    property Partial: WordBool read Get_Partial write Set_Partial;
    property Points: WideString read Get_Points write Set_Points;
    property CashierID: WideString read Get_CashierID write Set_CashierID;
    property Authcode: WideString read Get_Authcode write Set_Authcode;
    property OldCard: WideString read Get_OldCard write Set_OldCard;
    property Loyalty: WordBool read Get_Loyalty write Set_Loyalty;
    property TIP: WideString read Get_TIP write Set_TIP;
    property Refund: WideString read Get_Refund write Set_Refund;
    property RFID: WideString read Get_RFID write Set_RFID;
    property Industry: WideString read Get_Industry write Set_Industry;
    property Force: WordBool read Get_Force write Set_Force;
    property ExpDate: WideString read Get_ExpDate write Set_ExpDate;
    property LastValidDate: WideString read Get_LastValidDate write Set_LastValidDate;
    property TotalCardNum: WideString read Get_TotalCardNum write Set_TotalCardNum;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property CardSeqNum: WideString read Get_CardSeqNum write Set_CardSeqNum;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
    property Action: WideString read Get_Action write Set_Action;
    property XMLTran: WordBool read Get_XMLTran write Set_XMLTran;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property CheckCard: WordBool read Get_CheckCard write Set_CheckCard;
    property Amount: WideString read Get_Amount write Set_Amount;
    property Card: WideString read Get_Card write Set_Card;
    property Manual: Integer read Get_Manual write Set_Manual;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
    property Processor: WideString read Get_Processor write Set_Processor;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property Track: WideString read Get_Track write Set_Track;
    property User: WideString read Get_User write Set_User;
    property GratuityAmount: WideString read Get_GratuityAmount write Set_GratuityAmount;
    property VirtualGiftCardFlag: WordBool read Get_VirtualGiftCardFlag write Set_VirtualGiftCardFlag;
    property GiftPin: WideString read Get_GiftPin write Set_GiftPin;
    property Multi: WideString read Get_Multi write Set_Multi;
    property TableNumber: WideString read Get_TableNumber write Set_TableNumber;
    property TrackI: WideString read Get_TrackI write Set_TrackI;
  end;

// *********************************************************************//
// DispIntf:  _GiftDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {80DFC293-8409-4ED3-A459-EDB8F43F974D}
// *********************************************************************//
  _GiftDisp = dispinterface
    ['{80DFC293-8409-4ED3-A459-EDB8F43F974D}']
    property Demo: WordBool dispid 1745027120;
    property PrintReceipts: WideString dispid 1745027119;
    property BackColor: Integer dispid 1745027118;
    property ForeColor: Integer dispid 1745027117;
    property Enabled: WordBool dispid 1745027116;
    property Font: IFontDisp dispid 1745027115;
    property BackStyle: Smallint dispid 1745027114;
    property BorderStyle: Smallint dispid 1745027113;
    property PromoCode: WideString dispid 1745027112;
    property Partial: WordBool dispid 1745027111;
    property Points: WideString dispid 1745027110;
    property CashierID: WideString dispid 1745027109;
    property Authcode: WideString dispid 1745027108;
    property OldCard: WideString dispid 1745027107;
    property Loyalty: WordBool dispid 1745027106;
    property TIP: WideString dispid 1745027105;
    property Refund: WideString dispid 1745027104;
    property RFID: WideString dispid 1745027103;
    property Industry: WideString dispid 1745027102;
    property Force: WordBool dispid 1745027101;
    property ExpDate: WideString dispid 1745027100;
    property LastValidDate: WideString dispid 1745027099;
    property TotalCardNum: WideString dispid 1745027098;
    property IPAddress: WideString dispid 1745027097;
    property Port: Smallint dispid 1745027096;
    property EnableSSL: WordBool dispid 1745027095;
    property CommMethod: CommMethod dispid 1745027094;
    property Ticket: WideString dispid 1745027093;
    property CardSeqNum: WideString dispid 1745027092;
    property OutDelay: Single dispid 1745027091;
    property Action: WideString dispid 1745027090;
    property XMLTran: WordBool dispid 1745027089;
    function GetTroutD: WideString; dispid 1610809394;
    property TroutD: WideString dispid 1745027088;
    property CheckCard: WordBool dispid 1745027087;
    property Amount: WideString dispid 1745027086;
    property Card: WideString dispid 1745027085;
    property Manual: Integer dispid 1745027084;
    property MerchantNumber: WideString dispid 1745027083;
    property Path: WideString dispid 1745027082;
    property Processor: WideString dispid 1745027081;
    property TimeOut: Integer dispid 1745027080;
    property Track: WideString dispid 1745027079;
    property User: WideString dispid 1745027078;
    property GratuityAmount: WideString dispid 1745027077;
    property VirtualGiftCardFlag: WordBool dispid 1745027076;
    property GiftPin: WideString dispid 1745027075;
    property Multi: WideString dispid 1745027074;
    property TableNumber: WideString dispid 1745027073;
    property TrackI: WideString dispid 1745027072;
    function GetAuth: WideString; dispid 1610809395;
    function GetRespCode: WideString; dispid 1610809396;
    function GetCaptured: WordBool; dispid 1610809397;
    function GetPointsCount: WideString; dispid 1610809398;
    function GetPointsTotalAmount: WideString; dispid 1610809399;
    function GetSaleCount: WideString; dispid 1610809400;
    function GetSaleTotalAmount: WideString; dispid 1610809401;
    function GetTIM: WideString; dispid 1610809402;
    function GetTipCount: WideString; dispid 1610809403;
    function GetTipTotalAmount: WideString; dispid 1610809404;
    function GetTransDateTime: WideString; dispid 1610809405;
    function GetUpdateData: WideString; dispid 1610809406;
    function GetVoidBalance: WideString; dispid 1610809407;
    function GetVoidCount: WideString; dispid 1610809408;
    function GetVoidTotalAmount: WideString; dispid 1610809409;
    function GetActivationCount: WideString; dispid 1610809410;
    function GetActivationTotalAmount: WideString; dispid 1610809411;
    function GetAddPointsCount: WideString; dispid 1610809412;
    function GetAddPointsTotalAmount: WideString; dispid 1610809413;
    function GetAddValueCount: WideString; dispid 1610809414;
    function GetAddValueTotalAmount: WideString; dispid 1610809415;
    function GetAmountDue: WideString; dispid 1610809416;
    function GetAuthAmount: WideString; dispid 1610809417;
    function GetBalanceTransferCount: WideString; dispid 1610809418;
    function GetBalanceTransferTotalAmount: WideString; dispid 1610809419;
    function GetCashBack: WideString; dispid 1610809420;
    function GetCreditCount: WideString; dispid 1610809421;
    function GetCreditTotalAmount: WideString; dispid 1610809422;
    function GetExp: WideString; dispid 1610809423;
    function GetRefNumber: WideString; dispid 1610809424;
    function GetResult: WideString; dispid 1610809425;
    function GetRet: WideString; dispid 1610809426;
    function GetTI: WideString; dispid 1610809427;
    function GetTicket: WideString; dispid 1610809428;
    function GetTransNum: WideString; dispid 1610809429;
    function GetGiftCardIssuer: WideString; dispid 1610809430;
    function GetGiftPin: WideString; dispid 1610809431;
    function GetMiscMessage: WideString; dispid 1610809432;
    function GetPointsBalance: WideString; dispid 1610809433;
    function GetPreAuthCount: WideString; dispid 1610809434;
    function GetPreAuthAmount: WideString; dispid 1610809435;
    function GetPostAuthCount: WideString; dispid 1610809436;
    function GetPostAuthAmount: WideString; dispid 1610809437;
    function GetIssuanceCount: WideString; dispid 1610809438;
    function GetIssuanceTotalAmount: WideString; dispid 1610809439;
    function GetDeactivateCount: WideString; dispid 1610809440;
    function GetDeactivateTotalAmount: WideString; dispid 1610809441;
    function GetBalanceMergeCount: WideString; dispid 1610809442;
    function GetBalanceMergeTotalAmount: WideString; dispid 1610809443;
    function GetBalanceAdjustCount: WideString; dispid 1610809444;
    function GetBalanceAdjustTotalAmount: WideString; dispid 1610809445;
    function GetReportLostStolenCount: WideString; dispid 1610809446;
    function GetReportLostStolenTotalAmount: WideString; dispid 1610809447;
    function GetCashoutCount: WideString; dispid 1610809448;
    function GetCashoutTotalAmount: WideString; dispid 1610809449;
    function GetReactivateCount: WideString; dispid 1610809450;
    function GetReactivateTotalAmount: WideString; dispid 1610809451;
    function VerifyMerchantNumber: WordBool; dispid 1610809452;
    function VerifyProcessor: WordBool; dispid 1610809453;
    function Send(var FileType: FileType): OleVariant; dispid 1610809454;
    function Cancel: OleVariant; dispid 1610809456;
    function DeleteUserFiles: OleVariant; dispid 1610809457;
    function GetGiftCardType(var CardNumber: WideString): WideString; dispid 1610809458;
    function GetErrorCode: Integer; dispid 1610809459;
    function GetErrorDesc: WideString; dispid 1610809460;
    function GetParseData(var Data: WideString): Smallint; dispid 1610809461;
    function GetXMLResponse: WideString; dispid 1610809462;
    function VerifyAmount: WordBool; dispid 1610809463;
    function VerifyAmount2: WordBool; dispid 1610809464;
    function VerifyGiftCard(var CardNumber: WideString): WordBool; dispid 1610809465;
    function ValidCardLength(var CardNumber: WideString): WordBool; dispid 1610809466;
    function PccSysExists: WordBool; dispid 1610809467;
    procedure Clear; dispid 1610809468;
    function Abort: WordBool; dispid 1610809475;
    function ValidDate: WordBool; dispid 1610809476;
    function VerifyExpDate: WordBool; dispid 1610809477;
    function GetGiftCardBalance: WideString; dispid 1610809478;
    function ValidIssuer(var CardIssuer: WideString): WordBool; dispid 1610809479;
    function GetXMLRequest: WideString; dispid 1610809483;
  end;

// *********************************************************************//
// DispIntf:  __Gift
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {279DEAA9-DA50-47F0-B470-4E17C125053D}
// *********************************************************************//
  __Gift = dispinterface
    ['{279DEAA9-DA50-47F0-B470-4E17C125053D}']
    procedure Resize; dispid 1;
    procedure Click; dispid 2;
    procedure DblClick; dispid 3;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid 4;
    procedure KeyPress(var KeyAscii: Smallint); dispid 5;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid 6;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 7;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 8;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 9;
  end;

// *********************************************************************//
// Interface: _Debit
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CF9FE2C2-ED1D-4390-A1C3-04DABEDD0DCF}
// *********************************************************************//
  _Debit = interface(IDispatch)
    ['{CF9FE2C2-ED1D-4390-A1C3-04DABEDD0DCF}']
    function Get_Action: Integer; safecall;
    procedure Set_Action(Param1: Integer); safecall;
    function Get_Amount: WideString; safecall;
    procedure Set_Amount(const Param1: WideString); safecall;
    function Get_Billpay: WideString; safecall;
    procedure Set_Billpay(const Param1: WideString); safecall;
    function Get_Card: WideString; safecall;
    procedure Set_Card(const Param1: WideString); safecall;
    procedure Set_ExpDate(const Param1: WideString); safecall;
    function Get_ExpDate: WideString; safecall;
    function Get_Manual: Integer; safecall;
    procedure Set_Manual(Param1: Integer); safecall;
    function Get_member: WideString; safecall;
    procedure Set_member(const Param1: WideString); safecall;
    function Get_MerchantNumber: WideString; safecall;
    procedure Set_MerchantNumber(const Param1: WideString); safecall;
    function Get_Path: WideString; safecall;
    procedure Set_Path(const Param1: WideString); safecall;
    function Get_Processor: WideString; safecall;
    procedure Set_Processor(const Param1: WideString); safecall;
    procedure Set_PrintReceipts(const Param1: WideString); safecall;
    function Get_PrintReceipts: WideString; safecall;
    function Get_TimeOut: Integer; safecall;
    procedure Set_TimeOut(Param1: Integer); safecall;
    function Get_Track: WideString; safecall;
    procedure Set_Track(const Param1: WideString); safecall;
    function Get_User: WideString; safecall;
    procedure Set_User(const Param1: WideString); safecall;
    function Get_Pin: WideString; safecall;
    procedure Set_Pin(const Param1: WideString); safecall;
    function Get_KeySerialNumber: WideString; safecall;
    procedure Set_KeySerialNumber(const Param1: WideString); safecall;
    function Get_Ticket: WideString; safecall;
    procedure Set_Ticket(const Param1: WideString); safecall;
    function Get_CashBack: WideString; safecall;
    procedure Set_CashBack(const Param1: WideString); safecall;
    function Get_Reference: WideString; safecall;
    procedure Set_Reference(const Param1: WideString); safecall;
    function Get_RFID: WideString; safecall;
    procedure Set_RFID(const Param1: WideString); safecall;
    function Get_OutDelay: Single; safecall;
    procedure Set_OutDelay(Param1: Single); safecall;
    function Get_TransNum: WideString; safecall;
    procedure Set_TransNum(const Param1: WideString); safecall;
    function Get_ShiftID: WideString; safecall;
    procedure Set_ShiftID(const Param1: WideString); safecall;
    function Get_LanguageCode: WideString; safecall;
    procedure Set_LanguageCode(const Param1: WideString); safecall;
    function Get_MACData: WideString; safecall;
    procedure Set_MACData(const Param1: WideString); safecall;
    function Get_DebitType: WideString; safecall;
    procedure Set_DebitType(const Param1: WideString); safecall;
    function Get_FoodStamp: WordBool; safecall;
    procedure Set_FoodStamp(Param1: WordBool); safecall;
    function Get_Authcode: WideString; safecall;
    procedure Set_Authcode(const Param1: WideString); safecall;
    procedure Set_IPAddress(const Param1: WideString); safecall;
    function Get_IPAddress: WideString; safecall;
    procedure Set_Port(Param1: Smallint); safecall;
    function Get_Port: Smallint; safecall;
    procedure Set_EnableSSL(Param1: WordBool); safecall;
    function Get_EnableSSL: WordBool; safecall;
    function Get_Command: WideString; safecall;
    procedure Set_Command(const Param1: WideString); safecall;
    function Get_CommMethod: CommMethod; safecall;
    procedure Set_CommMethod(Param1: CommMethod); safecall;
    function Get_Voucher: WideString; safecall;
    procedure Set_Voucher(const Param1: WideString); safecall;
    function Get_Gratuity: WideString; safecall;
    procedure Set_Gratuity(const Param1: WideString); safecall;
    function Get_XMLTran: WordBool; safecall;
    procedure Set_XMLTran(Param1: WordBool); safecall;
    function Get_OrigPurchData: WideString; safecall;
    procedure Set_OrigPurchData(const Param1: WideString); safecall;
    function Get_TroutD: WideString; safecall;
    procedure Set_TroutD(const Param1: WideString); safecall;
    function Get_PumpNumber: WideString; safecall;
    procedure Set_PumpNumber(const Param1: WideString); safecall;
    function Get_SurchargeAmount: WideString; safecall;
    procedure Set_SurchargeAmount(const Param1: WideString); safecall;
    function GetApproved: WordBool; safecall;
    function GetTI: WideString; safecall;
    function GetMSI: WideString; safecall;
    function GetTermFee: WideString; safecall;
    function GetTraceNum: WideString; safecall;
    function GetAvlBalance: WideString; safecall;
    function GetCaptured: WordBool; safecall;
    function GetTroutD: WideString; safecall;
    function GetTransNum: WideString; safecall;
    function GetEBTFoodBalance: WideString; safecall;
    function GetEBTCashBalance: WideString; safecall;
    function GetAuthAmount: OleVariant; safecall;
    function GetAmountDue: OleVariant; safecall;
    function GetDCAvailBalance: OleVariant; safecall;
    function GetTraceNumber: OleVariant; safecall;
    function GetTransactionReferenceNumber: OleVariant; safecall;
    function GetSurchargeAmount: OleVariant; safecall;
    function GetErrorDesc: WideString; safecall;
    function GetErrorCode: Integer; safecall;
    function DeleteUserFiles: OleVariant; safecall;
    function PccSysExists: WordBool; safecall;
    function ClearVariables: OleVariant; safecall;
    procedure Clear; safecall;
    procedure UserControl_InitProperties; safecall;
    function GetMerchantInfo: WideString; safecall;
    function GetAuth: OleVariant; safecall;
    function GetRefNumber: WideString; safecall;
    function GetResult: OleVariant; safecall;
    function GetXMLResponse: WideString; safecall;
    function Send(var FileType: FileType): OleVariant; safecall;
    function VerifyAmount: WordBool; safecall;
    function GetAuxRespCode: WideString; safecall;
    function GetPOSSequenceNumber(var compareCSN: WideString): WideString; safecall;
    function GetXMLRequest: WideString; safecall;
    property Action: Integer read Get_Action write Set_Action;
    property Amount: WideString read Get_Amount write Set_Amount;
    property Billpay: WideString read Get_Billpay write Set_Billpay;
    property Card: WideString read Get_Card write Set_Card;
    property ExpDate: WideString read Get_ExpDate write Set_ExpDate;
    property Manual: Integer read Get_Manual write Set_Manual;
    property member: WideString read Get_member write Set_member;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
    property Processor: WideString read Get_Processor write Set_Processor;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property Track: WideString read Get_Track write Set_Track;
    property User: WideString read Get_User write Set_User;
    property Pin: WideString read Get_Pin write Set_Pin;
    property KeySerialNumber: WideString read Get_KeySerialNumber write Set_KeySerialNumber;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property CashBack: WideString read Get_CashBack write Set_CashBack;
    property Reference: WideString read Get_Reference write Set_Reference;
    property RFID: WideString read Get_RFID write Set_RFID;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
    property TransNum: WideString read Get_TransNum write Set_TransNum;
    property ShiftID: WideString read Get_ShiftID write Set_ShiftID;
    property LanguageCode: WideString read Get_LanguageCode write Set_LanguageCode;
    property MACData: WideString read Get_MACData write Set_MACData;
    property DebitType: WideString read Get_DebitType write Set_DebitType;
    property FoodStamp: WordBool read Get_FoodStamp write Set_FoodStamp;
    property Authcode: WideString read Get_Authcode write Set_Authcode;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property Command: WideString read Get_Command write Set_Command;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property Voucher: WideString read Get_Voucher write Set_Voucher;
    property Gratuity: WideString read Get_Gratuity write Set_Gratuity;
    property XMLTran: WordBool read Get_XMLTran write Set_XMLTran;
    property OrigPurchData: WideString read Get_OrigPurchData write Set_OrigPurchData;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property PumpNumber: WideString read Get_PumpNumber write Set_PumpNumber;
    property SurchargeAmount: WideString read Get_SurchargeAmount write Set_SurchargeAmount;
  end;

// *********************************************************************//
// DispIntf:  _DebitDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CF9FE2C2-ED1D-4390-A1C3-04DABEDD0DCF}
// *********************************************************************//
  _DebitDisp = dispinterface
    ['{CF9FE2C2-ED1D-4390-A1C3-04DABEDD0DCF}']
    property Action: Integer dispid 1745027111;
    property Amount: WideString dispid 1745027110;
    property Billpay: WideString dispid 1745027109;
    property Card: WideString dispid 1745027108;
    property ExpDate: WideString dispid 1745027107;
    property Manual: Integer dispid 1745027106;
    property member: WideString dispid 1745027105;
    property MerchantNumber: WideString dispid 1745027104;
    property Path: WideString dispid 1745027103;
    property Processor: WideString dispid 1745027102;
    property PrintReceipts: WideString dispid 1745027101;
    property TimeOut: Integer dispid 1745027100;
    property Track: WideString dispid 1745027099;
    property User: WideString dispid 1745027098;
    property Pin: WideString dispid 1745027097;
    property KeySerialNumber: WideString dispid 1745027096;
    property Ticket: WideString dispid 1745027095;
    property CashBack: WideString dispid 1745027094;
    property Reference: WideString dispid 1745027093;
    property RFID: WideString dispid 1745027092;
    property OutDelay: Single dispid 1745027091;
    property TransNum: WideString dispid 1745027090;
    property ShiftID: WideString dispid 1745027089;
    property LanguageCode: WideString dispid 1745027088;
    property MACData: WideString dispid 1745027087;
    property DebitType: WideString dispid 1745027086;
    property FoodStamp: WordBool dispid 1745027085;
    property Authcode: WideString dispid 1745027084;
    property IPAddress: WideString dispid 1745027083;
    property Port: Smallint dispid 1745027082;
    property EnableSSL: WordBool dispid 1745027081;
    property Command: WideString dispid 1745027080;
    property CommMethod: CommMethod dispid 1745027079;
    property Voucher: WideString dispid 1745027078;
    property Gratuity: WideString dispid 1745027077;
    property XMLTran: WordBool dispid 1745027076;
    property OrigPurchData: WideString dispid 1745027075;
    property TroutD: WideString dispid 1745027074;
    property PumpNumber: WideString dispid 1745027073;
    property SurchargeAmount: WideString dispid 1745027072;
    function GetApproved: WordBool; dispid 1610809384;
    function GetTI: WideString; dispid 1610809385;
    function GetMSI: WideString; dispid 1610809386;
    function GetTermFee: WideString; dispid 1610809387;
    function GetTraceNum: WideString; dispid 1610809388;
    function GetAvlBalance: WideString; dispid 1610809389;
    function GetCaptured: WordBool; dispid 1610809390;
    function GetTroutD: WideString; dispid 1610809391;
    function GetTransNum: WideString; dispid 1610809392;
    function GetEBTFoodBalance: WideString; dispid 1610809393;
    function GetEBTCashBalance: WideString; dispid 1610809394;
    function GetAuthAmount: OleVariant; dispid 1610809395;
    function GetAmountDue: OleVariant; dispid 1610809396;
    function GetDCAvailBalance: OleVariant; dispid 1610809397;
    function GetTraceNumber: OleVariant; dispid 1610809398;
    function GetTransactionReferenceNumber: OleVariant; dispid 1610809399;
    function GetSurchargeAmount: OleVariant; dispid 1610809400;
    function GetErrorDesc: WideString; dispid 1610809401;
    function GetErrorCode: Integer; dispid 1610809402;
    function DeleteUserFiles: OleVariant; dispid 1610809403;
    function PccSysExists: WordBool; dispid 1610809405;
    function ClearVariables: OleVariant; dispid 1610809408;
    procedure Clear; dispid 1610809409;
    procedure UserControl_InitProperties; dispid 1610809410;
    function GetMerchantInfo: WideString; dispid 1610809411;
    function GetAuth: OleVariant; dispid 1610809412;
    function GetRefNumber: WideString; dispid 1610809413;
    function GetResult: OleVariant; dispid 1610809414;
    function GetXMLResponse: WideString; dispid 1610809415;
    function Send(var FileType: FileType): OleVariant; dispid 1610809416;
    function VerifyAmount: WordBool; dispid 1610809417;
    function GetAuxRespCode: WideString; dispid 1610809420;
    function GetPOSSequenceNumber(var compareCSN: WideString): WideString; dispid 1610809421;
    function GetXMLRequest: WideString; dispid 1610809422;
  end;

// *********************************************************************//
// DispIntf:  __Debit
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {0F15BA88-A983-4977-B6F2-E5339BED2F78}
// *********************************************************************//
  __Debit = dispinterface
    ['{0F15BA88-A983-4977-B6F2-E5339BED2F78}']
    procedure Click; dispid 1;
    procedure DblClick; dispid 2;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid 3;
    procedure KeyPress(var KeyAscii: Smallint); dispid 4;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid 5;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 6;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 7;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 8;
  end;

// *********************************************************************//
// Interface: _Batch
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82EA8AD8-A55E-47AD-90C7-CCBBF773622B}
// *********************************************************************//
  _Batch = interface(IDispatch)
    ['{82EA8AD8-A55E-47AD-90C7-CCBBF773622B}']
    procedure Set_MTS(Param1: WordBool); safecall;
    function Get_MTS: WordBool; safecall;
    function Get_Demo: WordBool; safecall;
    procedure Set_Demo(Param1: WordBool); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(Param1: Integer); safecall;
    function Get_ForeColor: Integer; safecall;
    procedure Set_ForeColor(Param1: Integer); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(Param1: WordBool); safecall;
    function Get_Font: IFontDisp; safecall;
    procedure _Set_Font(const Param1: IFontDisp); safecall;
    function Get_BackStyle: Smallint; safecall;
    procedure Set_BackStyle(Param1: Smallint); safecall;
    function Get_BorderStyle: Smallint; safecall;
    procedure Set_BorderStyle(Param1: Smallint); safecall;
    procedure Refresh; safecall;
    function Get_Processor: WideString; safecall;
    procedure Set_Processor(const Param1: WideString); safecall;
    function Get_MerchantNumber: WideString; safecall;
    procedure Set_MerchantNumber(const Param1: WideString); safecall;
    function Get_Path: WideString; safecall;
    procedure Set_Path(const Param1: WideString); safecall;
    function Get_ItemCount: WideString; safecall;
    procedure Set_ItemCount(const Param1: WideString); safecall;
    function Get_Balance: WideString; safecall;
    procedure Set_Balance(const Param1: WideString); safecall;
    function Get_Action: Single; safecall;
    procedure Set_Action(Param1: Single); safecall;
    function Get_BatchNumber: WideString; safecall;
    procedure Set_BatchNumber(const Param1: WideString); safecall;
    function Get_CIC: WideString; safecall;
    procedure Set_CIC(const Param1: WideString); safecall;
    function Get_Terminal: WideString; safecall;
    procedure Set_Terminal(const Param1: WideString); safecall;
    function Get_BatchDate: WideString; safecall;
    procedure Set_BatchDate(const Param1: WideString); safecall;
    function Get_BatchCloseType: WideString; safecall;
    procedure Set_BatchCloseType(const Param1: WideString); safecall;
    function Get_Response: WideString; safecall;
    procedure Set_Response(const Param1: WideString); safecall;
    function Get_Store: WideString; safecall;
    procedure Set_Store(const Param1: WideString); safecall;
    function Get_VisaMCAmount: WideString; safecall;
    procedure Set_VisaMCAmount(const Param1: WideString); safecall;
    function Get_VisaMCCount: WideString; safecall;
    procedure Set_VisaMCCount(const Param1: WideString); safecall;
    function Get_AmexAmount: WideString; safecall;
    procedure Set_AmexAmount(const Param1: WideString); safecall;
    function Get_AmexCount: WideString; safecall;
    procedure Set_AmexCount(const Param1: WideString); safecall;
    function Get_PurchaseAmount: WideString; safecall;
    procedure Set_PurchaseAmount(const Param1: WideString); safecall;
    function Get_PurchaseCount: WideString; safecall;
    procedure Set_PurchaseCount(const Param1: WideString); safecall;
    function Get_ReturnAmount: WideString; safecall;
    procedure Set_ReturnAmount(const Param1: WideString); safecall;
    function Get_ReturnCount: WideString; safecall;
    procedure Set_ReturnCount(const Param1: WideString); safecall;
    function Get_Cancel: WordBool; safecall;
    procedure Set_Cancel(Param1: WordBool); safecall;
    procedure Set_SplitProcessor(const Param1: WideString); safecall;
    function Get_SplitProcessor: WideString; safecall;
    function Get_TimeOut: Integer; safecall;
    procedure Set_TimeOut(Param1: Integer); safecall;
    function Get_User: WideString; safecall;
    procedure Set_User(const Param1: WideString); safecall;
    function Get_XMLTrans: WordBool; safecall;
    procedure Set_XMLTrans(Param1: WordBool); safecall;
    procedure Set_IPAddress(const Param1: WideString); safecall;
    function Get_IPAddress: WideString; safecall;
    procedure Set_Port(Param1: Smallint); safecall;
    function Get_Port: Smallint; safecall;
    procedure Set_EnableSSL(Param1: WordBool); safecall;
    function Get_EnableSSL: WordBool; safecall;
    function Get_CommMethod: CommMethod; safecall;
    procedure Set_CommMethod(Param1: CommMethod); safecall;
    function Get_OutDelay: Single; safecall;
    procedure Set_OutDelay(Param1: Single); safecall;
    function GetItemCount: WideString; safecall;
    function GetBatches: WideString; safecall;
    function GetRespCode: WideString; safecall;
    function GetBalance: WideString; safecall;
    function GetStatus: WideString; safecall;
    function GetProcessed: WordBool; safecall;
    function GetBatchNumber: WideString; safecall;
    function GetResult: WideString; safecall;
    function GetErrorDesc: WideString; safecall;
    function GetErrorCode: Integer; safecall;
    function GetXMLRequest: WideString; safecall;
    function GetMerchantNumber: WideString; safecall;
    function GetProcessor: WideString; safecall;
    function GetAccepted(var Record_: Smallint): WordBool; safecall;
    function GetSettleNumber: WideString; safecall;
    function GetSettleAmount: OleVariant; safecall;
    function GetXMLResponse: WideString; safecall;
    function DeleteUserFiles: OleVariant; safecall;
    function PccSysExists: WordBool; safecall;
    procedure Clear; safecall;
    function Send(var FileType: FileType): OleVariant; safecall;
    function GetSystemInfo(var Index: Smallint): OleVariant; safecall;
    function GetNumberIndexs: Smallint; safecall;
    function GetMerchantInfo: WideString; safecall;
    function GetFileExt: WideString; safecall;
    property MTS: WordBool read Get_MTS write Set_MTS;
    property Demo: WordBool read Get_Demo write Set_Demo;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Font: IFontDisp read Get_Font write _Set_Font;
    property BackStyle: Smallint read Get_BackStyle write Set_BackStyle;
    property BorderStyle: Smallint read Get_BorderStyle write Set_BorderStyle;
    property Processor: WideString read Get_Processor write Set_Processor;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
    property ItemCount: WideString read Get_ItemCount write Set_ItemCount;
    property Balance: WideString read Get_Balance write Set_Balance;
    property Action: Single read Get_Action write Set_Action;
    property BatchNumber: WideString read Get_BatchNumber write Set_BatchNumber;
    property CIC: WideString read Get_CIC write Set_CIC;
    property Terminal: WideString read Get_Terminal write Set_Terminal;
    property BatchDate: WideString read Get_BatchDate write Set_BatchDate;
    property BatchCloseType: WideString read Get_BatchCloseType write Set_BatchCloseType;
    property Response: WideString read Get_Response write Set_Response;
    property Store: WideString read Get_Store write Set_Store;
    property VisaMCAmount: WideString read Get_VisaMCAmount write Set_VisaMCAmount;
    property VisaMCCount: WideString read Get_VisaMCCount write Set_VisaMCCount;
    property AmexAmount: WideString read Get_AmexAmount write Set_AmexAmount;
    property AmexCount: WideString read Get_AmexCount write Set_AmexCount;
    property PurchaseAmount: WideString read Get_PurchaseAmount write Set_PurchaseAmount;
    property PurchaseCount: WideString read Get_PurchaseCount write Set_PurchaseCount;
    property ReturnAmount: WideString read Get_ReturnAmount write Set_ReturnAmount;
    property ReturnCount: WideString read Get_ReturnCount write Set_ReturnCount;
    property Cancel: WordBool read Get_Cancel write Set_Cancel;
    property SplitProcessor: WideString read Get_SplitProcessor write Set_SplitProcessor;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property User: WideString read Get_User write Set_User;
    property XMLTrans: WordBool read Get_XMLTrans write Set_XMLTrans;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
  end;

// *********************************************************************//
// DispIntf:  _BatchDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82EA8AD8-A55E-47AD-90C7-CCBBF773622B}
// *********************************************************************//
  _BatchDisp = dispinterface
    ['{82EA8AD8-A55E-47AD-90C7-CCBBF773622B}']
    property MTS: WordBool dispid 1745027110;
    property Demo: WordBool dispid 1745027109;
    property BackColor: Integer dispid 1745027108;
    property ForeColor: Integer dispid 1745027107;
    property Enabled: WordBool dispid 1745027106;
    property Font: IFontDisp dispid 1745027105;
    property BackStyle: Smallint dispid 1745027104;
    property BorderStyle: Smallint dispid 1745027103;
    procedure Refresh; dispid 1610809383;
    property Processor: WideString dispid 1745027102;
    property MerchantNumber: WideString dispid 1745027101;
    property Path: WideString dispid 1745027100;
    property ItemCount: WideString dispid 1745027099;
    property Balance: WideString dispid 1745027098;
    property Action: Single dispid 1745027097;
    property BatchNumber: WideString dispid 1745027096;
    property CIC: WideString dispid 1745027095;
    property Terminal: WideString dispid 1745027094;
    property BatchDate: WideString dispid 1745027093;
    property BatchCloseType: WideString dispid 1745027092;
    property Response: WideString dispid 1745027091;
    property Store: WideString dispid 1745027090;
    property VisaMCAmount: WideString dispid 1745027089;
    property VisaMCCount: WideString dispid 1745027088;
    property AmexAmount: WideString dispid 1745027087;
    property AmexCount: WideString dispid 1745027086;
    property PurchaseAmount: WideString dispid 1745027085;
    property PurchaseCount: WideString dispid 1745027084;
    property ReturnAmount: WideString dispid 1745027083;
    property ReturnCount: WideString dispid 1745027082;
    property Cancel: WordBool dispid 1745027081;
    property SplitProcessor: WideString dispid 1745027080;
    property TimeOut: Integer dispid 1745027079;
    property User: WideString dispid 1745027078;
    property XMLTrans: WordBool dispid 1745027077;
    property IPAddress: WideString dispid 1745027076;
    property Port: Smallint dispid 1745027075;
    property EnableSSL: WordBool dispid 1745027074;
    property CommMethod: CommMethod dispid 1745027073;
    property OutDelay: Single dispid 1745027072;
    function GetItemCount: WideString; dispid 1610809384;
    function GetBatches: WideString; dispid 1610809385;
    function GetRespCode: WideString; dispid 1610809386;
    function GetBalance: WideString; dispid 1610809387;
    function GetStatus: WideString; dispid 1610809388;
    function GetProcessed: WordBool; dispid 1610809389;
    function GetBatchNumber: WideString; dispid 1610809390;
    function GetResult: WideString; dispid 1610809391;
    function GetErrorDesc: WideString; dispid 1610809392;
    function GetErrorCode: Integer; dispid 1610809393;
    function GetXMLRequest: WideString; dispid 1610809394;
    function GetMerchantNumber: WideString; dispid 1610809395;
    function GetProcessor: WideString; dispid 1610809396;
    function GetAccepted(var Record_: Smallint): WordBool; dispid 1610809397;
    function GetSettleNumber: WideString; dispid 1610809398;
    function GetSettleAmount: OleVariant; dispid 1610809399;
    function GetXMLResponse: WideString; dispid 1610809400;
    function DeleteUserFiles: OleVariant; dispid 1610809401;
    function PccSysExists: WordBool; dispid 1610809403;
    procedure Clear; dispid 1610809408;
    function Send(var FileType: FileType): OleVariant; dispid 1610809411;
    function GetSystemInfo(var Index: Smallint): OleVariant; dispid 1610809412;
    function GetNumberIndexs: Smallint; dispid 1610809413;
    function GetMerchantInfo: WideString; dispid 1610809415;
    function GetFileExt: WideString; dispid 1610809417;
  end;

// *********************************************************************//
// DispIntf:  __Batch
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {9A39F2CD-6B68-420D-9EAD-FDBBE613A873}
// *********************************************************************//
  __Batch = dispinterface
    ['{9A39F2CD-6B68-420D-9EAD-FDBBE613A873}']
    procedure Resize; dispid 1;
    procedure Click; dispid 2;
    procedure DblClick; dispid 3;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid 4;
    procedure KeyPress(var KeyAscii: Smallint); dispid 5;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid 6;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 7;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 8;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 9;
  end;

// *********************************************************************//
// Interface: _pccTran
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {775006E5-ED8B-4817-9FF9-BF4D2E7EBE5B}
// *********************************************************************//
  _pccTran = interface(IDispatch)
    ['{775006E5-ED8B-4817-9FF9-BF4D2E7EBE5B}']
    function Get_mszTransPacket: WideString; safecall;
    procedure Set_mszTransPacket(const mszTransPacket: WideString); safecall;
    procedure Set_TransPacket(var Param1: WideString); safecall;
    function Get_TransPacket: WideString; safecall;
    procedure Set_TaxExempt(var Param1: WordBool); safecall;
    function Get_TaxExempt: WordBool; safecall;
    procedure Set_Method(var Param1: TxnMethodType); safecall;
    function Get_Method: TxnMethodType; safecall;
    procedure Set_TransTime(var Param1: WideString); safecall;
    function Get_TransTime: WideString; safecall;
    procedure Set_TotTransTime(var Param1: WideString); safecall;
    function Get_TotTransTime: WideString; safecall;
    procedure Set_Authcode(var Param1: WideString); safecall;
    function Get_Authcode: WideString; safecall;
    procedure Set_TxnTimeout(var Param1: WideString); safecall;
    function Get_TxnTimeout: WideString; safecall;
    procedure Set_CfgEnabled(var Param1: WordBool); safecall;
    function Get_CfgEnabled: WordBool; safecall;
    procedure Set_CfgType(var Param1: Byte); safecall;
    function Get_CfgType: Byte; safecall;
    procedure Set_CfgPath(var Param1: WideString); safecall;
    function Get_CfgPath: WideString; safecall;
    procedure Set_CfgSizeLimit(var Param1: WideString); safecall;
    function Get_CfgSizeLimit: WideString; safecall;
    procedure Set_CfgKeepDays(var Param1: WideString); safecall;
    function Get_CfgKeepDays: WideString; safecall;
    procedure Set_Partial(var Param1: WordBool); safecall;
    function Get_Partial: WordBool; safecall;
    procedure Set_Force(var Param1: WordBool); safecall;
    function Get_Force: WordBool; safecall;
    procedure Set_TotalNumCards(var Param1: WideString); safecall;
    function Get_TotalNumCards: WideString; safecall;
    procedure Set_GiftSeqNum(var Param1: WideString); safecall;
    function Get_GiftSeqNum: WideString; safecall;
    procedure Set_IndType(var Param1: WideString); safecall;
    function Get_IndType: WideString; safecall;
    procedure Set_SourceCard(var Param1: WideString); safecall;
    function Get_SourceCard: WideString; safecall;
    procedure Set_Loyalty(var Param1: WordBool); safecall;
    function Get_Loyalty: WordBool; safecall;
    procedure Set_GiftUnits(var Param1: WideString); safecall;
    function Get_GiftUnits: WideString; safecall;
    procedure Set_CashierNum(var Param1: WideString); safecall;
    function Get_CashierNum: WideString; safecall;
    procedure Set_CashierID(var Param1: WideString); safecall;
    function Get_CashierID: WideString; safecall;
    procedure Set_ManagerNum(var Param1: WideString); safecall;
    function Get_ManagerNum: WideString; safecall;
    procedure Set_CheckNum(var Param1: WideString); safecall;
    function Get_CheckNum: WideString; safecall;
    procedure Set_RFID(var Param1: WideString); safecall;
    function Get_RFID: WideString; safecall;
    procedure Set_Birth_Date(var Param1: WideString); safecall;
    function Get_Birth_Date: WideString; safecall;
    procedure Set_Phone_Number(var Param1: WideString); safecall;
    function Get_Phone_Number: WideString; safecall;
    procedure Set_ABANum(var Param1: WideString); safecall;
    function Get_ABANum: WideString; safecall;
    procedure Set_License(var Param1: WideString); safecall;
    function Get_License: WideString; safecall;
    procedure Set_State(var Param1: WideString); safecall;
    function Get_State: WideString; safecall;
    procedure Set_MICR(var Param1: WideString); safecall;
    function Get_MICR: WideString; safecall;
    procedure Set_OrigPurchData(var Param1: WideString); safecall;
    function Get_OrigPurchData: WideString; safecall;
    procedure Set_VoucherNum(var Param1: WideString); safecall;
    function Get_VoucherNum: WideString; safecall;
    procedure Set_POSSeqNum(var Param1: WideString); safecall;
    function Get_POSSeqNum: WideString; safecall;
    procedure Set_DebitType(var Param1: WideString); safecall;
    function Get_DebitType: WideString; safecall;
    procedure Set_MACBlock(var Param1: WideString); safecall;
    function Get_MACBlock: WideString; safecall;
    procedure Set_PINBlock(var Param1: WideString); safecall;
    function Get_PINBlock: WideString; safecall;
    procedure Set_CashbackAmnt(var Param1: WideString); safecall;
    function Get_CashbackAmnt: WideString; safecall;
    procedure Set_KeySerialNum(var Param1: WideString); safecall;
    function Get_KeySerialNum: WideString; safecall;
    procedure Set_LanguageCode(var Param1: WideString); safecall;
    function Get_LanguageCode: WideString; safecall;
    procedure Set_ShiftID(var Param1: WideString); safecall;
    function Get_ShiftID: WideString; safecall;
    procedure Set_PromoCode(var Param1: WideString); safecall;
    function Get_PromoCode: WideString; safecall;
    function Get_TranCount: WideString; safecall;
    procedure Set_Store(var Param1: WideString); safecall;
    function Get_Store: WideString; safecall;
    procedure Set_EBTType(var Param1: WideString); safecall;
    function Get_EBTType: WideString; safecall;
    function Get_GetXML: WideString; safecall;
    procedure Set_AmxDescription_1(var Param1: WideString); safecall;
    function Get_AmxDescription_1: WideString; safecall;
    procedure Set_AmxDescription_2(var Param1: WideString); safecall;
    function Get_AmxDescription_2: WideString; safecall;
    procedure Set_AmxDescription_3(var Param1: WideString); safecall;
    function Get_AmxDescription_3: WideString; safecall;
    procedure Set_AmxDescription_4(var Param1: WideString); safecall;
    function Get_AmxDescription_4: WideString; safecall;
    procedure Set_AmxChargeDescription(var Param1: WideString); safecall;
    function Get_AmxChargeDescription: WideString; safecall;
    procedure Set_OriginalAmnt(var Param1: WideString); safecall;
    function Get_OriginalAmnt: WideString; safecall;
    procedure Set_TargetTransaction(var Param1: WideString); safecall;
    function Get_TargetTransaction: WideString; safecall;
    procedure Set_CmrclCardFlag(var Param1: WideString); safecall;
    function Get_CmrclCardFlag: WideString; safecall;
    procedure Set_ImpTransFlag(var Param1: WordBool); safecall;
    function Get_ImpTransFlag: WordBool; safecall;
    procedure Set_EnhancedTransFlag(var Param1: WordBool); safecall;
    function Get_EnhancedTransFlag: WordBool; safecall;
    procedure Set_GratuityAmntEst(var Param1: WideString); safecall;
    function Get_GratuityAmntEst: WideString; safecall;
    procedure Set_GratuityAmnt(var Param1: WideString); safecall;
    function Get_GratuityAmnt: WideString; safecall;
    procedure Set_ItemID(var Param1: WideString); safecall;
    function Get_ItemID: WideString; safecall;
    procedure Set_Processor(var Param1: WideString); safecall;
    function Get_Processor: WideString; safecall;
    procedure Set_TID(var Param1: WideString); safecall;
    function Get_TID: WideString; safecall;
    procedure Set_Card(var Param1: WideString); safecall;
    function Get_Card: WideString; safecall;
    procedure Set_ExpDate(var Param1: WideString); safecall;
    function Get_ExpDate: WideString; safecall;
    procedure Set_Billpay(var Param1: WideString); safecall;
    function Get_Billpay: WideString; safecall;
    procedure Set_Level3(var Param1: WideString); safecall;
    function Get_Level3: WideString; safecall;
    procedure Set_Action(var Param1: WideString); safecall;
    function Get_Action: WideString; safecall;
    procedure Set_BatchCloseType(var Param1: WideString); safecall;
    function Get_BatchCloseType: WideString; safecall;
    procedure Set_Manual(var Param1: WideString); safecall;
    function Get_Manual: WideString; safecall;
    procedure Set_Amount(var Param1: WideString); safecall;
    function Get_Amount: WideString; safecall;
    procedure Set_Ref(var Param1: WideString); safecall;
    function Get_Ref: WideString; safecall;
    procedure Set_Track(var Param1: WideString); safecall;
    function Get_Track: WideString; safecall;
    procedure Set_CID(var Param1: WideString); safecall;
    function Get_CID: WideString; safecall;
    procedure Set_Tax(var Param1: WideString); safecall;
    function Get_Tax: WideString; safecall;
    procedure Set_ExtFile(var Param1: WideString); safecall;
    function Get_ExtFile: WideString; safecall;
    procedure Set_PrintReceipts(var Param1: WideString); safecall;
    function Get_PrintReceipts: WideString; safecall;
    procedure Set_PeriodicPayment(var Param1: WideString); safecall;
    function Get_PeriodicPayment: WideString; safecall;
    procedure Set_OffLine(var Param1: WideString); safecall;
    function Get_OffLine: WideString; safecall;
    procedure Set_VoidFlag(var Param1: WideString); safecall;
    function Get_VoidFlag: WideString; safecall;
    procedure Set_Zip(var Param1: WideString); safecall;
    function Get_Zip: WideString; safecall;
    procedure Set_DestZip(var Param1: WideString); safecall;
    function Get_DestZip: WideString; safecall;
    procedure Set_Street(var Param1: WideString); safecall;
    function Get_Street: WideString; safecall;
    procedure Set_Ticket(var Param1: WideString); safecall;
    function Get_Ticket: WideString; safecall;
    procedure Set_member(var Param1: WideString); safecall;
    function Get_member: WideString; safecall;
    procedure Set_TI(var Param1: WideString); safecall;
    function Get_TI: WideString; safecall;
    procedure Set_TOTALAUTH(var Param1: WideString); safecall;
    function Get_TOTALAUTH: WideString; safecall;
    procedure Set_SplitProcessor(var Param1: WideString); safecall;
    function Get_SplitProcessor: WideString; safecall;
    procedure Set_MCSN(var Param1: WideString); safecall;
    function Get_MCSN: WideString; safecall;
    procedure Set_MCSC(var Param1: WideString); safecall;
    function Get_MCSC: WideString; safecall;
    procedure Set_Multi(var Param1: WideString); safecall;
    function Get_Multi: WideString; safecall;
    procedure Set_CVV2(var Param1: WideString); safecall;
    function Get_CVV2: WideString; safecall;
    procedure Set_CardPresent(var Param1: WideString); safecall;
    function Get_CardPresent: WideString; safecall;
    procedure Set_TroutD(var Param1: WideString); safecall;
    function Get_TroutD: WideString; safecall;
    procedure Set_SequenceNum(var Param1: WideString); safecall;
    function Get_SequenceNum: WideString; safecall;
    procedure Set_UserName(var Param1: WideString); safecall;
    function Get_UserName: WideString; safecall;
    procedure Set_Password(var Param1: WideString); safecall;
    function Get_Password: WideString; safecall;
    procedure Set_InpType(var Param1: FileType); safecall;
    function Get_InpType: FileType; safecall;
    procedure Set_RespType(var Param1: TRespType); safecall;
    function Get_RespType: TRespType; safecall;
    function Get_Error: TranError; safecall;
    procedure Set_FileName(var Param1: WideString); safecall;
    function Get_FileName: WideString; safecall;
    procedure Set_XDRFile(var Param1: WideString); safecall;
    function Get_XDRFile: WideString; safecall;
    procedure Set_CheckType(var Param1: WideString); safecall;
    function Get_CheckType: WideString; safecall;
    procedure Set_CheckAccType(var Param1: WideString); safecall;
    function Get_CheckAccType: WideString; safecall;
    procedure Set_MICRStatus(var Param1: WideString); safecall;
    function Get_MICRStatus: WideString; safecall;
    procedure Set_CustomerName(var Param1: WideString); safecall;
    function Get_CustomerName: WideString; safecall;
    procedure Set_CustomerFirstName(var Param1: WideString); safecall;
    function Get_CustomerStreet: WideString; safecall;
    procedure Set_CustomerStreet(var Param1: WideString); safecall;
    function Get_CheckReaderCode: WideString; safecall;
    procedure Set_CheckReaderCode(var Param1: WideString); safecall;
    function Get_CustomerFirstName: WideString; safecall;
    procedure Set_CustomerLastName(var Param1: WideString); safecall;
    function Get_CustomerLastName: WideString; safecall;
    procedure Set_CustomerCity(var Param1: WideString); safecall;
    function Get_CustomerCity: WideString; safecall;
    procedure Set_IDType(var Param1: WideString); safecall;
    function Get_IDType: WideString; safecall;
    procedure Set_IDCountry(var Param1: WideString); safecall;
    function Get_IDCountry: WideString; safecall;
    procedure Set_DLTrackII(var Param1: WideString); safecall;
    function Get_DLTrackII: WideString; safecall;
    procedure Set_IsPurchaseCard(var Param1: WordBool); safecall;
    function Get_IsPurchaseCard: WordBool; safecall;
    procedure Set_DriverID(var Param1: WideString); safecall;
    function Get_DriverID: WideString; safecall;
    procedure Set_DriverPIN(var Param1: WideString); safecall;
    function Get_DriverPIN: WideString; safecall;
    procedure Set_IDNumber(var Param1: WideString); safecall;
    function Get_IDNumber: WideString; safecall;
    procedure Set_Odometer(var Param1: WideString); safecall;
    function Get_Odometer: WideString; safecall;
    procedure Set_RestrictionCode(var Param1: WideString); safecall;
    function Get_RestrictionCode: WideString; safecall;
    procedure Set_VehicleID(var Param1: WideString); safecall;
    function Get_VehicleID: WideString; safecall;
    procedure Set_ProductDetailCount(var Param1: WideString); safecall;
    function Get_ProductDetailCount: WideString; safecall;
    procedure Set_ProductDetailCode_1(var Param1: WideString); safecall;
    function Get_ProductDetailCode_1: WideString; safecall;
    procedure Set_ProductDetailCode_2(var Param1: WideString); safecall;
    function Get_ProductDetailCode_2: WideString; safecall;
    procedure Set_ProductDetailCode_3(var Param1: WideString); safecall;
    function Get_ProductDetailCode_3: WideString; safecall;
    procedure Set_ProductDetailCode_4(var Param1: WideString); safecall;
    function Get_ProductDetailCode_4: WideString; safecall;
    procedure Set_ProductDetailCode_5(var Param1: WideString); safecall;
    function Get_ProductDetailCode_5: WideString; safecall;
    procedure Set_ProductDetailCode_6(var Param1: WideString); safecall;
    function Get_ProductDetailCode_6: WideString; safecall;
    procedure Set_ProductDetailCode_7(var Param1: WideString); safecall;
    function Get_ProductDetailCode_7: WideString; safecall;
    procedure Set_ProductDetailCode_8(var Param1: WideString); safecall;
    function Get_ProductDetailCode_8: WideString; safecall;
    procedure Set_ProductDetailCode_9(var Param1: WideString); safecall;
    function Get_ProductDetailCode_9: WideString; safecall;
    procedure Set_ProductDetailCode_10(var Param1: WideString); safecall;
    function Get_ProductDetailCode_10: WideString; safecall;
    procedure Set_ProductDetailAmount_1(var Param1: WideString); safecall;
    function Get_ProductDetailAmount_1: WideString; safecall;
    procedure Set_ProductDetailAmount_2(var Param1: WideString); safecall;
    function Get_ProductDetailAmount_2: WideString; safecall;
    procedure Set_ProductDetailAmount_3(var Param1: WideString); safecall;
    function Get_ProductDetailAmount_3: WideString; safecall;
    procedure Set_ProductDetailAmount_4(var Param1: WideString); safecall;
    function Get_ProductDetailAmount_4: WideString; safecall;
    procedure Set_ProductDetailAmount_5(var Param1: WideString); safecall;
    function Get_ProductDetailAmount_5: WideString; safecall;
    procedure Set_ProductDetailAmount_6(var Param1: WideString); safecall;
    function Get_ProductDetailAmount_6: WideString; safecall;
    procedure Set_ProductDetailAmount_7(var Param1: WideString); safecall;
    function Get_ProductDetailAmount_7: WideString; safecall;
    procedure Set_ProductDetailAmount_8(var Param1: WideString); safecall;
    function Get_ProductDetailAmount_8: WideString; safecall;
    procedure Set_ProductDetailAmount_9(var Param1: WideString); safecall;
    function Get_ProductDetailAmount_9: WideString; safecall;
    procedure Set_ProductDetailAmount_10(var Param1: WideString); safecall;
    function Get_ProductDetailAmount_10: WideString; safecall;
    procedure Set_ProductDetailQuantity_1(var Param1: WideString); safecall;
    function Get_ProductDetailQuantity_1: WideString; safecall;
    procedure Set_ProductDetailQuantity_2(var Param1: WideString); safecall;
    function Get_ProductDetailQuantity_2: WideString; safecall;
    procedure Set_ProductDetailQuantity_3(var Param1: WideString); safecall;
    function Get_ProductDetailQuantity_3: WideString; safecall;
    procedure Set_ProductDetailQuantity_4(var Param1: WideString); safecall;
    function Get_ProductDetailQuantity_4: WideString; safecall;
    procedure Set_ProductDetailQuantity_5(var Param1: WideString); safecall;
    function Get_ProductDetailQuantity_5: WideString; safecall;
    procedure Set_ProductDetailQuantity_6(var Param1: WideString); safecall;
    function Get_ProductDetailQuantity_6: WideString; safecall;
    procedure Set_ProductDetailQuantity_7(var Param1: WideString); safecall;
    function Get_ProductDetailQuantity_7: WideString; safecall;
    procedure Set_ProductDetailQuantity_8(var Param1: WideString); safecall;
    function Get_ProductDetailQuantity_8: WideString; safecall;
    procedure Set_ProductDetailQuantity_9(var Param1: WideString); safecall;
    function Get_ProductDetailQuantity_9: WideString; safecall;
    procedure Set_ProductDetailQuantity_10(var Param1: WideString); safecall;
    function Get_ProductDetailQuantity_10: WideString; safecall;
    procedure Set_StoreNum(var Param1: WideString); safecall;
    function Get_StoreNum: WideString; safecall;
    procedure Set_SSNum(var Param1: WideString); safecall;
    function Get_SSNum: WideString; safecall;
    procedure Set_CustomerHouseNum(var Param1: WideString); safecall;
    function Get_CustomerHouseNum: WideString; safecall;
    procedure Set_PumpNumber(var Param1: WideString); safecall;
    function Get_PumpNumber: WideString; safecall;
    procedure Set_SurchargeAmount(var Param1: WideString); safecall;
    function Get_SurchargeAmount: WideString; safecall;
    procedure Set_VirtualGiftCardFlag(var Param1: WordBool); safecall;
    function Get_VirtualGiftCardFlag: WordBool; safecall;
    procedure Set_GiftPin(var Param1: WideString); safecall;
    function Get_GiftPin: WideString; safecall;
    procedure Set_ProcRespCode(var Param1: WideString); safecall;
    function Get_ProcRespCode: WideString; safecall;
    procedure Set_FleetCard(var Param1: WideString); safecall;
    function Get_FleetCard: WideString; safecall;
    procedure Set_TableNumber(var Param1: WideString); safecall;
    function Get_TableNumber: WideString; safecall;
    procedure Set_TrackI(var Param1: WideString); safecall;
    function Get_TrackI: WideString; safecall;
    procedure Set_CreditPlanNumber(var Param1: WideString); safecall;
    function Get_CreditPlanNumber: WideString; safecall;
    function Load(var szFileName: OleVariant; var intRecNum: Smallint; var blnValidate: WordBool): TranErrType; safecall;
    function WriteFile(var eType: FileType; var szNewPrefix: OleVariant; var szNewPath: OleVariant; 
                       var intRecNum: Smallint): TranErrType; safecall;
    function ValidateRequiredFields: TranErrType; safecall;
    function CleanString(var szStringIn: WideString; var szReplaceList: WideString; 
                         var blnCompact: WordBool; var blnTrim: WordBool; var blnRmvNP: WordBool): WideString; safecall;
    procedure Clear; safecall;
    procedure ClearTranData; safecall;
    procedure ClearErr; safecall;
    function TxnType: Smallint; safecall;
    function LoadTranData(var intNdx: Smallint): OleVariant; safecall;
    function WriteRawXML(var szOutString: WideString; var szFileName: WideString; 
                         var szPath: OleVariant): TranErrType; safecall;
    function PrepString(var szInData: WideString): WideString; safecall;
    property mszTransPacket: WideString read Get_mszTransPacket write Set_mszTransPacket;
    property TransPacket: WideString read Get_TransPacket write Set_TransPacket;
    property TaxExempt: WordBool read Get_TaxExempt write Set_TaxExempt;
    property Method: TxnMethodType read Get_Method write Set_Method;
    property TransTime: WideString read Get_TransTime write Set_TransTime;
    property TotTransTime: WideString read Get_TotTransTime write Set_TotTransTime;
    property Authcode: WideString read Get_Authcode write Set_Authcode;
    property TxnTimeout: WideString read Get_TxnTimeout write Set_TxnTimeout;
    property CfgEnabled: WordBool read Get_CfgEnabled write Set_CfgEnabled;
    property CfgType: Byte read Get_CfgType write Set_CfgType;
    property CfgPath: WideString read Get_CfgPath write Set_CfgPath;
    property CfgSizeLimit: WideString read Get_CfgSizeLimit write Set_CfgSizeLimit;
    property CfgKeepDays: WideString read Get_CfgKeepDays write Set_CfgKeepDays;
    property Partial: WordBool read Get_Partial write Set_Partial;
    property Force: WordBool read Get_Force write Set_Force;
    property TotalNumCards: WideString read Get_TotalNumCards write Set_TotalNumCards;
    property GiftSeqNum: WideString read Get_GiftSeqNum write Set_GiftSeqNum;
    property IndType: WideString read Get_IndType write Set_IndType;
    property SourceCard: WideString read Get_SourceCard write Set_SourceCard;
    property Loyalty: WordBool read Get_Loyalty write Set_Loyalty;
    property GiftUnits: WideString read Get_GiftUnits write Set_GiftUnits;
    property CashierNum: WideString read Get_CashierNum write Set_CashierNum;
    property CashierID: WideString read Get_CashierID write Set_CashierID;
    property ManagerNum: WideString read Get_ManagerNum write Set_ManagerNum;
    property CheckNum: WideString read Get_CheckNum write Set_CheckNum;
    property RFID: WideString read Get_RFID write Set_RFID;
    property Birth_Date: WideString read Get_Birth_Date write Set_Birth_Date;
    property Phone_Number: WideString read Get_Phone_Number write Set_Phone_Number;
    property ABANum: WideString read Get_ABANum write Set_ABANum;
    property License: WideString read Get_License write Set_License;
    property State: WideString read Get_State write Set_State;
    property MICR: WideString read Get_MICR write Set_MICR;
    property OrigPurchData: WideString read Get_OrigPurchData write Set_OrigPurchData;
    property VoucherNum: WideString read Get_VoucherNum write Set_VoucherNum;
    property POSSeqNum: WideString read Get_POSSeqNum write Set_POSSeqNum;
    property DebitType: WideString read Get_DebitType write Set_DebitType;
    property MACBlock: WideString read Get_MACBlock write Set_MACBlock;
    property PINBlock: WideString read Get_PINBlock write Set_PINBlock;
    property CashbackAmnt: WideString read Get_CashbackAmnt write Set_CashbackAmnt;
    property KeySerialNum: WideString read Get_KeySerialNum write Set_KeySerialNum;
    property LanguageCode: WideString read Get_LanguageCode write Set_LanguageCode;
    property ShiftID: WideString read Get_ShiftID write Set_ShiftID;
    property PromoCode: WideString read Get_PromoCode write Set_PromoCode;
    property TranCount: WideString read Get_TranCount;
    property Store: WideString read Get_Store write Set_Store;
    property EBTType: WideString read Get_EBTType write Set_EBTType;
    property GetXML: WideString read Get_GetXML;
    property AmxDescription_1: WideString read Get_AmxDescription_1 write Set_AmxDescription_1;
    property AmxDescription_2: WideString read Get_AmxDescription_2 write Set_AmxDescription_2;
    property AmxDescription_3: WideString read Get_AmxDescription_3 write Set_AmxDescription_3;
    property AmxDescription_4: WideString read Get_AmxDescription_4 write Set_AmxDescription_4;
    property AmxChargeDescription: WideString read Get_AmxChargeDescription write Set_AmxChargeDescription;
    property OriginalAmnt: WideString read Get_OriginalAmnt write Set_OriginalAmnt;
    property TargetTransaction: WideString read Get_TargetTransaction write Set_TargetTransaction;
    property CmrclCardFlag: WideString read Get_CmrclCardFlag write Set_CmrclCardFlag;
    property ImpTransFlag: WordBool read Get_ImpTransFlag write Set_ImpTransFlag;
    property EnhancedTransFlag: WordBool read Get_EnhancedTransFlag write Set_EnhancedTransFlag;
    property GratuityAmntEst: WideString read Get_GratuityAmntEst write Set_GratuityAmntEst;
    property GratuityAmnt: WideString read Get_GratuityAmnt write Set_GratuityAmnt;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property Processor: WideString read Get_Processor write Set_Processor;
    property TID: WideString read Get_TID write Set_TID;
    property Card: WideString read Get_Card write Set_Card;
    property ExpDate: WideString read Get_ExpDate write Set_ExpDate;
    property Billpay: WideString read Get_Billpay write Set_Billpay;
    property Level3: WideString read Get_Level3 write Set_Level3;
    property Action: WideString read Get_Action write Set_Action;
    property BatchCloseType: WideString read Get_BatchCloseType write Set_BatchCloseType;
    property Manual: WideString read Get_Manual write Set_Manual;
    property Amount: WideString read Get_Amount write Set_Amount;
    property Ref: WideString read Get_Ref write Set_Ref;
    property Track: WideString read Get_Track write Set_Track;
    property CID: WideString read Get_CID write Set_CID;
    property Tax: WideString read Get_Tax write Set_Tax;
    property ExtFile: WideString read Get_ExtFile write Set_ExtFile;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property PeriodicPayment: WideString read Get_PeriodicPayment write Set_PeriodicPayment;
    property OffLine: WideString read Get_OffLine write Set_OffLine;
    property VoidFlag: WideString read Get_VoidFlag write Set_VoidFlag;
    property Zip: WideString read Get_Zip write Set_Zip;
    property DestZip: WideString read Get_DestZip write Set_DestZip;
    property Street: WideString read Get_Street write Set_Street;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property member: WideString read Get_member write Set_member;
    property TI: WideString read Get_TI write Set_TI;
    property TOTALAUTH: WideString read Get_TOTALAUTH write Set_TOTALAUTH;
    property SplitProcessor: WideString read Get_SplitProcessor write Set_SplitProcessor;
    property MCSN: WideString read Get_MCSN write Set_MCSN;
    property MCSC: WideString read Get_MCSC write Set_MCSC;
    property Multi: WideString read Get_Multi write Set_Multi;
    property CVV2: WideString read Get_CVV2 write Set_CVV2;
    property CardPresent: WideString read Get_CardPresent write Set_CardPresent;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property SequenceNum: WideString read Get_SequenceNum write Set_SequenceNum;
    property UserName: WideString read Get_UserName write Set_UserName;
    property Password: WideString read Get_Password write Set_Password;
    property InpType: FileType read Get_InpType write Set_InpType;
    property RespType: TRespType read Get_RespType write Set_RespType;
    property Error: TranError read Get_Error;
    property FileName: WideString read Get_FileName write Set_FileName;
    property XDRFile: WideString read Get_XDRFile write Set_XDRFile;
    property CheckType: WideString read Get_CheckType write Set_CheckType;
    property CheckAccType: WideString read Get_CheckAccType write Set_CheckAccType;
    property MICRStatus: WideString read Get_MICRStatus write Set_MICRStatus;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property CustomerFirstName: WideString read Get_CustomerFirstName write Set_CustomerFirstName;
    property CustomerStreet: WideString read Get_CustomerStreet write Set_CustomerStreet;
    property CheckReaderCode: WideString read Get_CheckReaderCode write Set_CheckReaderCode;
    property CustomerLastName: WideString read Get_CustomerLastName write Set_CustomerLastName;
    property CustomerCity: WideString read Get_CustomerCity write Set_CustomerCity;
    property IDType: WideString read Get_IDType write Set_IDType;
    property IDCountry: WideString read Get_IDCountry write Set_IDCountry;
    property DLTrackII: WideString read Get_DLTrackII write Set_DLTrackII;
    property IsPurchaseCard: WordBool read Get_IsPurchaseCard write Set_IsPurchaseCard;
    property DriverID: WideString read Get_DriverID write Set_DriverID;
    property DriverPIN: WideString read Get_DriverPIN write Set_DriverPIN;
    property IDNumber: WideString read Get_IDNumber write Set_IDNumber;
    property Odometer: WideString read Get_Odometer write Set_Odometer;
    property RestrictionCode: WideString read Get_RestrictionCode write Set_RestrictionCode;
    property VehicleID: WideString read Get_VehicleID write Set_VehicleID;
    property ProductDetailCount: WideString read Get_ProductDetailCount write Set_ProductDetailCount;
    property ProductDetailCode_1: WideString read Get_ProductDetailCode_1 write Set_ProductDetailCode_1;
    property ProductDetailCode_2: WideString read Get_ProductDetailCode_2 write Set_ProductDetailCode_2;
    property ProductDetailCode_3: WideString read Get_ProductDetailCode_3 write Set_ProductDetailCode_3;
    property ProductDetailCode_4: WideString read Get_ProductDetailCode_4 write Set_ProductDetailCode_4;
    property ProductDetailCode_5: WideString read Get_ProductDetailCode_5 write Set_ProductDetailCode_5;
    property ProductDetailCode_6: WideString read Get_ProductDetailCode_6 write Set_ProductDetailCode_6;
    property ProductDetailCode_7: WideString read Get_ProductDetailCode_7 write Set_ProductDetailCode_7;
    property ProductDetailCode_8: WideString read Get_ProductDetailCode_8 write Set_ProductDetailCode_8;
    property ProductDetailCode_9: WideString read Get_ProductDetailCode_9 write Set_ProductDetailCode_9;
    property ProductDetailCode_10: WideString read Get_ProductDetailCode_10 write Set_ProductDetailCode_10;
    property ProductDetailAmount_1: WideString read Get_ProductDetailAmount_1 write Set_ProductDetailAmount_1;
    property ProductDetailAmount_2: WideString read Get_ProductDetailAmount_2 write Set_ProductDetailAmount_2;
    property ProductDetailAmount_3: WideString read Get_ProductDetailAmount_3 write Set_ProductDetailAmount_3;
    property ProductDetailAmount_4: WideString read Get_ProductDetailAmount_4 write Set_ProductDetailAmount_4;
    property ProductDetailAmount_5: WideString read Get_ProductDetailAmount_5 write Set_ProductDetailAmount_5;
    property ProductDetailAmount_6: WideString read Get_ProductDetailAmount_6 write Set_ProductDetailAmount_6;
    property ProductDetailAmount_7: WideString read Get_ProductDetailAmount_7 write Set_ProductDetailAmount_7;
    property ProductDetailAmount_8: WideString read Get_ProductDetailAmount_8 write Set_ProductDetailAmount_8;
    property ProductDetailAmount_9: WideString read Get_ProductDetailAmount_9 write Set_ProductDetailAmount_9;
    property ProductDetailAmount_10: WideString read Get_ProductDetailAmount_10 write Set_ProductDetailAmount_10;
    property ProductDetailQuantity_1: WideString read Get_ProductDetailQuantity_1 write Set_ProductDetailQuantity_1;
    property ProductDetailQuantity_2: WideString read Get_ProductDetailQuantity_2 write Set_ProductDetailQuantity_2;
    property ProductDetailQuantity_3: WideString read Get_ProductDetailQuantity_3 write Set_ProductDetailQuantity_3;
    property ProductDetailQuantity_4: WideString read Get_ProductDetailQuantity_4 write Set_ProductDetailQuantity_4;
    property ProductDetailQuantity_5: WideString read Get_ProductDetailQuantity_5 write Set_ProductDetailQuantity_5;
    property ProductDetailQuantity_6: WideString read Get_ProductDetailQuantity_6 write Set_ProductDetailQuantity_6;
    property ProductDetailQuantity_7: WideString read Get_ProductDetailQuantity_7 write Set_ProductDetailQuantity_7;
    property ProductDetailQuantity_8: WideString read Get_ProductDetailQuantity_8 write Set_ProductDetailQuantity_8;
    property ProductDetailQuantity_9: WideString read Get_ProductDetailQuantity_9 write Set_ProductDetailQuantity_9;
    property ProductDetailQuantity_10: WideString read Get_ProductDetailQuantity_10 write Set_ProductDetailQuantity_10;
    property StoreNum: WideString read Get_StoreNum write Set_StoreNum;
    property SSNum: WideString read Get_SSNum write Set_SSNum;
    property CustomerHouseNum: WideString read Get_CustomerHouseNum write Set_CustomerHouseNum;
    property PumpNumber: WideString read Get_PumpNumber write Set_PumpNumber;
    property SurchargeAmount: WideString read Get_SurchargeAmount write Set_SurchargeAmount;
    property VirtualGiftCardFlag: WordBool read Get_VirtualGiftCardFlag write Set_VirtualGiftCardFlag;
    property GiftPin: WideString read Get_GiftPin write Set_GiftPin;
    property ProcRespCode: WideString read Get_ProcRespCode write Set_ProcRespCode;
    property FleetCard: WideString read Get_FleetCard write Set_FleetCard;
    property TableNumber: WideString read Get_TableNumber write Set_TableNumber;
    property TrackI: WideString read Get_TrackI write Set_TrackI;
    property CreditPlanNumber: WideString read Get_CreditPlanNumber write Set_CreditPlanNumber;
  end;

// *********************************************************************//
// DispIntf:  _pccTranDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {775006E5-ED8B-4817-9FF9-BF4D2E7EBE5B}
// *********************************************************************//
  _pccTranDisp = dispinterface
    ['{775006E5-ED8B-4817-9FF9-BF4D2E7EBE5B}']
    property mszTransPacket: WideString dispid 1073938546;
    property TransPacket: WideString dispid 1745027233;
    property TaxExempt: WordBool dispid 1745027232;
    property Method: TxnMethodType dispid 1745027231;
    property TransTime: WideString dispid 1745027230;
    property TotTransTime: WideString dispid 1745027229;
    property Authcode: WideString dispid 1745027228;
    property TxnTimeout: WideString dispid 1745027227;
    property CfgEnabled: WordBool dispid 1745027226;
    property CfgType: Byte dispid 1745027225;
    property CfgPath: WideString dispid 1745027224;
    property CfgSizeLimit: WideString dispid 1745027223;
    property CfgKeepDays: WideString dispid 1745027222;
    property Partial: WordBool dispid 1745027221;
    property Force: WordBool dispid 1745027220;
    property TotalNumCards: WideString dispid 1745027219;
    property GiftSeqNum: WideString dispid 1745027218;
    property IndType: WideString dispid 1745027217;
    property SourceCard: WideString dispid 1745027216;
    property Loyalty: WordBool dispid 1745027215;
    property GiftUnits: WideString dispid 1745027214;
    property CashierNum: WideString dispid 1745027213;
    property CashierID: WideString dispid 1745027212;
    property ManagerNum: WideString dispid 1745027211;
    property CheckNum: WideString dispid 1745027210;
    property RFID: WideString dispid 1745027209;
    property Birth_Date: WideString dispid 1745027208;
    property Phone_Number: WideString dispid 1745027207;
    property ABANum: WideString dispid 1745027206;
    property License: WideString dispid 1745027205;
    property State: WideString dispid 1745027204;
    property MICR: WideString dispid 1745027203;
    property OrigPurchData: WideString dispid 1745027202;
    property VoucherNum: WideString dispid 1745027201;
    property POSSeqNum: WideString dispid 1745027200;
    property DebitType: WideString dispid 1745027199;
    property MACBlock: WideString dispid 1745027198;
    property PINBlock: WideString dispid 1745027197;
    property CashbackAmnt: WideString dispid 1745027196;
    property KeySerialNum: WideString dispid 1745027195;
    property LanguageCode: WideString dispid 1745027194;
    property ShiftID: WideString dispid 1745027193;
    property PromoCode: WideString dispid 1745027192;
    property TranCount: WideString readonly dispid 1745027191;
    property Store: WideString dispid 1745027190;
    property EBTType: WideString dispid 1745027189;
    property GetXML: WideString readonly dispid 1745027188;
    property AmxDescription_1: WideString dispid 1745027187;
    property AmxDescription_2: WideString dispid 1745027186;
    property AmxDescription_3: WideString dispid 1745027185;
    property AmxDescription_4: WideString dispid 1745027184;
    property AmxChargeDescription: WideString dispid 1745027183;
    property OriginalAmnt: WideString dispid 1745027182;
    property TargetTransaction: WideString dispid 1745027181;
    property CmrclCardFlag: WideString dispid 1745027180;
    property ImpTransFlag: WordBool dispid 1745027179;
    property EnhancedTransFlag: WordBool dispid 1745027178;
    property GratuityAmntEst: WideString dispid 1745027177;
    property GratuityAmnt: WideString dispid 1745027176;
    property ItemID: WideString dispid 1745027175;
    property Processor: WideString dispid 1745027174;
    property TID: WideString dispid 1745027173;
    property Card: WideString dispid 1745027172;
    property ExpDate: WideString dispid 1745027171;
    property Billpay: WideString dispid 1745027170;
    property Level3: WideString dispid 1745027169;
    property Action: WideString dispid 1745027168;
    property BatchCloseType: WideString dispid 1745027167;
    property Manual: WideString dispid 1745027166;
    property Amount: WideString dispid 1745027165;
    property Ref: WideString dispid 1745027164;
    property Track: WideString dispid 1745027163;
    property CID: WideString dispid 1745027162;
    property Tax: WideString dispid 1745027161;
    property ExtFile: WideString dispid 1745027160;
    property PrintReceipts: WideString dispid 1745027159;
    property PeriodicPayment: WideString dispid 1745027158;
    property OffLine: WideString dispid 1745027157;
    property VoidFlag: WideString dispid 1745027156;
    property Zip: WideString dispid 1745027155;
    property DestZip: WideString dispid 1745027154;
    property Street: WideString dispid 1745027153;
    property Ticket: WideString dispid 1745027152;
    property member: WideString dispid 1745027151;
    property TI: WideString dispid 1745027150;
    property TOTALAUTH: WideString dispid 1745027149;
    property SplitProcessor: WideString dispid 1745027148;
    property MCSN: WideString dispid 1745027147;
    property MCSC: WideString dispid 1745027146;
    property Multi: WideString dispid 1745027145;
    property CVV2: WideString dispid 1745027144;
    property CardPresent: WideString dispid 1745027143;
    property TroutD: WideString dispid 1745027142;
    property SequenceNum: WideString dispid 1745027141;
    property UserName: WideString dispid 1745027140;
    property Password: WideString dispid 1745027139;
    property InpType: FileType dispid 1745027138;
    property RespType: TRespType dispid 1745027137;
    property Error: {??TranError}OleVariant readonly dispid 1745027136;
    property FileName: WideString dispid 1745027135;
    property XDRFile: WideString dispid 1745027134;
    property CheckType: WideString dispid 1745027133;
    property CheckAccType: WideString dispid 1745027132;
    property MICRStatus: WideString dispid 1745027131;
    property CustomerName: WideString dispid 1745027130;
    property CustomerFirstName: WideString dispid 1745027129;
    property CustomerStreet: WideString dispid 1745027128;
    property CheckReaderCode: WideString dispid 1745027127;
    property CustomerLastName: WideString dispid 1745027126;
    property CustomerCity: WideString dispid 1745027125;
    property IDType: WideString dispid 1745027124;
    property IDCountry: WideString dispid 1745027123;
    property DLTrackII: WideString dispid 1745027122;
    property IsPurchaseCard: WordBool dispid 1745027121;
    property DriverID: WideString dispid 1745027120;
    property DriverPIN: WideString dispid 1745027119;
    property IDNumber: WideString dispid 1745027118;
    property Odometer: WideString dispid 1745027117;
    property RestrictionCode: WideString dispid 1745027116;
    property VehicleID: WideString dispid 1745027115;
    property ProductDetailCount: WideString dispid 1745027114;
    property ProductDetailCode_1: WideString dispid 1745027113;
    property ProductDetailCode_2: WideString dispid 1745027112;
    property ProductDetailCode_3: WideString dispid 1745027111;
    property ProductDetailCode_4: WideString dispid 1745027110;
    property ProductDetailCode_5: WideString dispid 1745027109;
    property ProductDetailCode_6: WideString dispid 1745027108;
    property ProductDetailCode_7: WideString dispid 1745027107;
    property ProductDetailCode_8: WideString dispid 1745027106;
    property ProductDetailCode_9: WideString dispid 1745027105;
    property ProductDetailCode_10: WideString dispid 1745027104;
    property ProductDetailAmount_1: WideString dispid 1745027103;
    property ProductDetailAmount_2: WideString dispid 1745027102;
    property ProductDetailAmount_3: WideString dispid 1745027101;
    property ProductDetailAmount_4: WideString dispid 1745027100;
    property ProductDetailAmount_5: WideString dispid 1745027099;
    property ProductDetailAmount_6: WideString dispid 1745027098;
    property ProductDetailAmount_7: WideString dispid 1745027097;
    property ProductDetailAmount_8: WideString dispid 1745027096;
    property ProductDetailAmount_9: WideString dispid 1745027095;
    property ProductDetailAmount_10: WideString dispid 1745027094;
    property ProductDetailQuantity_1: WideString dispid 1745027093;
    property ProductDetailQuantity_2: WideString dispid 1745027092;
    property ProductDetailQuantity_3: WideString dispid 1745027091;
    property ProductDetailQuantity_4: WideString dispid 1745027090;
    property ProductDetailQuantity_5: WideString dispid 1745027089;
    property ProductDetailQuantity_6: WideString dispid 1745027088;
    property ProductDetailQuantity_7: WideString dispid 1745027087;
    property ProductDetailQuantity_8: WideString dispid 1745027086;
    property ProductDetailQuantity_9: WideString dispid 1745027085;
    property ProductDetailQuantity_10: WideString dispid 1745027084;
    property StoreNum: WideString dispid 1745027083;
    property SSNum: WideString dispid 1745027082;
    property CustomerHouseNum: WideString dispid 1745027081;
    property PumpNumber: WideString dispid 1745027080;
    property SurchargeAmount: WideString dispid 1745027079;
    property VirtualGiftCardFlag: WordBool dispid 1745027078;
    property GiftPin: WideString dispid 1745027077;
    property ProcRespCode: WideString dispid 1745027076;
    property FleetCard: WideString dispid 1745027075;
    property TableNumber: WideString dispid 1745027074;
    property TrackI: WideString dispid 1745027073;
    property CreditPlanNumber: WideString dispid 1745027072;
    function Load(var szFileName: OleVariant; var intRecNum: Smallint; var blnValidate: WordBool): TranErrType; dispid 1610809506;
    function WriteFile(var eType: FileType; var szNewPrefix: OleVariant; var szNewPath: OleVariant; 
                       var intRecNum: Smallint): TranErrType; dispid 1610809507;
    function ValidateRequiredFields: TranErrType; dispid 1610809508;
    function CleanString(var szStringIn: WideString; var szReplaceList: WideString; 
                         var blnCompact: WordBool; var blnTrim: WordBool; var blnRmvNP: WordBool): WideString; dispid 1610809509;
    procedure Clear; dispid 1610809510;
    procedure ClearTranData; dispid 1610809511;
    procedure ClearErr; dispid 1610809512;
    function TxnType: Smallint; dispid 1610809513;
    function LoadTranData(var intNdx: Smallint): OleVariant; dispid 1610809518;
    function WriteRawXML(var szOutString: WideString; var szFileName: WideString; 
                         var szPath: OleVariant): TranErrType; dispid 1610809521;
    function PrepString(var szInData: WideString): WideString; dispid 1610809523;
  end;

// *********************************************************************//
// Interface: _PccResponse
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5B2DC0C7-7617-4EB5-B53C-B600698A0D4E}
// *********************************************************************//
  _PccResponse = interface(IDispatch)
    ['{5B2DC0C7-7617-4EB5-B53C-B600698A0D4E}']
    procedure Set_BatchNumber(var Param1: WideString); safecall;
    function Get_BatchNumber: WideString; safecall;
    procedure Set_AuthDate(var Param1: WideString); safecall;
    function Get_AuthDate: WideString; safecall;
    procedure Set_CashBack(var Param1: WideString); safecall;
    function Get_CashBack: WideString; safecall;
    procedure Set_AmountDue(var Param1: WideString); safecall;
    function Get_AmountDue: WideString; safecall;
    procedure Set_AuthAmount(var Param1: WideString); safecall;
    function Get_AuthAmount: WideString; safecall;
    procedure Set_TransTime(var Param1: WideString); safecall;
    function Get_TransTime: WideString; safecall;
    procedure Set_TotTransTime(var Param1: WideString); safecall;
    function Get_TotTransTime: WideString; safecall;
    procedure Set_ConfigSize(var Param1: WideString); safecall;
    function Get_ConfigSize: WideString; safecall;
    procedure Set_CurrSize(var Param1: WideString); safecall;
    function Get_CurrSize: WideString; safecall;
    procedure Set_AuxRespCode(var Param1: WideString); safecall;
    function Get_AuxRespCode: WideString; safecall;
    procedure Set_VoidBalance(var Param1: WideString); safecall;
    function Get_VoidBalance: WideString; safecall;
    procedure Set_eCommIndicator(var Param1: WideString); safecall;
    function Get_eCommIndicator: WideString; safecall;
    procedure Set_CardholderId(var Param1: WideString); safecall;
    function Get_CardholderId: WideString; safecall;
    procedure Set_AccountDataSrc(var Param1: WideString); safecall;
    function Get_AccountDataSrc: WideString; safecall;
    function Get_GetAsString: WideString; safecall;
    procedure Set_GratuityAmntEst(var Param1: WideString); safecall;
    function Get_GratuityAmntEst: WideString; safecall;
    procedure Set_GratuityAmnt(var Param1: WideString); safecall;
    function Get_GratuityAmnt: WideString; safecall;
    procedure Set_ItemID(var Param1: WideString); safecall;
    function Get_ItemID: WideString; safecall;
    function Get_Result: WideString; safecall;
    procedure Set_Result(var Param1: WideString); safecall;
    function Get_ResultCode: WideString; safecall;
    procedure Set_ResultCode(var Param1: WideString); safecall;
    function Get_CmrclCardFlag: WideString; safecall;
    procedure Set_CmrclCardFlag(var Param1: WideString); safecall;
    function Get_NetID: WideString; safecall;
    procedure Set_NetID(var Param1: WideString); safecall;
    function Get_Auth: WideString; safecall;
    procedure Set_Auth(var Param1: WideString); safecall;
    function Get_Reference: WideString; safecall;
    procedure Set_Reference(var Param1: WideString); safecall;
    function Get_ADDRESVER: WideString; safecall;
    procedure Set_ADDRESVER(var Param1: WideString); safecall;
    function Get_TDate: WideString; safecall;
    procedure Set_TDate(var Param1: WideString); safecall;
    function Get_Ticket: WideString; safecall;
    procedure Set_Ticket(var Param1: WideString); safecall;
    function Get_TransNum: WideString; safecall;
    procedure Set_TransNum(var Param1: WideString); safecall;
    function Get_TItem: WideString; safecall;
    procedure Set_TItem(var Param1: WideString); safecall;
    function Get_TBATCH: WideString; safecall;
    procedure Set_TBATCH(var Param1: WideString); safecall;
    function Get_TI: WideString; safecall;
    procedure Set_TI(var Param1: WideString); safecall;
    function Get_TICODE: WideString; safecall;
    procedure Set_TICODE(var Param1: WideString); safecall;
    function Get_IND: WideString; safecall;
    procedure Set_IND(var Param1: WideString); safecall;
    function Get_MSI: WideString; safecall;
    procedure Set_MSI(var Param1: WideString); safecall;
    function Get_Ret: WideString; safecall;
    procedure Set_Ret(var Param1: WideString); safecall;
    function Get_PEM: WideString; safecall;
    procedure Set_PEM(var Param1: WideString); safecall;
    function Get_TIM: WideString; safecall;
    procedure Set_TIM(var Param1: WideString); safecall;
    function Get_ACI: WideString; safecall;
    procedure Set_ACI(var Param1: WideString); safecall;
    function Get_RespCode: WideString; safecall;
    procedure Set_RespCode(var Param1: WideString); safecall;
    function Get_RRec: WideString; safecall;
    procedure Set_RRec(var Param1: WideString); safecall;
    function Get_CCType: WideString; safecall;
    procedure Set_CCType(var Param1: WideString); safecall;
    function Get_CVV2Response: WideString; safecall;
    procedure Set_CVV2Response(var Param1: WideString); safecall;
    function Get_PurchaseCard: WideString; safecall;
    procedure Set_PurchaseCard(var Param1: WideString); safecall;
    procedure Set_RespType(var Param1: RespFileType); safecall;
    function Get_RespType: RespFileType; safecall;
    function Get_Error: RespError; safecall;
    procedure Set_FileName(var Param1: WideString); safecall;
    function Get_FileName: WideString; safecall;
    procedure Set_InpType(var Param1: RespFileType); safecall;
    function Get_InpType: RespFileType; safecall;
    procedure Set_XDRFile(var Param1: WideString); safecall;
    function Get_XDRFile: WideString; safecall;
    procedure Set_TroutD(var Param1: WideString); safecall;
    function Get_TroutD: WideString; safecall;
    procedure Set_UserName(var Param1: WideString); safecall;
    function Get_UserName: WideString; safecall;
    procedure Set_Auth_Src_Code(var Param1: WideString); safecall;
    function Get_Auth_Src_Code: WideString; safecall;
    procedure Set_SaleCount(var Param1: WideString); safecall;
    function Get_SaleCount: WideString; safecall;
    procedure Set_SaleTotalAmount(var Param1: WideString); safecall;
    function Get_SaleTotalAmount: WideString; safecall;
    procedure Set_ActivationCount(var Param1: WideString); safecall;
    function Get_ActivationCount: WideString; safecall;
    procedure Set_ActivationTotalAmount(var Param1: WideString); safecall;
    function Get_ActivationTotalAmount: WideString; safecall;
    procedure Set_CreditCount(var Param1: WideString); safecall;
    function Get_CreditCount: WideString; safecall;
    procedure Set_CreditTotalAmount(var Param1: WideString); safecall;
    function Get_CreditTotalAmount: WideString; safecall;
    procedure Set_VoidCount(var Param1: WideString); safecall;
    function Get_VoidCount: WideString; safecall;
    procedure Set_VoidTotalAmount(var Param1: WideString); safecall;
    function Get_VoidTotalAmount: WideString; safecall;
    procedure Set_AddValueCount(var Param1: WideString); safecall;
    function Get_AddValueCount: WideString; safecall;
    procedure Set_AddValueTotalAmount(var Param1: WideString); safecall;
    function Get_AddValueTotalAmount: WideString; safecall;
    procedure Set_TipCount(var Param1: WideString); safecall;
    function Get_TipCount: WideString; safecall;
    procedure Set_TipTotalAmount(var Param1: WideString); safecall;
    function Get_TipTotalAmount: WideString; safecall;
    procedure Set_BalanceTransferCount(var Param1: WideString); safecall;
    function Get_BalanceTransferCount: WideString; safecall;
    procedure Set_BalanceTransferTotalAmount(var Param1: WideString); safecall;
    function Get_BalanceTransferTotalAmount: WideString; safecall;
    procedure Set_PointsCount(var Param1: WideString); safecall;
    function Get_PointsCount: WideString; safecall;
    procedure Set_PointsTotalAmount(var Param1: WideString); safecall;
    function Get_PointsTotalAmount: WideString; safecall;
    procedure Set_AddPointsCount(var Param1: WideString); safecall;
    function Get_AddPointsCount: WideString; safecall;
    procedure Set_AddPointsTotalAmount(var Param1: WideString); safecall;
    function Get_AddPointsTotalAmount: WideString; safecall;
    procedure Set_MiscMessage(var Param1: WideString); safecall;
    function Get_MiscMessage: WideString; safecall;
    procedure Set_TransDateTime(var Param1: WideString); safecall;
    function Get_TransDateTime: WideString; safecall;
    procedure Set_GiftCardBalance(var Param1: WideString); safecall;
    function Get_GiftCardBalance: WideString; safecall;
    procedure Set_ImageStatus(var Param1: WideString); safecall;
    function Get_ImageStatus: WideString; safecall;
    procedure Set_EBTFoodBalance(var Param1: WideString); safecall;
    function Get_EBTFoodBalance: WideString; safecall;
    procedure Set_EBTCashBalance(var Param1: WideString); safecall;
    function Get_EBTCashBalance: WideString; safecall;
    procedure Set_CustomerFirstName(var Param1: WideString); safecall;
    function Get_CustomerFirstName: WideString; safecall;
    procedure Set_CustomerMInit(var Param1: WideString); safecall;
    function Get_CustomerMInit: WideString; safecall;
    procedure Set_CustomerLastName(var Param1: WideString); safecall;
    function Get_CustomerLastName: WideString; safecall;
    procedure Set_CustomerHouseNum(var Param1: WideString); safecall;
    function Get_CustomerHouseNum: WideString; safecall;
    procedure Set_CustomerAddress(var Param1: WideString); safecall;
    function Get_CustomerAddress: WideString; safecall;
    procedure Set_CustomerAppNum(var Param1: WideString); safecall;
    function Get_CustomerAppNum: WideString; safecall;
    procedure Set_CustomerCity(var Param1: WideString); safecall;
    function Get_CustomerCity: WideString; safecall;
    procedure Set_State(var Param1: WideString); safecall;
    function Get_State: WideString; safecall;
    procedure Set_ZipCode(var Param1: WideString); safecall;
    function Get_ZipCode: WideString; safecall;
    procedure Set_AcctNum(var Param1: WideString); safecall;
    function Get_AcctNum: WideString; safecall;
    procedure Set_ReturnCode(var Param1: WideString); safecall;
    function Get_ReturnCode: WideString; safecall;
    procedure Set_CreditLimit(var Param1: WideString); safecall;
    function Get_CreditLimit: WideString; safecall;
    procedure Set_Phone_Number(var Param1: WideString); safecall;
    function Get_Phone_Number: WideString; safecall;
    procedure Set_MaxAuthAmount(var Param1: WideString); safecall;
    function Get_MaxAuthAmount: WideString; safecall;
    procedure Set_RestrictCode(var Param1: WideString); safecall;
    function Get_RestrictCode: WideString; safecall;
    procedure Set_AddText1(var Param1: WideString); safecall;
    function Get_AddText1: WideString; safecall;
    procedure Set_AddText2(var Param1: WideString); safecall;
    function Get_AddText2: WideString; safecall;
    procedure Set_AddText3(var Param1: WideString); safecall;
    function Get_AddText3: WideString; safecall;
    procedure Set_AddText4(var Param1: WideString); safecall;
    function Get_AddText4: WideString; safecall;
    procedure Set_GiftPin(var Param1: WideString); safecall;
    function Get_GiftPin: WideString; safecall;
    procedure Set_RecordCount(var Param1: WideString); safecall;
    function Get_RecordCount: WideString; safecall;
    procedure Set_TransRecord(var Param1: WideString); safecall;
    function Get_TransRecord: WideString; safecall;
    procedure Set_ReturnCheckFee(var Param1: WideString); safecall;
    function Get_ReturnCheckFee: WideString; safecall;
    procedure Set_ReturnCheckNote(var Param1: WideString); safecall;
    function Get_ReturnCheckNote: WideString; safecall;
    procedure Set_PS2000Data(var Param1: WideString); safecall;
    function Get_PS2000Data: WideString; safecall;
    procedure Set_PointsBalance(var Param1: WideString); safecall;
    function Get_PointsBalance: WideString; safecall;
    procedure Set_PreAuthCount(var Param1: WideString); safecall;
    function Get_PreAuthCount: WideString; safecall;
    procedure Set_PreAuthAmount(var Param1: WideString); safecall;
    function Get_PreAuthAmount: WideString; safecall;
    procedure Set_PostAuthCount(var Param1: WideString); safecall;
    function Get_PostAuthCount: WideString; safecall;
    procedure Set_PostAuthAmount(var Param1: WideString); safecall;
    function Get_PostAuthAmount: WideString; safecall;
    procedure Set_IssuanceCount(var Param1: WideString); safecall;
    function Get_IssuanceCount: WideString; safecall;
    procedure Set_IssuanceTotalAmount(var Param1: WideString); safecall;
    function Get_IssuanceTotalAmount: WideString; safecall;
    procedure Set_DeactivateCount(var Param1: WideString); safecall;
    function Get_DeactivateCount: WideString; safecall;
    procedure Set_DeactivateTotalAmount(var Param1: WideString); safecall;
    function Get_DeactivateTotalAmount: WideString; safecall;
    procedure Set_BalanceMergeCount(var Param1: WideString); safecall;
    function Get_BalanceMergeCount: WideString; safecall;
    procedure Set_BalanceMergeTotalAmount(var Param1: WideString); safecall;
    function Get_BalanceMergeTotalAmount: WideString; safecall;
    procedure Set_BalanceAdjustCount(var Param1: WideString); safecall;
    function Get_BalanceAdjustCount: WideString; safecall;
    procedure Set_BalanceAdjustTotalAmount(var Param1: WideString); safecall;
    function Get_BalanceAdjustTotalAmount: WideString; safecall;
    procedure Set_ReportLostStolenCount(var Param1: WideString); safecall;
    function Get_ReportLostStolenCount: WideString; safecall;
    procedure Set_ReportLostStolenTotalAmount(var Param1: WideString); safecall;
    function Get_ReportLostStolenTotalAmount: WideString; safecall;
    procedure Set_CashoutCount(var Param1: WideString); safecall;
    function Get_CashoutCount: WideString; safecall;
    procedure Set_CashoutTotalAmount(var Param1: WideString); safecall;
    function Get_CashoutTotalAmount: WideString; safecall;
    procedure Set_ReactivateCount(var Param1: WideString); safecall;
    function Get_ReactivateCount: WideString; safecall;
    procedure Set_ReactivateTotalAmount(var Param1: WideString); safecall;
    function Get_ReactivateTotalAmount: WideString; safecall;
    procedure Set_CCAvailBalance(var Param1: WideString); safecall;
    function Get_CCAvailBalance: WideString; safecall;
    procedure Set_TraceNumber(var Param1: WideString); safecall;
    function Get_TraceNumber: WideString; safecall;
    procedure Set_TransactionReferenceNumber(var Param1: WideString); safecall;
    function Get_TransactionReferenceNumber: WideString; safecall;
    procedure Set_DCAvailBalance(var Param1: WideString); safecall;
    function Get_DCAvailBalance: WideString; safecall;
    procedure Set_SurchargeAmount(var Param1: WideString); safecall;
    function Get_SurchargeAmount: WideString; safecall;
    procedure Set_Receipt(var Param1: WideString); safecall;
    function Get_Receipt: WideString; safecall;
    procedure Set_TID(var Param1: WideString); safecall;
    function Get_TID: WideString; safecall;
    procedure Set_Processor(var Param1: WideString); safecall;
    function Get_Processor: WideString; safecall;
    function Load(var szFileName: OleVariant; var intRecNum: Smallint; var blnValidate: WordBool): RespErrType; safecall;
    function LoadOut(var szFileName: WideString; var intRecNum: Smallint): RespErrType; safecall;
    function LoadXML(var szFileName: WideString): RespErrType; safecall;
    function WriteFile(var eType: RespFileType; var szNewPrefix: OleVariant; 
                       var szNewPath: OleVariant; var intRecNum: Smallint; var blnAppend: WordBool; 
                       var BatchNum: Smallint; var blnLastRec: WordBool): RespErrType; safecall;
    function CleanString(var szStringIn: WideString; var szReplaceList: WideString; 
                         var blnCompact: WordBool; var blnTrim: WordBool; var blnRmvNP: WordBool): WideString; safecall;
    procedure Clear; safecall;
    procedure ClearErr; safecall;
    property BatchNumber: WideString read Get_BatchNumber write Set_BatchNumber;
    property AuthDate: WideString read Get_AuthDate write Set_AuthDate;
    property CashBack: WideString read Get_CashBack write Set_CashBack;
    property AmountDue: WideString read Get_AmountDue write Set_AmountDue;
    property AuthAmount: WideString read Get_AuthAmount write Set_AuthAmount;
    property TransTime: WideString read Get_TransTime write Set_TransTime;
    property TotTransTime: WideString read Get_TotTransTime write Set_TotTransTime;
    property ConfigSize: WideString read Get_ConfigSize write Set_ConfigSize;
    property CurrSize: WideString read Get_CurrSize write Set_CurrSize;
    property AuxRespCode: WideString read Get_AuxRespCode write Set_AuxRespCode;
    property VoidBalance: WideString read Get_VoidBalance write Set_VoidBalance;
    property eCommIndicator: WideString read Get_eCommIndicator write Set_eCommIndicator;
    property CardholderId: WideString read Get_CardholderId write Set_CardholderId;
    property AccountDataSrc: WideString read Get_AccountDataSrc write Set_AccountDataSrc;
    property GetAsString: WideString read Get_GetAsString;
    property GratuityAmntEst: WideString read Get_GratuityAmntEst write Set_GratuityAmntEst;
    property GratuityAmnt: WideString read Get_GratuityAmnt write Set_GratuityAmnt;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property Result: WideString read Get_Result write Set_Result;
    property ResultCode: WideString read Get_ResultCode write Set_ResultCode;
    property CmrclCardFlag: WideString read Get_CmrclCardFlag write Set_CmrclCardFlag;
    property NetID: WideString read Get_NetID write Set_NetID;
    property Auth: WideString read Get_Auth write Set_Auth;
    property Reference: WideString read Get_Reference write Set_Reference;
    property ADDRESVER: WideString read Get_ADDRESVER write Set_ADDRESVER;
    property TDate: WideString read Get_TDate write Set_TDate;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property TransNum: WideString read Get_TransNum write Set_TransNum;
    property TItem: WideString read Get_TItem write Set_TItem;
    property TBATCH: WideString read Get_TBATCH write Set_TBATCH;
    property TI: WideString read Get_TI write Set_TI;
    property TICODE: WideString read Get_TICODE write Set_TICODE;
    property IND: WideString read Get_IND write Set_IND;
    property MSI: WideString read Get_MSI write Set_MSI;
    property Ret: WideString read Get_Ret write Set_Ret;
    property PEM: WideString read Get_PEM write Set_PEM;
    property TIM: WideString read Get_TIM write Set_TIM;
    property ACI: WideString read Get_ACI write Set_ACI;
    property RespCode: WideString read Get_RespCode write Set_RespCode;
    property RRec: WideString read Get_RRec write Set_RRec;
    property CCType: WideString read Get_CCType write Set_CCType;
    property CVV2Response: WideString read Get_CVV2Response write Set_CVV2Response;
    property PurchaseCard: WideString read Get_PurchaseCard write Set_PurchaseCard;
    property RespType: RespFileType read Get_RespType write Set_RespType;
    property Error: RespError read Get_Error;
    property FileName: WideString read Get_FileName write Set_FileName;
    property InpType: RespFileType read Get_InpType write Set_InpType;
    property XDRFile: WideString read Get_XDRFile write Set_XDRFile;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property UserName: WideString read Get_UserName write Set_UserName;
    property Auth_Src_Code: WideString read Get_Auth_Src_Code write Set_Auth_Src_Code;
    property SaleCount: WideString read Get_SaleCount write Set_SaleCount;
    property SaleTotalAmount: WideString read Get_SaleTotalAmount write Set_SaleTotalAmount;
    property ActivationCount: WideString read Get_ActivationCount write Set_ActivationCount;
    property ActivationTotalAmount: WideString read Get_ActivationTotalAmount write Set_ActivationTotalAmount;
    property CreditCount: WideString read Get_CreditCount write Set_CreditCount;
    property CreditTotalAmount: WideString read Get_CreditTotalAmount write Set_CreditTotalAmount;
    property VoidCount: WideString read Get_VoidCount write Set_VoidCount;
    property VoidTotalAmount: WideString read Get_VoidTotalAmount write Set_VoidTotalAmount;
    property AddValueCount: WideString read Get_AddValueCount write Set_AddValueCount;
    property AddValueTotalAmount: WideString read Get_AddValueTotalAmount write Set_AddValueTotalAmount;
    property TipCount: WideString read Get_TipCount write Set_TipCount;
    property TipTotalAmount: WideString read Get_TipTotalAmount write Set_TipTotalAmount;
    property BalanceTransferCount: WideString read Get_BalanceTransferCount write Set_BalanceTransferCount;
    property BalanceTransferTotalAmount: WideString read Get_BalanceTransferTotalAmount write Set_BalanceTransferTotalAmount;
    property PointsCount: WideString read Get_PointsCount write Set_PointsCount;
    property PointsTotalAmount: WideString read Get_PointsTotalAmount write Set_PointsTotalAmount;
    property AddPointsCount: WideString read Get_AddPointsCount write Set_AddPointsCount;
    property AddPointsTotalAmount: WideString read Get_AddPointsTotalAmount write Set_AddPointsTotalAmount;
    property MiscMessage: WideString read Get_MiscMessage write Set_MiscMessage;
    property TransDateTime: WideString read Get_TransDateTime write Set_TransDateTime;
    property GiftCardBalance: WideString read Get_GiftCardBalance write Set_GiftCardBalance;
    property ImageStatus: WideString read Get_ImageStatus write Set_ImageStatus;
    property EBTFoodBalance: WideString read Get_EBTFoodBalance write Set_EBTFoodBalance;
    property EBTCashBalance: WideString read Get_EBTCashBalance write Set_EBTCashBalance;
    property CustomerFirstName: WideString read Get_CustomerFirstName write Set_CustomerFirstName;
    property CustomerMInit: WideString read Get_CustomerMInit write Set_CustomerMInit;
    property CustomerLastName: WideString read Get_CustomerLastName write Set_CustomerLastName;
    property CustomerHouseNum: WideString read Get_CustomerHouseNum write Set_CustomerHouseNum;
    property CustomerAddress: WideString read Get_CustomerAddress write Set_CustomerAddress;
    property CustomerAppNum: WideString read Get_CustomerAppNum write Set_CustomerAppNum;
    property CustomerCity: WideString read Get_CustomerCity write Set_CustomerCity;
    property State: WideString read Get_State write Set_State;
    property ZipCode: WideString read Get_ZipCode write Set_ZipCode;
    property AcctNum: WideString read Get_AcctNum write Set_AcctNum;
    property ReturnCode: WideString read Get_ReturnCode write Set_ReturnCode;
    property CreditLimit: WideString read Get_CreditLimit write Set_CreditLimit;
    property Phone_Number: WideString read Get_Phone_Number write Set_Phone_Number;
    property MaxAuthAmount: WideString read Get_MaxAuthAmount write Set_MaxAuthAmount;
    property RestrictCode: WideString read Get_RestrictCode write Set_RestrictCode;
    property AddText1: WideString read Get_AddText1 write Set_AddText1;
    property AddText2: WideString read Get_AddText2 write Set_AddText2;
    property AddText3: WideString read Get_AddText3 write Set_AddText3;
    property AddText4: WideString read Get_AddText4 write Set_AddText4;
    property GiftPin: WideString read Get_GiftPin write Set_GiftPin;
    property RecordCount: WideString read Get_RecordCount write Set_RecordCount;
    property TransRecord: WideString read Get_TransRecord write Set_TransRecord;
    property ReturnCheckFee: WideString read Get_ReturnCheckFee write Set_ReturnCheckFee;
    property ReturnCheckNote: WideString read Get_ReturnCheckNote write Set_ReturnCheckNote;
    property PS2000Data: WideString read Get_PS2000Data write Set_PS2000Data;
    property PointsBalance: WideString read Get_PointsBalance write Set_PointsBalance;
    property PreAuthCount: WideString read Get_PreAuthCount write Set_PreAuthCount;
    property PreAuthAmount: WideString read Get_PreAuthAmount write Set_PreAuthAmount;
    property PostAuthCount: WideString read Get_PostAuthCount write Set_PostAuthCount;
    property PostAuthAmount: WideString read Get_PostAuthAmount write Set_PostAuthAmount;
    property IssuanceCount: WideString read Get_IssuanceCount write Set_IssuanceCount;
    property IssuanceTotalAmount: WideString read Get_IssuanceTotalAmount write Set_IssuanceTotalAmount;
    property DeactivateCount: WideString read Get_DeactivateCount write Set_DeactivateCount;
    property DeactivateTotalAmount: WideString read Get_DeactivateTotalAmount write Set_DeactivateTotalAmount;
    property BalanceMergeCount: WideString read Get_BalanceMergeCount write Set_BalanceMergeCount;
    property BalanceMergeTotalAmount: WideString read Get_BalanceMergeTotalAmount write Set_BalanceMergeTotalAmount;
    property BalanceAdjustCount: WideString read Get_BalanceAdjustCount write Set_BalanceAdjustCount;
    property BalanceAdjustTotalAmount: WideString read Get_BalanceAdjustTotalAmount write Set_BalanceAdjustTotalAmount;
    property ReportLostStolenCount: WideString read Get_ReportLostStolenCount write Set_ReportLostStolenCount;
    property ReportLostStolenTotalAmount: WideString read Get_ReportLostStolenTotalAmount write Set_ReportLostStolenTotalAmount;
    property CashoutCount: WideString read Get_CashoutCount write Set_CashoutCount;
    property CashoutTotalAmount: WideString read Get_CashoutTotalAmount write Set_CashoutTotalAmount;
    property ReactivateCount: WideString read Get_ReactivateCount write Set_ReactivateCount;
    property ReactivateTotalAmount: WideString read Get_ReactivateTotalAmount write Set_ReactivateTotalAmount;
    property CCAvailBalance: WideString read Get_CCAvailBalance write Set_CCAvailBalance;
    property TraceNumber: WideString read Get_TraceNumber write Set_TraceNumber;
    property TransactionReferenceNumber: WideString read Get_TransactionReferenceNumber write Set_TransactionReferenceNumber;
    property DCAvailBalance: WideString read Get_DCAvailBalance write Set_DCAvailBalance;
    property SurchargeAmount: WideString read Get_SurchargeAmount write Set_SurchargeAmount;
    property Receipt: WideString read Get_Receipt write Set_Receipt;
    property TID: WideString read Get_TID write Set_TID;
    property Processor: WideString read Get_Processor write Set_Processor;
  end;

// *********************************************************************//
// DispIntf:  _PccResponseDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5B2DC0C7-7617-4EB5-B53C-B600698A0D4E}
// *********************************************************************//
  _PccResponseDisp = dispinterface
    ['{5B2DC0C7-7617-4EB5-B53C-B600698A0D4E}']
    property BatchNumber: WideString dispid 1745027198;
    property AuthDate: WideString dispid 1745027197;
    property CashBack: WideString dispid 1745027196;
    property AmountDue: WideString dispid 1745027195;
    property AuthAmount: WideString dispid 1745027194;
    property TransTime: WideString dispid 1745027193;
    property TotTransTime: WideString dispid 1745027192;
    property ConfigSize: WideString dispid 1745027191;
    property CurrSize: WideString dispid 1745027190;
    property AuxRespCode: WideString dispid 1745027189;
    property VoidBalance: WideString dispid 1745027188;
    property eCommIndicator: WideString dispid 1745027187;
    property CardholderId: WideString dispid 1745027186;
    property AccountDataSrc: WideString dispid 1745027185;
    property GetAsString: WideString readonly dispid 1745027184;
    property GratuityAmntEst: WideString dispid 1745027183;
    property GratuityAmnt: WideString dispid 1745027182;
    property ItemID: WideString dispid 1745027181;
    property Result: WideString dispid 1745027180;
    property ResultCode: WideString dispid 1745027179;
    property CmrclCardFlag: WideString dispid 1745027178;
    property NetID: WideString dispid 1745027177;
    property Auth: WideString dispid 1745027176;
    property Reference: WideString dispid 1745027175;
    property ADDRESVER: WideString dispid 1745027174;
    property TDate: WideString dispid 1745027173;
    property Ticket: WideString dispid 1745027172;
    property TransNum: WideString dispid 1745027171;
    property TItem: WideString dispid 1745027170;
    property TBATCH: WideString dispid 1745027169;
    property TI: WideString dispid 1745027168;
    property TICODE: WideString dispid 1745027167;
    property IND: WideString dispid 1745027166;
    property MSI: WideString dispid 1745027165;
    property Ret: WideString dispid 1745027164;
    property PEM: WideString dispid 1745027163;
    property TIM: WideString dispid 1745027162;
    property ACI: WideString dispid 1745027161;
    property RespCode: WideString dispid 1745027160;
    property RRec: WideString dispid 1745027159;
    property CCType: WideString dispid 1745027158;
    property CVV2Response: WideString dispid 1745027157;
    property PurchaseCard: WideString dispid 1745027156;
    property RespType: RespFileType dispid 1745027155;
    property Error: {??RespError}OleVariant readonly dispid 1745027154;
    property FileName: WideString dispid 1745027153;
    property InpType: RespFileType dispid 1745027152;
    property XDRFile: WideString dispid 1745027151;
    property TroutD: WideString dispid 1745027150;
    property UserName: WideString dispid 1745027149;
    property Auth_Src_Code: WideString dispid 1745027148;
    property SaleCount: WideString dispid 1745027147;
    property SaleTotalAmount: WideString dispid 1745027146;
    property ActivationCount: WideString dispid 1745027145;
    property ActivationTotalAmount: WideString dispid 1745027144;
    property CreditCount: WideString dispid 1745027143;
    property CreditTotalAmount: WideString dispid 1745027142;
    property VoidCount: WideString dispid 1745027141;
    property VoidTotalAmount: WideString dispid 1745027140;
    property AddValueCount: WideString dispid 1745027139;
    property AddValueTotalAmount: WideString dispid 1745027138;
    property TipCount: WideString dispid 1745027137;
    property TipTotalAmount: WideString dispid 1745027136;
    property BalanceTransferCount: WideString dispid 1745027135;
    property BalanceTransferTotalAmount: WideString dispid 1745027134;
    property PointsCount: WideString dispid 1745027133;
    property PointsTotalAmount: WideString dispid 1745027132;
    property AddPointsCount: WideString dispid 1745027131;
    property AddPointsTotalAmount: WideString dispid 1745027130;
    property MiscMessage: WideString dispid 1745027129;
    property TransDateTime: WideString dispid 1745027128;
    property GiftCardBalance: WideString dispid 1745027127;
    property ImageStatus: WideString dispid 1745027126;
    property EBTFoodBalance: WideString dispid 1745027125;
    property EBTCashBalance: WideString dispid 1745027124;
    property CustomerFirstName: WideString dispid 1745027123;
    property CustomerMInit: WideString dispid 1745027122;
    property CustomerLastName: WideString dispid 1745027121;
    property CustomerHouseNum: WideString dispid 1745027120;
    property CustomerAddress: WideString dispid 1745027119;
    property CustomerAppNum: WideString dispid 1745027118;
    property CustomerCity: WideString dispid 1745027117;
    property State: WideString dispid 1745027116;
    property ZipCode: WideString dispid 1745027115;
    property AcctNum: WideString dispid 1745027114;
    property ReturnCode: WideString dispid 1745027113;
    property CreditLimit: WideString dispid 1745027112;
    property Phone_Number: WideString dispid 1745027111;
    property MaxAuthAmount: WideString dispid 1745027110;
    property RestrictCode: WideString dispid 1745027109;
    property AddText1: WideString dispid 1745027108;
    property AddText2: WideString dispid 1745027107;
    property AddText3: WideString dispid 1745027106;
    property AddText4: WideString dispid 1745027105;
    property GiftPin: WideString dispid 1745027104;
    property RecordCount: WideString dispid 1745027103;
    property TransRecord: WideString dispid 1745027102;
    property ReturnCheckFee: WideString dispid 1745027101;
    property ReturnCheckNote: WideString dispid 1745027100;
    property PS2000Data: WideString dispid 1745027099;
    property PointsBalance: WideString dispid 1745027098;
    property PreAuthCount: WideString dispid 1745027097;
    property PreAuthAmount: WideString dispid 1745027096;
    property PostAuthCount: WideString dispid 1745027095;
    property PostAuthAmount: WideString dispid 1745027094;
    property IssuanceCount: WideString dispid 1745027093;
    property IssuanceTotalAmount: WideString dispid 1745027092;
    property DeactivateCount: WideString dispid 1745027091;
    property DeactivateTotalAmount: WideString dispid 1745027090;
    property BalanceMergeCount: WideString dispid 1745027089;
    property BalanceMergeTotalAmount: WideString dispid 1745027088;
    property BalanceAdjustCount: WideString dispid 1745027087;
    property BalanceAdjustTotalAmount: WideString dispid 1745027086;
    property ReportLostStolenCount: WideString dispid 1745027085;
    property ReportLostStolenTotalAmount: WideString dispid 1745027084;
    property CashoutCount: WideString dispid 1745027083;
    property CashoutTotalAmount: WideString dispid 1745027082;
    property ReactivateCount: WideString dispid 1745027081;
    property ReactivateTotalAmount: WideString dispid 1745027080;
    property CCAvailBalance: WideString dispid 1745027079;
    property TraceNumber: WideString dispid 1745027078;
    property TransactionReferenceNumber: WideString dispid 1745027077;
    property DCAvailBalance: WideString dispid 1745027076;
    property SurchargeAmount: WideString dispid 1745027075;
    property Receipt: WideString dispid 1745027074;
    property TID: WideString dispid 1745027073;
    property Processor: WideString dispid 1745027072;
    function Load(var szFileName: OleVariant; var intRecNum: Smallint; var blnValidate: WordBool): RespErrType; dispid 1610809471;
    function LoadOut(var szFileName: WideString; var intRecNum: Smallint): RespErrType; dispid 1610809472;
    function LoadXML(var szFileName: WideString): RespErrType; dispid 1610809473;
    function WriteFile(var eType: RespFileType; var szNewPrefix: OleVariant; 
                       var szNewPath: OleVariant; var intRecNum: Smallint; var blnAppend: WordBool; 
                       var BatchNum: Smallint; var blnLastRec: WordBool): RespErrType; dispid 1610809474;
    function CleanString(var szStringIn: WideString; var szReplaceList: WideString; 
                         var blnCompact: WordBool; var blnTrim: WordBool; var blnRmvNP: WordBool): WideString; dispid 1610809475;
    procedure Clear; dispid 1610809476;
    procedure ClearErr; dispid 1610809480;
  end;

// *********************************************************************//
// Interface: _Charge
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A128CBE4-B760-4F9F-A72E-95EFA3753C70}
// *********************************************************************//
  _Charge = interface(IDispatch)
    ['{A128CBE4-B760-4F9F-A72E-95EFA3753C70}']
    procedure Set_DEST_ZIP_CODE(const Param1: WideString); safecall;
    procedure Set_Zip(const Param1: WideString); safecall;
    procedure Set_MCSN(const Param1: WideString); safecall;
    procedure Set_MCSC(const Param1: WideString); safecall;
    function Get_Zip: WideString; safecall;
    function Get_DEST_ZIP_CODE: WideString; safecall;
    function Get_MCSN: WideString; safecall;
    function Get_MCSC: WideString; safecall;
    procedure Set_User(const Param1: WideString); safecall;
    function Get_User: WideString; safecall;
    procedure Set_Track(const Param1: WideString); safecall;
    function Get_Track: WideString; safecall;
    procedure Set_TotalAmount(const Param1: WideString); safecall;
    function Get_TotalAmount: WideString; safecall;
    procedure Set_Ticket(const Param1: WideString); safecall;
    function Get_Ticket: WideString; safecall;
    procedure Set_TaxAmt(const Param1: WideString); safecall;
    function Get_TaxAmt: WideString; safecall;
    procedure Set_Street(const Param1: WideString); safecall;
    function Get_Street: WideString; safecall;
    procedure Set_Reference(const Param1: WideString); safecall;
    function Get_Reference: WideString; safecall;
    procedure Set_RFID(const Param1: WideString); safecall;
    function Get_RFID: WideString; safecall;
    procedure Set_Processor(const Param1: WideString); safecall;
    function Get_Processor: WideString; safecall;
    procedure Set_Path(const Param1: WideString); safecall;
    function Get_Path: WideString; safecall;
    procedure Set_TimeOut(Param1: Integer); safecall;
    function Get_TimeOut: Integer; safecall;
    function Get_TRANSID: WideString; safecall;
    procedure Set_TRANSID(const Param1: WideString); safecall;
    function Get_CustCode: WideString; safecall;
    procedure Set_CustCode(const Param1: WideString); safecall;
    procedure Set_Amount(const Param1: WideString); safecall;
    function Get_Amount: WideString; safecall;
    procedure Set_ExpDate(const Param1: WideString); safecall;
    function Get_ExpDate: WideString; safecall;
    procedure Set_Card(const Param1: WideString); safecall;
    procedure Set_Multi(const Param1: WideString); safecall;
    procedure Set_PeriodicPayment(const Param1: WideString); safecall;
    function Get_Card: WideString; safecall;
    function Get_Multi: WideString; safecall;
    procedure Set_OffLine(const Param1: WideString); safecall;
    function Get_OffLine: WideString; safecall;
    function Get_PeriodicPayment: WideString; safecall;
    procedure Set_Action(Param1: Integer); safecall;
    function Get_Action: Integer; safecall;
    function Get_Command: WideString; safecall;
    procedure Set_Command(const Param1: WideString); safecall;
    function Get_Demo: WordBool; safecall;
    procedure Set_Demo(Param1: WordBool); safecall;
    function Get_MTS: WordBool; safecall;
    procedure Set_MTS(Param1: WordBool); safecall;
    function Get_CardPresent: WideString; safecall;
    procedure Set_CardPresent(const Param1: WideString); safecall;
    function Get_OutDelay: Single; safecall;
    procedure Set_OutDelay(Param1: Single); safecall;
    function Get_CommercialCardFlag: WideString; safecall;
    procedure Set_CommercialCardFlag(const Param1: WideString); safecall;
    function Get_GratuityAmount: WideString; safecall;
    procedure Set_GratuityAmount(const Param1: WideString); safecall;
    function Get_EstGratuityAmount: WideString; safecall;
    procedure Set_EstGratuityAmount(const Param1: WideString); safecall;
    function Get_ItemID: WideString; safecall;
    procedure Set_ItemID(const Param1: WideString); safecall;
    function Get_TroutD: WideString; safecall;
    procedure Set_TroutD(const Param1: WideString); safecall;
    function Get_Store: WideString; safecall;
    procedure Set_Store(const Param1: WideString); safecall;
    function Get_Manual: Integer; safecall;
    procedure Set_Manual(Param1: Integer); safecall;
    function Get_CVV2: WideString; safecall;
    procedure Set_CVV2(const Param1: WideString); safecall;
    function Get_XMLTrans: WordBool; safecall;
    procedure Set_XMLTrans(Param1: WordBool); safecall;
    function Get_member: WideString; safecall;
    procedure Set_member(const Param1: WideString); safecall;
    function Get_MerchantNumber: WideString; safecall;
    procedure Set_MerchantNumber(const Param1: WideString); safecall;
    function Get_LastValidDate: WideString; safecall;
    procedure Set_LastValidDate(const Param1: WideString); safecall;
    function Get_TaxExempt: WordBool; safecall;
    procedure Set_TaxExempt(Param1: WordBool); safecall;
    function Get_Authcode: WideString; safecall;
    procedure Set_Authcode(const Param1: WideString); safecall;
    procedure Set_CheckCard(Param1: WordBool); safecall;
    function Get_CheckCard: WordBool; safecall;
    function Get_AmxChargeDescription: WideString; safecall;
    procedure Set_AmxChargeDescription(const Param1: WideString); safecall;
    function Get_AmxDescription_1: WideString; safecall;
    procedure Set_AmxDescription_1(const Param1: WideString); safecall;
    function Get_AmxDescription_2: WideString; safecall;
    procedure Set_AmxDescription_2(const Param1: WideString); safecall;
    function Get_AmxDescription_3: WideString; safecall;
    procedure Set_AmxDescription_3(const Param1: WideString); safecall;
    function Get_AmxDescription_4: WideString; safecall;
    procedure Set_AmxDescription_4(const Param1: WideString); safecall;
    procedure Set_IPAddress(const Param1: WideString); safecall;
    function Get_Billpay: WideString; safecall;
    procedure Set_Billpay(const Param1: WideString); safecall;
    function Get_Level3: WideString; safecall;
    procedure Set_Level3(const Param1: WideString); safecall;
    function Get_IPAddress: WideString; safecall;
    procedure Set_Port(Param1: Smallint); safecall;
    function Get_Port: Smallint; safecall;
    procedure Set_EnableSSL(Param1: WordBool); safecall;
    function Get_EnableSSL: WordBool; safecall;
    function Get_CommMethod: CommMethod; safecall;
    procedure Set_CommMethod(Param1: CommMethod); safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_PrintReceipts(const Param1: WideString); safecall;
    function Get_PrintReceipts: WideString; safecall;
    function Get_DriverID: WideString; safecall;
    procedure Set_DriverID(const Param1: WideString); safecall;
    function Get_DriverPIN: WideString; safecall;
    procedure Set_DriverPIN(const Param1: WideString); safecall;
    function Get_IDNumber: WideString; safecall;
    procedure Set_IDNumber(const Param1: WideString); safecall;
    function Get_Odometer: WideString; safecall;
    procedure Set_Odometer(const Param1: WideString); safecall;
    function Get_RestrictionCode: WideString; safecall;
    procedure Set_RestrictionCode(const Param1: WideString); safecall;
    function Get_VehicleID: WideString; safecall;
    procedure Set_VehicleID(const Param1: WideString); safecall;
    function Get_ProductDetailCount: WideString; safecall;
    procedure Set_ProductDetailCount(const Param1: WideString); safecall;
    function Get_ProductDetailQuantity_1: WideString; safecall;
    procedure Set_ProductDetailQuantity_1(const Param1: WideString); safecall;
    function Get_ProductDetailCode_1: WideString; safecall;
    procedure Set_ProductDetailCode_1(const Param1: WideString); safecall;
    function Get_ProductDetailAmount_1: WideString; safecall;
    procedure Set_ProductDetailAmount_1(const Param1: WideString); safecall;
    function Get_ProductDetailQuantity_2: WideString; safecall;
    procedure Set_ProductDetailQuantity_2(const Param1: WideString); safecall;
    function Get_ProductDetailCode_2: WideString; safecall;
    procedure Set_ProductDetailCode_2(const Param1: WideString); safecall;
    function Get_ProductDetailAmount_2: WideString; safecall;
    procedure Set_ProductDetailAmount_2(const Param1: WideString); safecall;
    function Get_ProductDetailQuantity_3: WideString; safecall;
    procedure Set_ProductDetailQuantity_3(const Param1: WideString); safecall;
    function Get_ProductDetailCode_3: WideString; safecall;
    procedure Set_ProductDetailCode_3(const Param1: WideString); safecall;
    function Get_ProductDetailAmount_3: WideString; safecall;
    procedure Set_ProductDetailAmount_3(const Param1: WideString); safecall;
    function Get_ProductDetailQuantity_4: WideString; safecall;
    procedure Set_ProductDetailQuantity_4(const Param1: WideString); safecall;
    function Get_ProductDetailCode_4: WideString; safecall;
    procedure Set_ProductDetailCode_4(const Param1: WideString); safecall;
    function Get_ProductDetailAmount_4: WideString; safecall;
    procedure Set_ProductDetailAmount_4(const Param1: WideString); safecall;
    function Get_ProductDetailQuantity_5: WideString; safecall;
    procedure Set_ProductDetailQuantity_5(const Param1: WideString); safecall;
    function Get_ProductDetailCode_5: WideString; safecall;
    procedure Set_ProductDetailCode_5(const Param1: WideString); safecall;
    function Get_ProductDetailAmount_5: WideString; safecall;
    procedure Set_ProductDetailAmount_5(const Param1: WideString); safecall;
    function Get_ProductDetailQuantity_6: WideString; safecall;
    procedure Set_ProductDetailQuantity_6(const Param1: WideString); safecall;
    function Get_ProductDetailCode_6: WideString; safecall;
    procedure Set_ProductDetailCode_6(const Param1: WideString); safecall;
    function Get_ProductDetailAmount_6: WideString; safecall;
    procedure Set_ProductDetailAmount_6(const Param1: WideString); safecall;
    function Get_ProductDetailQuantity_7: WideString; safecall;
    procedure Set_ProductDetailQuantity_7(const Param1: WideString); safecall;
    function Get_ProductDetailCode_7: WideString; safecall;
    procedure Set_ProductDetailCode_7(const Param1: WideString); safecall;
    function Get_ProductDetailAmount_7: WideString; safecall;
    procedure Set_ProductDetailAmount_7(const Param1: WideString); safecall;
    function Get_ProductDetailQuantity_8: WideString; safecall;
    procedure Set_ProductDetailQuantity_8(const Param1: WideString); safecall;
    function Get_ProductDetailCode_8: WideString; safecall;
    procedure Set_ProductDetailCode_8(const Param1: WideString); safecall;
    function Get_ProductDetailAmount_8: WideString; safecall;
    procedure Set_ProductDetailAmount_8(const Param1: WideString); safecall;
    function Get_ProductDetailQuantity_9: WideString; safecall;
    procedure Set_ProductDetailQuantity_9(const Param1: WideString); safecall;
    function Get_ProductDetailCode_9: WideString; safecall;
    procedure Set_ProductDetailCode_9(const Param1: WideString); safecall;
    function Get_ProductDetailAmount_9: WideString; safecall;
    procedure Set_ProductDetailAmount_9(const Param1: WideString); safecall;
    function Get_ProductDetailQuantity_10: WideString; safecall;
    procedure Set_ProductDetailQuantity_10(const Param1: WideString); safecall;
    function Get_ProductDetailCode_10: WideString; safecall;
    procedure Set_ProductDetailCode_10(const Param1: WideString); safecall;
    function Get_ProductDetailAmount_10: WideString; safecall;
    procedure Set_ProductDetailAmount_10(const Param1: WideString); safecall;
    function Get_StoreNum: WideString; safecall;
    procedure Set_StoreNum(const Param1: WideString); safecall;
    function Get_SSNum: WideString; safecall;
    procedure Set_SSNum(const Param1: WideString); safecall;
    function Get_CustomerHouseNum: WideString; safecall;
    procedure Set_CustomerHouseNum(const Param1: WideString); safecall;
    function Get_Phone_Number: WideString; safecall;
    procedure Set_Phone_Number(const Param1: WideString); safecall;
    function Get_Birth_Date: WideString; safecall;
    procedure Set_Birth_Date(const Param1: WideString); safecall;
    function Get_PumpNumber: WideString; safecall;
    procedure Set_PumpNumber(const Param1: WideString); safecall;
    procedure Set_CfgEnabled(Param1: WordBool); safecall;
    function Get_CfgEnabled: WordBool; safecall;
    procedure Set_CfgType(Param1: Byte); safecall;
    function Get_CfgType: Byte; safecall;
    procedure Set_CfgPath(const Param1: WideString); safecall;
    function Get_CfgPath: WideString; safecall;
    procedure Set_CfgSizeLimit(const Param1: WideString); safecall;
    function Get_CfgSizeLimit: WideString; safecall;
    procedure Set_CfgKeepDays(const Param1: WideString); safecall;
    function Get_CfgKeepDays: WideString; safecall;
    procedure Set_FleetCard(const Param1: WideString); safecall;
    function Get_FleetCard: WideString; safecall;
    procedure Set_CreditPlanNumber(const Param1: WideString); safecall;
    function Get_CreditPlanNumber: WideString; safecall;
    function GetPCard: WideString; safecall;
    function GetRespCode: WideString; safecall;
    function GetTroutD: WideString; safecall;
    function GetResponseCommercialType: WideString; safecall;
    function GetResponsePurchaseCardType: WideString; safecall;
    function GetCardIDCode: WideString; safecall;
    function GetAcctDataSrc: WideString; safecall;
    function GetGratuityAmount: WideString; safecall;
    function GetEstGratuityAmount: WideString; safecall;
    function GetItemID: WideString; safecall;
    function GetTBatch: WideString; safecall;
    function GetTicket: WideString; safecall;
    function GetTICode: WideString; safecall;
    function GetTI: WideString; safecall;
    function GetTIM: WideString; safecall;
    function GetTitem: WideString; safecall;
    function GetTransNum: WideString; safecall;
    function GetTDate: WideString; safecall;
    function GetRet: WideString; safecall;
    function GetResult: WideString; safecall;
    function GetRefNumber: WideString; safecall;
    function GetPEM: WideString; safecall;
    function GetMSI: WideString; safecall;
    function GetIND: WideString; safecall;
    function GetErrorDesc: WideString; safecall;
    function GetErrorCode: Integer; safecall;
    function GetCaptured: WordBool; safecall;
    function GetAVS: WideString; safecall;
    function GetCVV2: WideString; safecall;
    function GetAuth: WideString; safecall;
    function GetACI: WideString; safecall;
    function GetCustomerFirstName: WideString; safecall;
    function GetCustomerMInit: WideString; safecall;
    function GetCustomerLastName: WideString; safecall;
    function GetCustomerHouseNum: WideString; safecall;
    function GetCustomerAddress: WideString; safecall;
    function GetCustomerAppNum: WideString; safecall;
    function GetCustomerCity: WideString; safecall;
    function GetState: WideString; safecall;
    function GetZipCode: WideString; safecall;
    function GetAcctNum: WideString; safecall;
    function GetReturnCode: WideString; safecall;
    function GetCreditLimit: WideString; safecall;
    function GetPhoneNumber: WideString; safecall;
    function GetRestrictCode: WideString; safecall;
    function GetMaxAuth: WideString; safecall;
    function GetAddText1: WideString; safecall;
    function GetAddText2: WideString; safecall;
    function GetAddText3: WideString; safecall;
    function GetAddText4: WideString; safecall;
    function GetMiscMessage: WideString; safecall;
    function GetCurrentDBSize: OleVariant; safecall;
    function GetConfigDBSize: OleVariant; safecall;
    function GetRecordCount: OleVariant; safecall;
    function GetTransRecord: OleVariant; safecall;
    function GetPS2000: OleVariant; safecall;
    function GetAuthAmount: OleVariant; safecall;
    function GetAmountDue: OleVariant; safecall;
    function GetCCAvailBalance: OleVariant; safecall;
    function GetTraceNumber: OleVariant; safecall;
    function GetTransactionReferenceNumber: OleVariant; safecall;
    function GetReceipt: OleVariant; safecall;
    function AddMatch: WideString; safecall;
    function CVV2Match: WideString; safecall;
    function GetIndex: Integer; safecall;
    function ValidCardLength(const strCardNumber: WideString): WordBool; safecall;
    function VerifyCreditCard(const CardNumber: WideString): WordBool; safecall;
    function PccSysExists: WordBool; safecall;
    function GetXMLResponse: WideString; safecall;
    function GetCreditCardType(const strCardNumber: WideString): WideString; safecall;
    function GetCreditCardIssuer(const strCardNumber: WideString): WideString; safecall;
    function GetHostType(var szProcessor: WideString; var szMerchNum: WideString; var eTIDType: Byte): Smallint; safecall;
    function DeleteUserFiles: OleVariant; safecall;
    procedure Clear; safecall;
    function Cancel: OleVariant; safecall;
    function Send(var FileType: FileType): OleVariant; safecall;
    function GetCompanyName: WideString; safecall;
    function GetCompanyStreet: WideString; safecall;
    function GetCompanyCity: WideString; safecall;
    function GetCompanyState: WideString; safecall;
    function GetCompanyZip: WideString; safecall;
    function CommercialCardType(var strCard: WideString): WideString; safecall;
    function getCommercialCardType(var strCard: WideString): WideString; safecall;
    function VerifyExpDate: WordBool; safecall;
    function ValidDate: WordBool; safecall;
    function VerifyAmount: WordBool; safecall;
    function GetParseData(var Data: WideString): Smallint; safecall;
    function VerifyMerchantNumber(var strMerchant: WideString): WordBool; safecall;
    function GetXMLRequest: WideString; safecall;
    function GetPLProcessor: OleVariant; safecall;
    function GetPLMerchantNumber: OleVariant; safecall;
    property DEST_ZIP_CODE: WideString read Get_DEST_ZIP_CODE write Set_DEST_ZIP_CODE;
    property Zip: WideString read Get_Zip write Set_Zip;
    property MCSN: WideString read Get_MCSN write Set_MCSN;
    property MCSC: WideString read Get_MCSC write Set_MCSC;
    property User: WideString read Get_User write Set_User;
    property Track: WideString read Get_Track write Set_Track;
    property TotalAmount: WideString read Get_TotalAmount write Set_TotalAmount;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property TaxAmt: WideString read Get_TaxAmt write Set_TaxAmt;
    property Street: WideString read Get_Street write Set_Street;
    property Reference: WideString read Get_Reference write Set_Reference;
    property RFID: WideString read Get_RFID write Set_RFID;
    property Processor: WideString read Get_Processor write Set_Processor;
    property Path: WideString read Get_Path write Set_Path;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property TRANSID: WideString read Get_TRANSID write Set_TRANSID;
    property CustCode: WideString read Get_CustCode write Set_CustCode;
    property Amount: WideString read Get_Amount write Set_Amount;
    property ExpDate: WideString read Get_ExpDate write Set_ExpDate;
    property Card: WideString read Get_Card write Set_Card;
    property Multi: WideString read Get_Multi write Set_Multi;
    property PeriodicPayment: WideString read Get_PeriodicPayment write Set_PeriodicPayment;
    property OffLine: WideString read Get_OffLine write Set_OffLine;
    property Action: Integer read Get_Action write Set_Action;
    property Command: WideString read Get_Command write Set_Command;
    property Demo: WordBool read Get_Demo write Set_Demo;
    property MTS: WordBool read Get_MTS write Set_MTS;
    property CardPresent: WideString read Get_CardPresent write Set_CardPresent;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
    property CommercialCardFlag: WideString read Get_CommercialCardFlag write Set_CommercialCardFlag;
    property GratuityAmount: WideString read Get_GratuityAmount write Set_GratuityAmount;
    property EstGratuityAmount: WideString read Get_EstGratuityAmount write Set_EstGratuityAmount;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property Store: WideString read Get_Store write Set_Store;
    property Manual: Integer read Get_Manual write Set_Manual;
    property CVV2: WideString read Get_CVV2 write Set_CVV2;
    property XMLTrans: WordBool read Get_XMLTrans write Set_XMLTrans;
    property member: WideString read Get_member write Set_member;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property LastValidDate: WideString read Get_LastValidDate write Set_LastValidDate;
    property TaxExempt: WordBool read Get_TaxExempt write Set_TaxExempt;
    property Authcode: WideString read Get_Authcode write Set_Authcode;
    property CheckCard: WordBool read Get_CheckCard write Set_CheckCard;
    property AmxChargeDescription: WideString read Get_AmxChargeDescription write Set_AmxChargeDescription;
    property AmxDescription_1: WideString read Get_AmxDescription_1 write Set_AmxDescription_1;
    property AmxDescription_2: WideString read Get_AmxDescription_2 write Set_AmxDescription_2;
    property AmxDescription_3: WideString read Get_AmxDescription_3 write Set_AmxDescription_3;
    property AmxDescription_4: WideString read Get_AmxDescription_4 write Set_AmxDescription_4;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Billpay: WideString read Get_Billpay write Set_Billpay;
    property Level3: WideString read Get_Level3 write Set_Level3;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property Index: Integer read Get_Index write Set_Index;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property DriverID: WideString read Get_DriverID write Set_DriverID;
    property DriverPIN: WideString read Get_DriverPIN write Set_DriverPIN;
    property IDNumber: WideString read Get_IDNumber write Set_IDNumber;
    property Odometer: WideString read Get_Odometer write Set_Odometer;
    property RestrictionCode: WideString read Get_RestrictionCode write Set_RestrictionCode;
    property VehicleID: WideString read Get_VehicleID write Set_VehicleID;
    property ProductDetailCount: WideString read Get_ProductDetailCount write Set_ProductDetailCount;
    property ProductDetailQuantity_1: WideString read Get_ProductDetailQuantity_1 write Set_ProductDetailQuantity_1;
    property ProductDetailCode_1: WideString read Get_ProductDetailCode_1 write Set_ProductDetailCode_1;
    property ProductDetailAmount_1: WideString read Get_ProductDetailAmount_1 write Set_ProductDetailAmount_1;
    property ProductDetailQuantity_2: WideString read Get_ProductDetailQuantity_2 write Set_ProductDetailQuantity_2;
    property ProductDetailCode_2: WideString read Get_ProductDetailCode_2 write Set_ProductDetailCode_2;
    property ProductDetailAmount_2: WideString read Get_ProductDetailAmount_2 write Set_ProductDetailAmount_2;
    property ProductDetailQuantity_3: WideString read Get_ProductDetailQuantity_3 write Set_ProductDetailQuantity_3;
    property ProductDetailCode_3: WideString read Get_ProductDetailCode_3 write Set_ProductDetailCode_3;
    property ProductDetailAmount_3: WideString read Get_ProductDetailAmount_3 write Set_ProductDetailAmount_3;
    property ProductDetailQuantity_4: WideString read Get_ProductDetailQuantity_4 write Set_ProductDetailQuantity_4;
    property ProductDetailCode_4: WideString read Get_ProductDetailCode_4 write Set_ProductDetailCode_4;
    property ProductDetailAmount_4: WideString read Get_ProductDetailAmount_4 write Set_ProductDetailAmount_4;
    property ProductDetailQuantity_5: WideString read Get_ProductDetailQuantity_5 write Set_ProductDetailQuantity_5;
    property ProductDetailCode_5: WideString read Get_ProductDetailCode_5 write Set_ProductDetailCode_5;
    property ProductDetailAmount_5: WideString read Get_ProductDetailAmount_5 write Set_ProductDetailAmount_5;
    property ProductDetailQuantity_6: WideString read Get_ProductDetailQuantity_6 write Set_ProductDetailQuantity_6;
    property ProductDetailCode_6: WideString read Get_ProductDetailCode_6 write Set_ProductDetailCode_6;
    property ProductDetailAmount_6: WideString read Get_ProductDetailAmount_6 write Set_ProductDetailAmount_6;
    property ProductDetailQuantity_7: WideString read Get_ProductDetailQuantity_7 write Set_ProductDetailQuantity_7;
    property ProductDetailCode_7: WideString read Get_ProductDetailCode_7 write Set_ProductDetailCode_7;
    property ProductDetailAmount_7: WideString read Get_ProductDetailAmount_7 write Set_ProductDetailAmount_7;
    property ProductDetailQuantity_8: WideString read Get_ProductDetailQuantity_8 write Set_ProductDetailQuantity_8;
    property ProductDetailCode_8: WideString read Get_ProductDetailCode_8 write Set_ProductDetailCode_8;
    property ProductDetailAmount_8: WideString read Get_ProductDetailAmount_8 write Set_ProductDetailAmount_8;
    property ProductDetailQuantity_9: WideString read Get_ProductDetailQuantity_9 write Set_ProductDetailQuantity_9;
    property ProductDetailCode_9: WideString read Get_ProductDetailCode_9 write Set_ProductDetailCode_9;
    property ProductDetailAmount_9: WideString read Get_ProductDetailAmount_9 write Set_ProductDetailAmount_9;
    property ProductDetailQuantity_10: WideString read Get_ProductDetailQuantity_10 write Set_ProductDetailQuantity_10;
    property ProductDetailCode_10: WideString read Get_ProductDetailCode_10 write Set_ProductDetailCode_10;
    property ProductDetailAmount_10: WideString read Get_ProductDetailAmount_10 write Set_ProductDetailAmount_10;
    property StoreNum: WideString read Get_StoreNum write Set_StoreNum;
    property SSNum: WideString read Get_SSNum write Set_SSNum;
    property CustomerHouseNum: WideString read Get_CustomerHouseNum write Set_CustomerHouseNum;
    property Phone_Number: WideString read Get_Phone_Number write Set_Phone_Number;
    property Birth_Date: WideString read Get_Birth_Date write Set_Birth_Date;
    property PumpNumber: WideString read Get_PumpNumber write Set_PumpNumber;
    property CfgEnabled: WordBool read Get_CfgEnabled write Set_CfgEnabled;
    property CfgType: Byte read Get_CfgType write Set_CfgType;
    property CfgPath: WideString read Get_CfgPath write Set_CfgPath;
    property CfgSizeLimit: WideString read Get_CfgSizeLimit write Set_CfgSizeLimit;
    property CfgKeepDays: WideString read Get_CfgKeepDays write Set_CfgKeepDays;
    property FleetCard: WideString read Get_FleetCard write Set_FleetCard;
    property CreditPlanNumber: WideString read Get_CreditPlanNumber write Set_CreditPlanNumber;
  end;

// *********************************************************************//
// DispIntf:  _ChargeDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A128CBE4-B760-4F9F-A72E-95EFA3753C70}
// *********************************************************************//
  _ChargeDisp = dispinterface
    ['{A128CBE4-B760-4F9F-A72E-95EFA3753C70}']
    property DEST_ZIP_CODE: WideString dispid 1745027178;
    property Zip: WideString dispid 1745027177;
    property MCSN: WideString dispid 1745027176;
    property MCSC: WideString dispid 1745027175;
    property User: WideString dispid 1745027174;
    property Track: WideString dispid 1745027173;
    property TotalAmount: WideString dispid 1745027172;
    property Ticket: WideString dispid 1745027171;
    property TaxAmt: WideString dispid 1745027170;
    property Street: WideString dispid 1745027169;
    property Reference: WideString dispid 1745027168;
    property RFID: WideString dispid 1745027167;
    property Processor: WideString dispid 1745027166;
    property Path: WideString dispid 1745027165;
    property TimeOut: Integer dispid 1745027164;
    property TRANSID: WideString dispid 1745027163;
    property CustCode: WideString dispid 1745027162;
    property Amount: WideString dispid 1745027161;
    property ExpDate: WideString dispid 1745027160;
    property Card: WideString dispid 1745027159;
    property Multi: WideString dispid 1745027158;
    property PeriodicPayment: WideString dispid 1745027157;
    property OffLine: WideString dispid 1745027156;
    property Action: Integer dispid 1745027155;
    property Command: WideString dispid 1745027154;
    property Demo: WordBool dispid 1745027153;
    property MTS: WordBool dispid 1745027152;
    property CardPresent: WideString dispid 1745027151;
    property OutDelay: Single dispid 1745027150;
    property CommercialCardFlag: WideString dispid 1745027149;
    property GratuityAmount: WideString dispid 1745027148;
    property EstGratuityAmount: WideString dispid 1745027147;
    property ItemID: WideString dispid 1745027146;
    property TroutD: WideString dispid 1745027145;
    property Store: WideString dispid 1745027144;
    property Manual: Integer dispid 1745027143;
    property CVV2: WideString dispid 1745027142;
    property XMLTrans: WordBool dispid 1745027141;
    property member: WideString dispid 1745027140;
    property MerchantNumber: WideString dispid 1745027139;
    property LastValidDate: WideString dispid 1745027138;
    property TaxExempt: WordBool dispid 1745027137;
    property Authcode: WideString dispid 1745027136;
    property CheckCard: WordBool dispid 1745027135;
    property AmxChargeDescription: WideString dispid 1745027134;
    property AmxDescription_1: WideString dispid 1745027133;
    property AmxDescription_2: WideString dispid 1745027132;
    property AmxDescription_3: WideString dispid 1745027131;
    property AmxDescription_4: WideString dispid 1745027130;
    property IPAddress: WideString dispid 1745027129;
    property Billpay: WideString dispid 1745027128;
    property Level3: WideString dispid 1745027127;
    property Port: Smallint dispid 1745027126;
    property EnableSSL: WordBool dispid 1745027125;
    property CommMethod: CommMethod dispid 1745027124;
    property Index: Integer dispid 1745027123;
    property PrintReceipts: WideString dispid 1745027122;
    property DriverID: WideString dispid 1745027121;
    property DriverPIN: WideString dispid 1745027120;
    property IDNumber: WideString dispid 1745027119;
    property Odometer: WideString dispid 1745027118;
    property RestrictionCode: WideString dispid 1745027117;
    property VehicleID: WideString dispid 1745027116;
    property ProductDetailCount: WideString dispid 1745027115;
    property ProductDetailQuantity_1: WideString dispid 1745027114;
    property ProductDetailCode_1: WideString dispid 1745027113;
    property ProductDetailAmount_1: WideString dispid 1745027112;
    property ProductDetailQuantity_2: WideString dispid 1745027111;
    property ProductDetailCode_2: WideString dispid 1745027110;
    property ProductDetailAmount_2: WideString dispid 1745027109;
    property ProductDetailQuantity_3: WideString dispid 1745027108;
    property ProductDetailCode_3: WideString dispid 1745027107;
    property ProductDetailAmount_3: WideString dispid 1745027106;
    property ProductDetailQuantity_4: WideString dispid 1745027105;
    property ProductDetailCode_4: WideString dispid 1745027104;
    property ProductDetailAmount_4: WideString dispid 1745027103;
    property ProductDetailQuantity_5: WideString dispid 1745027102;
    property ProductDetailCode_5: WideString dispid 1745027101;
    property ProductDetailAmount_5: WideString dispid 1745027100;
    property ProductDetailQuantity_6: WideString dispid 1745027099;
    property ProductDetailCode_6: WideString dispid 1745027098;
    property ProductDetailAmount_6: WideString dispid 1745027097;
    property ProductDetailQuantity_7: WideString dispid 1745027096;
    property ProductDetailCode_7: WideString dispid 1745027095;
    property ProductDetailAmount_7: WideString dispid 1745027094;
    property ProductDetailQuantity_8: WideString dispid 1745027093;
    property ProductDetailCode_8: WideString dispid 1745027092;
    property ProductDetailAmount_8: WideString dispid 1745027091;
    property ProductDetailQuantity_9: WideString dispid 1745027090;
    property ProductDetailCode_9: WideString dispid 1745027089;
    property ProductDetailAmount_9: WideString dispid 1745027088;
    property ProductDetailQuantity_10: WideString dispid 1745027087;
    property ProductDetailCode_10: WideString dispid 1745027086;
    property ProductDetailAmount_10: WideString dispid 1745027085;
    property StoreNum: WideString dispid 1745027084;
    property SSNum: WideString dispid 1745027083;
    property CustomerHouseNum: WideString dispid 1745027082;
    property Phone_Number: WideString dispid 1745027081;
    property Birth_Date: WideString dispid 1745027080;
    property PumpNumber: WideString dispid 1745027079;
    property CfgEnabled: WordBool dispid 1745027078;
    property CfgType: Byte dispid 1745027077;
    property CfgPath: WideString dispid 1745027076;
    property CfgSizeLimit: WideString dispid 1745027075;
    property CfgKeepDays: WideString dispid 1745027074;
    property FleetCard: WideString dispid 1745027073;
    property CreditPlanNumber: WideString dispid 1745027072;
    function GetPCard: WideString; dispid 1610809451;
    function GetRespCode: WideString; dispid 1610809452;
    function GetTroutD: WideString; dispid 1610809453;
    function GetResponseCommercialType: WideString; dispid 1610809454;
    function GetResponsePurchaseCardType: WideString; dispid 1610809455;
    function GetCardIDCode: WideString; dispid 1610809456;
    function GetAcctDataSrc: WideString; dispid 1610809457;
    function GetGratuityAmount: WideString; dispid 1610809458;
    function GetEstGratuityAmount: WideString; dispid 1610809459;
    function GetItemID: WideString; dispid 1610809460;
    function GetTBatch: WideString; dispid 1610809461;
    function GetTicket: WideString; dispid 1610809462;
    function GetTICode: WideString; dispid 1610809463;
    function GetTI: WideString; dispid 1610809464;
    function GetTIM: WideString; dispid 1610809465;
    function GetTitem: WideString; dispid 1610809466;
    function GetTransNum: WideString; dispid 1610809467;
    function GetTDate: WideString; dispid 1610809468;
    function GetRet: WideString; dispid 1610809469;
    function GetResult: WideString; dispid 1610809470;
    function GetRefNumber: WideString; dispid 1610809471;
    function GetPEM: WideString; dispid 1610809472;
    function GetMSI: WideString; dispid 1610809473;
    function GetIND: WideString; dispid 1610809474;
    function GetErrorDesc: WideString; dispid 1610809475;
    function GetErrorCode: Integer; dispid 1610809476;
    function GetCaptured: WordBool; dispid 1610809477;
    function GetAVS: WideString; dispid 1610809478;
    function GetCVV2: WideString; dispid 1610809479;
    function GetAuth: WideString; dispid 1610809480;
    function GetACI: WideString; dispid 1610809481;
    function GetCustomerFirstName: WideString; dispid 1610809482;
    function GetCustomerMInit: WideString; dispid 1610809483;
    function GetCustomerLastName: WideString; dispid 1610809484;
    function GetCustomerHouseNum: WideString; dispid 1610809485;
    function GetCustomerAddress: WideString; dispid 1610809486;
    function GetCustomerAppNum: WideString; dispid 1610809487;
    function GetCustomerCity: WideString; dispid 1610809488;
    function GetState: WideString; dispid 1610809489;
    function GetZipCode: WideString; dispid 1610809490;
    function GetAcctNum: WideString; dispid 1610809491;
    function GetReturnCode: WideString; dispid 1610809492;
    function GetCreditLimit: WideString; dispid 1610809493;
    function GetPhoneNumber: WideString; dispid 1610809494;
    function GetRestrictCode: WideString; dispid 1610809495;
    function GetMaxAuth: WideString; dispid 1610809496;
    function GetAddText1: WideString; dispid 1610809497;
    function GetAddText2: WideString; dispid 1610809498;
    function GetAddText3: WideString; dispid 1610809499;
    function GetAddText4: WideString; dispid 1610809500;
    function GetMiscMessage: WideString; dispid 1610809501;
    function GetCurrentDBSize: OleVariant; dispid 1610809502;
    function GetConfigDBSize: OleVariant; dispid 1610809503;
    function GetRecordCount: OleVariant; dispid 1610809504;
    function GetTransRecord: OleVariant; dispid 1610809505;
    function GetPS2000: OleVariant; dispid 1610809506;
    function GetAuthAmount: OleVariant; dispid 1610809507;
    function GetAmountDue: OleVariant; dispid 1610809508;
    function GetCCAvailBalance: OleVariant; dispid 1610809509;
    function GetTraceNumber: OleVariant; dispid 1610809510;
    function GetTransactionReferenceNumber: OleVariant; dispid 1610809511;
    function GetReceipt: OleVariant; dispid 1610809512;
    function AddMatch: WideString; dispid 1610809514;
    function CVV2Match: WideString; dispid 1610809515;
    function GetIndex: Integer; dispid 1610809516;
    function ValidCardLength(const strCardNumber: WideString): WordBool; dispid 1610809517;
    function VerifyCreditCard(const CardNumber: WideString): WordBool; dispid 1610809519;
    function PccSysExists: WordBool; dispid 1610809521;
    function GetXMLResponse: WideString; dispid 1610809522;
    function GetCreditCardType(const strCardNumber: WideString): WideString; dispid 1610809523;
    function GetCreditCardIssuer(const strCardNumber: WideString): WideString; dispid 1610809524;
    function GetHostType(var szProcessor: WideString; var szMerchNum: WideString; var eTIDType: Byte): Smallint; dispid 1610809525;
    function DeleteUserFiles: OleVariant; dispid 1610809527;
    procedure Clear; dispid 1610809530;
    function Cancel: OleVariant; dispid 1610809532;
    function Send(var FileType: FileType): OleVariant; dispid 1610809533;
    function GetCompanyName: WideString; dispid 1610809534;
    function GetCompanyStreet: WideString; dispid 1610809535;
    function GetCompanyCity: WideString; dispid 1610809536;
    function GetCompanyState: WideString; dispid 1610809537;
    function GetCompanyZip: WideString; dispid 1610809538;
    function CommercialCardType(var strCard: WideString): WideString; dispid 1610809541;
    function getCommercialCardType(var strCard: WideString): WideString; dispid 1610809542;
    function VerifyExpDate: WordBool; dispid 1610809543;
    function ValidDate: WordBool; dispid 1610809544;
    function VerifyAmount: WordBool; dispid 1610809545;
    function GetParseData(var Data: WideString): Smallint; dispid 1610809546;
    function VerifyMerchantNumber(var strMerchant: WideString): WordBool; dispid 1610809547;
    function GetXMLRequest: WideString; dispid 1610809551;
    function GetPLProcessor: OleVariant; dispid 1610809552;
    function GetPLMerchantNumber: OleVariant; dispid 1610809553;
  end;

// *********************************************************************//
// DispIntf:  __Charge
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {63AA7D57-F014-42CE-B747-7FEFF2F8875B}
// *********************************************************************//
  __Charge = dispinterface
    ['{63AA7D57-F014-42CE-B747-7FEFF2F8875B}']
    procedure Resize; dispid 1;
    procedure Click; dispid 2;
    procedure DblClick; dispid 3;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid 4;
    procedure KeyPress(var KeyAscii: Smallint); dispid 5;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid 6;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 7;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 8;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid 9;
  end;

// *********************************************************************//
// The Class CopccTran provides a Create and CreateRemote method to          
// create instances of the default interface _pccTran exposed by              
// the CoClass pccTran. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CopccTran = class
    class function Create: _pccTran;
    class function CreateRemote(const MachineName: string): _pccTran;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TpccTran
// Help String      : 
// Default Interface: _pccTran
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TpccTranProperties= class;
{$ENDIF}
  TpccTran = class(TOleServer)
  private
    FIntf:        _pccTran;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TpccTranProperties;
    function      GetServerProperties: TpccTranProperties;
{$ENDIF}
    function      GetDefaultInterface: _pccTran;
  protected
    procedure InitServerData; override;
    function Get_mszTransPacket: WideString;
    procedure Set_mszTransPacket(const mszTransPacket: WideString);
    procedure Set_TransPacket(var Param1: WideString);
    function Get_TransPacket: WideString;
    procedure Set_TaxExempt(var Param1: WordBool);
    function Get_TaxExempt: WordBool;
    procedure Set_Method(var Param1: TxnMethodType);
    function Get_Method: TxnMethodType;
    procedure Set_TransTime(var Param1: WideString);
    function Get_TransTime: WideString;
    procedure Set_TotTransTime(var Param1: WideString);
    function Get_TotTransTime: WideString;
    procedure Set_Authcode(var Param1: WideString);
    function Get_Authcode: WideString;
    procedure Set_TxnTimeout(var Param1: WideString);
    function Get_TxnTimeout: WideString;
    procedure Set_CfgEnabled(var Param1: WordBool);
    function Get_CfgEnabled: WordBool;
    procedure Set_CfgType(var Param1: Byte);
    function Get_CfgType: Byte;
    procedure Set_CfgPath(var Param1: WideString);
    function Get_CfgPath: WideString;
    procedure Set_CfgSizeLimit(var Param1: WideString);
    function Get_CfgSizeLimit: WideString;
    procedure Set_CfgKeepDays(var Param1: WideString);
    function Get_CfgKeepDays: WideString;
    procedure Set_Partial(var Param1: WordBool);
    function Get_Partial: WordBool;
    procedure Set_Force(var Param1: WordBool);
    function Get_Force: WordBool;
    procedure Set_TotalNumCards(var Param1: WideString);
    function Get_TotalNumCards: WideString;
    procedure Set_GiftSeqNum(var Param1: WideString);
    function Get_GiftSeqNum: WideString;
    procedure Set_IndType(var Param1: WideString);
    function Get_IndType: WideString;
    procedure Set_SourceCard(var Param1: WideString);
    function Get_SourceCard: WideString;
    procedure Set_Loyalty(var Param1: WordBool);
    function Get_Loyalty: WordBool;
    procedure Set_GiftUnits(var Param1: WideString);
    function Get_GiftUnits: WideString;
    procedure Set_CashierNum(var Param1: WideString);
    function Get_CashierNum: WideString;
    procedure Set_CashierID(var Param1: WideString);
    function Get_CashierID: WideString;
    procedure Set_ManagerNum(var Param1: WideString);
    function Get_ManagerNum: WideString;
    procedure Set_CheckNum(var Param1: WideString);
    function Get_CheckNum: WideString;
    procedure Set_RFID(var Param1: WideString);
    function Get_RFID: WideString;
    procedure Set_Birth_Date(var Param1: WideString);
    function Get_Birth_Date: WideString;
    procedure Set_Phone_Number(var Param1: WideString);
    function Get_Phone_Number: WideString;
    procedure Set_ABANum(var Param1: WideString);
    function Get_ABANum: WideString;
    procedure Set_License(var Param1: WideString);
    function Get_License: WideString;
    procedure Set_State(var Param1: WideString);
    function Get_State: WideString;
    procedure Set_MICR(var Param1: WideString);
    function Get_MICR: WideString;
    procedure Set_OrigPurchData(var Param1: WideString);
    function Get_OrigPurchData: WideString;
    procedure Set_VoucherNum(var Param1: WideString);
    function Get_VoucherNum: WideString;
    procedure Set_POSSeqNum(var Param1: WideString);
    function Get_POSSeqNum: WideString;
    procedure Set_DebitType(var Param1: WideString);
    function Get_DebitType: WideString;
    procedure Set_MACBlock(var Param1: WideString);
    function Get_MACBlock: WideString;
    procedure Set_PINBlock(var Param1: WideString);
    function Get_PINBlock: WideString;
    procedure Set_CashbackAmnt(var Param1: WideString);
    function Get_CashbackAmnt: WideString;
    procedure Set_KeySerialNum(var Param1: WideString);
    function Get_KeySerialNum: WideString;
    procedure Set_LanguageCode(var Param1: WideString);
    function Get_LanguageCode: WideString;
    procedure Set_ShiftID(var Param1: WideString);
    function Get_ShiftID: WideString;
    procedure Set_PromoCode(var Param1: WideString);
    function Get_PromoCode: WideString;
    function Get_TranCount: WideString;
    procedure Set_Store(var Param1: WideString);
    function Get_Store: WideString;
    procedure Set_EBTType(var Param1: WideString);
    function Get_EBTType: WideString;
    function Get_GetXML: WideString;
    procedure Set_AmxDescription_1(var Param1: WideString);
    function Get_AmxDescription_1: WideString;
    procedure Set_AmxDescription_2(var Param1: WideString);
    function Get_AmxDescription_2: WideString;
    procedure Set_AmxDescription_3(var Param1: WideString);
    function Get_AmxDescription_3: WideString;
    procedure Set_AmxDescription_4(var Param1: WideString);
    function Get_AmxDescription_4: WideString;
    procedure Set_AmxChargeDescription(var Param1: WideString);
    function Get_AmxChargeDescription: WideString;
    procedure Set_OriginalAmnt(var Param1: WideString);
    function Get_OriginalAmnt: WideString;
    procedure Set_TargetTransaction(var Param1: WideString);
    function Get_TargetTransaction: WideString;
    procedure Set_CmrclCardFlag(var Param1: WideString);
    function Get_CmrclCardFlag: WideString;
    procedure Set_ImpTransFlag(var Param1: WordBool);
    function Get_ImpTransFlag: WordBool;
    procedure Set_EnhancedTransFlag(var Param1: WordBool);
    function Get_EnhancedTransFlag: WordBool;
    procedure Set_GratuityAmntEst(var Param1: WideString);
    function Get_GratuityAmntEst: WideString;
    procedure Set_GratuityAmnt(var Param1: WideString);
    function Get_GratuityAmnt: WideString;
    procedure Set_ItemID(var Param1: WideString);
    function Get_ItemID: WideString;
    procedure Set_Processor(var Param1: WideString);
    function Get_Processor: WideString;
    procedure Set_TID(var Param1: WideString);
    function Get_TID: WideString;
    procedure Set_Card(var Param1: WideString);
    function Get_Card: WideString;
    procedure Set_ExpDate(var Param1: WideString);
    function Get_ExpDate: WideString;
    procedure Set_Billpay(var Param1: WideString);
    function Get_Billpay: WideString;
    procedure Set_Level3(var Param1: WideString);
    function Get_Level3: WideString;
    procedure Set_Action(var Param1: WideString);
    function Get_Action: WideString;
    procedure Set_BatchCloseType(var Param1: WideString);
    function Get_BatchCloseType: WideString;
    procedure Set_Manual(var Param1: WideString);
    function Get_Manual: WideString;
    procedure Set_Amount(var Param1: WideString);
    function Get_Amount: WideString;
    procedure Set_Ref(var Param1: WideString);
    function Get_Ref: WideString;
    procedure Set_Track(var Param1: WideString);
    function Get_Track: WideString;
    procedure Set_CID(var Param1: WideString);
    function Get_CID: WideString;
    procedure Set_Tax(var Param1: WideString);
    function Get_Tax: WideString;
    procedure Set_ExtFile(var Param1: WideString);
    function Get_ExtFile: WideString;
    procedure Set_PrintReceipts(var Param1: WideString);
    function Get_PrintReceipts: WideString;
    procedure Set_PeriodicPayment(var Param1: WideString);
    function Get_PeriodicPayment: WideString;
    procedure Set_OffLine(var Param1: WideString);
    function Get_OffLine: WideString;
    procedure Set_VoidFlag(var Param1: WideString);
    function Get_VoidFlag: WideString;
    procedure Set_Zip(var Param1: WideString);
    function Get_Zip: WideString;
    procedure Set_DestZip(var Param1: WideString);
    function Get_DestZip: WideString;
    procedure Set_Street(var Param1: WideString);
    function Get_Street: WideString;
    procedure Set_Ticket(var Param1: WideString);
    function Get_Ticket: WideString;
    procedure Set_member(var Param1: WideString);
    function Get_member: WideString;
    procedure Set_TI(var Param1: WideString);
    function Get_TI: WideString;
    procedure Set_TOTALAUTH(var Param1: WideString);
    function Get_TOTALAUTH: WideString;
    procedure Set_SplitProcessor(var Param1: WideString);
    function Get_SplitProcessor: WideString;
    procedure Set_MCSN(var Param1: WideString);
    function Get_MCSN: WideString;
    procedure Set_MCSC(var Param1: WideString);
    function Get_MCSC: WideString;
    procedure Set_Multi(var Param1: WideString);
    function Get_Multi: WideString;
    procedure Set_CVV2(var Param1: WideString);
    function Get_CVV2: WideString;
    procedure Set_CardPresent(var Param1: WideString);
    function Get_CardPresent: WideString;
    procedure Set_TroutD(var Param1: WideString);
    function Get_TroutD: WideString;
    procedure Set_SequenceNum(var Param1: WideString);
    function Get_SequenceNum: WideString;
    procedure Set_UserName(var Param1: WideString);
    function Get_UserName: WideString;
    procedure Set_Password(var Param1: WideString);
    function Get_Password: WideString;
    procedure Set_InpType(var Param1: FileType);
    function Get_InpType: FileType;
    procedure Set_RespType(var Param1: TRespType);
    function Get_RespType: TRespType;
    function Get_Error: TranError;
    procedure Set_FileName(var Param1: WideString);
    function Get_FileName: WideString;
    procedure Set_XDRFile(var Param1: WideString);
    function Get_XDRFile: WideString;
    procedure Set_CheckType(var Param1: WideString);
    function Get_CheckType: WideString;
    procedure Set_CheckAccType(var Param1: WideString);
    function Get_CheckAccType: WideString;
    procedure Set_MICRStatus(var Param1: WideString);
    function Get_MICRStatus: WideString;
    procedure Set_CustomerName(var Param1: WideString);
    function Get_CustomerName: WideString;
    procedure Set_CustomerFirstName(var Param1: WideString);
    function Get_CustomerStreet: WideString;
    procedure Set_CustomerStreet(var Param1: WideString);
    function Get_CheckReaderCode: WideString;
    procedure Set_CheckReaderCode(var Param1: WideString);
    function Get_CustomerFirstName: WideString;
    procedure Set_CustomerLastName(var Param1: WideString);
    function Get_CustomerLastName: WideString;
    procedure Set_CustomerCity(var Param1: WideString);
    function Get_CustomerCity: WideString;
    procedure Set_IDType(var Param1: WideString);
    function Get_IDType: WideString;
    procedure Set_IDCountry(var Param1: WideString);
    function Get_IDCountry: WideString;
    procedure Set_DLTrackII(var Param1: WideString);
    function Get_DLTrackII: WideString;
    procedure Set_IsPurchaseCard(var Param1: WordBool);
    function Get_IsPurchaseCard: WordBool;
    procedure Set_DriverID(var Param1: WideString);
    function Get_DriverID: WideString;
    procedure Set_DriverPIN(var Param1: WideString);
    function Get_DriverPIN: WideString;
    procedure Set_IDNumber(var Param1: WideString);
    function Get_IDNumber: WideString;
    procedure Set_Odometer(var Param1: WideString);
    function Get_Odometer: WideString;
    procedure Set_RestrictionCode(var Param1: WideString);
    function Get_RestrictionCode: WideString;
    procedure Set_VehicleID(var Param1: WideString);
    function Get_VehicleID: WideString;
    procedure Set_ProductDetailCount(var Param1: WideString);
    function Get_ProductDetailCount: WideString;
    procedure Set_ProductDetailCode_1(var Param1: WideString);
    function Get_ProductDetailCode_1: WideString;
    procedure Set_ProductDetailCode_2(var Param1: WideString);
    function Get_ProductDetailCode_2: WideString;
    procedure Set_ProductDetailCode_3(var Param1: WideString);
    function Get_ProductDetailCode_3: WideString;
    procedure Set_ProductDetailCode_4(var Param1: WideString);
    function Get_ProductDetailCode_4: WideString;
    procedure Set_ProductDetailCode_5(var Param1: WideString);
    function Get_ProductDetailCode_5: WideString;
    procedure Set_ProductDetailCode_6(var Param1: WideString);
    function Get_ProductDetailCode_6: WideString;
    procedure Set_ProductDetailCode_7(var Param1: WideString);
    function Get_ProductDetailCode_7: WideString;
    procedure Set_ProductDetailCode_8(var Param1: WideString);
    function Get_ProductDetailCode_8: WideString;
    procedure Set_ProductDetailCode_9(var Param1: WideString);
    function Get_ProductDetailCode_9: WideString;
    procedure Set_ProductDetailCode_10(var Param1: WideString);
    function Get_ProductDetailCode_10: WideString;
    procedure Set_ProductDetailAmount_1(var Param1: WideString);
    function Get_ProductDetailAmount_1: WideString;
    procedure Set_ProductDetailAmount_2(var Param1: WideString);
    function Get_ProductDetailAmount_2: WideString;
    procedure Set_ProductDetailAmount_3(var Param1: WideString);
    function Get_ProductDetailAmount_3: WideString;
    procedure Set_ProductDetailAmount_4(var Param1: WideString);
    function Get_ProductDetailAmount_4: WideString;
    procedure Set_ProductDetailAmount_5(var Param1: WideString);
    function Get_ProductDetailAmount_5: WideString;
    procedure Set_ProductDetailAmount_6(var Param1: WideString);
    function Get_ProductDetailAmount_6: WideString;
    procedure Set_ProductDetailAmount_7(var Param1: WideString);
    function Get_ProductDetailAmount_7: WideString;
    procedure Set_ProductDetailAmount_8(var Param1: WideString);
    function Get_ProductDetailAmount_8: WideString;
    procedure Set_ProductDetailAmount_9(var Param1: WideString);
    function Get_ProductDetailAmount_9: WideString;
    procedure Set_ProductDetailAmount_10(var Param1: WideString);
    function Get_ProductDetailAmount_10: WideString;
    procedure Set_ProductDetailQuantity_1(var Param1: WideString);
    function Get_ProductDetailQuantity_1: WideString;
    procedure Set_ProductDetailQuantity_2(var Param1: WideString);
    function Get_ProductDetailQuantity_2: WideString;
    procedure Set_ProductDetailQuantity_3(var Param1: WideString);
    function Get_ProductDetailQuantity_3: WideString;
    procedure Set_ProductDetailQuantity_4(var Param1: WideString);
    function Get_ProductDetailQuantity_4: WideString;
    procedure Set_ProductDetailQuantity_5(var Param1: WideString);
    function Get_ProductDetailQuantity_5: WideString;
    procedure Set_ProductDetailQuantity_6(var Param1: WideString);
    function Get_ProductDetailQuantity_6: WideString;
    procedure Set_ProductDetailQuantity_7(var Param1: WideString);
    function Get_ProductDetailQuantity_7: WideString;
    procedure Set_ProductDetailQuantity_8(var Param1: WideString);
    function Get_ProductDetailQuantity_8: WideString;
    procedure Set_ProductDetailQuantity_9(var Param1: WideString);
    function Get_ProductDetailQuantity_9: WideString;
    procedure Set_ProductDetailQuantity_10(var Param1: WideString);
    function Get_ProductDetailQuantity_10: WideString;
    procedure Set_StoreNum(var Param1: WideString);
    function Get_StoreNum: WideString;
    procedure Set_SSNum(var Param1: WideString);
    function Get_SSNum: WideString;
    procedure Set_CustomerHouseNum(var Param1: WideString);
    function Get_CustomerHouseNum: WideString;
    procedure Set_PumpNumber(var Param1: WideString);
    function Get_PumpNumber: WideString;
    procedure Set_SurchargeAmount(var Param1: WideString);
    function Get_SurchargeAmount: WideString;
    procedure Set_VirtualGiftCardFlag(var Param1: WordBool);
    function Get_VirtualGiftCardFlag: WordBool;
    procedure Set_GiftPin(var Param1: WideString);
    function Get_GiftPin: WideString;
    procedure Set_ProcRespCode(var Param1: WideString);
    function Get_ProcRespCode: WideString;
    procedure Set_FleetCard(var Param1: WideString);
    function Get_FleetCard: WideString;
    procedure Set_TableNumber(var Param1: WideString);
    function Get_TableNumber: WideString;
    procedure Set_TrackI(var Param1: WideString);
    function Get_TrackI: WideString;
    procedure Set_CreditPlanNumber(var Param1: WideString);
    function Get_CreditPlanNumber: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _pccTran);
    procedure Disconnect; override;
    function Load(var szFileName: OleVariant; var intRecNum: Smallint; var blnValidate: WordBool): TranErrType;
    function WriteFile(var eType: FileType; var szNewPrefix: OleVariant; var szNewPath: OleVariant; 
                       var intRecNum: Smallint): TranErrType;
    function ValidateRequiredFields: TranErrType;
    function CleanString(var szStringIn: WideString; var szReplaceList: WideString; 
                         var blnCompact: WordBool; var blnTrim: WordBool; var blnRmvNP: WordBool): WideString;
    procedure Clear;
    procedure ClearTranData;
    procedure ClearErr;
    function TxnType: Smallint;
    function LoadTranData(var intNdx: Smallint): OleVariant;
    function WriteRawXML(var szOutString: WideString; var szFileName: WideString): TranErrType; overload;
    function WriteRawXML(var szOutString: WideString; var szFileName: WideString; 
                         var szPath: OleVariant): TranErrType; overload;
    function PrepString(var szInData: WideString): WideString;
    property DefaultInterface: _pccTran read GetDefaultInterface;
    property TranCount: WideString read Get_TranCount;
    property GetXML: WideString read Get_GetXML;
    property Error: TranError read Get_Error;
    property mszTransPacket: WideString read Get_mszTransPacket write Set_mszTransPacket;
    property TransPacket: WideString read Get_TransPacket write Set_TransPacket;
    property TaxExempt: WordBool read Get_TaxExempt write Set_TaxExempt;
    property Method: TxnMethodType read Get_Method write Set_Method;
    property TransTime: WideString read Get_TransTime write Set_TransTime;
    property TotTransTime: WideString read Get_TotTransTime write Set_TotTransTime;
    property Authcode: WideString read Get_Authcode write Set_Authcode;
    property TxnTimeout: WideString read Get_TxnTimeout write Set_TxnTimeout;
    property CfgEnabled: WordBool read Get_CfgEnabled write Set_CfgEnabled;
    property CfgType: Byte read Get_CfgType write Set_CfgType;
    property CfgPath: WideString read Get_CfgPath write Set_CfgPath;
    property CfgSizeLimit: WideString read Get_CfgSizeLimit write Set_CfgSizeLimit;
    property CfgKeepDays: WideString read Get_CfgKeepDays write Set_CfgKeepDays;
    property Partial: WordBool read Get_Partial write Set_Partial;
    property Force: WordBool read Get_Force write Set_Force;
    property TotalNumCards: WideString read Get_TotalNumCards write Set_TotalNumCards;
    property GiftSeqNum: WideString read Get_GiftSeqNum write Set_GiftSeqNum;
    property IndType: WideString read Get_IndType write Set_IndType;
    property SourceCard: WideString read Get_SourceCard write Set_SourceCard;
    property Loyalty: WordBool read Get_Loyalty write Set_Loyalty;
    property GiftUnits: WideString read Get_GiftUnits write Set_GiftUnits;
    property CashierNum: WideString read Get_CashierNum write Set_CashierNum;
    property CashierID: WideString read Get_CashierID write Set_CashierID;
    property ManagerNum: WideString read Get_ManagerNum write Set_ManagerNum;
    property CheckNum: WideString read Get_CheckNum write Set_CheckNum;
    property RFID: WideString read Get_RFID write Set_RFID;
    property Birth_Date: WideString read Get_Birth_Date write Set_Birth_Date;
    property Phone_Number: WideString read Get_Phone_Number write Set_Phone_Number;
    property ABANum: WideString read Get_ABANum write Set_ABANum;
    property License: WideString read Get_License write Set_License;
    property State: WideString read Get_State write Set_State;
    property MICR: WideString read Get_MICR write Set_MICR;
    property OrigPurchData: WideString read Get_OrigPurchData write Set_OrigPurchData;
    property VoucherNum: WideString read Get_VoucherNum write Set_VoucherNum;
    property POSSeqNum: WideString read Get_POSSeqNum write Set_POSSeqNum;
    property DebitType: WideString read Get_DebitType write Set_DebitType;
    property MACBlock: WideString read Get_MACBlock write Set_MACBlock;
    property PINBlock: WideString read Get_PINBlock write Set_PINBlock;
    property CashbackAmnt: WideString read Get_CashbackAmnt write Set_CashbackAmnt;
    property KeySerialNum: WideString read Get_KeySerialNum write Set_KeySerialNum;
    property LanguageCode: WideString read Get_LanguageCode write Set_LanguageCode;
    property ShiftID: WideString read Get_ShiftID write Set_ShiftID;
    property PromoCode: WideString read Get_PromoCode write Set_PromoCode;
    property Store: WideString read Get_Store write Set_Store;
    property EBTType: WideString read Get_EBTType write Set_EBTType;
    property AmxDescription_1: WideString read Get_AmxDescription_1 write Set_AmxDescription_1;
    property AmxDescription_2: WideString read Get_AmxDescription_2 write Set_AmxDescription_2;
    property AmxDescription_3: WideString read Get_AmxDescription_3 write Set_AmxDescription_3;
    property AmxDescription_4: WideString read Get_AmxDescription_4 write Set_AmxDescription_4;
    property AmxChargeDescription: WideString read Get_AmxChargeDescription write Set_AmxChargeDescription;
    property OriginalAmnt: WideString read Get_OriginalAmnt write Set_OriginalAmnt;
    property TargetTransaction: WideString read Get_TargetTransaction write Set_TargetTransaction;
    property CmrclCardFlag: WideString read Get_CmrclCardFlag write Set_CmrclCardFlag;
    property ImpTransFlag: WordBool read Get_ImpTransFlag write Set_ImpTransFlag;
    property EnhancedTransFlag: WordBool read Get_EnhancedTransFlag write Set_EnhancedTransFlag;
    property GratuityAmntEst: WideString read Get_GratuityAmntEst write Set_GratuityAmntEst;
    property GratuityAmnt: WideString read Get_GratuityAmnt write Set_GratuityAmnt;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property Processor: WideString read Get_Processor write Set_Processor;
    property TID: WideString read Get_TID write Set_TID;
    property Card: WideString read Get_Card write Set_Card;
    property ExpDate: WideString read Get_ExpDate write Set_ExpDate;
    property Billpay: WideString read Get_Billpay write Set_Billpay;
    property Level3: WideString read Get_Level3 write Set_Level3;
    property Action: WideString read Get_Action write Set_Action;
    property BatchCloseType: WideString read Get_BatchCloseType write Set_BatchCloseType;
    property Manual: WideString read Get_Manual write Set_Manual;
    property Amount: WideString read Get_Amount write Set_Amount;
    property Ref: WideString read Get_Ref write Set_Ref;
    property Track: WideString read Get_Track write Set_Track;
    property CID: WideString read Get_CID write Set_CID;
    property Tax: WideString read Get_Tax write Set_Tax;
    property ExtFile: WideString read Get_ExtFile write Set_ExtFile;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property PeriodicPayment: WideString read Get_PeriodicPayment write Set_PeriodicPayment;
    property OffLine: WideString read Get_OffLine write Set_OffLine;
    property VoidFlag: WideString read Get_VoidFlag write Set_VoidFlag;
    property Zip: WideString read Get_Zip write Set_Zip;
    property DestZip: WideString read Get_DestZip write Set_DestZip;
    property Street: WideString read Get_Street write Set_Street;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property member: WideString read Get_member write Set_member;
    property TI: WideString read Get_TI write Set_TI;
    property TOTALAUTH: WideString read Get_TOTALAUTH write Set_TOTALAUTH;
    property SplitProcessor: WideString read Get_SplitProcessor write Set_SplitProcessor;
    property MCSN: WideString read Get_MCSN write Set_MCSN;
    property MCSC: WideString read Get_MCSC write Set_MCSC;
    property Multi: WideString read Get_Multi write Set_Multi;
    property CVV2: WideString read Get_CVV2 write Set_CVV2;
    property CardPresent: WideString read Get_CardPresent write Set_CardPresent;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property SequenceNum: WideString read Get_SequenceNum write Set_SequenceNum;
    property UserName: WideString read Get_UserName write Set_UserName;
    property Password: WideString read Get_Password write Set_Password;
    property InpType: FileType read Get_InpType write Set_InpType;
    property RespType: TRespType read Get_RespType write Set_RespType;
    property FileName: WideString read Get_FileName write Set_FileName;
    property XDRFile: WideString read Get_XDRFile write Set_XDRFile;
    property CheckType: WideString read Get_CheckType write Set_CheckType;
    property CheckAccType: WideString read Get_CheckAccType write Set_CheckAccType;
    property MICRStatus: WideString read Get_MICRStatus write Set_MICRStatus;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property CustomerFirstName: WideString read Get_CustomerFirstName write Set_CustomerFirstName;
    property CustomerStreet: WideString read Get_CustomerStreet write Set_CustomerStreet;
    property CheckReaderCode: WideString read Get_CheckReaderCode write Set_CheckReaderCode;
    property CustomerLastName: WideString read Get_CustomerLastName write Set_CustomerLastName;
    property CustomerCity: WideString read Get_CustomerCity write Set_CustomerCity;
    property IDType: WideString read Get_IDType write Set_IDType;
    property IDCountry: WideString read Get_IDCountry write Set_IDCountry;
    property DLTrackII: WideString read Get_DLTrackII write Set_DLTrackII;
    property IsPurchaseCard: WordBool read Get_IsPurchaseCard write Set_IsPurchaseCard;
    property DriverID: WideString read Get_DriverID write Set_DriverID;
    property DriverPIN: WideString read Get_DriverPIN write Set_DriverPIN;
    property IDNumber: WideString read Get_IDNumber write Set_IDNumber;
    property Odometer: WideString read Get_Odometer write Set_Odometer;
    property RestrictionCode: WideString read Get_RestrictionCode write Set_RestrictionCode;
    property VehicleID: WideString read Get_VehicleID write Set_VehicleID;
    property ProductDetailCount: WideString read Get_ProductDetailCount write Set_ProductDetailCount;
    property ProductDetailCode_1: WideString read Get_ProductDetailCode_1 write Set_ProductDetailCode_1;
    property ProductDetailCode_2: WideString read Get_ProductDetailCode_2 write Set_ProductDetailCode_2;
    property ProductDetailCode_3: WideString read Get_ProductDetailCode_3 write Set_ProductDetailCode_3;
    property ProductDetailCode_4: WideString read Get_ProductDetailCode_4 write Set_ProductDetailCode_4;
    property ProductDetailCode_5: WideString read Get_ProductDetailCode_5 write Set_ProductDetailCode_5;
    property ProductDetailCode_6: WideString read Get_ProductDetailCode_6 write Set_ProductDetailCode_6;
    property ProductDetailCode_7: WideString read Get_ProductDetailCode_7 write Set_ProductDetailCode_7;
    property ProductDetailCode_8: WideString read Get_ProductDetailCode_8 write Set_ProductDetailCode_8;
    property ProductDetailCode_9: WideString read Get_ProductDetailCode_9 write Set_ProductDetailCode_9;
    property ProductDetailCode_10: WideString read Get_ProductDetailCode_10 write Set_ProductDetailCode_10;
    property ProductDetailAmount_1: WideString read Get_ProductDetailAmount_1 write Set_ProductDetailAmount_1;
    property ProductDetailAmount_2: WideString read Get_ProductDetailAmount_2 write Set_ProductDetailAmount_2;
    property ProductDetailAmount_3: WideString read Get_ProductDetailAmount_3 write Set_ProductDetailAmount_3;
    property ProductDetailAmount_4: WideString read Get_ProductDetailAmount_4 write Set_ProductDetailAmount_4;
    property ProductDetailAmount_5: WideString read Get_ProductDetailAmount_5 write Set_ProductDetailAmount_5;
    property ProductDetailAmount_6: WideString read Get_ProductDetailAmount_6 write Set_ProductDetailAmount_6;
    property ProductDetailAmount_7: WideString read Get_ProductDetailAmount_7 write Set_ProductDetailAmount_7;
    property ProductDetailAmount_8: WideString read Get_ProductDetailAmount_8 write Set_ProductDetailAmount_8;
    property ProductDetailAmount_9: WideString read Get_ProductDetailAmount_9 write Set_ProductDetailAmount_9;
    property ProductDetailAmount_10: WideString read Get_ProductDetailAmount_10 write Set_ProductDetailAmount_10;
    property ProductDetailQuantity_1: WideString read Get_ProductDetailQuantity_1 write Set_ProductDetailQuantity_1;
    property ProductDetailQuantity_2: WideString read Get_ProductDetailQuantity_2 write Set_ProductDetailQuantity_2;
    property ProductDetailQuantity_3: WideString read Get_ProductDetailQuantity_3 write Set_ProductDetailQuantity_3;
    property ProductDetailQuantity_4: WideString read Get_ProductDetailQuantity_4 write Set_ProductDetailQuantity_4;
    property ProductDetailQuantity_5: WideString read Get_ProductDetailQuantity_5 write Set_ProductDetailQuantity_5;
    property ProductDetailQuantity_6: WideString read Get_ProductDetailQuantity_6 write Set_ProductDetailQuantity_6;
    property ProductDetailQuantity_7: WideString read Get_ProductDetailQuantity_7 write Set_ProductDetailQuantity_7;
    property ProductDetailQuantity_8: WideString read Get_ProductDetailQuantity_8 write Set_ProductDetailQuantity_8;
    property ProductDetailQuantity_9: WideString read Get_ProductDetailQuantity_9 write Set_ProductDetailQuantity_9;
    property ProductDetailQuantity_10: WideString read Get_ProductDetailQuantity_10 write Set_ProductDetailQuantity_10;
    property StoreNum: WideString read Get_StoreNum write Set_StoreNum;
    property SSNum: WideString read Get_SSNum write Set_SSNum;
    property CustomerHouseNum: WideString read Get_CustomerHouseNum write Set_CustomerHouseNum;
    property PumpNumber: WideString read Get_PumpNumber write Set_PumpNumber;
    property SurchargeAmount: WideString read Get_SurchargeAmount write Set_SurchargeAmount;
    property VirtualGiftCardFlag: WordBool read Get_VirtualGiftCardFlag write Set_VirtualGiftCardFlag;
    property GiftPin: WideString read Get_GiftPin write Set_GiftPin;
    property ProcRespCode: WideString read Get_ProcRespCode write Set_ProcRespCode;
    property FleetCard: WideString read Get_FleetCard write Set_FleetCard;
    property TableNumber: WideString read Get_TableNumber write Set_TableNumber;
    property TrackI: WideString read Get_TrackI write Set_TrackI;
    property CreditPlanNumber: WideString read Get_CreditPlanNumber write Set_CreditPlanNumber;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TpccTranProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TpccTran
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TpccTranProperties = class(TPersistent)
  private
    FServer:    TpccTran;
    function    GetDefaultInterface: _pccTran;
    constructor Create(AServer: TpccTran);
  protected
    function Get_mszTransPacket: WideString;
    procedure Set_mszTransPacket(const mszTransPacket: WideString);
    procedure Set_TransPacket(var Param1: WideString);
    function Get_TransPacket: WideString;
    procedure Set_TaxExempt(var Param1: WordBool);
    function Get_TaxExempt: WordBool;
    procedure Set_Method(var Param1: TxnMethodType);
    function Get_Method: TxnMethodType;
    procedure Set_TransTime(var Param1: WideString);
    function Get_TransTime: WideString;
    procedure Set_TotTransTime(var Param1: WideString);
    function Get_TotTransTime: WideString;
    procedure Set_Authcode(var Param1: WideString);
    function Get_Authcode: WideString;
    procedure Set_TxnTimeout(var Param1: WideString);
    function Get_TxnTimeout: WideString;
    procedure Set_CfgEnabled(var Param1: WordBool);
    function Get_CfgEnabled: WordBool;
    procedure Set_CfgType(var Param1: Byte);
    function Get_CfgType: Byte;
    procedure Set_CfgPath(var Param1: WideString);
    function Get_CfgPath: WideString;
    procedure Set_CfgSizeLimit(var Param1: WideString);
    function Get_CfgSizeLimit: WideString;
    procedure Set_CfgKeepDays(var Param1: WideString);
    function Get_CfgKeepDays: WideString;
    procedure Set_Partial(var Param1: WordBool);
    function Get_Partial: WordBool;
    procedure Set_Force(var Param1: WordBool);
    function Get_Force: WordBool;
    procedure Set_TotalNumCards(var Param1: WideString);
    function Get_TotalNumCards: WideString;
    procedure Set_GiftSeqNum(var Param1: WideString);
    function Get_GiftSeqNum: WideString;
    procedure Set_IndType(var Param1: WideString);
    function Get_IndType: WideString;
    procedure Set_SourceCard(var Param1: WideString);
    function Get_SourceCard: WideString;
    procedure Set_Loyalty(var Param1: WordBool);
    function Get_Loyalty: WordBool;
    procedure Set_GiftUnits(var Param1: WideString);
    function Get_GiftUnits: WideString;
    procedure Set_CashierNum(var Param1: WideString);
    function Get_CashierNum: WideString;
    procedure Set_CashierID(var Param1: WideString);
    function Get_CashierID: WideString;
    procedure Set_ManagerNum(var Param1: WideString);
    function Get_ManagerNum: WideString;
    procedure Set_CheckNum(var Param1: WideString);
    function Get_CheckNum: WideString;
    procedure Set_RFID(var Param1: WideString);
    function Get_RFID: WideString;
    procedure Set_Birth_Date(var Param1: WideString);
    function Get_Birth_Date: WideString;
    procedure Set_Phone_Number(var Param1: WideString);
    function Get_Phone_Number: WideString;
    procedure Set_ABANum(var Param1: WideString);
    function Get_ABANum: WideString;
    procedure Set_License(var Param1: WideString);
    function Get_License: WideString;
    procedure Set_State(var Param1: WideString);
    function Get_State: WideString;
    procedure Set_MICR(var Param1: WideString);
    function Get_MICR: WideString;
    procedure Set_OrigPurchData(var Param1: WideString);
    function Get_OrigPurchData: WideString;
    procedure Set_VoucherNum(var Param1: WideString);
    function Get_VoucherNum: WideString;
    procedure Set_POSSeqNum(var Param1: WideString);
    function Get_POSSeqNum: WideString;
    procedure Set_DebitType(var Param1: WideString);
    function Get_DebitType: WideString;
    procedure Set_MACBlock(var Param1: WideString);
    function Get_MACBlock: WideString;
    procedure Set_PINBlock(var Param1: WideString);
    function Get_PINBlock: WideString;
    procedure Set_CashbackAmnt(var Param1: WideString);
    function Get_CashbackAmnt: WideString;
    procedure Set_KeySerialNum(var Param1: WideString);
    function Get_KeySerialNum: WideString;
    procedure Set_LanguageCode(var Param1: WideString);
    function Get_LanguageCode: WideString;
    procedure Set_ShiftID(var Param1: WideString);
    function Get_ShiftID: WideString;
    procedure Set_PromoCode(var Param1: WideString);
    function Get_PromoCode: WideString;
    function Get_TranCount: WideString;
    procedure Set_Store(var Param1: WideString);
    function Get_Store: WideString;
    procedure Set_EBTType(var Param1: WideString);
    function Get_EBTType: WideString;
    function Get_GetXML: WideString;
    procedure Set_AmxDescription_1(var Param1: WideString);
    function Get_AmxDescription_1: WideString;
    procedure Set_AmxDescription_2(var Param1: WideString);
    function Get_AmxDescription_2: WideString;
    procedure Set_AmxDescription_3(var Param1: WideString);
    function Get_AmxDescription_3: WideString;
    procedure Set_AmxDescription_4(var Param1: WideString);
    function Get_AmxDescription_4: WideString;
    procedure Set_AmxChargeDescription(var Param1: WideString);
    function Get_AmxChargeDescription: WideString;
    procedure Set_OriginalAmnt(var Param1: WideString);
    function Get_OriginalAmnt: WideString;
    procedure Set_TargetTransaction(var Param1: WideString);
    function Get_TargetTransaction: WideString;
    procedure Set_CmrclCardFlag(var Param1: WideString);
    function Get_CmrclCardFlag: WideString;
    procedure Set_ImpTransFlag(var Param1: WordBool);
    function Get_ImpTransFlag: WordBool;
    procedure Set_EnhancedTransFlag(var Param1: WordBool);
    function Get_EnhancedTransFlag: WordBool;
    procedure Set_GratuityAmntEst(var Param1: WideString);
    function Get_GratuityAmntEst: WideString;
    procedure Set_GratuityAmnt(var Param1: WideString);
    function Get_GratuityAmnt: WideString;
    procedure Set_ItemID(var Param1: WideString);
    function Get_ItemID: WideString;
    procedure Set_Processor(var Param1: WideString);
    function Get_Processor: WideString;
    procedure Set_TID(var Param1: WideString);
    function Get_TID: WideString;
    procedure Set_Card(var Param1: WideString);
    function Get_Card: WideString;
    procedure Set_ExpDate(var Param1: WideString);
    function Get_ExpDate: WideString;
    procedure Set_Billpay(var Param1: WideString);
    function Get_Billpay: WideString;
    procedure Set_Level3(var Param1: WideString);
    function Get_Level3: WideString;
    procedure Set_Action(var Param1: WideString);
    function Get_Action: WideString;
    procedure Set_BatchCloseType(var Param1: WideString);
    function Get_BatchCloseType: WideString;
    procedure Set_Manual(var Param1: WideString);
    function Get_Manual: WideString;
    procedure Set_Amount(var Param1: WideString);
    function Get_Amount: WideString;
    procedure Set_Ref(var Param1: WideString);
    function Get_Ref: WideString;
    procedure Set_Track(var Param1: WideString);
    function Get_Track: WideString;
    procedure Set_CID(var Param1: WideString);
    function Get_CID: WideString;
    procedure Set_Tax(var Param1: WideString);
    function Get_Tax: WideString;
    procedure Set_ExtFile(var Param1: WideString);
    function Get_ExtFile: WideString;
    procedure Set_PrintReceipts(var Param1: WideString);
    function Get_PrintReceipts: WideString;
    procedure Set_PeriodicPayment(var Param1: WideString);
    function Get_PeriodicPayment: WideString;
    procedure Set_OffLine(var Param1: WideString);
    function Get_OffLine: WideString;
    procedure Set_VoidFlag(var Param1: WideString);
    function Get_VoidFlag: WideString;
    procedure Set_Zip(var Param1: WideString);
    function Get_Zip: WideString;
    procedure Set_DestZip(var Param1: WideString);
    function Get_DestZip: WideString;
    procedure Set_Street(var Param1: WideString);
    function Get_Street: WideString;
    procedure Set_Ticket(var Param1: WideString);
    function Get_Ticket: WideString;
    procedure Set_member(var Param1: WideString);
    function Get_member: WideString;
    procedure Set_TI(var Param1: WideString);
    function Get_TI: WideString;
    procedure Set_TOTALAUTH(var Param1: WideString);
    function Get_TOTALAUTH: WideString;
    procedure Set_SplitProcessor(var Param1: WideString);
    function Get_SplitProcessor: WideString;
    procedure Set_MCSN(var Param1: WideString);
    function Get_MCSN: WideString;
    procedure Set_MCSC(var Param1: WideString);
    function Get_MCSC: WideString;
    procedure Set_Multi(var Param1: WideString);
    function Get_Multi: WideString;
    procedure Set_CVV2(var Param1: WideString);
    function Get_CVV2: WideString;
    procedure Set_CardPresent(var Param1: WideString);
    function Get_CardPresent: WideString;
    procedure Set_TroutD(var Param1: WideString);
    function Get_TroutD: WideString;
    procedure Set_SequenceNum(var Param1: WideString);
    function Get_SequenceNum: WideString;
    procedure Set_UserName(var Param1: WideString);
    function Get_UserName: WideString;
    procedure Set_Password(var Param1: WideString);
    function Get_Password: WideString;
    procedure Set_InpType(var Param1: FileType);
    function Get_InpType: FileType;
    procedure Set_RespType(var Param1: TRespType);
    function Get_RespType: TRespType;
    function Get_Error: TranError;
    procedure Set_FileName(var Param1: WideString);
    function Get_FileName: WideString;
    procedure Set_XDRFile(var Param1: WideString);
    function Get_XDRFile: WideString;
    procedure Set_CheckType(var Param1: WideString);
    function Get_CheckType: WideString;
    procedure Set_CheckAccType(var Param1: WideString);
    function Get_CheckAccType: WideString;
    procedure Set_MICRStatus(var Param1: WideString);
    function Get_MICRStatus: WideString;
    procedure Set_CustomerName(var Param1: WideString);
    function Get_CustomerName: WideString;
    procedure Set_CustomerFirstName(var Param1: WideString);
    function Get_CustomerStreet: WideString;
    procedure Set_CustomerStreet(var Param1: WideString);
    function Get_CheckReaderCode: WideString;
    procedure Set_CheckReaderCode(var Param1: WideString);
    function Get_CustomerFirstName: WideString;
    procedure Set_CustomerLastName(var Param1: WideString);
    function Get_CustomerLastName: WideString;
    procedure Set_CustomerCity(var Param1: WideString);
    function Get_CustomerCity: WideString;
    procedure Set_IDType(var Param1: WideString);
    function Get_IDType: WideString;
    procedure Set_IDCountry(var Param1: WideString);
    function Get_IDCountry: WideString;
    procedure Set_DLTrackII(var Param1: WideString);
    function Get_DLTrackII: WideString;
    procedure Set_IsPurchaseCard(var Param1: WordBool);
    function Get_IsPurchaseCard: WordBool;
    procedure Set_DriverID(var Param1: WideString);
    function Get_DriverID: WideString;
    procedure Set_DriverPIN(var Param1: WideString);
    function Get_DriverPIN: WideString;
    procedure Set_IDNumber(var Param1: WideString);
    function Get_IDNumber: WideString;
    procedure Set_Odometer(var Param1: WideString);
    function Get_Odometer: WideString;
    procedure Set_RestrictionCode(var Param1: WideString);
    function Get_RestrictionCode: WideString;
    procedure Set_VehicleID(var Param1: WideString);
    function Get_VehicleID: WideString;
    procedure Set_ProductDetailCount(var Param1: WideString);
    function Get_ProductDetailCount: WideString;
    procedure Set_ProductDetailCode_1(var Param1: WideString);
    function Get_ProductDetailCode_1: WideString;
    procedure Set_ProductDetailCode_2(var Param1: WideString);
    function Get_ProductDetailCode_2: WideString;
    procedure Set_ProductDetailCode_3(var Param1: WideString);
    function Get_ProductDetailCode_3: WideString;
    procedure Set_ProductDetailCode_4(var Param1: WideString);
    function Get_ProductDetailCode_4: WideString;
    procedure Set_ProductDetailCode_5(var Param1: WideString);
    function Get_ProductDetailCode_5: WideString;
    procedure Set_ProductDetailCode_6(var Param1: WideString);
    function Get_ProductDetailCode_6: WideString;
    procedure Set_ProductDetailCode_7(var Param1: WideString);
    function Get_ProductDetailCode_7: WideString;
    procedure Set_ProductDetailCode_8(var Param1: WideString);
    function Get_ProductDetailCode_8: WideString;
    procedure Set_ProductDetailCode_9(var Param1: WideString);
    function Get_ProductDetailCode_9: WideString;
    procedure Set_ProductDetailCode_10(var Param1: WideString);
    function Get_ProductDetailCode_10: WideString;
    procedure Set_ProductDetailAmount_1(var Param1: WideString);
    function Get_ProductDetailAmount_1: WideString;
    procedure Set_ProductDetailAmount_2(var Param1: WideString);
    function Get_ProductDetailAmount_2: WideString;
    procedure Set_ProductDetailAmount_3(var Param1: WideString);
    function Get_ProductDetailAmount_3: WideString;
    procedure Set_ProductDetailAmount_4(var Param1: WideString);
    function Get_ProductDetailAmount_4: WideString;
    procedure Set_ProductDetailAmount_5(var Param1: WideString);
    function Get_ProductDetailAmount_5: WideString;
    procedure Set_ProductDetailAmount_6(var Param1: WideString);
    function Get_ProductDetailAmount_6: WideString;
    procedure Set_ProductDetailAmount_7(var Param1: WideString);
    function Get_ProductDetailAmount_7: WideString;
    procedure Set_ProductDetailAmount_8(var Param1: WideString);
    function Get_ProductDetailAmount_8: WideString;
    procedure Set_ProductDetailAmount_9(var Param1: WideString);
    function Get_ProductDetailAmount_9: WideString;
    procedure Set_ProductDetailAmount_10(var Param1: WideString);
    function Get_ProductDetailAmount_10: WideString;
    procedure Set_ProductDetailQuantity_1(var Param1: WideString);
    function Get_ProductDetailQuantity_1: WideString;
    procedure Set_ProductDetailQuantity_2(var Param1: WideString);
    function Get_ProductDetailQuantity_2: WideString;
    procedure Set_ProductDetailQuantity_3(var Param1: WideString);
    function Get_ProductDetailQuantity_3: WideString;
    procedure Set_ProductDetailQuantity_4(var Param1: WideString);
    function Get_ProductDetailQuantity_4: WideString;
    procedure Set_ProductDetailQuantity_5(var Param1: WideString);
    function Get_ProductDetailQuantity_5: WideString;
    procedure Set_ProductDetailQuantity_6(var Param1: WideString);
    function Get_ProductDetailQuantity_6: WideString;
    procedure Set_ProductDetailQuantity_7(var Param1: WideString);
    function Get_ProductDetailQuantity_7: WideString;
    procedure Set_ProductDetailQuantity_8(var Param1: WideString);
    function Get_ProductDetailQuantity_8: WideString;
    procedure Set_ProductDetailQuantity_9(var Param1: WideString);
    function Get_ProductDetailQuantity_9: WideString;
    procedure Set_ProductDetailQuantity_10(var Param1: WideString);
    function Get_ProductDetailQuantity_10: WideString;
    procedure Set_StoreNum(var Param1: WideString);
    function Get_StoreNum: WideString;
    procedure Set_SSNum(var Param1: WideString);
    function Get_SSNum: WideString;
    procedure Set_CustomerHouseNum(var Param1: WideString);
    function Get_CustomerHouseNum: WideString;
    procedure Set_PumpNumber(var Param1: WideString);
    function Get_PumpNumber: WideString;
    procedure Set_SurchargeAmount(var Param1: WideString);
    function Get_SurchargeAmount: WideString;
    procedure Set_VirtualGiftCardFlag(var Param1: WordBool);
    function Get_VirtualGiftCardFlag: WordBool;
    procedure Set_GiftPin(var Param1: WideString);
    function Get_GiftPin: WideString;
    procedure Set_ProcRespCode(var Param1: WideString);
    function Get_ProcRespCode: WideString;
    procedure Set_FleetCard(var Param1: WideString);
    function Get_FleetCard: WideString;
    procedure Set_TableNumber(var Param1: WideString);
    function Get_TableNumber: WideString;
    procedure Set_TrackI(var Param1: WideString);
    function Get_TrackI: WideString;
    procedure Set_CreditPlanNumber(var Param1: WideString);
    function Get_CreditPlanNumber: WideString;
  public
    property DefaultInterface: _pccTran read GetDefaultInterface;
  published
    property mszTransPacket: WideString read Get_mszTransPacket write Set_mszTransPacket;
    property TransPacket: WideString read Get_TransPacket write Set_TransPacket;
    property TaxExempt: WordBool read Get_TaxExempt write Set_TaxExempt;
    property Method: TxnMethodType read Get_Method write Set_Method;
    property TransTime: WideString read Get_TransTime write Set_TransTime;
    property TotTransTime: WideString read Get_TotTransTime write Set_TotTransTime;
    property Authcode: WideString read Get_Authcode write Set_Authcode;
    property TxnTimeout: WideString read Get_TxnTimeout write Set_TxnTimeout;
    property CfgEnabled: WordBool read Get_CfgEnabled write Set_CfgEnabled;
    property CfgType: Byte read Get_CfgType write Set_CfgType;
    property CfgPath: WideString read Get_CfgPath write Set_CfgPath;
    property CfgSizeLimit: WideString read Get_CfgSizeLimit write Set_CfgSizeLimit;
    property CfgKeepDays: WideString read Get_CfgKeepDays write Set_CfgKeepDays;
    property Partial: WordBool read Get_Partial write Set_Partial;
    property Force: WordBool read Get_Force write Set_Force;
    property TotalNumCards: WideString read Get_TotalNumCards write Set_TotalNumCards;
    property GiftSeqNum: WideString read Get_GiftSeqNum write Set_GiftSeqNum;
    property IndType: WideString read Get_IndType write Set_IndType;
    property SourceCard: WideString read Get_SourceCard write Set_SourceCard;
    property Loyalty: WordBool read Get_Loyalty write Set_Loyalty;
    property GiftUnits: WideString read Get_GiftUnits write Set_GiftUnits;
    property CashierNum: WideString read Get_CashierNum write Set_CashierNum;
    property CashierID: WideString read Get_CashierID write Set_CashierID;
    property ManagerNum: WideString read Get_ManagerNum write Set_ManagerNum;
    property CheckNum: WideString read Get_CheckNum write Set_CheckNum;
    property RFID: WideString read Get_RFID write Set_RFID;
    property Birth_Date: WideString read Get_Birth_Date write Set_Birth_Date;
    property Phone_Number: WideString read Get_Phone_Number write Set_Phone_Number;
    property ABANum: WideString read Get_ABANum write Set_ABANum;
    property License: WideString read Get_License write Set_License;
    property State: WideString read Get_State write Set_State;
    property MICR: WideString read Get_MICR write Set_MICR;
    property OrigPurchData: WideString read Get_OrigPurchData write Set_OrigPurchData;
    property VoucherNum: WideString read Get_VoucherNum write Set_VoucherNum;
    property POSSeqNum: WideString read Get_POSSeqNum write Set_POSSeqNum;
    property DebitType: WideString read Get_DebitType write Set_DebitType;
    property MACBlock: WideString read Get_MACBlock write Set_MACBlock;
    property PINBlock: WideString read Get_PINBlock write Set_PINBlock;
    property CashbackAmnt: WideString read Get_CashbackAmnt write Set_CashbackAmnt;
    property KeySerialNum: WideString read Get_KeySerialNum write Set_KeySerialNum;
    property LanguageCode: WideString read Get_LanguageCode write Set_LanguageCode;
    property ShiftID: WideString read Get_ShiftID write Set_ShiftID;
    property PromoCode: WideString read Get_PromoCode write Set_PromoCode;
    property Store: WideString read Get_Store write Set_Store;
    property EBTType: WideString read Get_EBTType write Set_EBTType;
    property AmxDescription_1: WideString read Get_AmxDescription_1 write Set_AmxDescription_1;
    property AmxDescription_2: WideString read Get_AmxDescription_2 write Set_AmxDescription_2;
    property AmxDescription_3: WideString read Get_AmxDescription_3 write Set_AmxDescription_3;
    property AmxDescription_4: WideString read Get_AmxDescription_4 write Set_AmxDescription_4;
    property AmxChargeDescription: WideString read Get_AmxChargeDescription write Set_AmxChargeDescription;
    property OriginalAmnt: WideString read Get_OriginalAmnt write Set_OriginalAmnt;
    property TargetTransaction: WideString read Get_TargetTransaction write Set_TargetTransaction;
    property CmrclCardFlag: WideString read Get_CmrclCardFlag write Set_CmrclCardFlag;
    property ImpTransFlag: WordBool read Get_ImpTransFlag write Set_ImpTransFlag;
    property EnhancedTransFlag: WordBool read Get_EnhancedTransFlag write Set_EnhancedTransFlag;
    property GratuityAmntEst: WideString read Get_GratuityAmntEst write Set_GratuityAmntEst;
    property GratuityAmnt: WideString read Get_GratuityAmnt write Set_GratuityAmnt;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property Processor: WideString read Get_Processor write Set_Processor;
    property TID: WideString read Get_TID write Set_TID;
    property Card: WideString read Get_Card write Set_Card;
    property ExpDate: WideString read Get_ExpDate write Set_ExpDate;
    property Billpay: WideString read Get_Billpay write Set_Billpay;
    property Level3: WideString read Get_Level3 write Set_Level3;
    property Action: WideString read Get_Action write Set_Action;
    property BatchCloseType: WideString read Get_BatchCloseType write Set_BatchCloseType;
    property Manual: WideString read Get_Manual write Set_Manual;
    property Amount: WideString read Get_Amount write Set_Amount;
    property Ref: WideString read Get_Ref write Set_Ref;
    property Track: WideString read Get_Track write Set_Track;
    property CID: WideString read Get_CID write Set_CID;
    property Tax: WideString read Get_Tax write Set_Tax;
    property ExtFile: WideString read Get_ExtFile write Set_ExtFile;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property PeriodicPayment: WideString read Get_PeriodicPayment write Set_PeriodicPayment;
    property OffLine: WideString read Get_OffLine write Set_OffLine;
    property VoidFlag: WideString read Get_VoidFlag write Set_VoidFlag;
    property Zip: WideString read Get_Zip write Set_Zip;
    property DestZip: WideString read Get_DestZip write Set_DestZip;
    property Street: WideString read Get_Street write Set_Street;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property member: WideString read Get_member write Set_member;
    property TI: WideString read Get_TI write Set_TI;
    property TOTALAUTH: WideString read Get_TOTALAUTH write Set_TOTALAUTH;
    property SplitProcessor: WideString read Get_SplitProcessor write Set_SplitProcessor;
    property MCSN: WideString read Get_MCSN write Set_MCSN;
    property MCSC: WideString read Get_MCSC write Set_MCSC;
    property Multi: WideString read Get_Multi write Set_Multi;
    property CVV2: WideString read Get_CVV2 write Set_CVV2;
    property CardPresent: WideString read Get_CardPresent write Set_CardPresent;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property SequenceNum: WideString read Get_SequenceNum write Set_SequenceNum;
    property UserName: WideString read Get_UserName write Set_UserName;
    property Password: WideString read Get_Password write Set_Password;
    property InpType: FileType read Get_InpType write Set_InpType;
    property RespType: TRespType read Get_RespType write Set_RespType;
    property FileName: WideString read Get_FileName write Set_FileName;
    property XDRFile: WideString read Get_XDRFile write Set_XDRFile;
    property CheckType: WideString read Get_CheckType write Set_CheckType;
    property CheckAccType: WideString read Get_CheckAccType write Set_CheckAccType;
    property MICRStatus: WideString read Get_MICRStatus write Set_MICRStatus;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property CustomerFirstName: WideString read Get_CustomerFirstName write Set_CustomerFirstName;
    property CustomerStreet: WideString read Get_CustomerStreet write Set_CustomerStreet;
    property CheckReaderCode: WideString read Get_CheckReaderCode write Set_CheckReaderCode;
    property CustomerLastName: WideString read Get_CustomerLastName write Set_CustomerLastName;
    property CustomerCity: WideString read Get_CustomerCity write Set_CustomerCity;
    property IDType: WideString read Get_IDType write Set_IDType;
    property IDCountry: WideString read Get_IDCountry write Set_IDCountry;
    property DLTrackII: WideString read Get_DLTrackII write Set_DLTrackII;
    property IsPurchaseCard: WordBool read Get_IsPurchaseCard write Set_IsPurchaseCard;
    property DriverID: WideString read Get_DriverID write Set_DriverID;
    property DriverPIN: WideString read Get_DriverPIN write Set_DriverPIN;
    property IDNumber: WideString read Get_IDNumber write Set_IDNumber;
    property Odometer: WideString read Get_Odometer write Set_Odometer;
    property RestrictionCode: WideString read Get_RestrictionCode write Set_RestrictionCode;
    property VehicleID: WideString read Get_VehicleID write Set_VehicleID;
    property ProductDetailCount: WideString read Get_ProductDetailCount write Set_ProductDetailCount;
    property ProductDetailCode_1: WideString read Get_ProductDetailCode_1 write Set_ProductDetailCode_1;
    property ProductDetailCode_2: WideString read Get_ProductDetailCode_2 write Set_ProductDetailCode_2;
    property ProductDetailCode_3: WideString read Get_ProductDetailCode_3 write Set_ProductDetailCode_3;
    property ProductDetailCode_4: WideString read Get_ProductDetailCode_4 write Set_ProductDetailCode_4;
    property ProductDetailCode_5: WideString read Get_ProductDetailCode_5 write Set_ProductDetailCode_5;
    property ProductDetailCode_6: WideString read Get_ProductDetailCode_6 write Set_ProductDetailCode_6;
    property ProductDetailCode_7: WideString read Get_ProductDetailCode_7 write Set_ProductDetailCode_7;
    property ProductDetailCode_8: WideString read Get_ProductDetailCode_8 write Set_ProductDetailCode_8;
    property ProductDetailCode_9: WideString read Get_ProductDetailCode_9 write Set_ProductDetailCode_9;
    property ProductDetailCode_10: WideString read Get_ProductDetailCode_10 write Set_ProductDetailCode_10;
    property ProductDetailAmount_1: WideString read Get_ProductDetailAmount_1 write Set_ProductDetailAmount_1;
    property ProductDetailAmount_2: WideString read Get_ProductDetailAmount_2 write Set_ProductDetailAmount_2;
    property ProductDetailAmount_3: WideString read Get_ProductDetailAmount_3 write Set_ProductDetailAmount_3;
    property ProductDetailAmount_4: WideString read Get_ProductDetailAmount_4 write Set_ProductDetailAmount_4;
    property ProductDetailAmount_5: WideString read Get_ProductDetailAmount_5 write Set_ProductDetailAmount_5;
    property ProductDetailAmount_6: WideString read Get_ProductDetailAmount_6 write Set_ProductDetailAmount_6;
    property ProductDetailAmount_7: WideString read Get_ProductDetailAmount_7 write Set_ProductDetailAmount_7;
    property ProductDetailAmount_8: WideString read Get_ProductDetailAmount_8 write Set_ProductDetailAmount_8;
    property ProductDetailAmount_9: WideString read Get_ProductDetailAmount_9 write Set_ProductDetailAmount_9;
    property ProductDetailAmount_10: WideString read Get_ProductDetailAmount_10 write Set_ProductDetailAmount_10;
    property ProductDetailQuantity_1: WideString read Get_ProductDetailQuantity_1 write Set_ProductDetailQuantity_1;
    property ProductDetailQuantity_2: WideString read Get_ProductDetailQuantity_2 write Set_ProductDetailQuantity_2;
    property ProductDetailQuantity_3: WideString read Get_ProductDetailQuantity_3 write Set_ProductDetailQuantity_3;
    property ProductDetailQuantity_4: WideString read Get_ProductDetailQuantity_4 write Set_ProductDetailQuantity_4;
    property ProductDetailQuantity_5: WideString read Get_ProductDetailQuantity_5 write Set_ProductDetailQuantity_5;
    property ProductDetailQuantity_6: WideString read Get_ProductDetailQuantity_6 write Set_ProductDetailQuantity_6;
    property ProductDetailQuantity_7: WideString read Get_ProductDetailQuantity_7 write Set_ProductDetailQuantity_7;
    property ProductDetailQuantity_8: WideString read Get_ProductDetailQuantity_8 write Set_ProductDetailQuantity_8;
    property ProductDetailQuantity_9: WideString read Get_ProductDetailQuantity_9 write Set_ProductDetailQuantity_9;
    property ProductDetailQuantity_10: WideString read Get_ProductDetailQuantity_10 write Set_ProductDetailQuantity_10;
    property StoreNum: WideString read Get_StoreNum write Set_StoreNum;
    property SSNum: WideString read Get_SSNum write Set_SSNum;
    property CustomerHouseNum: WideString read Get_CustomerHouseNum write Set_CustomerHouseNum;
    property PumpNumber: WideString read Get_PumpNumber write Set_PumpNumber;
    property SurchargeAmount: WideString read Get_SurchargeAmount write Set_SurchargeAmount;
    property VirtualGiftCardFlag: WordBool read Get_VirtualGiftCardFlag write Set_VirtualGiftCardFlag;
    property GiftPin: WideString read Get_GiftPin write Set_GiftPin;
    property ProcRespCode: WideString read Get_ProcRespCode write Set_ProcRespCode;
    property FleetCard: WideString read Get_FleetCard write Set_FleetCard;
    property TableNumber: WideString read Get_TableNumber write Set_TableNumber;
    property TrackI: WideString read Get_TrackI write Set_TrackI;
    property CreditPlanNumber: WideString read Get_CreditPlanNumber write Set_CreditPlanNumber;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoPccResponse provides a Create and CreateRemote method to          
// create instances of the default interface _PccResponse exposed by              
// the CoClass PccResponse. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPccResponse = class
    class function Create: _PccResponse;
    class function CreateRemote(const MachineName: string): _PccResponse;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPccResponse
// Help String      : 
// Default Interface: _PccResponse
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TPccResponseProperties= class;
{$ENDIF}
  TPccResponse = class(TOleServer)
  private
    FIntf:        _PccResponse;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TPccResponseProperties;
    function      GetServerProperties: TPccResponseProperties;
{$ENDIF}
    function      GetDefaultInterface: _PccResponse;
  protected
    procedure InitServerData; override;
    procedure Set_BatchNumber(var Param1: WideString);
    function Get_BatchNumber: WideString;
    procedure Set_AuthDate(var Param1: WideString);
    function Get_AuthDate: WideString;
    procedure Set_CashBack(var Param1: WideString);
    function Get_CashBack: WideString;
    procedure Set_AmountDue(var Param1: WideString);
    function Get_AmountDue: WideString;
    procedure Set_AuthAmount(var Param1: WideString);
    function Get_AuthAmount: WideString;
    procedure Set_TransTime(var Param1: WideString);
    function Get_TransTime: WideString;
    procedure Set_TotTransTime(var Param1: WideString);
    function Get_TotTransTime: WideString;
    procedure Set_ConfigSize(var Param1: WideString);
    function Get_ConfigSize: WideString;
    procedure Set_CurrSize(var Param1: WideString);
    function Get_CurrSize: WideString;
    procedure Set_AuxRespCode(var Param1: WideString);
    function Get_AuxRespCode: WideString;
    procedure Set_VoidBalance(var Param1: WideString);
    function Get_VoidBalance: WideString;
    procedure Set_eCommIndicator(var Param1: WideString);
    function Get_eCommIndicator: WideString;
    procedure Set_CardholderId(var Param1: WideString);
    function Get_CardholderId: WideString;
    procedure Set_AccountDataSrc(var Param1: WideString);
    function Get_AccountDataSrc: WideString;
    function Get_GetAsString: WideString;
    procedure Set_GratuityAmntEst(var Param1: WideString);
    function Get_GratuityAmntEst: WideString;
    procedure Set_GratuityAmnt(var Param1: WideString);
    function Get_GratuityAmnt: WideString;
    procedure Set_ItemID(var Param1: WideString);
    function Get_ItemID: WideString;
    function Get_Result: WideString;
    procedure Set_Result(var Param1: WideString);
    function Get_ResultCode: WideString;
    procedure Set_ResultCode(var Param1: WideString);
    function Get_CmrclCardFlag: WideString;
    procedure Set_CmrclCardFlag(var Param1: WideString);
    function Get_NetID: WideString;
    procedure Set_NetID(var Param1: WideString);
    function Get_Auth: WideString;
    procedure Set_Auth(var Param1: WideString);
    function Get_Reference: WideString;
    procedure Set_Reference(var Param1: WideString);
    function Get_ADDRESVER: WideString;
    procedure Set_ADDRESVER(var Param1: WideString);
    function Get_TDate: WideString;
    procedure Set_TDate(var Param1: WideString);
    function Get_Ticket: WideString;
    procedure Set_Ticket(var Param1: WideString);
    function Get_TransNum: WideString;
    procedure Set_TransNum(var Param1: WideString);
    function Get_TItem: WideString;
    procedure Set_TItem(var Param1: WideString);
    function Get_TBATCH: WideString;
    procedure Set_TBATCH(var Param1: WideString);
    function Get_TI: WideString;
    procedure Set_TI(var Param1: WideString);
    function Get_TICODE: WideString;
    procedure Set_TICODE(var Param1: WideString);
    function Get_IND: WideString;
    procedure Set_IND(var Param1: WideString);
    function Get_MSI: WideString;
    procedure Set_MSI(var Param1: WideString);
    function Get_Ret: WideString;
    procedure Set_Ret(var Param1: WideString);
    function Get_PEM: WideString;
    procedure Set_PEM(var Param1: WideString);
    function Get_TIM: WideString;
    procedure Set_TIM(var Param1: WideString);
    function Get_ACI: WideString;
    procedure Set_ACI(var Param1: WideString);
    function Get_RespCode: WideString;
    procedure Set_RespCode(var Param1: WideString);
    function Get_RRec: WideString;
    procedure Set_RRec(var Param1: WideString);
    function Get_CCType: WideString;
    procedure Set_CCType(var Param1: WideString);
    function Get_CVV2Response: WideString;
    procedure Set_CVV2Response(var Param1: WideString);
    function Get_PurchaseCard: WideString;
    procedure Set_PurchaseCard(var Param1: WideString);
    procedure Set_RespType(var Param1: RespFileType);
    function Get_RespType: RespFileType;
    function Get_Error: RespError;
    procedure Set_FileName(var Param1: WideString);
    function Get_FileName: WideString;
    procedure Set_InpType(var Param1: RespFileType);
    function Get_InpType: RespFileType;
    procedure Set_XDRFile(var Param1: WideString);
    function Get_XDRFile: WideString;
    procedure Set_TroutD(var Param1: WideString);
    function Get_TroutD: WideString;
    procedure Set_UserName(var Param1: WideString);
    function Get_UserName: WideString;
    procedure Set_Auth_Src_Code(var Param1: WideString);
    function Get_Auth_Src_Code: WideString;
    procedure Set_SaleCount(var Param1: WideString);
    function Get_SaleCount: WideString;
    procedure Set_SaleTotalAmount(var Param1: WideString);
    function Get_SaleTotalAmount: WideString;
    procedure Set_ActivationCount(var Param1: WideString);
    function Get_ActivationCount: WideString;
    procedure Set_ActivationTotalAmount(var Param1: WideString);
    function Get_ActivationTotalAmount: WideString;
    procedure Set_CreditCount(var Param1: WideString);
    function Get_CreditCount: WideString;
    procedure Set_CreditTotalAmount(var Param1: WideString);
    function Get_CreditTotalAmount: WideString;
    procedure Set_VoidCount(var Param1: WideString);
    function Get_VoidCount: WideString;
    procedure Set_VoidTotalAmount(var Param1: WideString);
    function Get_VoidTotalAmount: WideString;
    procedure Set_AddValueCount(var Param1: WideString);
    function Get_AddValueCount: WideString;
    procedure Set_AddValueTotalAmount(var Param1: WideString);
    function Get_AddValueTotalAmount: WideString;
    procedure Set_TipCount(var Param1: WideString);
    function Get_TipCount: WideString;
    procedure Set_TipTotalAmount(var Param1: WideString);
    function Get_TipTotalAmount: WideString;
    procedure Set_BalanceTransferCount(var Param1: WideString);
    function Get_BalanceTransferCount: WideString;
    procedure Set_BalanceTransferTotalAmount(var Param1: WideString);
    function Get_BalanceTransferTotalAmount: WideString;
    procedure Set_PointsCount(var Param1: WideString);
    function Get_PointsCount: WideString;
    procedure Set_PointsTotalAmount(var Param1: WideString);
    function Get_PointsTotalAmount: WideString;
    procedure Set_AddPointsCount(var Param1: WideString);
    function Get_AddPointsCount: WideString;
    procedure Set_AddPointsTotalAmount(var Param1: WideString);
    function Get_AddPointsTotalAmount: WideString;
    procedure Set_MiscMessage(var Param1: WideString);
    function Get_MiscMessage: WideString;
    procedure Set_TransDateTime(var Param1: WideString);
    function Get_TransDateTime: WideString;
    procedure Set_GiftCardBalance(var Param1: WideString);
    function Get_GiftCardBalance: WideString;
    procedure Set_ImageStatus(var Param1: WideString);
    function Get_ImageStatus: WideString;
    procedure Set_EBTFoodBalance(var Param1: WideString);
    function Get_EBTFoodBalance: WideString;
    procedure Set_EBTCashBalance(var Param1: WideString);
    function Get_EBTCashBalance: WideString;
    procedure Set_CustomerFirstName(var Param1: WideString);
    function Get_CustomerFirstName: WideString;
    procedure Set_CustomerMInit(var Param1: WideString);
    function Get_CustomerMInit: WideString;
    procedure Set_CustomerLastName(var Param1: WideString);
    function Get_CustomerLastName: WideString;
    procedure Set_CustomerHouseNum(var Param1: WideString);
    function Get_CustomerHouseNum: WideString;
    procedure Set_CustomerAddress(var Param1: WideString);
    function Get_CustomerAddress: WideString;
    procedure Set_CustomerAppNum(var Param1: WideString);
    function Get_CustomerAppNum: WideString;
    procedure Set_CustomerCity(var Param1: WideString);
    function Get_CustomerCity: WideString;
    procedure Set_State(var Param1: WideString);
    function Get_State: WideString;
    procedure Set_ZipCode(var Param1: WideString);
    function Get_ZipCode: WideString;
    procedure Set_AcctNum(var Param1: WideString);
    function Get_AcctNum: WideString;
    procedure Set_ReturnCode(var Param1: WideString);
    function Get_ReturnCode: WideString;
    procedure Set_CreditLimit(var Param1: WideString);
    function Get_CreditLimit: WideString;
    procedure Set_Phone_Number(var Param1: WideString);
    function Get_Phone_Number: WideString;
    procedure Set_MaxAuthAmount(var Param1: WideString);
    function Get_MaxAuthAmount: WideString;
    procedure Set_RestrictCode(var Param1: WideString);
    function Get_RestrictCode: WideString;
    procedure Set_AddText1(var Param1: WideString);
    function Get_AddText1: WideString;
    procedure Set_AddText2(var Param1: WideString);
    function Get_AddText2: WideString;
    procedure Set_AddText3(var Param1: WideString);
    function Get_AddText3: WideString;
    procedure Set_AddText4(var Param1: WideString);
    function Get_AddText4: WideString;
    procedure Set_GiftPin(var Param1: WideString);
    function Get_GiftPin: WideString;
    procedure Set_RecordCount(var Param1: WideString);
    function Get_RecordCount: WideString;
    procedure Set_TransRecord(var Param1: WideString);
    function Get_TransRecord: WideString;
    procedure Set_ReturnCheckFee(var Param1: WideString);
    function Get_ReturnCheckFee: WideString;
    procedure Set_ReturnCheckNote(var Param1: WideString);
    function Get_ReturnCheckNote: WideString;
    procedure Set_PS2000Data(var Param1: WideString);
    function Get_PS2000Data: WideString;
    procedure Set_PointsBalance(var Param1: WideString);
    function Get_PointsBalance: WideString;
    procedure Set_PreAuthCount(var Param1: WideString);
    function Get_PreAuthCount: WideString;
    procedure Set_PreAuthAmount(var Param1: WideString);
    function Get_PreAuthAmount: WideString;
    procedure Set_PostAuthCount(var Param1: WideString);
    function Get_PostAuthCount: WideString;
    procedure Set_PostAuthAmount(var Param1: WideString);
    function Get_PostAuthAmount: WideString;
    procedure Set_IssuanceCount(var Param1: WideString);
    function Get_IssuanceCount: WideString;
    procedure Set_IssuanceTotalAmount(var Param1: WideString);
    function Get_IssuanceTotalAmount: WideString;
    procedure Set_DeactivateCount(var Param1: WideString);
    function Get_DeactivateCount: WideString;
    procedure Set_DeactivateTotalAmount(var Param1: WideString);
    function Get_DeactivateTotalAmount: WideString;
    procedure Set_BalanceMergeCount(var Param1: WideString);
    function Get_BalanceMergeCount: WideString;
    procedure Set_BalanceMergeTotalAmount(var Param1: WideString);
    function Get_BalanceMergeTotalAmount: WideString;
    procedure Set_BalanceAdjustCount(var Param1: WideString);
    function Get_BalanceAdjustCount: WideString;
    procedure Set_BalanceAdjustTotalAmount(var Param1: WideString);
    function Get_BalanceAdjustTotalAmount: WideString;
    procedure Set_ReportLostStolenCount(var Param1: WideString);
    function Get_ReportLostStolenCount: WideString;
    procedure Set_ReportLostStolenTotalAmount(var Param1: WideString);
    function Get_ReportLostStolenTotalAmount: WideString;
    procedure Set_CashoutCount(var Param1: WideString);
    function Get_CashoutCount: WideString;
    procedure Set_CashoutTotalAmount(var Param1: WideString);
    function Get_CashoutTotalAmount: WideString;
    procedure Set_ReactivateCount(var Param1: WideString);
    function Get_ReactivateCount: WideString;
    procedure Set_ReactivateTotalAmount(var Param1: WideString);
    function Get_ReactivateTotalAmount: WideString;
    procedure Set_CCAvailBalance(var Param1: WideString);
    function Get_CCAvailBalance: WideString;
    procedure Set_TraceNumber(var Param1: WideString);
    function Get_TraceNumber: WideString;
    procedure Set_TransactionReferenceNumber(var Param1: WideString);
    function Get_TransactionReferenceNumber: WideString;
    procedure Set_DCAvailBalance(var Param1: WideString);
    function Get_DCAvailBalance: WideString;
    procedure Set_SurchargeAmount(var Param1: WideString);
    function Get_SurchargeAmount: WideString;
    procedure Set_Receipt(var Param1: WideString);
    function Get_Receipt: WideString;
    procedure Set_TID(var Param1: WideString);
    function Get_TID: WideString;
    procedure Set_Processor(var Param1: WideString);
    function Get_Processor: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _PccResponse);
    procedure Disconnect; override;
    function Load(var szFileName: OleVariant; var intRecNum: Smallint; var blnValidate: WordBool): RespErrType;
    function LoadOut(var szFileName: WideString; var intRecNum: Smallint): RespErrType;
    function LoadXML(var szFileName: WideString): RespErrType;
    function WriteFile(var eType: RespFileType; var szNewPrefix: OleVariant; 
                       var szNewPath: OleVariant; var intRecNum: Smallint; var blnAppend: WordBool; 
                       var BatchNum: Smallint; var blnLastRec: WordBool): RespErrType;
    function CleanString(var szStringIn: WideString; var szReplaceList: WideString; 
                         var blnCompact: WordBool; var blnTrim: WordBool; var blnRmvNP: WordBool): WideString;
    procedure Clear;
    procedure ClearErr;
    property DefaultInterface: _PccResponse read GetDefaultInterface;
    property GetAsString: WideString read Get_GetAsString;
    property Error: RespError read Get_Error;
    property BatchNumber: WideString read Get_BatchNumber write Set_BatchNumber;
    property AuthDate: WideString read Get_AuthDate write Set_AuthDate;
    property CashBack: WideString read Get_CashBack write Set_CashBack;
    property AmountDue: WideString read Get_AmountDue write Set_AmountDue;
    property AuthAmount: WideString read Get_AuthAmount write Set_AuthAmount;
    property TransTime: WideString read Get_TransTime write Set_TransTime;
    property TotTransTime: WideString read Get_TotTransTime write Set_TotTransTime;
    property ConfigSize: WideString read Get_ConfigSize write Set_ConfigSize;
    property CurrSize: WideString read Get_CurrSize write Set_CurrSize;
    property AuxRespCode: WideString read Get_AuxRespCode write Set_AuxRespCode;
    property VoidBalance: WideString read Get_VoidBalance write Set_VoidBalance;
    property eCommIndicator: WideString read Get_eCommIndicator write Set_eCommIndicator;
    property CardholderId: WideString read Get_CardholderId write Set_CardholderId;
    property AccountDataSrc: WideString read Get_AccountDataSrc write Set_AccountDataSrc;
    property GratuityAmntEst: WideString read Get_GratuityAmntEst write Set_GratuityAmntEst;
    property GratuityAmnt: WideString read Get_GratuityAmnt write Set_GratuityAmnt;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property Result: WideString read Get_Result write Set_Result;
    property ResultCode: WideString read Get_ResultCode write Set_ResultCode;
    property CmrclCardFlag: WideString read Get_CmrclCardFlag write Set_CmrclCardFlag;
    property NetID: WideString read Get_NetID write Set_NetID;
    property Auth: WideString read Get_Auth write Set_Auth;
    property Reference: WideString read Get_Reference write Set_Reference;
    property ADDRESVER: WideString read Get_ADDRESVER write Set_ADDRESVER;
    property TDate: WideString read Get_TDate write Set_TDate;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property TransNum: WideString read Get_TransNum write Set_TransNum;
    property TItem: WideString read Get_TItem write Set_TItem;
    property TBATCH: WideString read Get_TBATCH write Set_TBATCH;
    property TI: WideString read Get_TI write Set_TI;
    property TICODE: WideString read Get_TICODE write Set_TICODE;
    property IND: WideString read Get_IND write Set_IND;
    property MSI: WideString read Get_MSI write Set_MSI;
    property Ret: WideString read Get_Ret write Set_Ret;
    property PEM: WideString read Get_PEM write Set_PEM;
    property TIM: WideString read Get_TIM write Set_TIM;
    property ACI: WideString read Get_ACI write Set_ACI;
    property RespCode: WideString read Get_RespCode write Set_RespCode;
    property RRec: WideString read Get_RRec write Set_RRec;
    property CCType: WideString read Get_CCType write Set_CCType;
    property CVV2Response: WideString read Get_CVV2Response write Set_CVV2Response;
    property PurchaseCard: WideString read Get_PurchaseCard write Set_PurchaseCard;
    property RespType: RespFileType read Get_RespType write Set_RespType;
    property FileName: WideString read Get_FileName write Set_FileName;
    property InpType: RespFileType read Get_InpType write Set_InpType;
    property XDRFile: WideString read Get_XDRFile write Set_XDRFile;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property UserName: WideString read Get_UserName write Set_UserName;
    property Auth_Src_Code: WideString read Get_Auth_Src_Code write Set_Auth_Src_Code;
    property SaleCount: WideString read Get_SaleCount write Set_SaleCount;
    property SaleTotalAmount: WideString read Get_SaleTotalAmount write Set_SaleTotalAmount;
    property ActivationCount: WideString read Get_ActivationCount write Set_ActivationCount;
    property ActivationTotalAmount: WideString read Get_ActivationTotalAmount write Set_ActivationTotalAmount;
    property CreditCount: WideString read Get_CreditCount write Set_CreditCount;
    property CreditTotalAmount: WideString read Get_CreditTotalAmount write Set_CreditTotalAmount;
    property VoidCount: WideString read Get_VoidCount write Set_VoidCount;
    property VoidTotalAmount: WideString read Get_VoidTotalAmount write Set_VoidTotalAmount;
    property AddValueCount: WideString read Get_AddValueCount write Set_AddValueCount;
    property AddValueTotalAmount: WideString read Get_AddValueTotalAmount write Set_AddValueTotalAmount;
    property TipCount: WideString read Get_TipCount write Set_TipCount;
    property TipTotalAmount: WideString read Get_TipTotalAmount write Set_TipTotalAmount;
    property BalanceTransferCount: WideString read Get_BalanceTransferCount write Set_BalanceTransferCount;
    property BalanceTransferTotalAmount: WideString read Get_BalanceTransferTotalAmount write Set_BalanceTransferTotalAmount;
    property PointsCount: WideString read Get_PointsCount write Set_PointsCount;
    property PointsTotalAmount: WideString read Get_PointsTotalAmount write Set_PointsTotalAmount;
    property AddPointsCount: WideString read Get_AddPointsCount write Set_AddPointsCount;
    property AddPointsTotalAmount: WideString read Get_AddPointsTotalAmount write Set_AddPointsTotalAmount;
    property MiscMessage: WideString read Get_MiscMessage write Set_MiscMessage;
    property TransDateTime: WideString read Get_TransDateTime write Set_TransDateTime;
    property GiftCardBalance: WideString read Get_GiftCardBalance write Set_GiftCardBalance;
    property ImageStatus: WideString read Get_ImageStatus write Set_ImageStatus;
    property EBTFoodBalance: WideString read Get_EBTFoodBalance write Set_EBTFoodBalance;
    property EBTCashBalance: WideString read Get_EBTCashBalance write Set_EBTCashBalance;
    property CustomerFirstName: WideString read Get_CustomerFirstName write Set_CustomerFirstName;
    property CustomerMInit: WideString read Get_CustomerMInit write Set_CustomerMInit;
    property CustomerLastName: WideString read Get_CustomerLastName write Set_CustomerLastName;
    property CustomerHouseNum: WideString read Get_CustomerHouseNum write Set_CustomerHouseNum;
    property CustomerAddress: WideString read Get_CustomerAddress write Set_CustomerAddress;
    property CustomerAppNum: WideString read Get_CustomerAppNum write Set_CustomerAppNum;
    property CustomerCity: WideString read Get_CustomerCity write Set_CustomerCity;
    property State: WideString read Get_State write Set_State;
    property ZipCode: WideString read Get_ZipCode write Set_ZipCode;
    property AcctNum: WideString read Get_AcctNum write Set_AcctNum;
    property ReturnCode: WideString read Get_ReturnCode write Set_ReturnCode;
    property CreditLimit: WideString read Get_CreditLimit write Set_CreditLimit;
    property Phone_Number: WideString read Get_Phone_Number write Set_Phone_Number;
    property MaxAuthAmount: WideString read Get_MaxAuthAmount write Set_MaxAuthAmount;
    property RestrictCode: WideString read Get_RestrictCode write Set_RestrictCode;
    property AddText1: WideString read Get_AddText1 write Set_AddText1;
    property AddText2: WideString read Get_AddText2 write Set_AddText2;
    property AddText3: WideString read Get_AddText3 write Set_AddText3;
    property AddText4: WideString read Get_AddText4 write Set_AddText4;
    property GiftPin: WideString read Get_GiftPin write Set_GiftPin;
    property RecordCount: WideString read Get_RecordCount write Set_RecordCount;
    property TransRecord: WideString read Get_TransRecord write Set_TransRecord;
    property ReturnCheckFee: WideString read Get_ReturnCheckFee write Set_ReturnCheckFee;
    property ReturnCheckNote: WideString read Get_ReturnCheckNote write Set_ReturnCheckNote;
    property PS2000Data: WideString read Get_PS2000Data write Set_PS2000Data;
    property PointsBalance: WideString read Get_PointsBalance write Set_PointsBalance;
    property PreAuthCount: WideString read Get_PreAuthCount write Set_PreAuthCount;
    property PreAuthAmount: WideString read Get_PreAuthAmount write Set_PreAuthAmount;
    property PostAuthCount: WideString read Get_PostAuthCount write Set_PostAuthCount;
    property PostAuthAmount: WideString read Get_PostAuthAmount write Set_PostAuthAmount;
    property IssuanceCount: WideString read Get_IssuanceCount write Set_IssuanceCount;
    property IssuanceTotalAmount: WideString read Get_IssuanceTotalAmount write Set_IssuanceTotalAmount;
    property DeactivateCount: WideString read Get_DeactivateCount write Set_DeactivateCount;
    property DeactivateTotalAmount: WideString read Get_DeactivateTotalAmount write Set_DeactivateTotalAmount;
    property BalanceMergeCount: WideString read Get_BalanceMergeCount write Set_BalanceMergeCount;
    property BalanceMergeTotalAmount: WideString read Get_BalanceMergeTotalAmount write Set_BalanceMergeTotalAmount;
    property BalanceAdjustCount: WideString read Get_BalanceAdjustCount write Set_BalanceAdjustCount;
    property BalanceAdjustTotalAmount: WideString read Get_BalanceAdjustTotalAmount write Set_BalanceAdjustTotalAmount;
    property ReportLostStolenCount: WideString read Get_ReportLostStolenCount write Set_ReportLostStolenCount;
    property ReportLostStolenTotalAmount: WideString read Get_ReportLostStolenTotalAmount write Set_ReportLostStolenTotalAmount;
    property CashoutCount: WideString read Get_CashoutCount write Set_CashoutCount;
    property CashoutTotalAmount: WideString read Get_CashoutTotalAmount write Set_CashoutTotalAmount;
    property ReactivateCount: WideString read Get_ReactivateCount write Set_ReactivateCount;
    property ReactivateTotalAmount: WideString read Get_ReactivateTotalAmount write Set_ReactivateTotalAmount;
    property CCAvailBalance: WideString read Get_CCAvailBalance write Set_CCAvailBalance;
    property TraceNumber: WideString read Get_TraceNumber write Set_TraceNumber;
    property TransactionReferenceNumber: WideString read Get_TransactionReferenceNumber write Set_TransactionReferenceNumber;
    property DCAvailBalance: WideString read Get_DCAvailBalance write Set_DCAvailBalance;
    property SurchargeAmount: WideString read Get_SurchargeAmount write Set_SurchargeAmount;
    property Receipt: WideString read Get_Receipt write Set_Receipt;
    property TID: WideString read Get_TID write Set_TID;
    property Processor: WideString read Get_Processor write Set_Processor;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TPccResponseProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TPccResponse
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TPccResponseProperties = class(TPersistent)
  private
    FServer:    TPccResponse;
    function    GetDefaultInterface: _PccResponse;
    constructor Create(AServer: TPccResponse);
  protected
    procedure Set_BatchNumber(var Param1: WideString);
    function Get_BatchNumber: WideString;
    procedure Set_AuthDate(var Param1: WideString);
    function Get_AuthDate: WideString;
    procedure Set_CashBack(var Param1: WideString);
    function Get_CashBack: WideString;
    procedure Set_AmountDue(var Param1: WideString);
    function Get_AmountDue: WideString;
    procedure Set_AuthAmount(var Param1: WideString);
    function Get_AuthAmount: WideString;
    procedure Set_TransTime(var Param1: WideString);
    function Get_TransTime: WideString;
    procedure Set_TotTransTime(var Param1: WideString);
    function Get_TotTransTime: WideString;
    procedure Set_ConfigSize(var Param1: WideString);
    function Get_ConfigSize: WideString;
    procedure Set_CurrSize(var Param1: WideString);
    function Get_CurrSize: WideString;
    procedure Set_AuxRespCode(var Param1: WideString);
    function Get_AuxRespCode: WideString;
    procedure Set_VoidBalance(var Param1: WideString);
    function Get_VoidBalance: WideString;
    procedure Set_eCommIndicator(var Param1: WideString);
    function Get_eCommIndicator: WideString;
    procedure Set_CardholderId(var Param1: WideString);
    function Get_CardholderId: WideString;
    procedure Set_AccountDataSrc(var Param1: WideString);
    function Get_AccountDataSrc: WideString;
    function Get_GetAsString: WideString;
    procedure Set_GratuityAmntEst(var Param1: WideString);
    function Get_GratuityAmntEst: WideString;
    procedure Set_GratuityAmnt(var Param1: WideString);
    function Get_GratuityAmnt: WideString;
    procedure Set_ItemID(var Param1: WideString);
    function Get_ItemID: WideString;
    function Get_Result: WideString;
    procedure Set_Result(var Param1: WideString);
    function Get_ResultCode: WideString;
    procedure Set_ResultCode(var Param1: WideString);
    function Get_CmrclCardFlag: WideString;
    procedure Set_CmrclCardFlag(var Param1: WideString);
    function Get_NetID: WideString;
    procedure Set_NetID(var Param1: WideString);
    function Get_Auth: WideString;
    procedure Set_Auth(var Param1: WideString);
    function Get_Reference: WideString;
    procedure Set_Reference(var Param1: WideString);
    function Get_ADDRESVER: WideString;
    procedure Set_ADDRESVER(var Param1: WideString);
    function Get_TDate: WideString;
    procedure Set_TDate(var Param1: WideString);
    function Get_Ticket: WideString;
    procedure Set_Ticket(var Param1: WideString);
    function Get_TransNum: WideString;
    procedure Set_TransNum(var Param1: WideString);
    function Get_TItem: WideString;
    procedure Set_TItem(var Param1: WideString);
    function Get_TBATCH: WideString;
    procedure Set_TBATCH(var Param1: WideString);
    function Get_TI: WideString;
    procedure Set_TI(var Param1: WideString);
    function Get_TICODE: WideString;
    procedure Set_TICODE(var Param1: WideString);
    function Get_IND: WideString;
    procedure Set_IND(var Param1: WideString);
    function Get_MSI: WideString;
    procedure Set_MSI(var Param1: WideString);
    function Get_Ret: WideString;
    procedure Set_Ret(var Param1: WideString);
    function Get_PEM: WideString;
    procedure Set_PEM(var Param1: WideString);
    function Get_TIM: WideString;
    procedure Set_TIM(var Param1: WideString);
    function Get_ACI: WideString;
    procedure Set_ACI(var Param1: WideString);
    function Get_RespCode: WideString;
    procedure Set_RespCode(var Param1: WideString);
    function Get_RRec: WideString;
    procedure Set_RRec(var Param1: WideString);
    function Get_CCType: WideString;
    procedure Set_CCType(var Param1: WideString);
    function Get_CVV2Response: WideString;
    procedure Set_CVV2Response(var Param1: WideString);
    function Get_PurchaseCard: WideString;
    procedure Set_PurchaseCard(var Param1: WideString);
    procedure Set_RespType(var Param1: RespFileType);
    function Get_RespType: RespFileType;
    function Get_Error: RespError;
    procedure Set_FileName(var Param1: WideString);
    function Get_FileName: WideString;
    procedure Set_InpType(var Param1: RespFileType);
    function Get_InpType: RespFileType;
    procedure Set_XDRFile(var Param1: WideString);
    function Get_XDRFile: WideString;
    procedure Set_TroutD(var Param1: WideString);
    function Get_TroutD: WideString;
    procedure Set_UserName(var Param1: WideString);
    function Get_UserName: WideString;
    procedure Set_Auth_Src_Code(var Param1: WideString);
    function Get_Auth_Src_Code: WideString;
    procedure Set_SaleCount(var Param1: WideString);
    function Get_SaleCount: WideString;
    procedure Set_SaleTotalAmount(var Param1: WideString);
    function Get_SaleTotalAmount: WideString;
    procedure Set_ActivationCount(var Param1: WideString);
    function Get_ActivationCount: WideString;
    procedure Set_ActivationTotalAmount(var Param1: WideString);
    function Get_ActivationTotalAmount: WideString;
    procedure Set_CreditCount(var Param1: WideString);
    function Get_CreditCount: WideString;
    procedure Set_CreditTotalAmount(var Param1: WideString);
    function Get_CreditTotalAmount: WideString;
    procedure Set_VoidCount(var Param1: WideString);
    function Get_VoidCount: WideString;
    procedure Set_VoidTotalAmount(var Param1: WideString);
    function Get_VoidTotalAmount: WideString;
    procedure Set_AddValueCount(var Param1: WideString);
    function Get_AddValueCount: WideString;
    procedure Set_AddValueTotalAmount(var Param1: WideString);
    function Get_AddValueTotalAmount: WideString;
    procedure Set_TipCount(var Param1: WideString);
    function Get_TipCount: WideString;
    procedure Set_TipTotalAmount(var Param1: WideString);
    function Get_TipTotalAmount: WideString;
    procedure Set_BalanceTransferCount(var Param1: WideString);
    function Get_BalanceTransferCount: WideString;
    procedure Set_BalanceTransferTotalAmount(var Param1: WideString);
    function Get_BalanceTransferTotalAmount: WideString;
    procedure Set_PointsCount(var Param1: WideString);
    function Get_PointsCount: WideString;
    procedure Set_PointsTotalAmount(var Param1: WideString);
    function Get_PointsTotalAmount: WideString;
    procedure Set_AddPointsCount(var Param1: WideString);
    function Get_AddPointsCount: WideString;
    procedure Set_AddPointsTotalAmount(var Param1: WideString);
    function Get_AddPointsTotalAmount: WideString;
    procedure Set_MiscMessage(var Param1: WideString);
    function Get_MiscMessage: WideString;
    procedure Set_TransDateTime(var Param1: WideString);
    function Get_TransDateTime: WideString;
    procedure Set_GiftCardBalance(var Param1: WideString);
    function Get_GiftCardBalance: WideString;
    procedure Set_ImageStatus(var Param1: WideString);
    function Get_ImageStatus: WideString;
    procedure Set_EBTFoodBalance(var Param1: WideString);
    function Get_EBTFoodBalance: WideString;
    procedure Set_EBTCashBalance(var Param1: WideString);
    function Get_EBTCashBalance: WideString;
    procedure Set_CustomerFirstName(var Param1: WideString);
    function Get_CustomerFirstName: WideString;
    procedure Set_CustomerMInit(var Param1: WideString);
    function Get_CustomerMInit: WideString;
    procedure Set_CustomerLastName(var Param1: WideString);
    function Get_CustomerLastName: WideString;
    procedure Set_CustomerHouseNum(var Param1: WideString);
    function Get_CustomerHouseNum: WideString;
    procedure Set_CustomerAddress(var Param1: WideString);
    function Get_CustomerAddress: WideString;
    procedure Set_CustomerAppNum(var Param1: WideString);
    function Get_CustomerAppNum: WideString;
    procedure Set_CustomerCity(var Param1: WideString);
    function Get_CustomerCity: WideString;
    procedure Set_State(var Param1: WideString);
    function Get_State: WideString;
    procedure Set_ZipCode(var Param1: WideString);
    function Get_ZipCode: WideString;
    procedure Set_AcctNum(var Param1: WideString);
    function Get_AcctNum: WideString;
    procedure Set_ReturnCode(var Param1: WideString);
    function Get_ReturnCode: WideString;
    procedure Set_CreditLimit(var Param1: WideString);
    function Get_CreditLimit: WideString;
    procedure Set_Phone_Number(var Param1: WideString);
    function Get_Phone_Number: WideString;
    procedure Set_MaxAuthAmount(var Param1: WideString);
    function Get_MaxAuthAmount: WideString;
    procedure Set_RestrictCode(var Param1: WideString);
    function Get_RestrictCode: WideString;
    procedure Set_AddText1(var Param1: WideString);
    function Get_AddText1: WideString;
    procedure Set_AddText2(var Param1: WideString);
    function Get_AddText2: WideString;
    procedure Set_AddText3(var Param1: WideString);
    function Get_AddText3: WideString;
    procedure Set_AddText4(var Param1: WideString);
    function Get_AddText4: WideString;
    procedure Set_GiftPin(var Param1: WideString);
    function Get_GiftPin: WideString;
    procedure Set_RecordCount(var Param1: WideString);
    function Get_RecordCount: WideString;
    procedure Set_TransRecord(var Param1: WideString);
    function Get_TransRecord: WideString;
    procedure Set_ReturnCheckFee(var Param1: WideString);
    function Get_ReturnCheckFee: WideString;
    procedure Set_ReturnCheckNote(var Param1: WideString);
    function Get_ReturnCheckNote: WideString;
    procedure Set_PS2000Data(var Param1: WideString);
    function Get_PS2000Data: WideString;
    procedure Set_PointsBalance(var Param1: WideString);
    function Get_PointsBalance: WideString;
    procedure Set_PreAuthCount(var Param1: WideString);
    function Get_PreAuthCount: WideString;
    procedure Set_PreAuthAmount(var Param1: WideString);
    function Get_PreAuthAmount: WideString;
    procedure Set_PostAuthCount(var Param1: WideString);
    function Get_PostAuthCount: WideString;
    procedure Set_PostAuthAmount(var Param1: WideString);
    function Get_PostAuthAmount: WideString;
    procedure Set_IssuanceCount(var Param1: WideString);
    function Get_IssuanceCount: WideString;
    procedure Set_IssuanceTotalAmount(var Param1: WideString);
    function Get_IssuanceTotalAmount: WideString;
    procedure Set_DeactivateCount(var Param1: WideString);
    function Get_DeactivateCount: WideString;
    procedure Set_DeactivateTotalAmount(var Param1: WideString);
    function Get_DeactivateTotalAmount: WideString;
    procedure Set_BalanceMergeCount(var Param1: WideString);
    function Get_BalanceMergeCount: WideString;
    procedure Set_BalanceMergeTotalAmount(var Param1: WideString);
    function Get_BalanceMergeTotalAmount: WideString;
    procedure Set_BalanceAdjustCount(var Param1: WideString);
    function Get_BalanceAdjustCount: WideString;
    procedure Set_BalanceAdjustTotalAmount(var Param1: WideString);
    function Get_BalanceAdjustTotalAmount: WideString;
    procedure Set_ReportLostStolenCount(var Param1: WideString);
    function Get_ReportLostStolenCount: WideString;
    procedure Set_ReportLostStolenTotalAmount(var Param1: WideString);
    function Get_ReportLostStolenTotalAmount: WideString;
    procedure Set_CashoutCount(var Param1: WideString);
    function Get_CashoutCount: WideString;
    procedure Set_CashoutTotalAmount(var Param1: WideString);
    function Get_CashoutTotalAmount: WideString;
    procedure Set_ReactivateCount(var Param1: WideString);
    function Get_ReactivateCount: WideString;
    procedure Set_ReactivateTotalAmount(var Param1: WideString);
    function Get_ReactivateTotalAmount: WideString;
    procedure Set_CCAvailBalance(var Param1: WideString);
    function Get_CCAvailBalance: WideString;
    procedure Set_TraceNumber(var Param1: WideString);
    function Get_TraceNumber: WideString;
    procedure Set_TransactionReferenceNumber(var Param1: WideString);
    function Get_TransactionReferenceNumber: WideString;
    procedure Set_DCAvailBalance(var Param1: WideString);
    function Get_DCAvailBalance: WideString;
    procedure Set_SurchargeAmount(var Param1: WideString);
    function Get_SurchargeAmount: WideString;
    procedure Set_Receipt(var Param1: WideString);
    function Get_Receipt: WideString;
    procedure Set_TID(var Param1: WideString);
    function Get_TID: WideString;
    procedure Set_Processor(var Param1: WideString);
    function Get_Processor: WideString;
  public
    property DefaultInterface: _PccResponse read GetDefaultInterface;
  published
    property BatchNumber: WideString read Get_BatchNumber write Set_BatchNumber;
    property AuthDate: WideString read Get_AuthDate write Set_AuthDate;
    property CashBack: WideString read Get_CashBack write Set_CashBack;
    property AmountDue: WideString read Get_AmountDue write Set_AmountDue;
    property AuthAmount: WideString read Get_AuthAmount write Set_AuthAmount;
    property TransTime: WideString read Get_TransTime write Set_TransTime;
    property TotTransTime: WideString read Get_TotTransTime write Set_TotTransTime;
    property ConfigSize: WideString read Get_ConfigSize write Set_ConfigSize;
    property CurrSize: WideString read Get_CurrSize write Set_CurrSize;
    property AuxRespCode: WideString read Get_AuxRespCode write Set_AuxRespCode;
    property VoidBalance: WideString read Get_VoidBalance write Set_VoidBalance;
    property eCommIndicator: WideString read Get_eCommIndicator write Set_eCommIndicator;
    property CardholderId: WideString read Get_CardholderId write Set_CardholderId;
    property AccountDataSrc: WideString read Get_AccountDataSrc write Set_AccountDataSrc;
    property GratuityAmntEst: WideString read Get_GratuityAmntEst write Set_GratuityAmntEst;
    property GratuityAmnt: WideString read Get_GratuityAmnt write Set_GratuityAmnt;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property Result: WideString read Get_Result write Set_Result;
    property ResultCode: WideString read Get_ResultCode write Set_ResultCode;
    property CmrclCardFlag: WideString read Get_CmrclCardFlag write Set_CmrclCardFlag;
    property NetID: WideString read Get_NetID write Set_NetID;
    property Auth: WideString read Get_Auth write Set_Auth;
    property Reference: WideString read Get_Reference write Set_Reference;
    property ADDRESVER: WideString read Get_ADDRESVER write Set_ADDRESVER;
    property TDate: WideString read Get_TDate write Set_TDate;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property TransNum: WideString read Get_TransNum write Set_TransNum;
    property TItem: WideString read Get_TItem write Set_TItem;
    property TBATCH: WideString read Get_TBATCH write Set_TBATCH;
    property TI: WideString read Get_TI write Set_TI;
    property TICODE: WideString read Get_TICODE write Set_TICODE;
    property IND: WideString read Get_IND write Set_IND;
    property MSI: WideString read Get_MSI write Set_MSI;
    property Ret: WideString read Get_Ret write Set_Ret;
    property PEM: WideString read Get_PEM write Set_PEM;
    property TIM: WideString read Get_TIM write Set_TIM;
    property ACI: WideString read Get_ACI write Set_ACI;
    property RespCode: WideString read Get_RespCode write Set_RespCode;
    property RRec: WideString read Get_RRec write Set_RRec;
    property CCType: WideString read Get_CCType write Set_CCType;
    property CVV2Response: WideString read Get_CVV2Response write Set_CVV2Response;
    property PurchaseCard: WideString read Get_PurchaseCard write Set_PurchaseCard;
    property RespType: RespFileType read Get_RespType write Set_RespType;
    property FileName: WideString read Get_FileName write Set_FileName;
    property InpType: RespFileType read Get_InpType write Set_InpType;
    property XDRFile: WideString read Get_XDRFile write Set_XDRFile;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property UserName: WideString read Get_UserName write Set_UserName;
    property Auth_Src_Code: WideString read Get_Auth_Src_Code write Set_Auth_Src_Code;
    property SaleCount: WideString read Get_SaleCount write Set_SaleCount;
    property SaleTotalAmount: WideString read Get_SaleTotalAmount write Set_SaleTotalAmount;
    property ActivationCount: WideString read Get_ActivationCount write Set_ActivationCount;
    property ActivationTotalAmount: WideString read Get_ActivationTotalAmount write Set_ActivationTotalAmount;
    property CreditCount: WideString read Get_CreditCount write Set_CreditCount;
    property CreditTotalAmount: WideString read Get_CreditTotalAmount write Set_CreditTotalAmount;
    property VoidCount: WideString read Get_VoidCount write Set_VoidCount;
    property VoidTotalAmount: WideString read Get_VoidTotalAmount write Set_VoidTotalAmount;
    property AddValueCount: WideString read Get_AddValueCount write Set_AddValueCount;
    property AddValueTotalAmount: WideString read Get_AddValueTotalAmount write Set_AddValueTotalAmount;
    property TipCount: WideString read Get_TipCount write Set_TipCount;
    property TipTotalAmount: WideString read Get_TipTotalAmount write Set_TipTotalAmount;
    property BalanceTransferCount: WideString read Get_BalanceTransferCount write Set_BalanceTransferCount;
    property BalanceTransferTotalAmount: WideString read Get_BalanceTransferTotalAmount write Set_BalanceTransferTotalAmount;
    property PointsCount: WideString read Get_PointsCount write Set_PointsCount;
    property PointsTotalAmount: WideString read Get_PointsTotalAmount write Set_PointsTotalAmount;
    property AddPointsCount: WideString read Get_AddPointsCount write Set_AddPointsCount;
    property AddPointsTotalAmount: WideString read Get_AddPointsTotalAmount write Set_AddPointsTotalAmount;
    property MiscMessage: WideString read Get_MiscMessage write Set_MiscMessage;
    property TransDateTime: WideString read Get_TransDateTime write Set_TransDateTime;
    property GiftCardBalance: WideString read Get_GiftCardBalance write Set_GiftCardBalance;
    property ImageStatus: WideString read Get_ImageStatus write Set_ImageStatus;
    property EBTFoodBalance: WideString read Get_EBTFoodBalance write Set_EBTFoodBalance;
    property EBTCashBalance: WideString read Get_EBTCashBalance write Set_EBTCashBalance;
    property CustomerFirstName: WideString read Get_CustomerFirstName write Set_CustomerFirstName;
    property CustomerMInit: WideString read Get_CustomerMInit write Set_CustomerMInit;
    property CustomerLastName: WideString read Get_CustomerLastName write Set_CustomerLastName;
    property CustomerHouseNum: WideString read Get_CustomerHouseNum write Set_CustomerHouseNum;
    property CustomerAddress: WideString read Get_CustomerAddress write Set_CustomerAddress;
    property CustomerAppNum: WideString read Get_CustomerAppNum write Set_CustomerAppNum;
    property CustomerCity: WideString read Get_CustomerCity write Set_CustomerCity;
    property State: WideString read Get_State write Set_State;
    property ZipCode: WideString read Get_ZipCode write Set_ZipCode;
    property AcctNum: WideString read Get_AcctNum write Set_AcctNum;
    property ReturnCode: WideString read Get_ReturnCode write Set_ReturnCode;
    property CreditLimit: WideString read Get_CreditLimit write Set_CreditLimit;
    property Phone_Number: WideString read Get_Phone_Number write Set_Phone_Number;
    property MaxAuthAmount: WideString read Get_MaxAuthAmount write Set_MaxAuthAmount;
    property RestrictCode: WideString read Get_RestrictCode write Set_RestrictCode;
    property AddText1: WideString read Get_AddText1 write Set_AddText1;
    property AddText2: WideString read Get_AddText2 write Set_AddText2;
    property AddText3: WideString read Get_AddText3 write Set_AddText3;
    property AddText4: WideString read Get_AddText4 write Set_AddText4;
    property GiftPin: WideString read Get_GiftPin write Set_GiftPin;
    property RecordCount: WideString read Get_RecordCount write Set_RecordCount;
    property TransRecord: WideString read Get_TransRecord write Set_TransRecord;
    property ReturnCheckFee: WideString read Get_ReturnCheckFee write Set_ReturnCheckFee;
    property ReturnCheckNote: WideString read Get_ReturnCheckNote write Set_ReturnCheckNote;
    property PS2000Data: WideString read Get_PS2000Data write Set_PS2000Data;
    property PointsBalance: WideString read Get_PointsBalance write Set_PointsBalance;
    property PreAuthCount: WideString read Get_PreAuthCount write Set_PreAuthCount;
    property PreAuthAmount: WideString read Get_PreAuthAmount write Set_PreAuthAmount;
    property PostAuthCount: WideString read Get_PostAuthCount write Set_PostAuthCount;
    property PostAuthAmount: WideString read Get_PostAuthAmount write Set_PostAuthAmount;
    property IssuanceCount: WideString read Get_IssuanceCount write Set_IssuanceCount;
    property IssuanceTotalAmount: WideString read Get_IssuanceTotalAmount write Set_IssuanceTotalAmount;
    property DeactivateCount: WideString read Get_DeactivateCount write Set_DeactivateCount;
    property DeactivateTotalAmount: WideString read Get_DeactivateTotalAmount write Set_DeactivateTotalAmount;
    property BalanceMergeCount: WideString read Get_BalanceMergeCount write Set_BalanceMergeCount;
    property BalanceMergeTotalAmount: WideString read Get_BalanceMergeTotalAmount write Set_BalanceMergeTotalAmount;
    property BalanceAdjustCount: WideString read Get_BalanceAdjustCount write Set_BalanceAdjustCount;
    property BalanceAdjustTotalAmount: WideString read Get_BalanceAdjustTotalAmount write Set_BalanceAdjustTotalAmount;
    property ReportLostStolenCount: WideString read Get_ReportLostStolenCount write Set_ReportLostStolenCount;
    property ReportLostStolenTotalAmount: WideString read Get_ReportLostStolenTotalAmount write Set_ReportLostStolenTotalAmount;
    property CashoutCount: WideString read Get_CashoutCount write Set_CashoutCount;
    property CashoutTotalAmount: WideString read Get_CashoutTotalAmount write Set_CashoutTotalAmount;
    property ReactivateCount: WideString read Get_ReactivateCount write Set_ReactivateCount;
    property ReactivateTotalAmount: WideString read Get_ReactivateTotalAmount write Set_ReactivateTotalAmount;
    property CCAvailBalance: WideString read Get_CCAvailBalance write Set_CCAvailBalance;
    property TraceNumber: WideString read Get_TraceNumber write Set_TraceNumber;
    property TransactionReferenceNumber: WideString read Get_TransactionReferenceNumber write Set_TransactionReferenceNumber;
    property DCAvailBalance: WideString read Get_DCAvailBalance write Set_DCAvailBalance;
    property SurchargeAmount: WideString read Get_SurchargeAmount write Set_SurchargeAmount;
    property Receipt: WideString read Get_Receipt write Set_Receipt;
    property TID: WideString read Get_TID write Set_TID;
    property Processor: WideString read Get_Processor write Set_Processor;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAuthReport provides a Create and CreateRemote method to          
// create instances of the default interface _AuthReport exposed by              
// the CoClass AuthReport. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAuthReport = class
    class function Create: _AuthReport;
    class function CreateRemote(const MachineName: string): _AuthReport;
  end;

  TAuthReportKeyDown = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TAuthReportKeyPress = procedure(ASender: TObject; var KeyAscii: Smallint) of object;
  TAuthReportKeyUp = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TAuthReportMouseDown = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                     var X: Single; var Y: Single) of object;
  TAuthReportMouseMove = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                     var X: Single; var Y: Single) of object;
  TAuthReportMouseUp = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                   var X: Single; var Y: Single) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAuthReport
// Help String      : 
// Default Interface: _AuthReport
// Def. Intf. DISP? : No
// Event   Interface: __AuthReport
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAuthReportProperties= class;
{$ENDIF}
  TAuthReport = class(TOleServer)
  private
    FOnResize: TNotifyEvent;
    FOnClick: TNotifyEvent;
    FOnDblClick: TNotifyEvent;
    FOnKeyDown: TAuthReportKeyDown;
    FOnKeyPress: TAuthReportKeyPress;
    FOnKeyUp: TAuthReportKeyUp;
    FOnMouseDown: TAuthReportMouseDown;
    FOnMouseMove: TAuthReportMouseMove;
    FOnMouseUp: TAuthReportMouseUp;
    FIntf:        _AuthReport;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAuthReportProperties;
    function      GetServerProperties: TAuthReportProperties;
{$ENDIF}
    function      GetDefaultInterface: _AuthReport;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Processor: WideString;
    procedure Set_Processor(const Param1: WideString);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_Path: WideString;
    procedure Set_Path(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _AuthReport);
    procedure Disconnect; override;
    function GetIndex: Integer;
    function GetReportCount: Smallint;
    function GetReportRecord(var Record_: Smallint): Smallint;
    function GetReportCard: WideString;
    function GetReportItem: WideString;
    function GetReportIssuer: WideString;
    function GetReportExpDate: WideString;
    function GetReportTransType: WideString;
    function GetReportAmount: WideString;
    function GetReportTransNumber: WideString;
    function GetReportAppCode: WideString;
    property DefaultInterface: _AuthReport read GetDefaultInterface;
    property Processor: WideString read Get_Processor write Set_Processor;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAuthReportProperties read GetServerProperties;
{$ENDIF}
    property OnResize: TNotifyEvent read FOnResize write FOnResize;
    property OnClick: TNotifyEvent read FOnClick write FOnClick;
    property OnDblClick: TNotifyEvent read FOnDblClick write FOnDblClick;
    property OnKeyDown: TAuthReportKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyPress: TAuthReportKeyPress read FOnKeyPress write FOnKeyPress;
    property OnKeyUp: TAuthReportKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseDown: TAuthReportMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TAuthReportMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TAuthReportMouseUp read FOnMouseUp write FOnMouseUp;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAuthReport
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAuthReportProperties = class(TPersistent)
  private
    FServer:    TAuthReport;
    function    GetDefaultInterface: _AuthReport;
    constructor Create(AServer: TAuthReport);
  protected
    function Get_Processor: WideString;
    procedure Set_Processor(const Param1: WideString);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_Path: WideString;
    procedure Set_Path(const Param1: WideString);
  public
    property DefaultInterface: _AuthReport read GetDefaultInterface;
  published
    property Processor: WideString read Get_Processor write Set_Processor;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoOffLine provides a Create and CreateRemote method to          
// create instances of the default interface _OffLine exposed by              
// the CoClass OffLine. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOffLine = class
    class function Create: _OffLine;
    class function CreateRemote(const MachineName: string): _OffLine;
  end;

  TOffLineKeyDown = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TOffLineKeyPress = procedure(ASender: TObject; var KeyAscii: Smallint) of object;
  TOffLineKeyUp = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TOffLineMouseDown = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                  var X: Single; var Y: Single) of object;
  TOffLineMouseMove = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                  var X: Single; var Y: Single) of object;
  TOffLineMouseUp = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                var X: Single; var Y: Single) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TOffLine
// Help String      : 
// Default Interface: _OffLine
// Def. Intf. DISP? : No
// Event   Interface: __OffLine
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TOffLineProperties= class;
{$ENDIF}
  TOffLine = class(TOleServer)
  private
    FOnResize: TNotifyEvent;
    FOnClick: TNotifyEvent;
    FOnDblClick: TNotifyEvent;
    FOnKeyDown: TOffLineKeyDown;
    FOnKeyPress: TOffLineKeyPress;
    FOnKeyUp: TOffLineKeyUp;
    FOnMouseDown: TOffLineMouseDown;
    FOnMouseMove: TOffLineMouseMove;
    FOnMouseUp: TOffLineMouseUp;
    FIntf:        _OffLine;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TOffLineProperties;
    function      GetServerProperties: TOffLineProperties;
{$ENDIF}
    function      GetDefaultInterface: _OffLine;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_User: WideString;
    function Get_GetVoid(var Record_: OleVariant; var BCHFile: WideString): WordBool;
    function Get_GetInProcessRecord: Integer;
    procedure Set_User(const Param1: WideString);
    function Get_Processor: WideString;
    procedure Set_Processor(const Param1: WideString);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_Path: WideString;
    function Get_PccwPath: WideString;
    procedure Set_Path(const Param1: WideString);
    procedure Set_Void(Param1: WordBool);
    procedure Set_PccwPath(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _OffLine);
    procedure Disconnect; override;
    function Connect1(var CallBack: IDispatch): WordBool;
    function Disconnect1: WordBool;
    function ProcessFile(var BCHFile: WideString): WordBool;
    function GetErrorCode: Integer;
    function GetErrorDesc: WideString;
    function GetTotals(var BCHFile: WideString): WordBool;
    function GetCard: WideString;
    function GetItem: WideString;
    function GetCount: Integer;
    function GetRecords: Integer;
    function GetBalance: Currency;
    function GetExpDate: WideString;
    function GetTransType: WideString;
    function GetAmount: WideString;
    function GetTicket: WideString;
    function GetAppCode: WideString;
    function GetIndex: Integer;
    function GetBchFile: WideString;
    function GetRecord(var Record_: OleVariant; var BCHFile: WideString): WordBool;
    function UpdateRecord(var Record_: OleVariant; var BCHFile: WideString): WordBool;
    function EraseFile(var BCHFile: WideString): WordBool;
    function Compact(var BCHFile: WideString): WordBool;
    property DefaultInterface: _OffLine read GetDefaultInterface;
    property GetVoid[var Record_: OleVariant; var BCHFile: WideString]: WordBool read Get_GetVoid;
    property GetInProcessRecord: Integer read Get_GetInProcessRecord;
    property Void: WordBool write Set_Void;
    property User: WideString read Get_User write Set_User;
    property Processor: WideString read Get_Processor write Set_Processor;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
    property PccwPath: WideString read Get_PccwPath write Set_PccwPath;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TOffLineProperties read GetServerProperties;
{$ENDIF}
    property OnResize: TNotifyEvent read FOnResize write FOnResize;
    property OnClick: TNotifyEvent read FOnClick write FOnClick;
    property OnDblClick: TNotifyEvent read FOnDblClick write FOnDblClick;
    property OnKeyDown: TOffLineKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyPress: TOffLineKeyPress read FOnKeyPress write FOnKeyPress;
    property OnKeyUp: TOffLineKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseDown: TOffLineMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TOffLineMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TOffLineMouseUp read FOnMouseUp write FOnMouseUp;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TOffLine
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TOffLineProperties = class(TPersistent)
  private
    FServer:    TOffLine;
    function    GetDefaultInterface: _OffLine;
    constructor Create(AServer: TOffLine);
  protected
    function Get_User: WideString;
    function Get_GetVoid(var Record_: OleVariant; var BCHFile: WideString): WordBool;
    function Get_GetInProcessRecord: Integer;
    procedure Set_User(const Param1: WideString);
    function Get_Processor: WideString;
    procedure Set_Processor(const Param1: WideString);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_Path: WideString;
    function Get_PccwPath: WideString;
    procedure Set_Path(const Param1: WideString);
    procedure Set_Void(Param1: WordBool);
    procedure Set_PccwPath(const Param1: WideString);
  public
    property DefaultInterface: _OffLine read GetDefaultInterface;
  published
    property User: WideString read Get_User write Set_User;
    property Processor: WideString read Get_Processor write Set_Processor;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
    property PccwPath: WideString read Get_PccwPath write Set_PccwPath;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCheck provides a Create and CreateRemote method to          
// create instances of the default interface _Check exposed by              
// the CoClass Check. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCheck = class
    class function Create: _Check;
    class function CreateRemote(const MachineName: string): _Check;
  end;

  TCheckKeyDown = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TCheckKeyPress = procedure(ASender: TObject; var KeyAscii: Smallint) of object;
  TCheckKeyUp = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TCheckMouseDown = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                var X: Single; var Y: Single) of object;
  TCheckMouseMove = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                var X: Single; var Y: Single) of object;
  TCheckMouseUp = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                              var X: Single; var Y: Single) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCheck
// Help String      : 
// Default Interface: _Check
// Def. Intf. DISP? : No
// Event   Interface: __Check
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCheckProperties= class;
{$ENDIF}
  TCheck = class(TOleServer)
  private
    FOnResize: TNotifyEvent;
    FOnClick: TNotifyEvent;
    FOnDblClick: TNotifyEvent;
    FOnKeyDown: TCheckKeyDown;
    FOnKeyPress: TCheckKeyPress;
    FOnKeyUp: TCheckKeyUp;
    FOnMouseDown: TCheckMouseDown;
    FOnMouseMove: TCheckMouseMove;
    FOnMouseUp: TCheckMouseUp;
    FIntf:        _Check;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCheckProperties;
    function      GetServerProperties: TCheckProperties;
{$ENDIF}
    function      GetDefaultInterface: _Check;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_BackColor: Integer;
    procedure Set_BackColor(Param1: Integer);
    function Get_ForeColor: Integer;
    procedure Set_ForeColor(Param1: Integer);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(Param1: WordBool);
    function Get_Font: IFontDisp;
    procedure _Set_Font(const Param1: IFontDisp);
    function Get_BackStyle: Smallint;
    procedure Set_BackStyle(Param1: Smallint);
    function Get_BorderStyle: Smallint;
    procedure Set_BorderStyle(Param1: Smallint);
    procedure Set_Services(Param1: ServicesType);
    function Get_Services: ServicesType;
    function Get_Action: WideString;
    procedure Set_Action(const Param1: WideString);
    function Get_Processor: WideString;
    procedure Set_Processor(const Param1: WideString);
    function Get_CheckReaderCode: CheckReaderCode;
    procedure Set_CheckReaderCode(Param1: CheckReaderCode);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_Drivers_License: WideString;
    procedure Set_Drivers_License(const Param1: WideString);
    function Get_Phone_Number: WideString;
    procedure Set_Phone_Number(const Param1: WideString);
    function Get_Account_Number: WideString;
    procedure Set_Account_Number(const Param1: WideString);
    function Get_Manual: WideString;
    procedure Set_Manual(const Param1: WideString);
    function Get_AdjustmentAmount: WideString;
    procedure Set_AdjustmentAmount(const Param1: WideString);
    function Get_Amount: WideString;
    procedure Set_Amount(const Param1: WideString);
    function Get_Transit_Number: WideString;
    procedure Set_Transit_Number(const Param1: WideString);
    function Get_State: WideString;
    procedure Set_State(const Param1: WideString);
    function Get_Ticket: WideString;
    procedure Set_Ticket(const Param1: WideString);
    function Get_Multi: WideString;
    procedure Set_Multi(const Param1: WideString);
    function Get_User: WideString;
    procedure Set_User(const Param1: WideString);
    function Get_Path: WideString;
    procedure Set_Path(const Param1: WideString);
    function Get_TimeOut: Integer;
    procedure Set_TimeOut(Param1: Integer);
    function Get_Check_Number: WideString;
    procedure Set_Check_Number(const Param1: WideString);
    function Get_Birth_Date: WideString;
    procedure Set_Birth_Date(const Param1: WideString);
    procedure Set_Cash_Back(const Param1: WideString);
    function Get_Cash_Back: WideString;
    procedure Set_Manager_Card(const Param1: WideString);
    function Get_Manager_Card: WideString;
    function Get_Zip_Code: WideString;
    procedure Set_Zip_Code(const Param1: WideString);
    function Get_OutDelay: Single;
    procedure Set_OutDelay(Param1: Single);
    procedure Set_PrintReceipts(const Param1: WideString);
    function Get_PrintReceipts: WideString;
    function Get_XMLTrans: WordBool;
    procedure Set_XMLTrans(Param1: WordBool);
    function Get_TroutD: WideString;
    procedure Set_TroutD(const Param1: WideString);
    function Get_MICR_DATA: WideString;
    procedure Set_MICR_DATA(const Param1: WideString);
    procedure Set_IPAddress(const Param1: WideString);
    function Get_IPAddress: WideString;
    procedure Set_Port(Param1: Smallint);
    function Get_Port: Smallint;
    procedure Set_EnableSSL(Param1: WordBool);
    function Get_EnableSSL: WordBool;
    function Get_CommMethod: CommMethod;
    procedure Set_CommMethod(Param1: CommMethod);
    procedure Set_CheckType(const Param1: WideString);
    function Get_CheckType: WideString;
    procedure Set_CheckAccType(const Param1: WideString);
    function Get_CheckAccType: WideString;
    procedure Set_MICRStatus(const Param1: WideString);
    function Get_MICRStatus: WideString;
    procedure Set_CustomerName(const Param1: WideString);
    function Get_CustomerName: WideString;
    procedure Set_CustomerFirstName(const Param1: WideString);
    function Get_CustomerFirstName: WideString;
    procedure Set_CustomerLastName(const Param1: WideString);
    function Get_CustomerLastName: WideString;
    procedure Set_CustomerStreet(const Param1: WideString);
    function Get_CustomerStreet: WideString;
    procedure Set_CustomerCity(const Param1: WideString);
    function Get_CustomerCity: WideString;
    procedure Set_IDType(const Param1: WideString);
    function Get_IDType: WideString;
    procedure Set_IDCountry(const Param1: WideString);
    function Get_IDCountry: WideString;
    procedure Set_DLTrackII(const Param1: WideString);
    function Get_DLTrackII: WideString;
    function Get_ManagerNum: WideString;
    procedure Set_ManagerNum(const Param1: WideString);
    function Get_CashierNum: WideString;
    procedure Set_CashierNum(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Check);
    procedure Disconnect; override;
    procedure Refresh;
    function GetTroutD: WideString;
    function GetRespCode: WideString;
    function GetResult: WideString;
    function GetReference: WideString;
    function GetApproved: WordBool;
    function GetCaptured: WordBool;
    function GetAuth: WideString;
    function GetTraceID: WideString;
    function GetImageStatus: WideString;
    function GetResultCode: WideString;
    function GetTransNum: WideString;
    function GetReturnCheckNote: WideString;
    function GetReturnCheckFee: WideString;
    function GetErrorCode: Integer;
    function GetErrorDesc: WideString;
    function GetXMLRequest: WideString;
    function GetXMLResponse: WideString;
    function VerifyAmount: WordBool;
    function Send(var FileType: FileType): OleVariant;
    function Cancel: OleVariant;
    function DeleteUserFiles: OleVariant;
    procedure Clear;
    function PccSysExists: WordBool;
    property DefaultInterface: _Check read GetDefaultInterface;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Font: IFontDisp read Get_Font write _Set_Font;
    property BackStyle: Smallint read Get_BackStyle write Set_BackStyle;
    property BorderStyle: Smallint read Get_BorderStyle write Set_BorderStyle;
    property Services: ServicesType read Get_Services write Set_Services;
    property Action: WideString read Get_Action write Set_Action;
    property Processor: WideString read Get_Processor write Set_Processor;
    property CheckReaderCode: CheckReaderCode read Get_CheckReaderCode write Set_CheckReaderCode;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Drivers_License: WideString read Get_Drivers_License write Set_Drivers_License;
    property Phone_Number: WideString read Get_Phone_Number write Set_Phone_Number;
    property Account_Number: WideString read Get_Account_Number write Set_Account_Number;
    property Manual: WideString read Get_Manual write Set_Manual;
    property AdjustmentAmount: WideString read Get_AdjustmentAmount write Set_AdjustmentAmount;
    property Amount: WideString read Get_Amount write Set_Amount;
    property Transit_Number: WideString read Get_Transit_Number write Set_Transit_Number;
    property State: WideString read Get_State write Set_State;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property Multi: WideString read Get_Multi write Set_Multi;
    property User: WideString read Get_User write Set_User;
    property Path: WideString read Get_Path write Set_Path;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property Check_Number: WideString read Get_Check_Number write Set_Check_Number;
    property Birth_Date: WideString read Get_Birth_Date write Set_Birth_Date;
    property Cash_Back: WideString read Get_Cash_Back write Set_Cash_Back;
    property Manager_Card: WideString read Get_Manager_Card write Set_Manager_Card;
    property Zip_Code: WideString read Get_Zip_Code write Set_Zip_Code;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property XMLTrans: WordBool read Get_XMLTrans write Set_XMLTrans;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property MICR_DATA: WideString read Get_MICR_DATA write Set_MICR_DATA;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property CheckType: WideString read Get_CheckType write Set_CheckType;
    property CheckAccType: WideString read Get_CheckAccType write Set_CheckAccType;
    property MICRStatus: WideString read Get_MICRStatus write Set_MICRStatus;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property CustomerFirstName: WideString read Get_CustomerFirstName write Set_CustomerFirstName;
    property CustomerLastName: WideString read Get_CustomerLastName write Set_CustomerLastName;
    property CustomerStreet: WideString read Get_CustomerStreet write Set_CustomerStreet;
    property CustomerCity: WideString read Get_CustomerCity write Set_CustomerCity;
    property IDType: WideString read Get_IDType write Set_IDType;
    property IDCountry: WideString read Get_IDCountry write Set_IDCountry;
    property DLTrackII: WideString read Get_DLTrackII write Set_DLTrackII;
    property ManagerNum: WideString read Get_ManagerNum write Set_ManagerNum;
    property CashierNum: WideString read Get_CashierNum write Set_CashierNum;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCheckProperties read GetServerProperties;
{$ENDIF}
    property OnResize: TNotifyEvent read FOnResize write FOnResize;
    property OnClick: TNotifyEvent read FOnClick write FOnClick;
    property OnDblClick: TNotifyEvent read FOnDblClick write FOnDblClick;
    property OnKeyDown: TCheckKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyPress: TCheckKeyPress read FOnKeyPress write FOnKeyPress;
    property OnKeyUp: TCheckKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseDown: TCheckMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TCheckMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TCheckMouseUp read FOnMouseUp write FOnMouseUp;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCheck
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCheckProperties = class(TPersistent)
  private
    FServer:    TCheck;
    function    GetDefaultInterface: _Check;
    constructor Create(AServer: TCheck);
  protected
    function Get_BackColor: Integer;
    procedure Set_BackColor(Param1: Integer);
    function Get_ForeColor: Integer;
    procedure Set_ForeColor(Param1: Integer);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(Param1: WordBool);
    function Get_Font: IFontDisp;
    procedure _Set_Font(const Param1: IFontDisp);
    function Get_BackStyle: Smallint;
    procedure Set_BackStyle(Param1: Smallint);
    function Get_BorderStyle: Smallint;
    procedure Set_BorderStyle(Param1: Smallint);
    procedure Set_Services(Param1: ServicesType);
    function Get_Services: ServicesType;
    function Get_Action: WideString;
    procedure Set_Action(const Param1: WideString);
    function Get_Processor: WideString;
    procedure Set_Processor(const Param1: WideString);
    function Get_CheckReaderCode: CheckReaderCode;
    procedure Set_CheckReaderCode(Param1: CheckReaderCode);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_Drivers_License: WideString;
    procedure Set_Drivers_License(const Param1: WideString);
    function Get_Phone_Number: WideString;
    procedure Set_Phone_Number(const Param1: WideString);
    function Get_Account_Number: WideString;
    procedure Set_Account_Number(const Param1: WideString);
    function Get_Manual: WideString;
    procedure Set_Manual(const Param1: WideString);
    function Get_AdjustmentAmount: WideString;
    procedure Set_AdjustmentAmount(const Param1: WideString);
    function Get_Amount: WideString;
    procedure Set_Amount(const Param1: WideString);
    function Get_Transit_Number: WideString;
    procedure Set_Transit_Number(const Param1: WideString);
    function Get_State: WideString;
    procedure Set_State(const Param1: WideString);
    function Get_Ticket: WideString;
    procedure Set_Ticket(const Param1: WideString);
    function Get_Multi: WideString;
    procedure Set_Multi(const Param1: WideString);
    function Get_User: WideString;
    procedure Set_User(const Param1: WideString);
    function Get_Path: WideString;
    procedure Set_Path(const Param1: WideString);
    function Get_TimeOut: Integer;
    procedure Set_TimeOut(Param1: Integer);
    function Get_Check_Number: WideString;
    procedure Set_Check_Number(const Param1: WideString);
    function Get_Birth_Date: WideString;
    procedure Set_Birth_Date(const Param1: WideString);
    procedure Set_Cash_Back(const Param1: WideString);
    function Get_Cash_Back: WideString;
    procedure Set_Manager_Card(const Param1: WideString);
    function Get_Manager_Card: WideString;
    function Get_Zip_Code: WideString;
    procedure Set_Zip_Code(const Param1: WideString);
    function Get_OutDelay: Single;
    procedure Set_OutDelay(Param1: Single);
    procedure Set_PrintReceipts(const Param1: WideString);
    function Get_PrintReceipts: WideString;
    function Get_XMLTrans: WordBool;
    procedure Set_XMLTrans(Param1: WordBool);
    function Get_TroutD: WideString;
    procedure Set_TroutD(const Param1: WideString);
    function Get_MICR_DATA: WideString;
    procedure Set_MICR_DATA(const Param1: WideString);
    procedure Set_IPAddress(const Param1: WideString);
    function Get_IPAddress: WideString;
    procedure Set_Port(Param1: Smallint);
    function Get_Port: Smallint;
    procedure Set_EnableSSL(Param1: WordBool);
    function Get_EnableSSL: WordBool;
    function Get_CommMethod: CommMethod;
    procedure Set_CommMethod(Param1: CommMethod);
    procedure Set_CheckType(const Param1: WideString);
    function Get_CheckType: WideString;
    procedure Set_CheckAccType(const Param1: WideString);
    function Get_CheckAccType: WideString;
    procedure Set_MICRStatus(const Param1: WideString);
    function Get_MICRStatus: WideString;
    procedure Set_CustomerName(const Param1: WideString);
    function Get_CustomerName: WideString;
    procedure Set_CustomerFirstName(const Param1: WideString);
    function Get_CustomerFirstName: WideString;
    procedure Set_CustomerLastName(const Param1: WideString);
    function Get_CustomerLastName: WideString;
    procedure Set_CustomerStreet(const Param1: WideString);
    function Get_CustomerStreet: WideString;
    procedure Set_CustomerCity(const Param1: WideString);
    function Get_CustomerCity: WideString;
    procedure Set_IDType(const Param1: WideString);
    function Get_IDType: WideString;
    procedure Set_IDCountry(const Param1: WideString);
    function Get_IDCountry: WideString;
    procedure Set_DLTrackII(const Param1: WideString);
    function Get_DLTrackII: WideString;
    function Get_ManagerNum: WideString;
    procedure Set_ManagerNum(const Param1: WideString);
    function Get_CashierNum: WideString;
    procedure Set_CashierNum(const Param1: WideString);
  public
    property DefaultInterface: _Check read GetDefaultInterface;
  published
    property Services: ServicesType read Get_Services write Set_Services;
    property Action: WideString read Get_Action write Set_Action;
    property Processor: WideString read Get_Processor write Set_Processor;
    property CheckReaderCode: CheckReaderCode read Get_CheckReaderCode write Set_CheckReaderCode;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Drivers_License: WideString read Get_Drivers_License write Set_Drivers_License;
    property Phone_Number: WideString read Get_Phone_Number write Set_Phone_Number;
    property Account_Number: WideString read Get_Account_Number write Set_Account_Number;
    property Manual: WideString read Get_Manual write Set_Manual;
    property AdjustmentAmount: WideString read Get_AdjustmentAmount write Set_AdjustmentAmount;
    property Amount: WideString read Get_Amount write Set_Amount;
    property Transit_Number: WideString read Get_Transit_Number write Set_Transit_Number;
    property State: WideString read Get_State write Set_State;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property Multi: WideString read Get_Multi write Set_Multi;
    property User: WideString read Get_User write Set_User;
    property Path: WideString read Get_Path write Set_Path;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property Check_Number: WideString read Get_Check_Number write Set_Check_Number;
    property Birth_Date: WideString read Get_Birth_Date write Set_Birth_Date;
    property Cash_Back: WideString read Get_Cash_Back write Set_Cash_Back;
    property Manager_Card: WideString read Get_Manager_Card write Set_Manager_Card;
    property Zip_Code: WideString read Get_Zip_Code write Set_Zip_Code;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property XMLTrans: WordBool read Get_XMLTrans write Set_XMLTrans;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property MICR_DATA: WideString read Get_MICR_DATA write Set_MICR_DATA;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property CheckType: WideString read Get_CheckType write Set_CheckType;
    property CheckAccType: WideString read Get_CheckAccType write Set_CheckAccType;
    property MICRStatus: WideString read Get_MICRStatus write Set_MICRStatus;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property CustomerFirstName: WideString read Get_CustomerFirstName write Set_CustomerFirstName;
    property CustomerLastName: WideString read Get_CustomerLastName write Set_CustomerLastName;
    property CustomerStreet: WideString read Get_CustomerStreet write Set_CustomerStreet;
    property CustomerCity: WideString read Get_CustomerCity write Set_CustomerCity;
    property IDType: WideString read Get_IDType write Set_IDType;
    property IDCountry: WideString read Get_IDCountry write Set_IDCountry;
    property DLTrackII: WideString read Get_DLTrackII write Set_DLTrackII;
    property ManagerNum: WideString read Get_ManagerNum write Set_ManagerNum;
    property CashierNum: WideString read Get_CashierNum write Set_CashierNum;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGift provides a Create and CreateRemote method to          
// create instances of the default interface _Gift exposed by              
// the CoClass Gift. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGift = class
    class function Create: _Gift;
    class function CreateRemote(const MachineName: string): _Gift;
  end;

  TGiftKeyDown = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TGiftKeyPress = procedure(ASender: TObject; var KeyAscii: Smallint) of object;
  TGiftKeyUp = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TGiftMouseDown = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                               var X: Single; var Y: Single) of object;
  TGiftMouseMove = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                               var X: Single; var Y: Single) of object;
  TGiftMouseUp = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                             var X: Single; var Y: Single) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGift
// Help String      : 
// Default Interface: _Gift
// Def. Intf. DISP? : No
// Event   Interface: __Gift
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGiftProperties= class;
{$ENDIF}
  TGift = class(TOleServer)
  private
    FOnResize: TNotifyEvent;
    FOnClick: TNotifyEvent;
    FOnDblClick: TNotifyEvent;
    FOnKeyDown: TGiftKeyDown;
    FOnKeyPress: TGiftKeyPress;
    FOnKeyUp: TGiftKeyUp;
    FOnMouseDown: TGiftMouseDown;
    FOnMouseMove: TGiftMouseMove;
    FOnMouseUp: TGiftMouseUp;
    FIntf:        _Gift;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGiftProperties;
    function      GetServerProperties: TGiftProperties;
{$ENDIF}
    function      GetDefaultInterface: _Gift;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    procedure Set_Demo(Param1: WordBool);
    function Get_Demo: WordBool;
    procedure Set_PrintReceipts(const Param1: WideString);
    function Get_PrintReceipts: WideString;
    function Get_BackColor: Integer;
    procedure Set_BackColor(Param1: Integer);
    function Get_ForeColor: Integer;
    procedure Set_ForeColor(Param1: Integer);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(Param1: WordBool);
    function Get_Font: IFontDisp;
    procedure _Set_Font(const Param1: IFontDisp);
    function Get_BackStyle: Smallint;
    procedure Set_BackStyle(Param1: Smallint);
    function Get_BorderStyle: Smallint;
    procedure Set_BorderStyle(Param1: Smallint);
    function Get_PromoCode: WideString;
    procedure Set_PromoCode(const Param1: WideString);
    function Get_Partial: WordBool;
    procedure Set_Partial(Param1: WordBool);
    procedure Set_Points(const Param1: WideString);
    function Get_Points: WideString;
    procedure Set_CashierID(const Param1: WideString);
    function Get_CashierID: WideString;
    procedure Set_Authcode(const Param1: WideString);
    function Get_Authcode: WideString;
    procedure Set_OldCard(const Param1: WideString);
    function Get_OldCard: WideString;
    procedure Set_Loyalty(Param1: WordBool);
    function Get_Loyalty: WordBool;
    procedure Set_TIP(const Param1: WideString);
    function Get_TIP: WideString;
    procedure Set_Refund(const Param1: WideString);
    function Get_Refund: WideString;
    procedure Set_RFID(const Param1: WideString);
    function Get_RFID: WideString;
    procedure Set_Industry(const Param1: WideString);
    function Get_Industry: WideString;
    function Get_Force: WordBool;
    procedure Set_Force(Param1: WordBool);
    function Get_ExpDate: WideString;
    procedure Set_ExpDate(const Param1: WideString);
    procedure Set_LastValidDate(const Param1: WideString);
    function Get_LastValidDate: WideString;
    procedure Set_TotalCardNum(const Param1: WideString);
    function Get_TotalCardNum: WideString;
    procedure Set_IPAddress(const Param1: WideString);
    function Get_IPAddress: WideString;
    procedure Set_Port(Param1: Smallint);
    function Get_Port: Smallint;
    procedure Set_EnableSSL(Param1: WordBool);
    function Get_EnableSSL: WordBool;
    function Get_CommMethod: CommMethod;
    procedure Set_CommMethod(Param1: CommMethod);
    function Get_Ticket: WideString;
    procedure Set_Ticket(const Param1: WideString);
    procedure Set_CardSeqNum(const Param1: WideString);
    function Get_CardSeqNum: WideString;
    function Get_OutDelay: Single;
    procedure Set_OutDelay(Param1: Single);
    function Get_Action: WideString;
    procedure Set_Action(const Param1: WideString);
    function Get_XMLTran: WordBool;
    procedure Set_XMLTran(Param1: WordBool);
    function Get_TroutD: WideString;
    procedure Set_TroutD(const Param1: WideString);
    function Get_CheckCard: WordBool;
    procedure Set_CheckCard(Param1: WordBool);
    function Get_Amount: WideString;
    procedure Set_Amount(const Param1: WideString);
    function Get_Card: WideString;
    procedure Set_Card(const Param1: WideString);
    function Get_Manual: Integer;
    procedure Set_Manual(Param1: Integer);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_Path: WideString;
    procedure Set_Path(const Param1: WideString);
    function Get_Processor: WideString;
    procedure Set_Processor(const Param1: WideString);
    function Get_TimeOut: Integer;
    procedure Set_TimeOut(Param1: Integer);
    function Get_Track: WideString;
    procedure Set_Track(const Param1: WideString);
    function Get_User: WideString;
    procedure Set_User(const Param1: WideString);
    function Get_GratuityAmount: WideString;
    procedure Set_GratuityAmount(const Param1: WideString);
    procedure Set_VirtualGiftCardFlag(Param1: WordBool);
    function Get_VirtualGiftCardFlag: WordBool;
    function Get_GiftPin: WideString;
    procedure Set_GiftPin(const Param1: WideString);
    procedure Set_Multi(const Param1: WideString);
    function Get_Multi: WideString;
    procedure Set_TableNumber(const Param1: WideString);
    function Get_TableNumber: WideString;
    procedure Set_TrackI(const Param1: WideString);
    function Get_TrackI: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Gift);
    procedure Disconnect; override;
    function GetTroutD: WideString;
    function GetAuth: WideString;
    function GetRespCode: WideString;
    function GetCaptured: WordBool;
    function GetPointsCount: WideString;
    function GetPointsTotalAmount: WideString;
    function GetSaleCount: WideString;
    function GetSaleTotalAmount: WideString;
    function GetTIM: WideString;
    function GetTipCount: WideString;
    function GetTipTotalAmount: WideString;
    function GetTransDateTime: WideString;
    function GetUpdateData: WideString;
    function GetVoidBalance: WideString;
    function GetVoidCount: WideString;
    function GetVoidTotalAmount: WideString;
    function GetActivationCount: WideString;
    function GetActivationTotalAmount: WideString;
    function GetAddPointsCount: WideString;
    function GetAddPointsTotalAmount: WideString;
    function GetAddValueCount: WideString;
    function GetAddValueTotalAmount: WideString;
    function GetAmountDue: WideString;
    function GetAuthAmount: WideString;
    function GetBalanceTransferCount: WideString;
    function GetBalanceTransferTotalAmount: WideString;
    function GetCashBack: WideString;
    function GetCreditCount: WideString;
    function GetCreditTotalAmount: WideString;
    function GetExp: WideString;
    function GetRefNumber: WideString;
    function GetResult: WideString;
    function GetRet: WideString;
    function GetTI: WideString;
    function GetTicket: WideString;
    function GetTransNum: WideString;
    function GetGiftCardIssuer: WideString;
    function GetGiftPin: WideString;
    function GetMiscMessage: WideString;
    function GetPointsBalance: WideString;
    function GetPreAuthCount: WideString;
    function GetPreAuthAmount: WideString;
    function GetPostAuthCount: WideString;
    function GetPostAuthAmount: WideString;
    function GetIssuanceCount: WideString;
    function GetIssuanceTotalAmount: WideString;
    function GetDeactivateCount: WideString;
    function GetDeactivateTotalAmount: WideString;
    function GetBalanceMergeCount: WideString;
    function GetBalanceMergeTotalAmount: WideString;
    function GetBalanceAdjustCount: WideString;
    function GetBalanceAdjustTotalAmount: WideString;
    function GetReportLostStolenCount: WideString;
    function GetReportLostStolenTotalAmount: WideString;
    function GetCashoutCount: WideString;
    function GetCashoutTotalAmount: WideString;
    function GetReactivateCount: WideString;
    function GetReactivateTotalAmount: WideString;
    function VerifyMerchantNumber: WordBool;
    function VerifyProcessor: WordBool;
    function Send(var FileType: FileType): OleVariant;
    function Cancel: OleVariant;
    function DeleteUserFiles: OleVariant;
    function GetGiftCardType(var CardNumber: WideString): WideString;
    function GetErrorCode: Integer;
    function GetErrorDesc: WideString;
    function GetParseData(var Data: WideString): Smallint;
    function GetXMLResponse: WideString;
    function VerifyAmount: WordBool;
    function VerifyAmount2: WordBool;
    function VerifyGiftCard(var CardNumber: WideString): WordBool;
    function ValidCardLength(var CardNumber: WideString): WordBool;
    function PccSysExists: WordBool;
    procedure Clear;
    function Abort: WordBool;
    function ValidDate: WordBool;
    function VerifyExpDate: WordBool;
    function GetGiftCardBalance: WideString;
    function ValidIssuer(var CardIssuer: WideString): WordBool;
    function GetXMLRequest: WideString;
    property DefaultInterface: _Gift read GetDefaultInterface;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property Font: IFontDisp read Get_Font write _Set_Font;
    property BackStyle: Smallint read Get_BackStyle write Set_BackStyle;
    property BorderStyle: Smallint read Get_BorderStyle write Set_BorderStyle;
    property Demo: WordBool read Get_Demo write Set_Demo;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property PromoCode: WideString read Get_PromoCode write Set_PromoCode;
    property Partial: WordBool read Get_Partial write Set_Partial;
    property Points: WideString read Get_Points write Set_Points;
    property CashierID: WideString read Get_CashierID write Set_CashierID;
    property Authcode: WideString read Get_Authcode write Set_Authcode;
    property OldCard: WideString read Get_OldCard write Set_OldCard;
    property Loyalty: WordBool read Get_Loyalty write Set_Loyalty;
    property TIP: WideString read Get_TIP write Set_TIP;
    property Refund: WideString read Get_Refund write Set_Refund;
    property RFID: WideString read Get_RFID write Set_RFID;
    property Industry: WideString read Get_Industry write Set_Industry;
    property Force: WordBool read Get_Force write Set_Force;
    property ExpDate: WideString read Get_ExpDate write Set_ExpDate;
    property LastValidDate: WideString read Get_LastValidDate write Set_LastValidDate;
    property TotalCardNum: WideString read Get_TotalCardNum write Set_TotalCardNum;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property CardSeqNum: WideString read Get_CardSeqNum write Set_CardSeqNum;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
    property Action: WideString read Get_Action write Set_Action;
    property XMLTran: WordBool read Get_XMLTran write Set_XMLTran;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property CheckCard: WordBool read Get_CheckCard write Set_CheckCard;
    property Amount: WideString read Get_Amount write Set_Amount;
    property Card: WideString read Get_Card write Set_Card;
    property Manual: Integer read Get_Manual write Set_Manual;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
    property Processor: WideString read Get_Processor write Set_Processor;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property Track: WideString read Get_Track write Set_Track;
    property User: WideString read Get_User write Set_User;
    property GratuityAmount: WideString read Get_GratuityAmount write Set_GratuityAmount;
    property VirtualGiftCardFlag: WordBool read Get_VirtualGiftCardFlag write Set_VirtualGiftCardFlag;
    property GiftPin: WideString read Get_GiftPin write Set_GiftPin;
    property Multi: WideString read Get_Multi write Set_Multi;
    property TableNumber: WideString read Get_TableNumber write Set_TableNumber;
    property TrackI: WideString read Get_TrackI write Set_TrackI;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGiftProperties read GetServerProperties;
{$ENDIF}
    property OnResize: TNotifyEvent read FOnResize write FOnResize;
    property OnClick: TNotifyEvent read FOnClick write FOnClick;
    property OnDblClick: TNotifyEvent read FOnDblClick write FOnDblClick;
    property OnKeyDown: TGiftKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyPress: TGiftKeyPress read FOnKeyPress write FOnKeyPress;
    property OnKeyUp: TGiftKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseDown: TGiftMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TGiftMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TGiftMouseUp read FOnMouseUp write FOnMouseUp;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGift
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGiftProperties = class(TPersistent)
  private
    FServer:    TGift;
    function    GetDefaultInterface: _Gift;
    constructor Create(AServer: TGift);
  protected
    procedure Set_Demo(Param1: WordBool);
    function Get_Demo: WordBool;
    procedure Set_PrintReceipts(const Param1: WideString);
    function Get_PrintReceipts: WideString;
    function Get_BackColor: Integer;
    procedure Set_BackColor(Param1: Integer);
    function Get_ForeColor: Integer;
    procedure Set_ForeColor(Param1: Integer);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(Param1: WordBool);
    function Get_Font: IFontDisp;
    procedure _Set_Font(const Param1: IFontDisp);
    function Get_BackStyle: Smallint;
    procedure Set_BackStyle(Param1: Smallint);
    function Get_BorderStyle: Smallint;
    procedure Set_BorderStyle(Param1: Smallint);
    function Get_PromoCode: WideString;
    procedure Set_PromoCode(const Param1: WideString);
    function Get_Partial: WordBool;
    procedure Set_Partial(Param1: WordBool);
    procedure Set_Points(const Param1: WideString);
    function Get_Points: WideString;
    procedure Set_CashierID(const Param1: WideString);
    function Get_CashierID: WideString;
    procedure Set_Authcode(const Param1: WideString);
    function Get_Authcode: WideString;
    procedure Set_OldCard(const Param1: WideString);
    function Get_OldCard: WideString;
    procedure Set_Loyalty(Param1: WordBool);
    function Get_Loyalty: WordBool;
    procedure Set_TIP(const Param1: WideString);
    function Get_TIP: WideString;
    procedure Set_Refund(const Param1: WideString);
    function Get_Refund: WideString;
    procedure Set_RFID(const Param1: WideString);
    function Get_RFID: WideString;
    procedure Set_Industry(const Param1: WideString);
    function Get_Industry: WideString;
    function Get_Force: WordBool;
    procedure Set_Force(Param1: WordBool);
    function Get_ExpDate: WideString;
    procedure Set_ExpDate(const Param1: WideString);
    procedure Set_LastValidDate(const Param1: WideString);
    function Get_LastValidDate: WideString;
    procedure Set_TotalCardNum(const Param1: WideString);
    function Get_TotalCardNum: WideString;
    procedure Set_IPAddress(const Param1: WideString);
    function Get_IPAddress: WideString;
    procedure Set_Port(Param1: Smallint);
    function Get_Port: Smallint;
    procedure Set_EnableSSL(Param1: WordBool);
    function Get_EnableSSL: WordBool;
    function Get_CommMethod: CommMethod;
    procedure Set_CommMethod(Param1: CommMethod);
    function Get_Ticket: WideString;
    procedure Set_Ticket(const Param1: WideString);
    procedure Set_CardSeqNum(const Param1: WideString);
    function Get_CardSeqNum: WideString;
    function Get_OutDelay: Single;
    procedure Set_OutDelay(Param1: Single);
    function Get_Action: WideString;
    procedure Set_Action(const Param1: WideString);
    function Get_XMLTran: WordBool;
    procedure Set_XMLTran(Param1: WordBool);
    function Get_TroutD: WideString;
    procedure Set_TroutD(const Param1: WideString);
    function Get_CheckCard: WordBool;
    procedure Set_CheckCard(Param1: WordBool);
    function Get_Amount: WideString;
    procedure Set_Amount(const Param1: WideString);
    function Get_Card: WideString;
    procedure Set_Card(const Param1: WideString);
    function Get_Manual: Integer;
    procedure Set_Manual(Param1: Integer);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_Path: WideString;
    procedure Set_Path(const Param1: WideString);
    function Get_Processor: WideString;
    procedure Set_Processor(const Param1: WideString);
    function Get_TimeOut: Integer;
    procedure Set_TimeOut(Param1: Integer);
    function Get_Track: WideString;
    procedure Set_Track(const Param1: WideString);
    function Get_User: WideString;
    procedure Set_User(const Param1: WideString);
    function Get_GratuityAmount: WideString;
    procedure Set_GratuityAmount(const Param1: WideString);
    procedure Set_VirtualGiftCardFlag(Param1: WordBool);
    function Get_VirtualGiftCardFlag: WordBool;
    function Get_GiftPin: WideString;
    procedure Set_GiftPin(const Param1: WideString);
    procedure Set_Multi(const Param1: WideString);
    function Get_Multi: WideString;
    procedure Set_TableNumber(const Param1: WideString);
    function Get_TableNumber: WideString;
    procedure Set_TrackI(const Param1: WideString);
    function Get_TrackI: WideString;
  public
    property DefaultInterface: _Gift read GetDefaultInterface;
  published
    property Demo: WordBool read Get_Demo write Set_Demo;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property PromoCode: WideString read Get_PromoCode write Set_PromoCode;
    property Partial: WordBool read Get_Partial write Set_Partial;
    property Points: WideString read Get_Points write Set_Points;
    property CashierID: WideString read Get_CashierID write Set_CashierID;
    property Authcode: WideString read Get_Authcode write Set_Authcode;
    property OldCard: WideString read Get_OldCard write Set_OldCard;
    property Loyalty: WordBool read Get_Loyalty write Set_Loyalty;
    property TIP: WideString read Get_TIP write Set_TIP;
    property Refund: WideString read Get_Refund write Set_Refund;
    property RFID: WideString read Get_RFID write Set_RFID;
    property Industry: WideString read Get_Industry write Set_Industry;
    property Force: WordBool read Get_Force write Set_Force;
    property ExpDate: WideString read Get_ExpDate write Set_ExpDate;
    property LastValidDate: WideString read Get_LastValidDate write Set_LastValidDate;
    property TotalCardNum: WideString read Get_TotalCardNum write Set_TotalCardNum;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property CardSeqNum: WideString read Get_CardSeqNum write Set_CardSeqNum;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
    property Action: WideString read Get_Action write Set_Action;
    property XMLTran: WordBool read Get_XMLTran write Set_XMLTran;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property CheckCard: WordBool read Get_CheckCard write Set_CheckCard;
    property Amount: WideString read Get_Amount write Set_Amount;
    property Card: WideString read Get_Card write Set_Card;
    property Manual: Integer read Get_Manual write Set_Manual;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
    property Processor: WideString read Get_Processor write Set_Processor;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property Track: WideString read Get_Track write Set_Track;
    property User: WideString read Get_User write Set_User;
    property GratuityAmount: WideString read Get_GratuityAmount write Set_GratuityAmount;
    property VirtualGiftCardFlag: WordBool read Get_VirtualGiftCardFlag write Set_VirtualGiftCardFlag;
    property GiftPin: WideString read Get_GiftPin write Set_GiftPin;
    property Multi: WideString read Get_Multi write Set_Multi;
    property TableNumber: WideString read Get_TableNumber write Set_TableNumber;
    property TrackI: WideString read Get_TrackI write Set_TrackI;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDebit provides a Create and CreateRemote method to          
// create instances of the default interface _Debit exposed by              
// the CoClass Debit. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDebit = class
    class function Create: _Debit;
    class function CreateRemote(const MachineName: string): _Debit;
  end;

  TDebitKeyDown = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TDebitKeyPress = procedure(ASender: TObject; var KeyAscii: Smallint) of object;
  TDebitKeyUp = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TDebitMouseDown = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                var X: Single; var Y: Single) of object;
  TDebitMouseMove = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                var X: Single; var Y: Single) of object;
  TDebitMouseUp = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                              var X: Single; var Y: Single) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDebit
// Help String      : 
// Default Interface: _Debit
// Def. Intf. DISP? : No
// Event   Interface: __Debit
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDebitProperties= class;
{$ENDIF}
  TDebit = class(TOleServer)
  private
    FOnClick: TNotifyEvent;
    FOnDblClick: TNotifyEvent;
    FOnKeyDown: TDebitKeyDown;
    FOnKeyPress: TDebitKeyPress;
    FOnKeyUp: TDebitKeyUp;
    FOnMouseDown: TDebitMouseDown;
    FOnMouseMove: TDebitMouseMove;
    FOnMouseUp: TDebitMouseUp;
    FIntf:        _Debit;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDebitProperties;
    function      GetServerProperties: TDebitProperties;
{$ENDIF}
    function      GetDefaultInterface: _Debit;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Action: Integer;
    procedure Set_Action(Param1: Integer);
    function Get_Amount: WideString;
    procedure Set_Amount(const Param1: WideString);
    function Get_Billpay: WideString;
    procedure Set_Billpay(const Param1: WideString);
    function Get_Card: WideString;
    procedure Set_Card(const Param1: WideString);
    procedure Set_ExpDate(const Param1: WideString);
    function Get_ExpDate: WideString;
    function Get_Manual: Integer;
    procedure Set_Manual(Param1: Integer);
    function Get_member: WideString;
    procedure Set_member(const Param1: WideString);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_Path: WideString;
    procedure Set_Path(const Param1: WideString);
    function Get_Processor: WideString;
    procedure Set_Processor(const Param1: WideString);
    procedure Set_PrintReceipts(const Param1: WideString);
    function Get_PrintReceipts: WideString;
    function Get_TimeOut: Integer;
    procedure Set_TimeOut(Param1: Integer);
    function Get_Track: WideString;
    procedure Set_Track(const Param1: WideString);
    function Get_User: WideString;
    procedure Set_User(const Param1: WideString);
    function Get_Pin: WideString;
    procedure Set_Pin(const Param1: WideString);
    function Get_KeySerialNumber: WideString;
    procedure Set_KeySerialNumber(const Param1: WideString);
    function Get_Ticket: WideString;
    procedure Set_Ticket(const Param1: WideString);
    function Get_CashBack: WideString;
    procedure Set_CashBack(const Param1: WideString);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_RFID: WideString;
    procedure Set_RFID(const Param1: WideString);
    function Get_OutDelay: Single;
    procedure Set_OutDelay(Param1: Single);
    function Get_TransNum: WideString;
    procedure Set_TransNum(const Param1: WideString);
    function Get_ShiftID: WideString;
    procedure Set_ShiftID(const Param1: WideString);
    function Get_LanguageCode: WideString;
    procedure Set_LanguageCode(const Param1: WideString);
    function Get_MACData: WideString;
    procedure Set_MACData(const Param1: WideString);
    function Get_DebitType: WideString;
    procedure Set_DebitType(const Param1: WideString);
    function Get_FoodStamp: WordBool;
    procedure Set_FoodStamp(Param1: WordBool);
    function Get_Authcode: WideString;
    procedure Set_Authcode(const Param1: WideString);
    procedure Set_IPAddress(const Param1: WideString);
    function Get_IPAddress: WideString;
    procedure Set_Port(Param1: Smallint);
    function Get_Port: Smallint;
    procedure Set_EnableSSL(Param1: WordBool);
    function Get_EnableSSL: WordBool;
    function Get_Command: WideString;
    procedure Set_Command(const Param1: WideString);
    function Get_CommMethod: CommMethod;
    procedure Set_CommMethod(Param1: CommMethod);
    function Get_Voucher: WideString;
    procedure Set_Voucher(const Param1: WideString);
    function Get_Gratuity: WideString;
    procedure Set_Gratuity(const Param1: WideString);
    function Get_XMLTran: WordBool;
    procedure Set_XMLTran(Param1: WordBool);
    function Get_OrigPurchData: WideString;
    procedure Set_OrigPurchData(const Param1: WideString);
    function Get_TroutD: WideString;
    procedure Set_TroutD(const Param1: WideString);
    function Get_PumpNumber: WideString;
    procedure Set_PumpNumber(const Param1: WideString);
    function Get_SurchargeAmount: WideString;
    procedure Set_SurchargeAmount(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Debit);
    procedure Disconnect; override;
    function GetApproved: WordBool;
    function GetTI: WideString;
    function GetMSI: WideString;
    function GetTermFee: WideString;
    function GetTraceNum: WideString;
    function GetAvlBalance: WideString;
    function GetCaptured: WordBool;
    function GetTroutD: WideString;
    function GetTransNum: WideString;
    function GetEBTFoodBalance: WideString;
    function GetEBTCashBalance: WideString;
    function GetAuthAmount: OleVariant;
    function GetAmountDue: OleVariant;
    function GetDCAvailBalance: OleVariant;
    function GetTraceNumber: OleVariant;
    function GetTransactionReferenceNumber: OleVariant;
    function GetSurchargeAmount: OleVariant;
    function GetErrorDesc: WideString;
    function GetErrorCode: Integer;
    function DeleteUserFiles: OleVariant;
    function PccSysExists: WordBool;
    function ClearVariables: OleVariant;
    procedure Clear;
    procedure UserControl_InitProperties;
    function GetMerchantInfo: WideString;
    function GetAuth: OleVariant;
    function GetRefNumber: WideString;
    function GetResult: OleVariant;
    function GetXMLResponse: WideString;
    function Send(var FileType: FileType): OleVariant;
    function VerifyAmount: WordBool;
    function GetAuxRespCode: WideString;
    function GetPOSSequenceNumber(var compareCSN: WideString): WideString;
    function GetXMLRequest: WideString;
    property DefaultInterface: _Debit read GetDefaultInterface;
    property Action: Integer read Get_Action write Set_Action;
    property Amount: WideString read Get_Amount write Set_Amount;
    property Billpay: WideString read Get_Billpay write Set_Billpay;
    property Card: WideString read Get_Card write Set_Card;
    property ExpDate: WideString read Get_ExpDate write Set_ExpDate;
    property Manual: Integer read Get_Manual write Set_Manual;
    property member: WideString read Get_member write Set_member;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
    property Processor: WideString read Get_Processor write Set_Processor;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property Track: WideString read Get_Track write Set_Track;
    property User: WideString read Get_User write Set_User;
    property Pin: WideString read Get_Pin write Set_Pin;
    property KeySerialNumber: WideString read Get_KeySerialNumber write Set_KeySerialNumber;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property CashBack: WideString read Get_CashBack write Set_CashBack;
    property Reference: WideString read Get_Reference write Set_Reference;
    property RFID: WideString read Get_RFID write Set_RFID;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
    property TransNum: WideString read Get_TransNum write Set_TransNum;
    property ShiftID: WideString read Get_ShiftID write Set_ShiftID;
    property LanguageCode: WideString read Get_LanguageCode write Set_LanguageCode;
    property MACData: WideString read Get_MACData write Set_MACData;
    property DebitType: WideString read Get_DebitType write Set_DebitType;
    property FoodStamp: WordBool read Get_FoodStamp write Set_FoodStamp;
    property Authcode: WideString read Get_Authcode write Set_Authcode;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property Command: WideString read Get_Command write Set_Command;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property Voucher: WideString read Get_Voucher write Set_Voucher;
    property Gratuity: WideString read Get_Gratuity write Set_Gratuity;
    property XMLTran: WordBool read Get_XMLTran write Set_XMLTran;
    property OrigPurchData: WideString read Get_OrigPurchData write Set_OrigPurchData;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property PumpNumber: WideString read Get_PumpNumber write Set_PumpNumber;
    property SurchargeAmount: WideString read Get_SurchargeAmount write Set_SurchargeAmount;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDebitProperties read GetServerProperties;
{$ENDIF}
    property OnClick: TNotifyEvent read FOnClick write FOnClick;
    property OnDblClick: TNotifyEvent read FOnDblClick write FOnDblClick;
    property OnKeyDown: TDebitKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyPress: TDebitKeyPress read FOnKeyPress write FOnKeyPress;
    property OnKeyUp: TDebitKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseDown: TDebitMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TDebitMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TDebitMouseUp read FOnMouseUp write FOnMouseUp;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDebit
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDebitProperties = class(TPersistent)
  private
    FServer:    TDebit;
    function    GetDefaultInterface: _Debit;
    constructor Create(AServer: TDebit);
  protected
    function Get_Action: Integer;
    procedure Set_Action(Param1: Integer);
    function Get_Amount: WideString;
    procedure Set_Amount(const Param1: WideString);
    function Get_Billpay: WideString;
    procedure Set_Billpay(const Param1: WideString);
    function Get_Card: WideString;
    procedure Set_Card(const Param1: WideString);
    procedure Set_ExpDate(const Param1: WideString);
    function Get_ExpDate: WideString;
    function Get_Manual: Integer;
    procedure Set_Manual(Param1: Integer);
    function Get_member: WideString;
    procedure Set_member(const Param1: WideString);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_Path: WideString;
    procedure Set_Path(const Param1: WideString);
    function Get_Processor: WideString;
    procedure Set_Processor(const Param1: WideString);
    procedure Set_PrintReceipts(const Param1: WideString);
    function Get_PrintReceipts: WideString;
    function Get_TimeOut: Integer;
    procedure Set_TimeOut(Param1: Integer);
    function Get_Track: WideString;
    procedure Set_Track(const Param1: WideString);
    function Get_User: WideString;
    procedure Set_User(const Param1: WideString);
    function Get_Pin: WideString;
    procedure Set_Pin(const Param1: WideString);
    function Get_KeySerialNumber: WideString;
    procedure Set_KeySerialNumber(const Param1: WideString);
    function Get_Ticket: WideString;
    procedure Set_Ticket(const Param1: WideString);
    function Get_CashBack: WideString;
    procedure Set_CashBack(const Param1: WideString);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_RFID: WideString;
    procedure Set_RFID(const Param1: WideString);
    function Get_OutDelay: Single;
    procedure Set_OutDelay(Param1: Single);
    function Get_TransNum: WideString;
    procedure Set_TransNum(const Param1: WideString);
    function Get_ShiftID: WideString;
    procedure Set_ShiftID(const Param1: WideString);
    function Get_LanguageCode: WideString;
    procedure Set_LanguageCode(const Param1: WideString);
    function Get_MACData: WideString;
    procedure Set_MACData(const Param1: WideString);
    function Get_DebitType: WideString;
    procedure Set_DebitType(const Param1: WideString);
    function Get_FoodStamp: WordBool;
    procedure Set_FoodStamp(Param1: WordBool);
    function Get_Authcode: WideString;
    procedure Set_Authcode(const Param1: WideString);
    procedure Set_IPAddress(const Param1: WideString);
    function Get_IPAddress: WideString;
    procedure Set_Port(Param1: Smallint);
    function Get_Port: Smallint;
    procedure Set_EnableSSL(Param1: WordBool);
    function Get_EnableSSL: WordBool;
    function Get_Command: WideString;
    procedure Set_Command(const Param1: WideString);
    function Get_CommMethod: CommMethod;
    procedure Set_CommMethod(Param1: CommMethod);
    function Get_Voucher: WideString;
    procedure Set_Voucher(const Param1: WideString);
    function Get_Gratuity: WideString;
    procedure Set_Gratuity(const Param1: WideString);
    function Get_XMLTran: WordBool;
    procedure Set_XMLTran(Param1: WordBool);
    function Get_OrigPurchData: WideString;
    procedure Set_OrigPurchData(const Param1: WideString);
    function Get_TroutD: WideString;
    procedure Set_TroutD(const Param1: WideString);
    function Get_PumpNumber: WideString;
    procedure Set_PumpNumber(const Param1: WideString);
    function Get_SurchargeAmount: WideString;
    procedure Set_SurchargeAmount(const Param1: WideString);
  public
    property DefaultInterface: _Debit read GetDefaultInterface;
  published
    property Action: Integer read Get_Action write Set_Action;
    property Amount: WideString read Get_Amount write Set_Amount;
    property Billpay: WideString read Get_Billpay write Set_Billpay;
    property Card: WideString read Get_Card write Set_Card;
    property ExpDate: WideString read Get_ExpDate write Set_ExpDate;
    property Manual: Integer read Get_Manual write Set_Manual;
    property member: WideString read Get_member write Set_member;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
    property Processor: WideString read Get_Processor write Set_Processor;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property Track: WideString read Get_Track write Set_Track;
    property User: WideString read Get_User write Set_User;
    property Pin: WideString read Get_Pin write Set_Pin;
    property KeySerialNumber: WideString read Get_KeySerialNumber write Set_KeySerialNumber;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property CashBack: WideString read Get_CashBack write Set_CashBack;
    property Reference: WideString read Get_Reference write Set_Reference;
    property RFID: WideString read Get_RFID write Set_RFID;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
    property TransNum: WideString read Get_TransNum write Set_TransNum;
    property ShiftID: WideString read Get_ShiftID write Set_ShiftID;
    property LanguageCode: WideString read Get_LanguageCode write Set_LanguageCode;
    property MACData: WideString read Get_MACData write Set_MACData;
    property DebitType: WideString read Get_DebitType write Set_DebitType;
    property FoodStamp: WordBool read Get_FoodStamp write Set_FoodStamp;
    property Authcode: WideString read Get_Authcode write Set_Authcode;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property Command: WideString read Get_Command write Set_Command;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property Voucher: WideString read Get_Voucher write Set_Voucher;
    property Gratuity: WideString read Get_Gratuity write Set_Gratuity;
    property XMLTran: WordBool read Get_XMLTran write Set_XMLTran;
    property OrigPurchData: WideString read Get_OrigPurchData write Set_OrigPurchData;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property PumpNumber: WideString read Get_PumpNumber write Set_PumpNumber;
    property SurchargeAmount: WideString read Get_SurchargeAmount write Set_SurchargeAmount;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBatch provides a Create and CreateRemote method to          
// create instances of the default interface _Batch exposed by              
// the CoClass Batch. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBatch = class
    class function Create: _Batch;
    class function CreateRemote(const MachineName: string): _Batch;
  end;

  TBatchKeyDown = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TBatchKeyPress = procedure(ASender: TObject; var KeyAscii: Smallint) of object;
  TBatchKeyUp = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TBatchMouseDown = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                var X: Single; var Y: Single) of object;
  TBatchMouseMove = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                var X: Single; var Y: Single) of object;
  TBatchMouseUp = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                              var X: Single; var Y: Single) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBatch
// Help String      : 
// Default Interface: _Batch
// Def. Intf. DISP? : No
// Event   Interface: __Batch
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBatchProperties= class;
{$ENDIF}
  TBatch = class(TOleServer)
  private
    FOnResize: TNotifyEvent;
    FOnClick: TNotifyEvent;
    FOnDblClick: TNotifyEvent;
    FOnKeyDown: TBatchKeyDown;
    FOnKeyPress: TBatchKeyPress;
    FOnKeyUp: TBatchKeyUp;
    FOnMouseDown: TBatchMouseDown;
    FOnMouseMove: TBatchMouseMove;
    FOnMouseUp: TBatchMouseUp;
    FIntf:        _Batch;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBatchProperties;
    function      GetServerProperties: TBatchProperties;
{$ENDIF}
    function      GetDefaultInterface: _Batch;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    procedure Set_MTS(Param1: WordBool);
    function Get_MTS: WordBool;
    function Get_Demo: WordBool;
    procedure Set_Demo(Param1: WordBool);
    function Get_BackColor: Integer;
    procedure Set_BackColor(Param1: Integer);
    function Get_ForeColor: Integer;
    procedure Set_ForeColor(Param1: Integer);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(Param1: WordBool);
    function Get_Font: IFontDisp;
    procedure _Set_Font(const Param1: IFontDisp);
    function Get_BackStyle: Smallint;
    procedure Set_BackStyle(Param1: Smallint);
    function Get_BorderStyle: Smallint;
    procedure Set_BorderStyle(Param1: Smallint);
    function Get_Processor: WideString;
    procedure Set_Processor(const Param1: WideString);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_Path: WideString;
    procedure Set_Path(const Param1: WideString);
    function Get_ItemCount: WideString;
    procedure Set_ItemCount(const Param1: WideString);
    function Get_Balance: WideString;
    procedure Set_Balance(const Param1: WideString);
    function Get_Action: Single;
    procedure Set_Action(Param1: Single);
    function Get_BatchNumber: WideString;
    procedure Set_BatchNumber(const Param1: WideString);
    function Get_CIC: WideString;
    procedure Set_CIC(const Param1: WideString);
    function Get_Terminal: WideString;
    procedure Set_Terminal(const Param1: WideString);
    function Get_BatchDate: WideString;
    procedure Set_BatchDate(const Param1: WideString);
    function Get_BatchCloseType: WideString;
    procedure Set_BatchCloseType(const Param1: WideString);
    function Get_Response: WideString;
    procedure Set_Response(const Param1: WideString);
    function Get_Store: WideString;
    procedure Set_Store(const Param1: WideString);
    function Get_VisaMCAmount: WideString;
    procedure Set_VisaMCAmount(const Param1: WideString);
    function Get_VisaMCCount: WideString;
    procedure Set_VisaMCCount(const Param1: WideString);
    function Get_AmexAmount: WideString;
    procedure Set_AmexAmount(const Param1: WideString);
    function Get_AmexCount: WideString;
    procedure Set_AmexCount(const Param1: WideString);
    function Get_PurchaseAmount: WideString;
    procedure Set_PurchaseAmount(const Param1: WideString);
    function Get_PurchaseCount: WideString;
    procedure Set_PurchaseCount(const Param1: WideString);
    function Get_ReturnAmount: WideString;
    procedure Set_ReturnAmount(const Param1: WideString);
    function Get_ReturnCount: WideString;
    procedure Set_ReturnCount(const Param1: WideString);
    function Get_Cancel: WordBool;
    procedure Set_Cancel(Param1: WordBool);
    procedure Set_SplitProcessor(const Param1: WideString);
    function Get_SplitProcessor: WideString;
    function Get_TimeOut: Integer;
    procedure Set_TimeOut(Param1: Integer);
    function Get_User: WideString;
    procedure Set_User(const Param1: WideString);
    function Get_XMLTrans: WordBool;
    procedure Set_XMLTrans(Param1: WordBool);
    procedure Set_IPAddress(const Param1: WideString);
    function Get_IPAddress: WideString;
    procedure Set_Port(Param1: Smallint);
    function Get_Port: Smallint;
    procedure Set_EnableSSL(Param1: WordBool);
    function Get_EnableSSL: WordBool;
    function Get_CommMethod: CommMethod;
    procedure Set_CommMethod(Param1: CommMethod);
    function Get_OutDelay: Single;
    procedure Set_OutDelay(Param1: Single);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Batch);
    procedure Disconnect; override;
    procedure Refresh;
    function GetItemCount: WideString;
    function GetBatches: WideString;
    function GetRespCode: WideString;
    function GetBalance: WideString;
    function GetStatus: WideString;
    function GetProcessed: WordBool;
    function GetBatchNumber: WideString;
    function GetResult: WideString;
    function GetErrorDesc: WideString;
    function GetErrorCode: Integer;
    function GetXMLRequest: WideString;
    function GetMerchantNumber: WideString;
    function GetProcessor: WideString;
    function GetAccepted(var Record_: Smallint): WordBool;
    function GetSettleNumber: WideString;
    function GetSettleAmount: OleVariant;
    function GetXMLResponse: WideString;
    function DeleteUserFiles: OleVariant;
    function PccSysExists: WordBool;
    procedure Clear;
    function Send(var FileType: FileType): OleVariant;
    function GetSystemInfo(var Index: Smallint): OleVariant;
    function GetNumberIndexs: Smallint;
    function GetMerchantInfo: WideString;
    function GetFileExt: WideString;
    property DefaultInterface: _Batch read GetDefaultInterface;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Font: IFontDisp read Get_Font write _Set_Font;
    property BackStyle: Smallint read Get_BackStyle write Set_BackStyle;
    property BorderStyle: Smallint read Get_BorderStyle write Set_BorderStyle;
    property MTS: WordBool read Get_MTS write Set_MTS;
    property Demo: WordBool read Get_Demo write Set_Demo;
    property Processor: WideString read Get_Processor write Set_Processor;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
    property ItemCount: WideString read Get_ItemCount write Set_ItemCount;
    property Balance: WideString read Get_Balance write Set_Balance;
    property Action: Single read Get_Action write Set_Action;
    property BatchNumber: WideString read Get_BatchNumber write Set_BatchNumber;
    property CIC: WideString read Get_CIC write Set_CIC;
    property Terminal: WideString read Get_Terminal write Set_Terminal;
    property BatchDate: WideString read Get_BatchDate write Set_BatchDate;
    property BatchCloseType: WideString read Get_BatchCloseType write Set_BatchCloseType;
    property Response: WideString read Get_Response write Set_Response;
    property Store: WideString read Get_Store write Set_Store;
    property VisaMCAmount: WideString read Get_VisaMCAmount write Set_VisaMCAmount;
    property VisaMCCount: WideString read Get_VisaMCCount write Set_VisaMCCount;
    property AmexAmount: WideString read Get_AmexAmount write Set_AmexAmount;
    property AmexCount: WideString read Get_AmexCount write Set_AmexCount;
    property PurchaseAmount: WideString read Get_PurchaseAmount write Set_PurchaseAmount;
    property PurchaseCount: WideString read Get_PurchaseCount write Set_PurchaseCount;
    property ReturnAmount: WideString read Get_ReturnAmount write Set_ReturnAmount;
    property ReturnCount: WideString read Get_ReturnCount write Set_ReturnCount;
    property Cancel: WordBool read Get_Cancel write Set_Cancel;
    property SplitProcessor: WideString read Get_SplitProcessor write Set_SplitProcessor;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property User: WideString read Get_User write Set_User;
    property XMLTrans: WordBool read Get_XMLTrans write Set_XMLTrans;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBatchProperties read GetServerProperties;
{$ENDIF}
    property OnResize: TNotifyEvent read FOnResize write FOnResize;
    property OnClick: TNotifyEvent read FOnClick write FOnClick;
    property OnDblClick: TNotifyEvent read FOnDblClick write FOnDblClick;
    property OnKeyDown: TBatchKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyPress: TBatchKeyPress read FOnKeyPress write FOnKeyPress;
    property OnKeyUp: TBatchKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseDown: TBatchMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TBatchMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TBatchMouseUp read FOnMouseUp write FOnMouseUp;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBatch
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBatchProperties = class(TPersistent)
  private
    FServer:    TBatch;
    function    GetDefaultInterface: _Batch;
    constructor Create(AServer: TBatch);
  protected
    procedure Set_MTS(Param1: WordBool);
    function Get_MTS: WordBool;
    function Get_Demo: WordBool;
    procedure Set_Demo(Param1: WordBool);
    function Get_BackColor: Integer;
    procedure Set_BackColor(Param1: Integer);
    function Get_ForeColor: Integer;
    procedure Set_ForeColor(Param1: Integer);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(Param1: WordBool);
    function Get_Font: IFontDisp;
    procedure _Set_Font(const Param1: IFontDisp);
    function Get_BackStyle: Smallint;
    procedure Set_BackStyle(Param1: Smallint);
    function Get_BorderStyle: Smallint;
    procedure Set_BorderStyle(Param1: Smallint);
    function Get_Processor: WideString;
    procedure Set_Processor(const Param1: WideString);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_Path: WideString;
    procedure Set_Path(const Param1: WideString);
    function Get_ItemCount: WideString;
    procedure Set_ItemCount(const Param1: WideString);
    function Get_Balance: WideString;
    procedure Set_Balance(const Param1: WideString);
    function Get_Action: Single;
    procedure Set_Action(Param1: Single);
    function Get_BatchNumber: WideString;
    procedure Set_BatchNumber(const Param1: WideString);
    function Get_CIC: WideString;
    procedure Set_CIC(const Param1: WideString);
    function Get_Terminal: WideString;
    procedure Set_Terminal(const Param1: WideString);
    function Get_BatchDate: WideString;
    procedure Set_BatchDate(const Param1: WideString);
    function Get_BatchCloseType: WideString;
    procedure Set_BatchCloseType(const Param1: WideString);
    function Get_Response: WideString;
    procedure Set_Response(const Param1: WideString);
    function Get_Store: WideString;
    procedure Set_Store(const Param1: WideString);
    function Get_VisaMCAmount: WideString;
    procedure Set_VisaMCAmount(const Param1: WideString);
    function Get_VisaMCCount: WideString;
    procedure Set_VisaMCCount(const Param1: WideString);
    function Get_AmexAmount: WideString;
    procedure Set_AmexAmount(const Param1: WideString);
    function Get_AmexCount: WideString;
    procedure Set_AmexCount(const Param1: WideString);
    function Get_PurchaseAmount: WideString;
    procedure Set_PurchaseAmount(const Param1: WideString);
    function Get_PurchaseCount: WideString;
    procedure Set_PurchaseCount(const Param1: WideString);
    function Get_ReturnAmount: WideString;
    procedure Set_ReturnAmount(const Param1: WideString);
    function Get_ReturnCount: WideString;
    procedure Set_ReturnCount(const Param1: WideString);
    function Get_Cancel: WordBool;
    procedure Set_Cancel(Param1: WordBool);
    procedure Set_SplitProcessor(const Param1: WideString);
    function Get_SplitProcessor: WideString;
    function Get_TimeOut: Integer;
    procedure Set_TimeOut(Param1: Integer);
    function Get_User: WideString;
    procedure Set_User(const Param1: WideString);
    function Get_XMLTrans: WordBool;
    procedure Set_XMLTrans(Param1: WordBool);
    procedure Set_IPAddress(const Param1: WideString);
    function Get_IPAddress: WideString;
    procedure Set_Port(Param1: Smallint);
    function Get_Port: Smallint;
    procedure Set_EnableSSL(Param1: WordBool);
    function Get_EnableSSL: WordBool;
    function Get_CommMethod: CommMethod;
    procedure Set_CommMethod(Param1: CommMethod);
    function Get_OutDelay: Single;
    procedure Set_OutDelay(Param1: Single);
  public
    property DefaultInterface: _Batch read GetDefaultInterface;
  published
    property MTS: WordBool read Get_MTS write Set_MTS;
    property Demo: WordBool read Get_Demo write Set_Demo;
    property Processor: WideString read Get_Processor write Set_Processor;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property Path: WideString read Get_Path write Set_Path;
    property ItemCount: WideString read Get_ItemCount write Set_ItemCount;
    property Balance: WideString read Get_Balance write Set_Balance;
    property Action: Single read Get_Action write Set_Action;
    property BatchNumber: WideString read Get_BatchNumber write Set_BatchNumber;
    property CIC: WideString read Get_CIC write Set_CIC;
    property Terminal: WideString read Get_Terminal write Set_Terminal;
    property BatchDate: WideString read Get_BatchDate write Set_BatchDate;
    property BatchCloseType: WideString read Get_BatchCloseType write Set_BatchCloseType;
    property Response: WideString read Get_Response write Set_Response;
    property Store: WideString read Get_Store write Set_Store;
    property VisaMCAmount: WideString read Get_VisaMCAmount write Set_VisaMCAmount;
    property VisaMCCount: WideString read Get_VisaMCCount write Set_VisaMCCount;
    property AmexAmount: WideString read Get_AmexAmount write Set_AmexAmount;
    property AmexCount: WideString read Get_AmexCount write Set_AmexCount;
    property PurchaseAmount: WideString read Get_PurchaseAmount write Set_PurchaseAmount;
    property PurchaseCount: WideString read Get_PurchaseCount write Set_PurchaseCount;
    property ReturnAmount: WideString read Get_ReturnAmount write Set_ReturnAmount;
    property ReturnCount: WideString read Get_ReturnCount write Set_ReturnCount;
    property Cancel: WordBool read Get_Cancel write Set_Cancel;
    property SplitProcessor: WideString read Get_SplitProcessor write Set_SplitProcessor;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property User: WideString read Get_User write Set_User;
    property XMLTrans: WordBool read Get_XMLTrans write Set_XMLTrans;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCharge provides a Create and CreateRemote method to          
// create instances of the default interface _Charge exposed by              
// the CoClass Charge. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCharge = class
    class function Create: _Charge;
    class function CreateRemote(const MachineName: string): _Charge;
  end;

  TChargeKeyDown = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TChargeKeyPress = procedure(ASender: TObject; var KeyAscii: Smallint) of object;
  TChargeKeyUp = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TChargeMouseDown = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                 var X: Single; var Y: Single) of object;
  TChargeMouseMove = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                 var X: Single; var Y: Single) of object;
  TChargeMouseUp = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                               var X: Single; var Y: Single) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCharge
// Help String      : 
// Default Interface: _Charge
// Def. Intf. DISP? : No
// Event   Interface: __Charge
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TChargeProperties= class;
{$ENDIF}
  TCharge = class(TOleServer)
  private
    FOnResize: TNotifyEvent;
    FOnClick: TNotifyEvent;
    FOnDblClick: TNotifyEvent;
    FOnKeyDown: TChargeKeyDown;
    FOnKeyPress: TChargeKeyPress;
    FOnKeyUp: TChargeKeyUp;
    FOnMouseDown: TChargeMouseDown;
    FOnMouseMove: TChargeMouseMove;
    FOnMouseUp: TChargeMouseUp;
    FIntf:        _Charge;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TChargeProperties;
    function      GetServerProperties: TChargeProperties;
{$ENDIF}
    function      GetDefaultInterface: _Charge;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    procedure Set_DEST_ZIP_CODE(const Param1: WideString);
    procedure Set_Zip(const Param1: WideString);
    procedure Set_MCSN(const Param1: WideString);
    procedure Set_MCSC(const Param1: WideString);
    function Get_Zip: WideString;
    function Get_DEST_ZIP_CODE: WideString;
    function Get_MCSN: WideString;
    function Get_MCSC: WideString;
    procedure Set_User(const Param1: WideString);
    function Get_User: WideString;
    procedure Set_Track(const Param1: WideString);
    function Get_Track: WideString;
    procedure Set_TotalAmount(const Param1: WideString);
    function Get_TotalAmount: WideString;
    procedure Set_Ticket(const Param1: WideString);
    function Get_Ticket: WideString;
    procedure Set_TaxAmt(const Param1: WideString);
    function Get_TaxAmt: WideString;
    procedure Set_Street(const Param1: WideString);
    function Get_Street: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_Reference: WideString;
    procedure Set_RFID(const Param1: WideString);
    function Get_RFID: WideString;
    procedure Set_Processor(const Param1: WideString);
    function Get_Processor: WideString;
    procedure Set_Path(const Param1: WideString);
    function Get_Path: WideString;
    procedure Set_TimeOut(Param1: Integer);
    function Get_TimeOut: Integer;
    function Get_TRANSID: WideString;
    procedure Set_TRANSID(const Param1: WideString);
    function Get_CustCode: WideString;
    procedure Set_CustCode(const Param1: WideString);
    procedure Set_Amount(const Param1: WideString);
    function Get_Amount: WideString;
    procedure Set_ExpDate(const Param1: WideString);
    function Get_ExpDate: WideString;
    procedure Set_Card(const Param1: WideString);
    procedure Set_Multi(const Param1: WideString);
    procedure Set_PeriodicPayment(const Param1: WideString);
    function Get_Card: WideString;
    function Get_Multi: WideString;
    procedure Set_OffLine(const Param1: WideString);
    function Get_OffLine: WideString;
    function Get_PeriodicPayment: WideString;
    procedure Set_Action(Param1: Integer);
    function Get_Action: Integer;
    function Get_Command: WideString;
    procedure Set_Command(const Param1: WideString);
    function Get_Demo: WordBool;
    procedure Set_Demo(Param1: WordBool);
    function Get_MTS: WordBool;
    procedure Set_MTS(Param1: WordBool);
    function Get_CardPresent: WideString;
    procedure Set_CardPresent(const Param1: WideString);
    function Get_OutDelay: Single;
    procedure Set_OutDelay(Param1: Single);
    function Get_CommercialCardFlag: WideString;
    procedure Set_CommercialCardFlag(const Param1: WideString);
    function Get_GratuityAmount: WideString;
    procedure Set_GratuityAmount(const Param1: WideString);
    function Get_EstGratuityAmount: WideString;
    procedure Set_EstGratuityAmount(const Param1: WideString);
    function Get_ItemID: WideString;
    procedure Set_ItemID(const Param1: WideString);
    function Get_TroutD: WideString;
    procedure Set_TroutD(const Param1: WideString);
    function Get_Store: WideString;
    procedure Set_Store(const Param1: WideString);
    function Get_Manual: Integer;
    procedure Set_Manual(Param1: Integer);
    function Get_CVV2: WideString;
    procedure Set_CVV2(const Param1: WideString);
    function Get_XMLTrans: WordBool;
    procedure Set_XMLTrans(Param1: WordBool);
    function Get_member: WideString;
    procedure Set_member(const Param1: WideString);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_LastValidDate: WideString;
    procedure Set_LastValidDate(const Param1: WideString);
    function Get_TaxExempt: WordBool;
    procedure Set_TaxExempt(Param1: WordBool);
    function Get_Authcode: WideString;
    procedure Set_Authcode(const Param1: WideString);
    procedure Set_CheckCard(Param1: WordBool);
    function Get_CheckCard: WordBool;
    function Get_AmxChargeDescription: WideString;
    procedure Set_AmxChargeDescription(const Param1: WideString);
    function Get_AmxDescription_1: WideString;
    procedure Set_AmxDescription_1(const Param1: WideString);
    function Get_AmxDescription_2: WideString;
    procedure Set_AmxDescription_2(const Param1: WideString);
    function Get_AmxDescription_3: WideString;
    procedure Set_AmxDescription_3(const Param1: WideString);
    function Get_AmxDescription_4: WideString;
    procedure Set_AmxDescription_4(const Param1: WideString);
    procedure Set_IPAddress(const Param1: WideString);
    function Get_Billpay: WideString;
    procedure Set_Billpay(const Param1: WideString);
    function Get_Level3: WideString;
    procedure Set_Level3(const Param1: WideString);
    function Get_IPAddress: WideString;
    procedure Set_Port(Param1: Smallint);
    function Get_Port: Smallint;
    procedure Set_EnableSSL(Param1: WordBool);
    function Get_EnableSSL: WordBool;
    function Get_CommMethod: CommMethod;
    procedure Set_CommMethod(Param1: CommMethod);
    procedure Set_Index(Param1: Integer);
    function Get_Index: Integer;
    procedure Set_PrintReceipts(const Param1: WideString);
    function Get_PrintReceipts: WideString;
    function Get_DriverID: WideString;
    procedure Set_DriverID(const Param1: WideString);
    function Get_DriverPIN: WideString;
    procedure Set_DriverPIN(const Param1: WideString);
    function Get_IDNumber: WideString;
    procedure Set_IDNumber(const Param1: WideString);
    function Get_Odometer: WideString;
    procedure Set_Odometer(const Param1: WideString);
    function Get_RestrictionCode: WideString;
    procedure Set_RestrictionCode(const Param1: WideString);
    function Get_VehicleID: WideString;
    procedure Set_VehicleID(const Param1: WideString);
    function Get_ProductDetailCount: WideString;
    procedure Set_ProductDetailCount(const Param1: WideString);
    function Get_ProductDetailQuantity_1: WideString;
    procedure Set_ProductDetailQuantity_1(const Param1: WideString);
    function Get_ProductDetailCode_1: WideString;
    procedure Set_ProductDetailCode_1(const Param1: WideString);
    function Get_ProductDetailAmount_1: WideString;
    procedure Set_ProductDetailAmount_1(const Param1: WideString);
    function Get_ProductDetailQuantity_2: WideString;
    procedure Set_ProductDetailQuantity_2(const Param1: WideString);
    function Get_ProductDetailCode_2: WideString;
    procedure Set_ProductDetailCode_2(const Param1: WideString);
    function Get_ProductDetailAmount_2: WideString;
    procedure Set_ProductDetailAmount_2(const Param1: WideString);
    function Get_ProductDetailQuantity_3: WideString;
    procedure Set_ProductDetailQuantity_3(const Param1: WideString);
    function Get_ProductDetailCode_3: WideString;
    procedure Set_ProductDetailCode_3(const Param1: WideString);
    function Get_ProductDetailAmount_3: WideString;
    procedure Set_ProductDetailAmount_3(const Param1: WideString);
    function Get_ProductDetailQuantity_4: WideString;
    procedure Set_ProductDetailQuantity_4(const Param1: WideString);
    function Get_ProductDetailCode_4: WideString;
    procedure Set_ProductDetailCode_4(const Param1: WideString);
    function Get_ProductDetailAmount_4: WideString;
    procedure Set_ProductDetailAmount_4(const Param1: WideString);
    function Get_ProductDetailQuantity_5: WideString;
    procedure Set_ProductDetailQuantity_5(const Param1: WideString);
    function Get_ProductDetailCode_5: WideString;
    procedure Set_ProductDetailCode_5(const Param1: WideString);
    function Get_ProductDetailAmount_5: WideString;
    procedure Set_ProductDetailAmount_5(const Param1: WideString);
    function Get_ProductDetailQuantity_6: WideString;
    procedure Set_ProductDetailQuantity_6(const Param1: WideString);
    function Get_ProductDetailCode_6: WideString;
    procedure Set_ProductDetailCode_6(const Param1: WideString);
    function Get_ProductDetailAmount_6: WideString;
    procedure Set_ProductDetailAmount_6(const Param1: WideString);
    function Get_ProductDetailQuantity_7: WideString;
    procedure Set_ProductDetailQuantity_7(const Param1: WideString);
    function Get_ProductDetailCode_7: WideString;
    procedure Set_ProductDetailCode_7(const Param1: WideString);
    function Get_ProductDetailAmount_7: WideString;
    procedure Set_ProductDetailAmount_7(const Param1: WideString);
    function Get_ProductDetailQuantity_8: WideString;
    procedure Set_ProductDetailQuantity_8(const Param1: WideString);
    function Get_ProductDetailCode_8: WideString;
    procedure Set_ProductDetailCode_8(const Param1: WideString);
    function Get_ProductDetailAmount_8: WideString;
    procedure Set_ProductDetailAmount_8(const Param1: WideString);
    function Get_ProductDetailQuantity_9: WideString;
    procedure Set_ProductDetailQuantity_9(const Param1: WideString);
    function Get_ProductDetailCode_9: WideString;
    procedure Set_ProductDetailCode_9(const Param1: WideString);
    function Get_ProductDetailAmount_9: WideString;
    procedure Set_ProductDetailAmount_9(const Param1: WideString);
    function Get_ProductDetailQuantity_10: WideString;
    procedure Set_ProductDetailQuantity_10(const Param1: WideString);
    function Get_ProductDetailCode_10: WideString;
    procedure Set_ProductDetailCode_10(const Param1: WideString);
    function Get_ProductDetailAmount_10: WideString;
    procedure Set_ProductDetailAmount_10(const Param1: WideString);
    function Get_StoreNum: WideString;
    procedure Set_StoreNum(const Param1: WideString);
    function Get_SSNum: WideString;
    procedure Set_SSNum(const Param1: WideString);
    function Get_CustomerHouseNum: WideString;
    procedure Set_CustomerHouseNum(const Param1: WideString);
    function Get_Phone_Number: WideString;
    procedure Set_Phone_Number(const Param1: WideString);
    function Get_Birth_Date: WideString;
    procedure Set_Birth_Date(const Param1: WideString);
    function Get_PumpNumber: WideString;
    procedure Set_PumpNumber(const Param1: WideString);
    procedure Set_CfgEnabled(Param1: WordBool);
    function Get_CfgEnabled: WordBool;
    procedure Set_CfgType(Param1: Byte);
    function Get_CfgType: Byte;
    procedure Set_CfgPath(const Param1: WideString);
    function Get_CfgPath: WideString;
    procedure Set_CfgSizeLimit(const Param1: WideString);
    function Get_CfgSizeLimit: WideString;
    procedure Set_CfgKeepDays(const Param1: WideString);
    function Get_CfgKeepDays: WideString;
    procedure Set_FleetCard(const Param1: WideString);
    function Get_FleetCard: WideString;
    procedure Set_CreditPlanNumber(const Param1: WideString);
    function Get_CreditPlanNumber: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Charge);
    procedure Disconnect; override;
    function GetPCard: WideString;
    function GetRespCode: WideString;
    function GetTroutD: WideString;
    function GetResponseCommercialType: WideString;
    function GetResponsePurchaseCardType: WideString;
    function GetCardIDCode: WideString;
    function GetAcctDataSrc: WideString;
    function GetGratuityAmount: WideString;
    function GetEstGratuityAmount: WideString;
    function GetItemID: WideString;
    function GetTBatch: WideString;
    function GetTicket: WideString;
    function GetTICode: WideString;
    function GetTI: WideString;
    function GetTIM: WideString;
    function GetTitem: WideString;
    function GetTransNum: WideString;
    function GetTDate: WideString;
    function GetRet: WideString;
    function GetResult: WideString;
    function GetRefNumber: WideString;
    function GetPEM: WideString;
    function GetMSI: WideString;
    function GetIND: WideString;
    function GetErrorDesc: WideString;
    function GetErrorCode: Integer;
    function GetCaptured: WordBool;
    function GetAVS: WideString;
    function GetCVV2: WideString;
    function GetAuth: WideString;
    function GetACI: WideString;
    function GetCustomerFirstName: WideString;
    function GetCustomerMInit: WideString;
    function GetCustomerLastName: WideString;
    function GetCustomerHouseNum: WideString;
    function GetCustomerAddress: WideString;
    function GetCustomerAppNum: WideString;
    function GetCustomerCity: WideString;
    function GetState: WideString;
    function GetZipCode: WideString;
    function GetAcctNum: WideString;
    function GetReturnCode: WideString;
    function GetCreditLimit: WideString;
    function GetPhoneNumber: WideString;
    function GetRestrictCode: WideString;
    function GetMaxAuth: WideString;
    function GetAddText1: WideString;
    function GetAddText2: WideString;
    function GetAddText3: WideString;
    function GetAddText4: WideString;
    function GetMiscMessage: WideString;
    function GetCurrentDBSize: OleVariant;
    function GetConfigDBSize: OleVariant;
    function GetRecordCount: OleVariant;
    function GetTransRecord: OleVariant;
    function GetPS2000: OleVariant;
    function GetAuthAmount: OleVariant;
    function GetAmountDue: OleVariant;
    function GetCCAvailBalance: OleVariant;
    function GetTraceNumber: OleVariant;
    function GetTransactionReferenceNumber: OleVariant;
    function GetReceipt: OleVariant;
    function AddMatch: WideString;
    function CVV2Match: WideString;
    function GetIndex: Integer;
    function ValidCardLength(const strCardNumber: WideString): WordBool;
    function VerifyCreditCard(const CardNumber: WideString): WordBool;
    function PccSysExists: WordBool;
    function GetXMLResponse: WideString;
    function GetCreditCardType(const strCardNumber: WideString): WideString;
    function GetCreditCardIssuer(const strCardNumber: WideString): WideString;
    function GetHostType(var szProcessor: WideString; var szMerchNum: WideString; var eTIDType: Byte): Smallint;
    function DeleteUserFiles: OleVariant;
    procedure Clear;
    function Cancel: OleVariant;
    function Send(var FileType: FileType): OleVariant;
    function GetCompanyName: WideString;
    function GetCompanyStreet: WideString;
    function GetCompanyCity: WideString;
    function GetCompanyState: WideString;
    function GetCompanyZip: WideString;
    function CommercialCardType(var strCard: WideString): WideString;
    function getCommercialCardType(var strCard: WideString): WideString;
    function VerifyExpDate: WordBool;
    function ValidDate: WordBool;
    function VerifyAmount: WordBool;
    function GetParseData(var Data: WideString): Smallint;
    function VerifyMerchantNumber(var strMerchant: WideString): WordBool;
    function GetXMLRequest: WideString;
    function GetPLProcessor: OleVariant;
    function GetPLMerchantNumber: OleVariant;
    property DefaultInterface: _Charge read GetDefaultInterface;
    property DEST_ZIP_CODE: WideString read Get_DEST_ZIP_CODE write Set_DEST_ZIP_CODE;
    property Zip: WideString read Get_Zip write Set_Zip;
    property MCSN: WideString read Get_MCSN write Set_MCSN;
    property MCSC: WideString read Get_MCSC write Set_MCSC;
    property User: WideString read Get_User write Set_User;
    property Track: WideString read Get_Track write Set_Track;
    property TotalAmount: WideString read Get_TotalAmount write Set_TotalAmount;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property TaxAmt: WideString read Get_TaxAmt write Set_TaxAmt;
    property Street: WideString read Get_Street write Set_Street;
    property Reference: WideString read Get_Reference write Set_Reference;
    property RFID: WideString read Get_RFID write Set_RFID;
    property Processor: WideString read Get_Processor write Set_Processor;
    property Path: WideString read Get_Path write Set_Path;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property TRANSID: WideString read Get_TRANSID write Set_TRANSID;
    property CustCode: WideString read Get_CustCode write Set_CustCode;
    property Amount: WideString read Get_Amount write Set_Amount;
    property ExpDate: WideString read Get_ExpDate write Set_ExpDate;
    property Card: WideString read Get_Card write Set_Card;
    property Multi: WideString read Get_Multi write Set_Multi;
    property PeriodicPayment: WideString read Get_PeriodicPayment write Set_PeriodicPayment;
    property OffLine: WideString read Get_OffLine write Set_OffLine;
    property Action: Integer read Get_Action write Set_Action;
    property Command: WideString read Get_Command write Set_Command;
    property Demo: WordBool read Get_Demo write Set_Demo;
    property MTS: WordBool read Get_MTS write Set_MTS;
    property CardPresent: WideString read Get_CardPresent write Set_CardPresent;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
    property CommercialCardFlag: WideString read Get_CommercialCardFlag write Set_CommercialCardFlag;
    property GratuityAmount: WideString read Get_GratuityAmount write Set_GratuityAmount;
    property EstGratuityAmount: WideString read Get_EstGratuityAmount write Set_EstGratuityAmount;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property Store: WideString read Get_Store write Set_Store;
    property Manual: Integer read Get_Manual write Set_Manual;
    property CVV2: WideString read Get_CVV2 write Set_CVV2;
    property XMLTrans: WordBool read Get_XMLTrans write Set_XMLTrans;
    property member: WideString read Get_member write Set_member;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property LastValidDate: WideString read Get_LastValidDate write Set_LastValidDate;
    property TaxExempt: WordBool read Get_TaxExempt write Set_TaxExempt;
    property Authcode: WideString read Get_Authcode write Set_Authcode;
    property CheckCard: WordBool read Get_CheckCard write Set_CheckCard;
    property AmxChargeDescription: WideString read Get_AmxChargeDescription write Set_AmxChargeDescription;
    property AmxDescription_1: WideString read Get_AmxDescription_1 write Set_AmxDescription_1;
    property AmxDescription_2: WideString read Get_AmxDescription_2 write Set_AmxDescription_2;
    property AmxDescription_3: WideString read Get_AmxDescription_3 write Set_AmxDescription_3;
    property AmxDescription_4: WideString read Get_AmxDescription_4 write Set_AmxDescription_4;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Billpay: WideString read Get_Billpay write Set_Billpay;
    property Level3: WideString read Get_Level3 write Set_Level3;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property Index: Integer read Get_Index write Set_Index;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property DriverID: WideString read Get_DriverID write Set_DriverID;
    property DriverPIN: WideString read Get_DriverPIN write Set_DriverPIN;
    property IDNumber: WideString read Get_IDNumber write Set_IDNumber;
    property Odometer: WideString read Get_Odometer write Set_Odometer;
    property RestrictionCode: WideString read Get_RestrictionCode write Set_RestrictionCode;
    property VehicleID: WideString read Get_VehicleID write Set_VehicleID;
    property ProductDetailCount: WideString read Get_ProductDetailCount write Set_ProductDetailCount;
    property ProductDetailQuantity_1: WideString read Get_ProductDetailQuantity_1 write Set_ProductDetailQuantity_1;
    property ProductDetailCode_1: WideString read Get_ProductDetailCode_1 write Set_ProductDetailCode_1;
    property ProductDetailAmount_1: WideString read Get_ProductDetailAmount_1 write Set_ProductDetailAmount_1;
    property ProductDetailQuantity_2: WideString read Get_ProductDetailQuantity_2 write Set_ProductDetailQuantity_2;
    property ProductDetailCode_2: WideString read Get_ProductDetailCode_2 write Set_ProductDetailCode_2;
    property ProductDetailAmount_2: WideString read Get_ProductDetailAmount_2 write Set_ProductDetailAmount_2;
    property ProductDetailQuantity_3: WideString read Get_ProductDetailQuantity_3 write Set_ProductDetailQuantity_3;
    property ProductDetailCode_3: WideString read Get_ProductDetailCode_3 write Set_ProductDetailCode_3;
    property ProductDetailAmount_3: WideString read Get_ProductDetailAmount_3 write Set_ProductDetailAmount_3;
    property ProductDetailQuantity_4: WideString read Get_ProductDetailQuantity_4 write Set_ProductDetailQuantity_4;
    property ProductDetailCode_4: WideString read Get_ProductDetailCode_4 write Set_ProductDetailCode_4;
    property ProductDetailAmount_4: WideString read Get_ProductDetailAmount_4 write Set_ProductDetailAmount_4;
    property ProductDetailQuantity_5: WideString read Get_ProductDetailQuantity_5 write Set_ProductDetailQuantity_5;
    property ProductDetailCode_5: WideString read Get_ProductDetailCode_5 write Set_ProductDetailCode_5;
    property ProductDetailAmount_5: WideString read Get_ProductDetailAmount_5 write Set_ProductDetailAmount_5;
    property ProductDetailQuantity_6: WideString read Get_ProductDetailQuantity_6 write Set_ProductDetailQuantity_6;
    property ProductDetailCode_6: WideString read Get_ProductDetailCode_6 write Set_ProductDetailCode_6;
    property ProductDetailAmount_6: WideString read Get_ProductDetailAmount_6 write Set_ProductDetailAmount_6;
    property ProductDetailQuantity_7: WideString read Get_ProductDetailQuantity_7 write Set_ProductDetailQuantity_7;
    property ProductDetailCode_7: WideString read Get_ProductDetailCode_7 write Set_ProductDetailCode_7;
    property ProductDetailAmount_7: WideString read Get_ProductDetailAmount_7 write Set_ProductDetailAmount_7;
    property ProductDetailQuantity_8: WideString read Get_ProductDetailQuantity_8 write Set_ProductDetailQuantity_8;
    property ProductDetailCode_8: WideString read Get_ProductDetailCode_8 write Set_ProductDetailCode_8;
    property ProductDetailAmount_8: WideString read Get_ProductDetailAmount_8 write Set_ProductDetailAmount_8;
    property ProductDetailQuantity_9: WideString read Get_ProductDetailQuantity_9 write Set_ProductDetailQuantity_9;
    property ProductDetailCode_9: WideString read Get_ProductDetailCode_9 write Set_ProductDetailCode_9;
    property ProductDetailAmount_9: WideString read Get_ProductDetailAmount_9 write Set_ProductDetailAmount_9;
    property ProductDetailQuantity_10: WideString read Get_ProductDetailQuantity_10 write Set_ProductDetailQuantity_10;
    property ProductDetailCode_10: WideString read Get_ProductDetailCode_10 write Set_ProductDetailCode_10;
    property ProductDetailAmount_10: WideString read Get_ProductDetailAmount_10 write Set_ProductDetailAmount_10;
    property StoreNum: WideString read Get_StoreNum write Set_StoreNum;
    property SSNum: WideString read Get_SSNum write Set_SSNum;
    property CustomerHouseNum: WideString read Get_CustomerHouseNum write Set_CustomerHouseNum;
    property Phone_Number: WideString read Get_Phone_Number write Set_Phone_Number;
    property Birth_Date: WideString read Get_Birth_Date write Set_Birth_Date;
    property PumpNumber: WideString read Get_PumpNumber write Set_PumpNumber;
    property CfgEnabled: WordBool read Get_CfgEnabled write Set_CfgEnabled;
    property CfgType: Byte read Get_CfgType write Set_CfgType;
    property CfgPath: WideString read Get_CfgPath write Set_CfgPath;
    property CfgSizeLimit: WideString read Get_CfgSizeLimit write Set_CfgSizeLimit;
    property CfgKeepDays: WideString read Get_CfgKeepDays write Set_CfgKeepDays;
    property FleetCard: WideString read Get_FleetCard write Set_FleetCard;
    property CreditPlanNumber: WideString read Get_CreditPlanNumber write Set_CreditPlanNumber;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TChargeProperties read GetServerProperties;
{$ENDIF}
    property OnResize: TNotifyEvent read FOnResize write FOnResize;
    property OnClick: TNotifyEvent read FOnClick write FOnClick;
    property OnDblClick: TNotifyEvent read FOnDblClick write FOnDblClick;
    property OnKeyDown: TChargeKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyPress: TChargeKeyPress read FOnKeyPress write FOnKeyPress;
    property OnKeyUp: TChargeKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseDown: TChargeMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TChargeMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TChargeMouseUp read FOnMouseUp write FOnMouseUp;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCharge
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TChargeProperties = class(TPersistent)
  private
    FServer:    TCharge;
    function    GetDefaultInterface: _Charge;
    constructor Create(AServer: TCharge);
  protected
    procedure Set_DEST_ZIP_CODE(const Param1: WideString);
    procedure Set_Zip(const Param1: WideString);
    procedure Set_MCSN(const Param1: WideString);
    procedure Set_MCSC(const Param1: WideString);
    function Get_Zip: WideString;
    function Get_DEST_ZIP_CODE: WideString;
    function Get_MCSN: WideString;
    function Get_MCSC: WideString;
    procedure Set_User(const Param1: WideString);
    function Get_User: WideString;
    procedure Set_Track(const Param1: WideString);
    function Get_Track: WideString;
    procedure Set_TotalAmount(const Param1: WideString);
    function Get_TotalAmount: WideString;
    procedure Set_Ticket(const Param1: WideString);
    function Get_Ticket: WideString;
    procedure Set_TaxAmt(const Param1: WideString);
    function Get_TaxAmt: WideString;
    procedure Set_Street(const Param1: WideString);
    function Get_Street: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_Reference: WideString;
    procedure Set_RFID(const Param1: WideString);
    function Get_RFID: WideString;
    procedure Set_Processor(const Param1: WideString);
    function Get_Processor: WideString;
    procedure Set_Path(const Param1: WideString);
    function Get_Path: WideString;
    procedure Set_TimeOut(Param1: Integer);
    function Get_TimeOut: Integer;
    function Get_TRANSID: WideString;
    procedure Set_TRANSID(const Param1: WideString);
    function Get_CustCode: WideString;
    procedure Set_CustCode(const Param1: WideString);
    procedure Set_Amount(const Param1: WideString);
    function Get_Amount: WideString;
    procedure Set_ExpDate(const Param1: WideString);
    function Get_ExpDate: WideString;
    procedure Set_Card(const Param1: WideString);
    procedure Set_Multi(const Param1: WideString);
    procedure Set_PeriodicPayment(const Param1: WideString);
    function Get_Card: WideString;
    function Get_Multi: WideString;
    procedure Set_OffLine(const Param1: WideString);
    function Get_OffLine: WideString;
    function Get_PeriodicPayment: WideString;
    procedure Set_Action(Param1: Integer);
    function Get_Action: Integer;
    function Get_Command: WideString;
    procedure Set_Command(const Param1: WideString);
    function Get_Demo: WordBool;
    procedure Set_Demo(Param1: WordBool);
    function Get_MTS: WordBool;
    procedure Set_MTS(Param1: WordBool);
    function Get_CardPresent: WideString;
    procedure Set_CardPresent(const Param1: WideString);
    function Get_OutDelay: Single;
    procedure Set_OutDelay(Param1: Single);
    function Get_CommercialCardFlag: WideString;
    procedure Set_CommercialCardFlag(const Param1: WideString);
    function Get_GratuityAmount: WideString;
    procedure Set_GratuityAmount(const Param1: WideString);
    function Get_EstGratuityAmount: WideString;
    procedure Set_EstGratuityAmount(const Param1: WideString);
    function Get_ItemID: WideString;
    procedure Set_ItemID(const Param1: WideString);
    function Get_TroutD: WideString;
    procedure Set_TroutD(const Param1: WideString);
    function Get_Store: WideString;
    procedure Set_Store(const Param1: WideString);
    function Get_Manual: Integer;
    procedure Set_Manual(Param1: Integer);
    function Get_CVV2: WideString;
    procedure Set_CVV2(const Param1: WideString);
    function Get_XMLTrans: WordBool;
    procedure Set_XMLTrans(Param1: WordBool);
    function Get_member: WideString;
    procedure Set_member(const Param1: WideString);
    function Get_MerchantNumber: WideString;
    procedure Set_MerchantNumber(const Param1: WideString);
    function Get_LastValidDate: WideString;
    procedure Set_LastValidDate(const Param1: WideString);
    function Get_TaxExempt: WordBool;
    procedure Set_TaxExempt(Param1: WordBool);
    function Get_Authcode: WideString;
    procedure Set_Authcode(const Param1: WideString);
    procedure Set_CheckCard(Param1: WordBool);
    function Get_CheckCard: WordBool;
    function Get_AmxChargeDescription: WideString;
    procedure Set_AmxChargeDescription(const Param1: WideString);
    function Get_AmxDescription_1: WideString;
    procedure Set_AmxDescription_1(const Param1: WideString);
    function Get_AmxDescription_2: WideString;
    procedure Set_AmxDescription_2(const Param1: WideString);
    function Get_AmxDescription_3: WideString;
    procedure Set_AmxDescription_3(const Param1: WideString);
    function Get_AmxDescription_4: WideString;
    procedure Set_AmxDescription_4(const Param1: WideString);
    procedure Set_IPAddress(const Param1: WideString);
    function Get_Billpay: WideString;
    procedure Set_Billpay(const Param1: WideString);
    function Get_Level3: WideString;
    procedure Set_Level3(const Param1: WideString);
    function Get_IPAddress: WideString;
    procedure Set_Port(Param1: Smallint);
    function Get_Port: Smallint;
    procedure Set_EnableSSL(Param1: WordBool);
    function Get_EnableSSL: WordBool;
    function Get_CommMethod: CommMethod;
    procedure Set_CommMethod(Param1: CommMethod);
    procedure Set_Index(Param1: Integer);
    function Get_Index: Integer;
    procedure Set_PrintReceipts(const Param1: WideString);
    function Get_PrintReceipts: WideString;
    function Get_DriverID: WideString;
    procedure Set_DriverID(const Param1: WideString);
    function Get_DriverPIN: WideString;
    procedure Set_DriverPIN(const Param1: WideString);
    function Get_IDNumber: WideString;
    procedure Set_IDNumber(const Param1: WideString);
    function Get_Odometer: WideString;
    procedure Set_Odometer(const Param1: WideString);
    function Get_RestrictionCode: WideString;
    procedure Set_RestrictionCode(const Param1: WideString);
    function Get_VehicleID: WideString;
    procedure Set_VehicleID(const Param1: WideString);
    function Get_ProductDetailCount: WideString;
    procedure Set_ProductDetailCount(const Param1: WideString);
    function Get_ProductDetailQuantity_1: WideString;
    procedure Set_ProductDetailQuantity_1(const Param1: WideString);
    function Get_ProductDetailCode_1: WideString;
    procedure Set_ProductDetailCode_1(const Param1: WideString);
    function Get_ProductDetailAmount_1: WideString;
    procedure Set_ProductDetailAmount_1(const Param1: WideString);
    function Get_ProductDetailQuantity_2: WideString;
    procedure Set_ProductDetailQuantity_2(const Param1: WideString);
    function Get_ProductDetailCode_2: WideString;
    procedure Set_ProductDetailCode_2(const Param1: WideString);
    function Get_ProductDetailAmount_2: WideString;
    procedure Set_ProductDetailAmount_2(const Param1: WideString);
    function Get_ProductDetailQuantity_3: WideString;
    procedure Set_ProductDetailQuantity_3(const Param1: WideString);
    function Get_ProductDetailCode_3: WideString;
    procedure Set_ProductDetailCode_3(const Param1: WideString);
    function Get_ProductDetailAmount_3: WideString;
    procedure Set_ProductDetailAmount_3(const Param1: WideString);
    function Get_ProductDetailQuantity_4: WideString;
    procedure Set_ProductDetailQuantity_4(const Param1: WideString);
    function Get_ProductDetailCode_4: WideString;
    procedure Set_ProductDetailCode_4(const Param1: WideString);
    function Get_ProductDetailAmount_4: WideString;
    procedure Set_ProductDetailAmount_4(const Param1: WideString);
    function Get_ProductDetailQuantity_5: WideString;
    procedure Set_ProductDetailQuantity_5(const Param1: WideString);
    function Get_ProductDetailCode_5: WideString;
    procedure Set_ProductDetailCode_5(const Param1: WideString);
    function Get_ProductDetailAmount_5: WideString;
    procedure Set_ProductDetailAmount_5(const Param1: WideString);
    function Get_ProductDetailQuantity_6: WideString;
    procedure Set_ProductDetailQuantity_6(const Param1: WideString);
    function Get_ProductDetailCode_6: WideString;
    procedure Set_ProductDetailCode_6(const Param1: WideString);
    function Get_ProductDetailAmount_6: WideString;
    procedure Set_ProductDetailAmount_6(const Param1: WideString);
    function Get_ProductDetailQuantity_7: WideString;
    procedure Set_ProductDetailQuantity_7(const Param1: WideString);
    function Get_ProductDetailCode_7: WideString;
    procedure Set_ProductDetailCode_7(const Param1: WideString);
    function Get_ProductDetailAmount_7: WideString;
    procedure Set_ProductDetailAmount_7(const Param1: WideString);
    function Get_ProductDetailQuantity_8: WideString;
    procedure Set_ProductDetailQuantity_8(const Param1: WideString);
    function Get_ProductDetailCode_8: WideString;
    procedure Set_ProductDetailCode_8(const Param1: WideString);
    function Get_ProductDetailAmount_8: WideString;
    procedure Set_ProductDetailAmount_8(const Param1: WideString);
    function Get_ProductDetailQuantity_9: WideString;
    procedure Set_ProductDetailQuantity_9(const Param1: WideString);
    function Get_ProductDetailCode_9: WideString;
    procedure Set_ProductDetailCode_9(const Param1: WideString);
    function Get_ProductDetailAmount_9: WideString;
    procedure Set_ProductDetailAmount_9(const Param1: WideString);
    function Get_ProductDetailQuantity_10: WideString;
    procedure Set_ProductDetailQuantity_10(const Param1: WideString);
    function Get_ProductDetailCode_10: WideString;
    procedure Set_ProductDetailCode_10(const Param1: WideString);
    function Get_ProductDetailAmount_10: WideString;
    procedure Set_ProductDetailAmount_10(const Param1: WideString);
    function Get_StoreNum: WideString;
    procedure Set_StoreNum(const Param1: WideString);
    function Get_SSNum: WideString;
    procedure Set_SSNum(const Param1: WideString);
    function Get_CustomerHouseNum: WideString;
    procedure Set_CustomerHouseNum(const Param1: WideString);
    function Get_Phone_Number: WideString;
    procedure Set_Phone_Number(const Param1: WideString);
    function Get_Birth_Date: WideString;
    procedure Set_Birth_Date(const Param1: WideString);
    function Get_PumpNumber: WideString;
    procedure Set_PumpNumber(const Param1: WideString);
    procedure Set_CfgEnabled(Param1: WordBool);
    function Get_CfgEnabled: WordBool;
    procedure Set_CfgType(Param1: Byte);
    function Get_CfgType: Byte;
    procedure Set_CfgPath(const Param1: WideString);
    function Get_CfgPath: WideString;
    procedure Set_CfgSizeLimit(const Param1: WideString);
    function Get_CfgSizeLimit: WideString;
    procedure Set_CfgKeepDays(const Param1: WideString);
    function Get_CfgKeepDays: WideString;
    procedure Set_FleetCard(const Param1: WideString);
    function Get_FleetCard: WideString;
    procedure Set_CreditPlanNumber(const Param1: WideString);
    function Get_CreditPlanNumber: WideString;
  public
    property DefaultInterface: _Charge read GetDefaultInterface;
  published
    property DEST_ZIP_CODE: WideString read Get_DEST_ZIP_CODE write Set_DEST_ZIP_CODE;
    property Zip: WideString read Get_Zip write Set_Zip;
    property MCSN: WideString read Get_MCSN write Set_MCSN;
    property MCSC: WideString read Get_MCSC write Set_MCSC;
    property User: WideString read Get_User write Set_User;
    property Track: WideString read Get_Track write Set_Track;
    property TotalAmount: WideString read Get_TotalAmount write Set_TotalAmount;
    property Ticket: WideString read Get_Ticket write Set_Ticket;
    property TaxAmt: WideString read Get_TaxAmt write Set_TaxAmt;
    property Street: WideString read Get_Street write Set_Street;
    property Reference: WideString read Get_Reference write Set_Reference;
    property RFID: WideString read Get_RFID write Set_RFID;
    property Processor: WideString read Get_Processor write Set_Processor;
    property Path: WideString read Get_Path write Set_Path;
    property TimeOut: Integer read Get_TimeOut write Set_TimeOut;
    property TRANSID: WideString read Get_TRANSID write Set_TRANSID;
    property CustCode: WideString read Get_CustCode write Set_CustCode;
    property Amount: WideString read Get_Amount write Set_Amount;
    property ExpDate: WideString read Get_ExpDate write Set_ExpDate;
    property Card: WideString read Get_Card write Set_Card;
    property Multi: WideString read Get_Multi write Set_Multi;
    property PeriodicPayment: WideString read Get_PeriodicPayment write Set_PeriodicPayment;
    property OffLine: WideString read Get_OffLine write Set_OffLine;
    property Action: Integer read Get_Action write Set_Action;
    property Command: WideString read Get_Command write Set_Command;
    property Demo: WordBool read Get_Demo write Set_Demo;
    property MTS: WordBool read Get_MTS write Set_MTS;
    property CardPresent: WideString read Get_CardPresent write Set_CardPresent;
    property OutDelay: Single read Get_OutDelay write Set_OutDelay;
    property CommercialCardFlag: WideString read Get_CommercialCardFlag write Set_CommercialCardFlag;
    property GratuityAmount: WideString read Get_GratuityAmount write Set_GratuityAmount;
    property EstGratuityAmount: WideString read Get_EstGratuityAmount write Set_EstGratuityAmount;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property TroutD: WideString read Get_TroutD write Set_TroutD;
    property Store: WideString read Get_Store write Set_Store;
    property Manual: Integer read Get_Manual write Set_Manual;
    property CVV2: WideString read Get_CVV2 write Set_CVV2;
    property XMLTrans: WordBool read Get_XMLTrans write Set_XMLTrans;
    property member: WideString read Get_member write Set_member;
    property MerchantNumber: WideString read Get_MerchantNumber write Set_MerchantNumber;
    property LastValidDate: WideString read Get_LastValidDate write Set_LastValidDate;
    property TaxExempt: WordBool read Get_TaxExempt write Set_TaxExempt;
    property Authcode: WideString read Get_Authcode write Set_Authcode;
    property CheckCard: WordBool read Get_CheckCard write Set_CheckCard;
    property AmxChargeDescription: WideString read Get_AmxChargeDescription write Set_AmxChargeDescription;
    property AmxDescription_1: WideString read Get_AmxDescription_1 write Set_AmxDescription_1;
    property AmxDescription_2: WideString read Get_AmxDescription_2 write Set_AmxDescription_2;
    property AmxDescription_3: WideString read Get_AmxDescription_3 write Set_AmxDescription_3;
    property AmxDescription_4: WideString read Get_AmxDescription_4 write Set_AmxDescription_4;
    property IPAddress: WideString read Get_IPAddress write Set_IPAddress;
    property Billpay: WideString read Get_Billpay write Set_Billpay;
    property Level3: WideString read Get_Level3 write Set_Level3;
    property Port: Smallint read Get_Port write Set_Port;
    property EnableSSL: WordBool read Get_EnableSSL write Set_EnableSSL;
    property CommMethod: CommMethod read Get_CommMethod write Set_CommMethod;
    property Index: Integer read Get_Index write Set_Index;
    property PrintReceipts: WideString read Get_PrintReceipts write Set_PrintReceipts;
    property DriverID: WideString read Get_DriverID write Set_DriverID;
    property DriverPIN: WideString read Get_DriverPIN write Set_DriverPIN;
    property IDNumber: WideString read Get_IDNumber write Set_IDNumber;
    property Odometer: WideString read Get_Odometer write Set_Odometer;
    property RestrictionCode: WideString read Get_RestrictionCode write Set_RestrictionCode;
    property VehicleID: WideString read Get_VehicleID write Set_VehicleID;
    property ProductDetailCount: WideString read Get_ProductDetailCount write Set_ProductDetailCount;
    property ProductDetailQuantity_1: WideString read Get_ProductDetailQuantity_1 write Set_ProductDetailQuantity_1;
    property ProductDetailCode_1: WideString read Get_ProductDetailCode_1 write Set_ProductDetailCode_1;
    property ProductDetailAmount_1: WideString read Get_ProductDetailAmount_1 write Set_ProductDetailAmount_1;
    property ProductDetailQuantity_2: WideString read Get_ProductDetailQuantity_2 write Set_ProductDetailQuantity_2;
    property ProductDetailCode_2: WideString read Get_ProductDetailCode_2 write Set_ProductDetailCode_2;
    property ProductDetailAmount_2: WideString read Get_ProductDetailAmount_2 write Set_ProductDetailAmount_2;
    property ProductDetailQuantity_3: WideString read Get_ProductDetailQuantity_3 write Set_ProductDetailQuantity_3;
    property ProductDetailCode_3: WideString read Get_ProductDetailCode_3 write Set_ProductDetailCode_3;
    property ProductDetailAmount_3: WideString read Get_ProductDetailAmount_3 write Set_ProductDetailAmount_3;
    property ProductDetailQuantity_4: WideString read Get_ProductDetailQuantity_4 write Set_ProductDetailQuantity_4;
    property ProductDetailCode_4: WideString read Get_ProductDetailCode_4 write Set_ProductDetailCode_4;
    property ProductDetailAmount_4: WideString read Get_ProductDetailAmount_4 write Set_ProductDetailAmount_4;
    property ProductDetailQuantity_5: WideString read Get_ProductDetailQuantity_5 write Set_ProductDetailQuantity_5;
    property ProductDetailCode_5: WideString read Get_ProductDetailCode_5 write Set_ProductDetailCode_5;
    property ProductDetailAmount_5: WideString read Get_ProductDetailAmount_5 write Set_ProductDetailAmount_5;
    property ProductDetailQuantity_6: WideString read Get_ProductDetailQuantity_6 write Set_ProductDetailQuantity_6;
    property ProductDetailCode_6: WideString read Get_ProductDetailCode_6 write Set_ProductDetailCode_6;
    property ProductDetailAmount_6: WideString read Get_ProductDetailAmount_6 write Set_ProductDetailAmount_6;
    property ProductDetailQuantity_7: WideString read Get_ProductDetailQuantity_7 write Set_ProductDetailQuantity_7;
    property ProductDetailCode_7: WideString read Get_ProductDetailCode_7 write Set_ProductDetailCode_7;
    property ProductDetailAmount_7: WideString read Get_ProductDetailAmount_7 write Set_ProductDetailAmount_7;
    property ProductDetailQuantity_8: WideString read Get_ProductDetailQuantity_8 write Set_ProductDetailQuantity_8;
    property ProductDetailCode_8: WideString read Get_ProductDetailCode_8 write Set_ProductDetailCode_8;
    property ProductDetailAmount_8: WideString read Get_ProductDetailAmount_8 write Set_ProductDetailAmount_8;
    property ProductDetailQuantity_9: WideString read Get_ProductDetailQuantity_9 write Set_ProductDetailQuantity_9;
    property ProductDetailCode_9: WideString read Get_ProductDetailCode_9 write Set_ProductDetailCode_9;
    property ProductDetailAmount_9: WideString read Get_ProductDetailAmount_9 write Set_ProductDetailAmount_9;
    property ProductDetailQuantity_10: WideString read Get_ProductDetailQuantity_10 write Set_ProductDetailQuantity_10;
    property ProductDetailCode_10: WideString read Get_ProductDetailCode_10 write Set_ProductDetailCode_10;
    property ProductDetailAmount_10: WideString read Get_ProductDetailAmount_10 write Set_ProductDetailAmount_10;
    property StoreNum: WideString read Get_StoreNum write Set_StoreNum;
    property SSNum: WideString read Get_SSNum write Set_SSNum;
    property CustomerHouseNum: WideString read Get_CustomerHouseNum write Set_CustomerHouseNum;
    property Phone_Number: WideString read Get_Phone_Number write Set_Phone_Number;
    property Birth_Date: WideString read Get_Birth_Date write Set_Birth_Date;
    property PumpNumber: WideString read Get_PumpNumber write Set_PumpNumber;
    property CfgEnabled: WordBool read Get_CfgEnabled write Set_CfgEnabled;
    property CfgType: Byte read Get_CfgType write Set_CfgType;
    property CfgPath: WideString read Get_CfgPath write Set_CfgPath;
    property CfgSizeLimit: WideString read Get_CfgSizeLimit write Set_CfgSizeLimit;
    property CfgKeepDays: WideString read Get_CfgKeepDays write Set_CfgKeepDays;
    property FleetCard: WideString read Get_FleetCard write Set_FleetCard;
    property CreditPlanNumber: WideString read Get_CreditPlanNumber write Set_CreditPlanNumber;
  end;
{$ENDIF}


procedure Register;

resourcestring
  dtlServerPage = 'Servers';

  dtlOcxPage = 'ActiveX';

implementation

uses ComObj;

class function CopccTran.Create: _pccTran;
begin
  Result := CreateComObject(CLASS_pccTran) as _pccTran;
end;

class function CopccTran.CreateRemote(const MachineName: string): _pccTran;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_pccTran) as _pccTran;
end;

procedure TpccTran.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FC6FDFBF-5E22-4351-BD2A-2BB066896BAA}';
    IntfIID:   '{775006E5-ED8B-4817-9FF9-BF4D2E7EBE5B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TpccTran.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _pccTran;
  end;
end;

procedure TpccTran.ConnectTo(svrIntf: _pccTran);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TpccTran.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TpccTran.GetDefaultInterface: _pccTran;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TpccTran.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TpccTranProperties.Create(Self);
{$ENDIF}
end;

destructor TpccTran.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TpccTran.GetServerProperties: TpccTranProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TpccTran.Get_mszTransPacket: WideString;
begin
    Result := DefaultInterface.mszTransPacket;
end;

procedure TpccTran.Set_mszTransPacket(const mszTransPacket: WideString);
  { Warning: The property mszTransPacket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.mszTransPacket := mszTransPacket;
end;

procedure TpccTran.Set_TransPacket(var Param1: WideString);
  { Warning: The property TransPacket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransPacket := Param1;
end;

function TpccTran.Get_TransPacket: WideString;
begin
    Result := DefaultInterface.TransPacket;
end;

procedure TpccTran.Set_TaxExempt(var Param1: WordBool);
begin
  DefaultInterface.Set_TaxExempt(Param1);
end;

function TpccTran.Get_TaxExempt: WordBool;
begin
    Result := DefaultInterface.TaxExempt;
end;

procedure TpccTran.Set_Method(var Param1: TxnMethodType);
begin
  DefaultInterface.Set_Method(Param1);
end;

function TpccTran.Get_Method: TxnMethodType;
begin
    Result := DefaultInterface.Method;
end;

procedure TpccTran.Set_TransTime(var Param1: WideString);
  { Warning: The property TransTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransTime := Param1;
end;

function TpccTran.Get_TransTime: WideString;
begin
    Result := DefaultInterface.TransTime;
end;

procedure TpccTran.Set_TotTransTime(var Param1: WideString);
  { Warning: The property TotTransTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TotTransTime := Param1;
end;

function TpccTran.Get_TotTransTime: WideString;
begin
    Result := DefaultInterface.TotTransTime;
end;

procedure TpccTran.Set_Authcode(var Param1: WideString);
  { Warning: The property Authcode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Authcode := Param1;
end;

function TpccTran.Get_Authcode: WideString;
begin
    Result := DefaultInterface.Authcode;
end;

procedure TpccTran.Set_TxnTimeout(var Param1: WideString);
  { Warning: The property TxnTimeout has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TxnTimeout := Param1;
end;

function TpccTran.Get_TxnTimeout: WideString;
begin
    Result := DefaultInterface.TxnTimeout;
end;

procedure TpccTran.Set_CfgEnabled(var Param1: WordBool);
begin
  DefaultInterface.Set_CfgEnabled(Param1);
end;

function TpccTran.Get_CfgEnabled: WordBool;
begin
    Result := DefaultInterface.CfgEnabled;
end;

procedure TpccTran.Set_CfgType(var Param1: Byte);
begin
  DefaultInterface.Set_CfgType(Param1);
end;

function TpccTran.Get_CfgType: Byte;
begin
    Result := DefaultInterface.CfgType;
end;

procedure TpccTran.Set_CfgPath(var Param1: WideString);
  { Warning: The property CfgPath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CfgPath := Param1;
end;

function TpccTran.Get_CfgPath: WideString;
begin
    Result := DefaultInterface.CfgPath;
end;

procedure TpccTran.Set_CfgSizeLimit(var Param1: WideString);
  { Warning: The property CfgSizeLimit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CfgSizeLimit := Param1;
end;

function TpccTran.Get_CfgSizeLimit: WideString;
begin
    Result := DefaultInterface.CfgSizeLimit;
end;

procedure TpccTran.Set_CfgKeepDays(var Param1: WideString);
  { Warning: The property CfgKeepDays has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CfgKeepDays := Param1;
end;

function TpccTran.Get_CfgKeepDays: WideString;
begin
    Result := DefaultInterface.CfgKeepDays;
end;

procedure TpccTran.Set_Partial(var Param1: WordBool);
begin
  DefaultInterface.Set_Partial(Param1);
end;

function TpccTran.Get_Partial: WordBool;
begin
    Result := DefaultInterface.Partial;
end;

procedure TpccTran.Set_Force(var Param1: WordBool);
begin
  DefaultInterface.Set_Force(Param1);
end;

function TpccTran.Get_Force: WordBool;
begin
    Result := DefaultInterface.Force;
end;

procedure TpccTran.Set_TotalNumCards(var Param1: WideString);
  { Warning: The property TotalNumCards has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TotalNumCards := Param1;
end;

function TpccTran.Get_TotalNumCards: WideString;
begin
    Result := DefaultInterface.TotalNumCards;
end;

procedure TpccTran.Set_GiftSeqNum(var Param1: WideString);
  { Warning: The property GiftSeqNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiftSeqNum := Param1;
end;

function TpccTran.Get_GiftSeqNum: WideString;
begin
    Result := DefaultInterface.GiftSeqNum;
end;

procedure TpccTran.Set_IndType(var Param1: WideString);
  { Warning: The property IndType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IndType := Param1;
end;

function TpccTran.Get_IndType: WideString;
begin
    Result := DefaultInterface.IndType;
end;

procedure TpccTran.Set_SourceCard(var Param1: WideString);
  { Warning: The property SourceCard has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceCard := Param1;
end;

function TpccTran.Get_SourceCard: WideString;
begin
    Result := DefaultInterface.SourceCard;
end;

procedure TpccTran.Set_Loyalty(var Param1: WordBool);
begin
  DefaultInterface.Set_Loyalty(Param1);
end;

function TpccTran.Get_Loyalty: WordBool;
begin
    Result := DefaultInterface.Loyalty;
end;

procedure TpccTran.Set_GiftUnits(var Param1: WideString);
  { Warning: The property GiftUnits has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiftUnits := Param1;
end;

function TpccTran.Get_GiftUnits: WideString;
begin
    Result := DefaultInterface.GiftUnits;
end;

procedure TpccTran.Set_CashierNum(var Param1: WideString);
  { Warning: The property CashierNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashierNum := Param1;
end;

function TpccTran.Get_CashierNum: WideString;
begin
    Result := DefaultInterface.CashierNum;
end;

procedure TpccTran.Set_CashierID(var Param1: WideString);
  { Warning: The property CashierID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashierID := Param1;
end;

function TpccTran.Get_CashierID: WideString;
begin
    Result := DefaultInterface.CashierID;
end;

procedure TpccTran.Set_ManagerNum(var Param1: WideString);
  { Warning: The property ManagerNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ManagerNum := Param1;
end;

function TpccTran.Get_ManagerNum: WideString;
begin
    Result := DefaultInterface.ManagerNum;
end;

procedure TpccTran.Set_CheckNum(var Param1: WideString);
  { Warning: The property CheckNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CheckNum := Param1;
end;

function TpccTran.Get_CheckNum: WideString;
begin
    Result := DefaultInterface.CheckNum;
end;

procedure TpccTran.Set_RFID(var Param1: WideString);
  { Warning: The property RFID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RFID := Param1;
end;

function TpccTran.Get_RFID: WideString;
begin
    Result := DefaultInterface.RFID;
end;

procedure TpccTran.Set_Birth_Date(var Param1: WideString);
  { Warning: The property Birth_Date has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Birth_Date := Param1;
end;

function TpccTran.Get_Birth_Date: WideString;
begin
    Result := DefaultInterface.Birth_Date;
end;

procedure TpccTran.Set_Phone_Number(var Param1: WideString);
  { Warning: The property Phone_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Phone_Number := Param1;
end;

function TpccTran.Get_Phone_Number: WideString;
begin
    Result := DefaultInterface.Phone_Number;
end;

procedure TpccTran.Set_ABANum(var Param1: WideString);
  { Warning: The property ABANum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ABANum := Param1;
end;

function TpccTran.Get_ABANum: WideString;
begin
    Result := DefaultInterface.ABANum;
end;

procedure TpccTran.Set_License(var Param1: WideString);
  { Warning: The property License has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.License := Param1;
end;

function TpccTran.Get_License: WideString;
begin
    Result := DefaultInterface.License;
end;

procedure TpccTran.Set_State(var Param1: WideString);
  { Warning: The property State has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.State := Param1;
end;

function TpccTran.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TpccTran.Set_MICR(var Param1: WideString);
  { Warning: The property MICR has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MICR := Param1;
end;

function TpccTran.Get_MICR: WideString;
begin
    Result := DefaultInterface.MICR;
end;

procedure TpccTran.Set_OrigPurchData(var Param1: WideString);
  { Warning: The property OrigPurchData has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OrigPurchData := Param1;
end;

function TpccTran.Get_OrigPurchData: WideString;
begin
    Result := DefaultInterface.OrigPurchData;
end;

procedure TpccTran.Set_VoucherNum(var Param1: WideString);
  { Warning: The property VoucherNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VoucherNum := Param1;
end;

function TpccTran.Get_VoucherNum: WideString;
begin
    Result := DefaultInterface.VoucherNum;
end;

procedure TpccTran.Set_POSSeqNum(var Param1: WideString);
  { Warning: The property POSSeqNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.POSSeqNum := Param1;
end;

function TpccTran.Get_POSSeqNum: WideString;
begin
    Result := DefaultInterface.POSSeqNum;
end;

procedure TpccTran.Set_DebitType(var Param1: WideString);
  { Warning: The property DebitType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DebitType := Param1;
end;

function TpccTran.Get_DebitType: WideString;
begin
    Result := DefaultInterface.DebitType;
end;

procedure TpccTran.Set_MACBlock(var Param1: WideString);
  { Warning: The property MACBlock has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MACBlock := Param1;
end;

function TpccTran.Get_MACBlock: WideString;
begin
    Result := DefaultInterface.MACBlock;
end;

procedure TpccTran.Set_PINBlock(var Param1: WideString);
  { Warning: The property PINBlock has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PINBlock := Param1;
end;

function TpccTran.Get_PINBlock: WideString;
begin
    Result := DefaultInterface.PINBlock;
end;

procedure TpccTran.Set_CashbackAmnt(var Param1: WideString);
  { Warning: The property CashbackAmnt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashbackAmnt := Param1;
end;

function TpccTran.Get_CashbackAmnt: WideString;
begin
    Result := DefaultInterface.CashbackAmnt;
end;

procedure TpccTran.Set_KeySerialNum(var Param1: WideString);
  { Warning: The property KeySerialNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KeySerialNum := Param1;
end;

function TpccTran.Get_KeySerialNum: WideString;
begin
    Result := DefaultInterface.KeySerialNum;
end;

procedure TpccTran.Set_LanguageCode(var Param1: WideString);
  { Warning: The property LanguageCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LanguageCode := Param1;
end;

function TpccTran.Get_LanguageCode: WideString;
begin
    Result := DefaultInterface.LanguageCode;
end;

procedure TpccTran.Set_ShiftID(var Param1: WideString);
  { Warning: The property ShiftID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ShiftID := Param1;
end;

function TpccTran.Get_ShiftID: WideString;
begin
    Result := DefaultInterface.ShiftID;
end;

procedure TpccTran.Set_PromoCode(var Param1: WideString);
  { Warning: The property PromoCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PromoCode := Param1;
end;

function TpccTran.Get_PromoCode: WideString;
begin
    Result := DefaultInterface.PromoCode;
end;

function TpccTran.Get_TranCount: WideString;
begin
    Result := DefaultInterface.TranCount;
end;

procedure TpccTran.Set_Store(var Param1: WideString);
  { Warning: The property Store has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Store := Param1;
end;

function TpccTran.Get_Store: WideString;
begin
    Result := DefaultInterface.Store;
end;

procedure TpccTran.Set_EBTType(var Param1: WideString);
  { Warning: The property EBTType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EBTType := Param1;
end;

function TpccTran.Get_EBTType: WideString;
begin
    Result := DefaultInterface.EBTType;
end;

function TpccTran.Get_GetXML: WideString;
begin
    Result := DefaultInterface.GetXML;
end;

procedure TpccTran.Set_AmxDescription_1(var Param1: WideString);
  { Warning: The property AmxDescription_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_1 := Param1;
end;

function TpccTran.Get_AmxDescription_1: WideString;
begin
    Result := DefaultInterface.AmxDescription_1;
end;

procedure TpccTran.Set_AmxDescription_2(var Param1: WideString);
  { Warning: The property AmxDescription_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_2 := Param1;
end;

function TpccTran.Get_AmxDescription_2: WideString;
begin
    Result := DefaultInterface.AmxDescription_2;
end;

procedure TpccTran.Set_AmxDescription_3(var Param1: WideString);
  { Warning: The property AmxDescription_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_3 := Param1;
end;

function TpccTran.Get_AmxDescription_3: WideString;
begin
    Result := DefaultInterface.AmxDescription_3;
end;

procedure TpccTran.Set_AmxDescription_4(var Param1: WideString);
  { Warning: The property AmxDescription_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_4 := Param1;
end;

function TpccTran.Get_AmxDescription_4: WideString;
begin
    Result := DefaultInterface.AmxDescription_4;
end;

procedure TpccTran.Set_AmxChargeDescription(var Param1: WideString);
  { Warning: The property AmxChargeDescription has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxChargeDescription := Param1;
end;

function TpccTran.Get_AmxChargeDescription: WideString;
begin
    Result := DefaultInterface.AmxChargeDescription;
end;

procedure TpccTran.Set_OriginalAmnt(var Param1: WideString);
  { Warning: The property OriginalAmnt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OriginalAmnt := Param1;
end;

function TpccTran.Get_OriginalAmnt: WideString;
begin
    Result := DefaultInterface.OriginalAmnt;
end;

procedure TpccTran.Set_TargetTransaction(var Param1: WideString);
  { Warning: The property TargetTransaction has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TargetTransaction := Param1;
end;

function TpccTran.Get_TargetTransaction: WideString;
begin
    Result := DefaultInterface.TargetTransaction;
end;

procedure TpccTran.Set_CmrclCardFlag(var Param1: WideString);
  { Warning: The property CmrclCardFlag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CmrclCardFlag := Param1;
end;

function TpccTran.Get_CmrclCardFlag: WideString;
begin
    Result := DefaultInterface.CmrclCardFlag;
end;

procedure TpccTran.Set_ImpTransFlag(var Param1: WordBool);
begin
  DefaultInterface.Set_ImpTransFlag(Param1);
end;

function TpccTran.Get_ImpTransFlag: WordBool;
begin
    Result := DefaultInterface.ImpTransFlag;
end;

procedure TpccTran.Set_EnhancedTransFlag(var Param1: WordBool);
begin
  DefaultInterface.Set_EnhancedTransFlag(Param1);
end;

function TpccTran.Get_EnhancedTransFlag: WordBool;
begin
    Result := DefaultInterface.EnhancedTransFlag;
end;

procedure TpccTran.Set_GratuityAmntEst(var Param1: WideString);
  { Warning: The property GratuityAmntEst has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GratuityAmntEst := Param1;
end;

function TpccTran.Get_GratuityAmntEst: WideString;
begin
    Result := DefaultInterface.GratuityAmntEst;
end;

procedure TpccTran.Set_GratuityAmnt(var Param1: WideString);
  { Warning: The property GratuityAmnt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GratuityAmnt := Param1;
end;

function TpccTran.Get_GratuityAmnt: WideString;
begin
    Result := DefaultInterface.GratuityAmnt;
end;

procedure TpccTran.Set_ItemID(var Param1: WideString);
  { Warning: The property ItemID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ItemID := Param1;
end;

function TpccTran.Get_ItemID: WideString;
begin
    Result := DefaultInterface.ItemID;
end;

procedure TpccTran.Set_Processor(var Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TpccTran.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TpccTran.Set_TID(var Param1: WideString);
  { Warning: The property TID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TID := Param1;
end;

function TpccTran.Get_TID: WideString;
begin
    Result := DefaultInterface.TID;
end;

procedure TpccTran.Set_Card(var Param1: WideString);
  { Warning: The property Card has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Card := Param1;
end;

function TpccTran.Get_Card: WideString;
begin
    Result := DefaultInterface.Card;
end;

procedure TpccTran.Set_ExpDate(var Param1: WideString);
  { Warning: The property ExpDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExpDate := Param1;
end;

function TpccTran.Get_ExpDate: WideString;
begin
    Result := DefaultInterface.ExpDate;
end;

procedure TpccTran.Set_Billpay(var Param1: WideString);
  { Warning: The property Billpay has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Billpay := Param1;
end;

function TpccTran.Get_Billpay: WideString;
begin
    Result := DefaultInterface.Billpay;
end;

procedure TpccTran.Set_Level3(var Param1: WideString);
  { Warning: The property Level3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Level3 := Param1;
end;

function TpccTran.Get_Level3: WideString;
begin
    Result := DefaultInterface.Level3;
end;

procedure TpccTran.Set_Action(var Param1: WideString);
  { Warning: The property Action has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := Param1;
end;

function TpccTran.Get_Action: WideString;
begin
    Result := DefaultInterface.Action;
end;

procedure TpccTran.Set_BatchCloseType(var Param1: WideString);
  { Warning: The property BatchCloseType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BatchCloseType := Param1;
end;

function TpccTran.Get_BatchCloseType: WideString;
begin
    Result := DefaultInterface.BatchCloseType;
end;

procedure TpccTran.Set_Manual(var Param1: WideString);
  { Warning: The property Manual has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Manual := Param1;
end;

function TpccTran.Get_Manual: WideString;
begin
    Result := DefaultInterface.Manual;
end;

procedure TpccTran.Set_Amount(var Param1: WideString);
  { Warning: The property Amount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Amount := Param1;
end;

function TpccTran.Get_Amount: WideString;
begin
    Result := DefaultInterface.Amount;
end;

procedure TpccTran.Set_Ref(var Param1: WideString);
  { Warning: The property Ref has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ref := Param1;
end;

function TpccTran.Get_Ref: WideString;
begin
    Result := DefaultInterface.Ref;
end;

procedure TpccTran.Set_Track(var Param1: WideString);
  { Warning: The property Track has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Track := Param1;
end;

function TpccTran.Get_Track: WideString;
begin
    Result := DefaultInterface.Track;
end;

procedure TpccTran.Set_CID(var Param1: WideString);
  { Warning: The property CID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CID := Param1;
end;

function TpccTran.Get_CID: WideString;
begin
    Result := DefaultInterface.CID;
end;

procedure TpccTran.Set_Tax(var Param1: WideString);
  { Warning: The property Tax has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tax := Param1;
end;

function TpccTran.Get_Tax: WideString;
begin
    Result := DefaultInterface.Tax;
end;

procedure TpccTran.Set_ExtFile(var Param1: WideString);
  { Warning: The property ExtFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExtFile := Param1;
end;

function TpccTran.Get_ExtFile: WideString;
begin
    Result := DefaultInterface.ExtFile;
end;

procedure TpccTran.Set_PrintReceipts(var Param1: WideString);
  { Warning: The property PrintReceipts has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrintReceipts := Param1;
end;

function TpccTran.Get_PrintReceipts: WideString;
begin
    Result := DefaultInterface.PrintReceipts;
end;

procedure TpccTran.Set_PeriodicPayment(var Param1: WideString);
  { Warning: The property PeriodicPayment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PeriodicPayment := Param1;
end;

function TpccTran.Get_PeriodicPayment: WideString;
begin
    Result := DefaultInterface.PeriodicPayment;
end;

procedure TpccTran.Set_OffLine(var Param1: WideString);
  { Warning: The property OffLine has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OffLine := Param1;
end;

function TpccTran.Get_OffLine: WideString;
begin
    Result := DefaultInterface.OffLine;
end;

procedure TpccTran.Set_VoidFlag(var Param1: WideString);
  { Warning: The property VoidFlag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VoidFlag := Param1;
end;

function TpccTran.Get_VoidFlag: WideString;
begin
    Result := DefaultInterface.VoidFlag;
end;

procedure TpccTran.Set_Zip(var Param1: WideString);
  { Warning: The property Zip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Zip := Param1;
end;

function TpccTran.Get_Zip: WideString;
begin
    Result := DefaultInterface.Zip;
end;

procedure TpccTran.Set_DestZip(var Param1: WideString);
  { Warning: The property DestZip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestZip := Param1;
end;

function TpccTran.Get_DestZip: WideString;
begin
    Result := DefaultInterface.DestZip;
end;

procedure TpccTran.Set_Street(var Param1: WideString);
  { Warning: The property Street has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Street := Param1;
end;

function TpccTran.Get_Street: WideString;
begin
    Result := DefaultInterface.Street;
end;

procedure TpccTran.Set_Ticket(var Param1: WideString);
  { Warning: The property Ticket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ticket := Param1;
end;

function TpccTran.Get_Ticket: WideString;
begin
    Result := DefaultInterface.Ticket;
end;

procedure TpccTran.Set_member(var Param1: WideString);
  { Warning: The property member has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.member := Param1;
end;

function TpccTran.Get_member: WideString;
begin
    Result := DefaultInterface.member;
end;

procedure TpccTran.Set_TI(var Param1: WideString);
  { Warning: The property TI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TI := Param1;
end;

function TpccTran.Get_TI: WideString;
begin
    Result := DefaultInterface.TI;
end;

procedure TpccTran.Set_TOTALAUTH(var Param1: WideString);
  { Warning: The property TOTALAUTH has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TOTALAUTH := Param1;
end;

function TpccTran.Get_TOTALAUTH: WideString;
begin
    Result := DefaultInterface.TOTALAUTH;
end;

procedure TpccTran.Set_SplitProcessor(var Param1: WideString);
  { Warning: The property SplitProcessor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SplitProcessor := Param1;
end;

function TpccTran.Get_SplitProcessor: WideString;
begin
    Result := DefaultInterface.SplitProcessor;
end;

procedure TpccTran.Set_MCSN(var Param1: WideString);
  { Warning: The property MCSN has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MCSN := Param1;
end;

function TpccTran.Get_MCSN: WideString;
begin
    Result := DefaultInterface.MCSN;
end;

procedure TpccTran.Set_MCSC(var Param1: WideString);
  { Warning: The property MCSC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MCSC := Param1;
end;

function TpccTran.Get_MCSC: WideString;
begin
    Result := DefaultInterface.MCSC;
end;

procedure TpccTran.Set_Multi(var Param1: WideString);
  { Warning: The property Multi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Multi := Param1;
end;

function TpccTran.Get_Multi: WideString;
begin
    Result := DefaultInterface.Multi;
end;

procedure TpccTran.Set_CVV2(var Param1: WideString);
  { Warning: The property CVV2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CVV2 := Param1;
end;

function TpccTran.Get_CVV2: WideString;
begin
    Result := DefaultInterface.CVV2;
end;

procedure TpccTran.Set_CardPresent(var Param1: WideString);
  { Warning: The property CardPresent has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CardPresent := Param1;
end;

function TpccTran.Get_CardPresent: WideString;
begin
    Result := DefaultInterface.CardPresent;
end;

procedure TpccTran.Set_TroutD(var Param1: WideString);
  { Warning: The property TroutD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TroutD := Param1;
end;

function TpccTran.Get_TroutD: WideString;
begin
    Result := DefaultInterface.TroutD;
end;

procedure TpccTran.Set_SequenceNum(var Param1: WideString);
  { Warning: The property SequenceNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SequenceNum := Param1;
end;

function TpccTran.Get_SequenceNum: WideString;
begin
    Result := DefaultInterface.SequenceNum;
end;

procedure TpccTran.Set_UserName(var Param1: WideString);
  { Warning: The property UserName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UserName := Param1;
end;

function TpccTran.Get_UserName: WideString;
begin
    Result := DefaultInterface.UserName;
end;

procedure TpccTran.Set_Password(var Param1: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := Param1;
end;

function TpccTran.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TpccTran.Set_InpType(var Param1: FileType);
begin
  DefaultInterface.Set_InpType(Param1);
end;

function TpccTran.Get_InpType: FileType;
begin
    Result := DefaultInterface.InpType;
end;

procedure TpccTran.Set_RespType(var Param1: TRespType);
begin
  DefaultInterface.Set_RespType(Param1);
end;

function TpccTran.Get_RespType: TRespType;
begin
    Result := DefaultInterface.RespType;
end;

function TpccTran.Get_Error: TranError;
begin
    Result := DefaultInterface.Error;
end;

procedure TpccTran.Set_FileName(var Param1: WideString);
  { Warning: The property FileName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FileName := Param1;
end;

function TpccTran.Get_FileName: WideString;
begin
    Result := DefaultInterface.FileName;
end;

procedure TpccTran.Set_XDRFile(var Param1: WideString);
  { Warning: The property XDRFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.XDRFile := Param1;
end;

function TpccTran.Get_XDRFile: WideString;
begin
    Result := DefaultInterface.XDRFile;
end;

procedure TpccTran.Set_CheckType(var Param1: WideString);
  { Warning: The property CheckType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CheckType := Param1;
end;

function TpccTran.Get_CheckType: WideString;
begin
    Result := DefaultInterface.CheckType;
end;

procedure TpccTran.Set_CheckAccType(var Param1: WideString);
  { Warning: The property CheckAccType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CheckAccType := Param1;
end;

function TpccTran.Get_CheckAccType: WideString;
begin
    Result := DefaultInterface.CheckAccType;
end;

procedure TpccTran.Set_MICRStatus(var Param1: WideString);
  { Warning: The property MICRStatus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MICRStatus := Param1;
end;

function TpccTran.Get_MICRStatus: WideString;
begin
    Result := DefaultInterface.MICRStatus;
end;

procedure TpccTran.Set_CustomerName(var Param1: WideString);
  { Warning: The property CustomerName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerName := Param1;
end;

function TpccTran.Get_CustomerName: WideString;
begin
    Result := DefaultInterface.CustomerName;
end;

procedure TpccTran.Set_CustomerFirstName(var Param1: WideString);
  { Warning: The property CustomerFirstName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerFirstName := Param1;
end;

function TpccTran.Get_CustomerStreet: WideString;
begin
    Result := DefaultInterface.CustomerStreet;
end;

procedure TpccTran.Set_CustomerStreet(var Param1: WideString);
  { Warning: The property CustomerStreet has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerStreet := Param1;
end;

function TpccTran.Get_CheckReaderCode: WideString;
begin
    Result := DefaultInterface.CheckReaderCode;
end;

procedure TpccTran.Set_CheckReaderCode(var Param1: WideString);
  { Warning: The property CheckReaderCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CheckReaderCode := Param1;
end;

function TpccTran.Get_CustomerFirstName: WideString;
begin
    Result := DefaultInterface.CustomerFirstName;
end;

procedure TpccTran.Set_CustomerLastName(var Param1: WideString);
  { Warning: The property CustomerLastName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerLastName := Param1;
end;

function TpccTran.Get_CustomerLastName: WideString;
begin
    Result := DefaultInterface.CustomerLastName;
end;

procedure TpccTran.Set_CustomerCity(var Param1: WideString);
  { Warning: The property CustomerCity has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerCity := Param1;
end;

function TpccTran.Get_CustomerCity: WideString;
begin
    Result := DefaultInterface.CustomerCity;
end;

procedure TpccTran.Set_IDType(var Param1: WideString);
  { Warning: The property IDType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IDType := Param1;
end;

function TpccTran.Get_IDType: WideString;
begin
    Result := DefaultInterface.IDType;
end;

procedure TpccTran.Set_IDCountry(var Param1: WideString);
  { Warning: The property IDCountry has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IDCountry := Param1;
end;

function TpccTran.Get_IDCountry: WideString;
begin
    Result := DefaultInterface.IDCountry;
end;

procedure TpccTran.Set_DLTrackII(var Param1: WideString);
  { Warning: The property DLTrackII has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DLTrackII := Param1;
end;

function TpccTran.Get_DLTrackII: WideString;
begin
    Result := DefaultInterface.DLTrackII;
end;

procedure TpccTran.Set_IsPurchaseCard(var Param1: WordBool);
begin
  DefaultInterface.Set_IsPurchaseCard(Param1);
end;

function TpccTran.Get_IsPurchaseCard: WordBool;
begin
    Result := DefaultInterface.IsPurchaseCard;
end;

procedure TpccTran.Set_DriverID(var Param1: WideString);
  { Warning: The property DriverID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DriverID := Param1;
end;

function TpccTran.Get_DriverID: WideString;
begin
    Result := DefaultInterface.DriverID;
end;

procedure TpccTran.Set_DriverPIN(var Param1: WideString);
  { Warning: The property DriverPIN has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DriverPIN := Param1;
end;

function TpccTran.Get_DriverPIN: WideString;
begin
    Result := DefaultInterface.DriverPIN;
end;

procedure TpccTran.Set_IDNumber(var Param1: WideString);
  { Warning: The property IDNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IDNumber := Param1;
end;

function TpccTran.Get_IDNumber: WideString;
begin
    Result := DefaultInterface.IDNumber;
end;

procedure TpccTran.Set_Odometer(var Param1: WideString);
  { Warning: The property Odometer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Odometer := Param1;
end;

function TpccTran.Get_Odometer: WideString;
begin
    Result := DefaultInterface.Odometer;
end;

procedure TpccTran.Set_RestrictionCode(var Param1: WideString);
  { Warning: The property RestrictionCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RestrictionCode := Param1;
end;

function TpccTran.Get_RestrictionCode: WideString;
begin
    Result := DefaultInterface.RestrictionCode;
end;

procedure TpccTran.Set_VehicleID(var Param1: WideString);
  { Warning: The property VehicleID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VehicleID := Param1;
end;

function TpccTran.Get_VehicleID: WideString;
begin
    Result := DefaultInterface.VehicleID;
end;

procedure TpccTran.Set_ProductDetailCount(var Param1: WideString);
  { Warning: The property ProductDetailCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCount := Param1;
end;

function TpccTran.Get_ProductDetailCount: WideString;
begin
    Result := DefaultInterface.ProductDetailCount;
end;

procedure TpccTran.Set_ProductDetailCode_1(var Param1: WideString);
  { Warning: The property ProductDetailCode_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_1 := Param1;
end;

function TpccTran.Get_ProductDetailCode_1: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_1;
end;

procedure TpccTran.Set_ProductDetailCode_2(var Param1: WideString);
  { Warning: The property ProductDetailCode_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_2 := Param1;
end;

function TpccTran.Get_ProductDetailCode_2: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_2;
end;

procedure TpccTran.Set_ProductDetailCode_3(var Param1: WideString);
  { Warning: The property ProductDetailCode_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_3 := Param1;
end;

function TpccTran.Get_ProductDetailCode_3: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_3;
end;

procedure TpccTran.Set_ProductDetailCode_4(var Param1: WideString);
  { Warning: The property ProductDetailCode_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_4 := Param1;
end;

function TpccTran.Get_ProductDetailCode_4: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_4;
end;

procedure TpccTran.Set_ProductDetailCode_5(var Param1: WideString);
  { Warning: The property ProductDetailCode_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_5 := Param1;
end;

function TpccTran.Get_ProductDetailCode_5: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_5;
end;

procedure TpccTran.Set_ProductDetailCode_6(var Param1: WideString);
  { Warning: The property ProductDetailCode_6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_6 := Param1;
end;

function TpccTran.Get_ProductDetailCode_6: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_6;
end;

procedure TpccTran.Set_ProductDetailCode_7(var Param1: WideString);
  { Warning: The property ProductDetailCode_7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_7 := Param1;
end;

function TpccTran.Get_ProductDetailCode_7: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_7;
end;

procedure TpccTran.Set_ProductDetailCode_8(var Param1: WideString);
  { Warning: The property ProductDetailCode_8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_8 := Param1;
end;

function TpccTran.Get_ProductDetailCode_8: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_8;
end;

procedure TpccTran.Set_ProductDetailCode_9(var Param1: WideString);
  { Warning: The property ProductDetailCode_9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_9 := Param1;
end;

function TpccTran.Get_ProductDetailCode_9: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_9;
end;

procedure TpccTran.Set_ProductDetailCode_10(var Param1: WideString);
  { Warning: The property ProductDetailCode_10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_10 := Param1;
end;

function TpccTran.Get_ProductDetailCode_10: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_10;
end;

procedure TpccTran.Set_ProductDetailAmount_1(var Param1: WideString);
  { Warning: The property ProductDetailAmount_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_1 := Param1;
end;

function TpccTran.Get_ProductDetailAmount_1: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_1;
end;

procedure TpccTran.Set_ProductDetailAmount_2(var Param1: WideString);
  { Warning: The property ProductDetailAmount_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_2 := Param1;
end;

function TpccTran.Get_ProductDetailAmount_2: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_2;
end;

procedure TpccTran.Set_ProductDetailAmount_3(var Param1: WideString);
  { Warning: The property ProductDetailAmount_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_3 := Param1;
end;

function TpccTran.Get_ProductDetailAmount_3: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_3;
end;

procedure TpccTran.Set_ProductDetailAmount_4(var Param1: WideString);
  { Warning: The property ProductDetailAmount_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_4 := Param1;
end;

function TpccTran.Get_ProductDetailAmount_4: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_4;
end;

procedure TpccTran.Set_ProductDetailAmount_5(var Param1: WideString);
  { Warning: The property ProductDetailAmount_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_5 := Param1;
end;

function TpccTran.Get_ProductDetailAmount_5: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_5;
end;

procedure TpccTran.Set_ProductDetailAmount_6(var Param1: WideString);
  { Warning: The property ProductDetailAmount_6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_6 := Param1;
end;

function TpccTran.Get_ProductDetailAmount_6: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_6;
end;

procedure TpccTran.Set_ProductDetailAmount_7(var Param1: WideString);
  { Warning: The property ProductDetailAmount_7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_7 := Param1;
end;

function TpccTran.Get_ProductDetailAmount_7: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_7;
end;

procedure TpccTran.Set_ProductDetailAmount_8(var Param1: WideString);
  { Warning: The property ProductDetailAmount_8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_8 := Param1;
end;

function TpccTran.Get_ProductDetailAmount_8: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_8;
end;

procedure TpccTran.Set_ProductDetailAmount_9(var Param1: WideString);
  { Warning: The property ProductDetailAmount_9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_9 := Param1;
end;

function TpccTran.Get_ProductDetailAmount_9: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_9;
end;

procedure TpccTran.Set_ProductDetailAmount_10(var Param1: WideString);
  { Warning: The property ProductDetailAmount_10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_10 := Param1;
end;

function TpccTran.Get_ProductDetailAmount_10: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_10;
end;

procedure TpccTran.Set_ProductDetailQuantity_1(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_1 := Param1;
end;

function TpccTran.Get_ProductDetailQuantity_1: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_1;
end;

procedure TpccTran.Set_ProductDetailQuantity_2(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_2 := Param1;
end;

function TpccTran.Get_ProductDetailQuantity_2: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_2;
end;

procedure TpccTran.Set_ProductDetailQuantity_3(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_3 := Param1;
end;

function TpccTran.Get_ProductDetailQuantity_3: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_3;
end;

procedure TpccTran.Set_ProductDetailQuantity_4(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_4 := Param1;
end;

function TpccTran.Get_ProductDetailQuantity_4: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_4;
end;

procedure TpccTran.Set_ProductDetailQuantity_5(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_5 := Param1;
end;

function TpccTran.Get_ProductDetailQuantity_5: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_5;
end;

procedure TpccTran.Set_ProductDetailQuantity_6(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_6 := Param1;
end;

function TpccTran.Get_ProductDetailQuantity_6: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_6;
end;

procedure TpccTran.Set_ProductDetailQuantity_7(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_7 := Param1;
end;

function TpccTran.Get_ProductDetailQuantity_7: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_7;
end;

procedure TpccTran.Set_ProductDetailQuantity_8(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_8 := Param1;
end;

function TpccTran.Get_ProductDetailQuantity_8: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_8;
end;

procedure TpccTran.Set_ProductDetailQuantity_9(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_9 := Param1;
end;

function TpccTran.Get_ProductDetailQuantity_9: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_9;
end;

procedure TpccTran.Set_ProductDetailQuantity_10(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_10 := Param1;
end;

function TpccTran.Get_ProductDetailQuantity_10: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_10;
end;

procedure TpccTran.Set_StoreNum(var Param1: WideString);
  { Warning: The property StoreNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StoreNum := Param1;
end;

function TpccTran.Get_StoreNum: WideString;
begin
    Result := DefaultInterface.StoreNum;
end;

procedure TpccTran.Set_SSNum(var Param1: WideString);
  { Warning: The property SSNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SSNum := Param1;
end;

function TpccTran.Get_SSNum: WideString;
begin
    Result := DefaultInterface.SSNum;
end;

procedure TpccTran.Set_CustomerHouseNum(var Param1: WideString);
  { Warning: The property CustomerHouseNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerHouseNum := Param1;
end;

function TpccTran.Get_CustomerHouseNum: WideString;
begin
    Result := DefaultInterface.CustomerHouseNum;
end;

procedure TpccTran.Set_PumpNumber(var Param1: WideString);
  { Warning: The property PumpNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PumpNumber := Param1;
end;

function TpccTran.Get_PumpNumber: WideString;
begin
    Result := DefaultInterface.PumpNumber;
end;

procedure TpccTran.Set_SurchargeAmount(var Param1: WideString);
  { Warning: The property SurchargeAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SurchargeAmount := Param1;
end;

function TpccTran.Get_SurchargeAmount: WideString;
begin
    Result := DefaultInterface.SurchargeAmount;
end;

procedure TpccTran.Set_VirtualGiftCardFlag(var Param1: WordBool);
begin
  DefaultInterface.Set_VirtualGiftCardFlag(Param1);
end;

function TpccTran.Get_VirtualGiftCardFlag: WordBool;
begin
    Result := DefaultInterface.VirtualGiftCardFlag;
end;

procedure TpccTran.Set_GiftPin(var Param1: WideString);
  { Warning: The property GiftPin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiftPin := Param1;
end;

function TpccTran.Get_GiftPin: WideString;
begin
    Result := DefaultInterface.GiftPin;
end;

procedure TpccTran.Set_ProcRespCode(var Param1: WideString);
  { Warning: The property ProcRespCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProcRespCode := Param1;
end;

function TpccTran.Get_ProcRespCode: WideString;
begin
    Result := DefaultInterface.ProcRespCode;
end;

procedure TpccTran.Set_FleetCard(var Param1: WideString);
  { Warning: The property FleetCard has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FleetCard := Param1;
end;

function TpccTran.Get_FleetCard: WideString;
begin
    Result := DefaultInterface.FleetCard;
end;

procedure TpccTran.Set_TableNumber(var Param1: WideString);
  { Warning: The property TableNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TableNumber := Param1;
end;

function TpccTran.Get_TableNumber: WideString;
begin
    Result := DefaultInterface.TableNumber;
end;

procedure TpccTran.Set_TrackI(var Param1: WideString);
  { Warning: The property TrackI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TrackI := Param1;
end;

function TpccTran.Get_TrackI: WideString;
begin
    Result := DefaultInterface.TrackI;
end;

procedure TpccTran.Set_CreditPlanNumber(var Param1: WideString);
  { Warning: The property CreditPlanNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreditPlanNumber := Param1;
end;

function TpccTran.Get_CreditPlanNumber: WideString;
begin
    Result := DefaultInterface.CreditPlanNumber;
end;

function TpccTran.Load(var szFileName: OleVariant; var intRecNum: Smallint; 
                       var blnValidate: WordBool): TranErrType;
begin
  Result := DefaultInterface.Load(szFileName, intRecNum, blnValidate);
end;

function TpccTran.WriteFile(var eType: FileType; var szNewPrefix: OleVariant; 
                            var szNewPath: OleVariant; var intRecNum: Smallint): TranErrType;
begin
  Result := DefaultInterface.WriteFile(eType, szNewPrefix, szNewPath, intRecNum);
end;

function TpccTran.ValidateRequiredFields: TranErrType;
begin
  Result := DefaultInterface.ValidateRequiredFields;
end;

function TpccTran.CleanString(var szStringIn: WideString; var szReplaceList: WideString; 
                              var blnCompact: WordBool; var blnTrim: WordBool; 
                              var blnRmvNP: WordBool): WideString;
begin
  Result := DefaultInterface.CleanString(szStringIn, szReplaceList, blnCompact, blnTrim, blnRmvNP);
end;

procedure TpccTran.Clear;
begin
  DefaultInterface.Clear;
end;

procedure TpccTran.ClearTranData;
begin
  DefaultInterface.ClearTranData;
end;

procedure TpccTran.ClearErr;
begin
  DefaultInterface.ClearErr;
end;

function TpccTran.TxnType: Smallint;
begin
  Result := DefaultInterface.TxnType;
end;

function TpccTran.LoadTranData(var intNdx: Smallint): OleVariant;
begin
  Result := DefaultInterface.LoadTranData(intNdx);
end;

function TpccTran.WriteRawXML(var szOutString: WideString; var szFileName: WideString): TranErrType;
begin
  Result := DefaultInterface.WriteRawXML(szOutString, szFileName, EmptyParam);
end;

function TpccTran.WriteRawXML(var szOutString: WideString; var szFileName: WideString; 
                              var szPath: OleVariant): TranErrType;
begin
  Result := DefaultInterface.WriteRawXML(szOutString, szFileName, szPath);
end;

function TpccTran.PrepString(var szInData: WideString): WideString;
begin
  Result := DefaultInterface.PrepString(szInData);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TpccTranProperties.Create(AServer: TpccTran);
begin
  inherited Create;
  FServer := AServer;
end;

function TpccTranProperties.GetDefaultInterface: _pccTran;
begin
  Result := FServer.DefaultInterface;
end;

function TpccTranProperties.Get_mszTransPacket: WideString;
begin
    Result := DefaultInterface.mszTransPacket;
end;

procedure TpccTranProperties.Set_mszTransPacket(const mszTransPacket: WideString);
  { Warning: The property mszTransPacket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.mszTransPacket := mszTransPacket;
end;

procedure TpccTranProperties.Set_TransPacket(var Param1: WideString);
  { Warning: The property TransPacket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransPacket := Param1;
end;

function TpccTranProperties.Get_TransPacket: WideString;
begin
    Result := DefaultInterface.TransPacket;
end;

procedure TpccTranProperties.Set_TaxExempt(var Param1: WordBool);
begin
  DefaultInterface.Set_TaxExempt(Param1);
end;

function TpccTranProperties.Get_TaxExempt: WordBool;
begin
    Result := DefaultInterface.TaxExempt;
end;

procedure TpccTranProperties.Set_Method(var Param1: TxnMethodType);
begin
  DefaultInterface.Set_Method(Param1);
end;

function TpccTranProperties.Get_Method: TxnMethodType;
begin
    Result := DefaultInterface.Method;
end;

procedure TpccTranProperties.Set_TransTime(var Param1: WideString);
  { Warning: The property TransTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransTime := Param1;
end;

function TpccTranProperties.Get_TransTime: WideString;
begin
    Result := DefaultInterface.TransTime;
end;

procedure TpccTranProperties.Set_TotTransTime(var Param1: WideString);
  { Warning: The property TotTransTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TotTransTime := Param1;
end;

function TpccTranProperties.Get_TotTransTime: WideString;
begin
    Result := DefaultInterface.TotTransTime;
end;

procedure TpccTranProperties.Set_Authcode(var Param1: WideString);
  { Warning: The property Authcode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Authcode := Param1;
end;

function TpccTranProperties.Get_Authcode: WideString;
begin
    Result := DefaultInterface.Authcode;
end;

procedure TpccTranProperties.Set_TxnTimeout(var Param1: WideString);
  { Warning: The property TxnTimeout has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TxnTimeout := Param1;
end;

function TpccTranProperties.Get_TxnTimeout: WideString;
begin
    Result := DefaultInterface.TxnTimeout;
end;

procedure TpccTranProperties.Set_CfgEnabled(var Param1: WordBool);
begin
  DefaultInterface.Set_CfgEnabled(Param1);
end;

function TpccTranProperties.Get_CfgEnabled: WordBool;
begin
    Result := DefaultInterface.CfgEnabled;
end;

procedure TpccTranProperties.Set_CfgType(var Param1: Byte);
begin
  DefaultInterface.Set_CfgType(Param1);
end;

function TpccTranProperties.Get_CfgType: Byte;
begin
    Result := DefaultInterface.CfgType;
end;

procedure TpccTranProperties.Set_CfgPath(var Param1: WideString);
  { Warning: The property CfgPath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CfgPath := Param1;
end;

function TpccTranProperties.Get_CfgPath: WideString;
begin
    Result := DefaultInterface.CfgPath;
end;

procedure TpccTranProperties.Set_CfgSizeLimit(var Param1: WideString);
  { Warning: The property CfgSizeLimit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CfgSizeLimit := Param1;
end;

function TpccTranProperties.Get_CfgSizeLimit: WideString;
begin
    Result := DefaultInterface.CfgSizeLimit;
end;

procedure TpccTranProperties.Set_CfgKeepDays(var Param1: WideString);
  { Warning: The property CfgKeepDays has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CfgKeepDays := Param1;
end;

function TpccTranProperties.Get_CfgKeepDays: WideString;
begin
    Result := DefaultInterface.CfgKeepDays;
end;

procedure TpccTranProperties.Set_Partial(var Param1: WordBool);
begin
  DefaultInterface.Set_Partial(Param1);
end;

function TpccTranProperties.Get_Partial: WordBool;
begin
    Result := DefaultInterface.Partial;
end;

procedure TpccTranProperties.Set_Force(var Param1: WordBool);
begin
  DefaultInterface.Set_Force(Param1);
end;

function TpccTranProperties.Get_Force: WordBool;
begin
    Result := DefaultInterface.Force;
end;

procedure TpccTranProperties.Set_TotalNumCards(var Param1: WideString);
  { Warning: The property TotalNumCards has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TotalNumCards := Param1;
end;

function TpccTranProperties.Get_TotalNumCards: WideString;
begin
    Result := DefaultInterface.TotalNumCards;
end;

procedure TpccTranProperties.Set_GiftSeqNum(var Param1: WideString);
  { Warning: The property GiftSeqNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiftSeqNum := Param1;
end;

function TpccTranProperties.Get_GiftSeqNum: WideString;
begin
    Result := DefaultInterface.GiftSeqNum;
end;

procedure TpccTranProperties.Set_IndType(var Param1: WideString);
  { Warning: The property IndType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IndType := Param1;
end;

function TpccTranProperties.Get_IndType: WideString;
begin
    Result := DefaultInterface.IndType;
end;

procedure TpccTranProperties.Set_SourceCard(var Param1: WideString);
  { Warning: The property SourceCard has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceCard := Param1;
end;

function TpccTranProperties.Get_SourceCard: WideString;
begin
    Result := DefaultInterface.SourceCard;
end;

procedure TpccTranProperties.Set_Loyalty(var Param1: WordBool);
begin
  DefaultInterface.Set_Loyalty(Param1);
end;

function TpccTranProperties.Get_Loyalty: WordBool;
begin
    Result := DefaultInterface.Loyalty;
end;

procedure TpccTranProperties.Set_GiftUnits(var Param1: WideString);
  { Warning: The property GiftUnits has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiftUnits := Param1;
end;

function TpccTranProperties.Get_GiftUnits: WideString;
begin
    Result := DefaultInterface.GiftUnits;
end;

procedure TpccTranProperties.Set_CashierNum(var Param1: WideString);
  { Warning: The property CashierNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashierNum := Param1;
end;

function TpccTranProperties.Get_CashierNum: WideString;
begin
    Result := DefaultInterface.CashierNum;
end;

procedure TpccTranProperties.Set_CashierID(var Param1: WideString);
  { Warning: The property CashierID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashierID := Param1;
end;

function TpccTranProperties.Get_CashierID: WideString;
begin
    Result := DefaultInterface.CashierID;
end;

procedure TpccTranProperties.Set_ManagerNum(var Param1: WideString);
  { Warning: The property ManagerNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ManagerNum := Param1;
end;

function TpccTranProperties.Get_ManagerNum: WideString;
begin
    Result := DefaultInterface.ManagerNum;
end;

procedure TpccTranProperties.Set_CheckNum(var Param1: WideString);
  { Warning: The property CheckNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CheckNum := Param1;
end;

function TpccTranProperties.Get_CheckNum: WideString;
begin
    Result := DefaultInterface.CheckNum;
end;

procedure TpccTranProperties.Set_RFID(var Param1: WideString);
  { Warning: The property RFID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RFID := Param1;
end;

function TpccTranProperties.Get_RFID: WideString;
begin
    Result := DefaultInterface.RFID;
end;

procedure TpccTranProperties.Set_Birth_Date(var Param1: WideString);
  { Warning: The property Birth_Date has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Birth_Date := Param1;
end;

function TpccTranProperties.Get_Birth_Date: WideString;
begin
    Result := DefaultInterface.Birth_Date;
end;

procedure TpccTranProperties.Set_Phone_Number(var Param1: WideString);
  { Warning: The property Phone_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Phone_Number := Param1;
end;

function TpccTranProperties.Get_Phone_Number: WideString;
begin
    Result := DefaultInterface.Phone_Number;
end;

procedure TpccTranProperties.Set_ABANum(var Param1: WideString);
  { Warning: The property ABANum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ABANum := Param1;
end;

function TpccTranProperties.Get_ABANum: WideString;
begin
    Result := DefaultInterface.ABANum;
end;

procedure TpccTranProperties.Set_License(var Param1: WideString);
  { Warning: The property License has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.License := Param1;
end;

function TpccTranProperties.Get_License: WideString;
begin
    Result := DefaultInterface.License;
end;

procedure TpccTranProperties.Set_State(var Param1: WideString);
  { Warning: The property State has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.State := Param1;
end;

function TpccTranProperties.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TpccTranProperties.Set_MICR(var Param1: WideString);
  { Warning: The property MICR has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MICR := Param1;
end;

function TpccTranProperties.Get_MICR: WideString;
begin
    Result := DefaultInterface.MICR;
end;

procedure TpccTranProperties.Set_OrigPurchData(var Param1: WideString);
  { Warning: The property OrigPurchData has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OrigPurchData := Param1;
end;

function TpccTranProperties.Get_OrigPurchData: WideString;
begin
    Result := DefaultInterface.OrigPurchData;
end;

procedure TpccTranProperties.Set_VoucherNum(var Param1: WideString);
  { Warning: The property VoucherNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VoucherNum := Param1;
end;

function TpccTranProperties.Get_VoucherNum: WideString;
begin
    Result := DefaultInterface.VoucherNum;
end;

procedure TpccTranProperties.Set_POSSeqNum(var Param1: WideString);
  { Warning: The property POSSeqNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.POSSeqNum := Param1;
end;

function TpccTranProperties.Get_POSSeqNum: WideString;
begin
    Result := DefaultInterface.POSSeqNum;
end;

procedure TpccTranProperties.Set_DebitType(var Param1: WideString);
  { Warning: The property DebitType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DebitType := Param1;
end;

function TpccTranProperties.Get_DebitType: WideString;
begin
    Result := DefaultInterface.DebitType;
end;

procedure TpccTranProperties.Set_MACBlock(var Param1: WideString);
  { Warning: The property MACBlock has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MACBlock := Param1;
end;

function TpccTranProperties.Get_MACBlock: WideString;
begin
    Result := DefaultInterface.MACBlock;
end;

procedure TpccTranProperties.Set_PINBlock(var Param1: WideString);
  { Warning: The property PINBlock has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PINBlock := Param1;
end;

function TpccTranProperties.Get_PINBlock: WideString;
begin
    Result := DefaultInterface.PINBlock;
end;

procedure TpccTranProperties.Set_CashbackAmnt(var Param1: WideString);
  { Warning: The property CashbackAmnt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashbackAmnt := Param1;
end;

function TpccTranProperties.Get_CashbackAmnt: WideString;
begin
    Result := DefaultInterface.CashbackAmnt;
end;

procedure TpccTranProperties.Set_KeySerialNum(var Param1: WideString);
  { Warning: The property KeySerialNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KeySerialNum := Param1;
end;

function TpccTranProperties.Get_KeySerialNum: WideString;
begin
    Result := DefaultInterface.KeySerialNum;
end;

procedure TpccTranProperties.Set_LanguageCode(var Param1: WideString);
  { Warning: The property LanguageCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LanguageCode := Param1;
end;

function TpccTranProperties.Get_LanguageCode: WideString;
begin
    Result := DefaultInterface.LanguageCode;
end;

procedure TpccTranProperties.Set_ShiftID(var Param1: WideString);
  { Warning: The property ShiftID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ShiftID := Param1;
end;

function TpccTranProperties.Get_ShiftID: WideString;
begin
    Result := DefaultInterface.ShiftID;
end;

procedure TpccTranProperties.Set_PromoCode(var Param1: WideString);
  { Warning: The property PromoCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PromoCode := Param1;
end;

function TpccTranProperties.Get_PromoCode: WideString;
begin
    Result := DefaultInterface.PromoCode;
end;

function TpccTranProperties.Get_TranCount: WideString;
begin
    Result := DefaultInterface.TranCount;
end;

procedure TpccTranProperties.Set_Store(var Param1: WideString);
  { Warning: The property Store has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Store := Param1;
end;

function TpccTranProperties.Get_Store: WideString;
begin
    Result := DefaultInterface.Store;
end;

procedure TpccTranProperties.Set_EBTType(var Param1: WideString);
  { Warning: The property EBTType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EBTType := Param1;
end;

function TpccTranProperties.Get_EBTType: WideString;
begin
    Result := DefaultInterface.EBTType;
end;

function TpccTranProperties.Get_GetXML: WideString;
begin
    Result := DefaultInterface.GetXML;
end;

procedure TpccTranProperties.Set_AmxDescription_1(var Param1: WideString);
  { Warning: The property AmxDescription_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_1 := Param1;
end;

function TpccTranProperties.Get_AmxDescription_1: WideString;
begin
    Result := DefaultInterface.AmxDescription_1;
end;

procedure TpccTranProperties.Set_AmxDescription_2(var Param1: WideString);
  { Warning: The property AmxDescription_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_2 := Param1;
end;

function TpccTranProperties.Get_AmxDescription_2: WideString;
begin
    Result := DefaultInterface.AmxDescription_2;
end;

procedure TpccTranProperties.Set_AmxDescription_3(var Param1: WideString);
  { Warning: The property AmxDescription_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_3 := Param1;
end;

function TpccTranProperties.Get_AmxDescription_3: WideString;
begin
    Result := DefaultInterface.AmxDescription_3;
end;

procedure TpccTranProperties.Set_AmxDescription_4(var Param1: WideString);
  { Warning: The property AmxDescription_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_4 := Param1;
end;

function TpccTranProperties.Get_AmxDescription_4: WideString;
begin
    Result := DefaultInterface.AmxDescription_4;
end;

procedure TpccTranProperties.Set_AmxChargeDescription(var Param1: WideString);
  { Warning: The property AmxChargeDescription has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxChargeDescription := Param1;
end;

function TpccTranProperties.Get_AmxChargeDescription: WideString;
begin
    Result := DefaultInterface.AmxChargeDescription;
end;

procedure TpccTranProperties.Set_OriginalAmnt(var Param1: WideString);
  { Warning: The property OriginalAmnt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OriginalAmnt := Param1;
end;

function TpccTranProperties.Get_OriginalAmnt: WideString;
begin
    Result := DefaultInterface.OriginalAmnt;
end;

procedure TpccTranProperties.Set_TargetTransaction(var Param1: WideString);
  { Warning: The property TargetTransaction has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TargetTransaction := Param1;
end;

function TpccTranProperties.Get_TargetTransaction: WideString;
begin
    Result := DefaultInterface.TargetTransaction;
end;

procedure TpccTranProperties.Set_CmrclCardFlag(var Param1: WideString);
  { Warning: The property CmrclCardFlag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CmrclCardFlag := Param1;
end;

function TpccTranProperties.Get_CmrclCardFlag: WideString;
begin
    Result := DefaultInterface.CmrclCardFlag;
end;

procedure TpccTranProperties.Set_ImpTransFlag(var Param1: WordBool);
begin
  DefaultInterface.Set_ImpTransFlag(Param1);
end;

function TpccTranProperties.Get_ImpTransFlag: WordBool;
begin
    Result := DefaultInterface.ImpTransFlag;
end;

procedure TpccTranProperties.Set_EnhancedTransFlag(var Param1: WordBool);
begin
  DefaultInterface.Set_EnhancedTransFlag(Param1);
end;

function TpccTranProperties.Get_EnhancedTransFlag: WordBool;
begin
    Result := DefaultInterface.EnhancedTransFlag;
end;

procedure TpccTranProperties.Set_GratuityAmntEst(var Param1: WideString);
  { Warning: The property GratuityAmntEst has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GratuityAmntEst := Param1;
end;

function TpccTranProperties.Get_GratuityAmntEst: WideString;
begin
    Result := DefaultInterface.GratuityAmntEst;
end;

procedure TpccTranProperties.Set_GratuityAmnt(var Param1: WideString);
  { Warning: The property GratuityAmnt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GratuityAmnt := Param1;
end;

function TpccTranProperties.Get_GratuityAmnt: WideString;
begin
    Result := DefaultInterface.GratuityAmnt;
end;

procedure TpccTranProperties.Set_ItemID(var Param1: WideString);
  { Warning: The property ItemID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ItemID := Param1;
end;

function TpccTranProperties.Get_ItemID: WideString;
begin
    Result := DefaultInterface.ItemID;
end;

procedure TpccTranProperties.Set_Processor(var Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TpccTranProperties.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TpccTranProperties.Set_TID(var Param1: WideString);
  { Warning: The property TID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TID := Param1;
end;

function TpccTranProperties.Get_TID: WideString;
begin
    Result := DefaultInterface.TID;
end;

procedure TpccTranProperties.Set_Card(var Param1: WideString);
  { Warning: The property Card has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Card := Param1;
end;

function TpccTranProperties.Get_Card: WideString;
begin
    Result := DefaultInterface.Card;
end;

procedure TpccTranProperties.Set_ExpDate(var Param1: WideString);
  { Warning: The property ExpDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExpDate := Param1;
end;

function TpccTranProperties.Get_ExpDate: WideString;
begin
    Result := DefaultInterface.ExpDate;
end;

procedure TpccTranProperties.Set_Billpay(var Param1: WideString);
  { Warning: The property Billpay has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Billpay := Param1;
end;

function TpccTranProperties.Get_Billpay: WideString;
begin
    Result := DefaultInterface.Billpay;
end;

procedure TpccTranProperties.Set_Level3(var Param1: WideString);
  { Warning: The property Level3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Level3 := Param1;
end;

function TpccTranProperties.Get_Level3: WideString;
begin
    Result := DefaultInterface.Level3;
end;

procedure TpccTranProperties.Set_Action(var Param1: WideString);
  { Warning: The property Action has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := Param1;
end;

function TpccTranProperties.Get_Action: WideString;
begin
    Result := DefaultInterface.Action;
end;

procedure TpccTranProperties.Set_BatchCloseType(var Param1: WideString);
  { Warning: The property BatchCloseType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BatchCloseType := Param1;
end;

function TpccTranProperties.Get_BatchCloseType: WideString;
begin
    Result := DefaultInterface.BatchCloseType;
end;

procedure TpccTranProperties.Set_Manual(var Param1: WideString);
  { Warning: The property Manual has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Manual := Param1;
end;

function TpccTranProperties.Get_Manual: WideString;
begin
    Result := DefaultInterface.Manual;
end;

procedure TpccTranProperties.Set_Amount(var Param1: WideString);
  { Warning: The property Amount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Amount := Param1;
end;

function TpccTranProperties.Get_Amount: WideString;
begin
    Result := DefaultInterface.Amount;
end;

procedure TpccTranProperties.Set_Ref(var Param1: WideString);
  { Warning: The property Ref has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ref := Param1;
end;

function TpccTranProperties.Get_Ref: WideString;
begin
    Result := DefaultInterface.Ref;
end;

procedure TpccTranProperties.Set_Track(var Param1: WideString);
  { Warning: The property Track has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Track := Param1;
end;

function TpccTranProperties.Get_Track: WideString;
begin
    Result := DefaultInterface.Track;
end;

procedure TpccTranProperties.Set_CID(var Param1: WideString);
  { Warning: The property CID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CID := Param1;
end;

function TpccTranProperties.Get_CID: WideString;
begin
    Result := DefaultInterface.CID;
end;

procedure TpccTranProperties.Set_Tax(var Param1: WideString);
  { Warning: The property Tax has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tax := Param1;
end;

function TpccTranProperties.Get_Tax: WideString;
begin
    Result := DefaultInterface.Tax;
end;

procedure TpccTranProperties.Set_ExtFile(var Param1: WideString);
  { Warning: The property ExtFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExtFile := Param1;
end;

function TpccTranProperties.Get_ExtFile: WideString;
begin
    Result := DefaultInterface.ExtFile;
end;

procedure TpccTranProperties.Set_PrintReceipts(var Param1: WideString);
  { Warning: The property PrintReceipts has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrintReceipts := Param1;
end;

function TpccTranProperties.Get_PrintReceipts: WideString;
begin
    Result := DefaultInterface.PrintReceipts;
end;

procedure TpccTranProperties.Set_PeriodicPayment(var Param1: WideString);
  { Warning: The property PeriodicPayment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PeriodicPayment := Param1;
end;

function TpccTranProperties.Get_PeriodicPayment: WideString;
begin
    Result := DefaultInterface.PeriodicPayment;
end;

procedure TpccTranProperties.Set_OffLine(var Param1: WideString);
  { Warning: The property OffLine has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OffLine := Param1;
end;

function TpccTranProperties.Get_OffLine: WideString;
begin
    Result := DefaultInterface.OffLine;
end;

procedure TpccTranProperties.Set_VoidFlag(var Param1: WideString);
  { Warning: The property VoidFlag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VoidFlag := Param1;
end;

function TpccTranProperties.Get_VoidFlag: WideString;
begin
    Result := DefaultInterface.VoidFlag;
end;

procedure TpccTranProperties.Set_Zip(var Param1: WideString);
  { Warning: The property Zip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Zip := Param1;
end;

function TpccTranProperties.Get_Zip: WideString;
begin
    Result := DefaultInterface.Zip;
end;

procedure TpccTranProperties.Set_DestZip(var Param1: WideString);
  { Warning: The property DestZip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestZip := Param1;
end;

function TpccTranProperties.Get_DestZip: WideString;
begin
    Result := DefaultInterface.DestZip;
end;

procedure TpccTranProperties.Set_Street(var Param1: WideString);
  { Warning: The property Street has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Street := Param1;
end;

function TpccTranProperties.Get_Street: WideString;
begin
    Result := DefaultInterface.Street;
end;

procedure TpccTranProperties.Set_Ticket(var Param1: WideString);
  { Warning: The property Ticket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ticket := Param1;
end;

function TpccTranProperties.Get_Ticket: WideString;
begin
    Result := DefaultInterface.Ticket;
end;

procedure TpccTranProperties.Set_member(var Param1: WideString);
  { Warning: The property member has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.member := Param1;
end;

function TpccTranProperties.Get_member: WideString;
begin
    Result := DefaultInterface.member;
end;

procedure TpccTranProperties.Set_TI(var Param1: WideString);
  { Warning: The property TI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TI := Param1;
end;

function TpccTranProperties.Get_TI: WideString;
begin
    Result := DefaultInterface.TI;
end;

procedure TpccTranProperties.Set_TOTALAUTH(var Param1: WideString);
  { Warning: The property TOTALAUTH has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TOTALAUTH := Param1;
end;

function TpccTranProperties.Get_TOTALAUTH: WideString;
begin
    Result := DefaultInterface.TOTALAUTH;
end;

procedure TpccTranProperties.Set_SplitProcessor(var Param1: WideString);
  { Warning: The property SplitProcessor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SplitProcessor := Param1;
end;

function TpccTranProperties.Get_SplitProcessor: WideString;
begin
    Result := DefaultInterface.SplitProcessor;
end;

procedure TpccTranProperties.Set_MCSN(var Param1: WideString);
  { Warning: The property MCSN has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MCSN := Param1;
end;

function TpccTranProperties.Get_MCSN: WideString;
begin
    Result := DefaultInterface.MCSN;
end;

procedure TpccTranProperties.Set_MCSC(var Param1: WideString);
  { Warning: The property MCSC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MCSC := Param1;
end;

function TpccTranProperties.Get_MCSC: WideString;
begin
    Result := DefaultInterface.MCSC;
end;

procedure TpccTranProperties.Set_Multi(var Param1: WideString);
  { Warning: The property Multi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Multi := Param1;
end;

function TpccTranProperties.Get_Multi: WideString;
begin
    Result := DefaultInterface.Multi;
end;

procedure TpccTranProperties.Set_CVV2(var Param1: WideString);
  { Warning: The property CVV2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CVV2 := Param1;
end;

function TpccTranProperties.Get_CVV2: WideString;
begin
    Result := DefaultInterface.CVV2;
end;

procedure TpccTranProperties.Set_CardPresent(var Param1: WideString);
  { Warning: The property CardPresent has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CardPresent := Param1;
end;

function TpccTranProperties.Get_CardPresent: WideString;
begin
    Result := DefaultInterface.CardPresent;
end;

procedure TpccTranProperties.Set_TroutD(var Param1: WideString);
  { Warning: The property TroutD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TroutD := Param1;
end;

function TpccTranProperties.Get_TroutD: WideString;
begin
    Result := DefaultInterface.TroutD;
end;

procedure TpccTranProperties.Set_SequenceNum(var Param1: WideString);
  { Warning: The property SequenceNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SequenceNum := Param1;
end;

function TpccTranProperties.Get_SequenceNum: WideString;
begin
    Result := DefaultInterface.SequenceNum;
end;

procedure TpccTranProperties.Set_UserName(var Param1: WideString);
  { Warning: The property UserName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UserName := Param1;
end;

function TpccTranProperties.Get_UserName: WideString;
begin
    Result := DefaultInterface.UserName;
end;

procedure TpccTranProperties.Set_Password(var Param1: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := Param1;
end;

function TpccTranProperties.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TpccTranProperties.Set_InpType(var Param1: FileType);
begin
  DefaultInterface.Set_InpType(Param1);
end;

function TpccTranProperties.Get_InpType: FileType;
begin
    Result := DefaultInterface.InpType;
end;

procedure TpccTranProperties.Set_RespType(var Param1: TRespType);
begin
  DefaultInterface.Set_RespType(Param1);
end;

function TpccTranProperties.Get_RespType: TRespType;
begin
    Result := DefaultInterface.RespType;
end;

function TpccTranProperties.Get_Error: TranError;
begin
    Result := DefaultInterface.Error;
end;

procedure TpccTranProperties.Set_FileName(var Param1: WideString);
  { Warning: The property FileName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FileName := Param1;
end;

function TpccTranProperties.Get_FileName: WideString;
begin
    Result := DefaultInterface.FileName;
end;

procedure TpccTranProperties.Set_XDRFile(var Param1: WideString);
  { Warning: The property XDRFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.XDRFile := Param1;
end;

function TpccTranProperties.Get_XDRFile: WideString;
begin
    Result := DefaultInterface.XDRFile;
end;

procedure TpccTranProperties.Set_CheckType(var Param1: WideString);
  { Warning: The property CheckType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CheckType := Param1;
end;

function TpccTranProperties.Get_CheckType: WideString;
begin
    Result := DefaultInterface.CheckType;
end;

procedure TpccTranProperties.Set_CheckAccType(var Param1: WideString);
  { Warning: The property CheckAccType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CheckAccType := Param1;
end;

function TpccTranProperties.Get_CheckAccType: WideString;
begin
    Result := DefaultInterface.CheckAccType;
end;

procedure TpccTranProperties.Set_MICRStatus(var Param1: WideString);
  { Warning: The property MICRStatus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MICRStatus := Param1;
end;

function TpccTranProperties.Get_MICRStatus: WideString;
begin
    Result := DefaultInterface.MICRStatus;
end;

procedure TpccTranProperties.Set_CustomerName(var Param1: WideString);
  { Warning: The property CustomerName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerName := Param1;
end;

function TpccTranProperties.Get_CustomerName: WideString;
begin
    Result := DefaultInterface.CustomerName;
end;

procedure TpccTranProperties.Set_CustomerFirstName(var Param1: WideString);
  { Warning: The property CustomerFirstName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerFirstName := Param1;
end;

function TpccTranProperties.Get_CustomerStreet: WideString;
begin
    Result := DefaultInterface.CustomerStreet;
end;

procedure TpccTranProperties.Set_CustomerStreet(var Param1: WideString);
  { Warning: The property CustomerStreet has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerStreet := Param1;
end;

function TpccTranProperties.Get_CheckReaderCode: WideString;
begin
    Result := DefaultInterface.CheckReaderCode;
end;

procedure TpccTranProperties.Set_CheckReaderCode(var Param1: WideString);
  { Warning: The property CheckReaderCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CheckReaderCode := Param1;
end;

function TpccTranProperties.Get_CustomerFirstName: WideString;
begin
    Result := DefaultInterface.CustomerFirstName;
end;

procedure TpccTranProperties.Set_CustomerLastName(var Param1: WideString);
  { Warning: The property CustomerLastName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerLastName := Param1;
end;

function TpccTranProperties.Get_CustomerLastName: WideString;
begin
    Result := DefaultInterface.CustomerLastName;
end;

procedure TpccTranProperties.Set_CustomerCity(var Param1: WideString);
  { Warning: The property CustomerCity has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerCity := Param1;
end;

function TpccTranProperties.Get_CustomerCity: WideString;
begin
    Result := DefaultInterface.CustomerCity;
end;

procedure TpccTranProperties.Set_IDType(var Param1: WideString);
  { Warning: The property IDType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IDType := Param1;
end;

function TpccTranProperties.Get_IDType: WideString;
begin
    Result := DefaultInterface.IDType;
end;

procedure TpccTranProperties.Set_IDCountry(var Param1: WideString);
  { Warning: The property IDCountry has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IDCountry := Param1;
end;

function TpccTranProperties.Get_IDCountry: WideString;
begin
    Result := DefaultInterface.IDCountry;
end;

procedure TpccTranProperties.Set_DLTrackII(var Param1: WideString);
  { Warning: The property DLTrackII has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DLTrackII := Param1;
end;

function TpccTranProperties.Get_DLTrackII: WideString;
begin
    Result := DefaultInterface.DLTrackII;
end;

procedure TpccTranProperties.Set_IsPurchaseCard(var Param1: WordBool);
begin
  DefaultInterface.Set_IsPurchaseCard(Param1);
end;

function TpccTranProperties.Get_IsPurchaseCard: WordBool;
begin
    Result := DefaultInterface.IsPurchaseCard;
end;

procedure TpccTranProperties.Set_DriverID(var Param1: WideString);
  { Warning: The property DriverID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DriverID := Param1;
end;

function TpccTranProperties.Get_DriverID: WideString;
begin
    Result := DefaultInterface.DriverID;
end;

procedure TpccTranProperties.Set_DriverPIN(var Param1: WideString);
  { Warning: The property DriverPIN has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DriverPIN := Param1;
end;

function TpccTranProperties.Get_DriverPIN: WideString;
begin
    Result := DefaultInterface.DriverPIN;
end;

procedure TpccTranProperties.Set_IDNumber(var Param1: WideString);
  { Warning: The property IDNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IDNumber := Param1;
end;

function TpccTranProperties.Get_IDNumber: WideString;
begin
    Result := DefaultInterface.IDNumber;
end;

procedure TpccTranProperties.Set_Odometer(var Param1: WideString);
  { Warning: The property Odometer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Odometer := Param1;
end;

function TpccTranProperties.Get_Odometer: WideString;
begin
    Result := DefaultInterface.Odometer;
end;

procedure TpccTranProperties.Set_RestrictionCode(var Param1: WideString);
  { Warning: The property RestrictionCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RestrictionCode := Param1;
end;

function TpccTranProperties.Get_RestrictionCode: WideString;
begin
    Result := DefaultInterface.RestrictionCode;
end;

procedure TpccTranProperties.Set_VehicleID(var Param1: WideString);
  { Warning: The property VehicleID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VehicleID := Param1;
end;

function TpccTranProperties.Get_VehicleID: WideString;
begin
    Result := DefaultInterface.VehicleID;
end;

procedure TpccTranProperties.Set_ProductDetailCount(var Param1: WideString);
  { Warning: The property ProductDetailCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCount := Param1;
end;

function TpccTranProperties.Get_ProductDetailCount: WideString;
begin
    Result := DefaultInterface.ProductDetailCount;
end;

procedure TpccTranProperties.Set_ProductDetailCode_1(var Param1: WideString);
  { Warning: The property ProductDetailCode_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_1 := Param1;
end;

function TpccTranProperties.Get_ProductDetailCode_1: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_1;
end;

procedure TpccTranProperties.Set_ProductDetailCode_2(var Param1: WideString);
  { Warning: The property ProductDetailCode_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_2 := Param1;
end;

function TpccTranProperties.Get_ProductDetailCode_2: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_2;
end;

procedure TpccTranProperties.Set_ProductDetailCode_3(var Param1: WideString);
  { Warning: The property ProductDetailCode_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_3 := Param1;
end;

function TpccTranProperties.Get_ProductDetailCode_3: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_3;
end;

procedure TpccTranProperties.Set_ProductDetailCode_4(var Param1: WideString);
  { Warning: The property ProductDetailCode_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_4 := Param1;
end;

function TpccTranProperties.Get_ProductDetailCode_4: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_4;
end;

procedure TpccTranProperties.Set_ProductDetailCode_5(var Param1: WideString);
  { Warning: The property ProductDetailCode_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_5 := Param1;
end;

function TpccTranProperties.Get_ProductDetailCode_5: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_5;
end;

procedure TpccTranProperties.Set_ProductDetailCode_6(var Param1: WideString);
  { Warning: The property ProductDetailCode_6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_6 := Param1;
end;

function TpccTranProperties.Get_ProductDetailCode_6: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_6;
end;

procedure TpccTranProperties.Set_ProductDetailCode_7(var Param1: WideString);
  { Warning: The property ProductDetailCode_7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_7 := Param1;
end;

function TpccTranProperties.Get_ProductDetailCode_7: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_7;
end;

procedure TpccTranProperties.Set_ProductDetailCode_8(var Param1: WideString);
  { Warning: The property ProductDetailCode_8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_8 := Param1;
end;

function TpccTranProperties.Get_ProductDetailCode_8: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_8;
end;

procedure TpccTranProperties.Set_ProductDetailCode_9(var Param1: WideString);
  { Warning: The property ProductDetailCode_9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_9 := Param1;
end;

function TpccTranProperties.Get_ProductDetailCode_9: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_9;
end;

procedure TpccTranProperties.Set_ProductDetailCode_10(var Param1: WideString);
  { Warning: The property ProductDetailCode_10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_10 := Param1;
end;

function TpccTranProperties.Get_ProductDetailCode_10: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_10;
end;

procedure TpccTranProperties.Set_ProductDetailAmount_1(var Param1: WideString);
  { Warning: The property ProductDetailAmount_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_1 := Param1;
end;

function TpccTranProperties.Get_ProductDetailAmount_1: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_1;
end;

procedure TpccTranProperties.Set_ProductDetailAmount_2(var Param1: WideString);
  { Warning: The property ProductDetailAmount_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_2 := Param1;
end;

function TpccTranProperties.Get_ProductDetailAmount_2: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_2;
end;

procedure TpccTranProperties.Set_ProductDetailAmount_3(var Param1: WideString);
  { Warning: The property ProductDetailAmount_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_3 := Param1;
end;

function TpccTranProperties.Get_ProductDetailAmount_3: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_3;
end;

procedure TpccTranProperties.Set_ProductDetailAmount_4(var Param1: WideString);
  { Warning: The property ProductDetailAmount_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_4 := Param1;
end;

function TpccTranProperties.Get_ProductDetailAmount_4: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_4;
end;

procedure TpccTranProperties.Set_ProductDetailAmount_5(var Param1: WideString);
  { Warning: The property ProductDetailAmount_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_5 := Param1;
end;

function TpccTranProperties.Get_ProductDetailAmount_5: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_5;
end;

procedure TpccTranProperties.Set_ProductDetailAmount_6(var Param1: WideString);
  { Warning: The property ProductDetailAmount_6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_6 := Param1;
end;

function TpccTranProperties.Get_ProductDetailAmount_6: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_6;
end;

procedure TpccTranProperties.Set_ProductDetailAmount_7(var Param1: WideString);
  { Warning: The property ProductDetailAmount_7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_7 := Param1;
end;

function TpccTranProperties.Get_ProductDetailAmount_7: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_7;
end;

procedure TpccTranProperties.Set_ProductDetailAmount_8(var Param1: WideString);
  { Warning: The property ProductDetailAmount_8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_8 := Param1;
end;

function TpccTranProperties.Get_ProductDetailAmount_8: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_8;
end;

procedure TpccTranProperties.Set_ProductDetailAmount_9(var Param1: WideString);
  { Warning: The property ProductDetailAmount_9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_9 := Param1;
end;

function TpccTranProperties.Get_ProductDetailAmount_9: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_9;
end;

procedure TpccTranProperties.Set_ProductDetailAmount_10(var Param1: WideString);
  { Warning: The property ProductDetailAmount_10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_10 := Param1;
end;

function TpccTranProperties.Get_ProductDetailAmount_10: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_10;
end;

procedure TpccTranProperties.Set_ProductDetailQuantity_1(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_1 := Param1;
end;

function TpccTranProperties.Get_ProductDetailQuantity_1: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_1;
end;

procedure TpccTranProperties.Set_ProductDetailQuantity_2(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_2 := Param1;
end;

function TpccTranProperties.Get_ProductDetailQuantity_2: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_2;
end;

procedure TpccTranProperties.Set_ProductDetailQuantity_3(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_3 := Param1;
end;

function TpccTranProperties.Get_ProductDetailQuantity_3: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_3;
end;

procedure TpccTranProperties.Set_ProductDetailQuantity_4(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_4 := Param1;
end;

function TpccTranProperties.Get_ProductDetailQuantity_4: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_4;
end;

procedure TpccTranProperties.Set_ProductDetailQuantity_5(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_5 := Param1;
end;

function TpccTranProperties.Get_ProductDetailQuantity_5: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_5;
end;

procedure TpccTranProperties.Set_ProductDetailQuantity_6(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_6 := Param1;
end;

function TpccTranProperties.Get_ProductDetailQuantity_6: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_6;
end;

procedure TpccTranProperties.Set_ProductDetailQuantity_7(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_7 := Param1;
end;

function TpccTranProperties.Get_ProductDetailQuantity_7: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_7;
end;

procedure TpccTranProperties.Set_ProductDetailQuantity_8(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_8 := Param1;
end;

function TpccTranProperties.Get_ProductDetailQuantity_8: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_8;
end;

procedure TpccTranProperties.Set_ProductDetailQuantity_9(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_9 := Param1;
end;

function TpccTranProperties.Get_ProductDetailQuantity_9: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_9;
end;

procedure TpccTranProperties.Set_ProductDetailQuantity_10(var Param1: WideString);
  { Warning: The property ProductDetailQuantity_10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_10 := Param1;
end;

function TpccTranProperties.Get_ProductDetailQuantity_10: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_10;
end;

procedure TpccTranProperties.Set_StoreNum(var Param1: WideString);
  { Warning: The property StoreNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StoreNum := Param1;
end;

function TpccTranProperties.Get_StoreNum: WideString;
begin
    Result := DefaultInterface.StoreNum;
end;

procedure TpccTranProperties.Set_SSNum(var Param1: WideString);
  { Warning: The property SSNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SSNum := Param1;
end;

function TpccTranProperties.Get_SSNum: WideString;
begin
    Result := DefaultInterface.SSNum;
end;

procedure TpccTranProperties.Set_CustomerHouseNum(var Param1: WideString);
  { Warning: The property CustomerHouseNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerHouseNum := Param1;
end;

function TpccTranProperties.Get_CustomerHouseNum: WideString;
begin
    Result := DefaultInterface.CustomerHouseNum;
end;

procedure TpccTranProperties.Set_PumpNumber(var Param1: WideString);
  { Warning: The property PumpNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PumpNumber := Param1;
end;

function TpccTranProperties.Get_PumpNumber: WideString;
begin
    Result := DefaultInterface.PumpNumber;
end;

procedure TpccTranProperties.Set_SurchargeAmount(var Param1: WideString);
  { Warning: The property SurchargeAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SurchargeAmount := Param1;
end;

function TpccTranProperties.Get_SurchargeAmount: WideString;
begin
    Result := DefaultInterface.SurchargeAmount;
end;

procedure TpccTranProperties.Set_VirtualGiftCardFlag(var Param1: WordBool);
begin
  DefaultInterface.Set_VirtualGiftCardFlag(Param1);
end;

function TpccTranProperties.Get_VirtualGiftCardFlag: WordBool;
begin
    Result := DefaultInterface.VirtualGiftCardFlag;
end;

procedure TpccTranProperties.Set_GiftPin(var Param1: WideString);
  { Warning: The property GiftPin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiftPin := Param1;
end;

function TpccTranProperties.Get_GiftPin: WideString;
begin
    Result := DefaultInterface.GiftPin;
end;

procedure TpccTranProperties.Set_ProcRespCode(var Param1: WideString);
  { Warning: The property ProcRespCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProcRespCode := Param1;
end;

function TpccTranProperties.Get_ProcRespCode: WideString;
begin
    Result := DefaultInterface.ProcRespCode;
end;

procedure TpccTranProperties.Set_FleetCard(var Param1: WideString);
  { Warning: The property FleetCard has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FleetCard := Param1;
end;

function TpccTranProperties.Get_FleetCard: WideString;
begin
    Result := DefaultInterface.FleetCard;
end;

procedure TpccTranProperties.Set_TableNumber(var Param1: WideString);
  { Warning: The property TableNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TableNumber := Param1;
end;

function TpccTranProperties.Get_TableNumber: WideString;
begin
    Result := DefaultInterface.TableNumber;
end;

procedure TpccTranProperties.Set_TrackI(var Param1: WideString);
  { Warning: The property TrackI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TrackI := Param1;
end;

function TpccTranProperties.Get_TrackI: WideString;
begin
    Result := DefaultInterface.TrackI;
end;

procedure TpccTranProperties.Set_CreditPlanNumber(var Param1: WideString);
  { Warning: The property CreditPlanNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreditPlanNumber := Param1;
end;

function TpccTranProperties.Get_CreditPlanNumber: WideString;
begin
    Result := DefaultInterface.CreditPlanNumber;
end;

{$ENDIF}

class function CoPccResponse.Create: _PccResponse;
begin
  Result := CreateComObject(CLASS_PccResponse) as _PccResponse;
end;

class function CoPccResponse.CreateRemote(const MachineName: string): _PccResponse;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PccResponse) as _PccResponse;
end;

procedure TPccResponse.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{516AA90D-D843-4F72-B96A-8D504B2EE34E}';
    IntfIID:   '{5B2DC0C7-7617-4EB5-B53C-B600698A0D4E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPccResponse.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _PccResponse;
  end;
end;

procedure TPccResponse.ConnectTo(svrIntf: _PccResponse);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPccResponse.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPccResponse.GetDefaultInterface: _PccResponse;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TPccResponse.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TPccResponseProperties.Create(Self);
{$ENDIF}
end;

destructor TPccResponse.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TPccResponse.GetServerProperties: TPccResponseProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TPccResponse.Set_BatchNumber(var Param1: WideString);
  { Warning: The property BatchNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BatchNumber := Param1;
end;

function TPccResponse.Get_BatchNumber: WideString;
begin
    Result := DefaultInterface.BatchNumber;
end;

procedure TPccResponse.Set_AuthDate(var Param1: WideString);
  { Warning: The property AuthDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AuthDate := Param1;
end;

function TPccResponse.Get_AuthDate: WideString;
begin
    Result := DefaultInterface.AuthDate;
end;

procedure TPccResponse.Set_CashBack(var Param1: WideString);
  { Warning: The property CashBack has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashBack := Param1;
end;

function TPccResponse.Get_CashBack: WideString;
begin
    Result := DefaultInterface.CashBack;
end;

procedure TPccResponse.Set_AmountDue(var Param1: WideString);
  { Warning: The property AmountDue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmountDue := Param1;
end;

function TPccResponse.Get_AmountDue: WideString;
begin
    Result := DefaultInterface.AmountDue;
end;

procedure TPccResponse.Set_AuthAmount(var Param1: WideString);
  { Warning: The property AuthAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AuthAmount := Param1;
end;

function TPccResponse.Get_AuthAmount: WideString;
begin
    Result := DefaultInterface.AuthAmount;
end;

procedure TPccResponse.Set_TransTime(var Param1: WideString);
  { Warning: The property TransTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransTime := Param1;
end;

function TPccResponse.Get_TransTime: WideString;
begin
    Result := DefaultInterface.TransTime;
end;

procedure TPccResponse.Set_TotTransTime(var Param1: WideString);
  { Warning: The property TotTransTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TotTransTime := Param1;
end;

function TPccResponse.Get_TotTransTime: WideString;
begin
    Result := DefaultInterface.TotTransTime;
end;

procedure TPccResponse.Set_ConfigSize(var Param1: WideString);
  { Warning: The property ConfigSize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ConfigSize := Param1;
end;

function TPccResponse.Get_ConfigSize: WideString;
begin
    Result := DefaultInterface.ConfigSize;
end;

procedure TPccResponse.Set_CurrSize(var Param1: WideString);
  { Warning: The property CurrSize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CurrSize := Param1;
end;

function TPccResponse.Get_CurrSize: WideString;
begin
    Result := DefaultInterface.CurrSize;
end;

procedure TPccResponse.Set_AuxRespCode(var Param1: WideString);
  { Warning: The property AuxRespCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AuxRespCode := Param1;
end;

function TPccResponse.Get_AuxRespCode: WideString;
begin
    Result := DefaultInterface.AuxRespCode;
end;

procedure TPccResponse.Set_VoidBalance(var Param1: WideString);
  { Warning: The property VoidBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VoidBalance := Param1;
end;

function TPccResponse.Get_VoidBalance: WideString;
begin
    Result := DefaultInterface.VoidBalance;
end;

procedure TPccResponse.Set_eCommIndicator(var Param1: WideString);
  { Warning: The property eCommIndicator has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.eCommIndicator := Param1;
end;

function TPccResponse.Get_eCommIndicator: WideString;
begin
    Result := DefaultInterface.eCommIndicator;
end;

procedure TPccResponse.Set_CardholderId(var Param1: WideString);
  { Warning: The property CardholderId has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CardholderId := Param1;
end;

function TPccResponse.Get_CardholderId: WideString;
begin
    Result := DefaultInterface.CardholderId;
end;

procedure TPccResponse.Set_AccountDataSrc(var Param1: WideString);
  { Warning: The property AccountDataSrc has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AccountDataSrc := Param1;
end;

function TPccResponse.Get_AccountDataSrc: WideString;
begin
    Result := DefaultInterface.AccountDataSrc;
end;

function TPccResponse.Get_GetAsString: WideString;
begin
    Result := DefaultInterface.GetAsString;
end;

procedure TPccResponse.Set_GratuityAmntEst(var Param1: WideString);
  { Warning: The property GratuityAmntEst has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GratuityAmntEst := Param1;
end;

function TPccResponse.Get_GratuityAmntEst: WideString;
begin
    Result := DefaultInterface.GratuityAmntEst;
end;

procedure TPccResponse.Set_GratuityAmnt(var Param1: WideString);
  { Warning: The property GratuityAmnt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GratuityAmnt := Param1;
end;

function TPccResponse.Get_GratuityAmnt: WideString;
begin
    Result := DefaultInterface.GratuityAmnt;
end;

procedure TPccResponse.Set_ItemID(var Param1: WideString);
  { Warning: The property ItemID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ItemID := Param1;
end;

function TPccResponse.Get_ItemID: WideString;
begin
    Result := DefaultInterface.ItemID;
end;

function TPccResponse.Get_Result: WideString;
begin
    Result := DefaultInterface.Result;
end;

procedure TPccResponse.Set_Result(var Param1: WideString);
  { Warning: The property Result has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Result := Param1;
end;

function TPccResponse.Get_ResultCode: WideString;
begin
    Result := DefaultInterface.ResultCode;
end;

procedure TPccResponse.Set_ResultCode(var Param1: WideString);
  { Warning: The property ResultCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ResultCode := Param1;
end;

function TPccResponse.Get_CmrclCardFlag: WideString;
begin
    Result := DefaultInterface.CmrclCardFlag;
end;

procedure TPccResponse.Set_CmrclCardFlag(var Param1: WideString);
  { Warning: The property CmrclCardFlag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CmrclCardFlag := Param1;
end;

function TPccResponse.Get_NetID: WideString;
begin
    Result := DefaultInterface.NetID;
end;

procedure TPccResponse.Set_NetID(var Param1: WideString);
  { Warning: The property NetID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NetID := Param1;
end;

function TPccResponse.Get_Auth: WideString;
begin
    Result := DefaultInterface.Auth;
end;

procedure TPccResponse.Set_Auth(var Param1: WideString);
  { Warning: The property Auth has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Auth := Param1;
end;

function TPccResponse.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TPccResponse.Set_Reference(var Param1: WideString);
  { Warning: The property Reference has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Reference := Param1;
end;

function TPccResponse.Get_ADDRESVER: WideString;
begin
    Result := DefaultInterface.ADDRESVER;
end;

procedure TPccResponse.Set_ADDRESVER(var Param1: WideString);
  { Warning: The property ADDRESVER has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ADDRESVER := Param1;
end;

function TPccResponse.Get_TDate: WideString;
begin
    Result := DefaultInterface.TDate;
end;

procedure TPccResponse.Set_TDate(var Param1: WideString);
  { Warning: The property TDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TDate := Param1;
end;

function TPccResponse.Get_Ticket: WideString;
begin
    Result := DefaultInterface.Ticket;
end;

procedure TPccResponse.Set_Ticket(var Param1: WideString);
  { Warning: The property Ticket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ticket := Param1;
end;

function TPccResponse.Get_TransNum: WideString;
begin
    Result := DefaultInterface.TransNum;
end;

procedure TPccResponse.Set_TransNum(var Param1: WideString);
  { Warning: The property TransNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransNum := Param1;
end;

function TPccResponse.Get_TItem: WideString;
begin
    Result := DefaultInterface.TItem;
end;

procedure TPccResponse.Set_TItem(var Param1: WideString);
  { Warning: The property TItem has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TItem := Param1;
end;

function TPccResponse.Get_TBATCH: WideString;
begin
    Result := DefaultInterface.TBATCH;
end;

procedure TPccResponse.Set_TBATCH(var Param1: WideString);
  { Warning: The property TBATCH has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TBATCH := Param1;
end;

function TPccResponse.Get_TI: WideString;
begin
    Result := DefaultInterface.TI;
end;

procedure TPccResponse.Set_TI(var Param1: WideString);
  { Warning: The property TI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TI := Param1;
end;

function TPccResponse.Get_TICODE: WideString;
begin
    Result := DefaultInterface.TICODE;
end;

procedure TPccResponse.Set_TICODE(var Param1: WideString);
  { Warning: The property TICODE has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TICODE := Param1;
end;

function TPccResponse.Get_IND: WideString;
begin
    Result := DefaultInterface.IND;
end;

procedure TPccResponse.Set_IND(var Param1: WideString);
  { Warning: The property IND has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IND := Param1;
end;

function TPccResponse.Get_MSI: WideString;
begin
    Result := DefaultInterface.MSI;
end;

procedure TPccResponse.Set_MSI(var Param1: WideString);
  { Warning: The property MSI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MSI := Param1;
end;

function TPccResponse.Get_Ret: WideString;
begin
    Result := DefaultInterface.Ret;
end;

procedure TPccResponse.Set_Ret(var Param1: WideString);
  { Warning: The property Ret has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ret := Param1;
end;

function TPccResponse.Get_PEM: WideString;
begin
    Result := DefaultInterface.PEM;
end;

procedure TPccResponse.Set_PEM(var Param1: WideString);
  { Warning: The property PEM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PEM := Param1;
end;

function TPccResponse.Get_TIM: WideString;
begin
    Result := DefaultInterface.TIM;
end;

procedure TPccResponse.Set_TIM(var Param1: WideString);
  { Warning: The property TIM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TIM := Param1;
end;

function TPccResponse.Get_ACI: WideString;
begin
    Result := DefaultInterface.ACI;
end;

procedure TPccResponse.Set_ACI(var Param1: WideString);
  { Warning: The property ACI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ACI := Param1;
end;

function TPccResponse.Get_RespCode: WideString;
begin
    Result := DefaultInterface.RespCode;
end;

procedure TPccResponse.Set_RespCode(var Param1: WideString);
  { Warning: The property RespCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RespCode := Param1;
end;

function TPccResponse.Get_RRec: WideString;
begin
    Result := DefaultInterface.RRec;
end;

procedure TPccResponse.Set_RRec(var Param1: WideString);
  { Warning: The property RRec has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RRec := Param1;
end;

function TPccResponse.Get_CCType: WideString;
begin
    Result := DefaultInterface.CCType;
end;

procedure TPccResponse.Set_CCType(var Param1: WideString);
  { Warning: The property CCType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CCType := Param1;
end;

function TPccResponse.Get_CVV2Response: WideString;
begin
    Result := DefaultInterface.CVV2Response;
end;

procedure TPccResponse.Set_CVV2Response(var Param1: WideString);
  { Warning: The property CVV2Response has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CVV2Response := Param1;
end;

function TPccResponse.Get_PurchaseCard: WideString;
begin
    Result := DefaultInterface.PurchaseCard;
end;

procedure TPccResponse.Set_PurchaseCard(var Param1: WideString);
  { Warning: The property PurchaseCard has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PurchaseCard := Param1;
end;

procedure TPccResponse.Set_RespType(var Param1: RespFileType);
begin
  DefaultInterface.Set_RespType(Param1);
end;

function TPccResponse.Get_RespType: RespFileType;
begin
    Result := DefaultInterface.RespType;
end;

function TPccResponse.Get_Error: RespError;
begin
    Result := DefaultInterface.Error;
end;

procedure TPccResponse.Set_FileName(var Param1: WideString);
  { Warning: The property FileName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FileName := Param1;
end;

function TPccResponse.Get_FileName: WideString;
begin
    Result := DefaultInterface.FileName;
end;

procedure TPccResponse.Set_InpType(var Param1: RespFileType);
begin
  DefaultInterface.Set_InpType(Param1);
end;

function TPccResponse.Get_InpType: RespFileType;
begin
    Result := DefaultInterface.InpType;
end;

procedure TPccResponse.Set_XDRFile(var Param1: WideString);
  { Warning: The property XDRFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.XDRFile := Param1;
end;

function TPccResponse.Get_XDRFile: WideString;
begin
    Result := DefaultInterface.XDRFile;
end;

procedure TPccResponse.Set_TroutD(var Param1: WideString);
  { Warning: The property TroutD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TroutD := Param1;
end;

function TPccResponse.Get_TroutD: WideString;
begin
    Result := DefaultInterface.TroutD;
end;

procedure TPccResponse.Set_UserName(var Param1: WideString);
  { Warning: The property UserName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UserName := Param1;
end;

function TPccResponse.Get_UserName: WideString;
begin
    Result := DefaultInterface.UserName;
end;

procedure TPccResponse.Set_Auth_Src_Code(var Param1: WideString);
  { Warning: The property Auth_Src_Code has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Auth_Src_Code := Param1;
end;

function TPccResponse.Get_Auth_Src_Code: WideString;
begin
    Result := DefaultInterface.Auth_Src_Code;
end;

procedure TPccResponse.Set_SaleCount(var Param1: WideString);
  { Warning: The property SaleCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SaleCount := Param1;
end;

function TPccResponse.Get_SaleCount: WideString;
begin
    Result := DefaultInterface.SaleCount;
end;

procedure TPccResponse.Set_SaleTotalAmount(var Param1: WideString);
  { Warning: The property SaleTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SaleTotalAmount := Param1;
end;

function TPccResponse.Get_SaleTotalAmount: WideString;
begin
    Result := DefaultInterface.SaleTotalAmount;
end;

procedure TPccResponse.Set_ActivationCount(var Param1: WideString);
  { Warning: The property ActivationCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ActivationCount := Param1;
end;

function TPccResponse.Get_ActivationCount: WideString;
begin
    Result := DefaultInterface.ActivationCount;
end;

procedure TPccResponse.Set_ActivationTotalAmount(var Param1: WideString);
  { Warning: The property ActivationTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ActivationTotalAmount := Param1;
end;

function TPccResponse.Get_ActivationTotalAmount: WideString;
begin
    Result := DefaultInterface.ActivationTotalAmount;
end;

procedure TPccResponse.Set_CreditCount(var Param1: WideString);
  { Warning: The property CreditCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreditCount := Param1;
end;

function TPccResponse.Get_CreditCount: WideString;
begin
    Result := DefaultInterface.CreditCount;
end;

procedure TPccResponse.Set_CreditTotalAmount(var Param1: WideString);
  { Warning: The property CreditTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreditTotalAmount := Param1;
end;

function TPccResponse.Get_CreditTotalAmount: WideString;
begin
    Result := DefaultInterface.CreditTotalAmount;
end;

procedure TPccResponse.Set_VoidCount(var Param1: WideString);
  { Warning: The property VoidCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VoidCount := Param1;
end;

function TPccResponse.Get_VoidCount: WideString;
begin
    Result := DefaultInterface.VoidCount;
end;

procedure TPccResponse.Set_VoidTotalAmount(var Param1: WideString);
  { Warning: The property VoidTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VoidTotalAmount := Param1;
end;

function TPccResponse.Get_VoidTotalAmount: WideString;
begin
    Result := DefaultInterface.VoidTotalAmount;
end;

procedure TPccResponse.Set_AddValueCount(var Param1: WideString);
  { Warning: The property AddValueCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddValueCount := Param1;
end;

function TPccResponse.Get_AddValueCount: WideString;
begin
    Result := DefaultInterface.AddValueCount;
end;

procedure TPccResponse.Set_AddValueTotalAmount(var Param1: WideString);
  { Warning: The property AddValueTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddValueTotalAmount := Param1;
end;

function TPccResponse.Get_AddValueTotalAmount: WideString;
begin
    Result := DefaultInterface.AddValueTotalAmount;
end;

procedure TPccResponse.Set_TipCount(var Param1: WideString);
  { Warning: The property TipCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TipCount := Param1;
end;

function TPccResponse.Get_TipCount: WideString;
begin
    Result := DefaultInterface.TipCount;
end;

procedure TPccResponse.Set_TipTotalAmount(var Param1: WideString);
  { Warning: The property TipTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TipTotalAmount := Param1;
end;

function TPccResponse.Get_TipTotalAmount: WideString;
begin
    Result := DefaultInterface.TipTotalAmount;
end;

procedure TPccResponse.Set_BalanceTransferCount(var Param1: WideString);
  { Warning: The property BalanceTransferCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BalanceTransferCount := Param1;
end;

function TPccResponse.Get_BalanceTransferCount: WideString;
begin
    Result := DefaultInterface.BalanceTransferCount;
end;

procedure TPccResponse.Set_BalanceTransferTotalAmount(var Param1: WideString);
  { Warning: The property BalanceTransferTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BalanceTransferTotalAmount := Param1;
end;

function TPccResponse.Get_BalanceTransferTotalAmount: WideString;
begin
    Result := DefaultInterface.BalanceTransferTotalAmount;
end;

procedure TPccResponse.Set_PointsCount(var Param1: WideString);
  { Warning: The property PointsCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PointsCount := Param1;
end;

function TPccResponse.Get_PointsCount: WideString;
begin
    Result := DefaultInterface.PointsCount;
end;

procedure TPccResponse.Set_PointsTotalAmount(var Param1: WideString);
  { Warning: The property PointsTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PointsTotalAmount := Param1;
end;

function TPccResponse.Get_PointsTotalAmount: WideString;
begin
    Result := DefaultInterface.PointsTotalAmount;
end;

procedure TPccResponse.Set_AddPointsCount(var Param1: WideString);
  { Warning: The property AddPointsCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddPointsCount := Param1;
end;

function TPccResponse.Get_AddPointsCount: WideString;
begin
    Result := DefaultInterface.AddPointsCount;
end;

procedure TPccResponse.Set_AddPointsTotalAmount(var Param1: WideString);
  { Warning: The property AddPointsTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddPointsTotalAmount := Param1;
end;

function TPccResponse.Get_AddPointsTotalAmount: WideString;
begin
    Result := DefaultInterface.AddPointsTotalAmount;
end;

procedure TPccResponse.Set_MiscMessage(var Param1: WideString);
  { Warning: The property MiscMessage has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MiscMessage := Param1;
end;

function TPccResponse.Get_MiscMessage: WideString;
begin
    Result := DefaultInterface.MiscMessage;
end;

procedure TPccResponse.Set_TransDateTime(var Param1: WideString);
  { Warning: The property TransDateTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransDateTime := Param1;
end;

function TPccResponse.Get_TransDateTime: WideString;
begin
    Result := DefaultInterface.TransDateTime;
end;

procedure TPccResponse.Set_GiftCardBalance(var Param1: WideString);
  { Warning: The property GiftCardBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiftCardBalance := Param1;
end;

function TPccResponse.Get_GiftCardBalance: WideString;
begin
    Result := DefaultInterface.GiftCardBalance;
end;

procedure TPccResponse.Set_ImageStatus(var Param1: WideString);
  { Warning: The property ImageStatus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImageStatus := Param1;
end;

function TPccResponse.Get_ImageStatus: WideString;
begin
    Result := DefaultInterface.ImageStatus;
end;

procedure TPccResponse.Set_EBTFoodBalance(var Param1: WideString);
  { Warning: The property EBTFoodBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EBTFoodBalance := Param1;
end;

function TPccResponse.Get_EBTFoodBalance: WideString;
begin
    Result := DefaultInterface.EBTFoodBalance;
end;

procedure TPccResponse.Set_EBTCashBalance(var Param1: WideString);
  { Warning: The property EBTCashBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EBTCashBalance := Param1;
end;

function TPccResponse.Get_EBTCashBalance: WideString;
begin
    Result := DefaultInterface.EBTCashBalance;
end;

procedure TPccResponse.Set_CustomerFirstName(var Param1: WideString);
  { Warning: The property CustomerFirstName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerFirstName := Param1;
end;

function TPccResponse.Get_CustomerFirstName: WideString;
begin
    Result := DefaultInterface.CustomerFirstName;
end;

procedure TPccResponse.Set_CustomerMInit(var Param1: WideString);
  { Warning: The property CustomerMInit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerMInit := Param1;
end;

function TPccResponse.Get_CustomerMInit: WideString;
begin
    Result := DefaultInterface.CustomerMInit;
end;

procedure TPccResponse.Set_CustomerLastName(var Param1: WideString);
  { Warning: The property CustomerLastName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerLastName := Param1;
end;

function TPccResponse.Get_CustomerLastName: WideString;
begin
    Result := DefaultInterface.CustomerLastName;
end;

procedure TPccResponse.Set_CustomerHouseNum(var Param1: WideString);
  { Warning: The property CustomerHouseNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerHouseNum := Param1;
end;

function TPccResponse.Get_CustomerHouseNum: WideString;
begin
    Result := DefaultInterface.CustomerHouseNum;
end;

procedure TPccResponse.Set_CustomerAddress(var Param1: WideString);
  { Warning: The property CustomerAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerAddress := Param1;
end;

function TPccResponse.Get_CustomerAddress: WideString;
begin
    Result := DefaultInterface.CustomerAddress;
end;

procedure TPccResponse.Set_CustomerAppNum(var Param1: WideString);
  { Warning: The property CustomerAppNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerAppNum := Param1;
end;

function TPccResponse.Get_CustomerAppNum: WideString;
begin
    Result := DefaultInterface.CustomerAppNum;
end;

procedure TPccResponse.Set_CustomerCity(var Param1: WideString);
  { Warning: The property CustomerCity has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerCity := Param1;
end;

function TPccResponse.Get_CustomerCity: WideString;
begin
    Result := DefaultInterface.CustomerCity;
end;

procedure TPccResponse.Set_State(var Param1: WideString);
  { Warning: The property State has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.State := Param1;
end;

function TPccResponse.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TPccResponse.Set_ZipCode(var Param1: WideString);
  { Warning: The property ZipCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ZipCode := Param1;
end;

function TPccResponse.Get_ZipCode: WideString;
begin
    Result := DefaultInterface.ZipCode;
end;

procedure TPccResponse.Set_AcctNum(var Param1: WideString);
  { Warning: The property AcctNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AcctNum := Param1;
end;

function TPccResponse.Get_AcctNum: WideString;
begin
    Result := DefaultInterface.AcctNum;
end;

procedure TPccResponse.Set_ReturnCode(var Param1: WideString);
  { Warning: The property ReturnCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReturnCode := Param1;
end;

function TPccResponse.Get_ReturnCode: WideString;
begin
    Result := DefaultInterface.ReturnCode;
end;

procedure TPccResponse.Set_CreditLimit(var Param1: WideString);
  { Warning: The property CreditLimit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreditLimit := Param1;
end;

function TPccResponse.Get_CreditLimit: WideString;
begin
    Result := DefaultInterface.CreditLimit;
end;

procedure TPccResponse.Set_Phone_Number(var Param1: WideString);
  { Warning: The property Phone_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Phone_Number := Param1;
end;

function TPccResponse.Get_Phone_Number: WideString;
begin
    Result := DefaultInterface.Phone_Number;
end;

procedure TPccResponse.Set_MaxAuthAmount(var Param1: WideString);
  { Warning: The property MaxAuthAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MaxAuthAmount := Param1;
end;

function TPccResponse.Get_MaxAuthAmount: WideString;
begin
    Result := DefaultInterface.MaxAuthAmount;
end;

procedure TPccResponse.Set_RestrictCode(var Param1: WideString);
  { Warning: The property RestrictCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RestrictCode := Param1;
end;

function TPccResponse.Get_RestrictCode: WideString;
begin
    Result := DefaultInterface.RestrictCode;
end;

procedure TPccResponse.Set_AddText1(var Param1: WideString);
  { Warning: The property AddText1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddText1 := Param1;
end;

function TPccResponse.Get_AddText1: WideString;
begin
    Result := DefaultInterface.AddText1;
end;

procedure TPccResponse.Set_AddText2(var Param1: WideString);
  { Warning: The property AddText2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddText2 := Param1;
end;

function TPccResponse.Get_AddText2: WideString;
begin
    Result := DefaultInterface.AddText2;
end;

procedure TPccResponse.Set_AddText3(var Param1: WideString);
  { Warning: The property AddText3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddText3 := Param1;
end;

function TPccResponse.Get_AddText3: WideString;
begin
    Result := DefaultInterface.AddText3;
end;

procedure TPccResponse.Set_AddText4(var Param1: WideString);
  { Warning: The property AddText4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddText4 := Param1;
end;

function TPccResponse.Get_AddText4: WideString;
begin
    Result := DefaultInterface.AddText4;
end;

procedure TPccResponse.Set_GiftPin(var Param1: WideString);
  { Warning: The property GiftPin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiftPin := Param1;
end;

function TPccResponse.Get_GiftPin: WideString;
begin
    Result := DefaultInterface.GiftPin;
end;

procedure TPccResponse.Set_RecordCount(var Param1: WideString);
  { Warning: The property RecordCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RecordCount := Param1;
end;

function TPccResponse.Get_RecordCount: WideString;
begin
    Result := DefaultInterface.RecordCount;
end;

procedure TPccResponse.Set_TransRecord(var Param1: WideString);
  { Warning: The property TransRecord has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransRecord := Param1;
end;

function TPccResponse.Get_TransRecord: WideString;
begin
    Result := DefaultInterface.TransRecord;
end;

procedure TPccResponse.Set_ReturnCheckFee(var Param1: WideString);
  { Warning: The property ReturnCheckFee has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReturnCheckFee := Param1;
end;

function TPccResponse.Get_ReturnCheckFee: WideString;
begin
    Result := DefaultInterface.ReturnCheckFee;
end;

procedure TPccResponse.Set_ReturnCheckNote(var Param1: WideString);
  { Warning: The property ReturnCheckNote has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReturnCheckNote := Param1;
end;

function TPccResponse.Get_ReturnCheckNote: WideString;
begin
    Result := DefaultInterface.ReturnCheckNote;
end;

procedure TPccResponse.Set_PS2000Data(var Param1: WideString);
  { Warning: The property PS2000Data has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PS2000Data := Param1;
end;

function TPccResponse.Get_PS2000Data: WideString;
begin
    Result := DefaultInterface.PS2000Data;
end;

procedure TPccResponse.Set_PointsBalance(var Param1: WideString);
  { Warning: The property PointsBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PointsBalance := Param1;
end;

function TPccResponse.Get_PointsBalance: WideString;
begin
    Result := DefaultInterface.PointsBalance;
end;

procedure TPccResponse.Set_PreAuthCount(var Param1: WideString);
  { Warning: The property PreAuthCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PreAuthCount := Param1;
end;

function TPccResponse.Get_PreAuthCount: WideString;
begin
    Result := DefaultInterface.PreAuthCount;
end;

procedure TPccResponse.Set_PreAuthAmount(var Param1: WideString);
  { Warning: The property PreAuthAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PreAuthAmount := Param1;
end;

function TPccResponse.Get_PreAuthAmount: WideString;
begin
    Result := DefaultInterface.PreAuthAmount;
end;

procedure TPccResponse.Set_PostAuthCount(var Param1: WideString);
  { Warning: The property PostAuthCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PostAuthCount := Param1;
end;

function TPccResponse.Get_PostAuthCount: WideString;
begin
    Result := DefaultInterface.PostAuthCount;
end;

procedure TPccResponse.Set_PostAuthAmount(var Param1: WideString);
  { Warning: The property PostAuthAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PostAuthAmount := Param1;
end;

function TPccResponse.Get_PostAuthAmount: WideString;
begin
    Result := DefaultInterface.PostAuthAmount;
end;

procedure TPccResponse.Set_IssuanceCount(var Param1: WideString);
  { Warning: The property IssuanceCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IssuanceCount := Param1;
end;

function TPccResponse.Get_IssuanceCount: WideString;
begin
    Result := DefaultInterface.IssuanceCount;
end;

procedure TPccResponse.Set_IssuanceTotalAmount(var Param1: WideString);
  { Warning: The property IssuanceTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IssuanceTotalAmount := Param1;
end;

function TPccResponse.Get_IssuanceTotalAmount: WideString;
begin
    Result := DefaultInterface.IssuanceTotalAmount;
end;

procedure TPccResponse.Set_DeactivateCount(var Param1: WideString);
  { Warning: The property DeactivateCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DeactivateCount := Param1;
end;

function TPccResponse.Get_DeactivateCount: WideString;
begin
    Result := DefaultInterface.DeactivateCount;
end;

procedure TPccResponse.Set_DeactivateTotalAmount(var Param1: WideString);
  { Warning: The property DeactivateTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DeactivateTotalAmount := Param1;
end;

function TPccResponse.Get_DeactivateTotalAmount: WideString;
begin
    Result := DefaultInterface.DeactivateTotalAmount;
end;

procedure TPccResponse.Set_BalanceMergeCount(var Param1: WideString);
  { Warning: The property BalanceMergeCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BalanceMergeCount := Param1;
end;

function TPccResponse.Get_BalanceMergeCount: WideString;
begin
    Result := DefaultInterface.BalanceMergeCount;
end;

procedure TPccResponse.Set_BalanceMergeTotalAmount(var Param1: WideString);
  { Warning: The property BalanceMergeTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BalanceMergeTotalAmount := Param1;
end;

function TPccResponse.Get_BalanceMergeTotalAmount: WideString;
begin
    Result := DefaultInterface.BalanceMergeTotalAmount;
end;

procedure TPccResponse.Set_BalanceAdjustCount(var Param1: WideString);
  { Warning: The property BalanceAdjustCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BalanceAdjustCount := Param1;
end;

function TPccResponse.Get_BalanceAdjustCount: WideString;
begin
    Result := DefaultInterface.BalanceAdjustCount;
end;

procedure TPccResponse.Set_BalanceAdjustTotalAmount(var Param1: WideString);
  { Warning: The property BalanceAdjustTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BalanceAdjustTotalAmount := Param1;
end;

function TPccResponse.Get_BalanceAdjustTotalAmount: WideString;
begin
    Result := DefaultInterface.BalanceAdjustTotalAmount;
end;

procedure TPccResponse.Set_ReportLostStolenCount(var Param1: WideString);
  { Warning: The property ReportLostStolenCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportLostStolenCount := Param1;
end;

function TPccResponse.Get_ReportLostStolenCount: WideString;
begin
    Result := DefaultInterface.ReportLostStolenCount;
end;

procedure TPccResponse.Set_ReportLostStolenTotalAmount(var Param1: WideString);
  { Warning: The property ReportLostStolenTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportLostStolenTotalAmount := Param1;
end;

function TPccResponse.Get_ReportLostStolenTotalAmount: WideString;
begin
    Result := DefaultInterface.ReportLostStolenTotalAmount;
end;

procedure TPccResponse.Set_CashoutCount(var Param1: WideString);
  { Warning: The property CashoutCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashoutCount := Param1;
end;

function TPccResponse.Get_CashoutCount: WideString;
begin
    Result := DefaultInterface.CashoutCount;
end;

procedure TPccResponse.Set_CashoutTotalAmount(var Param1: WideString);
  { Warning: The property CashoutTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashoutTotalAmount := Param1;
end;

function TPccResponse.Get_CashoutTotalAmount: WideString;
begin
    Result := DefaultInterface.CashoutTotalAmount;
end;

procedure TPccResponse.Set_ReactivateCount(var Param1: WideString);
  { Warning: The property ReactivateCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReactivateCount := Param1;
end;

function TPccResponse.Get_ReactivateCount: WideString;
begin
    Result := DefaultInterface.ReactivateCount;
end;

procedure TPccResponse.Set_ReactivateTotalAmount(var Param1: WideString);
  { Warning: The property ReactivateTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReactivateTotalAmount := Param1;
end;

function TPccResponse.Get_ReactivateTotalAmount: WideString;
begin
    Result := DefaultInterface.ReactivateTotalAmount;
end;

procedure TPccResponse.Set_CCAvailBalance(var Param1: WideString);
  { Warning: The property CCAvailBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CCAvailBalance := Param1;
end;

function TPccResponse.Get_CCAvailBalance: WideString;
begin
    Result := DefaultInterface.CCAvailBalance;
end;

procedure TPccResponse.Set_TraceNumber(var Param1: WideString);
  { Warning: The property TraceNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TraceNumber := Param1;
end;

function TPccResponse.Get_TraceNumber: WideString;
begin
    Result := DefaultInterface.TraceNumber;
end;

procedure TPccResponse.Set_TransactionReferenceNumber(var Param1: WideString);
  { Warning: The property TransactionReferenceNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransactionReferenceNumber := Param1;
end;

function TPccResponse.Get_TransactionReferenceNumber: WideString;
begin
    Result := DefaultInterface.TransactionReferenceNumber;
end;

procedure TPccResponse.Set_DCAvailBalance(var Param1: WideString);
  { Warning: The property DCAvailBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DCAvailBalance := Param1;
end;

function TPccResponse.Get_DCAvailBalance: WideString;
begin
    Result := DefaultInterface.DCAvailBalance;
end;

procedure TPccResponse.Set_SurchargeAmount(var Param1: WideString);
  { Warning: The property SurchargeAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SurchargeAmount := Param1;
end;

function TPccResponse.Get_SurchargeAmount: WideString;
begin
    Result := DefaultInterface.SurchargeAmount;
end;

procedure TPccResponse.Set_Receipt(var Param1: WideString);
  { Warning: The property Receipt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Receipt := Param1;
end;

function TPccResponse.Get_Receipt: WideString;
begin
    Result := DefaultInterface.Receipt;
end;

procedure TPccResponse.Set_TID(var Param1: WideString);
  { Warning: The property TID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TID := Param1;
end;

function TPccResponse.Get_TID: WideString;
begin
    Result := DefaultInterface.TID;
end;

procedure TPccResponse.Set_Processor(var Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TPccResponse.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

function TPccResponse.Load(var szFileName: OleVariant; var intRecNum: Smallint; 
                           var blnValidate: WordBool): RespErrType;
begin
  Result := DefaultInterface.Load(szFileName, intRecNum, blnValidate);
end;

function TPccResponse.LoadOut(var szFileName: WideString; var intRecNum: Smallint): RespErrType;
begin
  Result := DefaultInterface.LoadOut(szFileName, intRecNum);
end;

function TPccResponse.LoadXML(var szFileName: WideString): RespErrType;
begin
  Result := DefaultInterface.LoadXML(szFileName);
end;

function TPccResponse.WriteFile(var eType: RespFileType; var szNewPrefix: OleVariant; 
                                var szNewPath: OleVariant; var intRecNum: Smallint; 
                                var blnAppend: WordBool; var BatchNum: Smallint; 
                                var blnLastRec: WordBool): RespErrType;
begin
  Result := DefaultInterface.WriteFile(eType, szNewPrefix, szNewPath, intRecNum, blnAppend, 
                                       BatchNum, blnLastRec);
end;

function TPccResponse.CleanString(var szStringIn: WideString; var szReplaceList: WideString; 
                                  var blnCompact: WordBool; var blnTrim: WordBool; 
                                  var blnRmvNP: WordBool): WideString;
begin
  Result := DefaultInterface.CleanString(szStringIn, szReplaceList, blnCompact, blnTrim, blnRmvNP);
end;

procedure TPccResponse.Clear;
begin
  DefaultInterface.Clear;
end;

procedure TPccResponse.ClearErr;
begin
  DefaultInterface.ClearErr;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TPccResponseProperties.Create(AServer: TPccResponse);
begin
  inherited Create;
  FServer := AServer;
end;

function TPccResponseProperties.GetDefaultInterface: _PccResponse;
begin
  Result := FServer.DefaultInterface;
end;

procedure TPccResponseProperties.Set_BatchNumber(var Param1: WideString);
  { Warning: The property BatchNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BatchNumber := Param1;
end;

function TPccResponseProperties.Get_BatchNumber: WideString;
begin
    Result := DefaultInterface.BatchNumber;
end;

procedure TPccResponseProperties.Set_AuthDate(var Param1: WideString);
  { Warning: The property AuthDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AuthDate := Param1;
end;

function TPccResponseProperties.Get_AuthDate: WideString;
begin
    Result := DefaultInterface.AuthDate;
end;

procedure TPccResponseProperties.Set_CashBack(var Param1: WideString);
  { Warning: The property CashBack has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashBack := Param1;
end;

function TPccResponseProperties.Get_CashBack: WideString;
begin
    Result := DefaultInterface.CashBack;
end;

procedure TPccResponseProperties.Set_AmountDue(var Param1: WideString);
  { Warning: The property AmountDue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmountDue := Param1;
end;

function TPccResponseProperties.Get_AmountDue: WideString;
begin
    Result := DefaultInterface.AmountDue;
end;

procedure TPccResponseProperties.Set_AuthAmount(var Param1: WideString);
  { Warning: The property AuthAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AuthAmount := Param1;
end;

function TPccResponseProperties.Get_AuthAmount: WideString;
begin
    Result := DefaultInterface.AuthAmount;
end;

procedure TPccResponseProperties.Set_TransTime(var Param1: WideString);
  { Warning: The property TransTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransTime := Param1;
end;

function TPccResponseProperties.Get_TransTime: WideString;
begin
    Result := DefaultInterface.TransTime;
end;

procedure TPccResponseProperties.Set_TotTransTime(var Param1: WideString);
  { Warning: The property TotTransTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TotTransTime := Param1;
end;

function TPccResponseProperties.Get_TotTransTime: WideString;
begin
    Result := DefaultInterface.TotTransTime;
end;

procedure TPccResponseProperties.Set_ConfigSize(var Param1: WideString);
  { Warning: The property ConfigSize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ConfigSize := Param1;
end;

function TPccResponseProperties.Get_ConfigSize: WideString;
begin
    Result := DefaultInterface.ConfigSize;
end;

procedure TPccResponseProperties.Set_CurrSize(var Param1: WideString);
  { Warning: The property CurrSize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CurrSize := Param1;
end;

function TPccResponseProperties.Get_CurrSize: WideString;
begin
    Result := DefaultInterface.CurrSize;
end;

procedure TPccResponseProperties.Set_AuxRespCode(var Param1: WideString);
  { Warning: The property AuxRespCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AuxRespCode := Param1;
end;

function TPccResponseProperties.Get_AuxRespCode: WideString;
begin
    Result := DefaultInterface.AuxRespCode;
end;

procedure TPccResponseProperties.Set_VoidBalance(var Param1: WideString);
  { Warning: The property VoidBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VoidBalance := Param1;
end;

function TPccResponseProperties.Get_VoidBalance: WideString;
begin
    Result := DefaultInterface.VoidBalance;
end;

procedure TPccResponseProperties.Set_eCommIndicator(var Param1: WideString);
  { Warning: The property eCommIndicator has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.eCommIndicator := Param1;
end;

function TPccResponseProperties.Get_eCommIndicator: WideString;
begin
    Result := DefaultInterface.eCommIndicator;
end;

procedure TPccResponseProperties.Set_CardholderId(var Param1: WideString);
  { Warning: The property CardholderId has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CardholderId := Param1;
end;

function TPccResponseProperties.Get_CardholderId: WideString;
begin
    Result := DefaultInterface.CardholderId;
end;

procedure TPccResponseProperties.Set_AccountDataSrc(var Param1: WideString);
  { Warning: The property AccountDataSrc has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AccountDataSrc := Param1;
end;

function TPccResponseProperties.Get_AccountDataSrc: WideString;
begin
    Result := DefaultInterface.AccountDataSrc;
end;

function TPccResponseProperties.Get_GetAsString: WideString;
begin
    Result := DefaultInterface.GetAsString;
end;

procedure TPccResponseProperties.Set_GratuityAmntEst(var Param1: WideString);
  { Warning: The property GratuityAmntEst has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GratuityAmntEst := Param1;
end;

function TPccResponseProperties.Get_GratuityAmntEst: WideString;
begin
    Result := DefaultInterface.GratuityAmntEst;
end;

procedure TPccResponseProperties.Set_GratuityAmnt(var Param1: WideString);
  { Warning: The property GratuityAmnt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GratuityAmnt := Param1;
end;

function TPccResponseProperties.Get_GratuityAmnt: WideString;
begin
    Result := DefaultInterface.GratuityAmnt;
end;

procedure TPccResponseProperties.Set_ItemID(var Param1: WideString);
  { Warning: The property ItemID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ItemID := Param1;
end;

function TPccResponseProperties.Get_ItemID: WideString;
begin
    Result := DefaultInterface.ItemID;
end;

function TPccResponseProperties.Get_Result: WideString;
begin
    Result := DefaultInterface.Result;
end;

procedure TPccResponseProperties.Set_Result(var Param1: WideString);
  { Warning: The property Result has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Result := Param1;
end;

function TPccResponseProperties.Get_ResultCode: WideString;
begin
    Result := DefaultInterface.ResultCode;
end;

procedure TPccResponseProperties.Set_ResultCode(var Param1: WideString);
  { Warning: The property ResultCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ResultCode := Param1;
end;

function TPccResponseProperties.Get_CmrclCardFlag: WideString;
begin
    Result := DefaultInterface.CmrclCardFlag;
end;

procedure TPccResponseProperties.Set_CmrclCardFlag(var Param1: WideString);
  { Warning: The property CmrclCardFlag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CmrclCardFlag := Param1;
end;

function TPccResponseProperties.Get_NetID: WideString;
begin
    Result := DefaultInterface.NetID;
end;

procedure TPccResponseProperties.Set_NetID(var Param1: WideString);
  { Warning: The property NetID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NetID := Param1;
end;

function TPccResponseProperties.Get_Auth: WideString;
begin
    Result := DefaultInterface.Auth;
end;

procedure TPccResponseProperties.Set_Auth(var Param1: WideString);
  { Warning: The property Auth has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Auth := Param1;
end;

function TPccResponseProperties.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TPccResponseProperties.Set_Reference(var Param1: WideString);
  { Warning: The property Reference has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Reference := Param1;
end;

function TPccResponseProperties.Get_ADDRESVER: WideString;
begin
    Result := DefaultInterface.ADDRESVER;
end;

procedure TPccResponseProperties.Set_ADDRESVER(var Param1: WideString);
  { Warning: The property ADDRESVER has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ADDRESVER := Param1;
end;

function TPccResponseProperties.Get_TDate: WideString;
begin
    Result := DefaultInterface.TDate;
end;

procedure TPccResponseProperties.Set_TDate(var Param1: WideString);
  { Warning: The property TDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TDate := Param1;
end;

function TPccResponseProperties.Get_Ticket: WideString;
begin
    Result := DefaultInterface.Ticket;
end;

procedure TPccResponseProperties.Set_Ticket(var Param1: WideString);
  { Warning: The property Ticket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ticket := Param1;
end;

function TPccResponseProperties.Get_TransNum: WideString;
begin
    Result := DefaultInterface.TransNum;
end;

procedure TPccResponseProperties.Set_TransNum(var Param1: WideString);
  { Warning: The property TransNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransNum := Param1;
end;

function TPccResponseProperties.Get_TItem: WideString;
begin
    Result := DefaultInterface.TItem;
end;

procedure TPccResponseProperties.Set_TItem(var Param1: WideString);
  { Warning: The property TItem has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TItem := Param1;
end;

function TPccResponseProperties.Get_TBATCH: WideString;
begin
    Result := DefaultInterface.TBATCH;
end;

procedure TPccResponseProperties.Set_TBATCH(var Param1: WideString);
  { Warning: The property TBATCH has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TBATCH := Param1;
end;

function TPccResponseProperties.Get_TI: WideString;
begin
    Result := DefaultInterface.TI;
end;

procedure TPccResponseProperties.Set_TI(var Param1: WideString);
  { Warning: The property TI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TI := Param1;
end;

function TPccResponseProperties.Get_TICODE: WideString;
begin
    Result := DefaultInterface.TICODE;
end;

procedure TPccResponseProperties.Set_TICODE(var Param1: WideString);
  { Warning: The property TICODE has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TICODE := Param1;
end;

function TPccResponseProperties.Get_IND: WideString;
begin
    Result := DefaultInterface.IND;
end;

procedure TPccResponseProperties.Set_IND(var Param1: WideString);
  { Warning: The property IND has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IND := Param1;
end;

function TPccResponseProperties.Get_MSI: WideString;
begin
    Result := DefaultInterface.MSI;
end;

procedure TPccResponseProperties.Set_MSI(var Param1: WideString);
  { Warning: The property MSI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MSI := Param1;
end;

function TPccResponseProperties.Get_Ret: WideString;
begin
    Result := DefaultInterface.Ret;
end;

procedure TPccResponseProperties.Set_Ret(var Param1: WideString);
  { Warning: The property Ret has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ret := Param1;
end;

function TPccResponseProperties.Get_PEM: WideString;
begin
    Result := DefaultInterface.PEM;
end;

procedure TPccResponseProperties.Set_PEM(var Param1: WideString);
  { Warning: The property PEM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PEM := Param1;
end;

function TPccResponseProperties.Get_TIM: WideString;
begin
    Result := DefaultInterface.TIM;
end;

procedure TPccResponseProperties.Set_TIM(var Param1: WideString);
  { Warning: The property TIM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TIM := Param1;
end;

function TPccResponseProperties.Get_ACI: WideString;
begin
    Result := DefaultInterface.ACI;
end;

procedure TPccResponseProperties.Set_ACI(var Param1: WideString);
  { Warning: The property ACI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ACI := Param1;
end;

function TPccResponseProperties.Get_RespCode: WideString;
begin
    Result := DefaultInterface.RespCode;
end;

procedure TPccResponseProperties.Set_RespCode(var Param1: WideString);
  { Warning: The property RespCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RespCode := Param1;
end;

function TPccResponseProperties.Get_RRec: WideString;
begin
    Result := DefaultInterface.RRec;
end;

procedure TPccResponseProperties.Set_RRec(var Param1: WideString);
  { Warning: The property RRec has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RRec := Param1;
end;

function TPccResponseProperties.Get_CCType: WideString;
begin
    Result := DefaultInterface.CCType;
end;

procedure TPccResponseProperties.Set_CCType(var Param1: WideString);
  { Warning: The property CCType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CCType := Param1;
end;

function TPccResponseProperties.Get_CVV2Response: WideString;
begin
    Result := DefaultInterface.CVV2Response;
end;

procedure TPccResponseProperties.Set_CVV2Response(var Param1: WideString);
  { Warning: The property CVV2Response has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CVV2Response := Param1;
end;

function TPccResponseProperties.Get_PurchaseCard: WideString;
begin
    Result := DefaultInterface.PurchaseCard;
end;

procedure TPccResponseProperties.Set_PurchaseCard(var Param1: WideString);
  { Warning: The property PurchaseCard has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PurchaseCard := Param1;
end;

procedure TPccResponseProperties.Set_RespType(var Param1: RespFileType);
begin
  DefaultInterface.Set_RespType(Param1);
end;

function TPccResponseProperties.Get_RespType: RespFileType;
begin
    Result := DefaultInterface.RespType;
end;

function TPccResponseProperties.Get_Error: RespError;
begin
    Result := DefaultInterface.Error;
end;

procedure TPccResponseProperties.Set_FileName(var Param1: WideString);
  { Warning: The property FileName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FileName := Param1;
end;

function TPccResponseProperties.Get_FileName: WideString;
begin
    Result := DefaultInterface.FileName;
end;

procedure TPccResponseProperties.Set_InpType(var Param1: RespFileType);
begin
  DefaultInterface.Set_InpType(Param1);
end;

function TPccResponseProperties.Get_InpType: RespFileType;
begin
    Result := DefaultInterface.InpType;
end;

procedure TPccResponseProperties.Set_XDRFile(var Param1: WideString);
  { Warning: The property XDRFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.XDRFile := Param1;
end;

function TPccResponseProperties.Get_XDRFile: WideString;
begin
    Result := DefaultInterface.XDRFile;
end;

procedure TPccResponseProperties.Set_TroutD(var Param1: WideString);
  { Warning: The property TroutD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TroutD := Param1;
end;

function TPccResponseProperties.Get_TroutD: WideString;
begin
    Result := DefaultInterface.TroutD;
end;

procedure TPccResponseProperties.Set_UserName(var Param1: WideString);
  { Warning: The property UserName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UserName := Param1;
end;

function TPccResponseProperties.Get_UserName: WideString;
begin
    Result := DefaultInterface.UserName;
end;

procedure TPccResponseProperties.Set_Auth_Src_Code(var Param1: WideString);
  { Warning: The property Auth_Src_Code has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Auth_Src_Code := Param1;
end;

function TPccResponseProperties.Get_Auth_Src_Code: WideString;
begin
    Result := DefaultInterface.Auth_Src_Code;
end;

procedure TPccResponseProperties.Set_SaleCount(var Param1: WideString);
  { Warning: The property SaleCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SaleCount := Param1;
end;

function TPccResponseProperties.Get_SaleCount: WideString;
begin
    Result := DefaultInterface.SaleCount;
end;

procedure TPccResponseProperties.Set_SaleTotalAmount(var Param1: WideString);
  { Warning: The property SaleTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SaleTotalAmount := Param1;
end;

function TPccResponseProperties.Get_SaleTotalAmount: WideString;
begin
    Result := DefaultInterface.SaleTotalAmount;
end;

procedure TPccResponseProperties.Set_ActivationCount(var Param1: WideString);
  { Warning: The property ActivationCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ActivationCount := Param1;
end;

function TPccResponseProperties.Get_ActivationCount: WideString;
begin
    Result := DefaultInterface.ActivationCount;
end;

procedure TPccResponseProperties.Set_ActivationTotalAmount(var Param1: WideString);
  { Warning: The property ActivationTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ActivationTotalAmount := Param1;
end;

function TPccResponseProperties.Get_ActivationTotalAmount: WideString;
begin
    Result := DefaultInterface.ActivationTotalAmount;
end;

procedure TPccResponseProperties.Set_CreditCount(var Param1: WideString);
  { Warning: The property CreditCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreditCount := Param1;
end;

function TPccResponseProperties.Get_CreditCount: WideString;
begin
    Result := DefaultInterface.CreditCount;
end;

procedure TPccResponseProperties.Set_CreditTotalAmount(var Param1: WideString);
  { Warning: The property CreditTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreditTotalAmount := Param1;
end;

function TPccResponseProperties.Get_CreditTotalAmount: WideString;
begin
    Result := DefaultInterface.CreditTotalAmount;
end;

procedure TPccResponseProperties.Set_VoidCount(var Param1: WideString);
  { Warning: The property VoidCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VoidCount := Param1;
end;

function TPccResponseProperties.Get_VoidCount: WideString;
begin
    Result := DefaultInterface.VoidCount;
end;

procedure TPccResponseProperties.Set_VoidTotalAmount(var Param1: WideString);
  { Warning: The property VoidTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VoidTotalAmount := Param1;
end;

function TPccResponseProperties.Get_VoidTotalAmount: WideString;
begin
    Result := DefaultInterface.VoidTotalAmount;
end;

procedure TPccResponseProperties.Set_AddValueCount(var Param1: WideString);
  { Warning: The property AddValueCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddValueCount := Param1;
end;

function TPccResponseProperties.Get_AddValueCount: WideString;
begin
    Result := DefaultInterface.AddValueCount;
end;

procedure TPccResponseProperties.Set_AddValueTotalAmount(var Param1: WideString);
  { Warning: The property AddValueTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddValueTotalAmount := Param1;
end;

function TPccResponseProperties.Get_AddValueTotalAmount: WideString;
begin
    Result := DefaultInterface.AddValueTotalAmount;
end;

procedure TPccResponseProperties.Set_TipCount(var Param1: WideString);
  { Warning: The property TipCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TipCount := Param1;
end;

function TPccResponseProperties.Get_TipCount: WideString;
begin
    Result := DefaultInterface.TipCount;
end;

procedure TPccResponseProperties.Set_TipTotalAmount(var Param1: WideString);
  { Warning: The property TipTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TipTotalAmount := Param1;
end;

function TPccResponseProperties.Get_TipTotalAmount: WideString;
begin
    Result := DefaultInterface.TipTotalAmount;
end;

procedure TPccResponseProperties.Set_BalanceTransferCount(var Param1: WideString);
  { Warning: The property BalanceTransferCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BalanceTransferCount := Param1;
end;

function TPccResponseProperties.Get_BalanceTransferCount: WideString;
begin
    Result := DefaultInterface.BalanceTransferCount;
end;

procedure TPccResponseProperties.Set_BalanceTransferTotalAmount(var Param1: WideString);
  { Warning: The property BalanceTransferTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BalanceTransferTotalAmount := Param1;
end;

function TPccResponseProperties.Get_BalanceTransferTotalAmount: WideString;
begin
    Result := DefaultInterface.BalanceTransferTotalAmount;
end;

procedure TPccResponseProperties.Set_PointsCount(var Param1: WideString);
  { Warning: The property PointsCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PointsCount := Param1;
end;

function TPccResponseProperties.Get_PointsCount: WideString;
begin
    Result := DefaultInterface.PointsCount;
end;

procedure TPccResponseProperties.Set_PointsTotalAmount(var Param1: WideString);
  { Warning: The property PointsTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PointsTotalAmount := Param1;
end;

function TPccResponseProperties.Get_PointsTotalAmount: WideString;
begin
    Result := DefaultInterface.PointsTotalAmount;
end;

procedure TPccResponseProperties.Set_AddPointsCount(var Param1: WideString);
  { Warning: The property AddPointsCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddPointsCount := Param1;
end;

function TPccResponseProperties.Get_AddPointsCount: WideString;
begin
    Result := DefaultInterface.AddPointsCount;
end;

procedure TPccResponseProperties.Set_AddPointsTotalAmount(var Param1: WideString);
  { Warning: The property AddPointsTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddPointsTotalAmount := Param1;
end;

function TPccResponseProperties.Get_AddPointsTotalAmount: WideString;
begin
    Result := DefaultInterface.AddPointsTotalAmount;
end;

procedure TPccResponseProperties.Set_MiscMessage(var Param1: WideString);
  { Warning: The property MiscMessage has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MiscMessage := Param1;
end;

function TPccResponseProperties.Get_MiscMessage: WideString;
begin
    Result := DefaultInterface.MiscMessage;
end;

procedure TPccResponseProperties.Set_TransDateTime(var Param1: WideString);
  { Warning: The property TransDateTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransDateTime := Param1;
end;

function TPccResponseProperties.Get_TransDateTime: WideString;
begin
    Result := DefaultInterface.TransDateTime;
end;

procedure TPccResponseProperties.Set_GiftCardBalance(var Param1: WideString);
  { Warning: The property GiftCardBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiftCardBalance := Param1;
end;

function TPccResponseProperties.Get_GiftCardBalance: WideString;
begin
    Result := DefaultInterface.GiftCardBalance;
end;

procedure TPccResponseProperties.Set_ImageStatus(var Param1: WideString);
  { Warning: The property ImageStatus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImageStatus := Param1;
end;

function TPccResponseProperties.Get_ImageStatus: WideString;
begin
    Result := DefaultInterface.ImageStatus;
end;

procedure TPccResponseProperties.Set_EBTFoodBalance(var Param1: WideString);
  { Warning: The property EBTFoodBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EBTFoodBalance := Param1;
end;

function TPccResponseProperties.Get_EBTFoodBalance: WideString;
begin
    Result := DefaultInterface.EBTFoodBalance;
end;

procedure TPccResponseProperties.Set_EBTCashBalance(var Param1: WideString);
  { Warning: The property EBTCashBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EBTCashBalance := Param1;
end;

function TPccResponseProperties.Get_EBTCashBalance: WideString;
begin
    Result := DefaultInterface.EBTCashBalance;
end;

procedure TPccResponseProperties.Set_CustomerFirstName(var Param1: WideString);
  { Warning: The property CustomerFirstName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerFirstName := Param1;
end;

function TPccResponseProperties.Get_CustomerFirstName: WideString;
begin
    Result := DefaultInterface.CustomerFirstName;
end;

procedure TPccResponseProperties.Set_CustomerMInit(var Param1: WideString);
  { Warning: The property CustomerMInit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerMInit := Param1;
end;

function TPccResponseProperties.Get_CustomerMInit: WideString;
begin
    Result := DefaultInterface.CustomerMInit;
end;

procedure TPccResponseProperties.Set_CustomerLastName(var Param1: WideString);
  { Warning: The property CustomerLastName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerLastName := Param1;
end;

function TPccResponseProperties.Get_CustomerLastName: WideString;
begin
    Result := DefaultInterface.CustomerLastName;
end;

procedure TPccResponseProperties.Set_CustomerHouseNum(var Param1: WideString);
  { Warning: The property CustomerHouseNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerHouseNum := Param1;
end;

function TPccResponseProperties.Get_CustomerHouseNum: WideString;
begin
    Result := DefaultInterface.CustomerHouseNum;
end;

procedure TPccResponseProperties.Set_CustomerAddress(var Param1: WideString);
  { Warning: The property CustomerAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerAddress := Param1;
end;

function TPccResponseProperties.Get_CustomerAddress: WideString;
begin
    Result := DefaultInterface.CustomerAddress;
end;

procedure TPccResponseProperties.Set_CustomerAppNum(var Param1: WideString);
  { Warning: The property CustomerAppNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerAppNum := Param1;
end;

function TPccResponseProperties.Get_CustomerAppNum: WideString;
begin
    Result := DefaultInterface.CustomerAppNum;
end;

procedure TPccResponseProperties.Set_CustomerCity(var Param1: WideString);
  { Warning: The property CustomerCity has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerCity := Param1;
end;

function TPccResponseProperties.Get_CustomerCity: WideString;
begin
    Result := DefaultInterface.CustomerCity;
end;

procedure TPccResponseProperties.Set_State(var Param1: WideString);
  { Warning: The property State has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.State := Param1;
end;

function TPccResponseProperties.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TPccResponseProperties.Set_ZipCode(var Param1: WideString);
  { Warning: The property ZipCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ZipCode := Param1;
end;

function TPccResponseProperties.Get_ZipCode: WideString;
begin
    Result := DefaultInterface.ZipCode;
end;

procedure TPccResponseProperties.Set_AcctNum(var Param1: WideString);
  { Warning: The property AcctNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AcctNum := Param1;
end;

function TPccResponseProperties.Get_AcctNum: WideString;
begin
    Result := DefaultInterface.AcctNum;
end;

procedure TPccResponseProperties.Set_ReturnCode(var Param1: WideString);
  { Warning: The property ReturnCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReturnCode := Param1;
end;

function TPccResponseProperties.Get_ReturnCode: WideString;
begin
    Result := DefaultInterface.ReturnCode;
end;

procedure TPccResponseProperties.Set_CreditLimit(var Param1: WideString);
  { Warning: The property CreditLimit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreditLimit := Param1;
end;

function TPccResponseProperties.Get_CreditLimit: WideString;
begin
    Result := DefaultInterface.CreditLimit;
end;

procedure TPccResponseProperties.Set_Phone_Number(var Param1: WideString);
  { Warning: The property Phone_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Phone_Number := Param1;
end;

function TPccResponseProperties.Get_Phone_Number: WideString;
begin
    Result := DefaultInterface.Phone_Number;
end;

procedure TPccResponseProperties.Set_MaxAuthAmount(var Param1: WideString);
  { Warning: The property MaxAuthAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MaxAuthAmount := Param1;
end;

function TPccResponseProperties.Get_MaxAuthAmount: WideString;
begin
    Result := DefaultInterface.MaxAuthAmount;
end;

procedure TPccResponseProperties.Set_RestrictCode(var Param1: WideString);
  { Warning: The property RestrictCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RestrictCode := Param1;
end;

function TPccResponseProperties.Get_RestrictCode: WideString;
begin
    Result := DefaultInterface.RestrictCode;
end;

procedure TPccResponseProperties.Set_AddText1(var Param1: WideString);
  { Warning: The property AddText1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddText1 := Param1;
end;

function TPccResponseProperties.Get_AddText1: WideString;
begin
    Result := DefaultInterface.AddText1;
end;

procedure TPccResponseProperties.Set_AddText2(var Param1: WideString);
  { Warning: The property AddText2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddText2 := Param1;
end;

function TPccResponseProperties.Get_AddText2: WideString;
begin
    Result := DefaultInterface.AddText2;
end;

procedure TPccResponseProperties.Set_AddText3(var Param1: WideString);
  { Warning: The property AddText3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddText3 := Param1;
end;

function TPccResponseProperties.Get_AddText3: WideString;
begin
    Result := DefaultInterface.AddText3;
end;

procedure TPccResponseProperties.Set_AddText4(var Param1: WideString);
  { Warning: The property AddText4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AddText4 := Param1;
end;

function TPccResponseProperties.Get_AddText4: WideString;
begin
    Result := DefaultInterface.AddText4;
end;

procedure TPccResponseProperties.Set_GiftPin(var Param1: WideString);
  { Warning: The property GiftPin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiftPin := Param1;
end;

function TPccResponseProperties.Get_GiftPin: WideString;
begin
    Result := DefaultInterface.GiftPin;
end;

procedure TPccResponseProperties.Set_RecordCount(var Param1: WideString);
  { Warning: The property RecordCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RecordCount := Param1;
end;

function TPccResponseProperties.Get_RecordCount: WideString;
begin
    Result := DefaultInterface.RecordCount;
end;

procedure TPccResponseProperties.Set_TransRecord(var Param1: WideString);
  { Warning: The property TransRecord has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransRecord := Param1;
end;

function TPccResponseProperties.Get_TransRecord: WideString;
begin
    Result := DefaultInterface.TransRecord;
end;

procedure TPccResponseProperties.Set_ReturnCheckFee(var Param1: WideString);
  { Warning: The property ReturnCheckFee has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReturnCheckFee := Param1;
end;

function TPccResponseProperties.Get_ReturnCheckFee: WideString;
begin
    Result := DefaultInterface.ReturnCheckFee;
end;

procedure TPccResponseProperties.Set_ReturnCheckNote(var Param1: WideString);
  { Warning: The property ReturnCheckNote has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReturnCheckNote := Param1;
end;

function TPccResponseProperties.Get_ReturnCheckNote: WideString;
begin
    Result := DefaultInterface.ReturnCheckNote;
end;

procedure TPccResponseProperties.Set_PS2000Data(var Param1: WideString);
  { Warning: The property PS2000Data has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PS2000Data := Param1;
end;

function TPccResponseProperties.Get_PS2000Data: WideString;
begin
    Result := DefaultInterface.PS2000Data;
end;

procedure TPccResponseProperties.Set_PointsBalance(var Param1: WideString);
  { Warning: The property PointsBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PointsBalance := Param1;
end;

function TPccResponseProperties.Get_PointsBalance: WideString;
begin
    Result := DefaultInterface.PointsBalance;
end;

procedure TPccResponseProperties.Set_PreAuthCount(var Param1: WideString);
  { Warning: The property PreAuthCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PreAuthCount := Param1;
end;

function TPccResponseProperties.Get_PreAuthCount: WideString;
begin
    Result := DefaultInterface.PreAuthCount;
end;

procedure TPccResponseProperties.Set_PreAuthAmount(var Param1: WideString);
  { Warning: The property PreAuthAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PreAuthAmount := Param1;
end;

function TPccResponseProperties.Get_PreAuthAmount: WideString;
begin
    Result := DefaultInterface.PreAuthAmount;
end;

procedure TPccResponseProperties.Set_PostAuthCount(var Param1: WideString);
  { Warning: The property PostAuthCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PostAuthCount := Param1;
end;

function TPccResponseProperties.Get_PostAuthCount: WideString;
begin
    Result := DefaultInterface.PostAuthCount;
end;

procedure TPccResponseProperties.Set_PostAuthAmount(var Param1: WideString);
  { Warning: The property PostAuthAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PostAuthAmount := Param1;
end;

function TPccResponseProperties.Get_PostAuthAmount: WideString;
begin
    Result := DefaultInterface.PostAuthAmount;
end;

procedure TPccResponseProperties.Set_IssuanceCount(var Param1: WideString);
  { Warning: The property IssuanceCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IssuanceCount := Param1;
end;

function TPccResponseProperties.Get_IssuanceCount: WideString;
begin
    Result := DefaultInterface.IssuanceCount;
end;

procedure TPccResponseProperties.Set_IssuanceTotalAmount(var Param1: WideString);
  { Warning: The property IssuanceTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IssuanceTotalAmount := Param1;
end;

function TPccResponseProperties.Get_IssuanceTotalAmount: WideString;
begin
    Result := DefaultInterface.IssuanceTotalAmount;
end;

procedure TPccResponseProperties.Set_DeactivateCount(var Param1: WideString);
  { Warning: The property DeactivateCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DeactivateCount := Param1;
end;

function TPccResponseProperties.Get_DeactivateCount: WideString;
begin
    Result := DefaultInterface.DeactivateCount;
end;

procedure TPccResponseProperties.Set_DeactivateTotalAmount(var Param1: WideString);
  { Warning: The property DeactivateTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DeactivateTotalAmount := Param1;
end;

function TPccResponseProperties.Get_DeactivateTotalAmount: WideString;
begin
    Result := DefaultInterface.DeactivateTotalAmount;
end;

procedure TPccResponseProperties.Set_BalanceMergeCount(var Param1: WideString);
  { Warning: The property BalanceMergeCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BalanceMergeCount := Param1;
end;

function TPccResponseProperties.Get_BalanceMergeCount: WideString;
begin
    Result := DefaultInterface.BalanceMergeCount;
end;

procedure TPccResponseProperties.Set_BalanceMergeTotalAmount(var Param1: WideString);
  { Warning: The property BalanceMergeTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BalanceMergeTotalAmount := Param1;
end;

function TPccResponseProperties.Get_BalanceMergeTotalAmount: WideString;
begin
    Result := DefaultInterface.BalanceMergeTotalAmount;
end;

procedure TPccResponseProperties.Set_BalanceAdjustCount(var Param1: WideString);
  { Warning: The property BalanceAdjustCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BalanceAdjustCount := Param1;
end;

function TPccResponseProperties.Get_BalanceAdjustCount: WideString;
begin
    Result := DefaultInterface.BalanceAdjustCount;
end;

procedure TPccResponseProperties.Set_BalanceAdjustTotalAmount(var Param1: WideString);
  { Warning: The property BalanceAdjustTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BalanceAdjustTotalAmount := Param1;
end;

function TPccResponseProperties.Get_BalanceAdjustTotalAmount: WideString;
begin
    Result := DefaultInterface.BalanceAdjustTotalAmount;
end;

procedure TPccResponseProperties.Set_ReportLostStolenCount(var Param1: WideString);
  { Warning: The property ReportLostStolenCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportLostStolenCount := Param1;
end;

function TPccResponseProperties.Get_ReportLostStolenCount: WideString;
begin
    Result := DefaultInterface.ReportLostStolenCount;
end;

procedure TPccResponseProperties.Set_ReportLostStolenTotalAmount(var Param1: WideString);
  { Warning: The property ReportLostStolenTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportLostStolenTotalAmount := Param1;
end;

function TPccResponseProperties.Get_ReportLostStolenTotalAmount: WideString;
begin
    Result := DefaultInterface.ReportLostStolenTotalAmount;
end;

procedure TPccResponseProperties.Set_CashoutCount(var Param1: WideString);
  { Warning: The property CashoutCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashoutCount := Param1;
end;

function TPccResponseProperties.Get_CashoutCount: WideString;
begin
    Result := DefaultInterface.CashoutCount;
end;

procedure TPccResponseProperties.Set_CashoutTotalAmount(var Param1: WideString);
  { Warning: The property CashoutTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashoutTotalAmount := Param1;
end;

function TPccResponseProperties.Get_CashoutTotalAmount: WideString;
begin
    Result := DefaultInterface.CashoutTotalAmount;
end;

procedure TPccResponseProperties.Set_ReactivateCount(var Param1: WideString);
  { Warning: The property ReactivateCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReactivateCount := Param1;
end;

function TPccResponseProperties.Get_ReactivateCount: WideString;
begin
    Result := DefaultInterface.ReactivateCount;
end;

procedure TPccResponseProperties.Set_ReactivateTotalAmount(var Param1: WideString);
  { Warning: The property ReactivateTotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReactivateTotalAmount := Param1;
end;

function TPccResponseProperties.Get_ReactivateTotalAmount: WideString;
begin
    Result := DefaultInterface.ReactivateTotalAmount;
end;

procedure TPccResponseProperties.Set_CCAvailBalance(var Param1: WideString);
  { Warning: The property CCAvailBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CCAvailBalance := Param1;
end;

function TPccResponseProperties.Get_CCAvailBalance: WideString;
begin
    Result := DefaultInterface.CCAvailBalance;
end;

procedure TPccResponseProperties.Set_TraceNumber(var Param1: WideString);
  { Warning: The property TraceNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TraceNumber := Param1;
end;

function TPccResponseProperties.Get_TraceNumber: WideString;
begin
    Result := DefaultInterface.TraceNumber;
end;

procedure TPccResponseProperties.Set_TransactionReferenceNumber(var Param1: WideString);
  { Warning: The property TransactionReferenceNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransactionReferenceNumber := Param1;
end;

function TPccResponseProperties.Get_TransactionReferenceNumber: WideString;
begin
    Result := DefaultInterface.TransactionReferenceNumber;
end;

procedure TPccResponseProperties.Set_DCAvailBalance(var Param1: WideString);
  { Warning: The property DCAvailBalance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DCAvailBalance := Param1;
end;

function TPccResponseProperties.Get_DCAvailBalance: WideString;
begin
    Result := DefaultInterface.DCAvailBalance;
end;

procedure TPccResponseProperties.Set_SurchargeAmount(var Param1: WideString);
  { Warning: The property SurchargeAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SurchargeAmount := Param1;
end;

function TPccResponseProperties.Get_SurchargeAmount: WideString;
begin
    Result := DefaultInterface.SurchargeAmount;
end;

procedure TPccResponseProperties.Set_Receipt(var Param1: WideString);
  { Warning: The property Receipt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Receipt := Param1;
end;

function TPccResponseProperties.Get_Receipt: WideString;
begin
    Result := DefaultInterface.Receipt;
end;

procedure TPccResponseProperties.Set_TID(var Param1: WideString);
  { Warning: The property TID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TID := Param1;
end;

function TPccResponseProperties.Get_TID: WideString;
begin
    Result := DefaultInterface.TID;
end;

procedure TPccResponseProperties.Set_Processor(var Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TPccResponseProperties.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

{$ENDIF}

class function CoAuthReport.Create: _AuthReport;
begin
  Result := CreateComObject(CLASS_AuthReport) as _AuthReport;
end;

class function CoAuthReport.CreateRemote(const MachineName: string): _AuthReport;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AuthReport) as _AuthReport;
end;

procedure TAuthReport.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{91266AEB-DDE4-44B0-BDE0-D1D6A838450E}';
    IntfIID:   '{F75B7AF5-7190-41E4-96DA-D00A78F082C9}';
    EventIID:  '{DDAD8D3F-0814-4399-9F17-4F2534E48A1E}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAuthReport.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _AuthReport;
  end;
end;

procedure TAuthReport.ConnectTo(svrIntf: _AuthReport);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TAuthReport.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TAuthReport.GetDefaultInterface: _AuthReport;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAuthReport.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAuthReportProperties.Create(Self);
{$ENDIF}
end;

destructor TAuthReport.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAuthReport.GetServerProperties: TAuthReportProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TAuthReport.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnResize) then
         FOnResize(Self);
    2: if Assigned(FOnClick) then
         FOnClick(Self);
    3: if Assigned(FOnDblClick) then
         FOnDblClick(Self);
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    5: if Assigned(FOnKeyPress) then
         FOnKeyPress(Self, Smallint((TVarData(Params[0]).VPointer)^) {var Smallint});
    6: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                  Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    7: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    8: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    9: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                    Single((TVarData(Params[2]).VPointer)^) {var Single},
                    Single((TVarData(Params[3]).VPointer)^) {var Single});
  end; {case DispID}
end;

function TAuthReport.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TAuthReport.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TAuthReport.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TAuthReport.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TAuthReport.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

procedure TAuthReport.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

function TAuthReport.GetIndex: Integer;
begin
  Result := DefaultInterface.GetIndex;
end;

function TAuthReport.GetReportCount: Smallint;
begin
  Result := DefaultInterface.GetReportCount;
end;

function TAuthReport.GetReportRecord(var Record_: Smallint): Smallint;
begin
  Result := DefaultInterface.GetReportRecord(Record_);
end;

function TAuthReport.GetReportCard: WideString;
begin
  Result := DefaultInterface.GetReportCard;
end;

function TAuthReport.GetReportItem: WideString;
begin
  Result := DefaultInterface.GetReportItem;
end;

function TAuthReport.GetReportIssuer: WideString;
begin
  Result := DefaultInterface.GetReportIssuer;
end;

function TAuthReport.GetReportExpDate: WideString;
begin
  Result := DefaultInterface.GetReportExpDate;
end;

function TAuthReport.GetReportTransType: WideString;
begin
  Result := DefaultInterface.GetReportTransType;
end;

function TAuthReport.GetReportAmount: WideString;
begin
  Result := DefaultInterface.GetReportAmount;
end;

function TAuthReport.GetReportTransNumber: WideString;
begin
  Result := DefaultInterface.GetReportTransNumber;
end;

function TAuthReport.GetReportAppCode: WideString;
begin
  Result := DefaultInterface.GetReportAppCode;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAuthReportProperties.Create(AServer: TAuthReport);
begin
  inherited Create;
  FServer := AServer;
end;

function TAuthReportProperties.GetDefaultInterface: _AuthReport;
begin
  Result := FServer.DefaultInterface;
end;

function TAuthReportProperties.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TAuthReportProperties.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TAuthReportProperties.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TAuthReportProperties.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TAuthReportProperties.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

procedure TAuthReportProperties.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

{$ENDIF}

class function CoOffLine.Create: _OffLine;
begin
  Result := CreateComObject(CLASS_OffLine) as _OffLine;
end;

class function CoOffLine.CreateRemote(const MachineName: string): _OffLine;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OffLine) as _OffLine;
end;

procedure TOffLine.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{347F1008-D6AD-4BB5-AFCE-DF3604BACAF3}';
    IntfIID:   '{79219CB4-8927-4CC8-8CF8-12C08D3FFF7C}';
    EventIID:  '{CF279BE9-B1BB-4257-B23E-06107E57E1BD}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TOffLine.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _OffLine;
  end;
end;

procedure TOffLine.ConnectTo(svrIntf: _OffLine);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TOffLine.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TOffLine.GetDefaultInterface: _OffLine;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TOffLine.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TOffLineProperties.Create(Self);
{$ENDIF}
end;

destructor TOffLine.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TOffLine.GetServerProperties: TOffLineProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TOffLine.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnResize) then
         FOnResize(Self);
    2: if Assigned(FOnClick) then
         FOnClick(Self);
    3: if Assigned(FOnDblClick) then
         FOnDblClick(Self);
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    5: if Assigned(FOnKeyPress) then
         FOnKeyPress(Self, Smallint((TVarData(Params[0]).VPointer)^) {var Smallint});
    6: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                  Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    7: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    8: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    9: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                    Single((TVarData(Params[2]).VPointer)^) {var Single},
                    Single((TVarData(Params[3]).VPointer)^) {var Single});
  end; {case DispID}
end;

function TOffLine.Get_User: WideString;
begin
    Result := DefaultInterface.User;
end;

function TOffLine.Get_GetVoid(var Record_: OleVariant; var BCHFile: WideString): WordBool;
begin
    Result := DefaultInterface.GetVoid[Record_, BCHFile];
end;

function TOffLine.Get_GetInProcessRecord: Integer;
begin
    Result := DefaultInterface.GetInProcessRecord;
end;

procedure TOffLine.Set_User(const Param1: WideString);
  { Warning: The property User has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.User := Param1;
end;

function TOffLine.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TOffLine.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TOffLine.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TOffLine.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TOffLine.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

function TOffLine.Get_PccwPath: WideString;
begin
    Result := DefaultInterface.PccwPath;
end;

procedure TOffLine.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

procedure TOffLine.Set_Void(Param1: WordBool);
begin
  DefaultInterface.Set_Void(Param1);
end;

procedure TOffLine.Set_PccwPath(const Param1: WideString);
  { Warning: The property PccwPath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PccwPath := Param1;
end;

function TOffLine.Connect1(var CallBack: IDispatch): WordBool;
begin
  Result := DefaultInterface.Connect(CallBack);
end;

function TOffLine.Disconnect1: WordBool;
begin
  Result := DefaultInterface.Disconnect;
end;

function TOffLine.ProcessFile(var BCHFile: WideString): WordBool;
begin
  Result := DefaultInterface.ProcessFile(BCHFile);
end;

function TOffLine.GetErrorCode: Integer;
begin
  Result := DefaultInterface.GetErrorCode;
end;

function TOffLine.GetErrorDesc: WideString;
begin
  Result := DefaultInterface.GetErrorDesc;
end;

function TOffLine.GetTotals(var BCHFile: WideString): WordBool;
begin
  Result := DefaultInterface.GetTotals(BCHFile);
end;

function TOffLine.GetCard: WideString;
begin
  Result := DefaultInterface.GetCard;
end;

function TOffLine.GetItem: WideString;
begin
  Result := DefaultInterface.GetItem;
end;

function TOffLine.GetCount: Integer;
begin
  Result := DefaultInterface.GetCount;
end;

function TOffLine.GetRecords: Integer;
begin
  Result := DefaultInterface.GetRecords;
end;

function TOffLine.GetBalance: Currency;
begin
  Result := DefaultInterface.GetBalance;
end;

function TOffLine.GetExpDate: WideString;
begin
  Result := DefaultInterface.GetExpDate;
end;

function TOffLine.GetTransType: WideString;
begin
  Result := DefaultInterface.GetTransType;
end;

function TOffLine.GetAmount: WideString;
begin
  Result := DefaultInterface.GetAmount;
end;

function TOffLine.GetTicket: WideString;
begin
  Result := DefaultInterface.GetTicket;
end;

function TOffLine.GetAppCode: WideString;
begin
  Result := DefaultInterface.GetAppCode;
end;

function TOffLine.GetIndex: Integer;
begin
  Result := DefaultInterface.GetIndex;
end;

function TOffLine.GetBchFile: WideString;
begin
  Result := DefaultInterface.GetBchFile;
end;

function TOffLine.GetRecord(var Record_: OleVariant; var BCHFile: WideString): WordBool;
begin
  Result := DefaultInterface.GetRecord(Record_, BCHFile);
end;

function TOffLine.UpdateRecord(var Record_: OleVariant; var BCHFile: WideString): WordBool;
begin
  Result := DefaultInterface.UpdateRecord(Record_, BCHFile);
end;

function TOffLine.EraseFile(var BCHFile: WideString): WordBool;
begin
  Result := DefaultInterface.EraseFile(BCHFile);
end;

function TOffLine.Compact(var BCHFile: WideString): WordBool;
begin
  Result := DefaultInterface.Compact(BCHFile);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TOffLineProperties.Create(AServer: TOffLine);
begin
  inherited Create;
  FServer := AServer;
end;

function TOffLineProperties.GetDefaultInterface: _OffLine;
begin
  Result := FServer.DefaultInterface;
end;

function TOffLineProperties.Get_User: WideString;
begin
    Result := DefaultInterface.User;
end;

function TOffLineProperties.Get_GetVoid(var Record_: OleVariant; var BCHFile: WideString): WordBool;
begin
    Result := DefaultInterface.GetVoid[Record_, BCHFile];
end;

function TOffLineProperties.Get_GetInProcessRecord: Integer;
begin
    Result := DefaultInterface.GetInProcessRecord;
end;

procedure TOffLineProperties.Set_User(const Param1: WideString);
  { Warning: The property User has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.User := Param1;
end;

function TOffLineProperties.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TOffLineProperties.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TOffLineProperties.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TOffLineProperties.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TOffLineProperties.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

function TOffLineProperties.Get_PccwPath: WideString;
begin
    Result := DefaultInterface.PccwPath;
end;

procedure TOffLineProperties.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

procedure TOffLineProperties.Set_Void(Param1: WordBool);
begin
  DefaultInterface.Set_Void(Param1);
end;

procedure TOffLineProperties.Set_PccwPath(const Param1: WideString);
  { Warning: The property PccwPath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PccwPath := Param1;
end;

{$ENDIF}

class function CoCheck.Create: _Check;
begin
  Result := CreateComObject(CLASS_Check) as _Check;
end;

class function CoCheck.CreateRemote(const MachineName: string): _Check;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Check) as _Check;
end;

procedure TCheck.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{48F9A627-0370-46B7-BB40-C9714D0C481B}';
    IntfIID:   '{B1C4E3B9-DEA4-4357-A41C-4D496FDAD869}';
    EventIID:  '{2D0EC6BE-A510-463D-AAFF-FB48E0D44CC2}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCheck.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Check;
  end;
end;

procedure TCheck.ConnectTo(svrIntf: _Check);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TCheck.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TCheck.GetDefaultInterface: _Check;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCheck.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCheckProperties.Create(Self);
{$ENDIF}
end;

destructor TCheck.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCheck.GetServerProperties: TCheckProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCheck.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnResize) then
         FOnResize(Self);
    2: if Assigned(FOnClick) then
         FOnClick(Self);
    3: if Assigned(FOnDblClick) then
         FOnDblClick(Self);
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    5: if Assigned(FOnKeyPress) then
         FOnKeyPress(Self, Smallint((TVarData(Params[0]).VPointer)^) {var Smallint});
    6: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                  Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    7: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    8: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    9: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                    Single((TVarData(Params[2]).VPointer)^) {var Single},
                    Single((TVarData(Params[3]).VPointer)^) {var Single});
  end; {case DispID}
end;

function TCheck.Get_BackColor: Integer;
begin
    Result := DefaultInterface.BackColor;
end;

procedure TCheck.Set_BackColor(Param1: Integer);
begin
  DefaultInterface.Set_BackColor(Param1);
end;

function TCheck.Get_ForeColor: Integer;
begin
    Result := DefaultInterface.ForeColor;
end;

procedure TCheck.Set_ForeColor(Param1: Integer);
begin
  DefaultInterface.Set_ForeColor(Param1);
end;

function TCheck.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TCheck.Set_Enabled(Param1: WordBool);
begin
  DefaultInterface.Set_Enabled(Param1);
end;

function TCheck.Get_Font: IFontDisp;
begin
    Result := DefaultInterface.Font;
end;

procedure TCheck._Set_Font(const Param1: IFontDisp);
  { Warning: The property Font has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Font := Param1;
end;

function TCheck.Get_BackStyle: Smallint;
begin
    Result := DefaultInterface.BackStyle;
end;

procedure TCheck.Set_BackStyle(Param1: Smallint);
begin
  DefaultInterface.Set_BackStyle(Param1);
end;

function TCheck.Get_BorderStyle: Smallint;
begin
    Result := DefaultInterface.BorderStyle;
end;

procedure TCheck.Set_BorderStyle(Param1: Smallint);
begin
  DefaultInterface.Set_BorderStyle(Param1);
end;

procedure TCheck.Set_Services(Param1: ServicesType);
begin
  DefaultInterface.Set_Services(Param1);
end;

function TCheck.Get_Services: ServicesType;
begin
    Result := DefaultInterface.Services;
end;

function TCheck.Get_Action: WideString;
begin
    Result := DefaultInterface.Action;
end;

procedure TCheck.Set_Action(const Param1: WideString);
  { Warning: The property Action has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := Param1;
end;

function TCheck.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TCheck.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TCheck.Get_CheckReaderCode: CheckReaderCode;
begin
    Result := DefaultInterface.CheckReaderCode;
end;

procedure TCheck.Set_CheckReaderCode(Param1: CheckReaderCode);
begin
  DefaultInterface.Set_CheckReaderCode(Param1);
end;

function TCheck.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TCheck.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TCheck.Get_Drivers_License: WideString;
begin
    Result := DefaultInterface.Drivers_License;
end;

procedure TCheck.Set_Drivers_License(const Param1: WideString);
  { Warning: The property Drivers_License has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Drivers_License := Param1;
end;

function TCheck.Get_Phone_Number: WideString;
begin
    Result := DefaultInterface.Phone_Number;
end;

procedure TCheck.Set_Phone_Number(const Param1: WideString);
  { Warning: The property Phone_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Phone_Number := Param1;
end;

function TCheck.Get_Account_Number: WideString;
begin
    Result := DefaultInterface.Account_Number;
end;

procedure TCheck.Set_Account_Number(const Param1: WideString);
  { Warning: The property Account_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Account_Number := Param1;
end;

function TCheck.Get_Manual: WideString;
begin
    Result := DefaultInterface.Manual;
end;

procedure TCheck.Set_Manual(const Param1: WideString);
  { Warning: The property Manual has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Manual := Param1;
end;

function TCheck.Get_AdjustmentAmount: WideString;
begin
    Result := DefaultInterface.AdjustmentAmount;
end;

procedure TCheck.Set_AdjustmentAmount(const Param1: WideString);
  { Warning: The property AdjustmentAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AdjustmentAmount := Param1;
end;

function TCheck.Get_Amount: WideString;
begin
    Result := DefaultInterface.Amount;
end;

procedure TCheck.Set_Amount(const Param1: WideString);
  { Warning: The property Amount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Amount := Param1;
end;

function TCheck.Get_Transit_Number: WideString;
begin
    Result := DefaultInterface.Transit_Number;
end;

procedure TCheck.Set_Transit_Number(const Param1: WideString);
  { Warning: The property Transit_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Transit_Number := Param1;
end;

function TCheck.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TCheck.Set_State(const Param1: WideString);
  { Warning: The property State has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.State := Param1;
end;

function TCheck.Get_Ticket: WideString;
begin
    Result := DefaultInterface.Ticket;
end;

procedure TCheck.Set_Ticket(const Param1: WideString);
  { Warning: The property Ticket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ticket := Param1;
end;

function TCheck.Get_Multi: WideString;
begin
    Result := DefaultInterface.Multi;
end;

procedure TCheck.Set_Multi(const Param1: WideString);
  { Warning: The property Multi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Multi := Param1;
end;

function TCheck.Get_User: WideString;
begin
    Result := DefaultInterface.User;
end;

procedure TCheck.Set_User(const Param1: WideString);
  { Warning: The property User has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.User := Param1;
end;

function TCheck.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

procedure TCheck.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

function TCheck.Get_TimeOut: Integer;
begin
    Result := DefaultInterface.TimeOut;
end;

procedure TCheck.Set_TimeOut(Param1: Integer);
begin
  DefaultInterface.Set_TimeOut(Param1);
end;

function TCheck.Get_Check_Number: WideString;
begin
    Result := DefaultInterface.Check_Number;
end;

procedure TCheck.Set_Check_Number(const Param1: WideString);
  { Warning: The property Check_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Check_Number := Param1;
end;

function TCheck.Get_Birth_Date: WideString;
begin
    Result := DefaultInterface.Birth_Date;
end;

procedure TCheck.Set_Birth_Date(const Param1: WideString);
  { Warning: The property Birth_Date has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Birth_Date := Param1;
end;

procedure TCheck.Set_Cash_Back(const Param1: WideString);
  { Warning: The property Cash_Back has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cash_Back := Param1;
end;

function TCheck.Get_Cash_Back: WideString;
begin
    Result := DefaultInterface.Cash_Back;
end;

procedure TCheck.Set_Manager_Card(const Param1: WideString);
  { Warning: The property Manager_Card has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Manager_Card := Param1;
end;

function TCheck.Get_Manager_Card: WideString;
begin
    Result := DefaultInterface.Manager_Card;
end;

function TCheck.Get_Zip_Code: WideString;
begin
    Result := DefaultInterface.Zip_Code;
end;

procedure TCheck.Set_Zip_Code(const Param1: WideString);
  { Warning: The property Zip_Code has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Zip_Code := Param1;
end;

function TCheck.Get_OutDelay: Single;
begin
    Result := DefaultInterface.OutDelay;
end;

procedure TCheck.Set_OutDelay(Param1: Single);
begin
  DefaultInterface.Set_OutDelay(Param1);
end;

procedure TCheck.Set_PrintReceipts(const Param1: WideString);
  { Warning: The property PrintReceipts has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrintReceipts := Param1;
end;

function TCheck.Get_PrintReceipts: WideString;
begin
    Result := DefaultInterface.PrintReceipts;
end;

function TCheck.Get_XMLTrans: WordBool;
begin
    Result := DefaultInterface.XMLTrans;
end;

procedure TCheck.Set_XMLTrans(Param1: WordBool);
begin
  DefaultInterface.Set_XMLTrans(Param1);
end;

function TCheck.Get_TroutD: WideString;
begin
    Result := DefaultInterface.TroutD;
end;

procedure TCheck.Set_TroutD(const Param1: WideString);
  { Warning: The property TroutD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TroutD := Param1;
end;

function TCheck.Get_MICR_DATA: WideString;
begin
    Result := DefaultInterface.MICR_DATA;
end;

procedure TCheck.Set_MICR_DATA(const Param1: WideString);
  { Warning: The property MICR_DATA has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MICR_DATA := Param1;
end;

procedure TCheck.Set_IPAddress(const Param1: WideString);
  { Warning: The property IPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IPAddress := Param1;
end;

function TCheck.Get_IPAddress: WideString;
begin
    Result := DefaultInterface.IPAddress;
end;

procedure TCheck.Set_Port(Param1: Smallint);
begin
  DefaultInterface.Set_Port(Param1);
end;

function TCheck.Get_Port: Smallint;
begin
    Result := DefaultInterface.Port;
end;

procedure TCheck.Set_EnableSSL(Param1: WordBool);
begin
  DefaultInterface.Set_EnableSSL(Param1);
end;

function TCheck.Get_EnableSSL: WordBool;
begin
    Result := DefaultInterface.EnableSSL;
end;

function TCheck.Get_CommMethod: CommMethod;
begin
    Result := DefaultInterface.CommMethod;
end;

procedure TCheck.Set_CommMethod(Param1: CommMethod);
begin
  DefaultInterface.Set_CommMethod(Param1);
end;

procedure TCheck.Set_CheckType(const Param1: WideString);
  { Warning: The property CheckType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CheckType := Param1;
end;

function TCheck.Get_CheckType: WideString;
begin
    Result := DefaultInterface.CheckType;
end;

procedure TCheck.Set_CheckAccType(const Param1: WideString);
  { Warning: The property CheckAccType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CheckAccType := Param1;
end;

function TCheck.Get_CheckAccType: WideString;
begin
    Result := DefaultInterface.CheckAccType;
end;

procedure TCheck.Set_MICRStatus(const Param1: WideString);
  { Warning: The property MICRStatus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MICRStatus := Param1;
end;

function TCheck.Get_MICRStatus: WideString;
begin
    Result := DefaultInterface.MICRStatus;
end;

procedure TCheck.Set_CustomerName(const Param1: WideString);
  { Warning: The property CustomerName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerName := Param1;
end;

function TCheck.Get_CustomerName: WideString;
begin
    Result := DefaultInterface.CustomerName;
end;

procedure TCheck.Set_CustomerFirstName(const Param1: WideString);
  { Warning: The property CustomerFirstName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerFirstName := Param1;
end;

function TCheck.Get_CustomerFirstName: WideString;
begin
    Result := DefaultInterface.CustomerFirstName;
end;

procedure TCheck.Set_CustomerLastName(const Param1: WideString);
  { Warning: The property CustomerLastName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerLastName := Param1;
end;

function TCheck.Get_CustomerLastName: WideString;
begin
    Result := DefaultInterface.CustomerLastName;
end;

procedure TCheck.Set_CustomerStreet(const Param1: WideString);
  { Warning: The property CustomerStreet has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerStreet := Param1;
end;

function TCheck.Get_CustomerStreet: WideString;
begin
    Result := DefaultInterface.CustomerStreet;
end;

procedure TCheck.Set_CustomerCity(const Param1: WideString);
  { Warning: The property CustomerCity has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerCity := Param1;
end;

function TCheck.Get_CustomerCity: WideString;
begin
    Result := DefaultInterface.CustomerCity;
end;

procedure TCheck.Set_IDType(const Param1: WideString);
  { Warning: The property IDType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IDType := Param1;
end;

function TCheck.Get_IDType: WideString;
begin
    Result := DefaultInterface.IDType;
end;

procedure TCheck.Set_IDCountry(const Param1: WideString);
  { Warning: The property IDCountry has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IDCountry := Param1;
end;

function TCheck.Get_IDCountry: WideString;
begin
    Result := DefaultInterface.IDCountry;
end;

procedure TCheck.Set_DLTrackII(const Param1: WideString);
  { Warning: The property DLTrackII has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DLTrackII := Param1;
end;

function TCheck.Get_DLTrackII: WideString;
begin
    Result := DefaultInterface.DLTrackII;
end;

function TCheck.Get_ManagerNum: WideString;
begin
    Result := DefaultInterface.ManagerNum;
end;

procedure TCheck.Set_ManagerNum(const Param1: WideString);
  { Warning: The property ManagerNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ManagerNum := Param1;
end;

function TCheck.Get_CashierNum: WideString;
begin
    Result := DefaultInterface.CashierNum;
end;

procedure TCheck.Set_CashierNum(const Param1: WideString);
  { Warning: The property CashierNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashierNum := Param1;
end;

procedure TCheck.Refresh;
begin
  DefaultInterface.Refresh;
end;

function TCheck.GetTroutD: WideString;
begin
  Result := DefaultInterface.GetTroutD;
end;

function TCheck.GetRespCode: WideString;
begin
  Result := DefaultInterface.GetRespCode;
end;

function TCheck.GetResult: WideString;
begin
  Result := DefaultInterface.GetResult;
end;

function TCheck.GetReference: WideString;
begin
  Result := DefaultInterface.GetReference;
end;

function TCheck.GetApproved: WordBool;
begin
  Result := DefaultInterface.GetApproved;
end;

function TCheck.GetCaptured: WordBool;
begin
  Result := DefaultInterface.GetCaptured;
end;

function TCheck.GetAuth: WideString;
begin
  Result := DefaultInterface.GetAuth;
end;

function TCheck.GetTraceID: WideString;
begin
  Result := DefaultInterface.GetTraceID;
end;

function TCheck.GetImageStatus: WideString;
begin
  Result := DefaultInterface.GetImageStatus;
end;

function TCheck.GetResultCode: WideString;
begin
  Result := DefaultInterface.GetResultCode;
end;

function TCheck.GetTransNum: WideString;
begin
  Result := DefaultInterface.GetTransNum;
end;

function TCheck.GetReturnCheckNote: WideString;
begin
  Result := DefaultInterface.GetReturnCheckNote;
end;

function TCheck.GetReturnCheckFee: WideString;
begin
  Result := DefaultInterface.GetReturnCheckFee;
end;

function TCheck.GetErrorCode: Integer;
begin
  Result := DefaultInterface.GetErrorCode;
end;

function TCheck.GetErrorDesc: WideString;
begin
  Result := DefaultInterface.GetErrorDesc;
end;

function TCheck.GetXMLRequest: WideString;
begin
  Result := DefaultInterface.GetXMLRequest;
end;

function TCheck.GetXMLResponse: WideString;
begin
  Result := DefaultInterface.GetXMLResponse;
end;

function TCheck.VerifyAmount: WordBool;
begin
  Result := DefaultInterface.VerifyAmount;
end;

function TCheck.Send(var FileType: FileType): OleVariant;
begin
  Result := DefaultInterface.Send(FileType);
end;

function TCheck.Cancel: OleVariant;
begin
  Result := DefaultInterface.Cancel;
end;

function TCheck.DeleteUserFiles: OleVariant;
begin
  Result := DefaultInterface.DeleteUserFiles;
end;

procedure TCheck.Clear;
begin
  DefaultInterface.Clear;
end;

function TCheck.PccSysExists: WordBool;
begin
  Result := DefaultInterface.PccSysExists;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCheckProperties.Create(AServer: TCheck);
begin
  inherited Create;
  FServer := AServer;
end;

function TCheckProperties.GetDefaultInterface: _Check;
begin
  Result := FServer.DefaultInterface;
end;

function TCheckProperties.Get_BackColor: Integer;
begin
    Result := DefaultInterface.BackColor;
end;

procedure TCheckProperties.Set_BackColor(Param1: Integer);
begin
  DefaultInterface.Set_BackColor(Param1);
end;

function TCheckProperties.Get_ForeColor: Integer;
begin
    Result := DefaultInterface.ForeColor;
end;

procedure TCheckProperties.Set_ForeColor(Param1: Integer);
begin
  DefaultInterface.Set_ForeColor(Param1);
end;

function TCheckProperties.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TCheckProperties.Set_Enabled(Param1: WordBool);
begin
  DefaultInterface.Set_Enabled(Param1);
end;

function TCheckProperties.Get_Font: IFontDisp;
begin
    Result := DefaultInterface.Font;
end;

procedure TCheckProperties._Set_Font(const Param1: IFontDisp);
  { Warning: The property Font has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Font := Param1;
end;

function TCheckProperties.Get_BackStyle: Smallint;
begin
    Result := DefaultInterface.BackStyle;
end;

procedure TCheckProperties.Set_BackStyle(Param1: Smallint);
begin
  DefaultInterface.Set_BackStyle(Param1);
end;

function TCheckProperties.Get_BorderStyle: Smallint;
begin
    Result := DefaultInterface.BorderStyle;
end;

procedure TCheckProperties.Set_BorderStyle(Param1: Smallint);
begin
  DefaultInterface.Set_BorderStyle(Param1);
end;

procedure TCheckProperties.Set_Services(Param1: ServicesType);
begin
  DefaultInterface.Set_Services(Param1);
end;

function TCheckProperties.Get_Services: ServicesType;
begin
    Result := DefaultInterface.Services;
end;

function TCheckProperties.Get_Action: WideString;
begin
    Result := DefaultInterface.Action;
end;

procedure TCheckProperties.Set_Action(const Param1: WideString);
  { Warning: The property Action has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := Param1;
end;

function TCheckProperties.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TCheckProperties.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TCheckProperties.Get_CheckReaderCode: CheckReaderCode;
begin
    Result := DefaultInterface.CheckReaderCode;
end;

procedure TCheckProperties.Set_CheckReaderCode(Param1: CheckReaderCode);
begin
  DefaultInterface.Set_CheckReaderCode(Param1);
end;

function TCheckProperties.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TCheckProperties.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TCheckProperties.Get_Drivers_License: WideString;
begin
    Result := DefaultInterface.Drivers_License;
end;

procedure TCheckProperties.Set_Drivers_License(const Param1: WideString);
  { Warning: The property Drivers_License has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Drivers_License := Param1;
end;

function TCheckProperties.Get_Phone_Number: WideString;
begin
    Result := DefaultInterface.Phone_Number;
end;

procedure TCheckProperties.Set_Phone_Number(const Param1: WideString);
  { Warning: The property Phone_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Phone_Number := Param1;
end;

function TCheckProperties.Get_Account_Number: WideString;
begin
    Result := DefaultInterface.Account_Number;
end;

procedure TCheckProperties.Set_Account_Number(const Param1: WideString);
  { Warning: The property Account_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Account_Number := Param1;
end;

function TCheckProperties.Get_Manual: WideString;
begin
    Result := DefaultInterface.Manual;
end;

procedure TCheckProperties.Set_Manual(const Param1: WideString);
  { Warning: The property Manual has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Manual := Param1;
end;

function TCheckProperties.Get_AdjustmentAmount: WideString;
begin
    Result := DefaultInterface.AdjustmentAmount;
end;

procedure TCheckProperties.Set_AdjustmentAmount(const Param1: WideString);
  { Warning: The property AdjustmentAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AdjustmentAmount := Param1;
end;

function TCheckProperties.Get_Amount: WideString;
begin
    Result := DefaultInterface.Amount;
end;

procedure TCheckProperties.Set_Amount(const Param1: WideString);
  { Warning: The property Amount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Amount := Param1;
end;

function TCheckProperties.Get_Transit_Number: WideString;
begin
    Result := DefaultInterface.Transit_Number;
end;

procedure TCheckProperties.Set_Transit_Number(const Param1: WideString);
  { Warning: The property Transit_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Transit_Number := Param1;
end;

function TCheckProperties.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TCheckProperties.Set_State(const Param1: WideString);
  { Warning: The property State has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.State := Param1;
end;

function TCheckProperties.Get_Ticket: WideString;
begin
    Result := DefaultInterface.Ticket;
end;

procedure TCheckProperties.Set_Ticket(const Param1: WideString);
  { Warning: The property Ticket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ticket := Param1;
end;

function TCheckProperties.Get_Multi: WideString;
begin
    Result := DefaultInterface.Multi;
end;

procedure TCheckProperties.Set_Multi(const Param1: WideString);
  { Warning: The property Multi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Multi := Param1;
end;

function TCheckProperties.Get_User: WideString;
begin
    Result := DefaultInterface.User;
end;

procedure TCheckProperties.Set_User(const Param1: WideString);
  { Warning: The property User has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.User := Param1;
end;

function TCheckProperties.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

procedure TCheckProperties.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

function TCheckProperties.Get_TimeOut: Integer;
begin
    Result := DefaultInterface.TimeOut;
end;

procedure TCheckProperties.Set_TimeOut(Param1: Integer);
begin
  DefaultInterface.Set_TimeOut(Param1);
end;

function TCheckProperties.Get_Check_Number: WideString;
begin
    Result := DefaultInterface.Check_Number;
end;

procedure TCheckProperties.Set_Check_Number(const Param1: WideString);
  { Warning: The property Check_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Check_Number := Param1;
end;

function TCheckProperties.Get_Birth_Date: WideString;
begin
    Result := DefaultInterface.Birth_Date;
end;

procedure TCheckProperties.Set_Birth_Date(const Param1: WideString);
  { Warning: The property Birth_Date has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Birth_Date := Param1;
end;

procedure TCheckProperties.Set_Cash_Back(const Param1: WideString);
  { Warning: The property Cash_Back has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cash_Back := Param1;
end;

function TCheckProperties.Get_Cash_Back: WideString;
begin
    Result := DefaultInterface.Cash_Back;
end;

procedure TCheckProperties.Set_Manager_Card(const Param1: WideString);
  { Warning: The property Manager_Card has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Manager_Card := Param1;
end;

function TCheckProperties.Get_Manager_Card: WideString;
begin
    Result := DefaultInterface.Manager_Card;
end;

function TCheckProperties.Get_Zip_Code: WideString;
begin
    Result := DefaultInterface.Zip_Code;
end;

procedure TCheckProperties.Set_Zip_Code(const Param1: WideString);
  { Warning: The property Zip_Code has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Zip_Code := Param1;
end;

function TCheckProperties.Get_OutDelay: Single;
begin
    Result := DefaultInterface.OutDelay;
end;

procedure TCheckProperties.Set_OutDelay(Param1: Single);
begin
  DefaultInterface.Set_OutDelay(Param1);
end;

procedure TCheckProperties.Set_PrintReceipts(const Param1: WideString);
  { Warning: The property PrintReceipts has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrintReceipts := Param1;
end;

function TCheckProperties.Get_PrintReceipts: WideString;
begin
    Result := DefaultInterface.PrintReceipts;
end;

function TCheckProperties.Get_XMLTrans: WordBool;
begin
    Result := DefaultInterface.XMLTrans;
end;

procedure TCheckProperties.Set_XMLTrans(Param1: WordBool);
begin
  DefaultInterface.Set_XMLTrans(Param1);
end;

function TCheckProperties.Get_TroutD: WideString;
begin
    Result := DefaultInterface.TroutD;
end;

procedure TCheckProperties.Set_TroutD(const Param1: WideString);
  { Warning: The property TroutD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TroutD := Param1;
end;

function TCheckProperties.Get_MICR_DATA: WideString;
begin
    Result := DefaultInterface.MICR_DATA;
end;

procedure TCheckProperties.Set_MICR_DATA(const Param1: WideString);
  { Warning: The property MICR_DATA has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MICR_DATA := Param1;
end;

procedure TCheckProperties.Set_IPAddress(const Param1: WideString);
  { Warning: The property IPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IPAddress := Param1;
end;

function TCheckProperties.Get_IPAddress: WideString;
begin
    Result := DefaultInterface.IPAddress;
end;

procedure TCheckProperties.Set_Port(Param1: Smallint);
begin
  DefaultInterface.Set_Port(Param1);
end;

function TCheckProperties.Get_Port: Smallint;
begin
    Result := DefaultInterface.Port;
end;

procedure TCheckProperties.Set_EnableSSL(Param1: WordBool);
begin
  DefaultInterface.Set_EnableSSL(Param1);
end;

function TCheckProperties.Get_EnableSSL: WordBool;
begin
    Result := DefaultInterface.EnableSSL;
end;

function TCheckProperties.Get_CommMethod: CommMethod;
begin
    Result := DefaultInterface.CommMethod;
end;

procedure TCheckProperties.Set_CommMethod(Param1: CommMethod);
begin
  DefaultInterface.Set_CommMethod(Param1);
end;

procedure TCheckProperties.Set_CheckType(const Param1: WideString);
  { Warning: The property CheckType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CheckType := Param1;
end;

function TCheckProperties.Get_CheckType: WideString;
begin
    Result := DefaultInterface.CheckType;
end;

procedure TCheckProperties.Set_CheckAccType(const Param1: WideString);
  { Warning: The property CheckAccType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CheckAccType := Param1;
end;

function TCheckProperties.Get_CheckAccType: WideString;
begin
    Result := DefaultInterface.CheckAccType;
end;

procedure TCheckProperties.Set_MICRStatus(const Param1: WideString);
  { Warning: The property MICRStatus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MICRStatus := Param1;
end;

function TCheckProperties.Get_MICRStatus: WideString;
begin
    Result := DefaultInterface.MICRStatus;
end;

procedure TCheckProperties.Set_CustomerName(const Param1: WideString);
  { Warning: The property CustomerName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerName := Param1;
end;

function TCheckProperties.Get_CustomerName: WideString;
begin
    Result := DefaultInterface.CustomerName;
end;

procedure TCheckProperties.Set_CustomerFirstName(const Param1: WideString);
  { Warning: The property CustomerFirstName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerFirstName := Param1;
end;

function TCheckProperties.Get_CustomerFirstName: WideString;
begin
    Result := DefaultInterface.CustomerFirstName;
end;

procedure TCheckProperties.Set_CustomerLastName(const Param1: WideString);
  { Warning: The property CustomerLastName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerLastName := Param1;
end;

function TCheckProperties.Get_CustomerLastName: WideString;
begin
    Result := DefaultInterface.CustomerLastName;
end;

procedure TCheckProperties.Set_CustomerStreet(const Param1: WideString);
  { Warning: The property CustomerStreet has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerStreet := Param1;
end;

function TCheckProperties.Get_CustomerStreet: WideString;
begin
    Result := DefaultInterface.CustomerStreet;
end;

procedure TCheckProperties.Set_CustomerCity(const Param1: WideString);
  { Warning: The property CustomerCity has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerCity := Param1;
end;

function TCheckProperties.Get_CustomerCity: WideString;
begin
    Result := DefaultInterface.CustomerCity;
end;

procedure TCheckProperties.Set_IDType(const Param1: WideString);
  { Warning: The property IDType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IDType := Param1;
end;

function TCheckProperties.Get_IDType: WideString;
begin
    Result := DefaultInterface.IDType;
end;

procedure TCheckProperties.Set_IDCountry(const Param1: WideString);
  { Warning: The property IDCountry has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IDCountry := Param1;
end;

function TCheckProperties.Get_IDCountry: WideString;
begin
    Result := DefaultInterface.IDCountry;
end;

procedure TCheckProperties.Set_DLTrackII(const Param1: WideString);
  { Warning: The property DLTrackII has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DLTrackII := Param1;
end;

function TCheckProperties.Get_DLTrackII: WideString;
begin
    Result := DefaultInterface.DLTrackII;
end;

function TCheckProperties.Get_ManagerNum: WideString;
begin
    Result := DefaultInterface.ManagerNum;
end;

procedure TCheckProperties.Set_ManagerNum(const Param1: WideString);
  { Warning: The property ManagerNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ManagerNum := Param1;
end;

function TCheckProperties.Get_CashierNum: WideString;
begin
    Result := DefaultInterface.CashierNum;
end;

procedure TCheckProperties.Set_CashierNum(const Param1: WideString);
  { Warning: The property CashierNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashierNum := Param1;
end;

{$ENDIF}

class function CoGift.Create: _Gift;
begin
  Result := CreateComObject(CLASS_Gift) as _Gift;
end;

class function CoGift.CreateRemote(const MachineName: string): _Gift;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Gift) as _Gift;
end;

procedure TGift.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0BC68D72-B131-4E39-B7B6-9793E58701D5}';
    IntfIID:   '{80DFC293-8409-4ED3-A459-EDB8F43F974D}';
    EventIID:  '{279DEAA9-DA50-47F0-B470-4E17C125053D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGift.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Gift;
  end;
end;

procedure TGift.ConnectTo(svrIntf: _Gift);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TGift.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TGift.GetDefaultInterface: _Gift;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGift.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGiftProperties.Create(Self);
{$ENDIF}
end;

destructor TGift.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGift.GetServerProperties: TGiftProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TGift.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnResize) then
         FOnResize(Self);
    2: if Assigned(FOnClick) then
         FOnClick(Self);
    3: if Assigned(FOnDblClick) then
         FOnDblClick(Self);
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    5: if Assigned(FOnKeyPress) then
         FOnKeyPress(Self, Smallint((TVarData(Params[0]).VPointer)^) {var Smallint});
    6: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                  Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    7: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    8: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    9: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                    Single((TVarData(Params[2]).VPointer)^) {var Single},
                    Single((TVarData(Params[3]).VPointer)^) {var Single});
  end; {case DispID}
end;

procedure TGift.Set_Demo(Param1: WordBool);
begin
  DefaultInterface.Set_Demo(Param1);
end;

function TGift.Get_Demo: WordBool;
begin
    Result := DefaultInterface.Demo;
end;

procedure TGift.Set_PrintReceipts(const Param1: WideString);
  { Warning: The property PrintReceipts has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrintReceipts := Param1;
end;

function TGift.Get_PrintReceipts: WideString;
begin
    Result := DefaultInterface.PrintReceipts;
end;

function TGift.Get_BackColor: Integer;
begin
    Result := DefaultInterface.BackColor;
end;

procedure TGift.Set_BackColor(Param1: Integer);
begin
  DefaultInterface.Set_BackColor(Param1);
end;

function TGift.Get_ForeColor: Integer;
begin
    Result := DefaultInterface.ForeColor;
end;

procedure TGift.Set_ForeColor(Param1: Integer);
begin
  DefaultInterface.Set_ForeColor(Param1);
end;

function TGift.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TGift.Set_Enabled(Param1: WordBool);
begin
  DefaultInterface.Set_Enabled(Param1);
end;

function TGift.Get_Font: IFontDisp;
begin
    Result := DefaultInterface.Font;
end;

procedure TGift._Set_Font(const Param1: IFontDisp);
  { Warning: The property Font has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Font := Param1;
end;

function TGift.Get_BackStyle: Smallint;
begin
    Result := DefaultInterface.BackStyle;
end;

procedure TGift.Set_BackStyle(Param1: Smallint);
begin
  DefaultInterface.Set_BackStyle(Param1);
end;

function TGift.Get_BorderStyle: Smallint;
begin
    Result := DefaultInterface.BorderStyle;
end;

procedure TGift.Set_BorderStyle(Param1: Smallint);
begin
  DefaultInterface.Set_BorderStyle(Param1);
end;

function TGift.Get_PromoCode: WideString;
begin
    Result := DefaultInterface.PromoCode;
end;

procedure TGift.Set_PromoCode(const Param1: WideString);
  { Warning: The property PromoCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PromoCode := Param1;
end;

function TGift.Get_Partial: WordBool;
begin
    Result := DefaultInterface.Partial;
end;

procedure TGift.Set_Partial(Param1: WordBool);
begin
  DefaultInterface.Set_Partial(Param1);
end;

procedure TGift.Set_Points(const Param1: WideString);
  { Warning: The property Points has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Points := Param1;
end;

function TGift.Get_Points: WideString;
begin
    Result := DefaultInterface.Points;
end;

procedure TGift.Set_CashierID(const Param1: WideString);
  { Warning: The property CashierID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashierID := Param1;
end;

function TGift.Get_CashierID: WideString;
begin
    Result := DefaultInterface.CashierID;
end;

procedure TGift.Set_Authcode(const Param1: WideString);
  { Warning: The property Authcode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Authcode := Param1;
end;

function TGift.Get_Authcode: WideString;
begin
    Result := DefaultInterface.Authcode;
end;

procedure TGift.Set_OldCard(const Param1: WideString);
  { Warning: The property OldCard has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OldCard := Param1;
end;

function TGift.Get_OldCard: WideString;
begin
    Result := DefaultInterface.OldCard;
end;

procedure TGift.Set_Loyalty(Param1: WordBool);
begin
  DefaultInterface.Set_Loyalty(Param1);
end;

function TGift.Get_Loyalty: WordBool;
begin
    Result := DefaultInterface.Loyalty;
end;

procedure TGift.Set_TIP(const Param1: WideString);
  { Warning: The property TIP has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TIP := Param1;
end;

function TGift.Get_TIP: WideString;
begin
    Result := DefaultInterface.TIP;
end;

procedure TGift.Set_Refund(const Param1: WideString);
  { Warning: The property Refund has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Refund := Param1;
end;

function TGift.Get_Refund: WideString;
begin
    Result := DefaultInterface.Refund;
end;

procedure TGift.Set_RFID(const Param1: WideString);
  { Warning: The property RFID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RFID := Param1;
end;

function TGift.Get_RFID: WideString;
begin
    Result := DefaultInterface.RFID;
end;

procedure TGift.Set_Industry(const Param1: WideString);
  { Warning: The property Industry has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Industry := Param1;
end;

function TGift.Get_Industry: WideString;
begin
    Result := DefaultInterface.Industry;
end;

function TGift.Get_Force: WordBool;
begin
    Result := DefaultInterface.Force;
end;

procedure TGift.Set_Force(Param1: WordBool);
begin
  DefaultInterface.Set_Force(Param1);
end;

function TGift.Get_ExpDate: WideString;
begin
    Result := DefaultInterface.ExpDate;
end;

procedure TGift.Set_ExpDate(const Param1: WideString);
  { Warning: The property ExpDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExpDate := Param1;
end;

procedure TGift.Set_LastValidDate(const Param1: WideString);
  { Warning: The property LastValidDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LastValidDate := Param1;
end;

function TGift.Get_LastValidDate: WideString;
begin
    Result := DefaultInterface.LastValidDate;
end;

procedure TGift.Set_TotalCardNum(const Param1: WideString);
  { Warning: The property TotalCardNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TotalCardNum := Param1;
end;

function TGift.Get_TotalCardNum: WideString;
begin
    Result := DefaultInterface.TotalCardNum;
end;

procedure TGift.Set_IPAddress(const Param1: WideString);
  { Warning: The property IPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IPAddress := Param1;
end;

function TGift.Get_IPAddress: WideString;
begin
    Result := DefaultInterface.IPAddress;
end;

procedure TGift.Set_Port(Param1: Smallint);
begin
  DefaultInterface.Set_Port(Param1);
end;

function TGift.Get_Port: Smallint;
begin
    Result := DefaultInterface.Port;
end;

procedure TGift.Set_EnableSSL(Param1: WordBool);
begin
  DefaultInterface.Set_EnableSSL(Param1);
end;

function TGift.Get_EnableSSL: WordBool;
begin
    Result := DefaultInterface.EnableSSL;
end;

function TGift.Get_CommMethod: CommMethod;
begin
    Result := DefaultInterface.CommMethod;
end;

procedure TGift.Set_CommMethod(Param1: CommMethod);
begin
  DefaultInterface.Set_CommMethod(Param1);
end;

function TGift.Get_Ticket: WideString;
begin
    Result := DefaultInterface.Ticket;
end;

procedure TGift.Set_Ticket(const Param1: WideString);
  { Warning: The property Ticket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ticket := Param1;
end;

procedure TGift.Set_CardSeqNum(const Param1: WideString);
  { Warning: The property CardSeqNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CardSeqNum := Param1;
end;

function TGift.Get_CardSeqNum: WideString;
begin
    Result := DefaultInterface.CardSeqNum;
end;

function TGift.Get_OutDelay: Single;
begin
    Result := DefaultInterface.OutDelay;
end;

procedure TGift.Set_OutDelay(Param1: Single);
begin
  DefaultInterface.Set_OutDelay(Param1);
end;

function TGift.Get_Action: WideString;
begin
    Result := DefaultInterface.Action;
end;

procedure TGift.Set_Action(const Param1: WideString);
  { Warning: The property Action has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := Param1;
end;

function TGift.Get_XMLTran: WordBool;
begin
    Result := DefaultInterface.XMLTran;
end;

procedure TGift.Set_XMLTran(Param1: WordBool);
begin
  DefaultInterface.Set_XMLTran(Param1);
end;

function TGift.Get_TroutD: WideString;
begin
    Result := DefaultInterface.TroutD;
end;

procedure TGift.Set_TroutD(const Param1: WideString);
  { Warning: The property TroutD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TroutD := Param1;
end;

function TGift.Get_CheckCard: WordBool;
begin
    Result := DefaultInterface.CheckCard;
end;

procedure TGift.Set_CheckCard(Param1: WordBool);
begin
  DefaultInterface.Set_CheckCard(Param1);
end;

function TGift.Get_Amount: WideString;
begin
    Result := DefaultInterface.Amount;
end;

procedure TGift.Set_Amount(const Param1: WideString);
  { Warning: The property Amount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Amount := Param1;
end;

function TGift.Get_Card: WideString;
begin
    Result := DefaultInterface.Card;
end;

procedure TGift.Set_Card(const Param1: WideString);
  { Warning: The property Card has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Card := Param1;
end;

function TGift.Get_Manual: Integer;
begin
    Result := DefaultInterface.Manual;
end;

procedure TGift.Set_Manual(Param1: Integer);
begin
  DefaultInterface.Set_Manual(Param1);
end;

function TGift.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TGift.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TGift.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

procedure TGift.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

function TGift.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TGift.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TGift.Get_TimeOut: Integer;
begin
    Result := DefaultInterface.TimeOut;
end;

procedure TGift.Set_TimeOut(Param1: Integer);
begin
  DefaultInterface.Set_TimeOut(Param1);
end;

function TGift.Get_Track: WideString;
begin
    Result := DefaultInterface.Track;
end;

procedure TGift.Set_Track(const Param1: WideString);
  { Warning: The property Track has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Track := Param1;
end;

function TGift.Get_User: WideString;
begin
    Result := DefaultInterface.User;
end;

procedure TGift.Set_User(const Param1: WideString);
  { Warning: The property User has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.User := Param1;
end;

function TGift.Get_GratuityAmount: WideString;
begin
    Result := DefaultInterface.GratuityAmount;
end;

procedure TGift.Set_GratuityAmount(const Param1: WideString);
  { Warning: The property GratuityAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GratuityAmount := Param1;
end;

procedure TGift.Set_VirtualGiftCardFlag(Param1: WordBool);
begin
  DefaultInterface.Set_VirtualGiftCardFlag(Param1);
end;

function TGift.Get_VirtualGiftCardFlag: WordBool;
begin
    Result := DefaultInterface.VirtualGiftCardFlag;
end;

function TGift.Get_GiftPin: WideString;
begin
    Result := DefaultInterface.GiftPin;
end;

procedure TGift.Set_GiftPin(const Param1: WideString);
  { Warning: The property GiftPin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiftPin := Param1;
end;

procedure TGift.Set_Multi(const Param1: WideString);
  { Warning: The property Multi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Multi := Param1;
end;

function TGift.Get_Multi: WideString;
begin
    Result := DefaultInterface.Multi;
end;

procedure TGift.Set_TableNumber(const Param1: WideString);
  { Warning: The property TableNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TableNumber := Param1;
end;

function TGift.Get_TableNumber: WideString;
begin
    Result := DefaultInterface.TableNumber;
end;

procedure TGift.Set_TrackI(const Param1: WideString);
  { Warning: The property TrackI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TrackI := Param1;
end;

function TGift.Get_TrackI: WideString;
begin
    Result := DefaultInterface.TrackI;
end;

function TGift.GetTroutD: WideString;
begin
  Result := DefaultInterface.GetTroutD;
end;

function TGift.GetAuth: WideString;
begin
  Result := DefaultInterface.GetAuth;
end;

function TGift.GetRespCode: WideString;
begin
  Result := DefaultInterface.GetRespCode;
end;

function TGift.GetCaptured: WordBool;
begin
  Result := DefaultInterface.GetCaptured;
end;

function TGift.GetPointsCount: WideString;
begin
  Result := DefaultInterface.GetPointsCount;
end;

function TGift.GetPointsTotalAmount: WideString;
begin
  Result := DefaultInterface.GetPointsTotalAmount;
end;

function TGift.GetSaleCount: WideString;
begin
  Result := DefaultInterface.GetSaleCount;
end;

function TGift.GetSaleTotalAmount: WideString;
begin
  Result := DefaultInterface.GetSaleTotalAmount;
end;

function TGift.GetTIM: WideString;
begin
  Result := DefaultInterface.GetTIM;
end;

function TGift.GetTipCount: WideString;
begin
  Result := DefaultInterface.GetTipCount;
end;

function TGift.GetTipTotalAmount: WideString;
begin
  Result := DefaultInterface.GetTipTotalAmount;
end;

function TGift.GetTransDateTime: WideString;
begin
  Result := DefaultInterface.GetTransDateTime;
end;

function TGift.GetUpdateData: WideString;
begin
  Result := DefaultInterface.GetUpdateData;
end;

function TGift.GetVoidBalance: WideString;
begin
  Result := DefaultInterface.GetVoidBalance;
end;

function TGift.GetVoidCount: WideString;
begin
  Result := DefaultInterface.GetVoidCount;
end;

function TGift.GetVoidTotalAmount: WideString;
begin
  Result := DefaultInterface.GetVoidTotalAmount;
end;

function TGift.GetActivationCount: WideString;
begin
  Result := DefaultInterface.GetActivationCount;
end;

function TGift.GetActivationTotalAmount: WideString;
begin
  Result := DefaultInterface.GetActivationTotalAmount;
end;

function TGift.GetAddPointsCount: WideString;
begin
  Result := DefaultInterface.GetAddPointsCount;
end;

function TGift.GetAddPointsTotalAmount: WideString;
begin
  Result := DefaultInterface.GetAddPointsTotalAmount;
end;

function TGift.GetAddValueCount: WideString;
begin
  Result := DefaultInterface.GetAddValueCount;
end;

function TGift.GetAddValueTotalAmount: WideString;
begin
  Result := DefaultInterface.GetAddValueTotalAmount;
end;

function TGift.GetAmountDue: WideString;
begin
  Result := DefaultInterface.GetAmountDue;
end;

function TGift.GetAuthAmount: WideString;
begin
  Result := DefaultInterface.GetAuthAmount;
end;

function TGift.GetBalanceTransferCount: WideString;
begin
  Result := DefaultInterface.GetBalanceTransferCount;
end;

function TGift.GetBalanceTransferTotalAmount: WideString;
begin
  Result := DefaultInterface.GetBalanceTransferTotalAmount;
end;

function TGift.GetCashBack: WideString;
begin
  Result := DefaultInterface.GetCashBack;
end;

function TGift.GetCreditCount: WideString;
begin
  Result := DefaultInterface.GetCreditCount;
end;

function TGift.GetCreditTotalAmount: WideString;
begin
  Result := DefaultInterface.GetCreditTotalAmount;
end;

function TGift.GetExp: WideString;
begin
  Result := DefaultInterface.GetExp;
end;

function TGift.GetRefNumber: WideString;
begin
  Result := DefaultInterface.GetRefNumber;
end;

function TGift.GetResult: WideString;
begin
  Result := DefaultInterface.GetResult;
end;

function TGift.GetRet: WideString;
begin
  Result := DefaultInterface.GetRet;
end;

function TGift.GetTI: WideString;
begin
  Result := DefaultInterface.GetTI;
end;

function TGift.GetTicket: WideString;
begin
  Result := DefaultInterface.GetTicket;
end;

function TGift.GetTransNum: WideString;
begin
  Result := DefaultInterface.GetTransNum;
end;

function TGift.GetGiftCardIssuer: WideString;
begin
  Result := DefaultInterface.GetGiftCardIssuer;
end;

function TGift.GetGiftPin: WideString;
begin
  Result := DefaultInterface.GetGiftPin;
end;

function TGift.GetMiscMessage: WideString;
begin
  Result := DefaultInterface.GetMiscMessage;
end;

function TGift.GetPointsBalance: WideString;
begin
  Result := DefaultInterface.GetPointsBalance;
end;

function TGift.GetPreAuthCount: WideString;
begin
  Result := DefaultInterface.GetPreAuthCount;
end;

function TGift.GetPreAuthAmount: WideString;
begin
  Result := DefaultInterface.GetPreAuthAmount;
end;

function TGift.GetPostAuthCount: WideString;
begin
  Result := DefaultInterface.GetPostAuthCount;
end;

function TGift.GetPostAuthAmount: WideString;
begin
  Result := DefaultInterface.GetPostAuthAmount;
end;

function TGift.GetIssuanceCount: WideString;
begin
  Result := DefaultInterface.GetIssuanceCount;
end;

function TGift.GetIssuanceTotalAmount: WideString;
begin
  Result := DefaultInterface.GetIssuanceTotalAmount;
end;

function TGift.GetDeactivateCount: WideString;
begin
  Result := DefaultInterface.GetDeactivateCount;
end;

function TGift.GetDeactivateTotalAmount: WideString;
begin
  Result := DefaultInterface.GetDeactivateTotalAmount;
end;

function TGift.GetBalanceMergeCount: WideString;
begin
  Result := DefaultInterface.GetBalanceMergeCount;
end;

function TGift.GetBalanceMergeTotalAmount: WideString;
begin
  Result := DefaultInterface.GetBalanceMergeTotalAmount;
end;

function TGift.GetBalanceAdjustCount: WideString;
begin
  Result := DefaultInterface.GetBalanceAdjustCount;
end;

function TGift.GetBalanceAdjustTotalAmount: WideString;
begin
  Result := DefaultInterface.GetBalanceAdjustTotalAmount;
end;

function TGift.GetReportLostStolenCount: WideString;
begin
  Result := DefaultInterface.GetReportLostStolenCount;
end;

function TGift.GetReportLostStolenTotalAmount: WideString;
begin
  Result := DefaultInterface.GetReportLostStolenTotalAmount;
end;

function TGift.GetCashoutCount: WideString;
begin
  Result := DefaultInterface.GetCashoutCount;
end;

function TGift.GetCashoutTotalAmount: WideString;
begin
  Result := DefaultInterface.GetCashoutTotalAmount;
end;

function TGift.GetReactivateCount: WideString;
begin
  Result := DefaultInterface.GetReactivateCount;
end;

function TGift.GetReactivateTotalAmount: WideString;
begin
  Result := DefaultInterface.GetReactivateTotalAmount;
end;

function TGift.VerifyMerchantNumber: WordBool;
begin
  Result := DefaultInterface.VerifyMerchantNumber;
end;

function TGift.VerifyProcessor: WordBool;
begin
  Result := DefaultInterface.VerifyProcessor;
end;

function TGift.Send(var FileType: FileType): OleVariant;
begin
  Result := DefaultInterface.Send(FileType);
end;

function TGift.Cancel: OleVariant;
begin
  Result := DefaultInterface.Cancel;
end;

function TGift.DeleteUserFiles: OleVariant;
begin
  Result := DefaultInterface.DeleteUserFiles;
end;

function TGift.GetGiftCardType(var CardNumber: WideString): WideString;
begin
  Result := DefaultInterface.GetGiftCardType(CardNumber);
end;

function TGift.GetErrorCode: Integer;
begin
  Result := DefaultInterface.GetErrorCode;
end;

function TGift.GetErrorDesc: WideString;
begin
  Result := DefaultInterface.GetErrorDesc;
end;

function TGift.GetParseData(var Data: WideString): Smallint;
begin
  Result := DefaultInterface.GetParseData(Data);
end;

function TGift.GetXMLResponse: WideString;
begin
  Result := DefaultInterface.GetXMLResponse;
end;

function TGift.VerifyAmount: WordBool;
begin
  Result := DefaultInterface.VerifyAmount;
end;

function TGift.VerifyAmount2: WordBool;
begin
  Result := DefaultInterface.VerifyAmount2;
end;

function TGift.VerifyGiftCard(var CardNumber: WideString): WordBool;
begin
  Result := DefaultInterface.VerifyGiftCard(CardNumber);
end;

function TGift.ValidCardLength(var CardNumber: WideString): WordBool;
begin
  Result := DefaultInterface.ValidCardLength(CardNumber);
end;

function TGift.PccSysExists: WordBool;
begin
  Result := DefaultInterface.PccSysExists;
end;

procedure TGift.Clear;
begin
  DefaultInterface.Clear;
end;

function TGift.Abort: WordBool;
begin
  Result := DefaultInterface.Abort;
end;

function TGift.ValidDate: WordBool;
begin
  Result := DefaultInterface.ValidDate;
end;

function TGift.VerifyExpDate: WordBool;
begin
  Result := DefaultInterface.VerifyExpDate;
end;

function TGift.GetGiftCardBalance: WideString;
begin
  Result := DefaultInterface.GetGiftCardBalance;
end;

function TGift.ValidIssuer(var CardIssuer: WideString): WordBool;
begin
  Result := DefaultInterface.ValidIssuer(CardIssuer);
end;

function TGift.GetXMLRequest: WideString;
begin
  Result := DefaultInterface.GetXMLRequest;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGiftProperties.Create(AServer: TGift);
begin
  inherited Create;
  FServer := AServer;
end;

function TGiftProperties.GetDefaultInterface: _Gift;
begin
  Result := FServer.DefaultInterface;
end;

procedure TGiftProperties.Set_Demo(Param1: WordBool);
begin
  DefaultInterface.Set_Demo(Param1);
end;

function TGiftProperties.Get_Demo: WordBool;
begin
    Result := DefaultInterface.Demo;
end;

procedure TGiftProperties.Set_PrintReceipts(const Param1: WideString);
  { Warning: The property PrintReceipts has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrintReceipts := Param1;
end;

function TGiftProperties.Get_PrintReceipts: WideString;
begin
    Result := DefaultInterface.PrintReceipts;
end;

function TGiftProperties.Get_BackColor: Integer;
begin
    Result := DefaultInterface.BackColor;
end;

procedure TGiftProperties.Set_BackColor(Param1: Integer);
begin
  DefaultInterface.Set_BackColor(Param1);
end;

function TGiftProperties.Get_ForeColor: Integer;
begin
    Result := DefaultInterface.ForeColor;
end;

procedure TGiftProperties.Set_ForeColor(Param1: Integer);
begin
  DefaultInterface.Set_ForeColor(Param1);
end;

function TGiftProperties.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TGiftProperties.Set_Enabled(Param1: WordBool);
begin
  DefaultInterface.Set_Enabled(Param1);
end;

function TGiftProperties.Get_Font: IFontDisp;
begin
    Result := DefaultInterface.Font;
end;

procedure TGiftProperties._Set_Font(const Param1: IFontDisp);
  { Warning: The property Font has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Font := Param1;
end;

function TGiftProperties.Get_BackStyle: Smallint;
begin
    Result := DefaultInterface.BackStyle;
end;

procedure TGiftProperties.Set_BackStyle(Param1: Smallint);
begin
  DefaultInterface.Set_BackStyle(Param1);
end;

function TGiftProperties.Get_BorderStyle: Smallint;
begin
    Result := DefaultInterface.BorderStyle;
end;

procedure TGiftProperties.Set_BorderStyle(Param1: Smallint);
begin
  DefaultInterface.Set_BorderStyle(Param1);
end;

function TGiftProperties.Get_PromoCode: WideString;
begin
    Result := DefaultInterface.PromoCode;
end;

procedure TGiftProperties.Set_PromoCode(const Param1: WideString);
  { Warning: The property PromoCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PromoCode := Param1;
end;

function TGiftProperties.Get_Partial: WordBool;
begin
    Result := DefaultInterface.Partial;
end;

procedure TGiftProperties.Set_Partial(Param1: WordBool);
begin
  DefaultInterface.Set_Partial(Param1);
end;

procedure TGiftProperties.Set_Points(const Param1: WideString);
  { Warning: The property Points has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Points := Param1;
end;

function TGiftProperties.Get_Points: WideString;
begin
    Result := DefaultInterface.Points;
end;

procedure TGiftProperties.Set_CashierID(const Param1: WideString);
  { Warning: The property CashierID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashierID := Param1;
end;

function TGiftProperties.Get_CashierID: WideString;
begin
    Result := DefaultInterface.CashierID;
end;

procedure TGiftProperties.Set_Authcode(const Param1: WideString);
  { Warning: The property Authcode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Authcode := Param1;
end;

function TGiftProperties.Get_Authcode: WideString;
begin
    Result := DefaultInterface.Authcode;
end;

procedure TGiftProperties.Set_OldCard(const Param1: WideString);
  { Warning: The property OldCard has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OldCard := Param1;
end;

function TGiftProperties.Get_OldCard: WideString;
begin
    Result := DefaultInterface.OldCard;
end;

procedure TGiftProperties.Set_Loyalty(Param1: WordBool);
begin
  DefaultInterface.Set_Loyalty(Param1);
end;

function TGiftProperties.Get_Loyalty: WordBool;
begin
    Result := DefaultInterface.Loyalty;
end;

procedure TGiftProperties.Set_TIP(const Param1: WideString);
  { Warning: The property TIP has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TIP := Param1;
end;

function TGiftProperties.Get_TIP: WideString;
begin
    Result := DefaultInterface.TIP;
end;

procedure TGiftProperties.Set_Refund(const Param1: WideString);
  { Warning: The property Refund has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Refund := Param1;
end;

function TGiftProperties.Get_Refund: WideString;
begin
    Result := DefaultInterface.Refund;
end;

procedure TGiftProperties.Set_RFID(const Param1: WideString);
  { Warning: The property RFID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RFID := Param1;
end;

function TGiftProperties.Get_RFID: WideString;
begin
    Result := DefaultInterface.RFID;
end;

procedure TGiftProperties.Set_Industry(const Param1: WideString);
  { Warning: The property Industry has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Industry := Param1;
end;

function TGiftProperties.Get_Industry: WideString;
begin
    Result := DefaultInterface.Industry;
end;

function TGiftProperties.Get_Force: WordBool;
begin
    Result := DefaultInterface.Force;
end;

procedure TGiftProperties.Set_Force(Param1: WordBool);
begin
  DefaultInterface.Set_Force(Param1);
end;

function TGiftProperties.Get_ExpDate: WideString;
begin
    Result := DefaultInterface.ExpDate;
end;

procedure TGiftProperties.Set_ExpDate(const Param1: WideString);
  { Warning: The property ExpDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExpDate := Param1;
end;

procedure TGiftProperties.Set_LastValidDate(const Param1: WideString);
  { Warning: The property LastValidDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LastValidDate := Param1;
end;

function TGiftProperties.Get_LastValidDate: WideString;
begin
    Result := DefaultInterface.LastValidDate;
end;

procedure TGiftProperties.Set_TotalCardNum(const Param1: WideString);
  { Warning: The property TotalCardNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TotalCardNum := Param1;
end;

function TGiftProperties.Get_TotalCardNum: WideString;
begin
    Result := DefaultInterface.TotalCardNum;
end;

procedure TGiftProperties.Set_IPAddress(const Param1: WideString);
  { Warning: The property IPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IPAddress := Param1;
end;

function TGiftProperties.Get_IPAddress: WideString;
begin
    Result := DefaultInterface.IPAddress;
end;

procedure TGiftProperties.Set_Port(Param1: Smallint);
begin
  DefaultInterface.Set_Port(Param1);
end;

function TGiftProperties.Get_Port: Smallint;
begin
    Result := DefaultInterface.Port;
end;

procedure TGiftProperties.Set_EnableSSL(Param1: WordBool);
begin
  DefaultInterface.Set_EnableSSL(Param1);
end;

function TGiftProperties.Get_EnableSSL: WordBool;
begin
    Result := DefaultInterface.EnableSSL;
end;

function TGiftProperties.Get_CommMethod: CommMethod;
begin
    Result := DefaultInterface.CommMethod;
end;

procedure TGiftProperties.Set_CommMethod(Param1: CommMethod);
begin
  DefaultInterface.Set_CommMethod(Param1);
end;

function TGiftProperties.Get_Ticket: WideString;
begin
    Result := DefaultInterface.Ticket;
end;

procedure TGiftProperties.Set_Ticket(const Param1: WideString);
  { Warning: The property Ticket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ticket := Param1;
end;

procedure TGiftProperties.Set_CardSeqNum(const Param1: WideString);
  { Warning: The property CardSeqNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CardSeqNum := Param1;
end;

function TGiftProperties.Get_CardSeqNum: WideString;
begin
    Result := DefaultInterface.CardSeqNum;
end;

function TGiftProperties.Get_OutDelay: Single;
begin
    Result := DefaultInterface.OutDelay;
end;

procedure TGiftProperties.Set_OutDelay(Param1: Single);
begin
  DefaultInterface.Set_OutDelay(Param1);
end;

function TGiftProperties.Get_Action: WideString;
begin
    Result := DefaultInterface.Action;
end;

procedure TGiftProperties.Set_Action(const Param1: WideString);
  { Warning: The property Action has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := Param1;
end;

function TGiftProperties.Get_XMLTran: WordBool;
begin
    Result := DefaultInterface.XMLTran;
end;

procedure TGiftProperties.Set_XMLTran(Param1: WordBool);
begin
  DefaultInterface.Set_XMLTran(Param1);
end;

function TGiftProperties.Get_TroutD: WideString;
begin
    Result := DefaultInterface.TroutD;
end;

procedure TGiftProperties.Set_TroutD(const Param1: WideString);
  { Warning: The property TroutD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TroutD := Param1;
end;

function TGiftProperties.Get_CheckCard: WordBool;
begin
    Result := DefaultInterface.CheckCard;
end;

procedure TGiftProperties.Set_CheckCard(Param1: WordBool);
begin
  DefaultInterface.Set_CheckCard(Param1);
end;

function TGiftProperties.Get_Amount: WideString;
begin
    Result := DefaultInterface.Amount;
end;

procedure TGiftProperties.Set_Amount(const Param1: WideString);
  { Warning: The property Amount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Amount := Param1;
end;

function TGiftProperties.Get_Card: WideString;
begin
    Result := DefaultInterface.Card;
end;

procedure TGiftProperties.Set_Card(const Param1: WideString);
  { Warning: The property Card has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Card := Param1;
end;

function TGiftProperties.Get_Manual: Integer;
begin
    Result := DefaultInterface.Manual;
end;

procedure TGiftProperties.Set_Manual(Param1: Integer);
begin
  DefaultInterface.Set_Manual(Param1);
end;

function TGiftProperties.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TGiftProperties.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TGiftProperties.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

procedure TGiftProperties.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

function TGiftProperties.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TGiftProperties.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TGiftProperties.Get_TimeOut: Integer;
begin
    Result := DefaultInterface.TimeOut;
end;

procedure TGiftProperties.Set_TimeOut(Param1: Integer);
begin
  DefaultInterface.Set_TimeOut(Param1);
end;

function TGiftProperties.Get_Track: WideString;
begin
    Result := DefaultInterface.Track;
end;

procedure TGiftProperties.Set_Track(const Param1: WideString);
  { Warning: The property Track has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Track := Param1;
end;

function TGiftProperties.Get_User: WideString;
begin
    Result := DefaultInterface.User;
end;

procedure TGiftProperties.Set_User(const Param1: WideString);
  { Warning: The property User has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.User := Param1;
end;

function TGiftProperties.Get_GratuityAmount: WideString;
begin
    Result := DefaultInterface.GratuityAmount;
end;

procedure TGiftProperties.Set_GratuityAmount(const Param1: WideString);
  { Warning: The property GratuityAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GratuityAmount := Param1;
end;

procedure TGiftProperties.Set_VirtualGiftCardFlag(Param1: WordBool);
begin
  DefaultInterface.Set_VirtualGiftCardFlag(Param1);
end;

function TGiftProperties.Get_VirtualGiftCardFlag: WordBool;
begin
    Result := DefaultInterface.VirtualGiftCardFlag;
end;

function TGiftProperties.Get_GiftPin: WideString;
begin
    Result := DefaultInterface.GiftPin;
end;

procedure TGiftProperties.Set_GiftPin(const Param1: WideString);
  { Warning: The property GiftPin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiftPin := Param1;
end;

procedure TGiftProperties.Set_Multi(const Param1: WideString);
  { Warning: The property Multi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Multi := Param1;
end;

function TGiftProperties.Get_Multi: WideString;
begin
    Result := DefaultInterface.Multi;
end;

procedure TGiftProperties.Set_TableNumber(const Param1: WideString);
  { Warning: The property TableNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TableNumber := Param1;
end;

function TGiftProperties.Get_TableNumber: WideString;
begin
    Result := DefaultInterface.TableNumber;
end;

procedure TGiftProperties.Set_TrackI(const Param1: WideString);
  { Warning: The property TrackI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TrackI := Param1;
end;

function TGiftProperties.Get_TrackI: WideString;
begin
    Result := DefaultInterface.TrackI;
end;

{$ENDIF}

class function CoDebit.Create: _Debit;
begin
  Result := CreateComObject(CLASS_Debit) as _Debit;
end;

class function CoDebit.CreateRemote(const MachineName: string): _Debit;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Debit) as _Debit;
end;

procedure TDebit.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{66422F6B-EA9A-4EC4-9D69-3D0E3D94FA42}';
    IntfIID:   '{CF9FE2C2-ED1D-4390-A1C3-04DABEDD0DCF}';
    EventIID:  '{0F15BA88-A983-4977-B6F2-E5339BED2F78}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDebit.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Debit;
  end;
end;

procedure TDebit.ConnectTo(svrIntf: _Debit);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TDebit.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TDebit.GetDefaultInterface: _Debit;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDebit.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDebitProperties.Create(Self);
{$ENDIF}
end;

destructor TDebit.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDebit.GetServerProperties: TDebitProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TDebit.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self);
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self);
    3: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    4: if Assigned(FOnKeyPress) then
         FOnKeyPress(Self, Smallint((TVarData(Params[0]).VPointer)^) {var Smallint});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                  Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    6: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    7: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    8: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                    Single((TVarData(Params[2]).VPointer)^) {var Single},
                    Single((TVarData(Params[3]).VPointer)^) {var Single});
  end; {case DispID}
end;

function TDebit.Get_Action: Integer;
begin
    Result := DefaultInterface.Action;
end;

procedure TDebit.Set_Action(Param1: Integer);
begin
  DefaultInterface.Set_Action(Param1);
end;

function TDebit.Get_Amount: WideString;
begin
    Result := DefaultInterface.Amount;
end;

procedure TDebit.Set_Amount(const Param1: WideString);
  { Warning: The property Amount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Amount := Param1;
end;

function TDebit.Get_Billpay: WideString;
begin
    Result := DefaultInterface.Billpay;
end;

procedure TDebit.Set_Billpay(const Param1: WideString);
  { Warning: The property Billpay has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Billpay := Param1;
end;

function TDebit.Get_Card: WideString;
begin
    Result := DefaultInterface.Card;
end;

procedure TDebit.Set_Card(const Param1: WideString);
  { Warning: The property Card has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Card := Param1;
end;

procedure TDebit.Set_ExpDate(const Param1: WideString);
  { Warning: The property ExpDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExpDate := Param1;
end;

function TDebit.Get_ExpDate: WideString;
begin
    Result := DefaultInterface.ExpDate;
end;

function TDebit.Get_Manual: Integer;
begin
    Result := DefaultInterface.Manual;
end;

procedure TDebit.Set_Manual(Param1: Integer);
begin
  DefaultInterface.Set_Manual(Param1);
end;

function TDebit.Get_member: WideString;
begin
    Result := DefaultInterface.member;
end;

procedure TDebit.Set_member(const Param1: WideString);
  { Warning: The property member has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.member := Param1;
end;

function TDebit.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TDebit.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TDebit.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

procedure TDebit.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

function TDebit.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TDebit.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

procedure TDebit.Set_PrintReceipts(const Param1: WideString);
  { Warning: The property PrintReceipts has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrintReceipts := Param1;
end;

function TDebit.Get_PrintReceipts: WideString;
begin
    Result := DefaultInterface.PrintReceipts;
end;

function TDebit.Get_TimeOut: Integer;
begin
    Result := DefaultInterface.TimeOut;
end;

procedure TDebit.Set_TimeOut(Param1: Integer);
begin
  DefaultInterface.Set_TimeOut(Param1);
end;

function TDebit.Get_Track: WideString;
begin
    Result := DefaultInterface.Track;
end;

procedure TDebit.Set_Track(const Param1: WideString);
  { Warning: The property Track has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Track := Param1;
end;

function TDebit.Get_User: WideString;
begin
    Result := DefaultInterface.User;
end;

procedure TDebit.Set_User(const Param1: WideString);
  { Warning: The property User has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.User := Param1;
end;

function TDebit.Get_Pin: WideString;
begin
    Result := DefaultInterface.Pin;
end;

procedure TDebit.Set_Pin(const Param1: WideString);
  { Warning: The property Pin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Pin := Param1;
end;

function TDebit.Get_KeySerialNumber: WideString;
begin
    Result := DefaultInterface.KeySerialNumber;
end;

procedure TDebit.Set_KeySerialNumber(const Param1: WideString);
  { Warning: The property KeySerialNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KeySerialNumber := Param1;
end;

function TDebit.Get_Ticket: WideString;
begin
    Result := DefaultInterface.Ticket;
end;

procedure TDebit.Set_Ticket(const Param1: WideString);
  { Warning: The property Ticket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ticket := Param1;
end;

function TDebit.Get_CashBack: WideString;
begin
    Result := DefaultInterface.CashBack;
end;

procedure TDebit.Set_CashBack(const Param1: WideString);
  { Warning: The property CashBack has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashBack := Param1;
end;

function TDebit.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TDebit.Set_Reference(const Param1: WideString);
  { Warning: The property Reference has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Reference := Param1;
end;

function TDebit.Get_RFID: WideString;
begin
    Result := DefaultInterface.RFID;
end;

procedure TDebit.Set_RFID(const Param1: WideString);
  { Warning: The property RFID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RFID := Param1;
end;

function TDebit.Get_OutDelay: Single;
begin
    Result := DefaultInterface.OutDelay;
end;

procedure TDebit.Set_OutDelay(Param1: Single);
begin
  DefaultInterface.Set_OutDelay(Param1);
end;

function TDebit.Get_TransNum: WideString;
begin
    Result := DefaultInterface.TransNum;
end;

procedure TDebit.Set_TransNum(const Param1: WideString);
  { Warning: The property TransNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransNum := Param1;
end;

function TDebit.Get_ShiftID: WideString;
begin
    Result := DefaultInterface.ShiftID;
end;

procedure TDebit.Set_ShiftID(const Param1: WideString);
  { Warning: The property ShiftID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ShiftID := Param1;
end;

function TDebit.Get_LanguageCode: WideString;
begin
    Result := DefaultInterface.LanguageCode;
end;

procedure TDebit.Set_LanguageCode(const Param1: WideString);
  { Warning: The property LanguageCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LanguageCode := Param1;
end;

function TDebit.Get_MACData: WideString;
begin
    Result := DefaultInterface.MACData;
end;

procedure TDebit.Set_MACData(const Param1: WideString);
  { Warning: The property MACData has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MACData := Param1;
end;

function TDebit.Get_DebitType: WideString;
begin
    Result := DefaultInterface.DebitType;
end;

procedure TDebit.Set_DebitType(const Param1: WideString);
  { Warning: The property DebitType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DebitType := Param1;
end;

function TDebit.Get_FoodStamp: WordBool;
begin
    Result := DefaultInterface.FoodStamp;
end;

procedure TDebit.Set_FoodStamp(Param1: WordBool);
begin
  DefaultInterface.Set_FoodStamp(Param1);
end;

function TDebit.Get_Authcode: WideString;
begin
    Result := DefaultInterface.Authcode;
end;

procedure TDebit.Set_Authcode(const Param1: WideString);
  { Warning: The property Authcode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Authcode := Param1;
end;

procedure TDebit.Set_IPAddress(const Param1: WideString);
  { Warning: The property IPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IPAddress := Param1;
end;

function TDebit.Get_IPAddress: WideString;
begin
    Result := DefaultInterface.IPAddress;
end;

procedure TDebit.Set_Port(Param1: Smallint);
begin
  DefaultInterface.Set_Port(Param1);
end;

function TDebit.Get_Port: Smallint;
begin
    Result := DefaultInterface.Port;
end;

procedure TDebit.Set_EnableSSL(Param1: WordBool);
begin
  DefaultInterface.Set_EnableSSL(Param1);
end;

function TDebit.Get_EnableSSL: WordBool;
begin
    Result := DefaultInterface.EnableSSL;
end;

function TDebit.Get_Command: WideString;
begin
    Result := DefaultInterface.Command;
end;

procedure TDebit.Set_Command(const Param1: WideString);
  { Warning: The property Command has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Command := Param1;
end;

function TDebit.Get_CommMethod: CommMethod;
begin
    Result := DefaultInterface.CommMethod;
end;

procedure TDebit.Set_CommMethod(Param1: CommMethod);
begin
  DefaultInterface.Set_CommMethod(Param1);
end;

function TDebit.Get_Voucher: WideString;
begin
    Result := DefaultInterface.Voucher;
end;

procedure TDebit.Set_Voucher(const Param1: WideString);
  { Warning: The property Voucher has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Voucher := Param1;
end;

function TDebit.Get_Gratuity: WideString;
begin
    Result := DefaultInterface.Gratuity;
end;

procedure TDebit.Set_Gratuity(const Param1: WideString);
  { Warning: The property Gratuity has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Gratuity := Param1;
end;

function TDebit.Get_XMLTran: WordBool;
begin
    Result := DefaultInterface.XMLTran;
end;

procedure TDebit.Set_XMLTran(Param1: WordBool);
begin
  DefaultInterface.Set_XMLTran(Param1);
end;

function TDebit.Get_OrigPurchData: WideString;
begin
    Result := DefaultInterface.OrigPurchData;
end;

procedure TDebit.Set_OrigPurchData(const Param1: WideString);
  { Warning: The property OrigPurchData has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OrigPurchData := Param1;
end;

function TDebit.Get_TroutD: WideString;
begin
    Result := DefaultInterface.TroutD;
end;

procedure TDebit.Set_TroutD(const Param1: WideString);
  { Warning: The property TroutD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TroutD := Param1;
end;

function TDebit.Get_PumpNumber: WideString;
begin
    Result := DefaultInterface.PumpNumber;
end;

procedure TDebit.Set_PumpNumber(const Param1: WideString);
  { Warning: The property PumpNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PumpNumber := Param1;
end;

function TDebit.Get_SurchargeAmount: WideString;
begin
    Result := DefaultInterface.SurchargeAmount;
end;

procedure TDebit.Set_SurchargeAmount(const Param1: WideString);
  { Warning: The property SurchargeAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SurchargeAmount := Param1;
end;

function TDebit.GetApproved: WordBool;
begin
  Result := DefaultInterface.GetApproved;
end;

function TDebit.GetTI: WideString;
begin
  Result := DefaultInterface.GetTI;
end;

function TDebit.GetMSI: WideString;
begin
  Result := DefaultInterface.GetMSI;
end;

function TDebit.GetTermFee: WideString;
begin
  Result := DefaultInterface.GetTermFee;
end;

function TDebit.GetTraceNum: WideString;
begin
  Result := DefaultInterface.GetTraceNum;
end;

function TDebit.GetAvlBalance: WideString;
begin
  Result := DefaultInterface.GetAvlBalance;
end;

function TDebit.GetCaptured: WordBool;
begin
  Result := DefaultInterface.GetCaptured;
end;

function TDebit.GetTroutD: WideString;
begin
  Result := DefaultInterface.GetTroutD;
end;

function TDebit.GetTransNum: WideString;
begin
  Result := DefaultInterface.GetTransNum;
end;

function TDebit.GetEBTFoodBalance: WideString;
begin
  Result := DefaultInterface.GetEBTFoodBalance;
end;

function TDebit.GetEBTCashBalance: WideString;
begin
  Result := DefaultInterface.GetEBTCashBalance;
end;

function TDebit.GetAuthAmount: OleVariant;
begin
  Result := DefaultInterface.GetAuthAmount;
end;

function TDebit.GetAmountDue: OleVariant;
begin
  Result := DefaultInterface.GetAmountDue;
end;

function TDebit.GetDCAvailBalance: OleVariant;
begin
  Result := DefaultInterface.GetDCAvailBalance;
end;

function TDebit.GetTraceNumber: OleVariant;
begin
  Result := DefaultInterface.GetTraceNumber;
end;

function TDebit.GetTransactionReferenceNumber: OleVariant;
begin
  Result := DefaultInterface.GetTransactionReferenceNumber;
end;

function TDebit.GetSurchargeAmount: OleVariant;
begin
  Result := DefaultInterface.GetSurchargeAmount;
end;

function TDebit.GetErrorDesc: WideString;
begin
  Result := DefaultInterface.GetErrorDesc;
end;

function TDebit.GetErrorCode: Integer;
begin
  Result := DefaultInterface.GetErrorCode;
end;

function TDebit.DeleteUserFiles: OleVariant;
begin
  Result := DefaultInterface.DeleteUserFiles;
end;

function TDebit.PccSysExists: WordBool;
begin
  Result := DefaultInterface.PccSysExists;
end;

function TDebit.ClearVariables: OleVariant;
begin
  Result := DefaultInterface.ClearVariables;
end;

procedure TDebit.Clear;
begin
  DefaultInterface.Clear;
end;

procedure TDebit.UserControl_InitProperties;
begin
  DefaultInterface.UserControl_InitProperties;
end;

function TDebit.GetMerchantInfo: WideString;
begin
  Result := DefaultInterface.GetMerchantInfo;
end;

function TDebit.GetAuth: OleVariant;
begin
  Result := DefaultInterface.GetAuth;
end;

function TDebit.GetRefNumber: WideString;
begin
  Result := DefaultInterface.GetRefNumber;
end;

function TDebit.GetResult: OleVariant;
begin
  Result := DefaultInterface.GetResult;
end;

function TDebit.GetXMLResponse: WideString;
begin
  Result := DefaultInterface.GetXMLResponse;
end;

function TDebit.Send(var FileType: FileType): OleVariant;
begin
  Result := DefaultInterface.Send(FileType);
end;

function TDebit.VerifyAmount: WordBool;
begin
  Result := DefaultInterface.VerifyAmount;
end;

function TDebit.GetAuxRespCode: WideString;
begin
  Result := DefaultInterface.GetAuxRespCode;
end;

function TDebit.GetPOSSequenceNumber(var compareCSN: WideString): WideString;
begin
  Result := DefaultInterface.GetPOSSequenceNumber(compareCSN);
end;

function TDebit.GetXMLRequest: WideString;
begin
  Result := DefaultInterface.GetXMLRequest;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDebitProperties.Create(AServer: TDebit);
begin
  inherited Create;
  FServer := AServer;
end;

function TDebitProperties.GetDefaultInterface: _Debit;
begin
  Result := FServer.DefaultInterface;
end;

function TDebitProperties.Get_Action: Integer;
begin
    Result := DefaultInterface.Action;
end;

procedure TDebitProperties.Set_Action(Param1: Integer);
begin
  DefaultInterface.Set_Action(Param1);
end;

function TDebitProperties.Get_Amount: WideString;
begin
    Result := DefaultInterface.Amount;
end;

procedure TDebitProperties.Set_Amount(const Param1: WideString);
  { Warning: The property Amount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Amount := Param1;
end;

function TDebitProperties.Get_Billpay: WideString;
begin
    Result := DefaultInterface.Billpay;
end;

procedure TDebitProperties.Set_Billpay(const Param1: WideString);
  { Warning: The property Billpay has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Billpay := Param1;
end;

function TDebitProperties.Get_Card: WideString;
begin
    Result := DefaultInterface.Card;
end;

procedure TDebitProperties.Set_Card(const Param1: WideString);
  { Warning: The property Card has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Card := Param1;
end;

procedure TDebitProperties.Set_ExpDate(const Param1: WideString);
  { Warning: The property ExpDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExpDate := Param1;
end;

function TDebitProperties.Get_ExpDate: WideString;
begin
    Result := DefaultInterface.ExpDate;
end;

function TDebitProperties.Get_Manual: Integer;
begin
    Result := DefaultInterface.Manual;
end;

procedure TDebitProperties.Set_Manual(Param1: Integer);
begin
  DefaultInterface.Set_Manual(Param1);
end;

function TDebitProperties.Get_member: WideString;
begin
    Result := DefaultInterface.member;
end;

procedure TDebitProperties.Set_member(const Param1: WideString);
  { Warning: The property member has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.member := Param1;
end;

function TDebitProperties.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TDebitProperties.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TDebitProperties.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

procedure TDebitProperties.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

function TDebitProperties.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TDebitProperties.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

procedure TDebitProperties.Set_PrintReceipts(const Param1: WideString);
  { Warning: The property PrintReceipts has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrintReceipts := Param1;
end;

function TDebitProperties.Get_PrintReceipts: WideString;
begin
    Result := DefaultInterface.PrintReceipts;
end;

function TDebitProperties.Get_TimeOut: Integer;
begin
    Result := DefaultInterface.TimeOut;
end;

procedure TDebitProperties.Set_TimeOut(Param1: Integer);
begin
  DefaultInterface.Set_TimeOut(Param1);
end;

function TDebitProperties.Get_Track: WideString;
begin
    Result := DefaultInterface.Track;
end;

procedure TDebitProperties.Set_Track(const Param1: WideString);
  { Warning: The property Track has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Track := Param1;
end;

function TDebitProperties.Get_User: WideString;
begin
    Result := DefaultInterface.User;
end;

procedure TDebitProperties.Set_User(const Param1: WideString);
  { Warning: The property User has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.User := Param1;
end;

function TDebitProperties.Get_Pin: WideString;
begin
    Result := DefaultInterface.Pin;
end;

procedure TDebitProperties.Set_Pin(const Param1: WideString);
  { Warning: The property Pin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Pin := Param1;
end;

function TDebitProperties.Get_KeySerialNumber: WideString;
begin
    Result := DefaultInterface.KeySerialNumber;
end;

procedure TDebitProperties.Set_KeySerialNumber(const Param1: WideString);
  { Warning: The property KeySerialNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KeySerialNumber := Param1;
end;

function TDebitProperties.Get_Ticket: WideString;
begin
    Result := DefaultInterface.Ticket;
end;

procedure TDebitProperties.Set_Ticket(const Param1: WideString);
  { Warning: The property Ticket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ticket := Param1;
end;

function TDebitProperties.Get_CashBack: WideString;
begin
    Result := DefaultInterface.CashBack;
end;

procedure TDebitProperties.Set_CashBack(const Param1: WideString);
  { Warning: The property CashBack has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CashBack := Param1;
end;

function TDebitProperties.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TDebitProperties.Set_Reference(const Param1: WideString);
  { Warning: The property Reference has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Reference := Param1;
end;

function TDebitProperties.Get_RFID: WideString;
begin
    Result := DefaultInterface.RFID;
end;

procedure TDebitProperties.Set_RFID(const Param1: WideString);
  { Warning: The property RFID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RFID := Param1;
end;

function TDebitProperties.Get_OutDelay: Single;
begin
    Result := DefaultInterface.OutDelay;
end;

procedure TDebitProperties.Set_OutDelay(Param1: Single);
begin
  DefaultInterface.Set_OutDelay(Param1);
end;

function TDebitProperties.Get_TransNum: WideString;
begin
    Result := DefaultInterface.TransNum;
end;

procedure TDebitProperties.Set_TransNum(const Param1: WideString);
  { Warning: The property TransNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TransNum := Param1;
end;

function TDebitProperties.Get_ShiftID: WideString;
begin
    Result := DefaultInterface.ShiftID;
end;

procedure TDebitProperties.Set_ShiftID(const Param1: WideString);
  { Warning: The property ShiftID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ShiftID := Param1;
end;

function TDebitProperties.Get_LanguageCode: WideString;
begin
    Result := DefaultInterface.LanguageCode;
end;

procedure TDebitProperties.Set_LanguageCode(const Param1: WideString);
  { Warning: The property LanguageCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LanguageCode := Param1;
end;

function TDebitProperties.Get_MACData: WideString;
begin
    Result := DefaultInterface.MACData;
end;

procedure TDebitProperties.Set_MACData(const Param1: WideString);
  { Warning: The property MACData has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MACData := Param1;
end;

function TDebitProperties.Get_DebitType: WideString;
begin
    Result := DefaultInterface.DebitType;
end;

procedure TDebitProperties.Set_DebitType(const Param1: WideString);
  { Warning: The property DebitType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DebitType := Param1;
end;

function TDebitProperties.Get_FoodStamp: WordBool;
begin
    Result := DefaultInterface.FoodStamp;
end;

procedure TDebitProperties.Set_FoodStamp(Param1: WordBool);
begin
  DefaultInterface.Set_FoodStamp(Param1);
end;

function TDebitProperties.Get_Authcode: WideString;
begin
    Result := DefaultInterface.Authcode;
end;

procedure TDebitProperties.Set_Authcode(const Param1: WideString);
  { Warning: The property Authcode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Authcode := Param1;
end;

procedure TDebitProperties.Set_IPAddress(const Param1: WideString);
  { Warning: The property IPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IPAddress := Param1;
end;

function TDebitProperties.Get_IPAddress: WideString;
begin
    Result := DefaultInterface.IPAddress;
end;

procedure TDebitProperties.Set_Port(Param1: Smallint);
begin
  DefaultInterface.Set_Port(Param1);
end;

function TDebitProperties.Get_Port: Smallint;
begin
    Result := DefaultInterface.Port;
end;

procedure TDebitProperties.Set_EnableSSL(Param1: WordBool);
begin
  DefaultInterface.Set_EnableSSL(Param1);
end;

function TDebitProperties.Get_EnableSSL: WordBool;
begin
    Result := DefaultInterface.EnableSSL;
end;

function TDebitProperties.Get_Command: WideString;
begin
    Result := DefaultInterface.Command;
end;

procedure TDebitProperties.Set_Command(const Param1: WideString);
  { Warning: The property Command has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Command := Param1;
end;

function TDebitProperties.Get_CommMethod: CommMethod;
begin
    Result := DefaultInterface.CommMethod;
end;

procedure TDebitProperties.Set_CommMethod(Param1: CommMethod);
begin
  DefaultInterface.Set_CommMethod(Param1);
end;

function TDebitProperties.Get_Voucher: WideString;
begin
    Result := DefaultInterface.Voucher;
end;

procedure TDebitProperties.Set_Voucher(const Param1: WideString);
  { Warning: The property Voucher has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Voucher := Param1;
end;

function TDebitProperties.Get_Gratuity: WideString;
begin
    Result := DefaultInterface.Gratuity;
end;

procedure TDebitProperties.Set_Gratuity(const Param1: WideString);
  { Warning: The property Gratuity has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Gratuity := Param1;
end;

function TDebitProperties.Get_XMLTran: WordBool;
begin
    Result := DefaultInterface.XMLTran;
end;

procedure TDebitProperties.Set_XMLTran(Param1: WordBool);
begin
  DefaultInterface.Set_XMLTran(Param1);
end;

function TDebitProperties.Get_OrigPurchData: WideString;
begin
    Result := DefaultInterface.OrigPurchData;
end;

procedure TDebitProperties.Set_OrigPurchData(const Param1: WideString);
  { Warning: The property OrigPurchData has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OrigPurchData := Param1;
end;

function TDebitProperties.Get_TroutD: WideString;
begin
    Result := DefaultInterface.TroutD;
end;

procedure TDebitProperties.Set_TroutD(const Param1: WideString);
  { Warning: The property TroutD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TroutD := Param1;
end;

function TDebitProperties.Get_PumpNumber: WideString;
begin
    Result := DefaultInterface.PumpNumber;
end;

procedure TDebitProperties.Set_PumpNumber(const Param1: WideString);
  { Warning: The property PumpNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PumpNumber := Param1;
end;

function TDebitProperties.Get_SurchargeAmount: WideString;
begin
    Result := DefaultInterface.SurchargeAmount;
end;

procedure TDebitProperties.Set_SurchargeAmount(const Param1: WideString);
  { Warning: The property SurchargeAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SurchargeAmount := Param1;
end;

{$ENDIF}

class function CoBatch.Create: _Batch;
begin
  Result := CreateComObject(CLASS_Batch) as _Batch;
end;

class function CoBatch.CreateRemote(const MachineName: string): _Batch;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Batch) as _Batch;
end;

procedure TBatch.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6B82D694-3349-4CA4-A649-89811FAB730B}';
    IntfIID:   '{82EA8AD8-A55E-47AD-90C7-CCBBF773622B}';
    EventIID:  '{9A39F2CD-6B68-420D-9EAD-FDBBE613A873}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBatch.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Batch;
  end;
end;

procedure TBatch.ConnectTo(svrIntf: _Batch);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TBatch.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TBatch.GetDefaultInterface: _Batch;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBatch.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBatchProperties.Create(Self);
{$ENDIF}
end;

destructor TBatch.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBatch.GetServerProperties: TBatchProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TBatch.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnResize) then
         FOnResize(Self);
    2: if Assigned(FOnClick) then
         FOnClick(Self);
    3: if Assigned(FOnDblClick) then
         FOnDblClick(Self);
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    5: if Assigned(FOnKeyPress) then
         FOnKeyPress(Self, Smallint((TVarData(Params[0]).VPointer)^) {var Smallint});
    6: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                  Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    7: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    8: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    9: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                    Single((TVarData(Params[2]).VPointer)^) {var Single},
                    Single((TVarData(Params[3]).VPointer)^) {var Single});
  end; {case DispID}
end;

procedure TBatch.Set_MTS(Param1: WordBool);
begin
  DefaultInterface.Set_MTS(Param1);
end;

function TBatch.Get_MTS: WordBool;
begin
    Result := DefaultInterface.MTS;
end;

function TBatch.Get_Demo: WordBool;
begin
    Result := DefaultInterface.Demo;
end;

procedure TBatch.Set_Demo(Param1: WordBool);
begin
  DefaultInterface.Set_Demo(Param1);
end;

function TBatch.Get_BackColor: Integer;
begin
    Result := DefaultInterface.BackColor;
end;

procedure TBatch.Set_BackColor(Param1: Integer);
begin
  DefaultInterface.Set_BackColor(Param1);
end;

function TBatch.Get_ForeColor: Integer;
begin
    Result := DefaultInterface.ForeColor;
end;

procedure TBatch.Set_ForeColor(Param1: Integer);
begin
  DefaultInterface.Set_ForeColor(Param1);
end;

function TBatch.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TBatch.Set_Enabled(Param1: WordBool);
begin
  DefaultInterface.Set_Enabled(Param1);
end;

function TBatch.Get_Font: IFontDisp;
begin
    Result := DefaultInterface.Font;
end;

procedure TBatch._Set_Font(const Param1: IFontDisp);
  { Warning: The property Font has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Font := Param1;
end;

function TBatch.Get_BackStyle: Smallint;
begin
    Result := DefaultInterface.BackStyle;
end;

procedure TBatch.Set_BackStyle(Param1: Smallint);
begin
  DefaultInterface.Set_BackStyle(Param1);
end;

function TBatch.Get_BorderStyle: Smallint;
begin
    Result := DefaultInterface.BorderStyle;
end;

procedure TBatch.Set_BorderStyle(Param1: Smallint);
begin
  DefaultInterface.Set_BorderStyle(Param1);
end;

function TBatch.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TBatch.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TBatch.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TBatch.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TBatch.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

procedure TBatch.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

function TBatch.Get_ItemCount: WideString;
begin
    Result := DefaultInterface.ItemCount;
end;

procedure TBatch.Set_ItemCount(const Param1: WideString);
  { Warning: The property ItemCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ItemCount := Param1;
end;

function TBatch.Get_Balance: WideString;
begin
    Result := DefaultInterface.Balance;
end;

procedure TBatch.Set_Balance(const Param1: WideString);
  { Warning: The property Balance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Balance := Param1;
end;

function TBatch.Get_Action: Single;
begin
    Result := DefaultInterface.Action;
end;

procedure TBatch.Set_Action(Param1: Single);
begin
  DefaultInterface.Set_Action(Param1);
end;

function TBatch.Get_BatchNumber: WideString;
begin
    Result := DefaultInterface.BatchNumber;
end;

procedure TBatch.Set_BatchNumber(const Param1: WideString);
  { Warning: The property BatchNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BatchNumber := Param1;
end;

function TBatch.Get_CIC: WideString;
begin
    Result := DefaultInterface.CIC;
end;

procedure TBatch.Set_CIC(const Param1: WideString);
  { Warning: The property CIC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CIC := Param1;
end;

function TBatch.Get_Terminal: WideString;
begin
    Result := DefaultInterface.Terminal;
end;

procedure TBatch.Set_Terminal(const Param1: WideString);
  { Warning: The property Terminal has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Terminal := Param1;
end;

function TBatch.Get_BatchDate: WideString;
begin
    Result := DefaultInterface.BatchDate;
end;

procedure TBatch.Set_BatchDate(const Param1: WideString);
  { Warning: The property BatchDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BatchDate := Param1;
end;

function TBatch.Get_BatchCloseType: WideString;
begin
    Result := DefaultInterface.BatchCloseType;
end;

procedure TBatch.Set_BatchCloseType(const Param1: WideString);
  { Warning: The property BatchCloseType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BatchCloseType := Param1;
end;

function TBatch.Get_Response: WideString;
begin
    Result := DefaultInterface.Response;
end;

procedure TBatch.Set_Response(const Param1: WideString);
  { Warning: The property Response has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Response := Param1;
end;

function TBatch.Get_Store: WideString;
begin
    Result := DefaultInterface.Store;
end;

procedure TBatch.Set_Store(const Param1: WideString);
  { Warning: The property Store has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Store := Param1;
end;

function TBatch.Get_VisaMCAmount: WideString;
begin
    Result := DefaultInterface.VisaMCAmount;
end;

procedure TBatch.Set_VisaMCAmount(const Param1: WideString);
  { Warning: The property VisaMCAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VisaMCAmount := Param1;
end;

function TBatch.Get_VisaMCCount: WideString;
begin
    Result := DefaultInterface.VisaMCCount;
end;

procedure TBatch.Set_VisaMCCount(const Param1: WideString);
  { Warning: The property VisaMCCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VisaMCCount := Param1;
end;

function TBatch.Get_AmexAmount: WideString;
begin
    Result := DefaultInterface.AmexAmount;
end;

procedure TBatch.Set_AmexAmount(const Param1: WideString);
  { Warning: The property AmexAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmexAmount := Param1;
end;

function TBatch.Get_AmexCount: WideString;
begin
    Result := DefaultInterface.AmexCount;
end;

procedure TBatch.Set_AmexCount(const Param1: WideString);
  { Warning: The property AmexCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmexCount := Param1;
end;

function TBatch.Get_PurchaseAmount: WideString;
begin
    Result := DefaultInterface.PurchaseAmount;
end;

procedure TBatch.Set_PurchaseAmount(const Param1: WideString);
  { Warning: The property PurchaseAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PurchaseAmount := Param1;
end;

function TBatch.Get_PurchaseCount: WideString;
begin
    Result := DefaultInterface.PurchaseCount;
end;

procedure TBatch.Set_PurchaseCount(const Param1: WideString);
  { Warning: The property PurchaseCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PurchaseCount := Param1;
end;

function TBatch.Get_ReturnAmount: WideString;
begin
    Result := DefaultInterface.ReturnAmount;
end;

procedure TBatch.Set_ReturnAmount(const Param1: WideString);
  { Warning: The property ReturnAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReturnAmount := Param1;
end;

function TBatch.Get_ReturnCount: WideString;
begin
    Result := DefaultInterface.ReturnCount;
end;

procedure TBatch.Set_ReturnCount(const Param1: WideString);
  { Warning: The property ReturnCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReturnCount := Param1;
end;

function TBatch.Get_Cancel: WordBool;
begin
    Result := DefaultInterface.Cancel;
end;

procedure TBatch.Set_Cancel(Param1: WordBool);
begin
  DefaultInterface.Set_Cancel(Param1);
end;

procedure TBatch.Set_SplitProcessor(const Param1: WideString);
  { Warning: The property SplitProcessor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SplitProcessor := Param1;
end;

function TBatch.Get_SplitProcessor: WideString;
begin
    Result := DefaultInterface.SplitProcessor;
end;

function TBatch.Get_TimeOut: Integer;
begin
    Result := DefaultInterface.TimeOut;
end;

procedure TBatch.Set_TimeOut(Param1: Integer);
begin
  DefaultInterface.Set_TimeOut(Param1);
end;

function TBatch.Get_User: WideString;
begin
    Result := DefaultInterface.User;
end;

procedure TBatch.Set_User(const Param1: WideString);
  { Warning: The property User has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.User := Param1;
end;

function TBatch.Get_XMLTrans: WordBool;
begin
    Result := DefaultInterface.XMLTrans;
end;

procedure TBatch.Set_XMLTrans(Param1: WordBool);
begin
  DefaultInterface.Set_XMLTrans(Param1);
end;

procedure TBatch.Set_IPAddress(const Param1: WideString);
  { Warning: The property IPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IPAddress := Param1;
end;

function TBatch.Get_IPAddress: WideString;
begin
    Result := DefaultInterface.IPAddress;
end;

procedure TBatch.Set_Port(Param1: Smallint);
begin
  DefaultInterface.Set_Port(Param1);
end;

function TBatch.Get_Port: Smallint;
begin
    Result := DefaultInterface.Port;
end;

procedure TBatch.Set_EnableSSL(Param1: WordBool);
begin
  DefaultInterface.Set_EnableSSL(Param1);
end;

function TBatch.Get_EnableSSL: WordBool;
begin
    Result := DefaultInterface.EnableSSL;
end;

function TBatch.Get_CommMethod: CommMethod;
begin
    Result := DefaultInterface.CommMethod;
end;

procedure TBatch.Set_CommMethod(Param1: CommMethod);
begin
  DefaultInterface.Set_CommMethod(Param1);
end;

function TBatch.Get_OutDelay: Single;
begin
    Result := DefaultInterface.OutDelay;
end;

procedure TBatch.Set_OutDelay(Param1: Single);
begin
  DefaultInterface.Set_OutDelay(Param1);
end;

procedure TBatch.Refresh;
begin
  DefaultInterface.Refresh;
end;

function TBatch.GetItemCount: WideString;
begin
  Result := DefaultInterface.GetItemCount;
end;

function TBatch.GetBatches: WideString;
begin
  Result := DefaultInterface.GetBatches;
end;

function TBatch.GetRespCode: WideString;
begin
  Result := DefaultInterface.GetRespCode;
end;

function TBatch.GetBalance: WideString;
begin
  Result := DefaultInterface.GetBalance;
end;

function TBatch.GetStatus: WideString;
begin
  Result := DefaultInterface.GetStatus;
end;

function TBatch.GetProcessed: WordBool;
begin
  Result := DefaultInterface.GetProcessed;
end;

function TBatch.GetBatchNumber: WideString;
begin
  Result := DefaultInterface.GetBatchNumber;
end;

function TBatch.GetResult: WideString;
begin
  Result := DefaultInterface.GetResult;
end;

function TBatch.GetErrorDesc: WideString;
begin
  Result := DefaultInterface.GetErrorDesc;
end;

function TBatch.GetErrorCode: Integer;
begin
  Result := DefaultInterface.GetErrorCode;
end;

function TBatch.GetXMLRequest: WideString;
begin
  Result := DefaultInterface.GetXMLRequest;
end;

function TBatch.GetMerchantNumber: WideString;
begin
  Result := DefaultInterface.GetMerchantNumber;
end;

function TBatch.GetProcessor: WideString;
begin
  Result := DefaultInterface.GetProcessor;
end;

function TBatch.GetAccepted(var Record_: Smallint): WordBool;
begin
  Result := DefaultInterface.GetAccepted(Record_);
end;

function TBatch.GetSettleNumber: WideString;
begin
  Result := DefaultInterface.GetSettleNumber;
end;

function TBatch.GetSettleAmount: OleVariant;
begin
  Result := DefaultInterface.GetSettleAmount;
end;

function TBatch.GetXMLResponse: WideString;
begin
  Result := DefaultInterface.GetXMLResponse;
end;

function TBatch.DeleteUserFiles: OleVariant;
begin
  Result := DefaultInterface.DeleteUserFiles;
end;

function TBatch.PccSysExists: WordBool;
begin
  Result := DefaultInterface.PccSysExists;
end;

procedure TBatch.Clear;
begin
  DefaultInterface.Clear;
end;

function TBatch.Send(var FileType: FileType): OleVariant;
begin
  Result := DefaultInterface.Send(FileType);
end;

function TBatch.GetSystemInfo(var Index: Smallint): OleVariant;
begin
  Result := DefaultInterface.GetSystemInfo(Index);
end;

function TBatch.GetNumberIndexs: Smallint;
begin
  Result := DefaultInterface.GetNumberIndexs;
end;

function TBatch.GetMerchantInfo: WideString;
begin
  Result := DefaultInterface.GetMerchantInfo;
end;

function TBatch.GetFileExt: WideString;
begin
  Result := DefaultInterface.GetFileExt;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBatchProperties.Create(AServer: TBatch);
begin
  inherited Create;
  FServer := AServer;
end;

function TBatchProperties.GetDefaultInterface: _Batch;
begin
  Result := FServer.DefaultInterface;
end;

procedure TBatchProperties.Set_MTS(Param1: WordBool);
begin
  DefaultInterface.Set_MTS(Param1);
end;

function TBatchProperties.Get_MTS: WordBool;
begin
    Result := DefaultInterface.MTS;
end;

function TBatchProperties.Get_Demo: WordBool;
begin
    Result := DefaultInterface.Demo;
end;

procedure TBatchProperties.Set_Demo(Param1: WordBool);
begin
  DefaultInterface.Set_Demo(Param1);
end;

function TBatchProperties.Get_BackColor: Integer;
begin
    Result := DefaultInterface.BackColor;
end;

procedure TBatchProperties.Set_BackColor(Param1: Integer);
begin
  DefaultInterface.Set_BackColor(Param1);
end;

function TBatchProperties.Get_ForeColor: Integer;
begin
    Result := DefaultInterface.ForeColor;
end;

procedure TBatchProperties.Set_ForeColor(Param1: Integer);
begin
  DefaultInterface.Set_ForeColor(Param1);
end;

function TBatchProperties.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TBatchProperties.Set_Enabled(Param1: WordBool);
begin
  DefaultInterface.Set_Enabled(Param1);
end;

function TBatchProperties.Get_Font: IFontDisp;
begin
    Result := DefaultInterface.Font;
end;

procedure TBatchProperties._Set_Font(const Param1: IFontDisp);
  { Warning: The property Font has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Font := Param1;
end;

function TBatchProperties.Get_BackStyle: Smallint;
begin
    Result := DefaultInterface.BackStyle;
end;

procedure TBatchProperties.Set_BackStyle(Param1: Smallint);
begin
  DefaultInterface.Set_BackStyle(Param1);
end;

function TBatchProperties.Get_BorderStyle: Smallint;
begin
    Result := DefaultInterface.BorderStyle;
end;

procedure TBatchProperties.Set_BorderStyle(Param1: Smallint);
begin
  DefaultInterface.Set_BorderStyle(Param1);
end;

function TBatchProperties.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TBatchProperties.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TBatchProperties.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TBatchProperties.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TBatchProperties.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

procedure TBatchProperties.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

function TBatchProperties.Get_ItemCount: WideString;
begin
    Result := DefaultInterface.ItemCount;
end;

procedure TBatchProperties.Set_ItemCount(const Param1: WideString);
  { Warning: The property ItemCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ItemCount := Param1;
end;

function TBatchProperties.Get_Balance: WideString;
begin
    Result := DefaultInterface.Balance;
end;

procedure TBatchProperties.Set_Balance(const Param1: WideString);
  { Warning: The property Balance has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Balance := Param1;
end;

function TBatchProperties.Get_Action: Single;
begin
    Result := DefaultInterface.Action;
end;

procedure TBatchProperties.Set_Action(Param1: Single);
begin
  DefaultInterface.Set_Action(Param1);
end;

function TBatchProperties.Get_BatchNumber: WideString;
begin
    Result := DefaultInterface.BatchNumber;
end;

procedure TBatchProperties.Set_BatchNumber(const Param1: WideString);
  { Warning: The property BatchNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BatchNumber := Param1;
end;

function TBatchProperties.Get_CIC: WideString;
begin
    Result := DefaultInterface.CIC;
end;

procedure TBatchProperties.Set_CIC(const Param1: WideString);
  { Warning: The property CIC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CIC := Param1;
end;

function TBatchProperties.Get_Terminal: WideString;
begin
    Result := DefaultInterface.Terminal;
end;

procedure TBatchProperties.Set_Terminal(const Param1: WideString);
  { Warning: The property Terminal has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Terminal := Param1;
end;

function TBatchProperties.Get_BatchDate: WideString;
begin
    Result := DefaultInterface.BatchDate;
end;

procedure TBatchProperties.Set_BatchDate(const Param1: WideString);
  { Warning: The property BatchDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BatchDate := Param1;
end;

function TBatchProperties.Get_BatchCloseType: WideString;
begin
    Result := DefaultInterface.BatchCloseType;
end;

procedure TBatchProperties.Set_BatchCloseType(const Param1: WideString);
  { Warning: The property BatchCloseType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BatchCloseType := Param1;
end;

function TBatchProperties.Get_Response: WideString;
begin
    Result := DefaultInterface.Response;
end;

procedure TBatchProperties.Set_Response(const Param1: WideString);
  { Warning: The property Response has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Response := Param1;
end;

function TBatchProperties.Get_Store: WideString;
begin
    Result := DefaultInterface.Store;
end;

procedure TBatchProperties.Set_Store(const Param1: WideString);
  { Warning: The property Store has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Store := Param1;
end;

function TBatchProperties.Get_VisaMCAmount: WideString;
begin
    Result := DefaultInterface.VisaMCAmount;
end;

procedure TBatchProperties.Set_VisaMCAmount(const Param1: WideString);
  { Warning: The property VisaMCAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VisaMCAmount := Param1;
end;

function TBatchProperties.Get_VisaMCCount: WideString;
begin
    Result := DefaultInterface.VisaMCCount;
end;

procedure TBatchProperties.Set_VisaMCCount(const Param1: WideString);
  { Warning: The property VisaMCCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VisaMCCount := Param1;
end;

function TBatchProperties.Get_AmexAmount: WideString;
begin
    Result := DefaultInterface.AmexAmount;
end;

procedure TBatchProperties.Set_AmexAmount(const Param1: WideString);
  { Warning: The property AmexAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmexAmount := Param1;
end;

function TBatchProperties.Get_AmexCount: WideString;
begin
    Result := DefaultInterface.AmexCount;
end;

procedure TBatchProperties.Set_AmexCount(const Param1: WideString);
  { Warning: The property AmexCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmexCount := Param1;
end;

function TBatchProperties.Get_PurchaseAmount: WideString;
begin
    Result := DefaultInterface.PurchaseAmount;
end;

procedure TBatchProperties.Set_PurchaseAmount(const Param1: WideString);
  { Warning: The property PurchaseAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PurchaseAmount := Param1;
end;

function TBatchProperties.Get_PurchaseCount: WideString;
begin
    Result := DefaultInterface.PurchaseCount;
end;

procedure TBatchProperties.Set_PurchaseCount(const Param1: WideString);
  { Warning: The property PurchaseCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PurchaseCount := Param1;
end;

function TBatchProperties.Get_ReturnAmount: WideString;
begin
    Result := DefaultInterface.ReturnAmount;
end;

procedure TBatchProperties.Set_ReturnAmount(const Param1: WideString);
  { Warning: The property ReturnAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReturnAmount := Param1;
end;

function TBatchProperties.Get_ReturnCount: WideString;
begin
    Result := DefaultInterface.ReturnCount;
end;

procedure TBatchProperties.Set_ReturnCount(const Param1: WideString);
  { Warning: The property ReturnCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReturnCount := Param1;
end;

function TBatchProperties.Get_Cancel: WordBool;
begin
    Result := DefaultInterface.Cancel;
end;

procedure TBatchProperties.Set_Cancel(Param1: WordBool);
begin
  DefaultInterface.Set_Cancel(Param1);
end;

procedure TBatchProperties.Set_SplitProcessor(const Param1: WideString);
  { Warning: The property SplitProcessor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SplitProcessor := Param1;
end;

function TBatchProperties.Get_SplitProcessor: WideString;
begin
    Result := DefaultInterface.SplitProcessor;
end;

function TBatchProperties.Get_TimeOut: Integer;
begin
    Result := DefaultInterface.TimeOut;
end;

procedure TBatchProperties.Set_TimeOut(Param1: Integer);
begin
  DefaultInterface.Set_TimeOut(Param1);
end;

function TBatchProperties.Get_User: WideString;
begin
    Result := DefaultInterface.User;
end;

procedure TBatchProperties.Set_User(const Param1: WideString);
  { Warning: The property User has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.User := Param1;
end;

function TBatchProperties.Get_XMLTrans: WordBool;
begin
    Result := DefaultInterface.XMLTrans;
end;

procedure TBatchProperties.Set_XMLTrans(Param1: WordBool);
begin
  DefaultInterface.Set_XMLTrans(Param1);
end;

procedure TBatchProperties.Set_IPAddress(const Param1: WideString);
  { Warning: The property IPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IPAddress := Param1;
end;

function TBatchProperties.Get_IPAddress: WideString;
begin
    Result := DefaultInterface.IPAddress;
end;

procedure TBatchProperties.Set_Port(Param1: Smallint);
begin
  DefaultInterface.Set_Port(Param1);
end;

function TBatchProperties.Get_Port: Smallint;
begin
    Result := DefaultInterface.Port;
end;

procedure TBatchProperties.Set_EnableSSL(Param1: WordBool);
begin
  DefaultInterface.Set_EnableSSL(Param1);
end;

function TBatchProperties.Get_EnableSSL: WordBool;
begin
    Result := DefaultInterface.EnableSSL;
end;

function TBatchProperties.Get_CommMethod: CommMethod;
begin
    Result := DefaultInterface.CommMethod;
end;

procedure TBatchProperties.Set_CommMethod(Param1: CommMethod);
begin
  DefaultInterface.Set_CommMethod(Param1);
end;

function TBatchProperties.Get_OutDelay: Single;
begin
    Result := DefaultInterface.OutDelay;
end;

procedure TBatchProperties.Set_OutDelay(Param1: Single);
begin
  DefaultInterface.Set_OutDelay(Param1);
end;

{$ENDIF}

class function CoCharge.Create: _Charge;
begin
  Result := CreateComObject(CLASS_Charge) as _Charge;
end;

class function CoCharge.CreateRemote(const MachineName: string): _Charge;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Charge) as _Charge;
end;

procedure TCharge.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{66B49CB0-30E6-448C-8B2B-33F0E5868789}';
    IntfIID:   '{A128CBE4-B760-4F9F-A72E-95EFA3753C70}';
    EventIID:  '{63AA7D57-F014-42CE-B747-7FEFF2F8875B}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCharge.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Charge;
  end;
end;

procedure TCharge.ConnectTo(svrIntf: _Charge);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TCharge.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TCharge.GetDefaultInterface: _Charge;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCharge.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TChargeProperties.Create(Self);
{$ENDIF}
end;

destructor TCharge.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCharge.GetServerProperties: TChargeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCharge.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnResize) then
         FOnResize(Self);
    2: if Assigned(FOnClick) then
         FOnClick(Self);
    3: if Assigned(FOnDblClick) then
         FOnDblClick(Self);
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    5: if Assigned(FOnKeyPress) then
         FOnKeyPress(Self, Smallint((TVarData(Params[0]).VPointer)^) {var Smallint});
    6: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                  Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    7: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    8: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    9: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                    Single((TVarData(Params[2]).VPointer)^) {var Single},
                    Single((TVarData(Params[3]).VPointer)^) {var Single});
  end; {case DispID}
end;

procedure TCharge.Set_DEST_ZIP_CODE(const Param1: WideString);
  { Warning: The property DEST_ZIP_CODE has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DEST_ZIP_CODE := Param1;
end;

procedure TCharge.Set_Zip(const Param1: WideString);
  { Warning: The property Zip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Zip := Param1;
end;

procedure TCharge.Set_MCSN(const Param1: WideString);
  { Warning: The property MCSN has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MCSN := Param1;
end;

procedure TCharge.Set_MCSC(const Param1: WideString);
  { Warning: The property MCSC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MCSC := Param1;
end;

function TCharge.Get_Zip: WideString;
begin
    Result := DefaultInterface.Zip;
end;

function TCharge.Get_DEST_ZIP_CODE: WideString;
begin
    Result := DefaultInterface.DEST_ZIP_CODE;
end;

function TCharge.Get_MCSN: WideString;
begin
    Result := DefaultInterface.MCSN;
end;

function TCharge.Get_MCSC: WideString;
begin
    Result := DefaultInterface.MCSC;
end;

procedure TCharge.Set_User(const Param1: WideString);
  { Warning: The property User has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.User := Param1;
end;

function TCharge.Get_User: WideString;
begin
    Result := DefaultInterface.User;
end;

procedure TCharge.Set_Track(const Param1: WideString);
  { Warning: The property Track has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Track := Param1;
end;

function TCharge.Get_Track: WideString;
begin
    Result := DefaultInterface.Track;
end;

procedure TCharge.Set_TotalAmount(const Param1: WideString);
  { Warning: The property TotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TotalAmount := Param1;
end;

function TCharge.Get_TotalAmount: WideString;
begin
    Result := DefaultInterface.TotalAmount;
end;

procedure TCharge.Set_Ticket(const Param1: WideString);
  { Warning: The property Ticket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ticket := Param1;
end;

function TCharge.Get_Ticket: WideString;
begin
    Result := DefaultInterface.Ticket;
end;

procedure TCharge.Set_TaxAmt(const Param1: WideString);
  { Warning: The property TaxAmt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TaxAmt := Param1;
end;

function TCharge.Get_TaxAmt: WideString;
begin
    Result := DefaultInterface.TaxAmt;
end;

procedure TCharge.Set_Street(const Param1: WideString);
  { Warning: The property Street has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Street := Param1;
end;

function TCharge.Get_Street: WideString;
begin
    Result := DefaultInterface.Street;
end;

procedure TCharge.Set_Reference(const Param1: WideString);
  { Warning: The property Reference has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Reference := Param1;
end;

function TCharge.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TCharge.Set_RFID(const Param1: WideString);
  { Warning: The property RFID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RFID := Param1;
end;

function TCharge.Get_RFID: WideString;
begin
    Result := DefaultInterface.RFID;
end;

procedure TCharge.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TCharge.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TCharge.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

function TCharge.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

procedure TCharge.Set_TimeOut(Param1: Integer);
begin
  DefaultInterface.Set_TimeOut(Param1);
end;

function TCharge.Get_TimeOut: Integer;
begin
    Result := DefaultInterface.TimeOut;
end;

function TCharge.Get_TRANSID: WideString;
begin
    Result := DefaultInterface.TRANSID;
end;

procedure TCharge.Set_TRANSID(const Param1: WideString);
  { Warning: The property TRANSID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TRANSID := Param1;
end;

function TCharge.Get_CustCode: WideString;
begin
    Result := DefaultInterface.CustCode;
end;

procedure TCharge.Set_CustCode(const Param1: WideString);
  { Warning: The property CustCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustCode := Param1;
end;

procedure TCharge.Set_Amount(const Param1: WideString);
  { Warning: The property Amount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Amount := Param1;
end;

function TCharge.Get_Amount: WideString;
begin
    Result := DefaultInterface.Amount;
end;

procedure TCharge.Set_ExpDate(const Param1: WideString);
  { Warning: The property ExpDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExpDate := Param1;
end;

function TCharge.Get_ExpDate: WideString;
begin
    Result := DefaultInterface.ExpDate;
end;

procedure TCharge.Set_Card(const Param1: WideString);
  { Warning: The property Card has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Card := Param1;
end;

procedure TCharge.Set_Multi(const Param1: WideString);
  { Warning: The property Multi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Multi := Param1;
end;

procedure TCharge.Set_PeriodicPayment(const Param1: WideString);
  { Warning: The property PeriodicPayment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PeriodicPayment := Param1;
end;

function TCharge.Get_Card: WideString;
begin
    Result := DefaultInterface.Card;
end;

function TCharge.Get_Multi: WideString;
begin
    Result := DefaultInterface.Multi;
end;

procedure TCharge.Set_OffLine(const Param1: WideString);
  { Warning: The property OffLine has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OffLine := Param1;
end;

function TCharge.Get_OffLine: WideString;
begin
    Result := DefaultInterface.OffLine;
end;

function TCharge.Get_PeriodicPayment: WideString;
begin
    Result := DefaultInterface.PeriodicPayment;
end;

procedure TCharge.Set_Action(Param1: Integer);
begin
  DefaultInterface.Set_Action(Param1);
end;

function TCharge.Get_Action: Integer;
begin
    Result := DefaultInterface.Action;
end;

function TCharge.Get_Command: WideString;
begin
    Result := DefaultInterface.Command;
end;

procedure TCharge.Set_Command(const Param1: WideString);
  { Warning: The property Command has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Command := Param1;
end;

function TCharge.Get_Demo: WordBool;
begin
    Result := DefaultInterface.Demo;
end;

procedure TCharge.Set_Demo(Param1: WordBool);
begin
  DefaultInterface.Set_Demo(Param1);
end;

function TCharge.Get_MTS: WordBool;
begin
    Result := DefaultInterface.MTS;
end;

procedure TCharge.Set_MTS(Param1: WordBool);
begin
  DefaultInterface.Set_MTS(Param1);
end;

function TCharge.Get_CardPresent: WideString;
begin
    Result := DefaultInterface.CardPresent;
end;

procedure TCharge.Set_CardPresent(const Param1: WideString);
  { Warning: The property CardPresent has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CardPresent := Param1;
end;

function TCharge.Get_OutDelay: Single;
begin
    Result := DefaultInterface.OutDelay;
end;

procedure TCharge.Set_OutDelay(Param1: Single);
begin
  DefaultInterface.Set_OutDelay(Param1);
end;

function TCharge.Get_CommercialCardFlag: WideString;
begin
    Result := DefaultInterface.CommercialCardFlag;
end;

procedure TCharge.Set_CommercialCardFlag(const Param1: WideString);
  { Warning: The property CommercialCardFlag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommercialCardFlag := Param1;
end;

function TCharge.Get_GratuityAmount: WideString;
begin
    Result := DefaultInterface.GratuityAmount;
end;

procedure TCharge.Set_GratuityAmount(const Param1: WideString);
  { Warning: The property GratuityAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GratuityAmount := Param1;
end;

function TCharge.Get_EstGratuityAmount: WideString;
begin
    Result := DefaultInterface.EstGratuityAmount;
end;

procedure TCharge.Set_EstGratuityAmount(const Param1: WideString);
  { Warning: The property EstGratuityAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EstGratuityAmount := Param1;
end;

function TCharge.Get_ItemID: WideString;
begin
    Result := DefaultInterface.ItemID;
end;

procedure TCharge.Set_ItemID(const Param1: WideString);
  { Warning: The property ItemID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ItemID := Param1;
end;

function TCharge.Get_TroutD: WideString;
begin
    Result := DefaultInterface.TroutD;
end;

procedure TCharge.Set_TroutD(const Param1: WideString);
  { Warning: The property TroutD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TroutD := Param1;
end;

function TCharge.Get_Store: WideString;
begin
    Result := DefaultInterface.Store;
end;

procedure TCharge.Set_Store(const Param1: WideString);
  { Warning: The property Store has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Store := Param1;
end;

function TCharge.Get_Manual: Integer;
begin
    Result := DefaultInterface.Manual;
end;

procedure TCharge.Set_Manual(Param1: Integer);
begin
  DefaultInterface.Set_Manual(Param1);
end;

function TCharge.Get_CVV2: WideString;
begin
    Result := DefaultInterface.CVV2;
end;

procedure TCharge.Set_CVV2(const Param1: WideString);
  { Warning: The property CVV2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CVV2 := Param1;
end;

function TCharge.Get_XMLTrans: WordBool;
begin
    Result := DefaultInterface.XMLTrans;
end;

procedure TCharge.Set_XMLTrans(Param1: WordBool);
begin
  DefaultInterface.Set_XMLTrans(Param1);
end;

function TCharge.Get_member: WideString;
begin
    Result := DefaultInterface.member;
end;

procedure TCharge.Set_member(const Param1: WideString);
  { Warning: The property member has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.member := Param1;
end;

function TCharge.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TCharge.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TCharge.Get_LastValidDate: WideString;
begin
    Result := DefaultInterface.LastValidDate;
end;

procedure TCharge.Set_LastValidDate(const Param1: WideString);
  { Warning: The property LastValidDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LastValidDate := Param1;
end;

function TCharge.Get_TaxExempt: WordBool;
begin
    Result := DefaultInterface.TaxExempt;
end;

procedure TCharge.Set_TaxExempt(Param1: WordBool);
begin
  DefaultInterface.Set_TaxExempt(Param1);
end;

function TCharge.Get_Authcode: WideString;
begin
    Result := DefaultInterface.Authcode;
end;

procedure TCharge.Set_Authcode(const Param1: WideString);
  { Warning: The property Authcode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Authcode := Param1;
end;

procedure TCharge.Set_CheckCard(Param1: WordBool);
begin
  DefaultInterface.Set_CheckCard(Param1);
end;

function TCharge.Get_CheckCard: WordBool;
begin
    Result := DefaultInterface.CheckCard;
end;

function TCharge.Get_AmxChargeDescription: WideString;
begin
    Result := DefaultInterface.AmxChargeDescription;
end;

procedure TCharge.Set_AmxChargeDescription(const Param1: WideString);
  { Warning: The property AmxChargeDescription has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxChargeDescription := Param1;
end;

function TCharge.Get_AmxDescription_1: WideString;
begin
    Result := DefaultInterface.AmxDescription_1;
end;

procedure TCharge.Set_AmxDescription_1(const Param1: WideString);
  { Warning: The property AmxDescription_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_1 := Param1;
end;

function TCharge.Get_AmxDescription_2: WideString;
begin
    Result := DefaultInterface.AmxDescription_2;
end;

procedure TCharge.Set_AmxDescription_2(const Param1: WideString);
  { Warning: The property AmxDescription_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_2 := Param1;
end;

function TCharge.Get_AmxDescription_3: WideString;
begin
    Result := DefaultInterface.AmxDescription_3;
end;

procedure TCharge.Set_AmxDescription_3(const Param1: WideString);
  { Warning: The property AmxDescription_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_3 := Param1;
end;

function TCharge.Get_AmxDescription_4: WideString;
begin
    Result := DefaultInterface.AmxDescription_4;
end;

procedure TCharge.Set_AmxDescription_4(const Param1: WideString);
  { Warning: The property AmxDescription_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_4 := Param1;
end;

procedure TCharge.Set_IPAddress(const Param1: WideString);
  { Warning: The property IPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IPAddress := Param1;
end;

function TCharge.Get_Billpay: WideString;
begin
    Result := DefaultInterface.Billpay;
end;

procedure TCharge.Set_Billpay(const Param1: WideString);
  { Warning: The property Billpay has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Billpay := Param1;
end;

function TCharge.Get_Level3: WideString;
begin
    Result := DefaultInterface.Level3;
end;

procedure TCharge.Set_Level3(const Param1: WideString);
  { Warning: The property Level3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Level3 := Param1;
end;

function TCharge.Get_IPAddress: WideString;
begin
    Result := DefaultInterface.IPAddress;
end;

procedure TCharge.Set_Port(Param1: Smallint);
begin
  DefaultInterface.Set_Port(Param1);
end;

function TCharge.Get_Port: Smallint;
begin
    Result := DefaultInterface.Port;
end;

procedure TCharge.Set_EnableSSL(Param1: WordBool);
begin
  DefaultInterface.Set_EnableSSL(Param1);
end;

function TCharge.Get_EnableSSL: WordBool;
begin
    Result := DefaultInterface.EnableSSL;
end;

function TCharge.Get_CommMethod: CommMethod;
begin
    Result := DefaultInterface.CommMethod;
end;

procedure TCharge.Set_CommMethod(Param1: CommMethod);
begin
  DefaultInterface.Set_CommMethod(Param1);
end;

procedure TCharge.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TCharge.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TCharge.Set_PrintReceipts(const Param1: WideString);
  { Warning: The property PrintReceipts has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrintReceipts := Param1;
end;

function TCharge.Get_PrintReceipts: WideString;
begin
    Result := DefaultInterface.PrintReceipts;
end;

function TCharge.Get_DriverID: WideString;
begin
    Result := DefaultInterface.DriverID;
end;

procedure TCharge.Set_DriverID(const Param1: WideString);
  { Warning: The property DriverID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DriverID := Param1;
end;

function TCharge.Get_DriverPIN: WideString;
begin
    Result := DefaultInterface.DriverPIN;
end;

procedure TCharge.Set_DriverPIN(const Param1: WideString);
  { Warning: The property DriverPIN has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DriverPIN := Param1;
end;

function TCharge.Get_IDNumber: WideString;
begin
    Result := DefaultInterface.IDNumber;
end;

procedure TCharge.Set_IDNumber(const Param1: WideString);
  { Warning: The property IDNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IDNumber := Param1;
end;

function TCharge.Get_Odometer: WideString;
begin
    Result := DefaultInterface.Odometer;
end;

procedure TCharge.Set_Odometer(const Param1: WideString);
  { Warning: The property Odometer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Odometer := Param1;
end;

function TCharge.Get_RestrictionCode: WideString;
begin
    Result := DefaultInterface.RestrictionCode;
end;

procedure TCharge.Set_RestrictionCode(const Param1: WideString);
  { Warning: The property RestrictionCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RestrictionCode := Param1;
end;

function TCharge.Get_VehicleID: WideString;
begin
    Result := DefaultInterface.VehicleID;
end;

procedure TCharge.Set_VehicleID(const Param1: WideString);
  { Warning: The property VehicleID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VehicleID := Param1;
end;

function TCharge.Get_ProductDetailCount: WideString;
begin
    Result := DefaultInterface.ProductDetailCount;
end;

procedure TCharge.Set_ProductDetailCount(const Param1: WideString);
  { Warning: The property ProductDetailCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCount := Param1;
end;

function TCharge.Get_ProductDetailQuantity_1: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_1;
end;

procedure TCharge.Set_ProductDetailQuantity_1(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_1 := Param1;
end;

function TCharge.Get_ProductDetailCode_1: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_1;
end;

procedure TCharge.Set_ProductDetailCode_1(const Param1: WideString);
  { Warning: The property ProductDetailCode_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_1 := Param1;
end;

function TCharge.Get_ProductDetailAmount_1: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_1;
end;

procedure TCharge.Set_ProductDetailAmount_1(const Param1: WideString);
  { Warning: The property ProductDetailAmount_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_1 := Param1;
end;

function TCharge.Get_ProductDetailQuantity_2: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_2;
end;

procedure TCharge.Set_ProductDetailQuantity_2(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_2 := Param1;
end;

function TCharge.Get_ProductDetailCode_2: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_2;
end;

procedure TCharge.Set_ProductDetailCode_2(const Param1: WideString);
  { Warning: The property ProductDetailCode_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_2 := Param1;
end;

function TCharge.Get_ProductDetailAmount_2: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_2;
end;

procedure TCharge.Set_ProductDetailAmount_2(const Param1: WideString);
  { Warning: The property ProductDetailAmount_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_2 := Param1;
end;

function TCharge.Get_ProductDetailQuantity_3: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_3;
end;

procedure TCharge.Set_ProductDetailQuantity_3(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_3 := Param1;
end;

function TCharge.Get_ProductDetailCode_3: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_3;
end;

procedure TCharge.Set_ProductDetailCode_3(const Param1: WideString);
  { Warning: The property ProductDetailCode_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_3 := Param1;
end;

function TCharge.Get_ProductDetailAmount_3: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_3;
end;

procedure TCharge.Set_ProductDetailAmount_3(const Param1: WideString);
  { Warning: The property ProductDetailAmount_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_3 := Param1;
end;

function TCharge.Get_ProductDetailQuantity_4: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_4;
end;

procedure TCharge.Set_ProductDetailQuantity_4(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_4 := Param1;
end;

function TCharge.Get_ProductDetailCode_4: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_4;
end;

procedure TCharge.Set_ProductDetailCode_4(const Param1: WideString);
  { Warning: The property ProductDetailCode_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_4 := Param1;
end;

function TCharge.Get_ProductDetailAmount_4: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_4;
end;

procedure TCharge.Set_ProductDetailAmount_4(const Param1: WideString);
  { Warning: The property ProductDetailAmount_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_4 := Param1;
end;

function TCharge.Get_ProductDetailQuantity_5: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_5;
end;

procedure TCharge.Set_ProductDetailQuantity_5(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_5 := Param1;
end;

function TCharge.Get_ProductDetailCode_5: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_5;
end;

procedure TCharge.Set_ProductDetailCode_5(const Param1: WideString);
  { Warning: The property ProductDetailCode_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_5 := Param1;
end;

function TCharge.Get_ProductDetailAmount_5: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_5;
end;

procedure TCharge.Set_ProductDetailAmount_5(const Param1: WideString);
  { Warning: The property ProductDetailAmount_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_5 := Param1;
end;

function TCharge.Get_ProductDetailQuantity_6: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_6;
end;

procedure TCharge.Set_ProductDetailQuantity_6(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_6 := Param1;
end;

function TCharge.Get_ProductDetailCode_6: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_6;
end;

procedure TCharge.Set_ProductDetailCode_6(const Param1: WideString);
  { Warning: The property ProductDetailCode_6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_6 := Param1;
end;

function TCharge.Get_ProductDetailAmount_6: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_6;
end;

procedure TCharge.Set_ProductDetailAmount_6(const Param1: WideString);
  { Warning: The property ProductDetailAmount_6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_6 := Param1;
end;

function TCharge.Get_ProductDetailQuantity_7: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_7;
end;

procedure TCharge.Set_ProductDetailQuantity_7(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_7 := Param1;
end;

function TCharge.Get_ProductDetailCode_7: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_7;
end;

procedure TCharge.Set_ProductDetailCode_7(const Param1: WideString);
  { Warning: The property ProductDetailCode_7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_7 := Param1;
end;

function TCharge.Get_ProductDetailAmount_7: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_7;
end;

procedure TCharge.Set_ProductDetailAmount_7(const Param1: WideString);
  { Warning: The property ProductDetailAmount_7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_7 := Param1;
end;

function TCharge.Get_ProductDetailQuantity_8: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_8;
end;

procedure TCharge.Set_ProductDetailQuantity_8(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_8 := Param1;
end;

function TCharge.Get_ProductDetailCode_8: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_8;
end;

procedure TCharge.Set_ProductDetailCode_8(const Param1: WideString);
  { Warning: The property ProductDetailCode_8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_8 := Param1;
end;

function TCharge.Get_ProductDetailAmount_8: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_8;
end;

procedure TCharge.Set_ProductDetailAmount_8(const Param1: WideString);
  { Warning: The property ProductDetailAmount_8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_8 := Param1;
end;

function TCharge.Get_ProductDetailQuantity_9: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_9;
end;

procedure TCharge.Set_ProductDetailQuantity_9(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_9 := Param1;
end;

function TCharge.Get_ProductDetailCode_9: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_9;
end;

procedure TCharge.Set_ProductDetailCode_9(const Param1: WideString);
  { Warning: The property ProductDetailCode_9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_9 := Param1;
end;

function TCharge.Get_ProductDetailAmount_9: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_9;
end;

procedure TCharge.Set_ProductDetailAmount_9(const Param1: WideString);
  { Warning: The property ProductDetailAmount_9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_9 := Param1;
end;

function TCharge.Get_ProductDetailQuantity_10: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_10;
end;

procedure TCharge.Set_ProductDetailQuantity_10(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_10 := Param1;
end;

function TCharge.Get_ProductDetailCode_10: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_10;
end;

procedure TCharge.Set_ProductDetailCode_10(const Param1: WideString);
  { Warning: The property ProductDetailCode_10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_10 := Param1;
end;

function TCharge.Get_ProductDetailAmount_10: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_10;
end;

procedure TCharge.Set_ProductDetailAmount_10(const Param1: WideString);
  { Warning: The property ProductDetailAmount_10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_10 := Param1;
end;

function TCharge.Get_StoreNum: WideString;
begin
    Result := DefaultInterface.StoreNum;
end;

procedure TCharge.Set_StoreNum(const Param1: WideString);
  { Warning: The property StoreNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StoreNum := Param1;
end;

function TCharge.Get_SSNum: WideString;
begin
    Result := DefaultInterface.SSNum;
end;

procedure TCharge.Set_SSNum(const Param1: WideString);
  { Warning: The property SSNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SSNum := Param1;
end;

function TCharge.Get_CustomerHouseNum: WideString;
begin
    Result := DefaultInterface.CustomerHouseNum;
end;

procedure TCharge.Set_CustomerHouseNum(const Param1: WideString);
  { Warning: The property CustomerHouseNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerHouseNum := Param1;
end;

function TCharge.Get_Phone_Number: WideString;
begin
    Result := DefaultInterface.Phone_Number;
end;

procedure TCharge.Set_Phone_Number(const Param1: WideString);
  { Warning: The property Phone_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Phone_Number := Param1;
end;

function TCharge.Get_Birth_Date: WideString;
begin
    Result := DefaultInterface.Birth_Date;
end;

procedure TCharge.Set_Birth_Date(const Param1: WideString);
  { Warning: The property Birth_Date has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Birth_Date := Param1;
end;

function TCharge.Get_PumpNumber: WideString;
begin
    Result := DefaultInterface.PumpNumber;
end;

procedure TCharge.Set_PumpNumber(const Param1: WideString);
  { Warning: The property PumpNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PumpNumber := Param1;
end;

procedure TCharge.Set_CfgEnabled(Param1: WordBool);
begin
  DefaultInterface.Set_CfgEnabled(Param1);
end;

function TCharge.Get_CfgEnabled: WordBool;
begin
    Result := DefaultInterface.CfgEnabled;
end;

procedure TCharge.Set_CfgType(Param1: Byte);
begin
  DefaultInterface.Set_CfgType(Param1);
end;

function TCharge.Get_CfgType: Byte;
begin
    Result := DefaultInterface.CfgType;
end;

procedure TCharge.Set_CfgPath(const Param1: WideString);
  { Warning: The property CfgPath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CfgPath := Param1;
end;

function TCharge.Get_CfgPath: WideString;
begin
    Result := DefaultInterface.CfgPath;
end;

procedure TCharge.Set_CfgSizeLimit(const Param1: WideString);
  { Warning: The property CfgSizeLimit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CfgSizeLimit := Param1;
end;

function TCharge.Get_CfgSizeLimit: WideString;
begin
    Result := DefaultInterface.CfgSizeLimit;
end;

procedure TCharge.Set_CfgKeepDays(const Param1: WideString);
  { Warning: The property CfgKeepDays has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CfgKeepDays := Param1;
end;

function TCharge.Get_CfgKeepDays: WideString;
begin
    Result := DefaultInterface.CfgKeepDays;
end;

procedure TCharge.Set_FleetCard(const Param1: WideString);
  { Warning: The property FleetCard has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FleetCard := Param1;
end;

function TCharge.Get_FleetCard: WideString;
begin
    Result := DefaultInterface.FleetCard;
end;

procedure TCharge.Set_CreditPlanNumber(const Param1: WideString);
  { Warning: The property CreditPlanNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreditPlanNumber := Param1;
end;

function TCharge.Get_CreditPlanNumber: WideString;
begin
    Result := DefaultInterface.CreditPlanNumber;
end;

function TCharge.GetPCard: WideString;
begin
  Result := DefaultInterface.GetPCard;
end;

function TCharge.GetRespCode: WideString;
begin
  Result := DefaultInterface.GetRespCode;
end;

function TCharge.GetTroutD: WideString;
begin
  Result := DefaultInterface.GetTroutD;
end;

function TCharge.GetResponseCommercialType: WideString;
begin
  Result := DefaultInterface.GetResponseCommercialType;
end;

function TCharge.GetResponsePurchaseCardType: WideString;
begin
  Result := DefaultInterface.GetResponsePurchaseCardType;
end;

function TCharge.GetCardIDCode: WideString;
begin
  Result := DefaultInterface.GetCardIDCode;
end;

function TCharge.GetAcctDataSrc: WideString;
begin
  Result := DefaultInterface.GetAcctDataSrc;
end;

function TCharge.GetGratuityAmount: WideString;
begin
  Result := DefaultInterface.GetGratuityAmount;
end;

function TCharge.GetEstGratuityAmount: WideString;
begin
  Result := DefaultInterface.GetEstGratuityAmount;
end;

function TCharge.GetItemID: WideString;
begin
  Result := DefaultInterface.GetItemID;
end;

function TCharge.GetTBatch: WideString;
begin
  Result := DefaultInterface.GetTBatch;
end;

function TCharge.GetTicket: WideString;
begin
  Result := DefaultInterface.GetTicket;
end;

function TCharge.GetTICode: WideString;
begin
  Result := DefaultInterface.GetTICode;
end;

function TCharge.GetTI: WideString;
begin
  Result := DefaultInterface.GetTI;
end;

function TCharge.GetTIM: WideString;
begin
  Result := DefaultInterface.GetTIM;
end;

function TCharge.GetTitem: WideString;
begin
  Result := DefaultInterface.GetTitem;
end;

function TCharge.GetTransNum: WideString;
begin
  Result := DefaultInterface.GetTransNum;
end;

function TCharge.GetTDate: WideString;
begin
  Result := DefaultInterface.GetTDate;
end;

function TCharge.GetRet: WideString;
begin
  Result := DefaultInterface.GetRet;
end;

function TCharge.GetResult: WideString;
begin
  Result := DefaultInterface.GetResult;
end;

function TCharge.GetRefNumber: WideString;
begin
  Result := DefaultInterface.GetRefNumber;
end;

function TCharge.GetPEM: WideString;
begin
  Result := DefaultInterface.GetPEM;
end;

function TCharge.GetMSI: WideString;
begin
  Result := DefaultInterface.GetMSI;
end;

function TCharge.GetIND: WideString;
begin
  Result := DefaultInterface.GetIND;
end;

function TCharge.GetErrorDesc: WideString;
begin
  Result := DefaultInterface.GetErrorDesc;
end;

function TCharge.GetErrorCode: Integer;
begin
  Result := DefaultInterface.GetErrorCode;
end;

function TCharge.GetCaptured: WordBool;
begin
  Result := DefaultInterface.GetCaptured;
end;

function TCharge.GetAVS: WideString;
begin
  Result := DefaultInterface.GetAVS;
end;

function TCharge.GetCVV2: WideString;
begin
  Result := DefaultInterface.GetCVV2;
end;

function TCharge.GetAuth: WideString;
begin
  Result := DefaultInterface.GetAuth;
end;

function TCharge.GetACI: WideString;
begin
  Result := DefaultInterface.GetACI;
end;

function TCharge.GetCustomerFirstName: WideString;
begin
  Result := DefaultInterface.GetCustomerFirstName;
end;

function TCharge.GetCustomerMInit: WideString;
begin
  Result := DefaultInterface.GetCustomerMInit;
end;

function TCharge.GetCustomerLastName: WideString;
begin
  Result := DefaultInterface.GetCustomerLastName;
end;

function TCharge.GetCustomerHouseNum: WideString;
begin
  Result := DefaultInterface.GetCustomerHouseNum;
end;

function TCharge.GetCustomerAddress: WideString;
begin
  Result := DefaultInterface.GetCustomerAddress;
end;

function TCharge.GetCustomerAppNum: WideString;
begin
  Result := DefaultInterface.GetCustomerAppNum;
end;

function TCharge.GetCustomerCity: WideString;
begin
  Result := DefaultInterface.GetCustomerCity;
end;

function TCharge.GetState: WideString;
begin
  Result := DefaultInterface.GetState;
end;

function TCharge.GetZipCode: WideString;
begin
  Result := DefaultInterface.GetZipCode;
end;

function TCharge.GetAcctNum: WideString;
begin
  Result := DefaultInterface.GetAcctNum;
end;

function TCharge.GetReturnCode: WideString;
begin
  Result := DefaultInterface.GetReturnCode;
end;

function TCharge.GetCreditLimit: WideString;
begin
  Result := DefaultInterface.GetCreditLimit;
end;

function TCharge.GetPhoneNumber: WideString;
begin
  Result := DefaultInterface.GetPhoneNumber;
end;

function TCharge.GetRestrictCode: WideString;
begin
  Result := DefaultInterface.GetRestrictCode;
end;

function TCharge.GetMaxAuth: WideString;
begin
  Result := DefaultInterface.GetMaxAuth;
end;

function TCharge.GetAddText1: WideString;
begin
  Result := DefaultInterface.GetAddText1;
end;

function TCharge.GetAddText2: WideString;
begin
  Result := DefaultInterface.GetAddText2;
end;

function TCharge.GetAddText3: WideString;
begin
  Result := DefaultInterface.GetAddText3;
end;

function TCharge.GetAddText4: WideString;
begin
  Result := DefaultInterface.GetAddText4;
end;

function TCharge.GetMiscMessage: WideString;
begin
  Result := DefaultInterface.GetMiscMessage;
end;

function TCharge.GetCurrentDBSize: OleVariant;
begin
  Result := DefaultInterface.GetCurrentDBSize;
end;

function TCharge.GetConfigDBSize: OleVariant;
begin
  Result := DefaultInterface.GetConfigDBSize;
end;

function TCharge.GetRecordCount: OleVariant;
begin
  Result := DefaultInterface.GetRecordCount;
end;

function TCharge.GetTransRecord: OleVariant;
begin
  Result := DefaultInterface.GetTransRecord;
end;

function TCharge.GetPS2000: OleVariant;
begin
  Result := DefaultInterface.GetPS2000;
end;

function TCharge.GetAuthAmount: OleVariant;
begin
  Result := DefaultInterface.GetAuthAmount;
end;

function TCharge.GetAmountDue: OleVariant;
begin
  Result := DefaultInterface.GetAmountDue;
end;

function TCharge.GetCCAvailBalance: OleVariant;
begin
  Result := DefaultInterface.GetCCAvailBalance;
end;

function TCharge.GetTraceNumber: OleVariant;
begin
  Result := DefaultInterface.GetTraceNumber;
end;

function TCharge.GetTransactionReferenceNumber: OleVariant;
begin
  Result := DefaultInterface.GetTransactionReferenceNumber;
end;

function TCharge.GetReceipt: OleVariant;
begin
  Result := DefaultInterface.GetReceipt;
end;

function TCharge.AddMatch: WideString;
begin
  Result := DefaultInterface.AddMatch;
end;

function TCharge.CVV2Match: WideString;
begin
  Result := DefaultInterface.CVV2Match;
end;

function TCharge.GetIndex: Integer;
begin
  Result := DefaultInterface.GetIndex;
end;

function TCharge.ValidCardLength(const strCardNumber: WideString): WordBool;
begin
  Result := DefaultInterface.ValidCardLength(strCardNumber);
end;

function TCharge.VerifyCreditCard(const CardNumber: WideString): WordBool;
begin
  Result := DefaultInterface.VerifyCreditCard(CardNumber);
end;

function TCharge.PccSysExists: WordBool;
begin
  Result := DefaultInterface.PccSysExists;
end;

function TCharge.GetXMLResponse: WideString;
begin
  Result := DefaultInterface.GetXMLResponse;
end;

function TCharge.GetCreditCardType(const strCardNumber: WideString): WideString;
begin
  Result := DefaultInterface.GetCreditCardType(strCardNumber);
end;

function TCharge.GetCreditCardIssuer(const strCardNumber: WideString): WideString;
begin
  Result := DefaultInterface.GetCreditCardIssuer(strCardNumber);
end;

function TCharge.GetHostType(var szProcessor: WideString; var szMerchNum: WideString; 
                             var eTIDType: Byte): Smallint;
begin
  Result := DefaultInterface.GetHostType(szProcessor, szMerchNum, eTIDType);
end;

function TCharge.DeleteUserFiles: OleVariant;
begin
  Result := DefaultInterface.DeleteUserFiles;
end;

procedure TCharge.Clear;
begin
  DefaultInterface.Clear;
end;

function TCharge.Cancel: OleVariant;
begin
  Result := DefaultInterface.Cancel;
end;

function TCharge.Send(var FileType: FileType): OleVariant;
begin
  Result := DefaultInterface.Send(FileType);
end;

function TCharge.GetCompanyName: WideString;
begin
  Result := DefaultInterface.GetCompanyName;
end;

function TCharge.GetCompanyStreet: WideString;
begin
  Result := DefaultInterface.GetCompanyStreet;
end;

function TCharge.GetCompanyCity: WideString;
begin
  Result := DefaultInterface.GetCompanyCity;
end;

function TCharge.GetCompanyState: WideString;
begin
  Result := DefaultInterface.GetCompanyState;
end;

function TCharge.GetCompanyZip: WideString;
begin
  Result := DefaultInterface.GetCompanyZip;
end;

function TCharge.CommercialCardType(var strCard: WideString): WideString;
begin
  Result := DefaultInterface.CommercialCardType(strCard);
end;

function TCharge.getCommercialCardType(var strCard: WideString): WideString;
begin
  Result := DefaultInterface.getCommercialCardType(strCard);
end;

function TCharge.VerifyExpDate: WordBool;
begin
  Result := DefaultInterface.VerifyExpDate;
end;

function TCharge.ValidDate: WordBool;
begin
  Result := DefaultInterface.ValidDate;
end;

function TCharge.VerifyAmount: WordBool;
begin
  Result := DefaultInterface.VerifyAmount;
end;

function TCharge.GetParseData(var Data: WideString): Smallint;
begin
  Result := DefaultInterface.GetParseData(Data);
end;

function TCharge.VerifyMerchantNumber(var strMerchant: WideString): WordBool;
begin
  Result := DefaultInterface.VerifyMerchantNumber(strMerchant);
end;

function TCharge.GetXMLRequest: WideString;
begin
  Result := DefaultInterface.GetXMLRequest;
end;

function TCharge.GetPLProcessor: OleVariant;
begin
  Result := DefaultInterface.GetPLProcessor;
end;

function TCharge.GetPLMerchantNumber: OleVariant;
begin
  Result := DefaultInterface.GetPLMerchantNumber;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TChargeProperties.Create(AServer: TCharge);
begin
  inherited Create;
  FServer := AServer;
end;

function TChargeProperties.GetDefaultInterface: _Charge;
begin
  Result := FServer.DefaultInterface;
end;

procedure TChargeProperties.Set_DEST_ZIP_CODE(const Param1: WideString);
  { Warning: The property DEST_ZIP_CODE has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DEST_ZIP_CODE := Param1;
end;

procedure TChargeProperties.Set_Zip(const Param1: WideString);
  { Warning: The property Zip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Zip := Param1;
end;

procedure TChargeProperties.Set_MCSN(const Param1: WideString);
  { Warning: The property MCSN has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MCSN := Param1;
end;

procedure TChargeProperties.Set_MCSC(const Param1: WideString);
  { Warning: The property MCSC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MCSC := Param1;
end;

function TChargeProperties.Get_Zip: WideString;
begin
    Result := DefaultInterface.Zip;
end;

function TChargeProperties.Get_DEST_ZIP_CODE: WideString;
begin
    Result := DefaultInterface.DEST_ZIP_CODE;
end;

function TChargeProperties.Get_MCSN: WideString;
begin
    Result := DefaultInterface.MCSN;
end;

function TChargeProperties.Get_MCSC: WideString;
begin
    Result := DefaultInterface.MCSC;
end;

procedure TChargeProperties.Set_User(const Param1: WideString);
  { Warning: The property User has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.User := Param1;
end;

function TChargeProperties.Get_User: WideString;
begin
    Result := DefaultInterface.User;
end;

procedure TChargeProperties.Set_Track(const Param1: WideString);
  { Warning: The property Track has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Track := Param1;
end;

function TChargeProperties.Get_Track: WideString;
begin
    Result := DefaultInterface.Track;
end;

procedure TChargeProperties.Set_TotalAmount(const Param1: WideString);
  { Warning: The property TotalAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TotalAmount := Param1;
end;

function TChargeProperties.Get_TotalAmount: WideString;
begin
    Result := DefaultInterface.TotalAmount;
end;

procedure TChargeProperties.Set_Ticket(const Param1: WideString);
  { Warning: The property Ticket has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ticket := Param1;
end;

function TChargeProperties.Get_Ticket: WideString;
begin
    Result := DefaultInterface.Ticket;
end;

procedure TChargeProperties.Set_TaxAmt(const Param1: WideString);
  { Warning: The property TaxAmt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TaxAmt := Param1;
end;

function TChargeProperties.Get_TaxAmt: WideString;
begin
    Result := DefaultInterface.TaxAmt;
end;

procedure TChargeProperties.Set_Street(const Param1: WideString);
  { Warning: The property Street has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Street := Param1;
end;

function TChargeProperties.Get_Street: WideString;
begin
    Result := DefaultInterface.Street;
end;

procedure TChargeProperties.Set_Reference(const Param1: WideString);
  { Warning: The property Reference has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Reference := Param1;
end;

function TChargeProperties.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TChargeProperties.Set_RFID(const Param1: WideString);
  { Warning: The property RFID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RFID := Param1;
end;

function TChargeProperties.Get_RFID: WideString;
begin
    Result := DefaultInterface.RFID;
end;

procedure TChargeProperties.Set_Processor(const Param1: WideString);
  { Warning: The property Processor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Processor := Param1;
end;

function TChargeProperties.Get_Processor: WideString;
begin
    Result := DefaultInterface.Processor;
end;

procedure TChargeProperties.Set_Path(const Param1: WideString);
  { Warning: The property Path has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Path := Param1;
end;

function TChargeProperties.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

procedure TChargeProperties.Set_TimeOut(Param1: Integer);
begin
  DefaultInterface.Set_TimeOut(Param1);
end;

function TChargeProperties.Get_TimeOut: Integer;
begin
    Result := DefaultInterface.TimeOut;
end;

function TChargeProperties.Get_TRANSID: WideString;
begin
    Result := DefaultInterface.TRANSID;
end;

procedure TChargeProperties.Set_TRANSID(const Param1: WideString);
  { Warning: The property TRANSID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TRANSID := Param1;
end;

function TChargeProperties.Get_CustCode: WideString;
begin
    Result := DefaultInterface.CustCode;
end;

procedure TChargeProperties.Set_CustCode(const Param1: WideString);
  { Warning: The property CustCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustCode := Param1;
end;

procedure TChargeProperties.Set_Amount(const Param1: WideString);
  { Warning: The property Amount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Amount := Param1;
end;

function TChargeProperties.Get_Amount: WideString;
begin
    Result := DefaultInterface.Amount;
end;

procedure TChargeProperties.Set_ExpDate(const Param1: WideString);
  { Warning: The property ExpDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExpDate := Param1;
end;

function TChargeProperties.Get_ExpDate: WideString;
begin
    Result := DefaultInterface.ExpDate;
end;

procedure TChargeProperties.Set_Card(const Param1: WideString);
  { Warning: The property Card has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Card := Param1;
end;

procedure TChargeProperties.Set_Multi(const Param1: WideString);
  { Warning: The property Multi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Multi := Param1;
end;

procedure TChargeProperties.Set_PeriodicPayment(const Param1: WideString);
  { Warning: The property PeriodicPayment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PeriodicPayment := Param1;
end;

function TChargeProperties.Get_Card: WideString;
begin
    Result := DefaultInterface.Card;
end;

function TChargeProperties.Get_Multi: WideString;
begin
    Result := DefaultInterface.Multi;
end;

procedure TChargeProperties.Set_OffLine(const Param1: WideString);
  { Warning: The property OffLine has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OffLine := Param1;
end;

function TChargeProperties.Get_OffLine: WideString;
begin
    Result := DefaultInterface.OffLine;
end;

function TChargeProperties.Get_PeriodicPayment: WideString;
begin
    Result := DefaultInterface.PeriodicPayment;
end;

procedure TChargeProperties.Set_Action(Param1: Integer);
begin
  DefaultInterface.Set_Action(Param1);
end;

function TChargeProperties.Get_Action: Integer;
begin
    Result := DefaultInterface.Action;
end;

function TChargeProperties.Get_Command: WideString;
begin
    Result := DefaultInterface.Command;
end;

procedure TChargeProperties.Set_Command(const Param1: WideString);
  { Warning: The property Command has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Command := Param1;
end;

function TChargeProperties.Get_Demo: WordBool;
begin
    Result := DefaultInterface.Demo;
end;

procedure TChargeProperties.Set_Demo(Param1: WordBool);
begin
  DefaultInterface.Set_Demo(Param1);
end;

function TChargeProperties.Get_MTS: WordBool;
begin
    Result := DefaultInterface.MTS;
end;

procedure TChargeProperties.Set_MTS(Param1: WordBool);
begin
  DefaultInterface.Set_MTS(Param1);
end;

function TChargeProperties.Get_CardPresent: WideString;
begin
    Result := DefaultInterface.CardPresent;
end;

procedure TChargeProperties.Set_CardPresent(const Param1: WideString);
  { Warning: The property CardPresent has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CardPresent := Param1;
end;

function TChargeProperties.Get_OutDelay: Single;
begin
    Result := DefaultInterface.OutDelay;
end;

procedure TChargeProperties.Set_OutDelay(Param1: Single);
begin
  DefaultInterface.Set_OutDelay(Param1);
end;

function TChargeProperties.Get_CommercialCardFlag: WideString;
begin
    Result := DefaultInterface.CommercialCardFlag;
end;

procedure TChargeProperties.Set_CommercialCardFlag(const Param1: WideString);
  { Warning: The property CommercialCardFlag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommercialCardFlag := Param1;
end;

function TChargeProperties.Get_GratuityAmount: WideString;
begin
    Result := DefaultInterface.GratuityAmount;
end;

procedure TChargeProperties.Set_GratuityAmount(const Param1: WideString);
  { Warning: The property GratuityAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GratuityAmount := Param1;
end;

function TChargeProperties.Get_EstGratuityAmount: WideString;
begin
    Result := DefaultInterface.EstGratuityAmount;
end;

procedure TChargeProperties.Set_EstGratuityAmount(const Param1: WideString);
  { Warning: The property EstGratuityAmount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EstGratuityAmount := Param1;
end;

function TChargeProperties.Get_ItemID: WideString;
begin
    Result := DefaultInterface.ItemID;
end;

procedure TChargeProperties.Set_ItemID(const Param1: WideString);
  { Warning: The property ItemID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ItemID := Param1;
end;

function TChargeProperties.Get_TroutD: WideString;
begin
    Result := DefaultInterface.TroutD;
end;

procedure TChargeProperties.Set_TroutD(const Param1: WideString);
  { Warning: The property TroutD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TroutD := Param1;
end;

function TChargeProperties.Get_Store: WideString;
begin
    Result := DefaultInterface.Store;
end;

procedure TChargeProperties.Set_Store(const Param1: WideString);
  { Warning: The property Store has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Store := Param1;
end;

function TChargeProperties.Get_Manual: Integer;
begin
    Result := DefaultInterface.Manual;
end;

procedure TChargeProperties.Set_Manual(Param1: Integer);
begin
  DefaultInterface.Set_Manual(Param1);
end;

function TChargeProperties.Get_CVV2: WideString;
begin
    Result := DefaultInterface.CVV2;
end;

procedure TChargeProperties.Set_CVV2(const Param1: WideString);
  { Warning: The property CVV2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CVV2 := Param1;
end;

function TChargeProperties.Get_XMLTrans: WordBool;
begin
    Result := DefaultInterface.XMLTrans;
end;

procedure TChargeProperties.Set_XMLTrans(Param1: WordBool);
begin
  DefaultInterface.Set_XMLTrans(Param1);
end;

function TChargeProperties.Get_member: WideString;
begin
    Result := DefaultInterface.member;
end;

procedure TChargeProperties.Set_member(const Param1: WideString);
  { Warning: The property member has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.member := Param1;
end;

function TChargeProperties.Get_MerchantNumber: WideString;
begin
    Result := DefaultInterface.MerchantNumber;
end;

procedure TChargeProperties.Set_MerchantNumber(const Param1: WideString);
  { Warning: The property MerchantNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MerchantNumber := Param1;
end;

function TChargeProperties.Get_LastValidDate: WideString;
begin
    Result := DefaultInterface.LastValidDate;
end;

procedure TChargeProperties.Set_LastValidDate(const Param1: WideString);
  { Warning: The property LastValidDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LastValidDate := Param1;
end;

function TChargeProperties.Get_TaxExempt: WordBool;
begin
    Result := DefaultInterface.TaxExempt;
end;

procedure TChargeProperties.Set_TaxExempt(Param1: WordBool);
begin
  DefaultInterface.Set_TaxExempt(Param1);
end;

function TChargeProperties.Get_Authcode: WideString;
begin
    Result := DefaultInterface.Authcode;
end;

procedure TChargeProperties.Set_Authcode(const Param1: WideString);
  { Warning: The property Authcode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Authcode := Param1;
end;

procedure TChargeProperties.Set_CheckCard(Param1: WordBool);
begin
  DefaultInterface.Set_CheckCard(Param1);
end;

function TChargeProperties.Get_CheckCard: WordBool;
begin
    Result := DefaultInterface.CheckCard;
end;

function TChargeProperties.Get_AmxChargeDescription: WideString;
begin
    Result := DefaultInterface.AmxChargeDescription;
end;

procedure TChargeProperties.Set_AmxChargeDescription(const Param1: WideString);
  { Warning: The property AmxChargeDescription has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxChargeDescription := Param1;
end;

function TChargeProperties.Get_AmxDescription_1: WideString;
begin
    Result := DefaultInterface.AmxDescription_1;
end;

procedure TChargeProperties.Set_AmxDescription_1(const Param1: WideString);
  { Warning: The property AmxDescription_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_1 := Param1;
end;

function TChargeProperties.Get_AmxDescription_2: WideString;
begin
    Result := DefaultInterface.AmxDescription_2;
end;

procedure TChargeProperties.Set_AmxDescription_2(const Param1: WideString);
  { Warning: The property AmxDescription_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_2 := Param1;
end;

function TChargeProperties.Get_AmxDescription_3: WideString;
begin
    Result := DefaultInterface.AmxDescription_3;
end;

procedure TChargeProperties.Set_AmxDescription_3(const Param1: WideString);
  { Warning: The property AmxDescription_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_3 := Param1;
end;

function TChargeProperties.Get_AmxDescription_4: WideString;
begin
    Result := DefaultInterface.AmxDescription_4;
end;

procedure TChargeProperties.Set_AmxDescription_4(const Param1: WideString);
  { Warning: The property AmxDescription_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmxDescription_4 := Param1;
end;

procedure TChargeProperties.Set_IPAddress(const Param1: WideString);
  { Warning: The property IPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IPAddress := Param1;
end;

function TChargeProperties.Get_Billpay: WideString;
begin
    Result := DefaultInterface.Billpay;
end;

procedure TChargeProperties.Set_Billpay(const Param1: WideString);
  { Warning: The property Billpay has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Billpay := Param1;
end;

function TChargeProperties.Get_Level3: WideString;
begin
    Result := DefaultInterface.Level3;
end;

procedure TChargeProperties.Set_Level3(const Param1: WideString);
  { Warning: The property Level3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Level3 := Param1;
end;

function TChargeProperties.Get_IPAddress: WideString;
begin
    Result := DefaultInterface.IPAddress;
end;

procedure TChargeProperties.Set_Port(Param1: Smallint);
begin
  DefaultInterface.Set_Port(Param1);
end;

function TChargeProperties.Get_Port: Smallint;
begin
    Result := DefaultInterface.Port;
end;

procedure TChargeProperties.Set_EnableSSL(Param1: WordBool);
begin
  DefaultInterface.Set_EnableSSL(Param1);
end;

function TChargeProperties.Get_EnableSSL: WordBool;
begin
    Result := DefaultInterface.EnableSSL;
end;

function TChargeProperties.Get_CommMethod: CommMethod;
begin
    Result := DefaultInterface.CommMethod;
end;

procedure TChargeProperties.Set_CommMethod(Param1: CommMethod);
begin
  DefaultInterface.Set_CommMethod(Param1);
end;

procedure TChargeProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TChargeProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TChargeProperties.Set_PrintReceipts(const Param1: WideString);
  { Warning: The property PrintReceipts has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrintReceipts := Param1;
end;

function TChargeProperties.Get_PrintReceipts: WideString;
begin
    Result := DefaultInterface.PrintReceipts;
end;

function TChargeProperties.Get_DriverID: WideString;
begin
    Result := DefaultInterface.DriverID;
end;

procedure TChargeProperties.Set_DriverID(const Param1: WideString);
  { Warning: The property DriverID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DriverID := Param1;
end;

function TChargeProperties.Get_DriverPIN: WideString;
begin
    Result := DefaultInterface.DriverPIN;
end;

procedure TChargeProperties.Set_DriverPIN(const Param1: WideString);
  { Warning: The property DriverPIN has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DriverPIN := Param1;
end;

function TChargeProperties.Get_IDNumber: WideString;
begin
    Result := DefaultInterface.IDNumber;
end;

procedure TChargeProperties.Set_IDNumber(const Param1: WideString);
  { Warning: The property IDNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IDNumber := Param1;
end;

function TChargeProperties.Get_Odometer: WideString;
begin
    Result := DefaultInterface.Odometer;
end;

procedure TChargeProperties.Set_Odometer(const Param1: WideString);
  { Warning: The property Odometer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Odometer := Param1;
end;

function TChargeProperties.Get_RestrictionCode: WideString;
begin
    Result := DefaultInterface.RestrictionCode;
end;

procedure TChargeProperties.Set_RestrictionCode(const Param1: WideString);
  { Warning: The property RestrictionCode has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RestrictionCode := Param1;
end;

function TChargeProperties.Get_VehicleID: WideString;
begin
    Result := DefaultInterface.VehicleID;
end;

procedure TChargeProperties.Set_VehicleID(const Param1: WideString);
  { Warning: The property VehicleID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VehicleID := Param1;
end;

function TChargeProperties.Get_ProductDetailCount: WideString;
begin
    Result := DefaultInterface.ProductDetailCount;
end;

procedure TChargeProperties.Set_ProductDetailCount(const Param1: WideString);
  { Warning: The property ProductDetailCount has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCount := Param1;
end;

function TChargeProperties.Get_ProductDetailQuantity_1: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_1;
end;

procedure TChargeProperties.Set_ProductDetailQuantity_1(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_1 := Param1;
end;

function TChargeProperties.Get_ProductDetailCode_1: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_1;
end;

procedure TChargeProperties.Set_ProductDetailCode_1(const Param1: WideString);
  { Warning: The property ProductDetailCode_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_1 := Param1;
end;

function TChargeProperties.Get_ProductDetailAmount_1: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_1;
end;

procedure TChargeProperties.Set_ProductDetailAmount_1(const Param1: WideString);
  { Warning: The property ProductDetailAmount_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_1 := Param1;
end;

function TChargeProperties.Get_ProductDetailQuantity_2: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_2;
end;

procedure TChargeProperties.Set_ProductDetailQuantity_2(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_2 := Param1;
end;

function TChargeProperties.Get_ProductDetailCode_2: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_2;
end;

procedure TChargeProperties.Set_ProductDetailCode_2(const Param1: WideString);
  { Warning: The property ProductDetailCode_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_2 := Param1;
end;

function TChargeProperties.Get_ProductDetailAmount_2: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_2;
end;

procedure TChargeProperties.Set_ProductDetailAmount_2(const Param1: WideString);
  { Warning: The property ProductDetailAmount_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_2 := Param1;
end;

function TChargeProperties.Get_ProductDetailQuantity_3: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_3;
end;

procedure TChargeProperties.Set_ProductDetailQuantity_3(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_3 := Param1;
end;

function TChargeProperties.Get_ProductDetailCode_3: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_3;
end;

procedure TChargeProperties.Set_ProductDetailCode_3(const Param1: WideString);
  { Warning: The property ProductDetailCode_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_3 := Param1;
end;

function TChargeProperties.Get_ProductDetailAmount_3: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_3;
end;

procedure TChargeProperties.Set_ProductDetailAmount_3(const Param1: WideString);
  { Warning: The property ProductDetailAmount_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_3 := Param1;
end;

function TChargeProperties.Get_ProductDetailQuantity_4: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_4;
end;

procedure TChargeProperties.Set_ProductDetailQuantity_4(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_4 := Param1;
end;

function TChargeProperties.Get_ProductDetailCode_4: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_4;
end;

procedure TChargeProperties.Set_ProductDetailCode_4(const Param1: WideString);
  { Warning: The property ProductDetailCode_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_4 := Param1;
end;

function TChargeProperties.Get_ProductDetailAmount_4: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_4;
end;

procedure TChargeProperties.Set_ProductDetailAmount_4(const Param1: WideString);
  { Warning: The property ProductDetailAmount_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_4 := Param1;
end;

function TChargeProperties.Get_ProductDetailQuantity_5: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_5;
end;

procedure TChargeProperties.Set_ProductDetailQuantity_5(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_5 := Param1;
end;

function TChargeProperties.Get_ProductDetailCode_5: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_5;
end;

procedure TChargeProperties.Set_ProductDetailCode_5(const Param1: WideString);
  { Warning: The property ProductDetailCode_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_5 := Param1;
end;

function TChargeProperties.Get_ProductDetailAmount_5: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_5;
end;

procedure TChargeProperties.Set_ProductDetailAmount_5(const Param1: WideString);
  { Warning: The property ProductDetailAmount_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_5 := Param1;
end;

function TChargeProperties.Get_ProductDetailQuantity_6: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_6;
end;

procedure TChargeProperties.Set_ProductDetailQuantity_6(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_6 := Param1;
end;

function TChargeProperties.Get_ProductDetailCode_6: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_6;
end;

procedure TChargeProperties.Set_ProductDetailCode_6(const Param1: WideString);
  { Warning: The property ProductDetailCode_6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_6 := Param1;
end;

function TChargeProperties.Get_ProductDetailAmount_6: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_6;
end;

procedure TChargeProperties.Set_ProductDetailAmount_6(const Param1: WideString);
  { Warning: The property ProductDetailAmount_6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_6 := Param1;
end;

function TChargeProperties.Get_ProductDetailQuantity_7: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_7;
end;

procedure TChargeProperties.Set_ProductDetailQuantity_7(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_7 := Param1;
end;

function TChargeProperties.Get_ProductDetailCode_7: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_7;
end;

procedure TChargeProperties.Set_ProductDetailCode_7(const Param1: WideString);
  { Warning: The property ProductDetailCode_7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_7 := Param1;
end;

function TChargeProperties.Get_ProductDetailAmount_7: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_7;
end;

procedure TChargeProperties.Set_ProductDetailAmount_7(const Param1: WideString);
  { Warning: The property ProductDetailAmount_7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_7 := Param1;
end;

function TChargeProperties.Get_ProductDetailQuantity_8: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_8;
end;

procedure TChargeProperties.Set_ProductDetailQuantity_8(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_8 := Param1;
end;

function TChargeProperties.Get_ProductDetailCode_8: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_8;
end;

procedure TChargeProperties.Set_ProductDetailCode_8(const Param1: WideString);
  { Warning: The property ProductDetailCode_8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_8 := Param1;
end;

function TChargeProperties.Get_ProductDetailAmount_8: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_8;
end;

procedure TChargeProperties.Set_ProductDetailAmount_8(const Param1: WideString);
  { Warning: The property ProductDetailAmount_8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_8 := Param1;
end;

function TChargeProperties.Get_ProductDetailQuantity_9: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_9;
end;

procedure TChargeProperties.Set_ProductDetailQuantity_9(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_9 := Param1;
end;

function TChargeProperties.Get_ProductDetailCode_9: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_9;
end;

procedure TChargeProperties.Set_ProductDetailCode_9(const Param1: WideString);
  { Warning: The property ProductDetailCode_9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_9 := Param1;
end;

function TChargeProperties.Get_ProductDetailAmount_9: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_9;
end;

procedure TChargeProperties.Set_ProductDetailAmount_9(const Param1: WideString);
  { Warning: The property ProductDetailAmount_9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_9 := Param1;
end;

function TChargeProperties.Get_ProductDetailQuantity_10: WideString;
begin
    Result := DefaultInterface.ProductDetailQuantity_10;
end;

procedure TChargeProperties.Set_ProductDetailQuantity_10(const Param1: WideString);
  { Warning: The property ProductDetailQuantity_10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailQuantity_10 := Param1;
end;

function TChargeProperties.Get_ProductDetailCode_10: WideString;
begin
    Result := DefaultInterface.ProductDetailCode_10;
end;

procedure TChargeProperties.Set_ProductDetailCode_10(const Param1: WideString);
  { Warning: The property ProductDetailCode_10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailCode_10 := Param1;
end;

function TChargeProperties.Get_ProductDetailAmount_10: WideString;
begin
    Result := DefaultInterface.ProductDetailAmount_10;
end;

procedure TChargeProperties.Set_ProductDetailAmount_10(const Param1: WideString);
  { Warning: The property ProductDetailAmount_10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductDetailAmount_10 := Param1;
end;

function TChargeProperties.Get_StoreNum: WideString;
begin
    Result := DefaultInterface.StoreNum;
end;

procedure TChargeProperties.Set_StoreNum(const Param1: WideString);
  { Warning: The property StoreNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StoreNum := Param1;
end;

function TChargeProperties.Get_SSNum: WideString;
begin
    Result := DefaultInterface.SSNum;
end;

procedure TChargeProperties.Set_SSNum(const Param1: WideString);
  { Warning: The property SSNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SSNum := Param1;
end;

function TChargeProperties.Get_CustomerHouseNum: WideString;
begin
    Result := DefaultInterface.CustomerHouseNum;
end;

procedure TChargeProperties.Set_CustomerHouseNum(const Param1: WideString);
  { Warning: The property CustomerHouseNum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CustomerHouseNum := Param1;
end;

function TChargeProperties.Get_Phone_Number: WideString;
begin
    Result := DefaultInterface.Phone_Number;
end;

procedure TChargeProperties.Set_Phone_Number(const Param1: WideString);
  { Warning: The property Phone_Number has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Phone_Number := Param1;
end;

function TChargeProperties.Get_Birth_Date: WideString;
begin
    Result := DefaultInterface.Birth_Date;
end;

procedure TChargeProperties.Set_Birth_Date(const Param1: WideString);
  { Warning: The property Birth_Date has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Birth_Date := Param1;
end;

function TChargeProperties.Get_PumpNumber: WideString;
begin
    Result := DefaultInterface.PumpNumber;
end;

procedure TChargeProperties.Set_PumpNumber(const Param1: WideString);
  { Warning: The property PumpNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PumpNumber := Param1;
end;

procedure TChargeProperties.Set_CfgEnabled(Param1: WordBool);
begin
  DefaultInterface.Set_CfgEnabled(Param1);
end;

function TChargeProperties.Get_CfgEnabled: WordBool;
begin
    Result := DefaultInterface.CfgEnabled;
end;

procedure TChargeProperties.Set_CfgType(Param1: Byte);
begin
  DefaultInterface.Set_CfgType(Param1);
end;

function TChargeProperties.Get_CfgType: Byte;
begin
    Result := DefaultInterface.CfgType;
end;

procedure TChargeProperties.Set_CfgPath(const Param1: WideString);
  { Warning: The property CfgPath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CfgPath := Param1;
end;

function TChargeProperties.Get_CfgPath: WideString;
begin
    Result := DefaultInterface.CfgPath;
end;

procedure TChargeProperties.Set_CfgSizeLimit(const Param1: WideString);
  { Warning: The property CfgSizeLimit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CfgSizeLimit := Param1;
end;

function TChargeProperties.Get_CfgSizeLimit: WideString;
begin
    Result := DefaultInterface.CfgSizeLimit;
end;

procedure TChargeProperties.Set_CfgKeepDays(const Param1: WideString);
  { Warning: The property CfgKeepDays has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CfgKeepDays := Param1;
end;

function TChargeProperties.Get_CfgKeepDays: WideString;
begin
    Result := DefaultInterface.CfgKeepDays;
end;

procedure TChargeProperties.Set_FleetCard(const Param1: WideString);
  { Warning: The property FleetCard has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FleetCard := Param1;
end;

function TChargeProperties.Get_FleetCard: WideString;
begin
    Result := DefaultInterface.FleetCard;
end;

procedure TChargeProperties.Set_CreditPlanNumber(const Param1: WideString);
  { Warning: The property CreditPlanNumber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreditPlanNumber := Param1;
end;

function TChargeProperties.Get_CreditPlanNumber: WideString;
begin
    Result := DefaultInterface.CreditPlanNumber;
end;

{$ENDIF}

procedure Register;
begin
  RegisterComponents(dtlServerPage, [TpccTran, TPccResponse, TAuthReport, TOffLine, 
    TCheck, TGift, TDebit, TBatch, TCharge]);
end;

end.
