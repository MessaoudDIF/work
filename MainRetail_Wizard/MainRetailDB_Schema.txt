/*
Deployment script for MainRetailDB
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NUMERIC_ROUNDABORT, QUOTED_IDENTIFIER OFF;


GO
:setvar DatabaseName "MainRetailDB"
:setvar DefaultDataPath "c:\Program Files\Microsoft SQL Server\MSSQL10_50.PINOGY\MSSQL\DATA\"
:setvar DefaultLogPath "c:\Program Files\Microsoft SQL Server\MSSQL10_50.PINOGY\MSSQL\DATA\"

GO
:on error exit
GO
USE [master]
GO
IF (DB_ID(N'$(DatabaseName)') IS NOT NULL
    AND DATABASEPROPERTYEX(N'$(DatabaseName)','Status') <> N'ONLINE')
BEGIN
    RAISERROR(N'The state of the target database, %s, is not set to ONLINE. To deploy to this database, its state must be set to ONLINE.', 16, 127,N'$(DatabaseName)') WITH NOWAIT
    RETURN
END

GO

IF NOT EXISTS (SELECT 1 FROM [master].[dbo].[sysdatabases] WHERE [name] = N'$(DatabaseName)')
BEGIN
    RAISERROR(N'You cannot deploy this update script to target OFFICE-PC\PINOGY. The database for which this script was built, MainRetailDB, does not exist on this server.', 16, 127) WITH NOWAIT
    RETURN
END

GO

IF (@@servername != 'OFFICE-PC\PINOGY')
BEGIN
    RAISERROR(N'The server name in the build script %s does not match the name of the target server %s. Verify whether your database project settings are correct and whether your build script is up to date.', 16, 127,N'OFFICE-PC\PINOGY',@@servername) WITH NOWAIT
    RETURN
END

GO

IF CAST(DATABASEPROPERTY(N'$(DatabaseName)','IsReadOnly') as bit) = 1
BEGIN
    RAISERROR(N'You cannot deploy this update script because the database for which it was built, %s , is set to READ_ONLY.', 16, 127, N'$(DatabaseName)') WITH NOWAIT
    RETURN
END

GO
USE [$(DatabaseName)]
GO
/*
The type for column ReplLastChange in table [dbo].[Inv_BarcodePrintSearch] is currently  VARCHAR (22) NULL but is being changed to  DATETIME NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Inv_BarcodePrintSearch])
    RAISERROR ('Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Invoice].[TotalDiscount] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Invoice])
    RAISERROR ('Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping DF_Zero69...';


GO
ALTER TABLE [dbo].[CashRegister] DROP CONSTRAINT [DF_Zero69];


GO
PRINT N'Dropping DF_Zero72...';


GO
ALTER TABLE [dbo].[CashRegister] DROP CONSTRAINT [DF_Zero72];


GO
PRINT N'Dropping DF_Zero70...';


GO
ALTER TABLE [dbo].[CashRegister] DROP CONSTRAINT [DF_Zero70];


GO
PRINT N'Dropping DF_Zero71...';


GO
ALTER TABLE [dbo].[CashRegister] DROP CONSTRAINT [DF_Zero71];


GO
PRINT N'Dropping DF_Inv_ModelVendor_DoNotOrder...';


GO
ALTER TABLE [dbo].[Inv_ModelVendor] DROP CONSTRAINT [DF_Inv_ModelVendor_DoNotOrder];


GO
PRINT N'Dropping DF_InvModelVendor_MinQtyPO_Zero...';


GO
ALTER TABLE [dbo].[Inv_ModelVendor] DROP CONSTRAINT [DF_InvModelVendor_MinQtyPO_Zero];


GO
PRINT N'Dropping DF_InvModelVendor_CaseQty_Zero...';


GO
ALTER TABLE [dbo].[Inv_ModelVendor] DROP CONSTRAINT [DF_InvModelVendor_CaseQty_Zero];


GO
PRINT N'Dropping DF_Zero118...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [DF_Zero118];


GO
PRINT N'Dropping DF_Zero115...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [DF_Zero115];


GO
PRINT N'Dropping DF_Zero116...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [DF_Zero116];


GO
PRINT N'Dropping DF_Zero117...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [DF_Zero117];


GO
PRINT N'Dropping DF_Zero119...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [DF_Zero119];


GO
PRINT N'Dropping DF_Zero2519...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [DF_Zero2519];


GO
PRINT N'Dropping DF_InventoryMov_IDDepartment_Zero...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [DF_InventoryMov_IDDepartment_Zero];


GO
PRINT N'Dropping DF__INVOICE__Deliver__6A11960F...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [DF__INVOICE__Deliver__6A11960F];


GO
PRINT N'Dropping DF_ZeroAdExp...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [DF_ZeroAdExp];


GO
PRINT N'Dropping DF__Invoice__Invoice__4026493B...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [DF__Invoice__Invoice__4026493B];


GO
PRINT N'Dropping DF_Zero104...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [DF_Zero104];


GO
PRINT N'Dropping DF_Zero105...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [DF_Zero105];


GO
PRINT N'Dropping DF_Zero106...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [DF_Zero106];


GO
PRINT N'Dropping DF_Zero107...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [DF_Zero107];


GO
PRINT N'Dropping DF_Zero103...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [DF_Zero103];


GO
PRINT N'Dropping DF_Zero108...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [DF_Zero108];


GO
PRINT N'Dropping DF_Zero102...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [DF_Zero102];


GO
PRINT N'Dropping DF_Zero101...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [DF_Zero101];


GO
PRINT N'Dropping DF__Invoice__Cancele__06ADD4BD...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [DF__Invoice__Cancele__06ADD4BD];


GO
PRINT N'Dropping DF_Zero49...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero49];


GO
PRINT N'Dropping DF_Zero48...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero48];


GO
PRINT N'Dropping DF_Zero47...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero47];


GO
PRINT N'Dropping DF_Zero45...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero45];


GO
PRINT N'Dropping DF_Zero46...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero46];


GO
PRINT N'Dropping DF__Model__FloatPerc__43B6E2FD...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF__Model__FloatPerc__43B6E2FD];


GO
PRINT N'Dropping DF__Model__AskUserOn__3E3E00C9...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF__Model__AskUserOn__3E3E00C9];


GO
PRINT N'Dropping DF__Model__TR...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF__Model__TR];


GO
PRINT N'Dropping DEF_R...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DEF_R];


GO
PRINT N'Dropping DF_Zero1008...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero1008];


GO
PRINT N'Dropping DF_Zero52...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero52];


GO
PRINT N'Dropping DF_Zero53...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero53];


GO
PRINT N'Dropping DF_Model_AutomaticRequest001...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Model_AutomaticRequest001];


GO
PRINT N'Dropping DF__Model__ClasseABC...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF__Model__ClasseABC];


GO
PRINT N'Dropping DF_Zero50...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero50];


GO
PRINT N'Dropping DF_Model_AvgCostTotal_Zero...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Model_AvgCostTotal_Zero];


GO
PRINT N'Dropping DF_Zero58...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero58];


GO
PRINT N'Dropping DF_ZERO51...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_ZERO51];


GO
PRINT N'Dropping DF_Zero54...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero54];


GO
PRINT N'Dropping DF_Zero55...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero55];


GO
PRINT N'Dropping DF_Zero56...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero56];


GO
PRINT N'Dropping DF_Zero57...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero57];


GO
PRINT N'Dropping DF_Model_Verify_Zero...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Model_Verify_Zero];


GO
PRINT N'Dropping DF__Model__ServiceMa__77B67547...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF__Model__ServiceMa__77B67547];


GO
PRINT N'Dropping DF_Model_SendToTrash_Zero...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Model_SendToTrash_Zero];


GO
PRINT N'Dropping DF_Zero3706...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero3706];


GO
PRINT N'Dropping DF_Zero3707...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero3707];


GO
PRINT N'Dropping DF_Zero4083...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [DF_Zero4083];


GO
PRINT N'Dropping DF_Zero128...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [DF_Zero128];


GO
PRINT N'Dropping DF_Zero130...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [DF_Zero130];


GO
PRINT N'Dropping DF_Zero129...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [DF_Zero129];


GO
PRINT N'Dropping DF_Zero132...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [DF_Zero132];


GO
PRINT N'Dropping DF_Zero133...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [DF_Zero133];


GO
PRINT N'Dropping DF_ZERO131...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [DF_ZERO131];


GO
PRINT N'Dropping DF_Zero2512...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [DF_Zero2512];


GO
PRINT N'Dropping DF_Zero1482...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [DF_Zero1482];


GO
PRINT N'Dropping DF_ZERO127...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [DF_ZERO127];


GO
PRINT N'Dropping DF__PreInvent__Disco__4D362B96...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [DF__PreInvent__Disco__4D362B96];


GO
PRINT N'Dropping DF_PreInventoryMov_IDDepartment_Zero...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [DF_PreInventoryMov_IDDepartment_Zero];


GO
PRINT N'Dropping DF__PT_LocalS__MacAd__004BBB48...';


GO
ALTER TABLE [dbo].[PT_LocalSetting] DROP CONSTRAINT [DF__PT_LocalS__MacAd__004BBB48];


GO
PRINT N'Dropping DF_SalPromo_FlatPromo_Zero...';


GO
ALTER TABLE [dbo].[Sal_Promo] DROP CONSTRAINT [DF_SalPromo_FlatPromo_Zero];


GO
PRINT N'Dropping FK_CashRegister_SalRemovedItem_IDCashRegister...';


GO
ALTER TABLE [dbo].[Sal_RemovedItem] DROP CONSTRAINT [FK_CashRegister_SalRemovedItem_IDCashRegister];


GO
PRINT N'Dropping FK_CashReg_CashRegMov_IDCashRegister...';


GO
ALTER TABLE [dbo].[CashRegMov] DROP CONSTRAINT [FK_CashReg_CashRegMov_IDCashRegister];


GO
PRINT N'Dropping FK_CashRegister_SalDrawerKickLog_IDCashRegister...';


GO
ALTER TABLE [dbo].[Sal_DrawerKickLog] DROP CONSTRAINT [FK_CashRegister_SalDrawerKickLog_IDCashRegister];


GO
PRINT N'Dropping FK_CashRegister_Sal_TotalizadorParcial_IDReducaoZ...';


GO
ALTER TABLE [dbo].[Sal_ReducaoZ] DROP CONSTRAINT [FK_CashRegister_Sal_TotalizadorParcial_IDReducaoZ];


GO
PRINT N'Dropping FK_Model_InvModelVendor_IDModel...';


GO
ALTER TABLE [dbo].[Inv_ModelVendor] DROP CONSTRAINT [FK_Model_InvModelVendor_IDModel];


GO
PRINT N'Dropping FK_Pessoa_InvModelVendor_IDFabricante...';


GO
ALTER TABLE [dbo].[Inv_ModelVendor] DROP CONSTRAINT [FK_Pessoa_InvModelVendor_IDFabricante];


GO
PRINT N'Dropping FK_InventoryMov_InvMovDocument_IDInventoryMov...';


GO
ALTER TABLE [dbo].[Inv_MovDocument] DROP CONSTRAINT [FK_InventoryMov_InvMovDocument_IDInventoryMov];


GO
PRINT N'Dropping FK_InventoryMov_InvMovComplement_IDInventoryMov...';


GO
ALTER TABLE [dbo].[Inv_MovComplement] DROP CONSTRAINT [FK_InventoryMov_InvMovComplement_IDInventoryMov];


GO
PRINT N'Dropping FK_InventoryMov_SaleItemCommission_IDInventoryMov...';


GO
ALTER TABLE [dbo].[SaleItemCommission] DROP CONSTRAINT [FK_InventoryMov_SaleItemCommission_IDInventoryMov];


GO
PRINT N'Dropping FK_InventoryMov_InvMovPrice_IDInventoryMov...';


GO
ALTER TABLE [dbo].[Inv_MovPrice] DROP CONSTRAINT [FK_InventoryMov_InvMovPrice_IDInventoryMov];


GO
PRINT N'Dropping FK_InventoryMov_GroupCost_IDInventoryMov...';


GO
ALTER TABLE [dbo].[GroupCost] DROP CONSTRAINT [FK_InventoryMov_GroupCost_IDInventoryMov];


GO
PRINT N'Dropping FK_InventoryMov_InventoryMovTax_IDInventoryMov...';


GO
ALTER TABLE [dbo].[InventoryMovTax] DROP CONSTRAINT [FK_InventoryMov_InventoryMovTax_IDInventoryMov];


GO
PRINT N'Dropping FK_DiscUses_IDInventoryMov...';


GO
ALTER TABLE [dbo].[DiscUses] DROP CONSTRAINT [FK_DiscUses_IDInventoryMov];


GO
PRINT N'Dropping FK_Repair_InventoryMov_IDRepair...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [FK_Repair_InventoryMov_IDRepair];


GO
PRINT N'Dropping FK_SystemUser_InventoryMov_IDUser...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [FK_SystemUser_InventoryMov_IDUser];


GO
PRINT N'Dropping FK_InventoryMovType_IventoryMov_InventMovTypeID...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [FK_InventoryMovType_IventoryMov_InventMovTypeID];


GO
PRINT N'Dropping FK_InvDepartment_InventoryMov_IDDepartment...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [FK_InvDepartment_InventoryMov_IDDepartment];


GO
PRINT N'Dropping FK_Pessoa_IventoryMov_IDPessoa...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [FK_Pessoa_IventoryMov_IDPessoa];


GO
PRINT N'Dropping FK_Store_InventoryMov_StoreID...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [FK_Store_InventoryMov_StoreID];


GO
PRINT N'Dropping FK_Model_InventoryMov_ModelID...';


GO
ALTER TABLE [dbo].[InventoryMov] DROP CONSTRAINT [FK_Model_InventoryMov_ModelID];


GO
PRINT N'Dropping FK_InventoryMov_Repair_IDInvMovReturn...';


GO
ALTER TABLE [dbo].[Repair] DROP CONSTRAINT [FK_InventoryMov_Repair_IDInvMovReturn];


GO
PRINT N'Dropping FK_InventoryMov_Repair_IDInvMovSend...';


GO
ALTER TABLE [dbo].[Repair] DROP CONSTRAINT [FK_InventoryMov_Repair_IDInvMovSend];


GO
PRINT N'Dropping FK_Invoice_History_IDPreSale...';


GO
ALTER TABLE [dbo].[History] DROP CONSTRAINT [FK_Invoice_History_IDPreSale];


GO
PRINT N'Dropping FK_Invoice_Sal_RemovedItem_IDPreSale...';


GO
ALTER TABLE [dbo].[Sal_RemovedItem] DROP CONSTRAINT [FK_Invoice_Sal_RemovedItem_IDPreSale];


GO
PRINT N'Dropping FK_Invoice_Sal_PaymentCondition_IDPreSale...';


GO
ALTER TABLE [dbo].[Sal_PaymentCondition] DROP CONSTRAINT [FK_Invoice_Sal_PaymentCondition_IDPreSale];


GO
PRINT N'Dropping FK_Invoice_Invoice_IDPresaleParent...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [FK_Invoice_Invoice_IDPresaleParent];


GO
PRINT N'Dropping FK_CashRegMov_Invoice_CashRegMovID...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [FK_CashRegMov_Invoice_CashRegMovID];


GO
PRINT N'Dropping FK_DeliverType_Invoice_DeliverTypeID...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [FK_DeliverType_Invoice_DeliverTypeID];


GO
PRINT N'Dropping FK_Pessoa_Invoice_IDCustomer...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [FK_Pessoa_Invoice_IDCustomer];


GO
PRINT N'Dropping FK_Media_Invoice_MediaID...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [FK_Media_Invoice_MediaID];


GO
PRINT N'Dropping FK_TouristGroup_Invoice_IDTourisGroup...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [FK_TouristGroup_Invoice_IDTourisGroup];


GO
PRINT N'Dropping FK_MeioPag_Invoice_IDMeioPag...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [FK_MeioPag_Invoice_IDMeioPag];


GO
PRINT N'Dropping FK_SpecialPrice_Invoice_SpecialPriceID...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [FK_SpecialPrice_Invoice_SpecialPriceID];


GO
PRINT N'Dropping FK_Store_Invoice_IDStore...';


GO
ALTER TABLE [dbo].[Invoice] DROP CONSTRAINT [FK_Store_Invoice_IDStore];


GO
PRINT N'Dropping FK_Invoice_SalInvoiceShipping_IDPreSale...';


GO
ALTER TABLE [dbo].[Sal_InvoiceShipping] DROP CONSTRAINT [FK_Invoice_SalInvoiceShipping_IDPreSale];


GO
PRINT N'Dropping FK_Invoice_Lancamento_IDPreSale...';


GO
ALTER TABLE [dbo].[Fin_Lancamento] DROP CONSTRAINT [FK_Invoice_Lancamento_IDPreSale];


GO
PRINT N'Dropping FK_Invoice_Estimated_IDPreSale...';


GO
ALTER TABLE [dbo].[Estimated] DROP CONSTRAINT [FK_Invoice_Estimated_IDPreSale];


GO
PRINT N'Dropping FK_Invoice_SalRebateDiscount_IDPreSaleUsed...';


GO
ALTER TABLE [dbo].[Sal_RebateDiscount] DROP CONSTRAINT [FK_Invoice_SalRebateDiscount_IDPreSaleUsed];


GO
PRINT N'Dropping FK_Invoice_SalRebateDiscount_IDPreSaleCreated...';


GO
ALTER TABLE [dbo].[Sal_RebateDiscount] DROP CONSTRAINT [FK_Invoice_SalRebateDiscount_IDPreSaleCreated];


GO
PRINT N'Dropping FK_Invoice_SalAccountCardMov_IDPreSale...';


GO
ALTER TABLE [dbo].[Sal_AccountCardMov] DROP CONSTRAINT [FK_Invoice_SalAccountCardMov_IDPreSale];


GO
PRINT N'Dropping FK_Invoice_InvoiceToCostType_IDPreSale...';


GO
ALTER TABLE [dbo].[InvoiceToCostType] DROP CONSTRAINT [FK_Invoice_InvoiceToCostType_IDPreSale];


GO
PRINT N'Dropping FK_Invoice_InvoiceOBS_IDPreSale...';


GO
ALTER TABLE [dbo].[InvoiceOBS] DROP CONSTRAINT [FK_Invoice_InvoiceOBS_IDPreSale];


GO
PRINT N'Dropping FK_Sal_Coupon_DocumentID...';


GO
ALTER TABLE [dbo].[Sal_Coupon] DROP CONSTRAINT [FK_Sal_Coupon_DocumentID];


GO
PRINT N'Dropping FK_Model_SalRemovedItem_IDModel...';


GO
ALTER TABLE [dbo].[Sal_RemovedItem] DROP CONSTRAINT [FK_Model_SalRemovedItem_IDModel];


GO
PRINT N'Dropping FK_Model_Request_ModelID...';


GO
ALTER TABLE [dbo].[Request] DROP CONSTRAINT [FK_Model_Request_ModelID];


GO
PRINT N'Dropping FK_Model_InvModelReceipt_IDModel...';


GO
ALTER TABLE [dbo].[Inv_ModelReceipt] DROP CONSTRAINT [FK_Model_InvModelReceipt_IDModel];


GO
PRINT N'Dropping FK_Model_PurchaseVerify_IDModel...';


GO
ALTER TABLE [dbo].[Pur_PurchaseVerify] DROP CONSTRAINT [FK_Model_PurchaseVerify_IDModel];


GO
PRINT N'Dropping FK_Model_InvFeatures_IDModel...';


GO
ALTER TABLE [dbo].[InvFeatures] DROP CONSTRAINT [FK_Model_InvFeatures_IDModel];


GO
PRINT N'Dropping R_236...';


GO
ALTER TABLE [dbo].[Inv_ModelBalance] DROP CONSTRAINT [R_236];


GO
PRINT N'Dropping FK_Model_Sal_FrequentPromo_IDModel...';


GO
ALTER TABLE [dbo].[Sal_FrequentPromo] DROP CONSTRAINT [FK_Model_Sal_FrequentPromo_IDModel];


GO
PRINT N'Dropping FK_Model_EstimatedItem_IDModel...';


GO
ALTER TABLE [dbo].[EstimatedItem] DROP CONSTRAINT [FK_Model_EstimatedItem_IDModel];


GO
PRINT N'Dropping FK_Model_InventorySerial_IDModel...';


GO
ALTER TABLE [dbo].[InventorySerial] DROP CONSTRAINT [FK_Model_InventorySerial_IDModel];


GO
PRINT N'Dropping FK_Model_PreInventMov_ModelID...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [FK_Model_PreInventMov_ModelID];


GO
PRINT N'Dropping FK_Model_ModelPriceLog_IDModel...';


GO
ALTER TABLE [dbo].[ModelPriceLog] DROP CONSTRAINT [FK_Model_ModelPriceLog_IDModel];


GO
PRINT N'Dropping FK_Model_SalRebateItem_IDModel...';


GO
ALTER TABLE [dbo].[Sal_RebateItem] DROP CONSTRAINT [FK_Model_SalRebateItem_IDModel];


GO
PRINT N'Dropping FK_Model_InvTechFeatures_IDModel...';


GO
ALTER TABLE [dbo].[InvTechFeatures] DROP CONSTRAINT [FK_Model_InvTechFeatures_IDModel];


GO
PRINT N'Dropping FK_Model_InvModelPrice_IDModel...';


GO
ALTER TABLE [dbo].[Inv_ModelPrice] DROP CONSTRAINT [FK_Model_InvModelPrice_IDModel];


GO
PRINT N'Dropping FK_Inv_NCM_Model_IDNCM...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [FK_Inv_NCM_Model_IDNCM];


GO
PRINT N'Dropping FK_ModelGroup_Model_IDModelGroup...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [FK_ModelGroup_Model_IDModelGroup];


GO
PRINT N'Dropping FK_ModelSubGroup_Model_IDModelSubGroup...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [FK_ModelSubGroup_Model_IDModelSubGroup];


GO
PRINT N'Dropping FK_InvColor_Model_IDColor...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [FK_InvColor_Model_IDColor];


GO
PRINT N'Dropping FK_InvSize_Model_IDSize...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [FK_InvSize_Model_IDSize];


GO
PRINT N'Dropping FK_MntCFOP_Model_IDCFOP...';


GO
ALTER TABLE [dbo].[Model] DROP CONSTRAINT [FK_MntCFOP_Model_IDCFOP];


GO
PRINT N'Dropping FK_Model_InvStorePrice_IDModel...';


GO
ALTER TABLE [dbo].[Inv_StorePrice] DROP CONSTRAINT [FK_Model_InvStorePrice_IDModel];


GO
PRINT N'Dropping FK_Model_SalPromoItem_IDModel...';


GO
ALTER TABLE [dbo].[Sal_PromoItem] DROP CONSTRAINT [FK_Model_SalPromoItem_IDModel];


GO
PRINT N'Dropping FK_Model_SalPromoPrizeItem_IDModel...';


GO
ALTER TABLE [dbo].[Sal_PromoPrizeItem] DROP CONSTRAINT [FK_Model_SalPromoPrizeItem_IDModel];


GO
PRINT N'Dropping FK_Model_Ser_SOItemProduct_IDModel...';


GO
ALTER TABLE [dbo].[Ser_SOItemProduct] DROP CONSTRAINT [FK_Model_Ser_SOItemProduct_IDModel];


GO
PRINT N'Dropping PK_InvModelStateTax_Model_IDModel...';


GO
ALTER TABLE [dbo].[Inv_ModelStateTax] DROP CONSTRAINT [PK_InvModelStateTax_Model_IDModel];


GO
PRINT N'Dropping FK_Model_PurchaseItem_IDModel...';


GO
ALTER TABLE [dbo].[Pur_PurchaseItem] DROP CONSTRAINT [FK_Model_PurchaseItem_IDModel];


GO
PRINT N'Dropping FK_Model_IDModel_Pet_IDModel...';


GO
ALTER TABLE [dbo].[Pet] DROP CONSTRAINT [FK_Model_IDModel_Pet_IDModel];


GO
PRINT N'Dropping FK_Model_Barcode_IDModel...';


GO
ALTER TABLE [dbo].[Barcode] DROP CONSTRAINT [FK_Model_Barcode_IDModel];


GO
PRINT N'Dropping FK_Model_ServiceRange_IDModel...';


GO
ALTER TABLE [dbo].[ServiceRange] DROP CONSTRAINT [FK_Model_ServiceRange_IDModel];


GO
PRINT N'Dropping FK_Model_GroupCostGift_IDModel...';


GO
ALTER TABLE [dbo].[GroupCostGift] DROP CONSTRAINT [FK_Model_GroupCostGift_IDModel];


GO
PRINT N'Dropping FK_Model_PurchaseQtyOrder_IDModel...';


GO
ALTER TABLE [dbo].[Pur_PurchaseQtyOrder] DROP CONSTRAINT [FK_Model_PurchaseQtyOrder_IDModel];


GO
PRINT N'Dropping FK_Model_Inv_Lot_IDModel...';


GO
ALTER TABLE [dbo].[Inv_Lot] DROP CONSTRAINT [FK_Model_Inv_Lot_IDModel];


GO
PRINT N'Dropping FK_Model_PurchaseQtyPrePurchase_IDModel...';


GO
ALTER TABLE [dbo].[Pur_PurchaseQtyPrePurchase] DROP CONSTRAINT [FK_Model_PurchaseQtyPrePurchase_IDModel];


GO
PRINT N'Dropping FK_Model_Inv_ModelNutrition_IDModel...';


GO
ALTER TABLE [dbo].[Inv_ModelNutrition] DROP CONSTRAINT [FK_Model_Inv_ModelNutrition_IDModel];


GO
PRINT N'Dropping FK_Model_Inv_StoreModelLot_IDModel...';


GO
ALTER TABLE [dbo].[Inv_StoreModelLot] DROP CONSTRAINT [FK_Model_Inv_StoreModelLot_IDModel];


GO
PRINT N'Dropping FK_Model_InvModelStoreBalance_IDModel...';


GO
ALTER TABLE [dbo].[Inv_ModelStoreBalance] DROP CONSTRAINT [FK_Model_InvModelStoreBalance_IDModel];


GO
PRINT N'Dropping FK_Model_IDModel_Pet_Microchip_IDModel...';


GO
ALTER TABLE [dbo].[Pet_Microchip] DROP CONSTRAINT [FK_Model_IDModel_Pet_Microchip_IDModel];


GO
PRINT N'Dropping FK_Model_ModelTransfDet_IDModel...';


GO
ALTER TABLE [dbo].[ModelTransfDet] DROP CONSTRAINT [FK_Model_ModelTransfDet_IDModel];


GO
PRINT N'Dropping PT_GlobalSet_Model_FK...';


GO
ALTER TABLE [dbo].[PT_GlobalSettingDetail] DROP CONSTRAINT [PT_GlobalSet_Model_FK];


GO
PRINT N'Dropping FK_Model_CotacaoResult_IDModel...';


GO
ALTER TABLE [dbo].[CotacaoResult] DROP CONSTRAINT [FK_Model_CotacaoResult_IDModel];


GO
PRINT N'Dropping FK_Model_InvAccessory_IDInvAccessory...';


GO
ALTER TABLE [dbo].[InvAccessory] DROP CONSTRAINT [FK_Model_InvAccessory_IDInvAccessory];


GO
PRINT N'Dropping FK_Model_InvAccessory_IDModel...';


GO
ALTER TABLE [dbo].[InvAccessory] DROP CONSTRAINT [FK_Model_InvAccessory_IDModel];


GO
PRINT N'Dropping FK_Model_Repair_IDModel...';


GO
ALTER TABLE [dbo].[Repair] DROP CONSTRAINT [FK_Model_Repair_IDModel];


GO
PRINT N'Dropping FK_Model_CotacaoToModel_IDModel...';


GO
ALTER TABLE [dbo].[CotacaoToModel] DROP CONSTRAINT [FK_Model_CotacaoToModel_IDModel];


GO
PRINT N'Dropping FK_Model_InvFroze_IDModel...';


GO
ALTER TABLE [dbo].[Inv_FrozeCount] DROP CONSTRAINT [FK_Model_InvFroze_IDModel];


GO
PRINT N'Dropping FK_Model_VendorCode_IDModel...';


GO
ALTER TABLE [dbo].[VendorModelCode] DROP CONSTRAINT [FK_Model_VendorCode_IDModel];


GO
PRINT N'Dropping FK_TagModel_IDModel...';


GO
ALTER TABLE [dbo].[TagModel] DROP CONSTRAINT [FK_TagModel_IDModel];


GO
PRINT N'Dropping FK_Model_KitModel_IDModel...';


GO
ALTER TABLE [dbo].[KitModel] DROP CONSTRAINT [FK_Model_KitModel_IDModel];


GO
PRINT N'Dropping FK_PreInventoryMov_InvMovDocument_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[Inv_MovDocument] DROP CONSTRAINT [FK_PreInventoryMov_InvMovDocument_IDPreInventoryMov];


GO
PRINT N'Dropping FK_PreInventoryMov_Request_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[Request] DROP CONSTRAINT [FK_PreInventoryMov_Request_IDPreInventoryMov];


GO
PRINT N'Dropping FK_PreInventoryMov_POItemRequest_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[POItemRequest] DROP CONSTRAINT [FK_PreInventoryMov_POItemRequest_IDPreInventoryMov];


GO
PRINT N'Dropping FK_InvDepartment_PreInventoryMov_IDDepartment...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [FK_InvDepartment_PreInventoryMov_IDDepartment];


GO
PRINT N'Dropping FK_TaxCategory_PreInventMov_IDTaxCategory...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [FK_TaxCategory_PreInventMov_IDTaxCategory];


GO
PRINT N'Dropping FK_InventoryMovType_PreInventoryMov_InventMovTypeID...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [FK_InventoryMovType_PreInventoryMov_InventMovTypeID];


GO
PRINT N'Dropping FK_Pessoa_PreInventoryMov_IDPessoa...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [FK_Pessoa_PreInventoryMov_IDPessoa];


GO
PRINT N'Dropping FK_PreInventoryMov_PreInventoryMov_IDPreInventoryMovParent...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [FK_PreInventoryMov_PreInventoryMov_IDPreInventoryMovParent];


GO
PRINT N'Dropping FK_Cotacao_PreInventoryMov_IDCotacao...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [FK_Cotacao_PreInventoryMov_IDCotacao];


GO
PRINT N'Dropping FK_Store_PreInventoryMov_StoreID...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [FK_Store_PreInventoryMov_StoreID];


GO
PRINT N'Dropping FK_SystemUser_PreInvnetoryMov_UserID...';


GO
ALTER TABLE [dbo].[PreInventoryMov] DROP CONSTRAINT [FK_SystemUser_PreInvnetoryMov_UserID];


GO
PRINT N'Dropping FK_PreInventoryMov_SaleItemCommission_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[SaleItemCommission] DROP CONSTRAINT [FK_PreInventoryMov_SaleItemCommission_IDPreInventoryMov];


GO
PRINT N'Dropping FK_PreInventoryMov_InvMovPrice_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[Inv_MovPrice] DROP CONSTRAINT [FK_PreInventoryMov_InvMovPrice_IDPreInventoryMov];


GO
PRINT N'Dropping FK_ManualDiscount_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[ManualDiscount] DROP CONSTRAINT [FK_ManualDiscount_IDPreInventoryMov];


GO
PRINT N'Dropping FK_ManualPrice_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[ManualPrice] DROP CONSTRAINT [FK_ManualPrice_IDPreInventoryMov];


GO
PRINT N'Dropping FK_PIMAppliedCoupons_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[PIMAppliedCoupons] DROP CONSTRAINT [FK_PIMAppliedCoupons_IDPreInventoryMov];


GO
PRINT N'Starting rebuilding table [dbo].[CashRegister]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

CREATE TABLE [dbo].[tmp_ms_xx_CashRegister] (
    [IDCashRegister] INT          NOT NULL,
    [Name]           VARCHAR (15) NOT NULL,
    [IsAssociated]   BIT          CONSTRAINT [DF_Zero69] DEFAULT (0) NULL,
    [Desativado]     BIT          CONSTRAINT [DF_Zero70] DEFAULT (0) NULL,
    [Hidden]         BIT          CONSTRAINT [DF_Zero71] DEFAULT (0) NULL,
    [System]         BIT          CONSTRAINT [DF_Zero72] DEFAULT (0) NULL,
    [IsOpen]         BIT          DEFAULT (NULL) NULL,
    [ReplLastChange] DATETIME     NULL
);

ALTER TABLE [dbo].[tmp_ms_xx_CashRegister]
    ADD CONSTRAINT [tmp_ms_xx_clusteredindex_PK_CashRegister_IDCashRegister] PRIMARY KEY CLUSTERED ([IDCashRegister] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);

IF EXISTS (SELECT TOP 1 1
           FROM   [dbo].[CashRegister])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_CashRegister] ([IDCashRegister], [Name], [IsAssociated], [Desativado], [Hidden], [System], [ReplLastChange], [IsOpen])
        SELECT   [IDCashRegister],
                 [Name],
                 [IsAssociated],
                 [Desativado],
                 [Hidden],
                 [System],
                 [ReplLastChange],
                 [IsOpen]
        FROM     [dbo].[CashRegister]
        ORDER BY [IDCashRegister] ASC;
    END

DROP TABLE [dbo].[CashRegister];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_CashRegister]', N'CashRegister';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_clusteredindex_PK_CashRegister_IDCashRegister]', N'PK_CashRegister_IDCashRegister', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[CashRegister].[PI_CashRegister_Name]...';


GO
CREATE NONCLUSTERED INDEX [PI_CashRegister_Name]
    ON [dbo].[CashRegister]([Name] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[CashRegister].[PI_CashRegister_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_CashRegister_ReplLastChange]
    ON [dbo].[CashRegister]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Altering [dbo].[Inv_BarcodePrintSearch]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TABLE [dbo].[Inv_BarcodePrintSearch] ALTER COLUMN [ReplLastChange] DATETIME NULL;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[Inv_BarcodePrintSearch].[PI_Inv_BarcodePrintSearch_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_BarcodePrintSearch_ReplLastChange]
    ON [dbo].[Inv_BarcodePrintSearch]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Starting rebuilding table [dbo].[Inv_ModelVendor]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

CREATE TABLE [dbo].[tmp_ms_xx_Inv_ModelVendor] (
    [IDPessoa]       INT             NOT NULL,
    [IDModel]        INT             NOT NULL,
    [VendorOrder]    INT             NOT NULL,
    [MinQtyPO]       FLOAT           CONSTRAINT [DF_InvModelVendor_MinQtyPO_Zero] DEFAULT (0) NOT NULL,
    [CaseQty]        DECIMAL (38, 4) CONSTRAINT [DF_InvModelVendor_CaseQty_Zero] DEFAULT (0) NULL,
    [VendorCost]     MONEY           NULL,
    [CostLastChange] DATETIME        NULL,
    [DoNotOrder]     BIT             CONSTRAINT [DF_Inv_ModelVendor_DoNotOrder] DEFAULT ((0)) NOT NULL,
    [ReplLastChange] DATETIME        NULL
);

ALTER TABLE [dbo].[tmp_ms_xx_Inv_ModelVendor]
    ADD CONSTRAINT [tmp_ms_xx_clusteredindex_XPKInv_ModelVendor] PRIMARY KEY CLUSTERED ([IDPessoa] ASC, [IDModel] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);

IF EXISTS (SELECT TOP 1 1
           FROM   [dbo].[Inv_ModelVendor])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Inv_ModelVendor] ([IDPessoa], [IDModel], [VendorOrder], [MinQtyPO], [CaseQty], [VendorCost], [CostLastChange], [ReplLastChange], [DoNotOrder])
        SELECT   [IDPessoa],
                 [IDModel],
                 [VendorOrder],
                 [MinQtyPO],
                 [CaseQty],
                 [VendorCost],
                 [CostLastChange],
                 [ReplLastChange],
                 [DoNotOrder]
        FROM     [dbo].[Inv_ModelVendor]
        ORDER BY [IDPessoa] ASC, [IDModel] ASC;
    END

DROP TABLE [dbo].[Inv_ModelVendor];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Inv_ModelVendor]', N'Inv_ModelVendor';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_clusteredindex_XPKInv_ModelVendor]', N'XPKInv_ModelVendor', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[Inv_ModelVendor].[PI_Inv_ModelVendor_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_ModelVendor_ReplLastChange]
    ON [dbo].[Inv_ModelVendor]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_ModelVendor].[XIF2Inv_ModelVendor]...';


GO
CREATE NONCLUSTERED INDEX [XIF2Inv_ModelVendor]
    ON [dbo].[Inv_ModelVendor]([IDPessoa] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_ModelVendor].[XIF3Inv_ModelVendor]...';


GO
CREATE NONCLUSTERED INDEX [XIF3Inv_ModelVendor]
    ON [dbo].[Inv_ModelVendor]([IDModel] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Starting rebuilding table [dbo].[InventoryMov]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

CREATE TABLE [dbo].[tmp_ms_xx_InventoryMov] (
    [IDInventoryMov]      INT              NOT NULL,
    [IDRepair]            INT              NULL,
    [StoreID]             INT              NOT NULL,
    [ModelID]             INT              NOT NULL,
    [InventMovTypeID]     INT              NOT NULL,
    [IDPessoa]            INT              NULL,
    [IDAgrupaPag]         INT              NULL,
    [IDTemp]              INT              NULL,
    [IDLancPagCom]        INT              NULL,
    [DocumentID]          INT              NOT NULL,
    [IDUser]              INT              NULL,
    [BarCodeID]           [dbo].[TBarCode] NULL,
    [PreInventoryMovID]   INT              NULL,
    [MovDate]             SMALLDATETIME    NOT NULL,
    [CostPrice]           MONEY            CONSTRAINT [DF_Zero115] DEFAULT (0) NULL,
    [SalePrice]           MONEY            CONSTRAINT [DF_Zero116] DEFAULT (0) NULL,
    [Discount]            MONEY            CONSTRAINT [DF_Zero117] DEFAULT (0) NULL,
    [Freight]             MONEY            CONSTRAINT [DF_Zero118] DEFAULT (0) NULL,
    [OtherCost]           MONEY            CONSTRAINT [DF_Zero119] DEFAULT (0) NULL,
    [ExchangeInvoice]     INT              NULL,
    [SalesTax]            MONEY            NULL,
    [IDParentPack]        INT              NULL,
    [IDModelService]      INT              NULL,
    [IDPreInvMovExchange] INT              NULL,
    [AvgCost]             MONEY            NULL,
    [DesiredMarkup]       MONEY            NULL,
    [SequencyNum]         INT              NULL,
    [Promo]               BIT              CONSTRAINT [DF_Zero2519] DEFAULT (0) NULL,
    [IDDepartment]        INT              CONSTRAINT [DF_InventoryMov_IDDepartment_Zero] DEFAULT (0) NOT NULL,
    [QTY]                 DECIMAL (38, 4)  NULL,
    [QtyExchanged]        DECIMAL (38, 4)  NULL,
    [UnitDiscount]        MONEY            NULL,
    [ReplLastChange]      DATETIME         NULL
);

CREATE CLUSTERED INDEX [tmp_ms_xx_clusteredindex_PI_InventoryMov_InventMovType]
    ON [dbo].[tmp_ms_xx_InventoryMov]([InventMovTypeID] ASC, [DocumentID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0);

IF EXISTS (SELECT TOP 1 1
           FROM   [dbo].[InventoryMov])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_InventoryMov] ([InventMovTypeID], [DocumentID], [IDInventoryMov], [IDRepair], [StoreID], [ModelID], [IDPessoa], [IDAgrupaPag], [IDTemp], [IDLancPagCom], [IDUser], [BarCodeID], [PreInventoryMovID], [MovDate], [CostPrice], [SalePrice], [Discount], [Freight], [OtherCost], [ExchangeInvoice], [SalesTax], [IDParentPack], [IDModelService], [IDPreInvMovExchange], [AvgCost], [DesiredMarkup], [SequencyNum], [Promo], [IDDepartment], [QTY], [QtyExchanged], [ReplLastChange], [UnitDiscount])
        SELECT   [InventMovTypeID],
                 [DocumentID],
                 [IDInventoryMov],
                 [IDRepair],
                 [StoreID],
                 [ModelID],
                 [IDPessoa],
                 [IDAgrupaPag],
                 [IDTemp],
                 [IDLancPagCom],
                 [IDUser],
                 [BarCodeID],
                 [PreInventoryMovID],
                 [MovDate],
                 [CostPrice],
                 [SalePrice],
                 [Discount],
                 [Freight],
                 [OtherCost],
                 [ExchangeInvoice],
                 [SalesTax],
                 [IDParentPack],
                 [IDModelService],
                 [IDPreInvMovExchange],
                 [AvgCost],
                 [DesiredMarkup],
                 [SequencyNum],
                 [Promo],
                 [IDDepartment],
                 [QTY],
                 [QtyExchanged],
                 [ReplLastChange],
                 [UnitDiscount]
        FROM     [dbo].[InventoryMov]
        ORDER BY [InventMovTypeID] ASC, [DocumentID] ASC;
    END

DROP TABLE [dbo].[InventoryMov];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_InventoryMov]', N'InventoryMov';

EXECUTE sp_rename N'[dbo].[InventoryMov].[tmp_ms_xx_clusteredindex_PI_InventoryMov_InventMovType]', N'PI_InventoryMov_InventMovType', N'INDEX';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating PK_InventoryMov_IDInventoryMov...';


GO
ALTER TABLE [dbo].[InventoryMov]
    ADD CONSTRAINT [PK_InventoryMov_IDInventoryMov] PRIMARY KEY NONCLUSTERED ([IDInventoryMov] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[InventoryMov].[PI_InventMov_ModelID]...';


GO
CREATE NONCLUSTERED INDEX [PI_InventMov_ModelID]
    ON [dbo].[InventoryMov]([ModelID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[InventoryMov].[PI_InventoryMov_DocumentID]...';


GO
CREATE NONCLUSTERED INDEX [PI_InventoryMov_DocumentID]
    ON [dbo].[InventoryMov]([DocumentID] ASC)
    INCLUDE([ModelID], [SalePrice], [Discount], [QTY]) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[InventoryMov].[PI_InventoryMov_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_InventoryMov_ReplLastChange]
    ON [dbo].[InventoryMov]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[InventoryMov].[PI_InvMov_IDPreInvMov]...';


GO
CREATE NONCLUSTERED INDEX [PI_InvMov_IDPreInvMov]
    ON [dbo].[InventoryMov]([PreInventoryMovID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[InventoryMov].[PI_MovInvent_Date]...';


GO
CREATE NONCLUSTERED INDEX [PI_MovInvent_Date]
    ON [dbo].[InventoryMov]([MovDate] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[InventoryMov].[XIF107InventoryMov]...';


GO
CREATE NONCLUSTERED INDEX [XIF107InventoryMov]
    ON [dbo].[InventoryMov]([IDPessoa] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[InventoryMov].[XIF385InventoryMov]...';


GO
CREATE NONCLUSTERED INDEX [XIF385InventoryMov]
    ON [dbo].[InventoryMov]([StoreID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[InventoryMov].[XIF412InventoryMov]...';


GO
CREATE NONCLUSTERED INDEX [XIF412InventoryMov]
    ON [dbo].[InventoryMov]([IDUser] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[InventoryMov].[XIF445InventoryMov]...';


GO
CREATE NONCLUSTERED INDEX [XIF445InventoryMov]
    ON [dbo].[InventoryMov]([IDRepair] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Starting rebuilding table [dbo].[Invoice]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

CREATE TABLE [dbo].[tmp_ms_xx_Invoice] (
    [IDPreSale]             INT           NOT NULL,
    [CashRegMovID]          INT           NULL,
    [SpecialPriceID]        INT           NULL,
    [IDMeioPag]             INT           NULL,
    [IDTouristGroup]        INT           NULL,
    [DeliverTypeID]         INT           NULL,
    [MediaID]               INT           NULL,
    [IDCustomer]            INT           NOT NULL,
    [IDStore]               INT           NULL,
    [IDInvoice]             INT           NULL,
    [OtherComissionID]      INT           NULL,
    [IDLancPagOtherCom]     INT           NULL,
    [PreSaleDate]           SMALLDATETIME NOT NULL,
    [InvoiceDate]           SMALLDATETIME NULL,
    [DeliverDate]           SMALLDATETIME NULL,
    [DeliverAddress]        VARCHAR (100) NULL,
    [Passport]              VARCHAR (20)  NULL,
    [PassportDate]          SMALLDATETIME NULL,
    [Ticket]                VARCHAR (20)  NULL,
    [AirLine]               VARCHAR (40)  NULL,
    [CompanyName]           VARCHAR (40)  NULL,
    [CompanyCGC]            VARCHAR (20)  NULL,
    [DepositDate]           SMALLDATETIME NULL,
    [Tax]                   MONEY         NULL,
    [SubTotal]              MONEY         CONSTRAINT [DF_Zero101] DEFAULT (0) NULL,
    [Note]                  VARCHAR (150) NULL,
    [ItemDiscount]          MONEY         CONSTRAINT [DF_Zero102] DEFAULT (0) NULL,
    [TaxIsent]              BIT           CONSTRAINT [DF_Zero103] DEFAULT (0) NULL,
    [nOpenUser]             INT           CONSTRAINT [DF_Zero104] DEFAULT (0) NULL,
    [RefreshInvoice]        TIMESTAMP     NULL,
    [Printed]               BIT           CONSTRAINT [DF_Zero105] DEFAULT (0) NULL,
    [CashReceived]          MONEY         CONSTRAINT [DF_Zero106] DEFAULT (0) NULL,
    [EstimatedPay]          SMALLDATETIME NULL,
    [CardNumber]            VARCHAR (30)  NULL,
    [OtherExpences]         MONEY         NULL,
    [Address]               VARCHAR (200) NULL,
    [TaxIsemptValue]        MONEY         CONSTRAINT [DF_Zero107] DEFAULT (0) NULL,
    [TaxIsemptItemDiscount] MONEY         NULL,
    [Layaway]               [dbo].[TBit]  NULL,
    [FirstName]             VARCHAR (20)  NULL,
    [LastName]              VARCHAR (20)  NULL,
    [ZIP]                   VARCHAR (20)  NULL,
    [nOpenHoldCaixa]        INT           CONSTRAINT [DF_Zero108] DEFAULT (0) NULL,
    [PrintNotes]            BIT           NULL,
    [DeliverOBS]            VARCHAR (255) NULL,
    [DeliverConfirmation]   [dbo].[TBit]  DEFAULT (0) NULL,
    [IDFormOfPayment]       INT           NULL,
    [AditionalExpenses]     MONEY         CONSTRAINT [DF_ZeroAdExp] DEFAULT (0) NULL,
    [Canceled]              BIT           DEFAULT (0) NOT NULL,
    [IDPreSaleParent]       INT           NULL,
    [SaleCode]              VARCHAR (20)  NULL,
    [InvoiceCode]           VARCHAR (20)  NULL,
    [CupomFiscal]           VARCHAR (8)   NULL,
    [PuppyTracker]          BIT           NULL,
    [NumeroSeriePrinter]    VARCHAR (20)  NULL,
    [InvoiceDiscount]       MONEY         DEFAULT (0) NULL,
    [ReplLastChange]        DATETIME      NULL,
    [TotalDiscount]         AS            ([InvoiceDiscount] + [ItemDiscount])
);

ALTER TABLE [dbo].[tmp_ms_xx_Invoice]
    ADD CONSTRAINT [tmp_ms_xx_clusteredindex_PK__Invoice__43D61337] PRIMARY KEY CLUSTERED ([IDPreSale] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);

IF EXISTS (SELECT TOP 1 1
           FROM   [dbo].[Invoice])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Invoice] ([IDPreSale], [CashRegMovID], [SpecialPriceID], [IDMeioPag], [IDTouristGroup], [DeliverTypeID], [MediaID], [IDCustomer], [IDStore], [IDInvoice], [OtherComissionID], [IDLancPagOtherCom], [PreSaleDate], [InvoiceDate], [DeliverDate], [DeliverAddress], [Passport], [PassportDate], [Ticket], [AirLine], [CompanyName], [CompanyCGC], [DepositDate], [Tax], [SubTotal], [Note], [ItemDiscount], [TaxIsent], [nOpenUser], [Printed], [CashReceived], [EstimatedPay], [CardNumber], [OtherExpences], [Address], [TaxIsemptValue], [TaxIsemptItemDiscount], [Layaway], [FirstName], [LastName], [ZIP], [nOpenHoldCaixa], [PrintNotes], [DeliverOBS], [DeliverConfirmation], [IDFormOfPayment], [AditionalExpenses], [Canceled], [IDPreSaleParent], [SaleCode], [InvoiceCode], [CupomFiscal], [PuppyTracker], [NumeroSeriePrinter], [InvoiceDiscount], [ReplLastChange])
        SELECT   [IDPreSale],
                 [CashRegMovID],
                 [SpecialPriceID],
                 [IDMeioPag],
                 [IDTouristGroup],
                 [DeliverTypeID],
                 [MediaID],
                 [IDCustomer],
                 [IDStore],
                 [IDInvoice],
                 [OtherComissionID],
                 [IDLancPagOtherCom],
                 [PreSaleDate],
                 [InvoiceDate],
                 [DeliverDate],
                 [DeliverAddress],
                 [Passport],
                 [PassportDate],
                 [Ticket],
                 [AirLine],
                 [CompanyName],
                 [CompanyCGC],
                 [DepositDate],
                 [Tax],
                 [SubTotal],
                 [Note],
                 [ItemDiscount],
                 [TaxIsent],
                 [nOpenUser],
                 [Printed],
                 [CashReceived],
                 [EstimatedPay],
                 [CardNumber],
                 [OtherExpences],
                 [Address],
                 [TaxIsemptValue],
                 [TaxIsemptItemDiscount],
                 [Layaway],
                 [FirstName],
                 [LastName],
                 [ZIP],
                 [nOpenHoldCaixa],
                 [PrintNotes],
                 [DeliverOBS],
                 [DeliverConfirmation],
                 [IDFormOfPayment],
                 [AditionalExpenses],
                 [Canceled],
                 [IDPreSaleParent],
                 [SaleCode],
                 [InvoiceCode],
                 [CupomFiscal],
                 [PuppyTracker],
                 [NumeroSeriePrinter],
                 [InvoiceDiscount],
                 [ReplLastChange]
        FROM     [dbo].[Invoice]
        ORDER BY [IDPreSale] ASC;
    END

DROP TABLE [dbo].[Invoice];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Invoice]', N'Invoice';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_clusteredindex_PK__Invoice__43D61337]', N'PK__Invoice__43D61337', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[Invoice].[IDX_Invoice_SaleCode]...';


GO
CREATE NONCLUSTERED INDEX [IDX_Invoice_SaleCode]
    ON [dbo].[Invoice]([SaleCode] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Invoice].[PI_Invoice_CashRegMovID]...';


GO
CREATE NONCLUSTERED INDEX [PI_Invoice_CashRegMovID]
    ON [dbo].[Invoice]([CashRegMovID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Invoice].[PI_Invoice_IDInvoice]...';


GO
CREATE NONCLUSTERED INDEX [PI_Invoice_IDInvoice]
    ON [dbo].[Invoice]([IDInvoice] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Invoice].[PI_Invoice_IDPreSaleParent]...';


GO
CREATE NONCLUSTERED INDEX [PI_Invoice_IDPreSaleParent]
    ON [dbo].[Invoice]([IDPreSaleParent] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Invoice].[PI_Invoice_IDTouristGroup]...';


GO
CREATE NONCLUSTERED INDEX [PI_Invoice_IDTouristGroup]
    ON [dbo].[Invoice]([IDTouristGroup] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Invoice].[PI_Invoice_InvoiceDate]...';


GO
CREATE NONCLUSTERED INDEX [PI_Invoice_InvoiceDate]
    ON [dbo].[Invoice]([InvoiceDate] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Invoice].[PI_invoice_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_invoice_ReplLastChange]
    ON [dbo].[Invoice]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Invoice].[XIF232Invoice]...';


GO
CREATE NONCLUSTERED INDEX [XIF232Invoice]
    ON [dbo].[Invoice]([IDMeioPag] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Invoice].[XIF233Invoice]...';


GO
CREATE NONCLUSTERED INDEX [XIF233Invoice]
    ON [dbo].[Invoice]([IDCustomer] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Invoice].[XIF388Invoice]...';


GO
CREATE NONCLUSTERED INDEX [XIF388Invoice]
    ON [dbo].[Invoice]([SpecialPriceID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Invoice].[XIF390Invoice]...';


GO
CREATE NONCLUSTERED INDEX [XIF390Invoice]
    ON [dbo].[Invoice]([DeliverTypeID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Invoice].[XIF391Invoice]...';


GO
CREATE NONCLUSTERED INDEX [XIF391Invoice]
    ON [dbo].[Invoice]([IDStore] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Invoice].[XIF392Invoice]...';


GO
CREATE NONCLUSTERED INDEX [XIF392Invoice]
    ON [dbo].[Invoice]([MediaID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Starting rebuilding table [dbo].[Model]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

CREATE TABLE [dbo].[tmp_ms_xx_Model] (
    [IDModel]                INT             NOT NULL,
    [GroupID]                INT             NOT NULL,
    [IDUnidade]              INT             NULL,
    [IDFabricante]           INT             NULL,
    [IDSize]                 INT             NULL,
    [IDColor]                INT             NULL,
    [IDModelParent]          INT             NULL,
    [Model]                  VARCHAR (30)    NOT NULL,
    [Description]            VARCHAR (50)    NOT NULL,
    [VendorCost]             MONEY           CONSTRAINT [DF_Zero45] DEFAULT (0) NULL,
    [FreightCost]            MONEY           CONSTRAINT [DF_Zero46] DEFAULT (0) NULL,
    [OtherCost]              MONEY           CONSTRAINT [DF_Zero47] DEFAULT (0) NULL,
    [MarkUp]                 MONEY           CONSTRAINT [DF_Zero48] DEFAULT (0) NULL,
    [SellingPrice]           MONEY           CONSTRAINT [DF_Zero49] DEFAULT (0) NULL,
    [LastCost]               MONEY           CONSTRAINT [DF_Zero50] DEFAULT (0) NULL,
    [DateLastCost]           SMALLDATETIME   NULL,
    [DateLastSellingPrice]   SMALLDATETIME   NULL,
    [LastMovDate]            DATETIME        NULL,
    [Peso]                   MONEY           NULL,
    [Avaiable]               MONEY           NULL,
    [SuggRetail]             MONEY           NULL,
    [PVD]                    MONEY           NULL,
    [DP]                     MONEY           NULL,
    [ES]                     MONEY           NULL,
    [PP]                     MONEY           NULL,
    [InicioPontoPedido]      DATETIME        NULL,
    [ClasseABC]              CHAR (1)        CONSTRAINT [DF__Model__ClasseABC] DEFAULT ('C') NULL,
    [AutomaticRequest]       BIT             CONSTRAINT [DF_Model_AutomaticRequest001] DEFAULT (1) NULL,
    [TR]                     INT             CONSTRAINT [DF__Model__TR] DEFAULT (3) NULL,
    [ModelType]              CHAR (1)        CONSTRAINT [DEF_R] DEFAULT ('R') NULL,
    [CustomSalePrice]        BIT             CONSTRAINT [DF_Zero52] DEFAULT (0) NULL,
    [CustomCostPrice]        BIT             CONSTRAINT [DF_Zero53] DEFAULT (0) NULL,
    [CustomSpecialPrice]     BIT             CONSTRAINT [DF_Zero54] DEFAULT (0) NULL,
    [CustomPromotion]        BIT             CONSTRAINT [DF_Zero55] DEFAULT (0) NULL,
    [AvgCost]                MONEY           NULL,
    [System]                 BIT             CONSTRAINT [DF_Zero56] DEFAULT (0) NULL,
    [Hidden]                 INT             CONSTRAINT [DF_Zero57] DEFAULT (0) NOT NULL,
    [Desativado]             INT             CONSTRAINT [DF_Zero58] DEFAULT (0) NOT NULL,
    [FinalCost]              AS              (isnull([VendorCost], 0) + isnull([FreightCost], 0) + isnull([OtherCost], 0)),
    [LargeImage]             VARCHAR (255)   NULL,
    [FloatPercent]           INT             DEFAULT (0) NULL,
    [LargeImage2]            VARCHAR (255)   NULL,
    [ReplacementCost]        MONEY           NULL,
    [NotVerifyQty]           BIT             CONSTRAINT [DF_Zero1008] DEFAULT (0) NULL,
    [PromotionPrice]         MONEY           NULL,
    [DiscountPerc]           FLOAT           NULL,
    [IDModelGroup]           INT             NULL,
    [IDModelSubGroup]        INT             NULL,
    [VD]                     FLOAT           NULL,
    [VP]                     FLOAT           NULL,
    [SX]                     FLOAT           NULL,
    [SX2]                    FLOAT           NULL,
    [Verify]                 [dbo].[Boolean] CONSTRAINT [DF_Model_Verify_Zero] DEFAULT (0) NOT NULL,
    [AvgCostTotal]           MONEY           CONSTRAINT [DF_Model_AvgCostTotal_Zero] DEFAULT (0) NOT NULL,
    [SendToTrash]            [dbo].[Boolean] CONSTRAINT [DF_Model_SendToTrash_Zero] DEFAULT (0) NOT NULL,
    [IDUserLastSellingPrice] INT             NULL,
    [AskUserOnSale]          [dbo].[Boolean] DEFAULT (0) NULL,
    [TotQtyOnHand]           DECIMAL (38, 4) CONSTRAINT [DF_ZERO51] DEFAULT (0) NULL,
    [TotQtyOnRepair]         DECIMAL (38, 4) NULL,
    [TotQtyOnPreSale]        DECIMAL (38, 4) NULL,
    [TotQtyOnPrePurchase]    DECIMAL (38, 4) NULL,
    [TotQtyOnOrder]          DECIMAL (38, 4) NULL,
    [CaseQty]                DECIMAL (38, 4) NULL,
    [UpdatePrice]            BIT             CONSTRAINT [DF_Zero3706] DEFAULT (0) NULL,
    [UseScale]               BIT             CONSTRAINT [DF_Zero3707] DEFAULT (0) NULL,
    [ScaleValidDay]          INT             NULL,
    [UseLot]                 BIT             CONSTRAINT [DF_Zero4083] DEFAULT (0) NULL,
    [IndicadorProducao]      CHAR (1)        NULL,
    [IndicadorAT]            CHAR (1)        NULL,
    [IDNCM]                  INT             NULL,
    [WebDescription]         VARCHAR (255)   NULL,
    [Portion]                VARCHAR (100)   NULL,
    [IDCFOP]                 INT             NULL,
    [ServiceMap]             VARCHAR (30)    DEFAULT (NULL) NULL,
    [RequireOnSale]          BIT             NULL,
    [ReplLastChange]         DATETIME        NULL,
    [NoUpdateCatalogs]       BIT             CONSTRAINT [DF__Model__NoUpdateCatalogs] DEFAULT ((0)) NOT NULL
);

ALTER TABLE [dbo].[tmp_ms_xx_Model]
    ADD CONSTRAINT [tmp_ms_xx_clusteredindex_PK__Model__6A30C649] PRIMARY KEY CLUSTERED ([IDModel] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);

IF EXISTS (SELECT TOP 1 1
           FROM   [dbo].[Model])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Model] ([IDModel], [GroupID], [IDUnidade], [IDFabricante], [IDSize], [IDColor], [IDModelParent], [Model], [Description], [VendorCost], [FreightCost], [OtherCost], [MarkUp], [SellingPrice], [LastCost], [DateLastCost], [DateLastSellingPrice], [LastMovDate], [Peso], [Avaiable], [SuggRetail], [PVD], [DP], [ES], [PP], [InicioPontoPedido], [ClasseABC], [AutomaticRequest], [TR], [ModelType], [CustomSalePrice], [CustomCostPrice], [CustomSpecialPrice], [CustomPromotion], [AvgCost], [System], [Hidden], [Desativado], [LargeImage], [FloatPercent], [LargeImage2], [ReplacementCost], [NotVerifyQty], [PromotionPrice], [DiscountPerc], [IDModelGroup], [IDModelSubGroup], [VD], [VP], [SX], [SX2], [Verify], [AvgCostTotal], [SendToTrash], [IDUserLastSellingPrice], [AskUserOnSale], [TotQtyOnHand], [TotQtyOnRepair], [TotQtyOnPreSale], [TotQtyOnPrePurchase], [TotQtyOnOrder], [CaseQty], [UpdatePrice], [UseScale], [ScaleValidDay], [UseLot], [IndicadorProducao], [IndicadorAT], [IDNCM], [WebDescription], [Portion], [IDCFOP], [ReplLastChange], [ServiceMap], [RequireOnSale], [NoUpdateCatalogs])
        SELECT   [IDModel],
                 [GroupID],
                 [IDUnidade],
                 [IDFabricante],
                 [IDSize],
                 [IDColor],
                 [IDModelParent],
                 [Model],
                 [Description],
                 [VendorCost],
                 [FreightCost],
                 [OtherCost],
                 [MarkUp],
                 [SellingPrice],
                 [LastCost],
                 [DateLastCost],
                 [DateLastSellingPrice],
                 [LastMovDate],
                 [Peso],
                 [Avaiable],
                 [SuggRetail],
                 [PVD],
                 [DP],
                 [ES],
                 [PP],
                 [InicioPontoPedido],
                 [ClasseABC],
                 [AutomaticRequest],
                 [TR],
                 [ModelType],
                 [CustomSalePrice],
                 [CustomCostPrice],
                 [CustomSpecialPrice],
                 [CustomPromotion],
                 [AvgCost],
                 [System],
                 [Hidden],
                 [Desativado],
                 [LargeImage],
                 [FloatPercent],
                 [LargeImage2],
                 [ReplacementCost],
                 [NotVerifyQty],
                 [PromotionPrice],
                 [DiscountPerc],
                 [IDModelGroup],
                 [IDModelSubGroup],
                 [VD],
                 [VP],
                 [SX],
                 [SX2],
                 [Verify],
                 [AvgCostTotal],
                 [SendToTrash],
                 [IDUserLastSellingPrice],
                 [AskUserOnSale],
                 [TotQtyOnHand],
                 [TotQtyOnRepair],
                 [TotQtyOnPreSale],
                 [TotQtyOnPrePurchase],
                 [TotQtyOnOrder],
                 [CaseQty],
                 [UpdatePrice],
                 [UseScale],
                 [ScaleValidDay],
                 [UseLot],
                 [IndicadorProducao],
                 [IndicadorAT],
                 [IDNCM],
                 [WebDescription],
                 [Portion],
                 [IDCFOP],
                 [ReplLastChange],
                 [ServiceMap],
                 [RequireOnSale],
                 [NoUpdateCatalogs]
        FROM     [dbo].[Model]
        ORDER BY [IDModel] ASC;
    END

DROP TABLE [dbo].[Model];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Model]', N'Model';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_clusteredindex_PK__Model__6A30C649]', N'PK__Model__6A30C649', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[Model].[IDX_Model_ModelType]...';


GO
CREATE NONCLUSTERED INDEX [IDX_Model_ModelType]
    ON [dbo].[Model]([ModelType] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Model].[LAST_DATE]...';


GO
CREATE NONCLUSTERED INDEX [LAST_DATE]
    ON [dbo].[Model]([DateLastCost] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Model].[PI_Model_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Model_ReplLastChange]
    ON [dbo].[Model]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Model].[XIE_Model_Combo]...';


GO
CREATE NONCLUSTERED INDEX [XIE_Model_Combo]
    ON [dbo].[Model]([Model] ASC, [Desativado] ASC, [Hidden] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Model].[XIF112Model]...';


GO
CREATE NONCLUSTERED INDEX [XIF112Model]
    ON [dbo].[Model]([IDFabricante] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Model].[XIF113Model]...';


GO
CREATE NONCLUSTERED INDEX [XIF113Model]
    ON [dbo].[Model]([IDUnidade] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Model].[XIF114Model]...';


GO
CREATE NONCLUSTERED INDEX [XIF114Model]
    ON [dbo].[Model]([GroupID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Model].[XIF393Model]...';


GO
CREATE NONCLUSTERED INDEX [XIF393Model]
    ON [dbo].[Model]([IDModelParent] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Model].[XIF417Model]...';


GO
CREATE NONCLUSTERED INDEX [XIF417Model]
    ON [dbo].[Model]([IDColor] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Model].[XIF418Model]...';


GO
CREATE NONCLUSTERED INDEX [XIF418Model]
    ON [dbo].[Model]([IDSize] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Starting rebuilding table [dbo].[PreInventoryMov]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

CREATE TABLE [dbo].[tmp_ms_xx_PreInventoryMov] (
    [IDPreInventoryMov]       INT              NOT NULL,
    [InventMovTypeID]         INT              NULL,
    [StoreID]                 INT              NULL,
    [ModelID]                 INT              NULL,
    [IDPessoa]                INT              NULL,
    [UserID]                  INT              NULL,
    [IDCotacao]               INT              NULL,
    [IDPreInventoryMovParent] INT              NULL,
    [BarCodeID]               [dbo].[TBarCode] NULL,
    [DocumentID]              INT              NOT NULL,
    [MovDate]                 SMALLDATETIME    NULL,
    [CostPrice]               MONEY            CONSTRAINT [DF_Zero128] DEFAULT (0) NULL,
    [SalePrice]               MONEY            CONSTRAINT [DF_Zero129] DEFAULT (0) NULL,
    [Discount]                MONEY            CONSTRAINT [DF_Zero130] DEFAULT (0) NULL,
    [DateEstimatedMov]        SMALLDATETIME    NULL,
    [DateRealMov]             SMALLDATETIME    NULL,
    [Marked]                  BIT              CONSTRAINT [DF_Zero132] DEFAULT (0) NULL,
    [ExchangeInvoice]         INT              NULL,
    [SuggRetail]              MONEY            CONSTRAINT [DF_Zero133] DEFAULT (0) NULL,
    [IDParentPack]            INT              NULL,
    [IDModelService]          INT              NULL,
    [IDPreInvMovExchange]     INT              NULL,
    [DesiredMarkup]           MONEY            NULL,
    [CaseCost]                MONEY            NULL,
    [Promo]                   BIT              CONSTRAINT [DF_Zero2512] DEFAULT (0) NULL,
    [IDDepartment]            INT              CONSTRAINT [DF_PreInventoryMov_IDDepartment_Zero] DEFAULT (0) NOT NULL,
    [IDTaxCategory]           INT              NULL,
    [Qty]                     DECIMAL (38, 4)  CONSTRAINT [DF_ZERO127] DEFAULT (0) NULL,
    [QtyRealMov]              DECIMAL (38, 4)  CONSTRAINT [DF_ZERO131] DEFAULT (0) NULL,
    [QtyExceeded]             DECIMAL (38, 4)  CONSTRAINT [DF_Zero1482] DEFAULT (0) NULL,
    [QtyExchanged]            DECIMAL (38, 4)  NULL,
    [CaseQty]                 DECIMAL (38, 4)  NULL,
    [SequencyNum]             INT              NULL,
    [TotParcial]              VARCHAR (10)     NULL,
    [DiscountPromo]           MONEY            DEFAULT ((0)) NULL,
    [UnitDiscount]            MONEY            NULL,
    [ReplLastChange]          DATETIME         NULL
);

CREATE CLUSTERED INDEX [tmp_ms_xx_clusteredindex_PI_PreInventMov_InventMovType]
    ON [dbo].[tmp_ms_xx_PreInventoryMov]([InventMovTypeID] ASC, [DocumentID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0);

IF EXISTS (SELECT TOP 1 1
           FROM   [dbo].[PreInventoryMov])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_PreInventoryMov] ([InventMovTypeID], [DocumentID], [IDPreInventoryMov], [StoreID], [ModelID], [IDPessoa], [UserID], [IDCotacao], [IDPreInventoryMovParent], [BarCodeID], [MovDate], [CostPrice], [SalePrice], [Discount], [DateEstimatedMov], [DateRealMov], [Marked], [ExchangeInvoice], [SuggRetail], [IDParentPack], [IDModelService], [IDPreInvMovExchange], [DesiredMarkup], [CaseCost], [Promo], [IDDepartment], [IDTaxCategory], [Qty], [QtyRealMov], [QtyExceeded], [QtyExchanged], [CaseQty], [SequencyNum], [TotParcial], [DiscountPromo], [ReplLastChange], [UnitDiscount])
        SELECT   [InventMovTypeID],
                 [DocumentID],
                 [IDPreInventoryMov],
                 [StoreID],
                 [ModelID],
                 [IDPessoa],
                 [UserID],
                 [IDCotacao],
                 [IDPreInventoryMovParent],
                 [BarCodeID],
                 [MovDate],
                 [CostPrice],
                 [SalePrice],
                 [Discount],
                 [DateEstimatedMov],
                 [DateRealMov],
                 [Marked],
                 [ExchangeInvoice],
                 [SuggRetail],
                 [IDParentPack],
                 [IDModelService],
                 [IDPreInvMovExchange],
                 [DesiredMarkup],
                 [CaseCost],
                 [Promo],
                 [IDDepartment],
                 [IDTaxCategory],
                 [Qty],
                 [QtyRealMov],
                 [QtyExceeded],
                 [QtyExchanged],
                 [CaseQty],
                 [SequencyNum],
                 [TotParcial],
                 [DiscountPromo],
                 [ReplLastChange],
                 [UnitDiscount]
        FROM     [dbo].[PreInventoryMov]
        ORDER BY [InventMovTypeID] ASC, [DocumentID] ASC;
    END

DROP TABLE [dbo].[PreInventoryMov];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_PreInventoryMov]', N'PreInventoryMov';

EXECUTE sp_rename N'[dbo].[PreInventoryMov].[tmp_ms_xx_clusteredindex_PI_PreInventMov_InventMovType]', N'PI_PreInventMov_InventMovType', N'INDEX';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating PK__PreInventoryMov__04AFB25B...';


GO
ALTER TABLE [dbo].[PreInventoryMov]
    ADD CONSTRAINT [PK__PreInventoryMov__04AFB25B] PRIMARY KEY NONCLUSTERED ([IDPreInventoryMov] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[idx_PreInventoryMov_1]...';


GO
CREATE NONCLUSTERED INDEX [idx_PreInventoryMov_1]
    ON [dbo].[PreInventoryMov]([IDPessoa] ASC, [IDPreInventoryMov] ASC, [DocumentID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[idx_PreInventoryMov_10]...';


GO
CREATE NONCLUSTERED INDEX [idx_PreInventoryMov_10]
    ON [dbo].[PreInventoryMov]([IDPreInventoryMov] ASC)
    INCLUDE([SalePrice]) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[idx_PreInventoryMov_11]...';


GO
CREATE NONCLUSTERED INDEX [idx_PreInventoryMov_11]
    ON [dbo].[PreInventoryMov]([DocumentID] ASC, [InventMovTypeID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[idx_PreInventoryMov_2]...';


GO
CREATE NONCLUSTERED INDEX [idx_PreInventoryMov_2]
    ON [dbo].[PreInventoryMov]([IDPessoa] ASC, [IDPreInventoryMov] ASC, [DocumentID] ASC, [ModelID] ASC, [InventMovTypeID] ASC)
    INCLUDE([Qty], [SalePrice]) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[idx_PreInventoryMov_3]...';


GO
CREATE NONCLUSTERED INDEX [idx_PreInventoryMov_3]
    ON [dbo].[PreInventoryMov]([DocumentID] ASC, [IDPessoa] ASC, [InventMovTypeID] ASC, [IDPreInventoryMov] ASC, [ModelID] ASC)
    INCLUDE([SalePrice], [Qty]) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[idx_PreInventoryMov_4]...';


GO
CREATE NONCLUSTERED INDEX [idx_PreInventoryMov_4]
    ON [dbo].[PreInventoryMov]([DocumentID] ASC, [IDPessoa] ASC, [IDPreInventoryMov] ASC, [ModelID] ASC, [InventMovTypeID] ASC)
    INCLUDE([SalePrice], [Qty]) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[idx_PreInventoryMov_5]...';


GO
CREATE NONCLUSTERED INDEX [idx_PreInventoryMov_5]
    ON [dbo].[PreInventoryMov]([IDPreInventoryMov] ASC, [DocumentID] ASC, [ModelID] ASC, [IDPessoa] ASC, [InventMovTypeID] ASC)
    INCLUDE([SalePrice], [Qty]) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[idx_PreInventoryMov_6]...';


GO
CREATE NONCLUSTERED INDEX [idx_PreInventoryMov_6]
    ON [dbo].[PreInventoryMov]([IDPessoa] ASC, [DocumentID] ASC)
    INCLUDE([InventMovTypeID]) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[idx_PreInventoryMov_7]...';


GO
CREATE NONCLUSTERED INDEX [idx_PreInventoryMov_7]
    ON [dbo].[PreInventoryMov]([DocumentID] ASC, [IDPreInventoryMov] ASC)
    INCLUDE([Qty], [ModelID]) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[idx_PreInventoryMov_8]...';


GO
CREATE NONCLUSTERED INDEX [idx_PreInventoryMov_8]
    ON [dbo].[PreInventoryMov]([IDPreInventoryMov] ASC, [DocumentID] ASC)
    INCLUDE([Qty]) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[idx_PreInventoryMov_9]...';


GO
CREATE NONCLUSTERED INDEX [idx_PreInventoryMov_9]
    ON [dbo].[PreInventoryMov]([DocumentID] ASC, [IDPreInventoryMov] ASC)
    INCLUDE([Qty]) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[PI_PreInventoryMov_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_PreInventoryMov_ReplLastChange]
    ON [dbo].[PreInventoryMov]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[XIF221PreInventoryMov]...';


GO
CREATE NONCLUSTERED INDEX [XIF221PreInventoryMov]
    ON [dbo].[PreInventoryMov]([StoreID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[XIF222PreInventoryMov]...';


GO
CREATE NONCLUSTERED INDEX [XIF222PreInventoryMov]
    ON [dbo].[PreInventoryMov]([ModelID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[XIF224PreInventoryMov]...';


GO
CREATE NONCLUSTERED INDEX [XIF224PreInventoryMov]
    ON [dbo].[PreInventoryMov]([UserID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[XIF225PreInventoryMov]...';


GO
CREATE NONCLUSTERED INDEX [XIF225PreInventoryMov]
    ON [dbo].[PreInventoryMov]([IDPessoa] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[XIF423PreInventoryMov]...';


GO
CREATE NONCLUSTERED INDEX [XIF423PreInventoryMov]
    ON [dbo].[PreInventoryMov]([IDCotacao] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PreInventoryMov].[XIF424PreInventoryMov]...';


GO
CREATE NONCLUSTERED INDEX [XIF424PreInventoryMov]
    ON [dbo].[PreInventoryMov]([IDPreInventoryMovParent] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Starting rebuilding table [dbo].[SerialMov]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

CREATE TABLE [dbo].[tmp_ms_xx_SerialMov] (
    [InventoryMovID]       INT             NOT NULL,
    [SerialNumber]         [dbo].[TSerial] NOT NULL,
    [IdentificationNumber] VARCHAR (30)    NULL,
    [processor]            CHAR (1)        NULL,
    [ReplLastChange]       DATETIME        NULL,
    PRIMARY KEY CLUSTERED ([InventoryMovID] ASC, [SerialNumber] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF)
);

IF EXISTS (SELECT TOP 1 1
           FROM   [dbo].[SerialMov])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_SerialMov] ([InventoryMovID], [SerialNumber], [IdentificationNumber], [ReplLastChange], [processor])
        SELECT   [InventoryMovID],
                 [SerialNumber],
                 [IdentificationNumber],
                 [ReplLastChange],
                 [processor]
        FROM     [dbo].[SerialMov]
        ORDER BY [InventoryMovID] ASC, [SerialNumber] ASC;
    END

DROP TABLE [dbo].[SerialMov];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_SerialMov]', N'SerialMov';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[SerialMov].[PI_SerialMov_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_SerialMov_ReplLastChange]
    ON [dbo].[SerialMov]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[DailyMaintenanceReport].[PI_DailyMaintenanceReport_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_DailyMaintenanceReport_ReplLastChange]
    ON [dbo].[DailyMaintenanceReport]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Fin_LancamentoComplement].[PI_Fin_LancamentoComplement_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Fin_LancamentoComplement_ReplLastChange]
    ON [dbo].[Fin_LancamentoComplement]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Fis_Registro60Analitico].[PI_Fis_Registro60Analitico_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Fis_Registro60Analitico_ReplLastChange]
    ON [dbo].[Fis_Registro60Analitico]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Fis_Registro60Item].[PI_Fis_Registro60Item_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Fis_Registro60Item_ReplLastChange]
    ON [dbo].[Fis_Registro60Item]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Fis_Registro60Mestre].[PI_Fis_Registro60Mestre_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Fis_Registro60Mestre_ReplLastChange]
    ON [dbo].[Fis_Registro60Mestre]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Fis_Registro60ResumoDiario].[PI_Fis_Registro60ResumoDiario_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Fis_Registro60ResumoDiario_ReplLastChange]
    ON [dbo].[Fis_Registro60ResumoDiario]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_BarcodePrint].[PI_Inv_BarcodePrint_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_BarcodePrint_ReplLastChange]
    ON [dbo].[Inv_BarcodePrint]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_Count].[PI_Inv_Count_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_Count_ReplLastChange]
    ON [dbo].[Inv_Count]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_CountItem].[PI_Inv_CountItem_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_CountItem_ReplLastChange]
    ON [dbo].[Inv_CountItem]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_DescriptionPrice].[PI_Inv_DescriptionPrice_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_DescriptionPrice_ReplLastChange]
    ON [dbo].[Inv_DescriptionPrice]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_FrozeCount].[PI_Inv_FrozeCount_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_FrozeCount_ReplLastChange]
    ON [dbo].[Inv_FrozeCount]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_Lot].[PI_Inv_Lot_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_Lot_ReplLastChange]
    ON [dbo].[Inv_Lot]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_ModelBalance].[PI_Inv_ModelBalance_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_ModelBalance_ReplLastChange]
    ON [dbo].[Inv_ModelBalance]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_ModelNutrition].[PI_Inv_ModelNutrition_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_ModelNutrition_ReplLastChange]
    ON [dbo].[Inv_ModelNutrition]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_ModelPrice].[PI_Inv_ModelPrice_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_ModelPrice_ReplLastChange]
    ON [dbo].[Inv_ModelPrice]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_ModelStateTax].[PI_Inv_ModelStateTax_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_ModelStateTax_ReplLastChange]
    ON [dbo].[Inv_ModelStateTax]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_ModelStoreBalance].[PI_Inv_ModelStoreBalance_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_ModelStoreBalance_ReplLastChange]
    ON [dbo].[Inv_ModelStoreBalance]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_NCM].[PI_Inv_NCM_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_NCM_ReplLastChange]
    ON [dbo].[Inv_NCM]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_Nutrition].[PI_Inv_Nutrition_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_Nutrition_ReplLastChange]
    ON [dbo].[Inv_Nutrition]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_NutritionItem].[PI_Inv_NutritionItem_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_NutritionItem_ReplLastChange]
    ON [dbo].[Inv_NutritionItem]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_StoreModelLot].[PI_Inv_StoreModelLot_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_StoreModelLot_ReplLastChange]
    ON [dbo].[Inv_StoreModelLot]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Inv_StorePrice].[PI_Inv_StorePrice_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Inv_StorePrice_ReplLastChange]
    ON [dbo].[Inv_StorePrice]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[InvoiceGen].[PI_InvoiceGen_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_InvoiceGen_ReplLastChange]
    ON [dbo].[InvoiceGen]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[InvResetHistory].[PI_InvResetHistory_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_InvResetHistory_ReplLastChange]
    ON [dbo].[InvResetHistory]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Key_IDInventoryMov].[PI_Key_IDInventoryMov_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Key_IDInventoryMov_ReplLastChange]
    ON [dbo].[Key_IDInventoryMov]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Key_IDInvoice].[PI_Key_IDInvoice_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Key_IDInvoice_ReplLastChange]
    ON [dbo].[Key_IDInvoice]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Key_IDLancamento].[PI_Key_IDLancamento_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Key_IDLancamento_ReplLastChange]
    ON [dbo].[Key_IDLancamento]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Key_IDPreInventoryMov].[PI_Key_IDPreInventoryMov_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Key_IDPreInventoryMov_ReplLastChange]
    ON [dbo].[Key_IDPreInventoryMov]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Key_IDPreSale].[PI_Key_IDPreSale_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Key_IDPreSale_ReplLastChange]
    ON [dbo].[Key_IDPreSale]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Key_IDSaleItemCommission].[PI_Key_IDSaleItemCommission_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Key_IDSaleItemCommission_ReplLastChange]
    ON [dbo].[Key_IDSaleItemCommission]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[MargemTable].[PI_MargemTable_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_MargemTable_ReplLastChange]
    ON [dbo].[MargemTable]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[MargemTableRange].[PI_MargemTableRange_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_MargemTableRange_ReplLastChange]
    ON [dbo].[MargemTableRange]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[MenuItem].[PI_MenuItem_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_MenuItem_ReplLastChange]
    ON [dbo].[MenuItem]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[MenuItemLanguage].[PI_MenuItemLanguage_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_MenuItemLanguage_ReplLastChange]
    ON [dbo].[MenuItemLanguage]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[MenuMain].[PI_MenuMain_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_MenuMain_ReplLastChange]
    ON [dbo].[MenuMain]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[MenuMainLanguage].[PI_MenuMainLanguage_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_MenuMainLanguage_ReplLastChange]
    ON [dbo].[MenuMainLanguage]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Mnt_CFOP].[PI_Mnt_CFOP_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Mnt_CFOP_ReplLastChange]
    ON [dbo].[Mnt_CFOP]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Mnt_Controler].[PI_Mnt_Controler_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Mnt_Controler_ReplLastChange]
    ON [dbo].[Mnt_Controler]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Mnt_DefaultInvoiceOBS].[PI_Mnt_DefaultInvoiceOBS_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Mnt_DefaultInvoiceOBS_ReplLastChange]
    ON [dbo].[Mnt_DefaultInvoiceOBS]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Mnt_DocumentType].[PI_Mnt_DocumentType_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Mnt_DocumentType_ReplLastChange]
    ON [dbo].[Mnt_DocumentType]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Mnt_Store].[PI_Mnt_Store_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Mnt_Store_ReplLastChange]
    ON [dbo].[Mnt_Store]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[ModelPriceLog].[PI_ModelPriceLog_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_ModelPriceLog_ReplLastChange]
    ON [dbo].[ModelPriceLog]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[ModelTransfSerial].[PI_modeltransfserial_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_modeltransfserial_ReplLastChange]
    ON [dbo].[ModelTransfSerial]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Nfe_NotaFiscal].[PI_Nfe_NotaFiscal_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Nfe_NotaFiscal_ReplLastChange]
    ON [dbo].[Nfe_NotaFiscal]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Param].[PI_Param_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Param_ReplLastChange]
    ON [dbo].[Param]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[ParamLanguage].[PI_ParamLanguage_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_ParamLanguage_ReplLastChange]
    ON [dbo].[ParamLanguage]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[pcm_animals].[PI_pcm_animals_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_pcm_animals_ReplLastChange]
    ON [dbo].[pcm_animals]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[pcm_breeders].[PI_pcm_breeders_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_pcm_breeders_ReplLastChange]
    ON [dbo].[pcm_breeders]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[pcm_breeds].[PI_pcm_breeds_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_pcm_breeds_ReplLastChange]
    ON [dbo].[pcm_breeds]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[pcm_config].[PI_pcm_config_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_pcm_config_ReplLastChange]
    ON [dbo].[pcm_config]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[pcm_medical].[PI_pcm_medical_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_pcm_medical_ReplLastChange]
    ON [dbo].[pcm_medical]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[pcm_medical_rec].[PI_pcm_medical_rec_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_pcm_medical_rec_ReplLastChange]
    ON [dbo].[pcm_medical_rec]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[pcm_others].[PI_pcm_others_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_pcm_others_ReplLastChange]
    ON [dbo].[pcm_others]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[pcm_vaccine_lots].[PI_pcm_vaccine_lots_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_pcm_vaccine_lots_ReplLastChange]
    ON [dbo].[pcm_vaccine_lots]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[pcm_vaccine_manu].[PI_pcm_vaccine_manu_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_pcm_vaccine_manu_ReplLastChange]
    ON [dbo].[pcm_vaccine_manu]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[pcm_vaccine_shots].[PI_pcm_vaccine_shots_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_pcm_vaccine_shots_ReplLastChange]
    ON [dbo].[pcm_vaccine_shots]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[pcm_vaccines].[PI_pcm_vaccines_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_pcm_vaccines_ReplLastChange]
    ON [dbo].[pcm_vaccines]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Pessoa].[idx_Pessoa_IDPessoa_CustomerCard]...';


GO
CREATE NONCLUSTERED INDEX [idx_Pessoa_IDPessoa_CustomerCard]
    ON [dbo].[Pessoa]([IDPessoa] ASC)
    INCLUDE([CustomerCard]) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Pessoa].[idx_Pessoa_IDPessoa_IDTipoPessoa]...';


GO
CREATE NONCLUSTERED INDEX [idx_Pessoa_IDPessoa_IDTipoPessoa]
    ON [dbo].[Pessoa]([IDPessoa] ASC)
    INCLUDE([IDTipoPessoa]) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PessoaValidation].[PI_PessoaValidation_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_PessoaValidation_ReplLastChange]
    ON [dbo].[PessoaValidation]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Pet_WarrantyReport].[PI_Pet_WarrantyReport_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Pet_WarrantyReport_ReplLastChange]
    ON [dbo].[Pet_WarrantyReport]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PT_GlobalSetting].[PI_PT_GlobalSetting_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_PT_GlobalSetting_ReplLastChange]
    ON [dbo].[PT_GlobalSetting]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PT_GlobalSettingDetail].[PI_PT_GlobalSettingDetail_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_PT_GlobalSettingDetail_ReplLastChange]
    ON [dbo].[PT_GlobalSettingDetail]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[PT_LocalSetting].[PI_PT_LocalSetting_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_PT_LocalSetting_ReplLastChange]
    ON [dbo].[PT_LocalSetting]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Pur_PurchaseVerify].[PI_Pur_PurchaseVerify_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Pur_PurchaseVerify_ReplLastChange]
    ON [dbo].[Pur_PurchaseVerify]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Results].[PI_Results_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Results_ReplLastChange]
    ON [dbo].[Results]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[RoundingTable].[PI_RoundingTable_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_RoundingTable_ReplLastChange]
    ON [dbo].[RoundingTable]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[RoundingTableRange].[PI_RoundingTableRange_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_RoundingTableRange_ReplLastChange]
    ON [dbo].[RoundingTableRange]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_FrequentPromo].[PI_Sal_FrequentPromo_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_FrequentPromo_ReplLastChange]
    ON [dbo].[Sal_FrequentPromo]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_NotasCanceladas].[PI_Sal_NotasCanceladas_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_NotasCanceladas_ReplLastChange]
    ON [dbo].[Sal_NotasCanceladas]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_PaymentCondition].[PI_Sal_PaymentCondition_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_PaymentCondition_ReplLastChange]
    ON [dbo].[Sal_PaymentCondition]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_PaymentDiscount].[PI_Sal_PaymentDiscount_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_PaymentDiscount_ReplLastChange]
    ON [dbo].[Sal_PaymentDiscount]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_PromoLoyaltyCustomer].[PI_Sal_PromoLoyaltyCustomer_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_PromoLoyaltyCustomer_ReplLastChange]
    ON [dbo].[Sal_PromoLoyaltyCustomer]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_PromoPrizeItem].[PI_Sal_PromoPrizeItem_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_PromoPrizeItem_ReplLastChange]
    ON [dbo].[Sal_PromoPrizeItem]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_RebateCalendar].[PI_Sal_RebateCalendar_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_RebateCalendar_ReplLastChange]
    ON [dbo].[Sal_RebateCalendar]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_RebateItem].[PI_Sal_RebateItem_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_RebateItem_ReplLastChange]
    ON [dbo].[Sal_RebateItem]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_RebateItemCalendar].[PI_Sal_RebateItemCalendar_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_RebateItemCalendar_ReplLastChange]
    ON [dbo].[Sal_RebateItemCalendar]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_ReducaoZ].[PI_Sal_ReducaoZ_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_ReducaoZ_ReplLastChange]
    ON [dbo].[Sal_ReducaoZ]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_RemovedItem].[PI_Sal_RemovedItem_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_RemovedItem_ReplLastChange]
    ON [dbo].[Sal_RemovedItem]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_StoreAccountLimetLog].[PI_Sal_StoreAccountLimetLog_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_StoreAccountLimetLog_ReplLastChange]
    ON [dbo].[Sal_StoreAccountLimetLog]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_TotalizadorParcial].[PI_Sal_TotalizadorParcial_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_TotalizadorParcial_ReplLastChange]
    ON [dbo].[Sal_TotalizadorParcial]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sal_TributacaoECF].[PI_Sal_TributacaoECF_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sal_TributacaoECF_ReplLastChange]
    ON [dbo].[Sal_TributacaoECF]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Ser_SOCustomerProduct].[PI_Ser_SOCustomerProduct_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Ser_SOCustomerProduct_ReplLastChange]
    ON [dbo].[Ser_SOCustomerProduct]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Ser_SOStatus].[PI_Ser_SOStatus_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Ser_SOStatus_ReplLastChange]
    ON [dbo].[Ser_SOStatus]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sis_AppHistory].[PI_Sis_AppHistory_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sis_AppHistory_ReplLastChange]
    ON [dbo].[Sis_AppHistory]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sis_CodigoIncremental].[PI_Sis_CodigoIncremental_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sis_CodigoIncremental_ReplLastChange]
    ON [dbo].[Sis_CodigoIncremental]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sis_ConfigExport].[PI_Sis_ConfigExport_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sis_ConfigExport_ReplLastChange]
    ON [dbo].[Sis_ConfigExport]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sis_ConfigImport].[PI_Sis_ConfigImport_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sis_ConfigImport_ReplLastChange]
    ON [dbo].[Sis_ConfigImport]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sis_Constante].[PI_Sis_Constante_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sis_Constante_ReplLastChange]
    ON [dbo].[Sis_Constante]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sis_GrupoMainMenuPagina].[PI_Sis_GrupoMainMenuPagina_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sis_GrupoMainMenuPagina_ReplLastChange]
    ON [dbo].[Sis_GrupoMainMenuPagina]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sis_Language].[PI_Sis_Language_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sis_Language_ReplLastChange]
    ON [dbo].[Sis_Language]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sis_MainMenuOperacao].[PI_Sis_MainMenuOperacao_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sis_MainMenuOperacao_ReplLastChange]
    ON [dbo].[Sis_MainMenuOperacao]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sis_Municipio].[PI_Sis_Municipio_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sis_Municipio_ReplLastChange]
    ON [dbo].[Sis_Municipio]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sis_PropertyDomain].[PI_Sis_PropertyDomain_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sis_PropertyDomain_ReplLastChange]
    ON [dbo].[Sis_PropertyDomain]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sis_Registro].[PI_Sis_Registro_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sis_Registro_ReplLastChange]
    ON [dbo].[Sis_Registro]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sis_Registry].[PI_Sis_Registry_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sis_Registry_ReplLastChange]
    ON [dbo].[Sis_Registry]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[SpecialPriceByGroup].[PI_SpecialPriceByGroup_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_SpecialPriceByGroup_ReplLastChange]
    ON [dbo].[SpecialPriceByGroup]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sys_Module].[PI_Sys_Module_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_Sys_Module_ReplLastChange]
    ON [dbo].[Sys_Module]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[SYS_Relatorio].[PI_SYS_Relatorio_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_SYS_Relatorio_ReplLastChange]
    ON [dbo].[SYS_Relatorio]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[SYS_RelParametro].[PI_SYS_RelParametro_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_SYS_RelParametro_ReplLastChange]
    ON [dbo].[SYS_RelParametro]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[SysFunction].[PI_SysFunction_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_SysFunction_ReplLastChange]
    ON [dbo].[SysFunction]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[SysFunctionLanguage].[PI_SysFunctionLanguage_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_SysFunctionLanguage_ReplLastChange]
    ON [dbo].[SysFunctionLanguage]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating [dbo].[UpInvent].[PI_UpInvent_ReplLastChange]...';


GO
CREATE NONCLUSTERED INDEX [PI_UpInvent_ReplLastChange]
    ON [dbo].[UpInvent]([ReplLastChange] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];


GO
PRINT N'Creating DF_SalPromo_FlatPromo_One...';


GO
ALTER TABLE [dbo].[Sal_Promo]
    ADD CONSTRAINT [DF_SalPromo_FlatPromo_One] DEFAULT ((1)) FOR [FlatPromo];


GO
PRINT N'Creating [dbo].[InventoryMov].[stat_InventoryMov_1]...';


GO
CREATE STATISTICS [stat_InventoryMov_1]
    ON [dbo].[InventoryMov]([InventMovTypeID], [IDPessoa]);


GO
PRINT N'Creating [dbo].[InventoryMov].[stat_InventoryMov_2]...';


GO
CREATE STATISTICS [stat_InventoryMov_2]
    ON [dbo].[InventoryMov]([Promo], [IDPessoa], [InventMovTypeID]);


GO
PRINT N'Creating [dbo].[Model].[stat_Model_1]...';


GO
CREATE STATISTICS [stat_Model_1]
    ON [dbo].[Model]([GroupID], [IDModel]);


GO
PRINT N'Creating [dbo].[PreInventoryMov].[stat_PreInventoryMov_0]...';


GO
CREATE STATISTICS [stat_PreInventoryMov_0]
    ON [dbo].[PreInventoryMov]([InventMovTypeID], [IDPreInventoryMov], [ModelID]);


GO
PRINT N'Creating [dbo].[PreInventoryMov].[stat_PreInventoryMov_1]...';


GO
CREATE STATISTICS [stat_PreInventoryMov_1]
    ON [dbo].[PreInventoryMov]([ModelID], [IDPreInventoryMov], [DocumentID], [IDPessoa]);


GO
PRINT N'Creating [dbo].[PreInventoryMov].[stat_PreInventoryMov_2]...';


GO
CREATE STATISTICS [stat_PreInventoryMov_2]
    ON [dbo].[PreInventoryMov]([DocumentID], [IDPreInventoryMov], [InventMovTypeID], [ModelID]);


GO
PRINT N'Creating [dbo].[PreInventoryMov].[stat_PreInventoryMov_3]...';


GO
CREATE STATISTICS [stat_PreInventoryMov_3]
    ON [dbo].[PreInventoryMov]([DocumentID], [InventMovTypeID], [IDPessoa], [IDPreInventoryMov], [ModelID]);


GO
PRINT N'Creating [dbo].[Pessoa].[stat_Pessoa_1]...';


GO
CREATE STATISTICS [stat_Pessoa_1]
    ON [dbo].[Pessoa]([IDTipoPessoa], [IDPessoa]);


GO
PRINT N'Creating FK_CashRegister_SalRemovedItem_IDCashRegister...';


GO
ALTER TABLE [dbo].[Sal_RemovedItem] WITH NOCHECK
    ADD CONSTRAINT [FK_CashRegister_SalRemovedItem_IDCashRegister] FOREIGN KEY ([IDCashRegister]) REFERENCES [dbo].[CashRegister] ([IDCashRegister]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_CashReg_CashRegMov_IDCashRegister...';


GO
ALTER TABLE [dbo].[CashRegMov] WITH NOCHECK
    ADD CONSTRAINT [FK_CashReg_CashRegMov_IDCashRegister] FOREIGN KEY ([IDCashRegister]) REFERENCES [dbo].[CashRegister] ([IDCashRegister]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_CashRegister_SalDrawerKickLog_IDCashRegister...';


GO
ALTER TABLE [dbo].[Sal_DrawerKickLog] WITH NOCHECK
    ADD CONSTRAINT [FK_CashRegister_SalDrawerKickLog_IDCashRegister] FOREIGN KEY ([IDCashRegister]) REFERENCES [dbo].[CashRegister] ([IDCashRegister]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_CashRegister_Sal_TotalizadorParcial_IDReducaoZ...';


GO
ALTER TABLE [dbo].[Sal_ReducaoZ] WITH NOCHECK
    ADD CONSTRAINT [FK_CashRegister_Sal_TotalizadorParcial_IDReducaoZ] FOREIGN KEY ([IDCashRegister]) REFERENCES [dbo].[CashRegister] ([IDCashRegister]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_InvModelVendor_IDModel...';


GO
ALTER TABLE [dbo].[Inv_ModelVendor] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_InvModelVendor_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Pessoa_InvModelVendor_IDFabricante...';


GO
ALTER TABLE [dbo].[Inv_ModelVendor] WITH NOCHECK
    ADD CONSTRAINT [FK_Pessoa_InvModelVendor_IDFabricante] FOREIGN KEY ([IDPessoa]) REFERENCES [dbo].[Pessoa] ([IDPessoa]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_InventoryMov_InvMovDocument_IDInventoryMov...';


GO
ALTER TABLE [dbo].[Inv_MovDocument] WITH NOCHECK
    ADD CONSTRAINT [FK_InventoryMov_InvMovDocument_IDInventoryMov] FOREIGN KEY ([IDInventoryMov]) REFERENCES [dbo].[InventoryMov] ([IDInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_InventoryMov_InvMovComplement_IDInventoryMov...';


GO
ALTER TABLE [dbo].[Inv_MovComplement] WITH NOCHECK
    ADD CONSTRAINT [FK_InventoryMov_InvMovComplement_IDInventoryMov] FOREIGN KEY ([IDInventoryMov]) REFERENCES [dbo].[InventoryMov] ([IDInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_InventoryMov_SaleItemCommission_IDInventoryMov...';


GO
ALTER TABLE [dbo].[SaleItemCommission] WITH NOCHECK
    ADD CONSTRAINT [FK_InventoryMov_SaleItemCommission_IDInventoryMov] FOREIGN KEY ([IDInventoryMov]) REFERENCES [dbo].[InventoryMov] ([IDInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_InventoryMov_InvMovPrice_IDInventoryMov...';


GO
ALTER TABLE [dbo].[Inv_MovPrice] WITH NOCHECK
    ADD CONSTRAINT [FK_InventoryMov_InvMovPrice_IDInventoryMov] FOREIGN KEY ([IDInventoryMov]) REFERENCES [dbo].[InventoryMov] ([IDInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_InventoryMov_GroupCost_IDInventoryMov...';


GO
ALTER TABLE [dbo].[GroupCost] WITH NOCHECK
    ADD CONSTRAINT [FK_InventoryMov_GroupCost_IDInventoryMov] FOREIGN KEY ([IDInventoryMov]) REFERENCES [dbo].[InventoryMov] ([IDInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_InventoryMov_InventoryMovTax_IDInventoryMov...';


GO
ALTER TABLE [dbo].[InventoryMovTax] WITH NOCHECK
    ADD CONSTRAINT [FK_InventoryMov_InventoryMovTax_IDInventoryMov] FOREIGN KEY ([IDInventoryMov]) REFERENCES [dbo].[InventoryMov] ([IDInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_DiscUses_IDInventoryMov...';


GO
ALTER TABLE [dbo].[DiscUses] WITH NOCHECK
    ADD CONSTRAINT [FK_DiscUses_IDInventoryMov] FOREIGN KEY ([IDInventoryMov]) REFERENCES [dbo].[InventoryMov] ([IDInventoryMov]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating FK_Repair_InventoryMov_IDRepair...';


GO
ALTER TABLE [dbo].[InventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_Repair_InventoryMov_IDRepair] FOREIGN KEY ([IDRepair]) REFERENCES [dbo].[Repair] ([IDRepair]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_SystemUser_InventoryMov_IDUser...';


GO
ALTER TABLE [dbo].[InventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_SystemUser_InventoryMov_IDUser] FOREIGN KEY ([IDUser]) REFERENCES [dbo].[SystemUser] ([IDUser]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_InventoryMovType_IventoryMov_InventMovTypeID...';


GO
ALTER TABLE [dbo].[InventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_InventoryMovType_IventoryMov_InventMovTypeID] FOREIGN KEY ([InventMovTypeID]) REFERENCES [dbo].[InventoryMovType] ([IDInventMovType]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_InvDepartment_InventoryMov_IDDepartment...';


GO
ALTER TABLE [dbo].[InventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_InvDepartment_InventoryMov_IDDepartment] FOREIGN KEY ([IDDepartment]) REFERENCES [dbo].[Inv_Department] ([IDDepartment]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Pessoa_IventoryMov_IDPessoa...';


GO
ALTER TABLE [dbo].[InventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_Pessoa_IventoryMov_IDPessoa] FOREIGN KEY ([IDPessoa]) REFERENCES [dbo].[Pessoa] ([IDPessoa]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Store_InventoryMov_StoreID...';


GO
ALTER TABLE [dbo].[InventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_Store_InventoryMov_StoreID] FOREIGN KEY ([StoreID]) REFERENCES [dbo].[Store] ([IDStore]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Model_InventoryMov_ModelID...';


GO
ALTER TABLE [dbo].[InventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_InventoryMov_ModelID] FOREIGN KEY ([ModelID]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_InventoryMov_Repair_IDInvMovReturn...';


GO
ALTER TABLE [dbo].[Repair] WITH NOCHECK
    ADD CONSTRAINT [FK_InventoryMov_Repair_IDInvMovReturn] FOREIGN KEY ([IDInvMovReturn]) REFERENCES [dbo].[InventoryMov] ([IDInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_InventoryMov_Repair_IDInvMovSend...';


GO
ALTER TABLE [dbo].[Repair] WITH NOCHECK
    ADD CONSTRAINT [FK_InventoryMov_Repair_IDInvMovSend] FOREIGN KEY ([IDInvMovSend]) REFERENCES [dbo].[InventoryMov] ([IDInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Invoice_History_IDPreSale...';


GO
ALTER TABLE [dbo].[History] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_History_IDPreSale] FOREIGN KEY ([IDPreSale]) REFERENCES [dbo].[Invoice] ([IDPreSale]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Invoice_Sal_RemovedItem_IDPreSale...';


GO
ALTER TABLE [dbo].[Sal_RemovedItem] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_Sal_RemovedItem_IDPreSale] FOREIGN KEY ([IDPreSale]) REFERENCES [dbo].[Invoice] ([IDPreSale]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Invoice_Sal_PaymentCondition_IDPreSale...';


GO
ALTER TABLE [dbo].[Sal_PaymentCondition] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_Sal_PaymentCondition_IDPreSale] FOREIGN KEY ([IDPreSale]) REFERENCES [dbo].[Invoice] ([IDPreSale]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Invoice_Invoice_IDPresaleParent...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_Invoice_IDPresaleParent] FOREIGN KEY ([IDPreSaleParent]) REFERENCES [dbo].[Invoice] ([IDPreSale]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_CashRegMov_Invoice_CashRegMovID...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_CashRegMov_Invoice_CashRegMovID] FOREIGN KEY ([CashRegMovID]) REFERENCES [dbo].[CashRegMov] ([IDCashRegMov]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_DeliverType_Invoice_DeliverTypeID...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_DeliverType_Invoice_DeliverTypeID] FOREIGN KEY ([DeliverTypeID]) REFERENCES [dbo].[DeliverType] ([IDDeliverType]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Pessoa_Invoice_IDCustomer...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_Pessoa_Invoice_IDCustomer] FOREIGN KEY ([IDCustomer]) REFERENCES [dbo].[Pessoa] ([IDPessoa]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Media_Invoice_MediaID...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_Media_Invoice_MediaID] FOREIGN KEY ([MediaID]) REFERENCES [dbo].[Media] ([IDMedia]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_TouristGroup_Invoice_IDTourisGroup...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_TouristGroup_Invoice_IDTourisGroup] FOREIGN KEY ([IDTouristGroup]) REFERENCES [dbo].[TouristGroup] ([IDTouristGroup]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_MeioPag_Invoice_IDMeioPag...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_MeioPag_Invoice_IDMeioPag] FOREIGN KEY ([IDMeioPag]) REFERENCES [dbo].[MeioPag] ([IDMeioPag]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_SpecialPrice_Invoice_SpecialPriceID...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_SpecialPrice_Invoice_SpecialPriceID] FOREIGN KEY ([SpecialPriceID]) REFERENCES [dbo].[SpecialPrice] ([IDSpecialPrice]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Store_Invoice_IDStore...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_Store_Invoice_IDStore] FOREIGN KEY ([IDStore]) REFERENCES [dbo].[Store] ([IDStore]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Invoice_SalInvoiceShipping_IDPreSale...';


GO
ALTER TABLE [dbo].[Sal_InvoiceShipping] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_SalInvoiceShipping_IDPreSale] FOREIGN KEY ([IDPreSale]) REFERENCES [dbo].[Invoice] ([IDPreSale]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Invoice_Lancamento_IDPreSale...';


GO
ALTER TABLE [dbo].[Fin_Lancamento] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_Lancamento_IDPreSale] FOREIGN KEY ([IDPreSale]) REFERENCES [dbo].[Invoice] ([IDPreSale]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Invoice_Estimated_IDPreSale...';


GO
ALTER TABLE [dbo].[Estimated] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_Estimated_IDPreSale] FOREIGN KEY ([IDPreSale]) REFERENCES [dbo].[Invoice] ([IDPreSale]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Invoice_SalRebateDiscount_IDPreSaleUsed...';


GO
ALTER TABLE [dbo].[Sal_RebateDiscount] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_SalRebateDiscount_IDPreSaleUsed] FOREIGN KEY ([IDPreSaleUsed]) REFERENCES [dbo].[Invoice] ([IDPreSale]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Invoice_SalRebateDiscount_IDPreSaleCreated...';


GO
ALTER TABLE [dbo].[Sal_RebateDiscount] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_SalRebateDiscount_IDPreSaleCreated] FOREIGN KEY ([IDPreSaleCreated]) REFERENCES [dbo].[Invoice] ([IDPreSale]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Invoice_SalAccountCardMov_IDPreSale...';


GO
ALTER TABLE [dbo].[Sal_AccountCardMov] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_SalAccountCardMov_IDPreSale] FOREIGN KEY ([IDPreSale]) REFERENCES [dbo].[Invoice] ([IDPreSale]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Invoice_InvoiceToCostType_IDPreSale...';


GO
ALTER TABLE [dbo].[InvoiceToCostType] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_InvoiceToCostType_IDPreSale] FOREIGN KEY ([IDPreSale]) REFERENCES [dbo].[Invoice] ([IDPreSale]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Invoice_InvoiceOBS_IDPreSale...';


GO
ALTER TABLE [dbo].[InvoiceOBS] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_InvoiceOBS_IDPreSale] FOREIGN KEY ([IDPreSale]) REFERENCES [dbo].[Invoice] ([IDPreSale]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Sal_Coupon_DocumentID...';


GO
ALTER TABLE [dbo].[Sal_Coupon] WITH NOCHECK
    ADD CONSTRAINT [FK_Sal_Coupon_DocumentID] FOREIGN KEY ([DocumentID]) REFERENCES [dbo].[Invoice] ([IDPreSale]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating FK_Model_SalRemovedItem_IDModel...';


GO
ALTER TABLE [dbo].[Sal_RemovedItem] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_SalRemovedItem_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_Request_ModelID...';


GO
ALTER TABLE [dbo].[Request] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_Request_ModelID] FOREIGN KEY ([ModelID]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Model_InvModelReceipt_IDModel...';


GO
ALTER TABLE [dbo].[Inv_ModelReceipt] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_InvModelReceipt_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_PurchaseVerify_IDModel...';


GO
ALTER TABLE [dbo].[Pur_PurchaseVerify] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_PurchaseVerify_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_InvFeatures_IDModel...';


GO
ALTER TABLE [dbo].[InvFeatures] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_InvFeatures_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating R_236...';


GO
ALTER TABLE [dbo].[Inv_ModelBalance] WITH NOCHECK
    ADD CONSTRAINT [R_236] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_Sal_FrequentPromo_IDModel...';


GO
ALTER TABLE [dbo].[Sal_FrequentPromo] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_Sal_FrequentPromo_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_EstimatedItem_IDModel...';


GO
ALTER TABLE [dbo].[EstimatedItem] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_EstimatedItem_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_InventorySerial_IDModel...';


GO
ALTER TABLE [dbo].[InventorySerial] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_InventorySerial_IDModel] FOREIGN KEY ([ModelID]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Model_PreInventMov_ModelID...';


GO
ALTER TABLE [dbo].[PreInventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_PreInventMov_ModelID] FOREIGN KEY ([ModelID]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Model_ModelPriceLog_IDModel...';


GO
ALTER TABLE [dbo].[ModelPriceLog] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_ModelPriceLog_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_SalRebateItem_IDModel...';


GO
ALTER TABLE [dbo].[Sal_RebateItem] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_SalRebateItem_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_InvTechFeatures_IDModel...';


GO
ALTER TABLE [dbo].[InvTechFeatures] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_InvTechFeatures_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_InvModelPrice_IDModel...';


GO
ALTER TABLE [dbo].[Inv_ModelPrice] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_InvModelPrice_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Inv_NCM_Model_IDNCM...';


GO
ALTER TABLE [dbo].[Model] WITH NOCHECK
    ADD CONSTRAINT [FK_Inv_NCM_Model_IDNCM] FOREIGN KEY ([IDNCM]) REFERENCES [dbo].[Inv_NCM] ([IDNCM]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_ModelGroup_Model_IDModelGroup...';


GO
ALTER TABLE [dbo].[Model] WITH NOCHECK
    ADD CONSTRAINT [FK_ModelGroup_Model_IDModelGroup] FOREIGN KEY ([IDModelGroup]) REFERENCES [dbo].[ModelGroup] ([IDModelGroup]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_ModelSubGroup_Model_IDModelSubGroup...';


GO
ALTER TABLE [dbo].[Model] WITH NOCHECK
    ADD CONSTRAINT [FK_ModelSubGroup_Model_IDModelSubGroup] FOREIGN KEY ([IDModelSubGroup]) REFERENCES [dbo].[ModelSubGroup] ([IDModelSubGroup]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_InvColor_Model_IDColor...';


GO
ALTER TABLE [dbo].[Model] WITH NOCHECK
    ADD CONSTRAINT [FK_InvColor_Model_IDColor] FOREIGN KEY ([IDColor]) REFERENCES [dbo].[InvColor] ([IDColor]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_InvSize_Model_IDSize...';


GO
ALTER TABLE [dbo].[Model] WITH NOCHECK
    ADD CONSTRAINT [FK_InvSize_Model_IDSize] FOREIGN KEY ([IDSize]) REFERENCES [dbo].[InvSize] ([IDSize]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_MntCFOP_Model_IDCFOP...';


GO
ALTER TABLE [dbo].[Model] WITH NOCHECK
    ADD CONSTRAINT [FK_MntCFOP_Model_IDCFOP] FOREIGN KEY ([IDCFOP]) REFERENCES [dbo].[Mnt_CFOP] ([IDCFOP]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_InvStorePrice_IDModel...';


GO
ALTER TABLE [dbo].[Inv_StorePrice] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_InvStorePrice_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_SalPromoItem_IDModel...';


GO
ALTER TABLE [dbo].[Sal_PromoItem] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_SalPromoItem_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_SalPromoPrizeItem_IDModel...';


GO
ALTER TABLE [dbo].[Sal_PromoPrizeItem] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_SalPromoPrizeItem_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_Ser_SOItemProduct_IDModel...';


GO
ALTER TABLE [dbo].[Ser_SOItemProduct] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_Ser_SOItemProduct_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating PK_InvModelStateTax_Model_IDModel...';


GO
ALTER TABLE [dbo].[Inv_ModelStateTax] WITH NOCHECK
    ADD CONSTRAINT [PK_InvModelStateTax_Model_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_PurchaseItem_IDModel...';


GO
ALTER TABLE [dbo].[Pur_PurchaseItem] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_PurchaseItem_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Model_IDModel_Pet_IDModel...';


GO
ALTER TABLE [dbo].[Pet] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_IDModel_Pet_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_Barcode_IDModel...';


GO
ALTER TABLE [dbo].[Barcode] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_Barcode_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_ServiceRange_IDModel...';


GO
ALTER TABLE [dbo].[ServiceRange] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_ServiceRange_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_GroupCostGift_IDModel...';


GO
ALTER TABLE [dbo].[GroupCostGift] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_GroupCostGift_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Model_PurchaseQtyOrder_IDModel...';


GO
ALTER TABLE [dbo].[Pur_PurchaseQtyOrder] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_PurchaseQtyOrder_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Model_Inv_Lot_IDModel...';


GO
ALTER TABLE [dbo].[Inv_Lot] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_Inv_Lot_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_PurchaseQtyPrePurchase_IDModel...';


GO
ALTER TABLE [dbo].[Pur_PurchaseQtyPrePurchase] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_PurchaseQtyPrePurchase_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Model_Inv_ModelNutrition_IDModel...';


GO
ALTER TABLE [dbo].[Inv_ModelNutrition] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_Inv_ModelNutrition_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_Inv_StoreModelLot_IDModel...';


GO
ALTER TABLE [dbo].[Inv_StoreModelLot] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_Inv_StoreModelLot_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_InvModelStoreBalance_IDModel...';


GO
ALTER TABLE [dbo].[Inv_ModelStoreBalance] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_InvModelStoreBalance_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_IDModel_Pet_Microchip_IDModel...';


GO
ALTER TABLE [dbo].[Pet_Microchip] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_IDModel_Pet_Microchip_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_ModelTransfDet_IDModel...';


GO
ALTER TABLE [dbo].[ModelTransfDet] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_ModelTransfDet_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating PT_GlobalSet_Model_FK...';


GO
ALTER TABLE [dbo].[PT_GlobalSettingDetail] WITH NOCHECK
    ADD CONSTRAINT [PT_GlobalSet_Model_FK] FOREIGN KEY ([IdModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_CotacaoResult_IDModel...';


GO
ALTER TABLE [dbo].[CotacaoResult] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_CotacaoResult_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Model_InvAccessory_IDInvAccessory...';


GO
ALTER TABLE [dbo].[InvAccessory] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_InvAccessory_IDInvAccessory] FOREIGN KEY ([IDInvAccessory]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_InvAccessory_IDModel...';


GO
ALTER TABLE [dbo].[InvAccessory] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_InvAccessory_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_Repair_IDModel...';


GO
ALTER TABLE [dbo].[Repair] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_Repair_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Model_CotacaoToModel_IDModel...';


GO
ALTER TABLE [dbo].[CotacaoToModel] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_CotacaoToModel_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Model_InvFroze_IDModel...';


GO
ALTER TABLE [dbo].[Inv_FrozeCount] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_InvFroze_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_Model_VendorCode_IDModel...';


GO
ALTER TABLE [dbo].[VendorModelCode] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_VendorCode_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_TagModel_IDModel...';


GO
ALTER TABLE [dbo].[TagModel] WITH NOCHECK
    ADD CONSTRAINT [FK_TagModel_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating FK_Model_KitModel_IDModel...';


GO
ALTER TABLE [dbo].[KitModel] WITH NOCHECK
    ADD CONSTRAINT [FK_Model_KitModel_IDModel] FOREIGN KEY ([IDModel]) REFERENCES [dbo].[Model] ([IDModel]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_PreInventoryMov_InvMovDocument_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[Inv_MovDocument] WITH NOCHECK
    ADD CONSTRAINT [FK_PreInventoryMov_InvMovDocument_IDPreInventoryMov] FOREIGN KEY ([IDPreInventoryMov]) REFERENCES [dbo].[PreInventoryMov] ([IDPreInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_PreInventoryMov_Request_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[Request] WITH NOCHECK
    ADD CONSTRAINT [FK_PreInventoryMov_Request_IDPreInventoryMov] FOREIGN KEY ([IDPreInventoryMov]) REFERENCES [dbo].[PreInventoryMov] ([IDPreInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_PreInventoryMov_POItemRequest_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[POItemRequest] WITH NOCHECK
    ADD CONSTRAINT [FK_PreInventoryMov_POItemRequest_IDPreInventoryMov] FOREIGN KEY ([IDPreInventoryMov]) REFERENCES [dbo].[PreInventoryMov] ([IDPreInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_InvDepartment_PreInventoryMov_IDDepartment...';


GO
ALTER TABLE [dbo].[PreInventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_InvDepartment_PreInventoryMov_IDDepartment] FOREIGN KEY ([IDDepartment]) REFERENCES [dbo].[Inv_Department] ([IDDepartment]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_TaxCategory_PreInventMov_IDTaxCategory...';


GO
ALTER TABLE [dbo].[PreInventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_TaxCategory_PreInventMov_IDTaxCategory] FOREIGN KEY ([IDTaxCategory]) REFERENCES [dbo].[TaxCategory] ([IDTaxCategory]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_InventoryMovType_PreInventoryMov_InventMovTypeID...';


GO
ALTER TABLE [dbo].[PreInventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_InventoryMovType_PreInventoryMov_InventMovTypeID] FOREIGN KEY ([InventMovTypeID]) REFERENCES [dbo].[InventoryMovType] ([IDInventMovType]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Pessoa_PreInventoryMov_IDPessoa...';


GO
ALTER TABLE [dbo].[PreInventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_Pessoa_PreInventoryMov_IDPessoa] FOREIGN KEY ([IDPessoa]) REFERENCES [dbo].[Pessoa] ([IDPessoa]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_PreInventoryMov_PreInventoryMov_IDPreInventoryMovParent...';


GO
ALTER TABLE [dbo].[PreInventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_PreInventoryMov_PreInventoryMov_IDPreInventoryMovParent] FOREIGN KEY ([IDPreInventoryMovParent]) REFERENCES [dbo].[PreInventoryMov] ([IDPreInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Cotacao_PreInventoryMov_IDCotacao...';


GO
ALTER TABLE [dbo].[PreInventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_Cotacao_PreInventoryMov_IDCotacao] FOREIGN KEY ([IDCotacao]) REFERENCES [dbo].[Cotacao] ([IDCotacao]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_Store_PreInventoryMov_StoreID...';


GO
ALTER TABLE [dbo].[PreInventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_Store_PreInventoryMov_StoreID] FOREIGN KEY ([StoreID]) REFERENCES [dbo].[Store] ([IDStore]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_SystemUser_PreInvnetoryMov_UserID...';


GO
ALTER TABLE [dbo].[PreInventoryMov] WITH NOCHECK
    ADD CONSTRAINT [FK_SystemUser_PreInvnetoryMov_UserID] FOREIGN KEY ([UserID]) REFERENCES [dbo].[SystemUser] ([IDUser]) ON DELETE NO ACTION ON UPDATE NO ACTION NOT FOR REPLICATION;


GO
PRINT N'Creating FK_PreInventoryMov_SaleItemCommission_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[SaleItemCommission] WITH NOCHECK
    ADD CONSTRAINT [FK_PreInventoryMov_SaleItemCommission_IDPreInventoryMov] FOREIGN KEY ([IDPreInventoryMov]) REFERENCES [dbo].[PreInventoryMov] ([IDPreInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_PreInventoryMov_InvMovPrice_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[Inv_MovPrice] WITH NOCHECK
    ADD CONSTRAINT [FK_PreInventoryMov_InvMovPrice_IDPreInventoryMov] FOREIGN KEY ([IDPreInventoryMov]) REFERENCES [dbo].[PreInventoryMov] ([IDPreInventoryMov]) ON DELETE NO ACTION ON UPDATE NO ACTION;


GO
PRINT N'Creating FK_ManualDiscount_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[ManualDiscount] WITH NOCHECK
    ADD CONSTRAINT [FK_ManualDiscount_IDPreInventoryMov] FOREIGN KEY ([IDPreInventoryMov]) REFERENCES [dbo].[PreInventoryMov] ([IDPreInventoryMov]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating FK_ManualPrice_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[ManualPrice] WITH NOCHECK
    ADD CONSTRAINT [FK_ManualPrice_IDPreInventoryMov] FOREIGN KEY ([IDPreInventoryMov]) REFERENCES [dbo].[PreInventoryMov] ([IDPreInventoryMov]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating FK_PIMAppliedCoupons_IDPreInventoryMov...';


GO
ALTER TABLE [dbo].[PIMAppliedCoupons] WITH NOCHECK
    ADD CONSTRAINT [FK_PIMAppliedCoupons_IDPreInventoryMov] FOREIGN KEY ([PreInventoryMovID]) REFERENCES [dbo].[PreInventoryMov] ([IDPreInventoryMov]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Altering FK_CashRegMov_CashRegLog_IDCashRegMov...';


GO
ALTER TABLE [dbo].[CashRegLog] CHECK CONSTRAINT [FK_CashRegMov_CashRegLog_IDCashRegMov];


GO
PRINT N'Altering FK_CashRegTipoLog_CashRegLog_IDCashRegTipoLog...';


GO
ALTER TABLE [dbo].[CashRegLog] CHECK CONSTRAINT [FK_CashRegTipoLog_CashRegLog_IDCashRegTipoLog];


GO
PRINT N'Altering FK_CashRegLog_CashRegLogComplement_IDCashRegLog...';


GO
ALTER TABLE [dbo].[CashRegLogComplement] CHECK CONSTRAINT [FK_CashRegLog_CashRegLogComplement_IDCashRegLog];


GO
PRINT N'Altering FK_CashRegLogComplement_CashRegLogReason_IDCashRegLogReason...';


GO
ALTER TABLE [dbo].[CashRegLogComplement] CHECK CONSTRAINT [FK_CashRegLogComplement_CashRegLogReason_IDCashRegLogReason];


GO
PRINT N'Altering FK_CashRegStatus_CashRegMov_IDCashRegStatus...';


GO
ALTER TABLE [dbo].[CashRegMov] CHECK CONSTRAINT [FK_CashRegStatus_CashRegMov_IDCashRegStatus];


GO
PRINT N'Altering FK_CashRegMov_CashRegMovPaymentLog_IDCashRegMov...';


GO
ALTER TABLE [dbo].[CashRegMovPaymentLog] CHECK CONSTRAINT [FK_CashRegMov_CashRegMovPaymentLog_IDCashRegMov];


GO
PRINT N'Altering FK_Fin_Banco_CashRegMovPaymentLog_IDBanco...';


GO
ALTER TABLE [dbo].[CashRegMovPaymentLog] CHECK CONSTRAINT [FK_Fin_Banco_CashRegMovPaymentLog_IDBanco];


GO
PRINT N'Altering FK_Cotacao_CotacaoResult_IDCotacao...';


GO
ALTER TABLE [dbo].[CotacaoResult] CHECK CONSTRAINT [FK_Cotacao_CotacaoResult_IDCotacao];


GO
PRINT N'Altering FK_Cotacao_CotacaoToFornec_IDCotacao...';


GO
ALTER TABLE [dbo].[CotacaoToFornec] CHECK CONSTRAINT [FK_Cotacao_CotacaoToFornec_IDCotacao];


GO
PRINT N'Altering FK_Cotacao_CotacaoToModel_IDCotacao...';


GO
ALTER TABLE [dbo].[CotacaoToModel] CHECK CONSTRAINT [FK_Cotacao_CotacaoToModel_IDCotacao];


GO
PRINT N'Altering FK_DeliverType_Estimated_IDDeliverType...';


GO
ALTER TABLE [dbo].[Estimated] CHECK CONSTRAINT [FK_DeliverType_Estimated_IDDeliverType];


GO
PRINT N'Altering FK_Estimated_EstimatedItem_IDEstimated...';


GO
ALTER TABLE [dbo].[EstimatedItem] CHECK CONSTRAINT [FK_Estimated_EstimatedItem_IDEstimated];


GO
PRINT N'Altering FK_InvDepartment_EstimatedItem_IDDepartment...';


GO
ALTER TABLE [dbo].[EstimatedItem] CHECK CONSTRAINT [FK_InvDepartment_EstimatedItem_IDDepartment];


GO
PRINT N'Altering FK_Banco_BancoAgencia_IDBanco...';


GO
ALTER TABLE [dbo].[Fin_BancoAgencia] CHECK CONSTRAINT [FK_Banco_BancoAgencia_IDBanco];


GO
PRINT N'Altering FK_CentroCusto_CentroCusto_IDCentroCustoParent...';


GO
ALTER TABLE [dbo].[Fin_CentroCusto] CHECK CONSTRAINT [FK_CentroCusto_CentroCusto_IDCentroCustoParent];


GO
PRINT N'Altering FK_Banco_ContaCorrente_IDBanco...';


GO
ALTER TABLE [dbo].[Fin_ContaCorrente] CHECK CONSTRAINT [FK_Banco_ContaCorrente_IDBanco];


GO
PRINT N'Altering FK_BancoAgencia_ContaCorrente_IDBancoAgencia...';


GO
ALTER TABLE [dbo].[Fin_ContaCorrente] CHECK CONSTRAINT [FK_BancoAgencia_ContaCorrente_IDBancoAgencia];


GO
PRINT N'Altering FK_CentroCusto_ContaCorrente_IDCentroCusto...';


GO
ALTER TABLE [dbo].[Fin_ContaCorrente] CHECK CONSTRAINT [FK_CentroCusto_ContaCorrente_IDCentroCusto];


GO
PRINT N'Altering FK_ContaCorrente_ContaCorrenteSaldo_IDContaCorrente...';


GO
ALTER TABLE [dbo].[Fin_ContaCorrenteSaldo] CHECK CONSTRAINT [FK_ContaCorrente_ContaCorrenteSaldo_IDContaCorrente];


GO
PRINT N'Altering FK_DocumentoTipo_DesdobramentoTipo_IDDocumentoTipo...';


GO
ALTER TABLE [dbo].[Fin_DesdobramentoTipo] CHECK CONSTRAINT [FK_DocumentoTipo_DesdobramentoTipo_IDDocumentoTipo];


GO
PRINT N'Altering FK_DesdobramentoTipo_DocumentoTipo_IDDesdobramentoTipoDefault...';


GO
ALTER TABLE [dbo].[Fin_DocumentoTipo] CHECK CONSTRAINT [FK_DesdobramentoTipo_DocumentoTipo_IDDesdobramentoTipoDefault];


GO
PRINT N'Altering FK_Banco_Lancamento_IDBancoQuitPrev...';


GO
ALTER TABLE [dbo].[Fin_Lancamento] CHECK CONSTRAINT [FK_Banco_Lancamento_IDBancoQuitPrev];


GO
PRINT N'Altering FK_BancoAgencia_Lancamento_IDBancoAgenciaQuitPrev...';


GO
ALTER TABLE [dbo].[Fin_Lancamento] CHECK CONSTRAINT [FK_BancoAgencia_Lancamento_IDBancoAgenciaQuitPrev];


GO
PRINT N'Altering FK_CashRegMov_Lancamento_IDCashRegMov...';


GO
ALTER TABLE [dbo].[Fin_Lancamento] CHECK CONSTRAINT [FK_CashRegMov_Lancamento_IDCashRegMov];


GO
PRINT N'Altering FK_CentroCusto_Lancamento_IDCentroCusto...';


GO
ALTER TABLE [dbo].[Fin_Lancamento] CHECK CONSTRAINT [FK_CentroCusto_Lancamento_IDCentroCusto];


GO
PRINT N'Altering FK_ContaCorrente_Lancamento_IDContaCorrentePrevista...';


GO
ALTER TABLE [dbo].[Fin_Lancamento] CHECK CONSTRAINT [FK_ContaCorrente_Lancamento_IDContaCorrentePrevista];


GO
PRINT N'Altering FK_DesdobramentoTipo_Lancamento_IDDesdobramentoTipo...';


GO
ALTER TABLE [dbo].[Fin_Lancamento] CHECK CONSTRAINT [FK_DesdobramentoTipo_Lancamento_IDDesdobramentoTipo];


GO
PRINT N'Altering FK_DocumentoTipo_Lancamento_IDDocumentoTipo...';


GO
ALTER TABLE [dbo].[Fin_Lancamento] CHECK CONSTRAINT [FK_DocumentoTipo_Lancamento_IDDocumentoTipo];


GO
PRINT N'Altering FK_Fin_Banco_Fin_Lancamento_IDBankCheck...';


GO
ALTER TABLE [dbo].[Fin_Lancamento] CHECK CONSTRAINT [FK_Fin_Banco_Fin_Lancamento_IDBankCheck];


GO
PRINT N'Altering FK_Fin_Lancamento_Fin_Lancamento_IDLancamentoParent...';


GO
ALTER TABLE [dbo].[Fin_Lancamento] CHECK CONSTRAINT [FK_Fin_Lancamento_Fin_Lancamento_IDLancamentoParent];


GO
PRINT N'Altering FK_Fin_Lancamento_Fin_LancamentoComplement_IDLancamento...';


GO
ALTER TABLE [dbo].[Fin_LancamentoComplement] CHECK CONSTRAINT [FK_Fin_Lancamento_Fin_LancamentoComplement_IDLancamento];


GO
PRINT N'Altering FK_ContaCorrente_CentroCusto_IDCentroCustoDefault...';


GO
ALTER TABLE [dbo].[Fin_LancamentoTipo] CHECK CONSTRAINT [FK_ContaCorrente_CentroCusto_IDCentroCustoDefault];


GO
PRINT N'Altering FK_ContaCorrente_LancamentoTipo_IDContaCorrenteDefault...';


GO
ALTER TABLE [dbo].[Fin_LancamentoTipo] CHECK CONSTRAINT [FK_ContaCorrente_LancamentoTipo_IDContaCorrenteDefault];


GO
PRINT N'Altering FK_Banco_Quitacao_IDBanco...';


GO
ALTER TABLE [dbo].[Fin_Quitacao] CHECK CONSTRAINT [FK_Banco_Quitacao_IDBanco];


GO
PRINT N'Altering FK_BancoAgencia_Quitacao_IDBancoAgencia...';


GO
ALTER TABLE [dbo].[Fin_Quitacao] CHECK CONSTRAINT [FK_BancoAgencia_Quitacao_IDBancoAgencia];


GO
PRINT N'Altering FK_ContaCorrente_Quitacao_IDContaCorrente...';


GO
ALTER TABLE [dbo].[Fin_Quitacao] CHECK CONSTRAINT [FK_ContaCorrente_Quitacao_IDContaCorrente];


GO
PRINT N'Altering FK_ContaCorrente_Transferencia_IDContaCorrenteCredito...';


GO
ALTER TABLE [dbo].[Fin_Transferencia] CHECK CONSTRAINT [FK_ContaCorrente_Transferencia_IDContaCorrenteCredito];


GO
PRINT N'Altering FK_ContaCorrente_Transferencia_IDContaCorrenteDebito...';


GO
ALTER TABLE [dbo].[Fin_Transferencia] CHECK CONSTRAINT [FK_ContaCorrente_Transferencia_IDContaCorrenteDebito];


GO
PRINT N'Altering FK_CostType_GroupCost_IDCostType...';


GO
ALTER TABLE [dbo].[GroupCost] CHECK CONSTRAINT [FK_CostType_GroupCost_IDCostType];


GO
PRINT N'Altering FK_GroupCost_GroupCostGift_IDGroupCost...';


GO
ALTER TABLE [dbo].[GroupCostGift] CHECK CONSTRAINT [FK_GroupCost_GroupCostGift_IDGroupCost];


GO
PRINT N'Altering FK_HistoryType_History_IDHIstoryType...';


GO
ALTER TABLE [dbo].[History] CHECK CONSTRAINT [FK_HistoryType_History_IDHIstoryType];


GO
PRINT N'Altering FK_InvColor_IDColor_Inv_ColorToGroup_IDColor...';


GO
ALTER TABLE [dbo].[Inv_ColorToGroup] CHECK CONSTRAINT [FK_InvColor_IDColor_Inv_ColorToGroup_IDColor];


GO
PRINT N'Altering FK_InvCount_InvCountItem_IDCount...';


GO
ALTER TABLE [dbo].[Inv_CountItem] CHECK CONSTRAINT [FK_InvCount_InvCountItem_IDCount];


GO
PRINT N'Altering FK_InvCount_InvFroze_IDCount...';


GO
ALTER TABLE [dbo].[Inv_FrozeCount] CHECK CONSTRAINT [FK_InvCount_InvFroze_IDCount];


GO
PRINT N'Altering FK_InvDepartment_InvModelDepartment_IDDepartment...';


GO
ALTER TABLE [dbo].[Inv_ModelDepartment] CHECK CONSTRAINT [FK_InvDepartment_InvModelDepartment_IDDepartment];


GO
PRINT N'Altering FK_Inventory_InvModelDepartment_IDStore_IDModel...';


GO
ALTER TABLE [dbo].[Inv_ModelDepartment] CHECK CONSTRAINT [FK_Inventory_InvModelDepartment_IDStore_IDModel];


GO
PRINT N'Altering FK_Inv_NutritionItem_Inv_ModelNutrition_IDNutritionItem...';


GO
ALTER TABLE [dbo].[Inv_ModelNutrition] CHECK CONSTRAINT [FK_Inv_NutritionItem_Inv_ModelNutrition_IDNutritionItem];


GO
PRINT N'Altering FK_InvDescriptionPrice_InvModelPrice_IDDescriptionPrice...';


GO
ALTER TABLE [dbo].[Inv_ModelPrice] CHECK CONSTRAINT [FK_InvDescriptionPrice_InvModelPrice_IDDescriptionPrice];


GO
PRINT N'Altering FK_Inv_Lot_Inv_MovComplement_IDLot...';


GO
ALTER TABLE [dbo].[Inv_MovComplement] CHECK CONSTRAINT [FK_Inv_Lot_Inv_MovComplement_IDLot];


GO
PRINT N'Altering FK_InvMovReason_InvMovComplement_IDInventoryMov...';


GO
ALTER TABLE [dbo].[Inv_MovComplement] CHECK CONSTRAINT [FK_InvMovReason_InvMovComplement_IDInventoryMov];


GO
PRINT N'Altering FK_InvDescriptionPrice_InvMovPrice_IDDescriptionPrice...';


GO
ALTER TABLE [dbo].[Inv_MovPrice] CHECK CONSTRAINT [FK_InvDescriptionPrice_InvMovPrice_IDDescriptionPrice];


GO
PRINT N'Altering FK_Inv_Nutrition_Inv_NutritionItem_IDNutrition...';


GO
ALTER TABLE [dbo].[Inv_NutritionItem] CHECK CONSTRAINT [FK_Inv_Nutrition_Inv_NutritionItem_IDNutrition];


GO
PRINT N'Altering FK_Inv_Model_Inv_StoreModelLot_IDLot...';


GO
ALTER TABLE [dbo].[Inv_StoreModelLot] CHECK CONSTRAINT [FK_Inv_Model_Inv_StoreModelLot_IDLot];


GO
PRINT N'Altering FK_InvDescriptionPrice_InvStorePrice_IDDescriptionPrice...';


GO
ALTER TABLE [dbo].[Inv_StorePrice] CHECK CONSTRAINT [FK_InvDescriptionPrice_InvStorePrice_IDDescriptionPrice];


GO
PRINT N'Altering FK_CostType_InvoiceToCostType_IDCostType...';


GO
ALTER TABLE [dbo].[InvoiceToCostType] CHECK CONSTRAINT [FK_CostType_InvoiceToCostType_IDCostType];


GO
PRINT N'Altering FK_Inventory_InvResetHistory_IDStoreIDModel...';


GO
ALTER TABLE [dbo].[InvResetHistory] CHECK CONSTRAINT [FK_Inventory_InvResetHistory_IDStoreIDModel];


GO
PRINT N'Altering FK_ContaCorrente_MeioPag_IDContaCorrente...';


GO
ALTER TABLE [dbo].[MeioPag] CHECK CONSTRAINT [FK_ContaCorrente_MeioPag_IDContaCorrente];


GO
PRINT N'Altering FK_ContaCorrente_MeioPagToStore_IDContaCorrente...';


GO
ALTER TABLE [dbo].[MeioPagToStore] CHECK CONSTRAINT [FK_ContaCorrente_MeioPagToStore_IDContaCorrente];


GO
PRINT N'Altering FK_Estado_MntPessoaAddress_IDEstado...';


GO
ALTER TABLE [dbo].[Mnt_PessoaAddress] CHECK CONSTRAINT [FK_Estado_MntPessoaAddress_IDEstado];


GO
PRINT N'Altering FK_Inv_Model_ModelTransfDet_IDLot...';


GO
ALTER TABLE [dbo].[ModelTransfDet] CHECK CONSTRAINT [FK_Inv_Model_ModelTransfDet_IDLot];


GO
PRINT N'Altering FK_Breed_IDBreed_Pet_IDBreed...';


GO
ALTER TABLE [dbo].[Pet] CHECK CONSTRAINT [FK_Breed_IDBreed_Pet_IDBreed];


GO
PRINT N'Altering FK_Inv_Model_Pur_PurchaseItem_IDLot...';


GO
ALTER TABLE [dbo].[Pur_PurchaseItem] CHECK CONSTRAINT [FK_Inv_Model_Pur_PurchaseItem_IDLot];


GO
PRINT N'Altering FK_Inv_Lot_Repair_IDLot...';


GO
ALTER TABLE [dbo].[Repair] CHECK CONSTRAINT [FK_Inv_Lot_Repair_IDLot];


GO
PRINT N'Altering FK_InvDefectType_Repair_IDDefectType...';


GO
ALTER TABLE [dbo].[Repair] CHECK CONSTRAINT [FK_InvDefectType_Repair_IDDefectType];


GO
PRINT N'Altering FK_Cotacao_Request_IDCotacao...';


GO
ALTER TABLE [dbo].[Request] CHECK CONSTRAINT [FK_Cotacao_Request_IDCotacao];


GO
PRINT N'Altering FK_FinLancamento_SalAccountCardMov_IDLancamento...';


GO
ALTER TABLE [dbo].[Sal_AccountCardMov] CHECK CONSTRAINT [FK_FinLancamento_SalAccountCardMov_IDLancamento];


GO
PRINT N'Altering FK_DeliverType_SalInvoiceShipping_IDDeliverType...';


GO
ALTER TABLE [dbo].[Sal_InvoiceShipping] CHECK CONSTRAINT [FK_DeliverType_SalInvoiceShipping_IDDeliverType];


GO
PRINT N'Altering FK_Estado_SalInvoiceShipping_IDEstado...';


GO
ALTER TABLE [dbo].[Sal_InvoiceShipping] CHECK CONSTRAINT [FK_Estado_SalInvoiceShipping_IDEstado];


GO
PRINT N'Altering FK_InvDefectType_SalItemRepair_IDDefectType...';


GO
ALTER TABLE [dbo].[Sal_ItemRepair] CHECK CONSTRAINT [FK_InvDefectType_SalItemRepair_IDDefectType];


GO
PRINT N'Altering FK_CashRegMov_Sal_NotasCanceladas_IDCashRegMov...';


GO
ALTER TABLE [dbo].[Sal_NotasCanceladas] CHECK CONSTRAINT [FK_CashRegMov_Sal_NotasCanceladas_IDCashRegMov];


GO
PRINT N'Altering FK_Estimated_Sal_PaymentCondition_IDEstimated...';


GO
ALTER TABLE [dbo].[Sal_PaymentCondition] CHECK CONSTRAINT [FK_Estimated_Sal_PaymentCondition_IDEstimated];


GO
PRINT N'Altering FK_InvDepartment_SalRemovedItem_IDDepartment...';


GO
ALTER TABLE [dbo].[Sal_RemovedItem] CHECK CONSTRAINT [FK_InvDepartment_SalRemovedItem_IDDepartment];


GO
PRINT N'Altering FK_Fin_Lancamento_Sal_StoreAcc_IDLancamento...';


GO
ALTER TABLE [dbo].[Sal_StoreAccount] CHECK CONSTRAINT [FK_Fin_Lancamento_Sal_StoreAcc_IDLancamento];


GO
PRINT N'Altering FK_Inv_DefectType_Ser_SOItemdefect_IDdefectType...';


GO
ALTER TABLE [dbo].[Ser_SOItemDefect] CHECK CONSTRAINT [FK_Inv_DefectType_Ser_SOItemdefect_IDdefectType];


GO
PRINT N'Altering FK_Estado_SisEmpresa_IDEstado...';


GO
ALTER TABLE [dbo].[Sis_Empresa] CHECK CONSTRAINT [FK_Estado_SisEmpresa_IDEstado];


GO
PRINT N'Altering FK__Sis_Usuar__IDGru__100C566E...';


GO
ALTER TABLE [dbo].[Sis_UsuarioGrupo] CHECK CONSTRAINT [FK__Sis_Usuar__IDGru__100C566E];


GO
PRINT N'Altering FK_CentroCusto_Store_IDCentroCusto...';


GO
ALTER TABLE [dbo].[Store] CHECK CONSTRAINT [FK_CentroCusto_Store_IDCentroCusto];


GO
PRINT N'Altering FK_Estado_Store_IDEstado...';


GO
ALTER TABLE [dbo].[Store] CHECK CONSTRAINT [FK_Estado_Store_IDEstado];


GO
PRINT N'Altering FK_InvDepartment_TabGroup_IDDepartment...';


GO
ALTER TABLE [dbo].[TabGroup] CHECK CONSTRAINT [FK_InvDepartment_TabGroup_IDDepartment];


GO
PRINT N'Altering FK_Fin_LancamentoTipo_TaxCategory_IDLancamentoTipo...';


GO
ALTER TABLE [dbo].[TaxCategory] CHECK CONSTRAINT [FK_Fin_LancamentoTipo_TaxCategory_IDLancamentoTipo];


GO
PRINT N'Altering FK_Hotel_TouristGroup_IDHotel...';


GO
ALTER TABLE [dbo].[TouristGroup] CHECK CONSTRAINT [FK_Hotel_TouristGroup_IDHotel];


GO
PRINT N'Creating [dbo].[tr_CashRegister_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER tr_CashRegister_InsUpt ON dbo.CashRegister
FOR INSERT,UPDATE
NOT FOR REPLICATION
AS

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	SUMARIO

		- Testo a existencia do CashRegister

	LOG DE MODIFICAÇÕES

	Data			Programador		Modificação
	--------------------------------------- --------------------------------------- -----------------------------------------------------------------------------------------------------
	15 May  2000		Eduardo Costa		Criacao;
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  */


if  	@@rowcount = 0
	return

IF ISNULL(APP_NAME (), '') = 'MRREPLICATION' 
	RETURN


SET NOCOUNT ON

if	EXISTS 	(
		SELECT
			INSERTED.IDCashRegister
		FROM
			INSERTED,
			CashRegister
		WHERE
			INSERTED.NAME = CashRegister.NAME
			AND
			CashRegister.IDCashRegister <> INSERTED.IDCashRegister
			AND
			INSERTED.Desativado = 0
			AND
			CashRegister.Desativado = 0
		)

	BEGIN
		RAISERROR ('DUP_CashRegister_CashRegister can not be duplicated',16,-1)
		ROLLBACK TRANSACTION
		RETURN
	END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_CashRegister_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_CashRegister_Repl_Del] ON CashRegister FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'CashRegister', 'DELETE FROM CashRegister WHERE ' + 'Convert(varchar, IDCashRegister)  = ' + QuoteName(Convert(varchar, DELETED.IDCashRegister), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_CashRegister_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_CashRegister_Repl_InsUpt] ON CashRegister FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE CashRegister SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDCashRegister = CashRegister.IDCashRegister

       UPDATE CashRegister SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDCashRegister = CashRegister.IDCashRegister

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Inv_ModelVendor_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Inv_ModelVendor_Repl_Del] ON Inv_ModelVendor FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_ModelVendor', 'DELETE FROM Inv_ModelVendor WHERE ' + 'Convert(varchar, IDPessoa)  = ' + QuoteName(Convert(varchar, DELETED.IDPessoa), CHAR(39)) + ' AND ' + 'Convert(varchar, IDModel)  = ' + QuoteName(Convert(varchar, DELETED.IDModel), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Inv_ModelVendor_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Inv_ModelVendor_Repl_InsUpt] ON Inv_ModelVendor FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_ModelVendor SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPessoa = Inv_ModelVendor.IDPessoa
AND
INSERTED.IDModel = Inv_ModelVendor.IDModel

       UPDATE Inv_ModelVendor SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPessoa = Inv_ModelVendor.IDPessoa
AND
DELETED.IDModel = Inv_ModelVendor.IDModel

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_InventoryMov_All]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER tr_InventoryMov_All ON dbo.InventoryMov
FOR INSERT, UPDATE, DELETE
NOT FOR REPLICATION
AS

/* ----------------------------------------------------------------------------------------------------------------------
	SUMARIO

		- Teste da existencia de MODEL no Inventory
		- Teste existencia do MODEL  no Inventory MovTotals
		- Teste da existencia do MASTER no Inventory
		- Teste existencia do MASTER no Inventory MovTotals
		- Atualiza o LastMovDate no Model, se for Insert and Update
		- Atualiza o DateLastSellingPrice no Model, se for Insert and Update
		- INVENTORY e INVMASTER:  Atualiza QtyOnHand
		- MODEL e MODEL MASTER: Atualiza o Total no model
		- MODEL e MODEL MASTER: Atualiza o InventoryMovTotals
		- MODEL e MODEL MASTER: Manda para a lixeira se a quantidade zerar e o parametro do servidor for TRUE

	LOG DE MODIFICAÇÕES

	Data			Programador		Modificação
	-----------------------	-----------------------	-----------------------------------------------------------------
	15 May  2000		Eduardo Costa		Criacao;
	01 Aug  2001		Rodrigo Costa		Gravar o LastMovDate no Model;
	22 Aug  2001		Davi Gouveia		Gravar o DateLastSellingPrice no Model;
	30 Oct	2003		Andre Bogado		Inserido cursor Inventory_Cursor;
							Inserido cursor InventoryMaster_Cursor;
							Inserido nome dos campos de InventoryMovTotal;
	12 Dec	2006		Carlos Lima		Cálculo do custo médio ( AvgCost );
	09 Jun	2006		Maximiliano Muniz	Enviar item para lixeira;
	28 Jun	2006		Leonardo Riego		Vericar antes de enviar o item para lixeira se possui o campo
							SendToTrash para true;
	27 Aug	2007		Maximiliano Muniz	Substituição de cursores por selects;
	----------------------------------------------------------------------------------------------------------------- */

IF @@rowcount = 0
	RETURN

IF ISNULL(APP_NAME (), '') = 'MRREPLICATION' 
	RETURN

SET NOCOUNT ON

--Declaração de variáveis para o Cursor de Inventory
DECLARE @StoreID	int
DECLARE @ModelID	int
DECLARE @IDInventory	int
DECLARE @SendTrash	bit

----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
--	B O T H      I N S E R T      A N D      D E L E T E
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------
--	Teste da existencia de MODEL no Inventory, e caso não exista faz insert
----------------------------------------------------------------------------------------------------------------------------------

IF EXISTS (SELECT IM.StoreID, IM.ModelID FROM Inserted IM LEFT OUTER JOIN Inventory I ON (IM.StoreID = I.StoreID AND IM.ModelID = I.ModelID) WHERE I.ModelID IS NULL GROUP BY IM.StoreID, IM.ModelID)
BEGIN
	EXEC sp_Sis_GetNextCode'Inventory.IDInventory', @IDInventory OUTPUT

	INSERT Inventory
		(
		IDInventory,
		StoreID,
		ModelID
		)
		(
		SELECT
			@IDInventory,
			IM.StoreID,
			IM.ModelID
		FROM
			Inserted IM
		GROUP BY
			IM.StoreID,
			IM.ModelID
		)
END

----------------------------------------------------------------------------------------------------------------------------------
--	Teste existencia do MODEL  no Inventory MovTotals
----------------------------------------------------------------------------------------------------------------------------------

INSERT 	InventoryMovTotal
		(
		StoreID,
		ModelID,
		InventMovTypeID,
		[Year],
		[Month],
		TotQty,
		TotSale,
		TotCost
		)
	SELECT
		IT.StoreID,
		IT.ModelID,
		IT.InventMovTypeID,
		IT.[Year],
		IT.[Month],
		0,
		0,
		0
	FROM	(
		SELECT
			I.StoreID,
			I.ModelID,
			I.InventMovTypeID,
			DatePart(yy, I.MovDate) [Year],
			DatePart(mm, I.MovDate) [Month]
		FROM
			Inserted I
		GROUP BY
			I.StoreID,
			I.ModelID,
			I.InventMovTypeID,
                 	DatePart(yy, I.MovDate),
			DatePart(mm, I.MovDate)
		) IT
		LEFT OUTER JOIN InventoryMovTotal IMT ON (IMT.StoreID = IT.StoreID AND IMT.ModelID = IT.ModelID AND IMT.InventMovTypeID = IT.InventMovTypeID AND IMT.[Year] = IT.[Year] AND IMT.[Month] = IT.[Month])
	WHERE
		IMT.StoreID IS NULL

----------------------------------------------------------------------------------------------------------------------------------
--	Teste da existencia do MASTER no Inventory
----------------------------------------------------------------------------------------------------------------------------------

IF EXISTS (SELECT IM.StoreID, M.IDModelParent FROM Inserted IM JOIN Model M ON (IM.ModelID = M.IDModel) LEFT OUTER JOIN Inventory I ON (IM.StoreID = I.StoreID AND M.IDModelParent = I.ModelID) WHERE I.ModelID IS NULL AND M.IDModelParent IS NULL GROUP BY IM.StoreID, M.IDModelParent)
BEGIN
	EXEC sp_Sis_GetNextCode'Inventory.IDInventory', @IDInventory OUTPUT

	INSERT Inventory
		(
		IDInventory,
		StoreID,
		ModelID
		)
	SELECT
		@IDInventory,
		IM.StoreID,
		M.IDModelParent
	FROM
		Inserted IM
		JOIN Model M ON (IM.ModelID = M.IDModel)
		LEFT OUTER JOIN Inventory I ON (IM.StoreID =I.StoreID AND M.IDModelParent = I.ModelID)
	WHERE
		I.ModelID IS NULL
		AND M.IDModelParent IS NOT NULL
	GROUP BY
		IM.StoreID,
		M.IDModelParent
END

----------------------------------------------------------------------------------------------------------------------------------
--	Teste existencia do MASTER no Inventory MovTotals
----------------------------------------------------------------------------------------------------------------------------------

INSERT	InventoryMovTotal
		(
		StoreID,
		ModelID,
		InventMovTypeID,
		[Year],
		[Month],
		TotQty,
		TotSale,
		TotCost
		)
	SELECT
		IT.StoreID,
		IT.ModelID,
		IT.InventMovTypeID,
		IT.[Year],
		IT.[Month],
		0,
		0,
		0
	FROM 	(
		SELECT
			IM.StoreID,
			M.IDModelParent as ModelID,
			IM.InventMovTypeID,
			DatePart(yy, IM.MovDate) [Year],
			DatePart(mm, IM.MovDate) [Month]
 		FROM
			Inserted IM
			JOIN Model M ON (IM.ModelID = M.IDModel)
		WHERE
			M.IDModelParent IS NOT NULL
		GROUP BY
			IM.StoreID,
			M.IDModelParent,
			IM.InventMovTypeID,
			DatePart(yy, IM.MovDate),
			DatePart(mm, IM.MovDate)
		) IT
		LEFT OUTER JOIN InventoryMovTotal IMT ON (IMT.StoreID = IT.StoreID AND IMT.ModelID = IT.ModelID AND IMT.InventMovTypeID = IT.InventMovTypeID AND IMT.[Year] = IT.[Year] AND IMT.[Month] = IT.[Month])
	WHERE
		IMT.StoreID IS NULL

----------------------------------------------------------------------------------------------------------------------------------
--	Atualiza o LastMovDate no Model, se for Insert and Update
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	M
SET
	M.LastMovDate  = IM.MovDate
FROM
	Inserted IM
	JOIN Model M ON (IM.ModelID = M.IDModel)
WHERE
	IsNull(M.LastMovDate,0)	< IM.MovDate

----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
--	D E L E T E
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------
--	Parte da Delecao do SerialMov
--	Só executa se for delete mesmo, nao se for update
----------------------------------------------------------------------------------------------------------------------------------

DELETE
	SM
FROM
	SerialMov SM
	JOIN Deleted IMD ON (IMD.IDInventoryMov = SM.InventoryMovID)
	LEFT OUTER JOIN Inserted IMI ON (IMI.IDInventoryMov = SM.InventoryMovID)
WHERE
	IMI.IDInventoryMov IS NULL

----------------------------------------------------------------------------------------------------------------------------------
--	INVENTORY: Atualiza o Custo medio no Inventory
----------------------------------------------------------------------------------------------------------------------------------

-- Nao Compra

UPDATE
	Inv
SET
	AvgCostTotal = AvgCostTotal - (IsNull(D.AvgCost, 0) * ISNULL((2*IsNull(IMT.UpdateOnHand, 0)-1) * IsNull(D.Qty, 0), 0))
FROM	
	Inventory Inv 
	INNER JOIN Deleted D ON (Inv.ModelID = D.ModelID AND Inv.StoreID = D.StoreID AND D.InventMovTypeID <> 2) 
	INNER JOIN InventoryMovType IMT ON (D.InventMovTypeID = IMT.IDInventMovType)

----------------------------------------------------------------------------------------------------------------------------------
--	INVENTORY:  Atualiza QtyOnHand
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	I
SET
	I.QtyOnHand 		= IsNull(I.QtyOnHand, 0) - Total.OnHand,
	I.QtyOnOrder 		= IsNull(I.QtyOnOrder, 0) - Total.OnOrder,
	I.QtyOnRepair 		= IsNull(I.QtyOnRepair, 0) - Total.OnRepair,
	I.QtyOnPrePurchase	= IsNull(I.QtyOnPrePurchase, 0) - Total.OnPrePurchase,
	I.QtyOnPreSale 		= IsNull(I.QtyOnPreSale, 0) - Total.OnPreSale
FROM
	(
	SELECT
		ModelID,
		StoreID,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnHand-1), 0) ) as OnHand,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPreSale-1), 0) ) as OnPreSale
	FROM
		Deleted IM
		JOIN
		InventoryMovType IMT ON (IM.InventMovTypeID = IMT.IDInventMovType)
	GROUP BY
		ModelID,
		StoreID
	) Total
	JOIN
        Inventory I ON (Total.ModelID = I.ModelID AND Total.StoreID = I.StoreID)

----------------------------------------------------------------------------------------------------------------------------------
--	INVENTORY MASTER:  Atualiza QtyOnHand
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	I
SET
	I.QtyOnHand 		= IsNull(I.QtyOnHand, 0) - Total.OnHand,
	I.QtyOnOrder 		= IsNull(I.QtyOnOrder, 0) - Total.OnOrder,
	I.QtyOnRepair 		= IsNull(I.QtyOnRepair, 0) - Total.OnRepair,
	I.QtyOnPrePurchase	= IsNull(I.QtyOnPrePurchase, 0) - Total.OnPrePurchase,
	I.QtyOnPreSale 		= IsNull(I.QtyOnPreSale, 0) - Total.OnPreSale
FROM
	(
	SELECT
		M.IDModelParent as ModelID,
		IM.StoreID,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnHand-1), 0) ) as OnHand,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPreSale-1), 0) ) as OnPreSale
	FROM
		Deleted IM
		JOIN Model M ON (IM.ModelID = M.IDModel)
		JOIN InventoryMovType IMT ON (IM.InventMovTypeID = IMT.IDInventMovType)
	WHERE
		M.IDModelParent IS NOT NULL
	GROUP BY
		M.IDModelParent,
		IM.StoreID
	) Total
	JOIN Inventory I ON (Total.ModelID = I.ModelID AND Total.StoreID = I.StoreID)

/* Atualiza o custo médio e o saldo de custo médio, caso a movimentação zere o estoque */

UPDATE
	Inv
SET
	StoreAvgPrice = 0,
	AvgCostTotal = 0
FROM	
	Inventory Inv 
	INNER JOIN Deleted D ON (Inv.ModelID = D.ModelID AND Inv.StoreID = D.StoreID AND D.InventMovTypeID <> 2) 
WHERE
	QtyOnHand = 0

----------------------------------------------------------------------------------------------------------------------------------
--	MODEL: Atualiza o Custo medio no model
----------------------------------------------------------------------------------------------------------------------------------

-- Nao Compra

UPDATE
	Model
SET
	AvgCostTotal = AvgCostTotal - (IsNull(D.AvgCost, 0) * ISNULL((2*IsNull(IMT.UpdateOnHand, 0)-1) * IsNull(D.Qty, 0), 0))
FROM	
	Model M 
	INNER JOIN Deleted D ON (M.IDModel = D.ModelID AND D.InventMovTypeID <> 2)
	INNER JOIN InventoryMovType IMT ON (D.InventMovTypeID = IMT.IDInventMovType)
	INNER JOIN Store ST ON (ST.IDStore = D.StoreID)
WHERE
	IsNull(ST.Franchise,0) = 0

----------------------------------------------------------------------------------------------------------------------------------
--	MODEL: Atualiza o Total no model
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	M
SET
	M.TotQtyOnHand		= IsNull(M.TotQtyOnHand, 0) - Total.OnHand,
	M.TotQtyOnOrder		= IsNull(M.TotQtyOnOrder, 0) - Total.OnOrder,
	M.TotQtyOnRepair 	= IsNull(M.TotQtyOnRepair, 0) - Total.OnRepair,
	M.TotQtyOnPrePurchase	= IsNull(M.TotQtyOnPrePurchase, 0) - Total.OnPrePurchase,
	M.TotQtyOnPreSale	= IsNull(M.TotQtyOnPreSale, 0) - Total.OnPreSale
FROM
	(
	SELECT
		ModelID,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnHand-1), 0) ) as OnHand,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPreSale-1), 0) ) as OnPreSale
	FROM
		Deleted IM
		JOIN InventoryMovType IMT ON (IM.InventMovTypeID = IMT.IDInventMovType)
	GROUP BY
		ModelID
	) Total
	JOIN Model M ON (Total.ModelID = M.IDModel)

----------------------------------------------------------------------------------------------------------------------------------
--	MODEL MASTER: Atualiza o Total no model
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	M
SET
	M.TotQtyOnHand 		= IsNull(M.TotQtyOnHand, 0) - Total.OnHand,
	M.TotQtyOnOrder		= IsNull(M.TotQtyOnOrder, 0) - Total.OnOrder,
	M.TotQtyOnRepair 	= IsNull(M.TotQtyOnRepair, 0) - Total.OnRepair,
	M.TotQtyOnPrePurchase	= IsNull(M.TotQtyOnPrePurchase, 0) - Total.OnPrePurchase,
	M.TotQtyOnPreSale	= IsNull(M.TotQtyOnPreSale, 0) - Total.OnPreSale
FROM
	(
	SELECT
		IDModelParent,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnHand-1), 0) ) as OnHand,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPreSale-1), 0) ) as OnPreSale
	FROM
		Deleted IM
		JOIN Model M ON (IM.ModelID = M.IDModel)
		JOIN InventoryMovType IMT ON (IM.InventMovTypeID = IMT.IDInventMovType)
	WHERE
		M.IDModelParent IS NOT NULL
	GROUP BY
		IDModelParent
	) Total
	JOIN Model M ON (Total.IDModelParent = M.IDModel)

/* Atualiza o custo médio e o saldo de custo médio, caso a movimentação zere o estoque */

UPDATE
	Model
SET
	AvgCost = 0,
	AvgCostTotal = 0
FROM	
	Model M 
	INNER JOIN Deleted D ON (M.IDModel = D.ModelID AND D.InventMovTypeID <> 2)	
	INNER JOIN Store ST ON (ST.IDStore = D.StoreID)
WHERE
	IsNull(ST.Franchise,0) = 0
	AND
	TotQtyOnHand = 0

----------------------------------------------------------------------------------------------------------------------------------
--	MODEL: Atualiza o InventoryMovTotals
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	IMT
SET
	IMT.TotQty = IsNull(IMT.TotQty, 0) - Total.Qty,
	IMT.TotSale = IsNull(IMT.TotSale, 0) - Total.Sale,
	IMT.TotCost = IsNull(IMT.TotCost, 0) - Total.Cost
FROM
	(
	SELECT
		IM.StoreID,
		IM.ModelID,
		IM.InventMovTypeID,
		DatePart(yy, IM.MovDate) as [Year],
		DatePart(mm, IM.MovDate) as [Month],
		SUM( IsNull( IM.Qty, 0 ) ) as Qty,
		SUM( IsNull( IM.Qty * IM.SalePrice, 0 )  - IsNull(IM.Discount , 0) ) as Sale,
		SUM( IsNull( IM.Qty * IM.CostPrice, 0) ) as Cost
	FROM
		Deleted IM
	GROUP BY
		IM.StoreID,
		IM.ModelID,
		IM.InventMovTypeID,
		DatePart(yy, IM.MovDate),
		DatePart(mm, IM.MovDate)
	) as Total
	JOIN InventoryMovTotal IMT
		ON (	Total.StoreID = IMT.StoreID
			AND
			Total.ModelID = IMT.ModelID
			AND
			Total.InventMovTypeID = IMT.InventMovTypeID
			AND
			Total.[Year] = IMT.[Year]
			AND
			Total.[Month] = IMT.[Month] )

----------------------------------------------------------------------------------------------------------------------------------
--	MASTER: Atualiza o InventoryMovTotals
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	IMT
SET
	IMT.TotQty = IsNull(IMT.TotQty, 0) - Total.Qty,
	IMT.TotSale = IsNull(IMT.TotSale, 0) - Total.Sale,
	IMT.TotCost = IsNull(IMT.TotCost, 0) - Total.Cost
FROM
	(
	SELECT
		IM.StoreID,
		M.IDModelParent as ModelID,
		IM.InventMovTypeID,
		DatePart(yy, IM.MovDate) as [Year],
		DatePart(mm, IM.MovDate) as [Month],
		SUM( IsNull( IM.Qty, 0 ) ) as Qty,
		SUM( IsNull( IM.Qty * IM.SalePrice, 0 )  - IsNull(IM.Discount , 0) ) as Sale,
		SUM( IsNull( IM.Qty * IM.CostPrice, 0) ) as Cost
	FROM
		Deleted IM
		JOIN
		Model M ON (IM.ModelID = M.IDModel)
	WHERE
		M.IDModelParent IS NOT NULL
	GROUP BY
		IM.StoreID,
		M.IDModelParent,
		IM.InventMovTypeID,
		DatePart(yy, IM.MovDate),
		DatePart(mm, IM.MovDate)
	) as Total
	JOIN InventoryMovTotal IMT
		ON (	Total.StoreID = IMT.StoreID
			AND
			Total.ModelID = IMT.ModelID
			AND
			Total.InventMovTypeID = IMT.InventMovTypeID
			AND
			Total.[Year] = IMT.[Year]
			AND
			Total.[Month] = IMT.[Month] )

----------------------------------------------------------------------------------------------------------------------------------
--	MODEL: Envia o item para a lixeira caso a quantidade fique zerada e o parametro do servidor for TRUE
----------------------------------------------------------------------------------------------------------------------------------

SELECT
	@SendTrash = CASE UPPER(SrvValue) WHEN 'TRUE' THEN 1 ELSE 0 END
FROM
	Param
WHERE
	IDParam = 84

IF @SendTrash = 1
BEGIN

	UPDATE
		M
	SET
		M.Desativado = 1
	FROM
		Deleted IM
		JOIN Model M ON (IM.ModelID = M.IDModel)
	WHERE
		M.TotQtyOnHand = 0
		AND
		M.SendToTrash = 1
END

----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
--	I N S E R T
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------
--	INVENTORY: Atualiza o Custo medio no Inventory
----------------------------------------------------------------------------------------------------------------------------------

-- Compra

UPDATE
	Inv
SET
	AvgCostTotal = IsNull(AvgCostTotal, 0) + (IsNull(I.AvgCost, 0) * ISNULL((2*IsNull(IMT.UpdateOnHand, 0)-1) * IsNull(I.Qty, 0), 0))
FROM	
	Inventory Inv 
	INNER JOIN Inserted I ON (Inv.ModelID = I.ModelID AND Inv.StoreID = I.StoreID AND I.InventMovTypeID <> 2) 
	INNER JOIN InventoryMovType IMT ON (I.InventMovTypeID = IMT.IDInventMovType)

----------------------------------------------------------------------------------------------------------------------------------
--	INVENTORY: Atualiza QtyOnHand
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	I
SET
	I.QtyOnHand 		= IsNull(I.QtyOnHand, 0) + Total.OnHand,
	I.QtyOnOrder 		= IsNull(I.QtyOnOrder, 0) + Total.OnOrder,
	I.QtyOnRepair 		= IsNull(I.QtyOnRepair, 0) + Total.OnRepair,
	I.QtyOnPrePurchase	= IsNull(I.QtyOnPrePurchase, 0) + Total.OnPrePurchase,
	I.QtyOnPreSale 		= IsNull(I.QtyOnPreSale, 0) + Total.OnPreSale
FROM
	(
	SELECT
		ModelID,
		StoreID,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnHand-1), 0) ) as OnHand,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPreSale-1), 0) ) as OnPreSale
	FROM
		Inserted IM
		JOIN InventoryMovType IMT ON (IM.InventMovTypeID = IMT.IDInventMovType)
	GROUP BY
		ModelID,
		StoreID
	) Total
	JOIN
	Inventory I ON (Total.ModelID = I.ModelID AND Total.StoreID = I.StoreID)

----------------------------------------------------------------------------------------------------------------------------------
--	INVENTORY MASTER: Atualiza QtyOnHand
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	I
SET
	I.QtyOnHand 		= IsNull(I.QtyOnHand, 0) + Total.OnHand,
	I.QtyOnOrder 		= IsNull(I.QtyOnOrder, 0) + Total.OnOrder,
	I.QtyOnRepair 		= IsNull(I.QtyOnRepair, 0) + Total.OnRepair,
	I.QtyOnPrePurchase	= IsNull(I.QtyOnPrePurchase, 0) + Total.OnPrePurchase,
	I.QtyOnPreSale 		= IsNull(I.QtyOnPreSale, 0) + Total.OnPreSale
FROM
	(
	SELECT
		M.IDModelParent as ModelID,
		StoreID,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnHand-1), 0) ) as OnHand,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPreSale-1), 0) ) as OnPreSale
	FROM
		Inserted IM
		JOIN Model M ON (IM.ModelID = M.IDModel)
		JOIN InventoryMovType IMT ON (IM.InventMovTypeID = IMT.IDInventMovType)
	WHERE
		M.IDModelParent IS NOT NULL

	GROUP BY
		M.IDModelParent,
		StoreID
	) Total
	JOIN Inventory I ON (Total.ModelID = I.ModelID AND Total.StoreID = I.StoreID)

/* Atualiza o custo médio e o saldo de custo médio, caso a movimentação zere o estoque */

UPDATE
	Inv
SET
	StoreAvgPrice = 0,
	AvgCostTotal = 0
FROM	
	Inventory Inv 
	INNER JOIN Inserted I ON (Inv.ModelID = I.ModelID AND Inv.StoreID = I.StoreID AND I.InventMovTypeID <> 2) 
WHERE
	QtyOnHand = 0	

----------------------------------------------------------------------------------------------------------------------------------
--	MODEL: Atualiza o Custo medio no model
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	Model
SET
	AvgCostTotal = IsNull(AvgCostTotal, 0) + (IsNull(I.AvgCost, 0) * ISNULL((2*IsNull(IMT.UpdateOnHand, 0)-1) * IsNull(I.Qty, 0), 0))
FROM	
	Model M 
	INNER JOIN Inserted I ON (M.IDModel = I.ModelID AND I.InventMovTypeID <> 2)
	INNER JOIN InventoryMovType IMT ON (I.InventMovTypeID = IMT.IDInventMovType)
	INNER JOIN Store ST ON (ST.IDStore = I.StoreID)
WHERE
	IsNull(ST.Franchise,0) = 0

----------------------------------------------------------------------------------------------------------------------------------
--	MODEL: Atualiza o Total no Model
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	M
SET
	M.TotQtyOnHand 		= IsNull(M.TotQtyOnHand, 0) + Total.OnHand,
	M.TotQtyOnOrder		= IsNull(M.TotQtyOnOrder, 0) + Total.OnOrder,
	M.TotQtyOnRepair 		= IsNull(M.TotQtyOnRepair, 0) + Total.OnRepair,
	M.TotQtyOnPrePurchase		= IsNull(M.TotQtyOnPrePurchase, 0) + Total.OnPrePurchase,
	M.TotQtyOnPreSale		= IsNull(M.TotQtyOnPreSale, 0) + Total.OnPreSale
FROM
	(
	SELECT
		ModelID,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnHand-1), 0) ) as OnHand,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPreSale-1), 0) ) as OnPreSale
	FROM
		Inserted IM
		JOIN
		InventoryMovType IMT ON (IM.InventMovTypeID = IMT.IDInventMovType)
	GROUP BY
		ModelID
	) Total
	JOIN
	Model M ON (Total.ModelID = M.IDModel)

----------------------------------------------------------------------------------------------------------------------------------
--	MASTER: Atualiza o Total no Master
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	M
SET
	M.TotQtyOnHand 		= IsNull(M.TotQtyOnHand, 0) + Total.OnHand,
	M.TotQtyOnOrder		= IsNull(M.TotQtyOnOrder, 0) + Total.OnOrder,
	M.TotQtyOnRepair 	= IsNull(M.TotQtyOnRepair, 0) + Total.OnRepair,
	M.TotQtyOnPrePurchase	= IsNull(M.TotQtyOnPrePurchase, 0) + Total.OnPrePurchase,
	M.TotQtyOnPreSale	= IsNull(M.TotQtyOnPreSale, 0) + Total.OnPreSale
FROM
	(
	SELECT
		IDModelParent,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnHand-1), 0) ) as OnHand,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(IM.Qty * (2*IMT.UpdateOnPreSale-1), 0) ) as OnPreSale
	FROM
		Inserted IM
		JOIN Model M ON (IM.ModelID = M.IDModel)
		JOIN InventoryMovType IMT ON (IM.InventMovTypeID = IMT.IDInventMovType)
	WHERE
		M.IDModelParent IS NOT NULL
	GROUP BY
		IDModelParent
	) Total
	JOIN Model M ON (Total.IDModelParent = M.IDModel)

/* Atualiza o custo médio e o saldo de custo médio, caso a movimentação zere o estoque */

UPDATE
	Model
SET
	AvgCost = 0,
	AvgCostTotal = 0
FROM	
	Model M 
	INNER JOIN Inserted I ON (M.IDModel = I.ModelID AND I.InventMovTypeID <> 2)
	INNER JOIN Store ST ON (ST.IDStore = I.StoreID)
WHERE
	IsNull(ST.Franchise,0) = 0
	AND
	TotQtyOnHand = 0

----------------------------------------------------------------------------------------------------------------------------------
--	MODEL: Atualiza o InventoryMovTotals
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	IMT
SET
	IMT.TotQty = IsNull(IMT.TotQty, 0) + Total.Qty,
	IMT.TotSale = IsNull(IMT.TotSale, 0) + Total.Sale,
	IMT.TotCost = IsNull(IMT.TotCost, 0) + Total.Cost
FROM
	(
	SELECT
		IM.StoreID,
		IM.ModelID,
		IM.InventMovTypeID,
		DatePart(yy, IM.MovDate) as [Year],
		DatePart(mm, IM.MovDate) as [Month],
		SUM( IsNull( IM.Qty, 0 ) ) as Qty,
		SUM( IsNull( IM.Qty * IM.SalePrice, 0 )  - IsNull(IM.Discount , 0) ) as Sale,
		SUM( IsNull( IM.Qty * IM.CostPrice, 0) ) as Cost
	FROM
		Inserted IM
	GROUP BY
		IM.StoreID,
		IM.ModelID,
		IM.InventMovTypeID,
		DatePart(yy, IM.MovDate),
		DatePart(mm, IM.MovDate)
	) as Total
	JOIN InventoryMovTotal IMT
		ON (	Total.StoreID = IMT.StoreID
			AND
			Total.ModelID = IMT.ModelID
			AND
			Total.InventMovTypeID = IMT.InventMovTypeID
			AND
			Total.[Year] = IMT.[Year]
			AND
			Total.[Month] = IMT.[Month] )

----------------------------------------------------------------------------------------------------------------------------------
--	MASTER: Atualiza o InventoryMovTotals
----------------------------------------------------------------------------------------------------------------------------------

UPDATE
	IMT
SET
	IMT.TotQty = IsNull(IMT.TotQty, 0) + Total.Qty,
	IMT.TotSale = IsNull(IMT.TotSale, 0) + Total.Sale,
	IMT.TotCost = IsNull(IMT.TotCost, 0) + Total.Cost
FROM
	(
	SELECT
		IM.StoreID,
		M.IDModelParent as ModelID,
		IM.InventMovTypeID,
		DatePart(yy, IM.MovDate) as [Year],
		DatePart(mm, IM.MovDate) as [Month],
		SUM( IsNull( IM.Qty, 0 ) ) as Qty,
		SUM( IsNull( IM.Qty * IM.SalePrice, 0 )  - IsNull(IM.Discount , 0) ) as Sale,
		SUM( IsNull( IM.Qty * IM.CostPrice, 0) ) as Cost
	FROM
		Inserted IM
		JOIN
		Model M ON (IM.ModelID = M.IDModel)
	WHERE
		M.IDModelParent IS NOT NULL
	GROUP BY
		IM.StoreID,
		M.IDModelParent,
		IM.InventMovTypeID,
		DatePart(yy, IM.MovDate),
		DatePart(mm, IM.MovDate)
	) as Total
	JOIN InventoryMovTotal IMT ON (Total.StoreID = IMT.StoreID AND Total.ModelID = IMT.ModelID AND Total.InventMovTypeID = IMT.InventMovTypeID AND Total.[Year] = IMT.[Year] AND Total.[Month] = IMT.[Month])

----------------------------------------------------------------------------------------------------------------------------------
--	MODEL: Envia o item para a lixeira caso a quantidade fique zerada e o parametro do servidor for TRUE
----------------------------------------------------------------------------------------------------------------------------------

SELECT
	@SendTrash = CASE UPPER(SrvValue) WHEN 'TRUE' THEN 1 ELSE 0 END
FROM
	Param
WHERE
	IDParam = 84

IF @SendTrash = 1
BEGIN
	UPDATE
		M
	SET
		M.Desativado = 1
	FROM
		Inserted IM
		JOIN Model M ON (IM.ModelID = M.IDModel)
	WHERE
		M.TotQtyOnHand = 0
		AND
		M.SendToTrash = 1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_InventoryMov_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_InventoryMov_Repl_Del] ON InventoryMov FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'InventoryMov', 'DELETE FROM InventoryMov WHERE ' + 'Convert(varchar, IDInventoryMov)  = ' + QuoteName(Convert(varchar, DELETED.IDInventoryMov), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_InventoryMov_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_InventoryMov_Repl_InsUpt] ON InventoryMov FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE InventoryMov SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDInventoryMov = InventoryMov.IDInventoryMov

       UPDATE InventoryMov SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDInventoryMov = InventoryMov.IDInventoryMov

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_invoice_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_invoice_Repl_Del] ON invoice FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'invoice', 'DELETE FROM invoice WHERE ' + 'Convert(varchar, IDPreSale)  = ' + QuoteName(Convert(varchar, DELETED.IDPreSale), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_invoice_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_invoice_Repl_InsUpt] ON invoice FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE invoice SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPreSale = invoice.IDPreSale

       UPDATE invoice SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPreSale = invoice.IDPreSale

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Model_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER  tr_Model_InsUpt on dbo.Model
FOR INSERT,UPDATE
NOT FOR REPLICATION
AS

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	SUMARIO

		- Be shure there is no duplicated Model
		- If deactivate the master model l, deactivate all submodels


	LOG DE MODIFICAÇÕES

	Data			Programador		Modificação
	--------------------------------------- --------------------------------------- -----------------------------------------------------------------------------------------------------
	15 May  2000		Eduardo Costa		Criacao;
	08 Apr	2005		Rodrigo Costa		Removido o codigo para atualizar campo desativado do model size e color
	09 Dez	2008		Rodrigo Costa		Validar produtos na lixeira e ativos
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  */

-- Be shure there is no duplicated Model

IF @@RowCount = 0
   RETURN -- Nothing to do

IF ISNULL(APP_NAME (), '') = 'MRREPLICATION' 
	RETURN

SET NOCOUNT ON

IF EXISTS
	(
	SELECT
		I.IDModel
	FROM
		INSERTED I,
		Model M
	WHERE
		I.Model = M.Model -- The same code
		AND
		I.IDModel <> M.IDModel	 -- With other model
		AND
		I.ModelType <> 'S'   -- Not a SubModel
		AND
		M.ModelType <> 'S'   -- Not a SubModel
		--AND
		--I.Desativado = 0  AND M.Desativado = 0 -- Both them active
	)
	BEGIN
		RAISERROR ('DUP_Model_Model can not be duplicated',16,-1)
		ROLLBACK TRANSACTION
		RETURN
	END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Model_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Model_Repl_Del] ON Model FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Model', 'DELETE FROM Model WHERE ' + 'Convert(varchar, IDModel)  = ' + QuoteName(Convert(varchar, DELETED.IDModel), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Model_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Model_Repl_InsUpt] ON [dbo].[Model] FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(replLastChange)
BEGIN
	-- amfsouza, May 10 2012 - begin
	declare @versionType varchar(30)
	select @versionType = versionType from Sys_Module

	if ( @versionType = '''SERVER''' ) begin
				UPDATE Model SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDModel = Model.IDModel
				UPDATE Model SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDModel = Model.IDModel
	end
END
-- amfsouza, May 10 2012 - end
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[UpdatePOSellingPrice]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[UpdatePOSellingPrice] 
   ON  [dbo].[Model]
   AFTER  INSERT,UPDATE
AS 

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	IF UPDATE(SellingPrice)
	BEGIN
		
		DECLARE @new_IDModel int
		DECLARE @new_SellingPrice money
		
		select @new_IDModel = i.IDModel, @new_SellingPrice = i.SellingPrice
		from inserted i

		update Pur_PurchaseItem
		set NewSalePrice = @new_SellingPrice
		where IDModel = @new_IDModel
		and IDPurchase IN (
			select IDPurchase
			from Pur_Purchase
			where IDUserFinalReceiving IS NULL
		)
		
		update PreInventoryMov
		set SalePrice = @new_SellingPrice
		where
			exists (select 1 from Sys_Module where VersionType = '''SERVER''' or VersionType = 'STAND_ALONE')
			and StoreID = (
				select AttributeValue as IDCorp
				from Sis_Registry
				where AttributeName = 'Database.Default.IDStore'
			) 
			and ModelID = @new_IDModel
	END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_PreInventMov_All]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER tr_PreInventMov_All ON dbo.PreInventoryMov
FOR INSERT,UPDATE,DELETE
NOT FOR REPLICATION
AS

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	SUMARIO

		- Teste da existencia de Model e do MASTER no Inventory
		- INVENTORY e INVENTORY MASTER:  QtyOnPreSale & QtyOnOrder
		- MODEL e MODEL MASTER: Atualiza o Total no model


	LOG DE MODIFICAÇÕES

	Data			Programador		Modificação
	--------------------------------------- --------------------------------------- -----------------------------------------------------------------------------------------------------
	15 May  2000		Eduardo Costa		Criacao;
	30 Oct  2003		Rodrigo Costa		Inserido cursor Inventory_Cursor
							Inserido cursor InventoryMaster_Cursor
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  */

IF @@rowcount = 0
	RETURN

IF ISNULL(APP_NAME (), '') = 'MRREPLICATION' 
	RETURN

SET NOCOUNT ON
--Declaração de variáveis para o Cursor de Inventory
DECLARE @StoreID 	int 
DECLARE @ModelID 	int 
DECLARE @IDInventory 	int

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	B O T H      I N S E R T      A N D      D E L E T E
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--   	Teste da existencia de Model no Inventory
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Declaração do Cursor de Inventory
DECLARE Inventory_Cursor CURSOR FOR
	SELECT
		PIM.StoreID,
		PIM.ModelID
	FROM
		Inserted PIM
		LEFT OUTER JOIN
		Inventory I ON (PIM.StoreID =I.StoreID AND PIM.ModelID = I.ModelID)
	WHERE
		I.ModelID IS NULL
		AND
		PIM.ModelID IS NOT NULL
		AND
		PIM.StoreID IS NOT NULL
	GROUP BY
		PIM.StoreID,
		PIM.ModelID

OPEN Inventory_Cursor

--Inicialização de Inventory_Cursor
FETCH NEXT FROM Inventory_Cursor INTO
	@StoreID,
	@ModelID
--Enquanto tem registros
WHILE
@@FETCH_STATUS = 0
BEGIN
	EXEC sp_Sis_GetNextCode'Inventory.IDInventory', @IDInventory OUTPUT
	INSERT Inventory
		(
		IDInventory,
		StoreID,
		ModelID
		)
	VALUES
		(
		@IDInventory,
		@StoreID,
		@ModelID
		)
	FETCH NEXT FROM Inventory_Cursor INTO
		@StoreID,
		@ModelID
END
--fechamento do cursor
CLOSE Inventory_Cursor
--Destruição do cursor
DEALLOCATE Inventory_Cursor
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--   	Teste da existencia do MASTER no Inventory
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Declaração do Cursor de Inventory Master
DECLARE InventoryMaster_Cursor CURSOR FOR
	SELECT
		PIM.StoreID,
		M.IDModelParent
	FROM
		Inserted PIM
		JOIN
		Model M ON (PIM.ModelID = M.IDModel)
		LEFT OUTER JOIN
		Inventory I ON (PIM.StoreID =I.StoreID AND M.IDModelParent = I.ModelID)
	WHERE
		I.ModelID IS NULL
		AND
		M.IDModelParent IS NOT NULL
	GROUP BY
		PIM.StoreID,
		M.IDModelParent
OPEN InventoryMaster_Cursor

--Inicialização de InventoryMaster_Cursor
FETCH NEXT FROM InventoryMaster_Cursor INTO
	@StoreID,
	@ModelID
--Enquanto tem registros
WHILE
@@FETCH_STATUS = 0
BEGIN
	EXEC sp_Sis_GetNextCode 'Inventory.IDInventory', @IDInventory OUTPUT

	INSERT Inventory
		(
		IDInventory,
		StoreID,
		ModelID
		)
	VALUES
		(
		@IDInventory,
		@StoreID,
		@ModelID
		)
	FETCH NEXT FROM InventoryMaster_Cursor INTO
		@StoreID,
		@ModelID
END
--fechamento do cursor
CLOSE InventoryMaster_Cursor
--Destruição do cursor
DEALLOCATE InventoryMaster_Cursor

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	D E L E T E
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	   INVENTORY:  QtyOnPreSale & QtyOnOrder
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

UPDATE
	I
SET
	I.QtyOnHand 		= IsNull(I.QtyOnHand, 0) - Total.OnHand,
	I.QtyOnOrder 		= IsNull(I.QtyOnOrder, 0) - Total.OnOrder,
	I.QtyOnRepair 		= IsNull(I.QtyOnRepair, 0) - Total.OnRepair,
	I.QtyOnPrePurchase	= IsNull(I.QtyOnPrePurchase, 0) - Total.OnPrePurchase,
	I.QtyOnPreSale 		= IsNull(I.QtyOnPreSale, 0) - Total.OnPreSale
FROM
	(
	SELECT
		ModelID,
		StoreID,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnHand-1), 0) ) as OnHand,
		SUM( IsNull((PIM.Qty - IsNull(PIM.QtyRealMov,0)) * (2*IMT.UpdatePreOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPreSale-1), 0) ) as OnPreSale
	FROM
		Deleted PIM
		JOIN
		InventoryMovType IMT ON (PIM.InventMovTypeID = IMT.IDInventMovType)
	WHERE
		PIM.ModelID IS NOT NULL
		AND
		PIM.StoreID IS NOT NULL
	GROUP BY
		ModelID,
		StoreID
	) Total
	JOIN
	Inventory I ON (Total.ModelID = I.ModelID AND Total.StoreID = I.StoreID)


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	   INVENTORY MASTER:  QtyOnPreSale & QtyOnOrder
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

UPDATE
	I
SET
	I.QtyOnHand 		= IsNull(I.QtyOnHand, 0) - Total.OnHand,
	I.QtyOnOrder 		= IsNull(I.QtyOnOrder, 0) - Total.OnOrder,
	I.QtyOnRepair 		= IsNull(I.QtyOnRepair, 0) - Total.OnRepair,
	I.QtyOnPrePurchase	= IsNull(I.QtyOnPrePurchase, 0) - Total.OnPrePurchase,
	I.QtyOnPreSale 		= IsNull(I.QtyOnPreSale, 0) - Total.OnPreSale
FROM
	(
	SELECT
		M.IDModelParent as ModelID,
		PIM.StoreID,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnHand-1), 0) ) as OnHand,
		SUM( IsNull((PIM.Qty - IsNull(PIM.QtyRealMov,0)) * (2*IMT.UpdatePreOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPreSale-1), 0) ) as OnPreSale
	FROM
		Deleted PIM
		JOIN Model M ON (PIM.ModelID = M.IDModel)
		JOIN InventoryMovType IMT ON (PIM.InventMovTypeID = IMT.IDInventMovType)
	WHERE
		M.IDModelParent IS NOT NULL
	GROUP BY
		M.IDModelParent,
		PIM.StoreID
	) Total
	JOIN
	Inventory I ON (Total.ModelID = I.ModelID AND Total.StoreID = I.StoreID)



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	MODEL: Atualiza o Total no model
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


UPDATE
	M
SET
	M.TotQtyOnHand 		= IsNull(M.TotQtyOnHand, 0) - Total.OnHand,
	M.TotQtyOnOrder		= IsNull(M.TotQtyOnOrder, 0) - Total.OnOrder,
	M.TotQtyOnRepair 		= IsNull(M.TotQtyOnRepair, 0) - Total.OnRepair,
	M.TotQtyOnPrePurchase		= IsNull(M.TotQtyOnPrePurchase, 0) - Total.OnPrePurchase,
	M.TotQtyOnPreSale		= IsNull(M.TotQtyOnPreSale, 0) - Total.OnPreSale
FROM
	(
	SELECT
		ModelID,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnHand-1), 0) ) as OnHand,
		SUM( IsNull((PIM.Qty - IsNull(PIM.QtyRealMov,0)) * (2*IMT.UpdatePreOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPreSale-1), 0) ) as OnPreSale
	FROM
		Deleted PIM
		JOIN
		InventoryMovType IMT ON (PIM.InventMovTypeID = IMT.IDInventMovType)
	GROUP BY
		ModelID
	) Total
	JOIN
	Model M ON (Total.ModelID = M.IDModel)


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	MODEL MASTER: Atualiza o Total no model
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

UPDATE
	M
SET
	M.TotQtyOnHand 		= IsNull(M.TotQtyOnHand, 0) - Total.OnHand,
	M.TotQtyOnOrder		= IsNull(M.TotQtyOnOrder, 0) - Total.OnOrder,
	M.TotQtyOnRepair 		= IsNull(M.TotQtyOnRepair, 0) - Total.OnRepair,
	M.TotQtyOnPrePurchase		= IsNull(M.TotQtyOnPrePurchase, 0) - Total.OnPrePurchase,
	M.TotQtyOnPreSale		= IsNull(M.TotQtyOnPreSale, 0) - Total.OnPreSale
FROM
	(
	SELECT
		IDModelParent,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnHand-1), 0) ) as OnHand,
		SUM( IsNull((PIM.Qty - IsNull(PIM.QtyRealMov,0)) * (2*IMT.UpdatePreOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPreSale-1), 0) ) as OnPreSale
	FROM
		Deleted PIM
		JOIN
		Model M ON (PIM.ModelID = M.IDModel)
		JOIN
		InventoryMovType IMT ON (PIM.InventMovTypeID = IMT.IDInventMovType)
	WHERE
		M.IDModelParent IS NOT NULL
	GROUP BY
		IDModelParent
	) Total
	JOIN
	Model M ON (Total.IDModelParent = M.IDModel)



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	I N S E R T
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	   Atualiza QtyOnPreSale & QtyOnOrder
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

UPDATE
	I
SET
	I.QtyOnHand 		= IsNull(I.QtyOnHand, 0) + Total.OnHand,
	I.QtyOnOrder 		= IsNull(I.QtyOnOrder, 0) + Total.OnOrder,
	I.QtyOnRepair 		= IsNull(I.QtyOnRepair, 0) + Total.OnRepair,
	I.QtyOnPrePurchase	= IsNull(I.QtyOnPrePurchase, 0) + Total.OnPrePurchase,
	I.QtyOnPreSale 		= IsNull(I.QtyOnPreSale, 0) + Total.OnPreSale
FROM
	(
	SELECT
		ModelID,
		StoreID,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnHand-1), 0) ) as OnHand,
		SUM( IsNull((PIM.Qty - IsNull(PIM.QtyRealMov,0)) * (2*IMT.UpdatePreOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPreSale-1), 0) ) as OnPreSale
	FROM
		Inserted PIM
		JOIN
		InventoryMovType IMT ON (PIM.InventMovTypeID = IMT.IDInventMovType)
	WHERE
		PIM.ModelID IS NOT NULL
		AND
		PIM.StoreID IS NOT NULL
	GROUP BY
		ModelID,
		StoreID
	) Total
	JOIN
	Inventory I ON (Total.ModelID = I.ModelID AND Total.StoreID = I.StoreID)


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	   INVENTORY MASTER:  QtyOnPreSale & QtyOnOrder
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

UPDATE
	I
SET
	I.QtyOnHand 		= IsNull(I.QtyOnHand, 0) + Total.OnHand,
	I.QtyOnOrder 		= IsNull(I.QtyOnOrder, 0) + Total.OnOrder,
	I.QtyOnRepair 		= IsNull(I.QtyOnRepair, 0) + Total.OnRepair,
	I.QtyOnPrePurchase	= IsNull(I.QtyOnPrePurchase, 0) + Total.OnPrePurchase,
	I.QtyOnPreSale 		= IsNull(I.QtyOnPreSale, 0) + Total.OnPreSale
FROM
	(
	SELECT
		M.IDModelParent as ModelID,
		PIM.StoreID,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnHand-1), 0) ) as OnHand,
		SUM( IsNull((PIM.Qty - IsNull(PIM.QtyRealMov,0)) * (2*IMT.UpdatePreOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPreSale-1), 0) ) as OnPreSale
	FROM
		Inserted PIM
		JOIN
		Model M ON (PIM.ModelID = M.IDModel)
		JOIN
		InventoryMovType IMT ON (PIM.InventMovTypeID = IMT.IDInventMovType)
	WHERE
		M.IDModelParent IS NOT NULL
	GROUP BY
		M.IDModelParent,
		PIM.StoreID
	) Total
	JOIN
        Inventory I ON (Total.ModelID = I.ModelID AND Total.StoreID = I.StoreID)


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	MODEL: Atualiza o Total no model
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


UPDATE
	M
SET
	M.TotQtyOnHand 		= IsNull(M.TotQtyOnHand, 0) + Total.OnHand,
	M.TotQtyOnOrder		= IsNull(M.TotQtyOnOrder, 0) + Total.OnOrder,
	M.TotQtyOnRepair 		= IsNull(M.TotQtyOnRepair, 0) + Total.OnRepair,
	M.TotQtyOnPrePurchase		= IsNull(M.TotQtyOnPrePurchase, 0) + Total.OnPrePurchase,
	M.TotQtyOnPreSale		= IsNull(M.TotQtyOnPreSale, 0) + Total.OnPreSale
FROM
	(
	SELECT
		ModelID,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnHand-1), 0) ) as OnHand,
		SUM( IsNull((PIM.Qty - IsNull(PIM.QtyRealMov,0)) * (2*IMT.UpdatePreOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPreSale-1), 0) ) as OnPreSale
	FROM
		Inserted PIM
		JOIN
		InventoryMovType IMT ON (PIM.InventMovTypeID = IMT.IDInventMovType)
	GROUP BY
		ModelID
	) Total
	JOIN
	Model M ON (Total.ModelID = M.IDModel)


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	MODEL MASTER: Atualiza o Total no model
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

UPDATE
	M
SET
	M.TotQtyOnHand 		= IsNull(M.TotQtyOnHand, 0) + Total.OnHand,
	M.TotQtyOnOrder		= IsNull(M.TotQtyOnOrder, 0) + Total.OnOrder,
	M.TotQtyOnRepair 		= IsNull(M.TotQtyOnRepair, 0) + Total.OnRepair,
	M.TotQtyOnPrePurchase		= IsNull(M.TotQtyOnPrePurchase, 0) + Total.OnPrePurchase,
	M.TotQtyOnPreSale		= IsNull(M.TotQtyOnPreSale, 0) + Total.OnPreSale
FROM
	(
	SELECT
		IDModelParent,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnHand-1), 0) ) as OnHand,
		SUM( IsNull((PIM.Qty - IsNull(PIM.QtyRealMov,0)) * (2*IMT.UpdatePreOnOrder-1), 0) ) as OnOrder,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnRepair-1), 0) ) as OnRepair,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPrePurchase-1), 0) ) as OnPrePurchase,
		SUM( IsNull(PIM.Qty * (2*IMT.UpdatePreOnPreSale-1), 0) ) as OnPreSale
	FROM
		Inserted PIM
		JOIN
		Model M ON (PIM.ModelID = M.IDModel)
		JOIN
		InventoryMovType IMT ON (PIM.InventMovTypeID = IMT.IDInventMovType)
	WHERE
		M.IDModelParent IS NOT NULL
	GROUP BY
		IDModelParent
	) Total
	JOIN
	Model M ON (Total.IDModelParent = M.IDModel)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_PreInventoryMov_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_PreInventoryMov_Repl_Del] ON PreInventoryMov FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'PreInventoryMov', 'DELETE FROM PreInventoryMov WHERE ' + 'Convert(varchar, IDPreInventoryMov)  = ' + QuoteName(Convert(varchar, DELETED.IDPreInventoryMov), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_PreInventoryMov_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_PreInventoryMov_Repl_InsUpt] ON PreInventoryMov FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE PreInventoryMov SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPreInventoryMov = PreInventoryMov.IDPreInventoryMov

       UPDATE PreInventoryMov SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPreInventoryMov = PreInventoryMov.IDPreInventoryMov

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_RemoveZeroQtyPIMs]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
create trigger tr_RemoveZeroQtyPIMs on PreInventoryMov for insert, update as
    set nocount on;

    -- Delete extra commissions.
    delete from SaleItemCommission where IDPreInventoryMov in (
            select IDPreInventoryMov from PreInventoryMov where
                Qty = 0
                and InventMovTypeID = 1
                and IDPreInventoryMov in (
                    select IDPreInventoryMov from inserted
                )
    );

    delete from PreInventoryMov
    where
        Qty = 0
        and InventMovTypeID = 1
        and IDPreInventoryMov in (
            select IDPreInventoryMov from inserted
        );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_SerialMov_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_SerialMov_Repl_Del] ON SerialMov FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'SerialMov', 'DELETE FROM SerialMov WHERE ' + 'Convert(varchar, InventoryMovID)  = ' + QuoteName(Convert(varchar, DELETED.InventoryMovID), CHAR(39)) + ' AND ' + 'Convert(varchar, SerialNumber)  = ' + QuoteName(Convert(varchar, DELETED.SerialNumber), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_SerialMov_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_SerialMov_Repl_InsUpt] ON SerialMov FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE SerialMov SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.InventoryMovID = SerialMov.InventoryMovID
AND
INSERTED.SerialNumber = SerialMov.SerialNumber

       UPDATE SerialMov SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.InventoryMovID = SerialMov.InventoryMovID
AND
DELETED.SerialNumber = SerialMov.SerialNumber

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_CashRegLog_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_CashRegLog_Repl_Del] ON CashRegLog FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'CashRegLog', 'DELETE FROM CashRegLog WHERE ' + 'Convert(varchar, IDCashRegLog)  = ' + QuoteName(Convert(varchar, DELETED.IDCashRegLog), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_CashRegLogComplement_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_CashRegLogComplement_Repl_Del] ON CashRegLogComplement FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'CashRegLogComplement', 'DELETE FROM CashRegLogComplement WHERE ' + 'Convert(varchar, IDCashRegLog)  = ' + QuoteName(Convert(varchar, DELETED.IDCashRegLog), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_cashreglogreason_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_cashreglogreason_Repl_Del] ON cashreglogreason FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'cashreglogreason', 'DELETE FROM cashreglogreason WHERE ' + 'Convert(varchar, IDCashRegLogReason)  = ' + QuoteName(Convert(varchar, DELETED.IDCashRegLogReason), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_cashregmov_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_cashregmov_Repl_Del] ON cashregmov FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'cashregmov', 'DELETE FROM cashregmov WHERE ' + 'Convert(varchar, IDCashRegMov)  = ' + QuoteName(Convert(varchar, DELETED.IDCashRegMov), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_CashRegMovPaymentLog_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_CashRegMovPaymentLog_Repl_Del] ON CashRegMovPaymentLog FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'CashRegMovPaymentLog', 'DELETE FROM CashRegMovPaymentLog WHERE ' + 'Convert(varchar, IDPaymentLog)  = ' + QuoteName(Convert(varchar, DELETED.IDPaymentLog), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_CashRegMovPaymentLog_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_CashRegMovPaymentLog_Repl_InsUpt] ON CashRegMovPaymentLog FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE CashRegMovPaymentLog SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPaymentLog = CashRegMovPaymentLog.IDPaymentLog

       UPDATE CashRegMovPaymentLog SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPaymentLog = CashRegMovPaymentLog.IDPaymentLog

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_ComisPaga_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_ComisPaga_Repl_Del] ON ComisPaga FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'ComisPaga', 'DELETE FROM ComisPaga WHERE ' + 'Convert(varchar, IDDocumento)  = ' + QuoteName(Convert(varchar, DELETED.IDDocumento), CHAR(39)) + ' AND ' + 'Convert(varchar, IDPessoa)  = ' + QuoteName(Convert(varchar, DELETED.IDPessoa), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_ComisPaga_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_ComisPaga_Repl_InsUpt] ON ComisPaga FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE ComisPaga SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDDocumento = ComisPaga.IDDocumento
AND
INSERTED.IDPessoa = ComisPaga.IDPessoa

       UPDATE ComisPaga SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDDocumento = ComisPaga.IDDocumento
AND
DELETED.IDPessoa = ComisPaga.IDPessoa

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Cotacao_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Cotacao_Repl_Del] ON Cotacao FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Cotacao', 'DELETE FROM Cotacao WHERE ' + 'Convert(varchar, IDCotacao)  = ' + QuoteName(Convert(varchar, DELETED.IDCotacao), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Cotacao_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Cotacao_Repl_InsUpt] ON Cotacao FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Cotacao SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDCotacao = Cotacao.IDCotacao

       UPDATE Cotacao SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDCotacao = Cotacao.IDCotacao

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_CotacaoResult_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_CotacaoResult_Repl_Del] ON CotacaoResult FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'CotacaoResult', 'DELETE FROM CotacaoResult WHERE ' + 'Convert(varchar, IDModel)  = ' + QuoteName(Convert(varchar, DELETED.IDModel), CHAR(39)) + ' AND ' + 'Convert(varchar, IDFornecedor)  = ' + QuoteName(Convert(varchar, DELETED.IDFornecedor), CHAR(39)) + ' AND ' + 'Convert(varchar, IDCotacao)  = ' + QuoteName(Convert(varchar, DELETED.IDCotacao), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_CotacaoResult_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_CotacaoResult_Repl_InsUpt] ON CotacaoResult FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE CotacaoResult SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDModel = CotacaoResult.IDModel
AND
INSERTED.IDFornecedor = CotacaoResult.IDFornecedor
AND
INSERTED.IDCotacao = CotacaoResult.IDCotacao

       UPDATE CotacaoResult SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDModel = CotacaoResult.IDModel
AND
DELETED.IDFornecedor = CotacaoResult.IDFornecedor
AND
DELETED.IDCotacao = CotacaoResult.IDCotacao

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_CotacaoToFornec_All]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER tr_CotacaoToFornec_All ON dbo.CotacaoToFornec
FOR INSERT,UPDATE,DELETE
NOT FOR REPLICATION
AS

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	SUMARIO

		- Deleto de CotacaoResult qdo deletado
		- Incluo em CotacaoResult qdo inserido


	LOG DE MODIFICAÇÕES

	Data			Programador		Modificação
	--------------------------------------- --------------------------------------- -----------------------------------------------------------------------------------------------------
	15 May  2000		Eduardo Costa		Criacao;
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  */

IF ISNULL(APP_NAME (), '') = 'MRREPLICATION' 
	RETURN


SET NOCOUNT ON

/*
------------------------------------------------------------------------------------------
	DELECAO
------------------------------------------------------------------------------------------
*/

DELETE
	CotacaoResult
FROM
	Deleted D
WHERE
	CotacaoResult.IDCotacao = D.IDCotacao
	AND
	CotacaoResult.IDFornecedor = D.IDFornecedor

/*
------------------------------------------------------------------------------------------
	INSERCAO
------------------------------------------------------------------------------------------
*/

INSERT  CotacaoResult (
		IDCotacao,
		IDFornecedor,
		IDModel,
		Cost,
                Qty)
	SELECT
		I.IDCotacao,
		I.IDFornecedor,
		CTM.IDModel,
		Null,
		QtyCotada
	FROM
		Inserted I
		JOIN
		CotacaoToModel CTM ON (I.IDCotacao = CTM.IDCotacao)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_CotacaoToFornec_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_CotacaoToFornec_Repl_Del] ON CotacaoToFornec FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'CotacaoToFornec', 'DELETE FROM CotacaoToFornec WHERE ' + 'Convert(varchar, IDCotacao)  = ' + QuoteName(Convert(varchar, DELETED.IDCotacao), CHAR(39)) + ' AND ' + 'Convert(varchar, IDFornecedor)  = ' + QuoteName(Convert(varchar, DELETED.IDFornecedor), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_CotacaoToFornec_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_CotacaoToFornec_Repl_InsUpt] ON CotacaoToFornec FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE CotacaoToFornec SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDCotacao = CotacaoToFornec.IDCotacao
AND
INSERTED.IDFornecedor = CotacaoToFornec.IDFornecedor

       UPDATE CotacaoToFornec SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDCotacao = CotacaoToFornec.IDCotacao
AND
DELETED.IDFornecedor = CotacaoToFornec.IDFornecedor

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_CotacaoToModel_All]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER tr_CotacaoToModel_All ON dbo.CotacaoToModel
FOR INSERT,UPDATE,DELETE
NOT FOR REPLICATION
AS

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	SUMARIO

		- Deleto de CotacaoResult qdo deletado
		- Incluo em CotacaoResult qdo inserido


	LOG DE MODIFICAÇÕES

	Data			Programador		Modificação
	--------------------------------------- --------------------------------------- -----------------------------------------------------------------------------------------------------
	15 May  2000		Eduardo Costa		Criacao;
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  */

IF ISNULL(APP_NAME (), '') = 'MRREPLICATION' 
	RETURN

SET NOCOUNT ON

/*
------------------------------------------------------------------------------------------
	DELECAO
------------------------------------------------------------------------------------------
*/

DELETE
	CotacaoResult
FROM
	Deleted D
        LEFT OUTER JOIN Inserted I
		ON (D.IDCotacao = I.IDCotacao AND D.IDModel = I.IDModel)
WHERE
	I.IDModel IS NULL
	AND
	CotacaoResult.IDCotacao = D.IDCotacao
	AND
	CotacaoResult.IDModel = D.IDModel

/*
------------------------------------------------------------------------------------------
	INSERCAO
------------------------------------------------------------------------------------------
*/

INSERT 	CotacaoResult (
		IDCotacao,
		IDFornecedor,
		IDModel,
		Cost,
		Qty)
SELECT
	I.IDCotacao,
        CTF.IDFornecedor,
        I.IDModel,
        Null,
	I.QtyCotada
FROM
	Inserted I
        JOIN
	CotacaoToFornec CTF
		ON (I.IDCotacao = CTF.IDCotacao)
        LEFT OUTER JOIN
	Deleted D
		ON (D.IDCotacao = I.IDCotacao AND D.IDModel = I.IDModel)
WHERE
	D.IDModel IS NULL
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_CotacaoToModel_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_CotacaoToModel_Repl_Del] ON CotacaoToModel FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'CotacaoToModel', 'DELETE FROM CotacaoToModel WHERE ' + 'Convert(varchar, IDCotacao)  = ' + QuoteName(Convert(varchar, DELETED.IDCotacao), CHAR(39)) + ' AND ' + 'Convert(varchar, IDModel)  = ' + QuoteName(Convert(varchar, DELETED.IDModel), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_CotacaoToModel_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_CotacaoToModel_Repl_InsUpt] ON CotacaoToModel FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE CotacaoToModel SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDCotacao = CotacaoToModel.IDCotacao
AND
INSERTED.IDModel = CotacaoToModel.IDModel

       UPDATE CotacaoToModel SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDCotacao = CotacaoToModel.IDCotacao
AND
DELETED.IDModel = CotacaoToModel.IDModel

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_DailyMaintenanceReport_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_DailyMaintenanceReport_Repl_Del] ON DailyMaintenanceReport FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'DailyMaintenanceReport', 'DELETE FROM DailyMaintenanceReport WHERE ' + 'Convert(varchar, IDDailyMaintenanceReport)  = ' + QuoteName(Convert(varchar, DELETED.IDDailyMaintenanceReport), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_DailyMaintenanceReport_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_DailyMaintenanceReport_Repl_InsUpt] ON DailyMaintenanceReport FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE DailyMaintenanceReport SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDDailyMaintenanceReport = DailyMaintenanceReport.IDDailyMaintenanceReport

       UPDATE DailyMaintenanceReport SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDDailyMaintenanceReport = DailyMaintenanceReport.IDDailyMaintenanceReport

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Estimated_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Estimated_Repl_Del] ON Estimated FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Estimated', 'DELETE FROM Estimated WHERE ' + 'Convert(varchar, IDEstimated)  = ' + QuoteName(Convert(varchar, DELETED.IDEstimated), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Estimated_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Estimated_Repl_InsUpt] ON Estimated FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Estimated SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDEstimated = Estimated.IDEstimated

       UPDATE Estimated SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDEstimated = Estimated.IDEstimated

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_EstimatedItem_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_EstimatedItem_Repl_Del] ON EstimatedItem FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'EstimatedItem', 'DELETE FROM EstimatedItem WHERE ' + 'Convert(varchar, IDEstimatedItem)  = ' + QuoteName(Convert(varchar, DELETED.IDEstimatedItem), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_EstimatedItem_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_EstimatedItem_Repl_InsUpt] ON EstimatedItem FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE EstimatedItem SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDEstimatedItem = EstimatedItem.IDEstimatedItem

       UPDATE EstimatedItem SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDEstimatedItem = EstimatedItem.IDEstimatedItem

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fin_ContaCorrenteSaldo_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fin_ContaCorrenteSaldo_Repl_Del] ON Fin_ContaCorrenteSaldo FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Fin_ContaCorrenteSaldo', 'DELETE FROM Fin_ContaCorrenteSaldo WHERE ' + 'Convert(varchar, IDContaCorrente)  = ' + QuoteName(Convert(varchar, DELETED.IDContaCorrente), CHAR(39)) + ' AND ' + 'Convert(varchar, Data)  = ' + QuoteName(Convert(varchar, DELETED.Data), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fin_ContaCorrenteSaldo_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fin_ContaCorrenteSaldo_Repl_InsUpt] ON Fin_ContaCorrenteSaldo FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Fin_ContaCorrenteSaldo SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDContaCorrente = Fin_ContaCorrenteSaldo.IDContaCorrente
AND
INSERTED.Data = Fin_ContaCorrenteSaldo.Data

       UPDATE Fin_ContaCorrenteSaldo SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDContaCorrente = Fin_ContaCorrenteSaldo.IDContaCorrente
AND
DELETED.Data = Fin_ContaCorrenteSaldo.Data

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fin_LancamentoComplement_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fin_LancamentoComplement_Repl_Del] ON Fin_LancamentoComplement FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Fin_LancamentoComplement', 'DELETE FROM Fin_LancamentoComplement WHERE ' + 'Convert(varchar, IDLancamento)  = ' + QuoteName(Convert(varchar, DELETED.IDLancamento), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fin_LancamentoComplement_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fin_LancamentoComplement_Repl_InsUpt] ON Fin_LancamentoComplement FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Fin_LancamentoComplement SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDLancamento = Fin_LancamentoComplement.IDLancamento

       UPDATE Fin_LancamentoComplement SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDLancamento = Fin_LancamentoComplement.IDLancamento

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fin_LancamentoTerm_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fin_LancamentoTerm_Repl_Del] ON Fin_LancamentoTerm FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Fin_LancamentoTerm', 'DELETE FROM Fin_LancamentoTerm WHERE ' + 'Convert(varchar, IDLancamento)  = ' + QuoteName(Convert(varchar, DELETED.IDLancamento), CHAR(39)) + ' AND ' + 'Convert(varchar, DueDateShift)  = ' + QuoteName(Convert(varchar, DELETED.DueDateShift), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fin_LancamentoTerm_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fin_LancamentoTerm_Repl_InsUpt] ON Fin_LancamentoTerm FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Fin_LancamentoTerm SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDLancamento = Fin_LancamentoTerm.IDLancamento
AND
INSERTED.DueDateShift = Fin_LancamentoTerm.DueDateShift

       UPDATE Fin_LancamentoTerm SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDLancamento = Fin_LancamentoTerm.IDLancamento
AND
DELETED.DueDateShift = Fin_LancamentoTerm.DueDateShift

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fin_LancQuit_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fin_LancQuit_Repl_Del] ON Fin_LancQuit FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Fin_LancQuit', 'DELETE FROM Fin_LancQuit WHERE ' + 'Convert(varchar, IDQuitacao)  = ' + QuoteName(Convert(varchar, DELETED.IDQuitacao), CHAR(39)) + ' AND ' + 'Convert(varchar, IDLancamento)  = ' + QuoteName(Convert(varchar, DELETED.IDLancamento), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fin_LancQuit_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fin_LancQuit_Repl_InsUpt] ON Fin_LancQuit FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Fin_LancQuit SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDQuitacao = Fin_LancQuit.IDQuitacao
AND
INSERTED.IDLancamento = Fin_LancQuit.IDLancamento

       UPDATE Fin_LancQuit SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDQuitacao = Fin_LancQuit.IDQuitacao
AND
DELETED.IDLancamento = Fin_LancQuit.IDLancamento

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_LancQuit_All]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER tr_LancQuit_All ON dbo.Fin_LancQuit
FOR INSERT,UPDATE,DELETE
NOT FOR REPLICATION
AS

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	SUMARIO

		- Atualizo as Tabelas de Lancamento e Quitacao


	LOG DE MODIFICAÇÕES

	Data			Programador		Modificação
	--------------------------------------- --------------------------------------- -----------------------------------------------------------------------------------------------------
	15 May  2000		Eduardo Costa		Criacao;
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  */

IF ISNULL(APP_NAME (), '') = 'MRREPLICATION' 
	RETURN

SET NOCOUNT ON

/* -----------------------------------------------------------------
	Delecao
   -----------------------------------------------------------------
*/
/*
	Total Quitado e Total Jurus
*/
UPDATE
	Fin_Lancamento
SET
	TotalQuitado = TotalQuitado - SumQuitado,
	TotalJuros = TotalJuros - SumJuros
FROM	(
	SELECT
		IDLancamento,
		SUM(ValorQuitado) SumQuitado,
		SUM(ValorJuros) SumJuros
	FROM
		Deleted D
	GROUP BY
		IDLancamento
	) D
WHERE
	D.IDLancamento = Fin_Lancamento.IDLancamento

/*
  	Total da Quitacao
*/
UPDATE
	Fin_Quitacao
SET
	ValorQuitacao = ValorQuitacao - SumQuitado,
	ValorJuros = ValorJuros - SumJuros
FROM	(
	SELECT
		IDQuitacao,
		SUM(ValorQuitado) SumQuitado,
		SUM(ValorJuros) SumJuros
	FROM
		Deleted D
	GROUP BY
		IDQuitacao
	) D
WHERE
	D.IDQuitacao = Fin_Quitacao.IDQuitacao

/*
	Situacao Parte Quitado
*/
UPDATE
	Fin_Lancamento
SET
	Situacao = C.Valor,
	Fin_Lancamento.DataFimQuitacao = Null
FROM
	Deleted D,
	Sis_Constante C
WHERE
	D.IDLancamento = Fin_Lancamento.IDLancamento
	AND
	Fin_Lancamento.TotalQuitado <> Fin_Lancamento.ValorNominal
	AND
	Fin_Lancamento.TotalQuitado > 0
	AND
	C.Constante = 'LancamentoSituacao_ParteQuitado'

/*
	Situacao Aberto
*/
UPDATE
	Fin_Lancamento
SET
	Fin_Lancamento.Situacao = C.Valor,
 	Fin_Lancamento.DataInicioQuitacao = Null,
	Fin_Lancamento.DataFimQuitacao = Null
FROM
	Deleted D,
	Sis_Constante C
WHERE
	D.IDLancamento = Fin_Lancamento.IDLancamento
	AND
	Fin_Lancamento.TotalQuitado = 0
	AND
	C.Constante = 'LancamentoSituacao_Aberto'

/* -----------------------------------------------------------------
	Inclusao
   ----------------------------------------------------------------- */
/*
	Total Quitado e Total Jurus
*/
UPDATE
	Fin_Lancamento
SET
	TotalQuitado = TotalQuitado + SumQuitado,
	TotalJuros = TotalJuros + SumJuros
FROM	(
	SELECT
		IDLancamento,
		SUM(ValorQuitado) SumQuitado,
		SUM(ValorJuros) SumJuros
	FROM
		Inserted I
	GROUP BY
		IDLancamento
	) I
WHERE
	I.IDLancamento = Fin_Lancamento.IDLancamento

/*
  	Total da Quitacao
*/
UPDATE
	Fin_Quitacao
SET
	ValorQuitacao = ValorQuitacao + SumQuitado,
	ValorJuros = ValorJuros + SumJuros
FROM	(
	SELECT
		IDQuitacao,
		SUM(ValorQuitado) SumQuitado,
		SUM(ValorJuros) SumJuros
	FROM
		Inserted I
	GROUP BY
		IDQuitacao
	) I
WHERE
	I.IDQuitacao = Fin_Quitacao.IDQuitacao

/*
	DataInicioQuitacao
	e
	Situacao
*/
UPDATE
	Fin_Lancamento
SET
	DataInicioQuitacao = I.DataQuitacao,
	Situacao = C.Valor
FROM
	Inserted I,
	Sis_Constante C
WHERE
	I.IDLancamento = Fin_Lancamento.IDLancamento
	AND
	Fin_Lancamento.TotalQuitado <> Fin_Lancamento.ValorNominal
	AND
	Fin_Lancamento.DataInicioQuitacao is NULL
	AND
	C.Constante = 'LancamentoSituacao_ParteQuitado'

/*
	DataFimQuitacao
	e
	Situacao
*/
UPDATE
	Fin_Lancamento
SET
	DataFimQuitacao = I.DataQuitacao,
	Situacao = C.Valor
FROM
	Inserted I,
	Sis_Constante C
WHERE
	I.IDLancamento = Fin_Lancamento.IDLancamento
	AND
	Fin_Lancamento.TotalQuitado >= Fin_Lancamento.ValorNominal
	AND
	C.Constante = 'LancamentoSituacao_Quitado'
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fin_Quitacao_All]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER tr_Fin_Quitacao_All ON dbo.Fin_Quitacao
FOR INSERT,UPDATE,DELETE
NOT FOR REPLICATION
AS

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	SUMARIO

		- Atualizo o saldo de ContaCorrente


	LOG DE MODIFICAÇÕES

	Data			Programador		Modificação
	--------------------------------------- --------------------------------------- -----------------------------------------------------------------------------------------------------
	15 May  2000		Eduardo Costa		Criacao;
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  */

IF ISNULL(APP_NAME (), '') = 'MRREPLICATION' 
	RETURN

SET NOCOUNT ON

/* -----------------------------------------------------------------
	Comum 
  ----------------------------------------------------------------- */



/*
-- Confirma a existencia da linha da saldo
INSERT	
	Fin_ContaCorrenteSaldo 
	(
	IDContaCorrente, 
	Data, 
	Saldo
	)
	SELECT 	TQ.IDContaCorrente,
			TQ.Data,
			IsNull(
				( 
				SELECT  Saldo
				FROM	(
					SELECT 	MAX(FCC.Data) Data
					FROM	Fin_ContaCorrenteSaldo FCC
					WHERE	
						FCC.IDContaCorrente = TQ.IDContaCorrente
						AND
						FCC.Data < TQ.Data
					) SaldoAnterior	
					JOIN Fin_ContaCorrenteSaldo CCS
						ON (CCS.Data = SaldoAnterior.Data AND CCS.IDContaCorrente=TQ.IDContaCorrente )
				), 0)  

	FROM	
		(
		SELECT
			I.IDContaCorrente,
			Convert(DateTime, Convert(Char(20), I.DataQuitacao, 102)) as Data
		FROM
			Inserted I 
		GROUP BY 
			I.IDContaCorrente,
			Convert(DateTime, Convert(Char(20), I.DataQuitacao, 102)) 
		) AS TQ
		LEFT OUTER JOIN Fin_ContaCorrenteSaldo CCS 
			ON (CCS.IDContaCorrente = TQ.IDContaCorrente  
				AND
				CCS.Data = TQ.Data)
	WHERE	
		CCS.IDContaCorrente IS NULL

*/


/* 
   -----------------------------------------------------------------
	DELECAO 
   ----------------------------------------------------------------- 
*/

/*
UPDATE 	
	Fin_ContaCorrenteSaldo
SET	
	Saldo = Saldo - ((D.ValorQuitacao + D.ValorJuros) * (1 - D.Pagando * 2))
FROM	
	Deleted D 
WHERE	
	D.IDContaCorrente <> 0
	AND
	Fin_ContaCorrenteSaldo.IDContaCorrente = D.IDContaCorrente
	AND
	Fin_ContaCorrenteSaldo.Data >= Convert(DateTime, Convert(Char(20), D.DataQuitacao, 102))

*/

UPDATE 	
	Fin_ContaCorrente
SET	
	SaldoAtual = IsNull(SaldoAtual,0) - ((D.ValorQuitacao + D.ValorJuros) * (1 - D.Pagando * 2))
FROM	
	Deleted D 
WHERE	
	D.IDContaCorrente <> 0
	AND
	Fin_ContaCorrente.IDContaCorrente = D.IDContaCorrente

/* 
   -----------------------------------------------------------------
	Inclusao 
   ----------------------------------------------------------------- 
*/

/*
UPDATE 	
	Fin_ContaCorrenteSaldo
SET	
	Saldo = Saldo + ((I.ValorQuitacao + I.ValorJuros) * (1 - I.Pagando * 2))
FROM	
	Inserted I 
WHERE	
	I.IDContaCorrente <> 0
	AND
	Fin_ContaCorrenteSaldo.IDContaCorrente = I.IDContaCorrente
	AND
	Fin_ContaCorrenteSaldo.Data >= Convert(DateTime, Convert(Char(20), I.DataQuitacao, 102))

*/

UPDATE 	
	Fin_ContaCorrente
SET	
	SaldoAtual = IsNull(SaldoAtual, 0) + ((I.ValorQuitacao + I.ValorJuros) * (1 - I.Pagando * 2))
FROM	
	Inserted I 
WHERE	
	I.IDContaCorrente <> 0
	AND
	Fin_ContaCorrente.IDContaCorrente = I.IDContaCorrente
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fin_Quitacao_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fin_Quitacao_Repl_Del] ON Fin_Quitacao FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Fin_Quitacao', 'DELETE FROM Fin_Quitacao WHERE ' + 'Convert(varchar, IDQuitacao)  = ' + QuoteName(Convert(varchar, DELETED.IDQuitacao), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fin_Quitacao_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fin_Quitacao_Repl_InsUpt] ON Fin_Quitacao FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Fin_Quitacao SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDQuitacao = Fin_Quitacao.IDQuitacao

       UPDATE Fin_Quitacao SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDQuitacao = Fin_Quitacao.IDQuitacao

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fin_Transferencia_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fin_Transferencia_Repl_Del] ON Fin_Transferencia FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Fin_Transferencia', 'DELETE FROM Fin_Transferencia WHERE ' + 'Convert(varchar, IDTransferencia)  = ' + QuoteName(Convert(varchar, DELETED.IDTransferencia), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fin_Transferencia_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fin_Transferencia_Repl_InsUpt] ON Fin_Transferencia FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Fin_Transferencia SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDTransferencia = Fin_Transferencia.IDTransferencia

       UPDATE Fin_Transferencia SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDTransferencia = Fin_Transferencia.IDTransferencia

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fis_Registro60Analitico_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fis_Registro60Analitico_Repl_InsUpt] ON Fis_Registro60Analitico FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Fis_Registro60Analitico SET ReplLastChange = GETDATE() FROM INSERTED 
       UPDATE Fis_Registro60Analitico SET ReplLastChange = GETDATE() FROM DELETED  
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fis_Registro60Item_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fis_Registro60Item_Repl_Del] ON Fis_Registro60Item FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Fis_Registro60Item', 'DELETE FROM Fis_Registro60Item WHERE ' + 'Convert(varchar, DataEmissao)  = ' + QuoteName(Convert(varchar, DELETED.DataEmissao), CHAR(39)) + ' AND ' + 'Convert(varchar, NumeroSerie)  = ' + QuoteName(Convert(varchar, DELETED.NumeroSerie), CHAR(39)) + ' AND ' + 'Convert(varchar, ModeloDocumentoFiscal)  = ' + QuoteName(Convert(varchar, DELETED.ModeloDocumentoFiscal), CHAR(39)) + ' AND ' + 'Convert(varchar, NumeroOrdem)  = ' + QuoteName(Convert(varchar, DELETED.NumeroOrdem), CHAR(39)) + ' AND ' + 'Convert(varchar, NumeroItem)  = ' + QuoteName(Convert(varchar, DELETED.NumeroItem), CHAR(39)) + ' AND ' + 'Convert(varchar, CodigoProdutoServico)  = ' + QuoteName(Convert(varchar, DELETED.CodigoProdutoServico), CHAR(39)) + ' AND ' + 'Convert(varchar, ValorUnitario)  = ' + QuoteName(Convert(varchar, DELETED.ValorUnitario), CHAR(39)) + ' AND ' + 'Convert(varchar, BaseCalculoICMS)  = ' + QuoteName(Convert(varchar, DELETED.BaseCalculoICMS), CHAR(39)) + ' AND ' + 'Convert(varchar, SituacaoTributaria)  = ' + QuoteName(Convert(varchar, DELETED.SituacaoTributaria), CHAR(39)) + ' AND ' + 'Convert(varchar, ValorICMS)  = ' + QuoteName(Convert(varchar, DELETED.ValorICMS), CHAR(39)) + ' AND ' + 'Convert(varchar, Qtde)  = ' + QuoteName(Convert(varchar, DELETED.Qtde), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fis_Registro60Item_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fis_Registro60Item_Repl_InsUpt] ON Fis_Registro60Item FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Fis_Registro60Item SET ReplLastChange = GETDATE() FROM INSERTED 
       UPDATE Fis_Registro60Item SET ReplLastChange = GETDATE() FROM DELETED  
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fis_Registro60Mestre_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fis_Registro60Mestre_Repl_Del] ON Fis_Registro60Mestre FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Fis_Registro60Mestre', 'DELETE FROM Fis_Registro60Mestre WHERE ' + 'Convert(varchar, DataEmissao)  = ' + QuoteName(Convert(varchar, DELETED.DataEmissao), CHAR(39)) + ' AND ' + 'Convert(varchar, NumeroSerie)  = ' + QuoteName(Convert(varchar, DELETED.NumeroSerie), CHAR(39)) + ' AND ' + 'Convert(varchar, NumeroOrdem)  = ' + QuoteName(Convert(varchar, DELETED.NumeroOrdem), CHAR(39)) + ' AND ' + 'Convert(varchar, ModeloDocumentoFiscal)  = ' + QuoteName(Convert(varchar, DELETED.ModeloDocumentoFiscal), CHAR(39)) + ' AND ' + 'Convert(varchar, NumeroInicialDia)  = ' + QuoteName(Convert(varchar, DELETED.NumeroInicialDia), CHAR(39)) + ' AND ' + 'Convert(varchar, NumeroFinalDia)  = ' + QuoteName(Convert(varchar, DELETED.NumeroFinalDia), CHAR(39)) + ' AND ' + 'Convert(varchar, NumeroReducao)  = ' + QuoteName(Convert(varchar, DELETED.NumeroReducao), CHAR(39)) + ' AND ' + 'Convert(varchar, NumeroReinicioOperacao)  = ' + QuoteName(Convert(varchar, DELETED.NumeroReinicioOperacao), CHAR(39)) + ' AND ' + 'Convert(varchar, ValorVendaBruta)  = ' + QuoteName(Convert(varchar, DELETED.ValorVendaBruta), CHAR(39)) + ' AND ' + 'Convert(varchar, ValorTotalGeral)  = ' + QuoteName(Convert(varchar, DELETED.ValorTotalGeral), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fis_Registro60Mestre_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fis_Registro60Mestre_Repl_InsUpt] ON Fis_Registro60Mestre FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Fis_Registro60Mestre SET ReplLastChange = GETDATE() FROM INSERTED 
       UPDATE Fis_Registro60Mestre SET ReplLastChange = GETDATE() FROM DELETED  
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fis_Registro60ResumoDiario_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fis_Registro60ResumoDiario_Repl_Del] ON Fis_Registro60ResumoDiario FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Fis_Registro60ResumoDiario', 'DELETE FROM Fis_Registro60ResumoDiario WHERE ' + 'Convert(varchar, DataEmissao)  = ' + QuoteName(Convert(varchar, DELETED.DataEmissao), CHAR(39)) + ' AND ' + 'Convert(varchar, NumeroSerie)  = ' + QuoteName(Convert(varchar, DELETED.NumeroSerie), CHAR(39)) + ' AND ' + 'Convert(varchar, CodigoProdutoServico)  = ' + QuoteName(Convert(varchar, DELETED.CodigoProdutoServico), CHAR(39)) + ' AND ' + 'Convert(varchar, ValorProdutoServico)  = ' + QuoteName(Convert(varchar, DELETED.ValorProdutoServico), CHAR(39)) + ' AND ' + 'Convert(varchar, BaseCalculoICMS)  = ' + QuoteName(Convert(varchar, DELETED.BaseCalculoICMS), CHAR(39)) + ' AND ' + 'Convert(varchar, ValorICMS)  = ' + QuoteName(Convert(varchar, DELETED.ValorICMS), CHAR(39)) + ' AND ' + 'Convert(varchar, SituacaoTributaria)  = ' + QuoteName(Convert(varchar, DELETED.SituacaoTributaria), CHAR(39)) + ' AND ' + 'Convert(varchar, Qtde)  = ' + QuoteName(Convert(varchar, DELETED.Qtde), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Fis_Registro60ResumoDiario_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Fis_Registro60ResumoDiario_Repl_InsUpt] ON Fis_Registro60ResumoDiario FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Fis_Registro60ResumoDiario SET ReplLastChange = GETDATE() FROM INSERTED 
       UPDATE Fis_Registro60ResumoDiario SET ReplLastChange = GETDATE() FROM DELETED  
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_GroupCost_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_GroupCost_Repl_Del] ON GroupCost FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'GroupCost', 'DELETE FROM GroupCost WHERE ' + 'Convert(varchar, IDCost)  = ' + QuoteName(Convert(varchar, DELETED.IDCost), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_GroupCost_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_GroupCost_Repl_InsUpt] ON GroupCost FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE GroupCost SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDCost = GroupCost.IDCost

       UPDATE GroupCost SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDCost = GroupCost.IDCost

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_GroupCostGift_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_GroupCostGift_Repl_Del] ON GroupCostGift FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'GroupCostGift', 'DELETE FROM GroupCostGift WHERE ' + 'Convert(varchar, IDGroupCostGift)  = ' + QuoteName(Convert(varchar, DELETED.IDGroupCostGift), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_GroupCostGift_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_GroupCostGift_Repl_InsUpt] ON GroupCostGift FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE GroupCostGift SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDGroupCostGift = GroupCostGift.IDGroupCostGift

       UPDATE GroupCostGift SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDGroupCostGift = GroupCostGift.IDGroupCostGift

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_BarcodePrint_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_BarcodePrint_Repl_Del] ON Inv_BarcodePrint FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_BarcodePrint', 'DELETE FROM Inv_BarcodePrint WHERE ' + 'Convert(varchar, IDBarcode)  = ' + QuoteName(Convert(varchar, DELETED.IDBarcode), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_BarcodePrint_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_BarcodePrint_Repl_InsUpt] ON Inv_BarcodePrint FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_BarcodePrint SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDBarcode = Inv_BarcodePrint.IDBarcode

       UPDATE Inv_BarcodePrint SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDBarcode = Inv_BarcodePrint.IDBarcode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_BarcodePrintSearch_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_BarcodePrintSearch_Repl_Del] ON Inv_BarcodePrintSearch FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_BarcodePrintSearch', 'DELETE FROM Inv_BarcodePrintSearch WHERE ' + 'Convert(varchar, sequence)  = ' + QuoteName(Convert(varchar, DELETED.sequence), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_BarcodePrintSearch_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_BarcodePrintSearch_Repl_InsUpt] ON Inv_BarcodePrintSearch FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_BarcodePrintSearch SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.sequence = Inv_BarcodePrintSearch.sequence

       UPDATE Inv_BarcodePrintSearch SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.sequence = Inv_BarcodePrintSearch.sequence

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_Count_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_Count_Repl_Del] ON Inv_Count FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_Count', 'DELETE FROM Inv_Count WHERE ' + 'Convert(varchar, IDCount)  = ' + QuoteName(Convert(varchar, DELETED.IDCount), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_Count_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_Count_Repl_InsUpt] ON Inv_Count FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_Count SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDCount = Inv_Count.IDCount

       UPDATE Inv_Count SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDCount = Inv_Count.IDCount

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_CountItem_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_CountItem_Repl_Del] ON Inv_CountItem FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_CountItem', 'DELETE FROM Inv_CountItem WHERE ' + 'Convert(varchar, IDCountItem)  = ' + QuoteName(Convert(varchar, DELETED.IDCountItem), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_CountItem_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_CountItem_Repl_InsUpt] ON Inv_CountItem FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_CountItem SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDCountItem = Inv_CountItem.IDCountItem

       UPDATE Inv_CountItem SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDCountItem = Inv_CountItem.IDCountItem

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_DescriptionPrice_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_DescriptionPrice_Repl_Del] ON Inv_DescriptionPrice FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_DescriptionPrice', 'DELETE FROM Inv_DescriptionPrice WHERE ' + 'Convert(varchar, IDDescriptionPrice)  = ' + QuoteName(Convert(varchar, DELETED.IDDescriptionPrice), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_DescriptionPrice_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_DescriptionPrice_Repl_InsUpt] ON Inv_DescriptionPrice FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_DescriptionPrice SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDDescriptionPrice = Inv_DescriptionPrice.IDDescriptionPrice

       UPDATE Inv_DescriptionPrice SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDDescriptionPrice = Inv_DescriptionPrice.IDDescriptionPrice

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_FrozeCount_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_FrozeCount_Repl_Del] ON Inv_FrozeCount FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_FrozeCount', 'DELETE FROM Inv_FrozeCount WHERE ' + 'Convert(varchar, IDCount)  = ' + QuoteName(Convert(varchar, DELETED.IDCount), CHAR(39)) + ' AND ' + 'Convert(varchar, IDModel)  = ' + QuoteName(Convert(varchar, DELETED.IDModel), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_FrozeCount_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_FrozeCount_Repl_InsUpt] ON Inv_FrozeCount FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_FrozeCount SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDCount = Inv_FrozeCount.IDCount
AND
INSERTED.IDModel = Inv_FrozeCount.IDModel

       UPDATE Inv_FrozeCount SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDCount = Inv_FrozeCount.IDCount
AND
DELETED.IDModel = Inv_FrozeCount.IDModel

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_Lot_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_Lot_Repl_Del] ON Inv_Lot FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_Lot', 'DELETE FROM Inv_Lot WHERE ' + 'Convert(varchar, IDLote)  = ' + QuoteName(Convert(varchar, DELETED.IDLote), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_Lot_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_Lot_Repl_InsUpt] ON Inv_Lot FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_Lot SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDLote = Inv_Lot.IDLote

       UPDATE Inv_Lot SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDLote = Inv_Lot.IDLote

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_ModelBalance_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_ModelBalance_Repl_Del] ON Inv_ModelBalance FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_ModelBalance', 'DELETE FROM Inv_ModelBalance WHERE ' + 'Convert(varchar, IDModel)  = ' + QuoteName(Convert(varchar, DELETED.IDModel), CHAR(39)) + ' AND ' + 'Convert(varchar, BalanceDate)  = ' + QuoteName(Convert(varchar, DELETED.BalanceDate), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_ModelBalance_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_ModelBalance_Repl_InsUpt] ON Inv_ModelBalance FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_ModelBalance SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDModel = Inv_ModelBalance.IDModel
AND
INSERTED.BalanceDate = Inv_ModelBalance.BalanceDate

       UPDATE Inv_ModelBalance SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDModel = Inv_ModelBalance.IDModel
AND
DELETED.BalanceDate = Inv_ModelBalance.BalanceDate

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_ModelNutrition_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_ModelNutrition_Repl_Del] ON Inv_ModelNutrition FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_ModelNutrition', 'DELETE FROM Inv_ModelNutrition WHERE ' + 'Convert(varchar, IDModel)  = ' + QuoteName(Convert(varchar, DELETED.IDModel), CHAR(39)) + ' AND ' + 'Convert(varchar, IDNutritionItem)  = ' + QuoteName(Convert(varchar, DELETED.IDNutritionItem), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_ModelNutrition_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_ModelNutrition_Repl_InsUpt] ON Inv_ModelNutrition FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_ModelNutrition SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDModel = Inv_ModelNutrition.IDModel
AND
INSERTED.IDNutritionItem = Inv_ModelNutrition.IDNutritionItem

       UPDATE Inv_ModelNutrition SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDModel = Inv_ModelNutrition.IDModel
AND
DELETED.IDNutritionItem = Inv_ModelNutrition.IDNutritionItem

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_ModelPrice_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_ModelPrice_Repl_Del] ON Inv_ModelPrice FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_ModelPrice', 'DELETE FROM Inv_ModelPrice WHERE ' + 'Convert(varchar, IDModel)  = ' + QuoteName(Convert(varchar, DELETED.IDModel), CHAR(39)) + ' AND ' + 'Convert(varchar, IDDescriptionPrice)  = ' + QuoteName(Convert(varchar, DELETED.IDDescriptionPrice), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_ModelPrice_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_ModelPrice_Repl_InsUpt] ON Inv_ModelPrice FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_ModelPrice SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDModel = Inv_ModelPrice.IDModel
AND
INSERTED.IDDescriptionPrice = Inv_ModelPrice.IDDescriptionPrice

       UPDATE Inv_ModelPrice SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDModel = Inv_ModelPrice.IDModel
AND
DELETED.IDDescriptionPrice = Inv_ModelPrice.IDDescriptionPrice

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_ModelStateTax_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_ModelStateTax_Repl_Del] ON Inv_ModelStateTax FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_ModelStateTax', 'DELETE FROM Inv_ModelStateTax WHERE ' + 'Convert(varchar, IDModel)  = ' + QuoteName(Convert(varchar, DELETED.IDModel), CHAR(39)) + ' AND ' + 'Convert(varchar, IDEstado)  = ' + QuoteName(Convert(varchar, DELETED.IDEstado), CHAR(39)) + ' AND ' + 'Convert(varchar, IDTaxCategory)  = ' + QuoteName(Convert(varchar, DELETED.IDTaxCategory), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_ModelStateTax_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_ModelStateTax_Repl_InsUpt] ON Inv_ModelStateTax FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_ModelStateTax SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDModel = Inv_ModelStateTax.IDModel
AND
INSERTED.IDEstado = Inv_ModelStateTax.IDEstado
AND
INSERTED.IDTaxCategory = Inv_ModelStateTax.IDTaxCategory

       UPDATE Inv_ModelStateTax SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDModel = Inv_ModelStateTax.IDModel
AND
DELETED.IDEstado = Inv_ModelStateTax.IDEstado
AND
DELETED.IDTaxCategory = Inv_ModelStateTax.IDTaxCategory

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_ModelStoreBalance_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_ModelStoreBalance_Repl_Del] ON Inv_ModelStoreBalance FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_ModelStoreBalance', 'DELETE FROM Inv_ModelStoreBalance WHERE ' + 'Convert(varchar, IDStore)  = ' + QuoteName(Convert(varchar, DELETED.IDStore), CHAR(39)) + ' AND ' + 'Convert(varchar, IDModel)  = ' + QuoteName(Convert(varchar, DELETED.IDModel), CHAR(39)) + ' AND ' + 'Convert(varchar, BalanceDate)  = ' + QuoteName(Convert(varchar, DELETED.BalanceDate), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_ModelStoreBalance_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_ModelStoreBalance_Repl_InsUpt] ON Inv_ModelStoreBalance FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_ModelStoreBalance SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDStore = Inv_ModelStoreBalance.IDStore
AND
INSERTED.IDModel = Inv_ModelStoreBalance.IDModel
AND
INSERTED.BalanceDate = Inv_ModelStoreBalance.BalanceDate

       UPDATE Inv_ModelStoreBalance SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDStore = Inv_ModelStoreBalance.IDStore
AND
DELETED.IDModel = Inv_ModelStoreBalance.IDModel
AND
DELETED.BalanceDate = Inv_ModelStoreBalance.BalanceDate

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_MovComplement_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_MovComplement_Repl_Del] ON Inv_MovComplement FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_MovComplement', 'DELETE FROM Inv_MovComplement WHERE ' + 'Convert(varchar, IDInventoryMov)  = ' + QuoteName(Convert(varchar, DELETED.IDInventoryMov), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_MovComplement_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_MovComplement_Repl_InsUpt] ON Inv_MovComplement FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_MovComplement SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDInventoryMov = Inv_MovComplement.IDInventoryMov

       UPDATE Inv_MovComplement SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDInventoryMov = Inv_MovComplement.IDInventoryMov

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_MovDocument_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_MovDocument_Repl_Del] ON Inv_MovDocument FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_MovDocument', 'DELETE FROM Inv_MovDocument WHERE ' + 'Convert(varchar, IDMovDocument)  = ' + QuoteName(Convert(varchar, DELETED.IDMovDocument), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_MovDocument_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_MovDocument_Repl_InsUpt] ON Inv_MovDocument FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_MovDocument SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDMovDocument = Inv_MovDocument.IDMovDocument

       UPDATE Inv_MovDocument SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDMovDocument = Inv_MovDocument.IDMovDocument

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_MovPrice_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_MovPrice_Repl_Del] ON Inv_MovPrice FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_MovPrice', 'DELETE FROM Inv_MovPrice WHERE ' + 'Convert(varchar, IDMovPrice)  = ' + QuoteName(Convert(varchar, DELETED.IDMovPrice), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_MovPrice_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_MovPrice_Repl_InsUpt] ON Inv_MovPrice FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_MovPrice SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDMovPrice = Inv_MovPrice.IDMovPrice

       UPDATE Inv_MovPrice SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDMovPrice = Inv_MovPrice.IDMovPrice

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_NCM_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_NCM_Repl_Del] ON Inv_NCM FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_NCM', 'DELETE FROM Inv_NCM WHERE ' + 'Convert(varchar, IDNCM)  = ' + QuoteName(Convert(varchar, DELETED.IDNCM), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_NCM_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_NCM_Repl_InsUpt] ON Inv_NCM FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_NCM SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDNCM = Inv_NCM.IDNCM

       UPDATE Inv_NCM SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDNCM = Inv_NCM.IDNCM

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_Nutrition_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_Nutrition_Repl_Del] ON Inv_Nutrition FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_Nutrition', 'DELETE FROM Inv_Nutrition WHERE ' + 'Convert(varchar, IDNutrition)  = ' + QuoteName(Convert(varchar, DELETED.IDNutrition), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_Nutrition_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_Nutrition_Repl_InsUpt] ON Inv_Nutrition FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_Nutrition SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDNutrition = Inv_Nutrition.IDNutrition

       UPDATE Inv_Nutrition SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDNutrition = Inv_Nutrition.IDNutrition

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_NutritionItem_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_NutritionItem_Repl_Del] ON Inv_NutritionItem FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_NutritionItem', 'DELETE FROM Inv_NutritionItem WHERE ' + 'Convert(varchar, IDNutritionItem)  = ' + QuoteName(Convert(varchar, DELETED.IDNutritionItem), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_NutritionItem_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_NutritionItem_Repl_InsUpt] ON Inv_NutritionItem FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_NutritionItem SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDNutritionItem = Inv_NutritionItem.IDNutritionItem

       UPDATE Inv_NutritionItem SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDNutritionItem = Inv_NutritionItem.IDNutritionItem

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_StoreModelLot_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_StoreModelLot_Repl_Del] ON Inv_StoreModelLot FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_StoreModelLot', 'DELETE FROM Inv_StoreModelLot WHERE ' + 'Convert(varchar, IDLote)  = ' + QuoteName(Convert(varchar, DELETED.IDLote), CHAR(39)) + ' AND ' + 'Convert(varchar, IDStore)  = ' + QuoteName(Convert(varchar, DELETED.IDStore), CHAR(39)) + ' AND ' + 'Convert(varchar, IDModel)  = ' + QuoteName(Convert(varchar, DELETED.IDModel), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_StoreModelLot_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_StoreModelLot_Repl_InsUpt] ON Inv_StoreModelLot FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_StoreModelLot SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDLote = Inv_StoreModelLot.IDLote
AND
INSERTED.IDStore = Inv_StoreModelLot.IDStore
AND
INSERTED.IDModel = Inv_StoreModelLot.IDModel

       UPDATE Inv_StoreModelLot SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDLote = Inv_StoreModelLot.IDLote
AND
DELETED.IDStore = Inv_StoreModelLot.IDStore
AND
DELETED.IDModel = Inv_StoreModelLot.IDModel

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_StorePrice_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_StorePrice_Repl_Del] ON Inv_StorePrice FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Inv_StorePrice', 'DELETE FROM Inv_StorePrice WHERE ' + 'Convert(varchar, IDStore)  = ' + QuoteName(Convert(varchar, DELETED.IDStore), CHAR(39)) + ' AND ' + 'Convert(varchar, IDModel)  = ' + QuoteName(Convert(varchar, DELETED.IDModel), CHAR(39)) + ' AND ' + 'Convert(varchar, IDDescriptionPrice)  = ' + QuoteName(Convert(varchar, DELETED.IDDescriptionPrice), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Inv_StorePrice_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Inv_StorePrice_Repl_InsUpt] ON Inv_StorePrice FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Inv_StorePrice SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDStore = Inv_StorePrice.IDStore
AND
INSERTED.IDModel = Inv_StorePrice.IDModel
AND
INSERTED.IDDescriptionPrice = Inv_StorePrice.IDDescriptionPrice

       UPDATE Inv_StorePrice SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDStore = Inv_StorePrice.IDStore
AND
DELETED.IDModel = Inv_StorePrice.IDModel
AND
DELETED.IDDescriptionPrice = Inv_StorePrice.IDDescriptionPrice

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_InventoryMovTax_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_InventoryMovTax_Repl_Del] ON InventoryMovTax FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'InventoryMovTax', 'DELETE FROM InventoryMovTax WHERE ' + 'Convert(varchar, IDInventoryMov)  = ' + QuoteName(Convert(varchar, DELETED.IDInventoryMov), CHAR(39)) + ' AND ' + 'Convert(varchar, IDTaxCategory)  = ' + QuoteName(Convert(varchar, DELETED.IDTaxCategory), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_InventoryMovTax_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_InventoryMovTax_Repl_InsUpt] ON InventoryMovTax FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE InventoryMovTax SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDInventoryMov = InventoryMovTax.IDInventoryMov
AND
INSERTED.IDTaxCategory = InventoryMovTax.IDTaxCategory

       UPDATE InventoryMovTax SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDInventoryMov = InventoryMovTax.IDInventoryMov
AND
DELETED.IDTaxCategory = InventoryMovTax.IDTaxCategory

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_InventorySerial_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_InventorySerial_Repl_Del] ON InventorySerial FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'InventorySerial', 'DELETE FROM InventorySerial WHERE ' + 'Convert(varchar, StoreID)  = ' + QuoteName(Convert(varchar, DELETED.StoreID), CHAR(39)) + ' AND ' + 'Convert(varchar, ModelID)  = ' + QuoteName(Convert(varchar, DELETED.ModelID), CHAR(39)) + ' AND ' + 'Convert(varchar, Serial)  = ' + QuoteName(Convert(varchar, DELETED.Serial), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_InventorySerial_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_InventorySerial_Repl_InsUpt] ON InventorySerial FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE InventorySerial SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.StoreID = InventorySerial.StoreID
AND
INSERTED.ModelID = InventorySerial.ModelID
AND
INSERTED.Serial = InventorySerial.Serial

       UPDATE InventorySerial SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.StoreID = InventorySerial.StoreID
AND
DELETED.ModelID = InventorySerial.ModelID
AND
DELETED.Serial = InventorySerial.Serial

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_InvoiceGen_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_InvoiceGen_Repl_Del] ON InvoiceGen FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'InvoiceGen', 'DELETE FROM InvoiceGen WHERE ' + 'Convert(varchar, IDInvoice)  = ' + QuoteName(Convert(varchar, DELETED.IDInvoice), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_InvoiceGen_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_InvoiceGen_Repl_InsUpt] ON InvoiceGen FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE InvoiceGen SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDInvoice = InvoiceGen.IDInvoice

       UPDATE InvoiceGen SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDInvoice = InvoiceGen.IDInvoice

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_InvoiceToCostType_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_InvoiceToCostType_Repl_Del] ON InvoiceToCostType FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'InvoiceToCostType', 'DELETE FROM InvoiceToCostType WHERE ' + 'Convert(varchar, IDInvoiceCost)  = ' + QuoteName(Convert(varchar, DELETED.IDInvoiceCost), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_InvoiceToCostType_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_InvoiceToCostType_Repl_InsUpt] ON InvoiceToCostType FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE InvoiceToCostType SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDInvoiceCost = InvoiceToCostType.IDInvoiceCost

       UPDATE InvoiceToCostType SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDInvoiceCost = InvoiceToCostType.IDInvoiceCost

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_InvResetHistory_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_InvResetHistory_Repl_Del] ON InvResetHistory FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'InvResetHistory', 'DELETE FROM InvResetHistory WHERE ' + 'Convert(varchar, ResetDate)  = ' + QuoteName(Convert(varchar, DELETED.ResetDate), CHAR(39)) + ' AND ' + 'Convert(varchar, IDStore)  = ' + QuoteName(Convert(varchar, DELETED.IDStore), CHAR(39)) + ' AND ' + 'Convert(varchar, IDModel)  = ' + QuoteName(Convert(varchar, DELETED.IDModel), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_InvResetHistory_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_InvResetHistory_Repl_InsUpt] ON InvResetHistory FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE InvResetHistory SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.ResetDate = InvResetHistory.ResetDate
AND
INSERTED.IDStore = InvResetHistory.IDStore
AND
INSERTED.IDModel = InvResetHistory.IDModel

       UPDATE InvResetHistory SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.ResetDate = InvResetHistory.ResetDate
AND
DELETED.IDStore = InvResetHistory.IDStore
AND
DELETED.IDModel = InvResetHistory.IDModel

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Key_IDInventoryMov_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Key_IDInventoryMov_Repl_Del] ON Key_IDInventoryMov FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Key_IDInventoryMov', 'DELETE FROM Key_IDInventoryMov WHERE ' + 'Convert(varchar, SeqID)  = ' + QuoteName(Convert(varchar, DELETED.SeqID), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Key_IDInventoryMov_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Key_IDInventoryMov_Repl_InsUpt] ON Key_IDInventoryMov FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Key_IDInventoryMov SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.SeqID = Key_IDInventoryMov.SeqID

       UPDATE Key_IDInventoryMov SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.SeqID = Key_IDInventoryMov.SeqID

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Key_IDInvoice_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Key_IDInvoice_Repl_Del] ON Key_IDInvoice FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Key_IDInvoice', 'DELETE FROM Key_IDInvoice WHERE ' + 'Convert(varchar, SeqID)  = ' + QuoteName(Convert(varchar, DELETED.SeqID), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Key_IDInvoice_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Key_IDInvoice_Repl_InsUpt] ON Key_IDInvoice FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Key_IDInvoice SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.SeqID = Key_IDInvoice.SeqID

       UPDATE Key_IDInvoice SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.SeqID = Key_IDInvoice.SeqID

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Key_IDLancamento_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Key_IDLancamento_Repl_Del] ON Key_IDLancamento FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Key_IDLancamento', 'DELETE FROM Key_IDLancamento WHERE ' + 'Convert(varchar, SeqID)  = ' + QuoteName(Convert(varchar, DELETED.SeqID), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Key_IDLancamento_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Key_IDLancamento_Repl_InsUpt] ON Key_IDLancamento FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Key_IDLancamento SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.SeqID = Key_IDLancamento.SeqID

       UPDATE Key_IDLancamento SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.SeqID = Key_IDLancamento.SeqID

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Key_IDPreInventoryMov_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Key_IDPreInventoryMov_Repl_Del] ON Key_IDPreInventoryMov FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Key_IDPreInventoryMov', 'DELETE FROM Key_IDPreInventoryMov WHERE ' + 'Convert(varchar, SeqID)  = ' + QuoteName(Convert(varchar, DELETED.SeqID), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Key_IDPreInventoryMov_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Key_IDPreInventoryMov_Repl_InsUpt] ON Key_IDPreInventoryMov FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Key_IDPreInventoryMov SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.SeqID = Key_IDPreInventoryMov.SeqID

       UPDATE Key_IDPreInventoryMov SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.SeqID = Key_IDPreInventoryMov.SeqID

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Key_IDPreSale_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Key_IDPreSale_Repl_Del] ON Key_IDPreSale FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Key_IDPreSale', 'DELETE FROM Key_IDPreSale WHERE ' + 'Convert(varchar, SeqID)  = ' + QuoteName(Convert(varchar, DELETED.SeqID), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Key_IDPreSale_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Key_IDPreSale_Repl_InsUpt] ON Key_IDPreSale FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Key_IDPreSale SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.SeqID = Key_IDPreSale.SeqID

       UPDATE Key_IDPreSale SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.SeqID = Key_IDPreSale.SeqID

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Key_IDSaleItemCommission_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Key_IDSaleItemCommission_Repl_Del] ON Key_IDSaleItemCommission FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Key_IDSaleItemCommission', 'DELETE FROM Key_IDSaleItemCommission WHERE ' + 'Convert(varchar, SeqID)  = ' + QuoteName(Convert(varchar, DELETED.SeqID), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Key_IDSaleItemCommission_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Key_IDSaleItemCommission_Repl_InsUpt] ON Key_IDSaleItemCommission FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Key_IDSaleItemCommission SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.SeqID = Key_IDSaleItemCommission.SeqID

       UPDATE Key_IDSaleItemCommission SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.SeqID = Key_IDSaleItemCommission.SeqID

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_MargemTable_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_MargemTable_Repl_Del] ON MargemTable FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'MargemTable', 'DELETE FROM MargemTable WHERE ' + 'Convert(varchar, IDMargemTable)  = ' + QuoteName(Convert(varchar, DELETED.IDMargemTable), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_MargemTable_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_MargemTable_Repl_InsUpt] ON MargemTable FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE MargemTable SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDMargemTable = MargemTable.IDMargemTable

       UPDATE MargemTable SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDMargemTable = MargemTable.IDMargemTable

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_MargemTableRange_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_MargemTableRange_Repl_Del] ON MargemTableRange FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'MargemTableRange', 'DELETE FROM MargemTableRange WHERE ' + 'Convert(varchar, IDMargemTableRange)  = ' + QuoteName(Convert(varchar, DELETED.IDMargemTableRange), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_MargemTableRange_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_MargemTableRange_Repl_InsUpt] ON MargemTableRange FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE MargemTableRange SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDMargemTableRange = MargemTableRange.IDMargemTableRange

       UPDATE MargemTableRange SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDMargemTableRange = MargemTableRange.IDMargemTableRange

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_MenuItem_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_MenuItem_Repl_Del] ON MenuItem FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'MenuItem', 'DELETE FROM MenuItem WHERE ' + 'Convert(varchar, IDMenu)  = ' + QuoteName(Convert(varchar, DELETED.IDMenu), CHAR(39)) + ' AND ' + 'Convert(varchar, IDSubMenu)  = ' + QuoteName(Convert(varchar, DELETED.IDSubMenu), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_MenuItem_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_MenuItem_Repl_InsUpt] ON MenuItem FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE MenuItem SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDMenu = MenuItem.IDMenu
AND
INSERTED.IDSubMenu = MenuItem.IDSubMenu

       UPDATE MenuItem SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDMenu = MenuItem.IDMenu
AND
DELETED.IDSubMenu = MenuItem.IDSubMenu

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_MenuItemLanguage_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_MenuItemLanguage_Repl_Del] ON MenuItemLanguage FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'MenuItemLanguage', 'DELETE FROM MenuItemLanguage WHERE ' + 'Convert(varchar, IDMenu)  = ' + QuoteName(Convert(varchar, DELETED.IDMenu), CHAR(39)) + ' AND ' + 'Convert(varchar, IDSubMenu)  = ' + QuoteName(Convert(varchar, DELETED.IDSubMenu), CHAR(39)) + ' AND ' + 'Convert(varchar, IDLanguage)  = ' + QuoteName(Convert(varchar, DELETED.IDLanguage), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_MenuItemLanguage_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_MenuItemLanguage_Repl_InsUpt] ON MenuItemLanguage FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE MenuItemLanguage SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDMenu = MenuItemLanguage.IDMenu
AND
INSERTED.IDSubMenu = MenuItemLanguage.IDSubMenu
AND
INSERTED.IDLanguage = MenuItemLanguage.IDLanguage

       UPDATE MenuItemLanguage SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDMenu = MenuItemLanguage.IDMenu
AND
DELETED.IDSubMenu = MenuItemLanguage.IDSubMenu
AND
DELETED.IDLanguage = MenuItemLanguage.IDLanguage

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_MenuMain_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_MenuMain_Repl_Del] ON MenuMain FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'MenuMain', 'DELETE FROM MenuMain WHERE ' + 'Convert(varchar, IDMenu)  = ' + QuoteName(Convert(varchar, DELETED.IDMenu), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_MenuMain_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_MenuMain_Repl_InsUpt] ON MenuMain FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE MenuMain SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDMenu = MenuMain.IDMenu

       UPDATE MenuMain SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDMenu = MenuMain.IDMenu

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_MenuMainLanguage_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_MenuMainLanguage_Repl_Del] ON MenuMainLanguage FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'MenuMainLanguage', 'DELETE FROM MenuMainLanguage WHERE ' + 'Convert(varchar, IDMenu)  = ' + QuoteName(Convert(varchar, DELETED.IDMenu), CHAR(39)) + ' AND ' + 'Convert(varchar, IDLanguage)  = ' + QuoteName(Convert(varchar, DELETED.IDLanguage), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_MenuMainLanguage_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_MenuMainLanguage_Repl_InsUpt] ON MenuMainLanguage FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE MenuMainLanguage SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDMenu = MenuMainLanguage.IDMenu
AND
INSERTED.IDLanguage = MenuMainLanguage.IDLanguage

       UPDATE MenuMainLanguage SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDMenu = MenuMainLanguage.IDMenu
AND
DELETED.IDLanguage = MenuMainLanguage.IDLanguage

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Mnt_CFOP_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Mnt_CFOP_Repl_Del] ON Mnt_CFOP FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Mnt_CFOP', 'DELETE FROM Mnt_CFOP WHERE ' + 'Convert(varchar, IDCFOP)  = ' + QuoteName(Convert(varchar, DELETED.IDCFOP), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Mnt_CFOP_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Mnt_CFOP_Repl_InsUpt] ON Mnt_CFOP FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Mnt_CFOP SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDCFOP = Mnt_CFOP.IDCFOP

       UPDATE Mnt_CFOP SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDCFOP = Mnt_CFOP.IDCFOP

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Mnt_Controler_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Mnt_Controler_Repl_Del] ON Mnt_Controler FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Mnt_Controler', 'DELETE FROM Mnt_Controler WHERE ' + 'Convert(varchar, Software)  = ' + QuoteName(Convert(varchar, DELETED.Software), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Mnt_Controler_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Mnt_Controler_Repl_InsUpt] ON Mnt_Controler FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Mnt_Controler SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.Software = Mnt_Controler.Software

       UPDATE Mnt_Controler SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.Software = Mnt_Controler.Software

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Mnt_DefaultInvoiceOBS_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Mnt_DefaultInvoiceOBS_Repl_Del] ON Mnt_DefaultInvoiceOBS FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Mnt_DefaultInvoiceOBS', 'DELETE FROM Mnt_DefaultInvoiceOBS WHERE ' + 'Convert(varchar, IDDefaultInvoiceOBS)  = ' + QuoteName(Convert(varchar, DELETED.IDDefaultInvoiceOBS), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Mnt_DefaultInvoiceOBS_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Mnt_DefaultInvoiceOBS_Repl_InsUpt] ON Mnt_DefaultInvoiceOBS FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Mnt_DefaultInvoiceOBS SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDDefaultInvoiceOBS = Mnt_DefaultInvoiceOBS.IDDefaultInvoiceOBS

       UPDATE Mnt_DefaultInvoiceOBS SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDDefaultInvoiceOBS = Mnt_DefaultInvoiceOBS.IDDefaultInvoiceOBS

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Mnt_DocumentType_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Mnt_DocumentType_Repl_Del] ON Mnt_DocumentType FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Mnt_DocumentType', 'DELETE FROM Mnt_DocumentType WHERE ' + 'Convert(varchar, IDDocumentType)  = ' + QuoteName(Convert(varchar, DELETED.IDDocumentType), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Mnt_DocumentType_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Mnt_DocumentType_Repl_InsUpt] ON Mnt_DocumentType FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Mnt_DocumentType SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDDocumentType = Mnt_DocumentType.IDDocumentType

       UPDATE Mnt_DocumentType SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDDocumentType = Mnt_DocumentType.IDDocumentType

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Mnt_Store_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Mnt_Store_Repl_Del] ON Mnt_Store FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Mnt_Store', 'DELETE FROM Mnt_Store WHERE ' + 'Convert(varchar, MRKey)  = ' + QuoteName(Convert(varchar, DELETED.MRKey), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Mnt_Store_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Mnt_Store_Repl_InsUpt] ON Mnt_Store FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Mnt_Store SET ReplLastChange = GETDATE() FROM INSERTED 
       UPDATE Mnt_Store SET ReplLastChange = GETDATE() FROM DELETED  
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Mnt_StoreVendorAccount_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Mnt_StoreVendorAccount_Repl_Del] ON Mnt_StoreVendorAccount FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Mnt_StoreVendorAccount', 'DELETE FROM Mnt_StoreVendorAccount WHERE ' + 'Convert(varchar, IDStoreVendorAccount)  = ' + QuoteName(Convert(varchar, DELETED.IDStoreVendorAccount), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_ModelPriceLog_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_ModelPriceLog_Repl_Del] ON ModelPriceLog FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'ModelPriceLog', 'DELETE FROM ModelPriceLog WHERE ' + 'Convert(varchar, IDModelPriceLog)  = ' + QuoteName(Convert(varchar, DELETED.IDModelPriceLog), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_ModelPriceLog_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_ModelPriceLog_Repl_InsUpt] ON ModelPriceLog FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE ModelPriceLog SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDModelPriceLog = ModelPriceLog.IDModelPriceLog

       UPDATE ModelPriceLog SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDModelPriceLog = ModelPriceLog.IDModelPriceLog

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_modeltransfserial_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_modeltransfserial_Repl_Del] ON modeltransfserial FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'modeltransfserial', 'DELETE FROM modeltransfserial WHERE ' + 'Convert(varchar, IDModelTransfSerial)  = ' + QuoteName(Convert(varchar, DELETED.IDModelTransfSerial), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_modeltransfserial_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_modeltransfserial_Repl_InsUpt] ON modeltransfserial FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE modeltransfserial SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDModelTransfSerial = modeltransfserial.IDModelTransfSerial

       UPDATE modeltransfserial SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDModelTransfSerial = modeltransfserial.IDModelTransfSerial

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Nfe_NotaFiscal_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Nfe_NotaFiscal_Repl_Del] ON Nfe_NotaFiscal FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Nfe_NotaFiscal', 'DELETE FROM Nfe_NotaFiscal WHERE ' + 'Convert(varchar, IDNotaFiscal)  = ' + QuoteName(Convert(varchar, DELETED.IDNotaFiscal), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Nfe_NotaFiscal_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Nfe_NotaFiscal_Repl_InsUpt] ON Nfe_NotaFiscal FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Nfe_NotaFiscal SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDNotaFiscal = Nfe_NotaFiscal.IDNotaFiscal

       UPDATE Nfe_NotaFiscal SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDNotaFiscal = Nfe_NotaFiscal.IDNotaFiscal

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Param_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Param_Repl_Del] ON Param FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Param', 'DELETE FROM Param WHERE ' + 'Convert(varchar, IDParam)  = ' + QuoteName(Convert(varchar, DELETED.IDParam), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Param_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Param_Repl_InsUpt] ON Param FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Param SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDParam = Param.IDParam

       UPDATE Param SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDParam = Param.IDParam

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_ParamLanguage_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_ParamLanguage_Repl_Del] ON ParamLanguage FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'ParamLanguage', 'DELETE FROM ParamLanguage WHERE ' + 'Convert(varchar, IDParam)  = ' + QuoteName(Convert(varchar, DELETED.IDParam), CHAR(39)) + ' AND ' + 'Convert(varchar, IDLanguage)  = ' + QuoteName(Convert(varchar, DELETED.IDLanguage), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_ParamLanguage_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_ParamLanguage_Repl_InsUpt] ON ParamLanguage FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE ParamLanguage SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDParam = ParamLanguage.IDParam
AND
INSERTED.IDLanguage = ParamLanguage.IDLanguage

       UPDATE ParamLanguage SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDParam = ParamLanguage.IDParam
AND
DELETED.IDLanguage = ParamLanguage.IDLanguage

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_animals_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_animals_Repl_Del] ON pcm_animals FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'pcm_animals', 'DELETE FROM pcm_animals WHERE ' + 'Convert(varchar, id)  = ' + QuoteName(Convert(varchar, DELETED.id), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_animals_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_animals_Repl_InsUpt] ON pcm_animals FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE pcm_animals SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.id = pcm_animals.id

       UPDATE pcm_animals SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.id = pcm_animals.id

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_breeders_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_breeders_Repl_Del] ON pcm_breeders FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'pcm_breeders', 'DELETE FROM pcm_breeders WHERE ' + 'Convert(varchar, breeder)  = ' + QuoteName(Convert(varchar, DELETED.breeder), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_breeders_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_breeders_Repl_InsUpt] ON pcm_breeders FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE pcm_breeders SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.breeder = pcm_breeders.breeder

       UPDATE pcm_breeders SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.breeder = pcm_breeders.breeder

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_breeds_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_breeds_Repl_Del] ON pcm_breeds FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'pcm_breeds', 'DELETE FROM pcm_breeds WHERE ' + 'Convert(varchar, breed)  = ' + QuoteName(Convert(varchar, DELETED.breed), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_breeds_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_breeds_Repl_InsUpt] ON pcm_breeds FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE pcm_breeds SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.breed = pcm_breeds.breed

       UPDATE pcm_breeds SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.breed = pcm_breeds.breed

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_config_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_config_Repl_Del] ON pcm_config FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'pcm_config', 'DELETE FROM pcm_config WHERE ' + 'Convert(varchar, name)  = ' + QuoteName(Convert(varchar, DELETED.name), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_config_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_config_Repl_InsUpt] ON pcm_config FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE pcm_config SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.name = pcm_config.name

       UPDATE pcm_config SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.name = pcm_config.name

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_medical_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_medical_Repl_Del] ON pcm_medical FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'pcm_medical', 'DELETE FROM pcm_medical WHERE ' + 'Convert(varchar, condition)  = ' + QuoteName(Convert(varchar, DELETED.condition), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_medical_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_medical_Repl_InsUpt] ON pcm_medical FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE pcm_medical SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.condition = pcm_medical.condition

       UPDATE pcm_medical SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.condition = pcm_medical.condition

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_medical_rec_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_medical_rec_Repl_Del] ON pcm_medical_rec FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'pcm_medical_rec', 'DELETE FROM pcm_medical_rec WHERE ' + 'Convert(varchar, code)  = ' + QuoteName(Convert(varchar, DELETED.code), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_medical_rec_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_medical_rec_Repl_InsUpt] ON pcm_medical_rec FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE pcm_medical_rec SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.code = pcm_medical_rec.code

       UPDATE pcm_medical_rec SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.code = pcm_medical_rec.code

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_others_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_others_Repl_Del] ON pcm_others FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'pcm_others', 'DELETE FROM pcm_others WHERE ' + 'Convert(varchar, id)  = ' + QuoteName(Convert(varchar, DELETED.id), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_others_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_others_Repl_InsUpt] ON pcm_others FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE pcm_others SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.id = pcm_others.id

       UPDATE pcm_others SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.id = pcm_others.id

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_vaccine_lots_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_vaccine_lots_Repl_Del] ON pcm_vaccine_lots FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'pcm_vaccine_lots', 'DELETE FROM pcm_vaccine_lots WHERE ' + 'Convert(varchar, code)  = ' + QuoteName(Convert(varchar, DELETED.code), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_vaccine_lots_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_vaccine_lots_Repl_InsUpt] ON pcm_vaccine_lots FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE pcm_vaccine_lots SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.code = pcm_vaccine_lots.code

       UPDATE pcm_vaccine_lots SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.code = pcm_vaccine_lots.code

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_vaccine_manu_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_vaccine_manu_Repl_Del] ON pcm_vaccine_manu FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'pcm_vaccine_manu', 'DELETE FROM pcm_vaccine_manu WHERE ' + 'Convert(varchar, manu)  = ' + QuoteName(Convert(varchar, DELETED.manu), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_vaccine_manu_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_vaccine_manu_Repl_InsUpt] ON pcm_vaccine_manu FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE pcm_vaccine_manu SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.manu = pcm_vaccine_manu.manu

       UPDATE pcm_vaccine_manu SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.manu = pcm_vaccine_manu.manu

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_vaccine_shots_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_vaccine_shots_Repl_Del] ON pcm_vaccine_shots FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'pcm_vaccine_shots', 'DELETE FROM pcm_vaccine_shots WHERE ' + 'Convert(varchar, code)  = ' + QuoteName(Convert(varchar, DELETED.code), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_vaccine_shots_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_vaccine_shots_Repl_InsUpt] ON pcm_vaccine_shots FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE pcm_vaccine_shots SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.code = pcm_vaccine_shots.code

       UPDATE pcm_vaccine_shots SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.code = pcm_vaccine_shots.code

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_vaccines_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_vaccines_Repl_Del] ON pcm_vaccines FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'pcm_vaccines', 'DELETE FROM pcm_vaccines WHERE ' + 'Convert(varchar, vaccine)  = ' + QuoteName(Convert(varchar, DELETED.vaccine), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_pcm_vaccines_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_pcm_vaccines_Repl_InsUpt] ON pcm_vaccines FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE pcm_vaccines SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.vaccine = pcm_vaccines.vaccine

       UPDATE pcm_vaccines SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.vaccine = pcm_vaccines.vaccine

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_PessoaValidation_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_PessoaValidation_Repl_Del] ON PessoaValidation FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'PessoaValidation', 'DELETE FROM PessoaValidation WHERE ' + 'Convert(varchar, IDPessoaValidation)  = ' + QuoteName(Convert(varchar, DELETED.IDPessoaValidation), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_PessoaValidation_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_PessoaValidation_Repl_InsUpt] ON PessoaValidation FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE PessoaValidation SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPessoaValidation = PessoaValidation.IDPessoaValidation

       UPDATE PessoaValidation SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPessoaValidation = PessoaValidation.IDPessoaValidation

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pet_MicrochipSale_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pet_MicrochipSale_Repl_Del] ON Pet_MicrochipSale FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pet_MicrochipSale', 'DELETE FROM Pet_MicrochipSale WHERE ' + 'Convert(varchar, IDPreInventoryMov)  = ' + QuoteName(Convert(varchar, DELETED.IDPreInventoryMov), CHAR(39)) + ' AND ' + 'Convert(varchar, IDMicrochip)  = ' + QuoteName(Convert(varchar, DELETED.IDMicrochip), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pet_MicrochipSale_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pet_MicrochipSale_Repl_InsUpt] ON Pet_MicrochipSale FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Pet_MicrochipSale SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPreInventoryMov = Pet_MicrochipSale.IDPreInventoryMov
AND
INSERTED.IDMicrochip = Pet_MicrochipSale.IDMicrochip

       UPDATE Pet_MicrochipSale SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPreInventoryMov = Pet_MicrochipSale.IDPreInventoryMov
AND
DELETED.IDMicrochip = Pet_MicrochipSale.IDMicrochip

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pet_PetSale_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pet_PetSale_Repl_Del] ON Pet_PetSale FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pet_PetSale', 'DELETE FROM Pet_PetSale WHERE ' + 'Convert(varchar, IDPetSale)  = ' + QuoteName(Convert(varchar, DELETED.IDPetSale), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pet_PetSale_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pet_PetSale_Repl_InsUpt] ON Pet_PetSale FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Pet_PetSale SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPetSale = Pet_PetSale.IDPetSale

       UPDATE Pet_PetSale SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPetSale = Pet_PetSale.IDPetSale

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pet_RegistrySale_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pet_RegistrySale_Repl_Del] ON Pet_RegistrySale FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pet_RegistrySale', 'DELETE FROM Pet_RegistrySale WHERE ' + 'Convert(varchar, IDPreInventoryMov)  = ' + QuoteName(Convert(varchar, DELETED.IDPreInventoryMov), CHAR(39)) + ' AND ' + 'Convert(varchar, IDRegistry)  = ' + QuoteName(Convert(varchar, DELETED.IDRegistry), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pet_RegistrySale_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pet_RegistrySale_Repl_InsUpt] ON Pet_RegistrySale FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Pet_RegistrySale SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPreInventoryMov = Pet_RegistrySale.IDPreInventoryMov
AND
INSERTED.IDRegistry = Pet_RegistrySale.IDRegistry

       UPDATE Pet_RegistrySale SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPreInventoryMov = Pet_RegistrySale.IDPreInventoryMov
AND
DELETED.IDRegistry = Pet_RegistrySale.IDRegistry

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pet_WarrantyReport_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pet_WarrantyReport_Repl_Del] ON Pet_WarrantyReport FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pet_WarrantyReport', 'DELETE FROM Pet_WarrantyReport WHERE ' + 'Convert(varchar, IDWarrantyReport)  = ' + QuoteName(Convert(varchar, DELETED.IDWarrantyReport), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pet_WarrantyReport_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pet_WarrantyReport_Repl_InsUpt] ON Pet_WarrantyReport FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Pet_WarrantyReport SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDWarrantyReport = Pet_WarrantyReport.IDWarrantyReport

       UPDATE Pet_WarrantyReport SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDWarrantyReport = Pet_WarrantyReport.IDWarrantyReport

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_PO_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_PO_Repl_Del] ON PO FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'PO', 'DELETE FROM PO WHERE ' + 'Convert(varchar, IDPO)  = ' + QuoteName(Convert(varchar, DELETED.IDPO), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_PrePurchaseSerial_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_PrePurchaseSerial_Repl_Del] ON PrePurchaseSerial FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'PrePurchaseSerial', 'DELETE FROM PrePurchaseSerial WHERE ' + 'Convert(varchar, IDPrePurchaseMov)  = ' + QuoteName(Convert(varchar, DELETED.IDPrePurchaseMov), CHAR(39)) + ' AND ' + 'Convert(varchar, SerialNumber)  = ' + QuoteName(Convert(varchar, DELETED.SerialNumber), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_PrePurchaseSerial_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_PrePurchaseSerial_Repl_InsUpt] ON PrePurchaseSerial FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE PrePurchaseSerial SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPrePurchaseMov = PrePurchaseSerial.IDPrePurchaseMov
AND
INSERTED.SerialNumber = PrePurchaseSerial.SerialNumber

       UPDATE PrePurchaseSerial SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPrePurchaseMov = PrePurchaseSerial.IDPrePurchaseMov
AND
DELETED.SerialNumber = PrePurchaseSerial.SerialNumber

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_PT_GlobalSetting_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_PT_GlobalSetting_Repl_Del] ON PT_GlobalSetting FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'PT_GlobalSetting', 'DELETE FROM PT_GlobalSetting WHERE ' + 'Convert(varchar, Id)  = ' + QuoteName(Convert(varchar, DELETED.Id), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_PT_GlobalSetting_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_PT_GlobalSetting_Repl_InsUpt] ON PT_GlobalSetting FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE PT_GlobalSetting SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.Id = PT_GlobalSetting.Id

       UPDATE PT_GlobalSetting SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.Id = PT_GlobalSetting.Id

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_PT_GlobalSettingDetail_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_PT_GlobalSettingDetail_Repl_Del] ON PT_GlobalSettingDetail FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'PT_GlobalSettingDetail', 'DELETE FROM PT_GlobalSettingDetail WHERE ' + 'Convert(varchar, Id)  = ' + QuoteName(Convert(varchar, DELETED.Id), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_PT_GlobalSettingDetail_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_PT_GlobalSettingDetail_Repl_InsUpt] ON PT_GlobalSettingDetail FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE PT_GlobalSettingDetail SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.Id = PT_GlobalSettingDetail.Id

       UPDATE PT_GlobalSettingDetail SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.Id = PT_GlobalSettingDetail.Id

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_PT_LocalSetting_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_PT_LocalSetting_Repl_Del] ON PT_LocalSetting FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'PT_LocalSetting', 'DELETE FROM PT_LocalSetting WHERE ' + 'Convert(varchar, Id)  = ' + QuoteName(Convert(varchar, DELETED.Id), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_PT_LocalSetting_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_PT_LocalSetting_Repl_InsUpt] ON PT_LocalSetting FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE PT_LocalSetting SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.Id = PT_LocalSetting.Id

       UPDATE PT_LocalSetting SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.Id = PT_LocalSetting.Id

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_Purchase_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_Purchase_Repl_Del] ON Pur_Purchase FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pur_Purchase', 'DELETE FROM Pur_Purchase WHERE ' + 'Convert(varchar, IDPurchase)  = ' + QuoteName(Convert(varchar, DELETED.IDPurchase), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseDueDate_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseDueDate_Repl_Del] ON Pur_PurchaseDueDate FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pur_PurchaseDueDate', 'DELETE FROM Pur_PurchaseDueDate WHERE ' + 'Convert(varchar, IDPurchaseDueDate)  = ' + QuoteName(Convert(varchar, DELETED.IDPurchaseDueDate), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseItem_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseItem_Repl_Del] ON Pur_PurchaseItem FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pur_PurchaseItem', 'DELETE FROM Pur_PurchaseItem WHERE ' + 'Convert(varchar, IDPurchaseItem)  = ' + QuoteName(Convert(varchar, DELETED.IDPurchaseItem), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseItemSerial_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseItemSerial_Repl_Del] ON Pur_PurchaseItemSerial FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pur_PurchaseItemSerial', 'DELETE FROM Pur_PurchaseItemSerial WHERE ' + 'Convert(varchar, IDPurchaseItemSerial)  = ' + QuoteName(Convert(varchar, DELETED.IDPurchaseItemSerial), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseItemSerial_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseItemSerial_Repl_InsUpt] ON Pur_PurchaseItemSerial FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Pur_PurchaseItemSerial SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPurchaseItemSerial = Pur_PurchaseItemSerial.IDPurchaseItemSerial

       UPDATE Pur_PurchaseItemSerial SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPurchaseItemSerial = Pur_PurchaseItemSerial.IDPurchaseItemSerial

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseItemTax_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseItemTax_Repl_Del] ON Pur_PurchaseItemTax FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pur_PurchaseItemTax', 'DELETE FROM Pur_PurchaseItemTax WHERE ' + 'Convert(varchar, IDPurchaseItemTax)  = ' + QuoteName(Convert(varchar, DELETED.IDPurchaseItemTax), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseItemTax_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseItemTax_Repl_InsUpt] ON Pur_PurchaseItemTax FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Pur_PurchaseItemTax SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPurchaseItemTax = Pur_PurchaseItemTax.IDPurchaseItemTax

       UPDATE Pur_PurchaseItemTax SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPurchaseItemTax = Pur_PurchaseItemTax.IDPurchaseItemTax

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseItemTaxRet_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseItemTaxRet_Repl_Del] ON Pur_PurchaseItemTaxRet FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pur_PurchaseItemTaxRet', 'DELETE FROM Pur_PurchaseItemTaxRet WHERE ' + 'Convert(varchar, IDPurchaseItemTaxRet)  = ' + QuoteName(Convert(varchar, DELETED.IDPurchaseItemTaxRet), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseItemTaxRet_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseItemTaxRet_Repl_InsUpt] ON Pur_PurchaseItemTaxRet FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Pur_PurchaseItemTaxRet SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPurchaseItemTaxRet = Pur_PurchaseItemTaxRet.IDPurchaseItemTaxRet

       UPDATE Pur_PurchaseItemTaxRet SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPurchaseItemTaxRet = Pur_PurchaseItemTaxRet.IDPurchaseItemTaxRet

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseQtyOrder_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseQtyOrder_Repl_Del] ON Pur_PurchaseQtyOrder FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pur_PurchaseQtyOrder', 'DELETE FROM Pur_PurchaseQtyOrder WHERE ' + 'Convert(varchar, IDPurchaseQtyOrder)  = ' + QuoteName(Convert(varchar, DELETED.IDPurchaseQtyOrder), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseQtyPrePurchase_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseQtyPrePurchase_Repl_Del] ON Pur_PurchaseQtyPrePurchase FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pur_PurchaseQtyPrePurchase', 'DELETE FROM Pur_PurchaseQtyPrePurchase WHERE ' + 'Convert(varchar, IDPurchaseQtyPreSale)  = ' + QuoteName(Convert(varchar, DELETED.IDPurchaseQtyPreSale), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseTerm_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseTerm_Repl_Del] ON Pur_PurchaseTerm FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pur_PurchaseTerm', 'DELETE FROM Pur_PurchaseTerm WHERE ' + 'Convert(varchar, IDPurchase)  = ' + QuoteName(Convert(varchar, DELETED.IDPurchase), CHAR(39)) + ' AND ' + 'Convert(varchar, DueDateShift)  = ' + QuoteName(Convert(varchar, DELETED.DueDateShift), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseTerm_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseTerm_Repl_InsUpt] ON Pur_PurchaseTerm FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Pur_PurchaseTerm SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPurchase = Pur_PurchaseTerm.IDPurchase
AND
INSERTED.DueDateShift = Pur_PurchaseTerm.DueDateShift

       UPDATE Pur_PurchaseTerm SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPurchase = Pur_PurchaseTerm.IDPurchase
AND
DELETED.DueDateShift = Pur_PurchaseTerm.DueDateShift

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseTotal_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseTotal_Repl_Del] ON Pur_PurchaseTotal FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pur_PurchaseTotal', 'DELETE FROM Pur_PurchaseTotal WHERE ' + 'Convert(varchar, IDPurchase)  = ' + QuoteName(Convert(varchar, DELETED.IDPurchase), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseVerify_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseVerify_Repl_Del] ON Pur_PurchaseVerify FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Pur_PurchaseVerify', 'DELETE FROM Pur_PurchaseVerify WHERE ' + 'Convert(varchar, IDPurchaseVerify)  = ' + QuoteName(Convert(varchar, DELETED.IDPurchaseVerify), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Pur_PurchaseVerify_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Pur_PurchaseVerify_Repl_InsUpt] ON Pur_PurchaseVerify FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Pur_PurchaseVerify SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPurchaseVerify = Pur_PurchaseVerify.IDPurchaseVerify

       UPDATE Pur_PurchaseVerify SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPurchaseVerify = Pur_PurchaseVerify.IDPurchaseVerify

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Repair_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Repair_Repl_Del] ON Repair FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Repair', 'DELETE FROM Repair WHERE ' + 'Convert(varchar, IDRepair)  = ' + QuoteName(Convert(varchar, DELETED.IDRepair), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Request_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Request_Repl_Del] ON Request FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Request', 'DELETE FROM Request WHERE ' + 'Convert(varchar, IDRequest)  = ' + QuoteName(Convert(varchar, DELETED.IDRequest), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_Results_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_Results_Repl_InsUpt] ON Results FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Results SET ReplLastChange = GETDATE() FROM INSERTED 
       UPDATE Results SET ReplLastChange = GETDATE() FROM DELETED  
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_RoundingTable_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_RoundingTable_Repl_Del] ON RoundingTable FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'RoundingTable', 'DELETE FROM RoundingTable WHERE ' + 'Convert(varchar, IDRoundingTable)  = ' + QuoteName(Convert(varchar, DELETED.IDRoundingTable), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_RoundingTable_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_RoundingTable_Repl_InsUpt] ON RoundingTable FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE RoundingTable SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDRoundingTable = RoundingTable.IDRoundingTable

       UPDATE RoundingTable SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDRoundingTable = RoundingTable.IDRoundingTable

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_RoundingTableRange_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TRIGGER [dbo].[tr_RoundingTableRange_Repl_Del] ON RoundingTableRange FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'RoundingTableRange', 'DELETE FROM RoundingTableRange WHERE ' + 'Convert(varchar, IDRoundingTableRange)  = ' + QuoteName(Convert(varchar, DELETED.IDRoundingTableRange), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[tr_RemoveTagModelDuplicates]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER trigger tr_RemoveTagModelDuplicates on TagModel for insert, update as
    set nocount on;

    with TagModelRowsToKeep as (
        select IDTag, IDModel, min(PKTagModel) as PKTagModelToKeep
        from TagModel
        group by IDTag, IDModel
    )
    delete from TagModel where PKTagModel not in (
        select PKTagModelToKeep from TagModelRowsToKeep
    );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Fis_Registro60Analitico_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Fis_Registro60Analitico_Repl_Del] ON Fis_Registro60Analitico FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Fis_Registro60Analitico', 'DELETE FROM Fis_Registro60Analitico WHERE ' + 'Convert(varchar, DataEmissao)  = ' + QuoteName(Convert(varchar, DELETED.DataEmissao), CHAR(39)) + ' AND ' + 'Convert(varchar, NumeroSerie)  = ' + QuoteName(Convert(varchar, DELETED.NumeroSerie), CHAR(39)) + ' AND ' + 'Convert(varchar, SituacaoTributaria)  = ' + QuoteName(Convert(varchar, DELETED.SituacaoTributaria), CHAR(39)) + ' AND ' + 'Convert(varchar, ValorAcumuladoParcial)  = ' + QuoteName(Convert(varchar, DELETED.ValorAcumuladoParcial), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_RoundingTableRange_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_RoundingTableRange_Repl_InsUpt] ON RoundingTableRange FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE RoundingTableRange SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDRoundingTableRange = RoundingTableRange.IDRoundingTableRange

       UPDATE RoundingTableRange SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDRoundingTableRange = RoundingTableRange.IDRoundingTableRange

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_FrequentPromo_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_FrequentPromo_Repl_Del] ON Sal_FrequentPromo FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_FrequentPromo', 'DELETE FROM Sal_FrequentPromo WHERE ' + 'Convert(varchar, IDFrequentPromo)  = ' + QuoteName(Convert(varchar, DELETED.IDFrequentPromo), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_FrequentPromo_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_FrequentPromo_Repl_InsUpt] ON Sal_FrequentPromo FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_FrequentPromo SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDFrequentPromo = Sal_FrequentPromo.IDFrequentPromo

       UPDATE Sal_FrequentPromo SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDFrequentPromo = Sal_FrequentPromo.IDFrequentPromo

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_NotasCanceladas_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_NotasCanceladas_Repl_Del] ON Sal_NotasCanceladas FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_NotasCanceladas', 'DELETE FROM Sal_NotasCanceladas WHERE ' + 'Convert(varchar, IDNotasCanceladas)  = ' + QuoteName(Convert(varchar, DELETED.IDNotasCanceladas), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_NotasCanceladas_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_NotasCanceladas_Repl_InsUpt] ON Sal_NotasCanceladas FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_NotasCanceladas SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDNotasCanceladas = Sal_NotasCanceladas.IDNotasCanceladas

       UPDATE Sal_NotasCanceladas SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDNotasCanceladas = Sal_NotasCanceladas.IDNotasCanceladas

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_PaymentCondition_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_PaymentCondition_Repl_Del] ON Sal_PaymentCondition FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_PaymentCondition', 'DELETE FROM Sal_PaymentCondition WHERE ' + 'Convert(varchar, IDPaymentCondition)  = ' + QuoteName(Convert(varchar, DELETED.IDPaymentCondition), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_PaymentCondition_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_PaymentCondition_Repl_InsUpt] ON Sal_PaymentCondition FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_PaymentCondition SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPaymentCondition = Sal_PaymentCondition.IDPaymentCondition

       UPDATE Sal_PaymentCondition SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPaymentCondition = Sal_PaymentCondition.IDPaymentCondition

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_PaymentDiscount_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_PaymentDiscount_Repl_Del] ON Sal_PaymentDiscount FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_PaymentDiscount', 'DELETE FROM Sal_PaymentDiscount WHERE ' + 'Convert(varchar, IDPaymentDiscount)  = ' + QuoteName(Convert(varchar, DELETED.IDPaymentDiscount), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_PaymentDiscount_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_PaymentDiscount_Repl_InsUpt] ON Sal_PaymentDiscount FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_PaymentDiscount SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPaymentDiscount = Sal_PaymentDiscount.IDPaymentDiscount

       UPDATE Sal_PaymentDiscount SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPaymentDiscount = Sal_PaymentDiscount.IDPaymentDiscount

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_Promo_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_Promo_Repl_Del] ON Sal_Promo FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_Promo', 'DELETE FROM Sal_Promo WHERE ' + 'Convert(varchar, IDPromo)  = ' + QuoteName(Convert(varchar, DELETED.IDPromo), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_PromoItem_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_PromoItem_Repl_Del] ON Sal_PromoItem FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_PromoItem', 'DELETE FROM Sal_PromoItem WHERE ' + 'Convert(varchar, IDPromoItem)  = ' + QuoteName(Convert(varchar, DELETED.IDPromoItem), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_PromoLoyaltyCustomer_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_PromoLoyaltyCustomer_Repl_Del] ON Sal_PromoLoyaltyCustomer FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_PromoLoyaltyCustomer', 'DELETE FROM Sal_PromoLoyaltyCustomer WHERE ' + 'Convert(varchar, IDPromo)  = ' + QuoteName(Convert(varchar, DELETED.IDPromo), CHAR(39)) + ' AND ' + 'Convert(varchar, IDTipoPessoa)  = ' + QuoteName(Convert(varchar, DELETED.IDTipoPessoa), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_PromoLoyaltyCustomer_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_PromoLoyaltyCustomer_Repl_InsUpt] ON Sal_PromoLoyaltyCustomer FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_PromoLoyaltyCustomer SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPromo = Sal_PromoLoyaltyCustomer.IDPromo
AND
INSERTED.IDTipoPessoa = Sal_PromoLoyaltyCustomer.IDTipoPessoa

       UPDATE Sal_PromoLoyaltyCustomer SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPromo = Sal_PromoLoyaltyCustomer.IDPromo
AND
DELETED.IDTipoPessoa = Sal_PromoLoyaltyCustomer.IDTipoPessoa

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_PromoPrizeItem_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_PromoPrizeItem_Repl_Del] ON Sal_PromoPrizeItem FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_PromoPrizeItem', 'DELETE FROM Sal_PromoPrizeItem WHERE ' + 'Convert(varchar, IDPromoPrizeItem)  = ' + QuoteName(Convert(varchar, DELETED.IDPromoPrizeItem), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_PromoPrizeItem_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_PromoPrizeItem_Repl_InsUpt] ON Sal_PromoPrizeItem FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_PromoPrizeItem SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDPromoPrizeItem = Sal_PromoPrizeItem.IDPromoPrizeItem

       UPDATE Sal_PromoPrizeItem SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDPromoPrizeItem = Sal_PromoPrizeItem.IDPromoPrizeItem

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_RebateCalendar_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_RebateCalendar_Repl_Del] ON Sal_RebateCalendar FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_RebateCalendar', 'DELETE FROM Sal_RebateCalendar WHERE ' + 'Convert(varchar, IDRebateCalendar)  = ' + QuoteName(Convert(varchar, DELETED.IDRebateCalendar), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_RebateCalendar_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_RebateCalendar_Repl_InsUpt] ON Sal_RebateCalendar FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_RebateCalendar SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDRebateCalendar = Sal_RebateCalendar.IDRebateCalendar

       UPDATE Sal_RebateCalendar SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDRebateCalendar = Sal_RebateCalendar.IDRebateCalendar

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_RebateItem_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_RebateItem_Repl_Del] ON Sal_RebateItem FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_RebateItem', 'DELETE FROM Sal_RebateItem WHERE ' + 'Convert(varchar, IDRebateItem)  = ' + QuoteName(Convert(varchar, DELETED.IDRebateItem), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_RebateItem_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_RebateItem_Repl_InsUpt] ON Sal_RebateItem FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_RebateItem SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDRebateItem = Sal_RebateItem.IDRebateItem

       UPDATE Sal_RebateItem SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDRebateItem = Sal_RebateItem.IDRebateItem

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_RebateItemCalendar_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_RebateItemCalendar_Repl_Del] ON Sal_RebateItemCalendar FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_RebateItemCalendar', 'DELETE FROM Sal_RebateItemCalendar WHERE ' + 'Convert(varchar, IDRebateItem)  = ' + QuoteName(Convert(varchar, DELETED.IDRebateItem), CHAR(39)) + ' AND ' + 'Convert(varchar, IDRebateCalendar)  = ' + QuoteName(Convert(varchar, DELETED.IDRebateCalendar), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_RebateItemCalendar_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_RebateItemCalendar_Repl_InsUpt] ON Sal_RebateItemCalendar FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_RebateItemCalendar SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDRebateItem = Sal_RebateItemCalendar.IDRebateItem
AND
INSERTED.IDRebateCalendar = Sal_RebateItemCalendar.IDRebateCalendar

       UPDATE Sal_RebateItemCalendar SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDRebateItem = Sal_RebateItemCalendar.IDRebateItem
AND
DELETED.IDRebateCalendar = Sal_RebateItemCalendar.IDRebateCalendar

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_ReducaoZ_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_ReducaoZ_Repl_Del] ON Sal_ReducaoZ FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_ReducaoZ', 'DELETE FROM Sal_ReducaoZ WHERE ' + 'Convert(varchar, IDReducaoZ)  = ' + QuoteName(Convert(varchar, DELETED.IDReducaoZ), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_ReducaoZ_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_ReducaoZ_Repl_InsUpt] ON Sal_ReducaoZ FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_ReducaoZ SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDReducaoZ = Sal_ReducaoZ.IDReducaoZ

       UPDATE Sal_ReducaoZ SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDReducaoZ = Sal_ReducaoZ.IDReducaoZ

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_RemovedItem_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_RemovedItem_Repl_Del] ON Sal_RemovedItem FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_RemovedItem', 'DELETE FROM Sal_RemovedItem WHERE ' + 'Convert(varchar, IDRemovedItem)  = ' + QuoteName(Convert(varchar, DELETED.IDRemovedItem), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_RemovedItem_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_RemovedItem_Repl_InsUpt] ON Sal_RemovedItem FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_RemovedItem SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDRemovedItem = Sal_RemovedItem.IDRemovedItem

       UPDATE Sal_RemovedItem SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDRemovedItem = Sal_RemovedItem.IDRemovedItem

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_StoreAccountLimetLog_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_StoreAccountLimetLog_Repl_Del] ON Sal_StoreAccountLimetLog FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_StoreAccountLimetLog', 'DELETE FROM Sal_StoreAccountLimetLog WHERE ' + 'Convert(varchar, IDStoreAccountLimtLog)  = ' + QuoteName(Convert(varchar, DELETED.IDStoreAccountLimtLog), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_StoreAccountLimetLog_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_StoreAccountLimetLog_Repl_InsUpt] ON Sal_StoreAccountLimetLog FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_StoreAccountLimetLog SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDStoreAccountLimtLog = Sal_StoreAccountLimetLog.IDStoreAccountLimtLog

       UPDATE Sal_StoreAccountLimetLog SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDStoreAccountLimtLog = Sal_StoreAccountLimetLog.IDStoreAccountLimtLog

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_TotalizadorParcial_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_TotalizadorParcial_Repl_Del] ON Sal_TotalizadorParcial FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_TotalizadorParcial', 'DELETE FROM Sal_TotalizadorParcial WHERE ' + 'Convert(varchar, IDTotalizadorParcial)  = ' + QuoteName(Convert(varchar, DELETED.IDTotalizadorParcial), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_TotalizadorParcial_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_TotalizadorParcial_Repl_InsUpt] ON Sal_TotalizadorParcial FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_TotalizadorParcial SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDTotalizadorParcial = Sal_TotalizadorParcial.IDTotalizadorParcial

       UPDATE Sal_TotalizadorParcial SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDTotalizadorParcial = Sal_TotalizadorParcial.IDTotalizadorParcial

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_TributacaoECF_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_TributacaoECF_Repl_Del] ON Sal_TributacaoECF FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sal_TributacaoECF', 'DELETE FROM Sal_TributacaoECF WHERE ' + 'Convert(varchar, IDTributacaoECF)  = ' + QuoteName(Convert(varchar, DELETED.IDTributacaoECF), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sal_TributacaoECF_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sal_TributacaoECF_Repl_InsUpt] ON Sal_TributacaoECF FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sal_TributacaoECF SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDTributacaoECF = Sal_TributacaoECF.IDTributacaoECF

       UPDATE Sal_TributacaoECF SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDTributacaoECF = Sal_TributacaoECF.IDTributacaoECF

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Ser_SOCustomerProduct_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Ser_SOCustomerProduct_Repl_Del] ON Ser_SOCustomerProduct FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Ser_SOCustomerProduct', 'DELETE FROM Ser_SOCustomerProduct WHERE ' + 'Convert(varchar, IDSOCustomerProduct)  = ' + QuoteName(Convert(varchar, DELETED.IDSOCustomerProduct), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Ser_SOCustomerProduct_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Ser_SOCustomerProduct_Repl_InsUpt] ON Ser_SOCustomerProduct FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Ser_SOCustomerProduct SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDSOCustomerProduct = Ser_SOCustomerProduct.IDSOCustomerProduct

       UPDATE Ser_SOCustomerProduct SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDSOCustomerProduct = Ser_SOCustomerProduct.IDSOCustomerProduct

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Ser_SOStatus_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Ser_SOStatus_Repl_Del] ON Ser_SOStatus FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Ser_SOStatus', 'DELETE FROM Ser_SOStatus WHERE ' + 'Convert(varchar, IDSOStatus)  = ' + QuoteName(Convert(varchar, DELETED.IDSOStatus), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Ser_SOStatus_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Ser_SOStatus_Repl_InsUpt] ON Ser_SOStatus FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Ser_SOStatus SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDSOStatus = Ser_SOStatus.IDSOStatus

       UPDATE Ser_SOStatus SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDSOStatus = Ser_SOStatus.IDSOStatus

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_AppHistory_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_AppHistory_Repl_Del] ON Sis_AppHistory FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sis_AppHistory', 'DELETE FROM Sis_AppHistory WHERE ' + 'Convert(varchar, IDHistory)  = ' + QuoteName(Convert(varchar, DELETED.IDHistory), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_AppHistory_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_AppHistory_Repl_InsUpt] ON Sis_AppHistory FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sis_AppHistory SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDHistory = Sis_AppHistory.IDHistory

       UPDATE Sis_AppHistory SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDHistory = Sis_AppHistory.IDHistory

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_CodigoIncremental_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_CodigoIncremental_Repl_Del] ON Sis_CodigoIncremental FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sis_CodigoIncremental', 'DELETE FROM Sis_CodigoIncremental WHERE ' + 'Convert(varchar, Tabela)  = ' + QuoteName(Convert(varchar, DELETED.Tabela), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_CodigoIncremental_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_CodigoIncremental_Repl_InsUpt] ON Sis_CodigoIncremental FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sis_CodigoIncremental SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.Tabela = Sis_CodigoIncremental.Tabela

       UPDATE Sis_CodigoIncremental SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.Tabela = Sis_CodigoIncremental.Tabela

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_ConfigExport_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_ConfigExport_Repl_Del] ON Sis_ConfigExport FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sis_ConfigExport', 'DELETE FROM Sis_ConfigExport WHERE ' + 'Convert(varchar, IDConfigExport)  = ' + QuoteName(Convert(varchar, DELETED.IDConfigExport), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_ConfigExport_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_ConfigExport_Repl_InsUpt] ON Sis_ConfigExport FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sis_ConfigExport SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDConfigExport = Sis_ConfigExport.IDConfigExport

       UPDATE Sis_ConfigExport SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDConfigExport = Sis_ConfigExport.IDConfigExport

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_ConfigImport_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_ConfigImport_Repl_Del] ON Sis_ConfigImport FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sis_ConfigImport', 'DELETE FROM Sis_ConfigImport WHERE ' + 'Convert(varchar, IDConfigImport)  = ' + QuoteName(Convert(varchar, DELETED.IDConfigImport), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_ConfigImport_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_ConfigImport_Repl_InsUpt] ON Sis_ConfigImport FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sis_ConfigImport SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDConfigImport = Sis_ConfigImport.IDConfigImport

       UPDATE Sis_ConfigImport SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDConfigImport = Sis_ConfigImport.IDConfigImport

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_Constante_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_Constante_Repl_Del] ON Sis_Constante FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sis_Constante', 'DELETE FROM Sis_Constante WHERE ' + 'Convert(varchar, Constante)  = ' + QuoteName(Convert(varchar, DELETED.Constante), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_Constante_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_Constante_Repl_InsUpt] ON Sis_Constante FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sis_Constante SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.Constante = Sis_Constante.Constante

       UPDATE Sis_Constante SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.Constante = Sis_Constante.Constante

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_GrupoMainMenuPagina_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_GrupoMainMenuPagina_Repl_Del] ON Sis_GrupoMainMenuPagina FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sis_GrupoMainMenuPagina', 'DELETE FROM Sis_GrupoMainMenuPagina WHERE ' + 'Convert(varchar, IDMenuItem)  = ' + QuoteName(Convert(varchar, DELETED.IDMenuItem), CHAR(39)) + ' AND ' + 'Convert(varchar, PaginaNome)  = ' + QuoteName(Convert(varchar, DELETED.PaginaNome), CHAR(39)) + ' AND ' + 'Convert(varchar, IDGrupo)  = ' + QuoteName(Convert(varchar, DELETED.IDGrupo), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_GrupoMainMenuPagina_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_GrupoMainMenuPagina_Repl_InsUpt] ON Sis_GrupoMainMenuPagina FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sis_GrupoMainMenuPagina SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDMenuItem = Sis_GrupoMainMenuPagina.IDMenuItem
AND
INSERTED.PaginaNome = Sis_GrupoMainMenuPagina.PaginaNome
AND
INSERTED.IDGrupo = Sis_GrupoMainMenuPagina.IDGrupo

       UPDATE Sis_GrupoMainMenuPagina SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDMenuItem = Sis_GrupoMainMenuPagina.IDMenuItem
AND
DELETED.PaginaNome = Sis_GrupoMainMenuPagina.PaginaNome
AND
DELETED.IDGrupo = Sis_GrupoMainMenuPagina.IDGrupo

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_Language_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_Language_Repl_Del] ON Sis_Language FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sis_Language', 'DELETE FROM Sis_Language WHERE ' + 'Convert(varchar, IDLanguage)  = ' + QuoteName(Convert(varchar, DELETED.IDLanguage), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_Language_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_Language_Repl_InsUpt] ON Sis_Language FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sis_Language SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDLanguage = Sis_Language.IDLanguage

       UPDATE Sis_Language SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDLanguage = Sis_Language.IDLanguage

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_MainMenuOperacao_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_MainMenuOperacao_Repl_Del] ON Sis_MainMenuOperacao FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sis_MainMenuOperacao', 'DELETE FROM Sis_MainMenuOperacao WHERE ' + 'Convert(varchar, IDMenuItem)  = ' + QuoteName(Convert(varchar, DELETED.IDMenuItem), CHAR(39)) + ' AND ' + 'Convert(varchar, IDOperacao)  = ' + QuoteName(Convert(varchar, DELETED.IDOperacao), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_MainMenuOperacao_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_MainMenuOperacao_Repl_InsUpt] ON Sis_MainMenuOperacao FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sis_MainMenuOperacao SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDMenuItem = Sis_MainMenuOperacao.IDMenuItem
AND
INSERTED.IDOperacao = Sis_MainMenuOperacao.IDOperacao

       UPDATE Sis_MainMenuOperacao SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDMenuItem = Sis_MainMenuOperacao.IDMenuItem
AND
DELETED.IDOperacao = Sis_MainMenuOperacao.IDOperacao

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_Municipio_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_Municipio_Repl_Del] ON Sis_Municipio FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sis_Municipio', 'DELETE FROM Sis_Municipio WHERE ' + 'Convert(varchar, IDMunicipio)  = ' + QuoteName(Convert(varchar, DELETED.IDMunicipio), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_Municipio_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_Municipio_Repl_InsUpt] ON Sis_Municipio FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sis_Municipio SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDMunicipio = Sis_Municipio.IDMunicipio

       UPDATE Sis_Municipio SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDMunicipio = Sis_Municipio.IDMunicipio

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_PropertyDomain_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_PropertyDomain_Repl_Del] ON Sis_PropertyDomain FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sis_PropertyDomain', 'DELETE FROM Sis_PropertyDomain WHERE ' + 'Convert(varchar, Property)  = ' + QuoteName(Convert(varchar, DELETED.Property), CHAR(39)) + ' AND ' + 'Convert(varchar, PropertyValue)  = ' + QuoteName(Convert(varchar, DELETED.PropertyValue), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_PropertyDomain_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_PropertyDomain_Repl_InsUpt] ON Sis_PropertyDomain FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sis_PropertyDomain SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.Property = Sis_PropertyDomain.Property
AND
INSERTED.PropertyValue = Sis_PropertyDomain.PropertyValue

       UPDATE Sis_PropertyDomain SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.Property = Sis_PropertyDomain.Property
AND
DELETED.PropertyValue = Sis_PropertyDomain.PropertyValue

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_Registro_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_Registro_Repl_Del] ON Sis_Registro FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sis_Registro', 'DELETE FROM Sis_Registro WHERE ' + 'Convert(varchar, Nome)  = ' + QuoteName(Convert(varchar, DELETED.Nome), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_Registro_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_Registro_Repl_InsUpt] ON Sis_Registro FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sis_Registro SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.Nome = Sis_Registro.Nome

       UPDATE Sis_Registro SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.Nome = Sis_Registro.Nome

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_Registry_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_Registry_Repl_Del] ON Sis_Registry FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'Sis_Registry', 'DELETE FROM Sis_Registry WHERE ' + 'Convert(varchar, ID)  = ' + QuoteName(Convert(varchar, DELETED.ID), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sis_Registry_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sis_Registry_Repl_InsUpt] ON Sis_Registry FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sis_Registry SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.ID = Sis_Registry.ID

       UPDATE Sis_Registry SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.ID = Sis_Registry.ID

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_SpecialPriceByGroup_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_SpecialPriceByGroup_Repl_Del] ON SpecialPriceByGroup FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'SpecialPriceByGroup', 'DELETE FROM SpecialPriceByGroup WHERE ' + 'Convert(varchar, SpecialPriceID)  = ' + QuoteName(Convert(varchar, DELETED.SpecialPriceID), CHAR(39)) + ' AND ' + 'Convert(varchar, GroupID)  = ' + QuoteName(Convert(varchar, DELETED.GroupID), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_SpecialPriceByGroup_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_SpecialPriceByGroup_Repl_InsUpt] ON SpecialPriceByGroup FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE SpecialPriceByGroup SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.SpecialPriceID = SpecialPriceByGroup.SpecialPriceID
AND
INSERTED.GroupID = SpecialPriceByGroup.GroupID

       UPDATE SpecialPriceByGroup SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.SpecialPriceID = SpecialPriceByGroup.SpecialPriceID
AND
DELETED.GroupID = SpecialPriceByGroup.GroupID

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_Sys_Module_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_Sys_Module_Repl_InsUpt] ON Sys_Module FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE Sys_Module SET ReplLastChange = GETDATE() FROM INSERTED 
       UPDATE Sys_Module SET ReplLastChange = GETDATE() FROM DELETED  
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_SYS_Relatorio_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_SYS_Relatorio_Repl_Del] ON SYS_Relatorio FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'SYS_Relatorio', 'DELETE FROM SYS_Relatorio WHERE ' + 'Convert(varchar, IDRelatorio)  = ' + QuoteName(Convert(varchar, DELETED.IDRelatorio), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_SYS_Relatorio_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_SYS_Relatorio_Repl_InsUpt] ON SYS_Relatorio FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE SYS_Relatorio SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDRelatorio = SYS_Relatorio.IDRelatorio

       UPDATE SYS_Relatorio SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDRelatorio = SYS_Relatorio.IDRelatorio

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_SYS_RelParametro_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_SYS_RelParametro_Repl_Del] ON SYS_RelParametro FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'SYS_RelParametro', 'DELETE FROM SYS_RelParametro WHERE ' + 'Convert(varchar, IDRelParametro)  = ' + QuoteName(Convert(varchar, DELETED.IDRelParametro), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_SYS_RelParametro_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_SYS_RelParametro_Repl_InsUpt] ON SYS_RelParametro FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE SYS_RelParametro SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDRelParametro = SYS_RelParametro.IDRelParametro

       UPDATE SYS_RelParametro SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDRelParametro = SYS_RelParametro.IDRelParametro

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_SysFunction_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_SysFunction_Repl_Del] ON SysFunction FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'SysFunction', 'DELETE FROM SysFunction WHERE ' + 'Convert(varchar, IDSysFunction)  = ' + QuoteName(Convert(varchar, DELETED.IDSysFunction), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_SysFunction_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_SysFunction_Repl_InsUpt] ON SysFunction FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE SysFunction SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDSysFunction = SysFunction.IDSysFunction

       UPDATE SysFunction SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDSysFunction = SysFunction.IDSysFunction

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_SysFunctionLanguage_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_SysFunctionLanguage_Repl_Del] ON SysFunctionLanguage FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'SysFunctionLanguage', 'DELETE FROM SysFunctionLanguage WHERE ' + 'Convert(varchar, IDSysFunction)  = ' + QuoteName(Convert(varchar, DELETED.IDSysFunction), CHAR(39)) + ' AND ' + 'Convert(varchar, IDLanguage)  = ' + QuoteName(Convert(varchar, DELETED.IDLanguage), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_SysFunctionLanguage_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_SysFunctionLanguage_Repl_InsUpt] ON SysFunctionLanguage FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE SysFunctionLanguage SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.IDSysFunction = SysFunctionLanguage.IDSysFunction
AND
INSERTED.IDLanguage = SysFunctionLanguage.IDLanguage

       UPDATE SysFunctionLanguage SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.IDSysFunction = SysFunctionLanguage.IDSysFunction
AND
DELETED.IDLanguage = SysFunctionLanguage.IDLanguage

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_UpInvent_Repl_Del]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_UpInvent_Repl_Del] ON UpInvent FOR DELETE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       INSERT INTO Rpl_RowDeleted (TableName, Script, ReplLastChange) 
SELECT 'UpInvent', 'DELETE FROM UpInvent WHERE ' + 'Convert(varchar, Model)  = ' + QuoteName(Convert(varchar, DELETED.Model), CHAR(39)), GetDate() FROM DELETED
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Creating [dbo].[tr_UpInvent_Repl_InsUpt]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
CREATE TRIGGER [dbo].[tr_UpInvent_Repl_InsUpt] ON UpInvent FOR INSERT,UPDATE NOT FOR REPLICATION AS 
SET NOCOUNT ON 
IF ISNULL(APP_NAME(), '') = 'MRREPLICATION'
   RETURN
IF NOT UPDATE(ReplLastChange)
BEGIN
       UPDATE UpInvent SET ReplLastChange = GETDATE() FROM INSERTED  WHERE INSERTED.Model = UpInvent.Model

       UPDATE UpInvent SET ReplLastChange = GETDATE() FROM DELETED   WHERE DELETED.Model = UpInvent.Model

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_AllActiveCustomerGroups]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER proc sp_AllActiveCustomerGroups as
    set nocount on;
    select IDTipoPessoa, TipoPessoa
    from TipoPessoa
    where Desativado = 0 and Hidden = 0 and Path like '.001%'
    order by TipoPessoa;
    set nocount off;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_AllActiveStores]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER proc sp_AllActiveStores as
    set nocount on;
    select IDStore, Name
    from Store
    where System = 0 and Desativado = 0
    order by Name;
    set nocount off;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscAllowedCustGroups_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscAllowedCustGroups_Delete]
    @IDDiscount int,
    @IDTipoPessoa int
as
set nocount on

delete from DiscAllowedCustGroups where
    [IDDiscount] = @IDDiscount
    and [IDTipoPessoa] = @IDTipoPessoa

set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscAllowedCustGroups_Select]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
/*****************************************************************************
 * Stored procedures for the "DiscAllowedCustGroups" table.
 ****************************************************************************/

ALTER proc [sp_DiscAllowedCustGroups_Select]
    @IDDiscount int,
    @IDTipoPessoa int
as
set nocount on
select
    [IDDiscount],
    [IDTipoPessoa]
from DiscAllowedCustGroups
where
    [IDDiscount] = @IDDiscount
    and [IDTipoPessoa] = @IDTipoPessoa
set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscAllowedCustGroups_Upsert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscAllowedCustGroups_Upsert]
    @IDDiscount int,
    @IDTipoPessoa int
as
merge DiscAllowedCustGroups as Target
using (
    select
    @IDDiscount,
    @IDTipoPessoa
)
as Source (
    [IDDiscount],
    [IDTipoPessoa]
)
on (
    Target.IDDiscount = Source.IDDiscount
    and Target.IDTipoPessoa = Source.IDTipoPessoa
)
when not matched then
    insert (
        [IDDiscount],
        [IDTipoPessoa]
    )
    values (
        Source.IDDiscount,
        Source.IDTipoPessoa
    );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscCoupons_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscCoupons_Delete]
    @Code nvarchar(255)
as
set nocount on

delete from DiscCoupons where
    [Code] = @Code

set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscCoupons_Select]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
/*****************************************************************************
 * Stored procedures for the "DiscCoupons" table.
 ****************************************************************************/

ALTER proc [sp_DiscCoupons_Select]
    @Code nvarchar(255)
as
set nocount on
select
    [Code],
    [IDDiscount]
from DiscCoupons
where
    [Code] = @Code
set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscCoupons_Upsert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscCoupons_Upsert]
    @Code nvarchar(255),
    @IDDiscount int
as
merge DiscCoupons as Target
using (
    select
    @Code,
    @IDDiscount
)
as Source (
    [Code],
    [IDDiscount]
)
on (
    Target.Code = Source.Code
)
when matched then
    update set
        IDDiscount = Source.IDDiscount

when not matched then
    insert (
        [Code],
        [IDDiscount]
    )
    values (
        Source.Code,
        Source.IDDiscount
    );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_Discounts_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_Discounts_Delete]
    @IDDiscount int
as
set nocount on

delete from Discounts where
    [IDDiscount] = @IDDiscount

set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_Discounts_Select]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO

/*****************************************************************************
 * Stored procedures for the "Discounts" table.
 ****************************************************************************/

ALTER proc [sp_Discounts_Select]
    @IDDiscount int
as
set nocount on
select
    [IDDiscount],
    [DiscountName],
    [StartOn],
    [EndOn],
    [BeginTimeOfDay],
    [EndTimeOfDay],
    [DiscType],
    [MinSubtotal],
    [IDStore],
    [MaxUsesPerCustomer],
    [MaxUsesInTotal],
    [FirstTimeCustomerOnly],
    [CustomerCardRequired],
    [IsStackable],
    [RewardAmount],
    [AmountType],
    [RewardQuantity],
    [MinQuantity],
    [MinDollarAmount]
from Discounts
where
    [IDDiscount] = @IDDiscount
set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_Discounts_Upsert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_Discounts_Upsert]
    @IDDiscount int = null output,
    @DiscountName nvarchar(max),
    @StartOn date,
    @EndOn date,
    @BeginTimeOfDay time,
    @EndTimeOfDay time,
    @DiscType nvarchar(max),
    @MinSubtotal money,
    @IDStore int,
    @MaxUsesPerCustomer int,
    @MaxUsesInTotal int,
    @FirstTimeCustomerOnly bit,
    @CustomerCardRequired bit,
    @IsStackable bit,
    @RewardAmount money,
    @AmountType nvarchar(max),
    @RewardQuantity int,
    @MinQuantity int,
    @MinDollarAmount money
as
merge Discounts as Target
using (
    select
    @IDDiscount,
    @DiscountName,
    @StartOn,
    @EndOn,
    @BeginTimeOfDay,
    @EndTimeOfDay,
    @DiscType,
    @MinSubtotal,
    @IDStore,
    @MaxUsesPerCustomer,
    @MaxUsesInTotal,
    @FirstTimeCustomerOnly,
    @CustomerCardRequired,
    @IsStackable,
    @RewardAmount,
    @AmountType,
    @RewardQuantity,
    @MinQuantity,
    @MinDollarAmount
)
as Source (
    [IDDiscount],
    [DiscountName],
    [StartOn],
    [EndOn],
    [BeginTimeOfDay],
    [EndTimeOfDay],
    [DiscType],
    [MinSubtotal],
    [IDStore],
    [MaxUsesPerCustomer],
    [MaxUsesInTotal],
    [FirstTimeCustomerOnly],
    [CustomerCardRequired],
    [IsStackable],
    [RewardAmount],
    [AmountType],
    [RewardQuantity],
    [MinQuantity],
    [MinDollarAmount]
)
on (
    Target.IDDiscount = Source.IDDiscount
)
when matched then
    update set
        DiscountName = Source.DiscountName,
        StartOn = Source.StartOn,
        EndOn = Source.EndOn,
        BeginTimeOfDay = Source.BeginTimeOfDay,
        EndTimeOfDay = Source.EndTimeOfDay,
        DiscType = Source.DiscType,
        MinSubtotal = Source.MinSubtotal,
        IDStore = Source.IDStore,
        MaxUsesPerCustomer = Source.MaxUsesPerCustomer,
        MaxUsesInTotal = Source.MaxUsesInTotal,
        FirstTimeCustomerOnly = Source.FirstTimeCustomerOnly,
        CustomerCardRequired = Source.CustomerCardRequired,
        IsStackable = Source.IsStackable,
        RewardAmount = Source.RewardAmount,
        AmountType = Source.AmountType,
        RewardQuantity = Source.RewardQuantity,
        MinQuantity = Source.MinQuantity,
        MinDollarAmount = Source.MinDollarAmount

when not matched then
    insert (
        [DiscountName],
        [StartOn],
        [EndOn],
        [BeginTimeOfDay],
        [EndTimeOfDay],
        [DiscType],
        [MinSubtotal],
        [IDStore],
        [MaxUsesPerCustomer],
        [MaxUsesInTotal],
        [FirstTimeCustomerOnly],
        [CustomerCardRequired],
        [IsStackable],
        [RewardAmount],
        [AmountType],
        [RewardQuantity],
        [MinQuantity],
        [MinDollarAmount]
    )
    values (
        Source.DiscountName,
        Source.StartOn,
        Source.EndOn,
        Source.BeginTimeOfDay,
        Source.EndTimeOfDay,
        Source.DiscType,
        Source.MinSubtotal,
        Source.IDStore,
        Source.MaxUsesPerCustomer,
        Source.MaxUsesInTotal,
        Source.FirstTimeCustomerOnly,
        Source.CustomerCardRequired,
        Source.IsStackable,
        Source.RewardAmount,
        Source.AmountType,
        Source.RewardQuantity,
        Source.MinQuantity,
        Source.MinDollarAmount
    );
select @IDDiscount = @@Identity;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscQualifyingTags_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscQualifyingTags_Delete]
    @IDDiscount int,
    @IDTag int
as
set nocount on

delete from DiscQualifyingTags where
    [IDDiscount] = @IDDiscount
    and [IDTag] = @IDTag

set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscQualifyingTags_Select]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
/*****************************************************************************
 * Stored procedures for the "DiscQualifyingTags" table.
 ****************************************************************************/

ALTER proc [sp_DiscQualifyingTags_Select]
    @IDDiscount int,
    @IDTag int
as
set nocount on
select
    [IDDiscount],
    [IDTag]
from DiscQualifyingTags
where
    [IDDiscount] = @IDDiscount
    and [IDTag] = @IDTag
set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscQualifyingTags_Upsert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscQualifyingTags_Upsert]
    @IDDiscount int,
    @IDTag int
as
merge DiscQualifyingTags as Target
using (
    select
    @IDDiscount,
    @IDTag
)
as Source (
    [IDDiscount],
    [IDTag]
)
on (
    Target.IDDiscount = Source.IDDiscount
    and Target.IDTag = Source.IDTag
)
when not matched then
    insert (
        [IDDiscount],
        [IDTag]
    )
    values (
        Source.IDDiscount,
        Source.IDTag
    );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscRewardTags_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscRewardTags_Delete]
    @IDDiscount int,
    @IDTag int
as
set nocount on

delete from DiscRewardTags where
    [IDDiscount] = @IDDiscount
    and [IDTag] = @IDTag

set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscRewardTags_Select]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
/*****************************************************************************
 * Stored procedures for the "DiscRewardTags" table.
 ****************************************************************************/

ALTER proc [sp_DiscRewardTags_Select]
    @IDDiscount int,
    @IDTag int
as
set nocount on
select
    [IDDiscount],
    [IDTag]
from DiscRewardTags
where
    [IDDiscount] = @IDDiscount
    and [IDTag] = @IDTag
set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscRewardTags_Upsert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscRewardTags_Upsert]
    @IDDiscount int,
    @IDTag int
as
merge DiscRewardTags as Target
using (
    select
    @IDDiscount,
    @IDTag
)
as Source (
    [IDDiscount],
    [IDTag]
)
on (
    Target.IDDiscount = Source.IDDiscount
    and Target.IDTag = Source.IDTag
)
when not matched then
    insert (
        [IDDiscount],
        [IDTag]
    )
    values (
        Source.IDDiscount,
        Source.IDTag
    );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscStores_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscStores_Delete]
    @IDDiscount int,
    @IDStore int
as
set nocount on

delete from DiscStores where
    [IDDiscount] = @IDDiscount
    and [IDStore] = @IDStore

set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscStores_Select]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
/*****************************************************************************
 * Stored procedures for the "DiscStores" table.
 ****************************************************************************/

ALTER proc [sp_DiscStores_Select]
    @IDDiscount int,
    @IDStore int
as
set nocount on
select
    [IDDiscount],
    [IDStore],
    [ISInclude]
from DiscStores
where
    [IDDiscount] = @IDDiscount
    and [IDStore] = @IDStore
set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscStores_Upsert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscStores_Upsert]
    @IDDiscount int,
    @IDStore int,
    @ISInclude bit
as
merge DiscStores as Target
using (
    select
    @IDDiscount,
    @IDStore,
    @ISInclude
)
as Source (
    [IDDiscount],
    [IDStore],
    [ISInclude]
)
on (
    Target.IDDiscount = Source.IDDiscount
    and Target.IDStore = Source.IDStore
)
when matched then
    update set
        ISInclude = Source.ISInclude

when not matched then
    insert (
        [IDDiscount],
        [IDStore],
        [ISInclude]
    )
    values (
        Source.IDDiscount,
        Source.IDStore,
        Source.ISInclude
    );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscUses_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscUses_Delete]
    @IDDiscount int,
    @IDInventoryMov int
as
set nocount on

delete from DiscUses where
    [IDDiscount] = @IDDiscount
    and [IDInventoryMov] = @IDInventoryMov

set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscUses_Select]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
/*****************************************************************************
 * Stored procedures for the "DiscUses" table.
 ****************************************************************************/

ALTER proc [sp_DiscUses_Select]
    @IDDiscount int,
    @IDInventoryMov int
as
set nocount on
select
    [IDDiscount],
    [IDInventoryMov]
from DiscUses
where
    [IDDiscount] = @IDDiscount
    and [IDInventoryMov] = @IDInventoryMov
set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscUses_Upsert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscUses_Upsert]
    @IDDiscount int,
    @IDInventoryMov int
as
merge DiscUses as Target
using (
    select
    @IDDiscount,
    @IDInventoryMov
)
as Source (
    [IDDiscount],
    [IDInventoryMov]
)
on (
    Target.IDDiscount = Source.IDDiscount
    and Target.IDInventoryMov = Source.IDInventoryMov
)
when not matched then
    insert (
        [IDDiscount],
        [IDInventoryMov]
    )
    values (
        Source.IDDiscount,
        Source.IDInventoryMov
    );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscValidOnDays_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscValidOnDays_Delete]
    @IDDiscount int,
    @DayOfWeek int
as
set nocount on

delete from DiscValidOnDays where
    [IDDiscount] = @IDDiscount
    and [DayOfWeek] = @DayOfWeek

set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscValidOnDays_Select]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
/*****************************************************************************
 * Stored procedures for the "DiscValidOnDays" table.
 ****************************************************************************/

ALTER proc [sp_DiscValidOnDays_Select]
    @IDDiscount int,
    @DayOfWeek int
as
set nocount on
select
    [IDDiscount],
    [DayOfWeek]
from DiscValidOnDays
where
    [IDDiscount] = @IDDiscount
    and [DayOfWeek] = @DayOfWeek
set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_DiscValidOnDays_Upsert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_DiscValidOnDays_Upsert]
    @IDDiscount int,
    @DayOfWeek int
as
merge DiscValidOnDays as Target
using (
    select
    @IDDiscount,
    @DayOfWeek
)
as Source (
    [IDDiscount],
    [DayOfWeek]
)
on (
    Target.IDDiscount = Source.IDDiscount
    and Target.DayOfWeek = Source.DayOfWeek
)
when not matched then
    insert (
        [IDDiscount],
        [DayOfWeek]
    )
    values (
        Source.IDDiscount,
        Source.DayOfWeek
    );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_PIMAppliedCoupons_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_PIMAppliedCoupons_Delete]
    @PreInventoryMovID int,
    @CouponCode nvarchar(255)
as
set nocount on

delete from PIMAppliedCoupons where
    [PreInventoryMovID] = @PreInventoryMovID
    and [CouponCode] = @CouponCode

set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_PIMAppliedCoupons_Select]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO

/*****************************************************************************
 * Stored procedures for the "PIMAppliedCoupons" table.
 ****************************************************************************/

ALTER proc [sp_PIMAppliedCoupons_Select]
    @PreInventoryMovID int,
    @CouponCode nvarchar(255)
as
set nocount on
select
    [PreInventoryMovID],
    [CouponCode]
from PIMAppliedCoupons
where
    [PreInventoryMovID] = @PreInventoryMovID
    and [CouponCode] = @CouponCode
set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_PIMAppliedCoupons_Upsert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
    
ALTER proc [sp_PIMAppliedCoupons_Upsert]
    @PreInventoryMovID int,
    @CouponCode nvarchar(255)
as
merge PIMAppliedCoupons as Target
using (
    select
    @PreInventoryMovID,
    @CouponCode
)
as Source (
    [PreInventoryMovID],
    [CouponCode]
)
on (
    Target.PreInventoryMovID = Source.PreInventoryMovID
    and Target.CouponCode = Source.CouponCode
)
when not matched then
    insert (
        [PreInventoryMovID],
        [CouponCode]
    )
    values (
        Source.PreInventoryMovID,
        Source.CouponCode
    );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_PreSale_CalcSalePrice]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER PROCEDURE sp_PreSale_CalcSalePrice

		(
		@ModelID		int,
		@IDStore		int,
		@IDCustomer		int,
		@SpecialPriceID		int,
		@SalePrice		money Output,
		@CostPrice		money Output,
		@Discount		money Output,
		@AvgCostPrice		money Output,
		@ReplacementCost	money Output,
		@StoreSalePrice		money Output,
		@RequestCustomer	bit Output,
		@PuppyTracker		bit Output,
		@StoreCostPrice		money OutPut,
		@StoreAvgCost		money OutPut,
		@AddKitItems		bit OutPut,
		@PromotionPrice		money output
		)
AS

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	SUMARIO

		- Calculo do valor no modelo e seu custo
		- Calculo o valor do grupo e do modelo
		- Calculo o desconto pelo tipo de cliente

	TABELA DE ERROS PARA RETURN_VALUE

		 000  Ok
		-201  Erro no 1o select
		-202  Erro no 2o select
		-203  Erro ao Executar sp_PreSale_CalcCustomerDiscount

	LOG DE MODIFICAES

	Data			Programador		Modificao
	--------------------------------------- --------------------------------------- -----------------------------------------------------------------------------------------------------
	15 May  2000		Eduardo Costa		Criacao;
	16 Mar	2005		RodrigoCosta 		Inclusao do campo ReplacementCost
	28 Jul	2005		Rodrigo Costa		Inclusao do campo StoreSellingPrice
	30 Oct	2005		Rodrigo	Costa		Inclusao dos campos StoreCost and Store Avg
	21 Feb	2006		Maximiliano Muniz	Chamada da sp_PreSale_CalcCustomerDiscount
	16 Abr  2008		Ike Javarine		Inclusao de novo parametro para Preco Promocional
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  */

DECLARE @ErrorLevel	int
DECLARE @SysError	int
DECLARE @Model	money
DECLARE @ModelSP 	money
DECLARE @GroupSP 	money
 

SET @Model = Null
SET @ModelSP = Null
SET @GroupSP = Null
SET @ErrorLevel = 0


---------------------------------------------------------------------------------------------------
-- Calculo do valor no modelo e seu custo

SELECT
	@CostPrice = (IsNull(M.VendorCost,0) + IsNull(M.OtherCost,0) + IsNull(M.FreightCost, 0)),
	@Model = CASE WHEN IsNull(I.SellingPrice, 0) = 0 THEN IsNull(M.SellingPrice, 0) ELSE I.SellingPrice END,
	@AvgCostPrice = IsNull(M.AvgCost,0),
	@ReplacementCost = IsNull(ReplacementCost,0),
	@StoreSalePrice = IsNull(I.SellingPrice,0),
	@StoreCostPrice = IsNull(I.StoreCostPrice,0),
	@StoreAvgCost = IsNull(I.StoreAvgPrice,0),
	@AddKitItems = IsNull(TG.PackModelAddItems,0),
	@PromotionPrice = IsNull(M.PromotionPrice,0)
FROM
	Model M (NOLOCK) 
	JOIN TabGroup TG (NOLOCK) ON (M.GroupID = TG.IDGroup)
	LEFT OUTER JOIN Inventory I (NOLOCK) ON (I.ModelID = M.IDModel AND I.StoreID = @IDStore)
WHERE
	M.IDModel = @ModelID

	SET @SysError = @@ERROR
	IF @SysError <> 0
	BEGIN
		SET @ErrorLevel = -201
		GOTO ERRO
	END

---------------------------------------------------------------------------------------------------
-- Calculo o valor do grupo e do modelo

IF IsNull(@SpecialPriceID,0) > 0
BEGIN
	SELECT
		@GroupSP = (1+(SP.SpecialMarkUp/100) ) * (MO.VendorCost+MO.OtherCost+MO.FreightCost)
	FROM
		Model MO (NOLOCK) 
		JOIN SpecialPriceByGroup SP (NOLOCK)  ON (MO.GroupID = SP.GroupID)
	WHERE
		MO.IDModel = @ModelID
		AND
		SP.SpecialPriceID = @SpecialPriceID


	SELECT
		@ModelSP = (1+(MTSP.MarkUp/100)) * (MO.VendorCost+MO.OtherCost+MO.FreightCost)
	FROM
		Model MO (NOLOCK) 
		JOIN ModelToSpecialPrice MTSP (NOLOCK) ON (MO.IDModel = MTSP.IDModel)
	WHERE
		MO.IDModel = @ModelID
		AND
		MTSP.IDSpecialPrice = @SpecialPriceID

	SET @SysError = @@ERROR
	IF @SysError <> 0
	BEGIN
		SET @ErrorLevel = -202
		GOTO ERRO
	END

END

SET @SalePrice = IsNull(@ModelSP, IsNull(@GroupSP, @Model))

---------------------------------------------------------------------------------------------------
-- Calculo o desconto pelo tipo de Cliente

EXEC sp_PreSale_CalcCustomerDiscount @IDCustomer, @ModelID, 1, @SalePrice, @Discount OUTPUT


	SET @SysError = @@ERROR
	IF @SysError <> 0
	BEGIN
		SET @ErrorLevel = -203
		GOTO ERRO
	END


OK:
	RETURN 0
ERRO:
	PRINT CAST(@ErrorLevel AS VARCHAR)

	DECLARE @ErrorLevelStr varchar(10)
	SET  @ErrorLevelStr =  CAST(@ErrorLevel AS VARCHAR)
	EXEC sp_Sis_AppHistory_Add 0, 0, @SysError, 'MainRetail', 'Error: sp_PreSale_CalcSalePrice', @ErrorLevelStr

	RETURN @ErrorLevel
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_PreSale_Coupon_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO

ALTER proc [sp_PreSale_Coupon_Delete]
    @DocumentID int,
    @CouponCode nvarchar(255)
as
set nocount on

delete from Sal_Coupon where
    [DocumentID] = @DocumentID
    and [CouponCode] = @CouponCode

set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_PreSale_Coupon_Select]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO

/*****************************************************************************
 * Stored procedures for the "Sal_Coupon" table.
 ****************************************************************************/

ALTER proc [sp_PreSale_Coupon_Select]
    @DocumentID int,
    @CouponCode nvarchar(255)
as
set nocount on
select
    [DocumentID],
    [CouponCode]
from Sal_Coupon
where
    [DocumentID] = @DocumentID
    and [CouponCode] = @CouponCode
set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_PreSale_Coupon_Upsert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO

ALTER proc [sp_PreSale_Coupon_Upsert]
    @DocumentID int,
    @CouponCode nvarchar(255)
as
merge Sal_Coupon as Target
using (
    select
    @DocumentID,
    @CouponCode
)
as Source (
    [DocumentID],
    [CouponCode]
)
on (
    Target.DocumentID = Source.DocumentID
    and Target.CouponCode = Source.CouponCode
)
when not matched then
    insert (
        [DocumentID],
        [CouponCode]
    )
    values (
        Source.DocumentID,
        Source.CouponCode
    );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_Purchase_AddPurchaseItemTax]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER PROCEDURE sp_Purchase_AddPurchaseItemTax
		(
		@IDVendor      		int,
		@IDPurchaseItem	int,
		@IDPurchase		int
 		)
AS

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	SUMARIO

		- Insert on Pur_PurchaseItemTax

	TABELA DE ERROS PARA RETURN_VALUE

		 000  Ok
		-201  Erro em Insert on Pur_PurchaseItemTax


	LOG DE MODIFICAÇÕES

	Data			Programador		Modificação
	--------------------------------------- --------------------------------------- -----------------------------------------------------------------------------------------------------
	10 Dec  2000		Rodrigo Costa		Criacao;
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  */


DECLARE @ErrorLevel	int
DECLARE @SysError	int

--Declaração de variáveis para o Cursor de PurchaseItem
DECLARE @IDPurchaseItemTax		int 
DECLARE @IDVendorTax  		int
DECLARE @IDTaxCategory  		int

SET @ErrorLevel = 0

BEGIN TRAN


/*****************************************************************************************
	Inclusão dos impostos no item
******************************************************************************************/

--Declaração do Cursor de PurchaseItem

DECLARE PurchaseItem_Cursor CURSOR FOR

	SELECT
		VT.IDVendorTax,
		VT.IDTaxCategory
	FROM
		VendorTax VT (NOLOCK) 
	WHERE
		VT.IDPessoa = @IDVendor


OPEN PurchaseItem_Cursor 

--Inicialização de PurchaseItem_Cursor
FETCH NEXT FROM PurchaseItem_Cursor INTO
	@IDVendorTax,
	@IDTaxCategory

--Enquanto tem registros
WHILE
@@FETCH_STATUS = 0
BEGIN
	EXEC sp_Sis_GetNextCode'Pur_PurchaseItemTax.IDPurchaseItemTax', @IDPurchaseItemTax OUTPUT

	INSERT dbo.Pur_PurchaseItemTax
	(
	IDPurchaseItemTax,
	IDPurchaseItem,
	IDVendorTax,
	TaxValue,
	TaxPercentage,
	IDPurchase
	)
	SELECT
		@IDPurchaseItemTax,
		@IDPurchaseItem,
		@IDVendorTax,
		0,
	 	TG.Tax,
		@IDPurchase
	FROM
		TaxCategory TG (NOLOCK) 
	WHERE
		TG.IDTaxCategory = @IDTaxCategory

	SET @SysError = @@ERROR
	IF @SysError <> 0 
	BEGIN
		CLOSE PurchaseItem_Cursor
		DEALLOCATE PurchaseItem_Cursor
		SET @ErrorLevel = -201
		GOTO ERRO
	END

	--Leitura do Proximo 
	FETCH NEXT FROM PurchaseItem_Cursor INTO
		@IDVendorTax,
		@IDTaxCategory

END
--fechamento do cursor
CLOSE PurchaseItem_Cursor

--Destruição do cursor
DEALLOCATE PurchaseItem_Cursor


OK:
	COMMIT TRAN
	RETURN 0

ERRO:
	PRINT CAST(@ErrorLevel AS VARCHAR)
	ROLLBACK TRAN

	DECLARE @ErrorLevelStr varchar(10)
	SET  @ErrorLevelStr =  CAST(@ErrorLevel AS VARCHAR)
	EXEC sp_Sis_AppHistory_Add 0, 0, @SysError, 'MainRetail', 'Error: sp_Purchase_AddPurchaseItemTax', @ErrorLevelStr

	RETURN @ErrorLevel
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_Purchase_Do]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
ALTER    PROCEDURE [dbo].[sp_Purchase_Do]
	(
	@IDPurchase	int,
	@Date 		DateTime,
	@TaxInCost	Bit
	)
AS

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	SUMARIO
		
		- Deleto os InventoryMov
		- Incluo no Inventario os barcodes que ainda nao existam
		- Altero o Category no Model quando diferente
		- Atualizo o AvgCost no Model
		- Atualizo o AvgCost no Inventory
		- Incluo o InventoryMov se necessario
		- Se necessario crio os lancamentos no contas a pagar
		- Deleto as Qty do Pur_PurchaseQtyPreSale ##Rodrigo
		- Incluo as Qty do Pur_PurchaseQtyPreSale ##Rodrigo
		- Incluo os serial Numbers no inventory
		- Crio os lancamentos de retorno no contas a pagar, se necessario
		- Movimentar quantidade de  lote

	TABELA DE ERROS PARA RETURN_VALUE

		 000  Ok
		-201  Erro em Deleto as Qty do Pur_PurchaseQtyPreSale
		-202  Erro em Deleto as Qty do Pur_PurchaseQtyOrder
		-203  Erro em Deleto os PreInventoryMov
		-204  Erro em Deleto os InventoryMov
		-205  Erro em Incluo no Inventario os barcodes que ainda nao exitam
		-206  Erro em Atualizo a informa??o de category
		-207  Erro em Atualizar a TBL de Model com os valores se for Final
		-208  Erro em Incluo o InventoryMov se necessario
		-209  Erro em Insiro as Qty do Pur_PurchaseQtyPrePurchase se for PreReceiving para atualizar o qtyOnPreReceive na TBL Inventory
		-210  Erro em Insiro as Qty do Pur_PurchaseQtyOrder - Atualizar as qty no PO
		-211  Erro em Atualiza o total do PO
		-212  Erro em Crio os Serial Numbers no inventory se for final
		-213  Erro em Delete os Serial Numbers do Purchase
		-214  Erro em Deleto o Term do Fin >>> Os termos so serao deletados se o Purchase Type for do tipo Invoice
		-215  Erro em Crio os lancamentos no contas a pagar, se necessario
		-216  Erro em Incluio novamente o Term do Fin >>> Os termos so serao incluidos se o Purchase Type for do typo Invoice
		-217  Erro em Deletetar o InventoryMovTax
		-218  Erro em atualizar o PO
		-219  Erro em Crio os lancamentos de retorno no contas a pagar, se necessario
		-220  Erro em Inserir na ModelVendor
		-221  Erro em Atualizo o AvgCost no Model
		-222  Erro em Atualizo o AvgCost no Inventory
		-223  Erro em Inserir Case Barcode
		-224  Erro em movimentar quantidade Lote
		-225  Erro em remover produtos com IDModel NULL
		-226  Erro em remover barcode case duplicados
	
	LOG DE MODIFICA??ES

	Data			Programador		Modifica??o
	--------------------------------------- --------------------------------------- -----------------------------------------------------------------------------------------------------
	04 dezembro 	2000	Eduardo Costa		Cria??o;
	18 dezembro 	2000	Rodrigo Costa		Complemento;
	06 junho        	2001	Davi Gouveia	Variavel @ErrorLevel/Lista de Return_Values
	07 junho        	2001	Rodrigo Costa	Insert no Fin_LancamentoTerm
	07 dezembro 	2001	Rodrigo Costa		Nao pode deletar p PreInventoryMov, pois os item nao sao salvos la.
	13 May	        	2002	Rodrigo Costa	Criacao Lancamento Termo para os Disbursements 
	29 Oct		2003	Rodrigo Costa		Criado Cuersor para InvMov, Pur_PurchaseQtyPrePurchase, Pur_PurchaseQtyOrder_Cursor;
							Chamado da sp_GetNextCode;
	13 Feb		2004	Rodrigo Costa		Deletar o InventoryMovTax da Compra
	18 Aug		2004	Rodrigo Costa		Gravar error log
	14 Dez		2004	Rodrigo Costa		Cricao do campo @TaxInCost para incluir o preco do item; Retirado o update NewSalePrice
	11 Mar		2005	Carlos Lima		Tratamento das quantidades devolvidas
	11 Mar		2005	Rodrigo Costa		Atualizacao das quantidades no PO
	14 Mar		2005	Carlos Lima		Criação da Devolução no Contas a Pagar
	26 Abr		2005	Rodrigo Costa		Incluir impostos de devolucao caso necessario; Nao alterar categoria dos produtos
	02 Jan		2006	Carlos Lima		Retirada do update do AvgCost em Model e Inventory ( feito agora pela trigger do InventoryMov )
	12 Jan		2006	Carlos Lima		Update do AvgCost em InventoryMov
	22 Jan		2006	Rodrigo Costa		Atualizar o DateLastSellingPrice quando fizer a compra
	25 Jan		2006	Rodrigo Costa		Inserir na tabela de Inv_ModelVendor
	01 Jun		2006	Carlos Lima		O calculo do custo medio volta para a procedure ( espero q seja a ultima vez !!! )
	06 Jun		2006	Carlos Lima		Cursor para excluir o inventorymov e atualizar o custo médio
	19 Jun		2006	Leonardo Riego		Verificação se atualiza DateLastSellingPrice e DateLastCost na tabela de Model.
	07 Jul		2006	Rodrigo Costa		Adicionado o Trim no CodBarra do item da compra
	07 Fev		2006	Rodrigo Costa		Inserir Case Barcode
	24 Oct		2008	Rodrigo Costa		Atualizar preco de custo do fornecedor em Inv_ModelVendor
	31 Mar		2009	Rodrigo Costa		Movimentar quantidade de lote
	25 Jun		2009	Rodrigo Costa		Salvar custo do fornecedor sem impostos
	26 Set		2009	Rodrigo Costa		Deletar itens com valores NULL
	06 Jun		2010	Felipe Siqueira		Acerto no Serial Number do Inventory Serial duplicado
	06 Aug		2010	Rodrigo Cost		Exclir codigos de barras da caixa que estao duplicados
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  */

DECLARE @IDPO 			int
DECLARE @ErrorLevel 			int
DECLARE @SysError			int

--Declaracao de variaveis para o Cursor de InventoryMov
DECLARE @StoreID 			int 
DECLARE @IDPessoa 			int 
DECLARE @InventMovTypeID 		int 
DECLARE @DocumentID 		int 
DECLARE @ModelID 			int 
DECLARE @Qty 			float 
DECLARE @CostPrice 			money 
DECLARE @VendorCost			money 
DECLARE @SalePrice 			money 
DECLARE @BarCodeID 			char(20)
DECLARE @MovDate 			smalldatetime 
DECLARE @IDUser 			int 
DECLARE @IDInventoryMov		int
DECLARE @HasRet				int
DECLARE @IDLot				int

--Declara??o de vari?veis para o Cursor de Pur_PurchaseQtyPrePurchase
DECLARE @IDModel 			int 
DECLARE @IDStore 			int 
DECLARE @IDPurchaseQtyPreSale	float

--Declara??o de vari?veis para o Cursor de Pur_PurchaseQtyOrder
DECLARE @IDPOItem 			int 
DECLARE @IDPurchaseQtyOrder	float
DECLARE @AvgCost		float

DECLARE @IDInventory		int

BEGIN TRAN


-----------------------------------------------------------
-- Deleto as Qty do Pur_PurchaseQtyPreSale
DELETE
	PQP
FROM
	Pur_PurchaseQtyPrePurchase PQP (NOLOCK) 
WHERE
	PQP.IDPurchase = @IDPurchase

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -201
	GOTO ERRO
END

-----------------------------------------------------------
-- Deleto as Qty do Pur_PurchaseQtyOrder
DELETE
	PQP
FROM 
	Pur_PurchaseQtyOrder PQP (NOLOCK) 
WHERE
	PQP.IDPurchase = @IDPurchase

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -202
	GOTO ERRO
END

------------------------------------------------------------------------------
-- Deleto os PreInventoryMov
/*
DELETE
	PIM
FROM
	PreInventoryMov PIM
WHERE
	PIM.DocumentID = @IDPurchase
	AND
	PIM.InventMovTypeID = 2

IF @@ERROR <> 0
BEGIN
	SET @ErrorLevel = -225
	GOTO ERRO
END
*/

------------------------------------------------------------------------------
-- Deleto os InventoryMovTax

DELETE
	IMT
FROM
	InventoryMovTax IMT (NOLOCK) 
WHERE
	IMT.IDInventoryMov IN (	SELECT IDInventoryMov
			       	FROM InventoryMov IM (NOLOCK) 
				WHERE IM.DocumentID = @IDPurchase AND
				IM.InventMovTypeID = 2
				)

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -217
	GOTO ERRO
END

------------------------------------------------------------------------------
-- Deleto os produtos com IDModel NULL
DELETE
	PPI
FROM
	Pur_PurchaseItem PPI
WHERE
	PPI.IDPurchase = @IDPurchase
	AND
	PPI.IDModel IS NULL

IF @@ERROR <> 0
BEGIN
	SET @ErrorLevel = -225
	GOTO ERRO
END

------------------------------------------------------------------------------
-- Deleto os InventoryMov

DECLARE InventoryMov_Cursor CURSOR FOR

SELECT
	IM.IDInventoryMov
FROM
	InventoryMov IM (NOLOCK) 
WHERE
	IM.DocumentID = @IDPurchase
	AND
	IM.InventMovTypeID = 2


OPEN InventoryMov_Cursor


FETCH NEXT FROM InventoryMov_Cursor INTO
	@IDInventoryMov

WHILE @@FETCH_STATUS = 0
BEGIN
	EXEC sp_Inventory_Del_Moviment @IDInventoryMov
	SET @SysError = @@ERROR
	IF @SysError <> 0
	BEGIN
		CLOSE InventoryMov_Cursor
		DEALLOCATE InventoryMov_Cursor
		SET @ErrorLevel = -204
		GOTO ERRO
	END

	FETCH NEXT FROM InventoryMov_Cursor INTO
		@IDInventoryMov
END

CLOSE InventoryMov_Cursor
DEALLOCATE InventoryMov_Cursor

------------------------------------------------------------------------------
-- Incluo no Inventario os barcodes que ainda nao exitam

-- amfsouza May, 9 2012 - begin
declare @versionType varchar(30)

select @versionType = versionType from Sys_Module

if ( @versionType = 'SERVER' or @versionType = 'STAND_ALONE' ) begin
	INSERT
		BarCode (IDBarCode, IDModel, Data, BarcodeOrder)
	SELECT
		PPI.BarCode,
		PPI.IDModel,
		@Date,
		IsNull(Max(BarcodeOrder), 0) + 1
	FROM
		Pur_PurchaseItem PPI (NOLOCK) 
		LEFT OUTER JOIN BarCode BC (NOLOCK) ON (PPI.IDModel = BC.IDModel)
	WHERE
		(PPI.BarCode IS NOT NULL AND (RTRIM(LTRIM(PPI.BarCode)) <> ''))
		AND PPI.IDPurchase = @IDPurchase
		AND NOT EXISTS (SELECT * FROM Barcode (NOLOCK) WHERE IDBarcode = PPI.BarCode)
	GROUP BY
		PPI.BarCode,
		PPI.IDModel

	SET @SysError = @@ERROR
	IF @SysError <> 0
	BEGIN
		SET @ErrorLevel = -205
		GOTO ERRO	
	END
end
-- amfsouza May, 9 2012 - end

------------------------------------------------------------------------------
-- Removo os codigos de barras da embalagem duplicados
UPDATE PU
SET PU.BarcodeCase = NULL
FROM Pur_PurchaseItem PU
WHERE PU.BarcodeCase IN(
	SELECT I1.BarcodeCase
	FROM Pur_PurchaseItem I1
	JOIN Pur_PurchaseItem I2 ON (I1.BarcodeCase = I2.BarcodeCase)
	WHERE I1.IDPurchase = @IDPurchase
	GROUP BY I1.BarcodeCase
	HAVING Count(I1.BarcodeCase) > 1) AND
PU.IDPurchase = @IDPurchase

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -226
	GOTO ERRO
END

------------------------------------------------------------------------------
-- Incluo no Inventario o barcode de embalagem
INSERT
	BarCode (IDBarCode, IDModel, Data, BarcodeOrder, Qty)
SELECT
	PPI.BarcodeCase,
	PPI.IDModel,
	@Date,
	IsNull(Max(BarcodeOrder), 0) + 1,
	(PPI.Qty / IsNull(PPI.CaseQty,1))
FROM
	Pur_PurchaseItem PPI (NOLOCK) 
	LEFT OUTER JOIN Barcode BC (NOLOCK) ON (PPI.IDModel = BC.IDModel)
WHERE
	(PPI.BarcodeCase IS NOT NULL AND (RTRIM(LTRIM(PPI.BarcodeCase)) <> ''))
	AND PPI.IDPurchase = @IDPurchase
	AND NOT EXISTS (SELECT IDBarcode FROM Barcode (NOLOCK) WHERE IDBarcode = PPI.BarcodeCase)
	AND IsNull(PPI.CaseQty,0) >= 1
GROUP BY
	PPI.BarcodeCase,
	PPI.IDModel,
	PPI.CaseQty,
	PPI.Qty

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -223
	GOTO ERRO
END
------------------------------------------------------------------------------
-- Atualizo a informacao de category

UPDATE
	M
SET
	M.GroupID = PPI.IDGroup
FROM
	Model M (NOLOCK) 
	JOIN Pur_PurchaseItem PPI (NOLOCK) ON (M.IDModel = PPI.IDModel)
WHERE
	M.GroupID <> PPI.IDGroup
	AND
	PPI.IDPurchase = @IDPurchase

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -206
	GOTO ERRO
END


--------------------------------------------------------------------------------------------------
---Atualizar a TBL de Model com os valores se for Final
---Imposto nao esta incluido no Custo do produto
IF (@TaxInCost=1)
BEGIN
	UPDATE
		Model
	SET
		Model.Desativado     	= 0,
		Model.DateLastSellingPrice = CASE PUI.IsPromo WHEN 0 THEN (CASE IsNull(PUI.NewSalePrice, 0) WHEN 0 THEN Model.DateLastSellingPrice WHEN Model.SellingPrice THEN Model.DateLastSellingPrice ELSE @Date END) ELSE Model.DateLastSellingPrice END,
		Model.DateLastCost   	= CASE PUI.IsPromo WHEN 0 THEN (CASE WHEN (Model.LastCost = Model.VendorCost) THEN Model.DateLastCost ELSE @Date END) ELSE Model.DateLastCost END ,
		Model.LastCost       	= CASE PUI.IsPromo WHEN 0 THEN IsNull(Model.VendorCost,0) ELSE Model.LastCost END,
		Model.VendorCost     	= CASE PUI.IsPromo WHEN 0 THEN IsNull(PUI.NewCostPrice,0) ELSE Model.VendorCost END,
		Model.SellingPrice 	= CASE PUI.IsPromo WHEN 0 THEN (CASE IsNull(PUI.NewSalePrice,0) WHEN 0 THEN Model.SellingPrice ELSE PUI.NewSalePrice END) ELSE Model.SellingPrice END,
		Model.SuggRetail 	= CASE PUI.IsPromo WHEN 0 THEN (CASE IsNull(PUI.NewSuggRetail,0) WHEN 0 THEN Model.SuggRetail ELSE PUI.NewSuggRetail END) ELSE Model.SuggRetail END,
		Model.OtherCost		= 0, --OtherCost ja esta incluido no custo
		Model.FreightCost    	= 0 --Freight ja esta incluido no custo
		
	FROM
		Pur_Purchase PU (NOLOCK) 
		JOIN Pur_PurchaseItem PUI (NOLOCK) ON (PU.IDPurchase = PUI.IDPurchase)
		JOIN Pur_PurchaseTotal PUT (NOLOCK) ON (PU.IDPurchase = PUT.IDPurchase)
	WHERE
		PU.IDPurchase = @IDPurchase
		AND
		DateFinalReceiving IS NOT NULL
		AND
		Model.IDModel = PUI.IDModel
END
ELSE
BEGIN

	UPDATE
		Model
	SET
		Model.Desativado	= 0,
		Model.DateLastSellingPrice = CASE PUI.IsPromo WHEN 0 THEN (CASE IsNull(PUI.NewSalePrice, 0) WHEN 0 THEN Model.DateLastSellingPrice WHEN Model.SellingPrice THEN Model.DateLastSellingPrice ELSE @Date END) ELSE Model.DateLastSellingPrice END,
		Model.DateLastCost	= CASE PUI.IsPromo WHEN 0 THEN (CASE WHEN (Model.LastCost = Model.VendorCost) THEN Model.DateLastCost ELSE @Date END) ELSE Model.DateLastCost END,
		Model.SellingPrice 	= CASE PUI.IsPromo WHEN 0 THEN IsNull(PUI.NewSalePrice,0) ELSE Model.SellingPrice END,
		Model.SuggRetail 	= CASE PUI.IsPromo WHEN 0 THEN IsNull(PUI.NewSuggRetail,0)ELSE Model.SuggRetail END,
		Model.LastCost		= CASE PUI.IsPromo WHEN 0 THEN IsNull(Model.VendorCost,0) ELSE Model.LastCost END,
		Model.VendorCost	= CASE PUI.IsPromo WHEN 0 THEN IsNull(PUI.NewCostPrice,0) ELSE Model.VendorCost END,
				
		Model.OtherCost 	= CASE PUI.IsPromo WHEN 0 THEN ( ROUND(
										CASE	WHEN 	PUT.SubTotal = 0 THEN 0
											ELSE	( IsNull((PU.OtherCharges / PUT.SubTotal)  * (PUI.NewCostPrice)  , 0 ) )
										END
	
				      					,2)) ELSE Model.OtherCost END,
	
	
		Model.FreightCost 	= CASE PUI.IsPromo WHEN 0 THEN ( ROUND(
					 					 CASE	WHEN 	PUT.SubTotal = 0 THEN 0
											ELSE	( IsNull(	(PU.Freight / PUT.SubTotal)  * (PUI.NewCostPrice) , 0 ) )
					 					 END
				      					,2)) ELSE Model.FreightCost END
			
	FROM
		Pur_Purchase PU (NOLOCK) 
		JOIN Pur_PurchaseItem PUI (NOLOCK) ON (PU.IDPurchase = PUI.IDPurchase)
		JOIN Pur_PurchaseTotal PUT (NOLOCK) ON (PU.IDPurchase = PUT.IDPurchase)
	WHERE
		PU.IDPurchase = @IDPurchase
		AND
		DateFinalReceiving IS NOT NULL
		AND
		Model.IDModel = PUI.IDModel

END


SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -207
	GOTO ERRO
END


------------------------------------------------------------------------------
-- Incluo o InventoryMov se necessario
--Declara??o do Cursor de InventoryMov
DECLARE InventoryMov_Cursor CURSOR FOR

SELECT
	PP.IDStore,
	PP.IDFornecedor,
	2, -- Compra
	PP.IDPurchase,
	PPI.IDModel,
	PPI.Qty - IsNull(PPI.QtyRet, 0) AS Qty,
	PPI.NewCostPrice,
	PPI.CostPrice,
	PPI.NewSalePrice,
	PPI.BarCode,
	PP.DateFinalReceiving,
	PP.IDUserFinalReceiving,
	IsNull(PPI.IDLote, 0) as IDLote
FROM
	Pur_Purchase PP (NOLOCK) 
	JOIN Pur_PurchaseItem PPI (NOLOCK) ON (PP.IDPurchase = PPI.IDPurchase)
WHERE
	PP.IDPurchase = @IDPurchase
	AND
	DateFinalReceiving IS NOT NULL

OPEN InventoryMov_Cursor

--Inicializacao de InventoryMov_Cursor
FETCH NEXT FROM InventoryMov_Cursor INTO
	@StoreID,
	@IDPessoa,
	@InventMovTypeID,
	@DocumentID,
	@ModelID,
	@Qty,
	@CostPrice,
	@VendorCost,
	@SalePrice,
	@BarCodeID,
	@MovDate,
	@IDUser,
	@IDLot
--Enquanto tem registros
WHILE
@@FETCH_STATUS = 0
BEGIN

	-- Atualiza o saldo em valor do Model

	UPDATE
		Model
	SET
		Model.AvgCostTotal = IsNull(Model.AvgCostTotal, 0) + (@CostPrice * @Qty),
		Model.AvgCost = CASE WHEN (IsNull(Model.TotQtyOnHand, 0) + @Qty) = 0 
					THEN 0 
					ELSE (IsNull(Model.AvgCostTotal, 0) + (@CostPrice * @Qty)) / (IsNull(Model.TotQtyOnHand, 0) + @Qty) 
				END
	WHERE
		Model.IDModel = @ModelID

	SET @SysError = @@ERROR
	IF @SysError <> 0
	BEGIN
		CLOSE InventoryMov_Cursor
		DEALLOCATE InventoryMov_Cursor
		SET @ErrorLevel = -221
		GOTO ERRO
	END

	IF NOT EXISTS(SELECT ModelID FROM Inventory WHERE ModelID = @ModelID AND StoreID = @StoreID)
	BEGIN
		EXEC sp_Sis_GetNextCode'Inventory.IDInventory', @IDInventory OUTPUT
	
		INSERT Inventory
			(
			IDInventory,
			StoreID,
			ModelID
			)
		VALUES
			(
			@IDInventory,
			@StoreID,
			@ModelID
			)
	END


	-- Atualiza o saldo em valor do inventory
	SELECT
		@AvgCost = 
			CASE WHEN (IsNull(Inventory.QtyOnHand, 0) + @Qty) = 0 
				THEN 0 
				ELSE (IsNull(Inventory.AvgCostTotal, 0) + (@CostPrice * @Qty)) / (IsNull(Inventory.QtyOnHand, 0) + @Qty) 
			END
	FROM
		Inventory
	WHERE
		Inventory.ModelID = @ModelID
		AND
		Inventory.StoreID = @StoreID



	UPDATE
		Inventory
	SET
		Inventory.AvgCostTotal = IsNull(Inventory.AvgCostTotal, 0) + (@CostPrice * @Qty),
		Inventory.StoreAvgPrice = @AvgCost
	WHERE
		Inventory.ModelID = @ModelID
		AND
		Inventory.StoreID = @StoreID

	SET @SysError = @@ERROR
	IF @SysError <> 0
	BEGIN
		CLOSE InventoryMov_Cursor
		DEALLOCATE InventoryMov_Cursor
		SET @ErrorLevel = -222
		GOTO ERRO
	END
	
	--Atualizo o Lote
	IF @IDLot <> 0
		EXEC sp_Inventory_Lot_Adjust @ModelID, @StoreID, @IDLot, @Qty, 1

	EXEC sp_Sis_GetNextCode 'InventoryMov.IDInventoryMov', @IDInventoryMov OUTPUT

	INSERT InventoryMov
		(
		IDInventoryMov,
		StoreID,
		IDPessoa,
		InventMovTypeID,
		DocumentID,
		ModelID,
		Qty,
		CostPrice,
		SalePrice,
		BarCodeID,
		MovDate,
		IDUser,
		AvgCost
		)
	VALUES
		(
		@IDInventoryMov,
		@StoreID,
		@IDPessoa,
		@InventMovTypeID,
		@DocumentID,
		@ModelID,
		@Qty,
		@CostPrice,
		@SalePrice,
		@BarCodeID,
		@MovDate,
		@IDUser,
		@AvgCost
		)

	SET @SysError = @@ERROR
	IF @SysError <> 0
	BEGIN
		CLOSE InventoryMov_Cursor
		DEALLOCATE InventoryMov_Cursor
		SET @ErrorLevel = -208
		GOTO ERRO
	END
	
	IF (@TaxInCost=1)
		SET @VendorCost = (@VendorCost / @Qty) --Custo Unitario - BR
	ELSE
		SET @VendorCost = @CostPrice --Custo Unitario - USA

	IF NOT EXISTS (SELECT IDModel FROM Inv_ModelVendor WHERE IDModel = @ModelID AND IDPessoa = @IDPessoa)
	BEGIN
		INSERT
			Inv_ModelVendor (IDModel, IDPessoa, VendorOrder, VendorCost, CostLastChange)
		SELECT
			@ModelID,
			@IDPessoa,
			IsNull(MAX(IMV.VendorOrder),0) + 1,
			@VendorCost,
			GetDate()
		FROM
			Inv_ModelVendor IMV (NOLOCK) 
		WHERE
			IMV.IDModel = @ModelID
	END
	ELSE
	BEGIN

		UPDATE 
			MV
		SET
			VendorCost = @VendorCost,
			CostLastChange = @MovDate
		FROM 
			Inv_ModelVendor MV
		WHERE 
			IDModel = @ModelID 
			AND 
			IDPessoa = @IDPessoa
			AND
			IsNull(CostLastChange, 0) < @MovDate
	END

	SET @SysError = @@ERROR
	IF @SysError <> 0
	BEGIN
		PRINT 'ERROR AQUI'
		CLOSE InventoryMov_Cursor
		DEALLOCATE InventoryMov_Cursor
		SET @ErrorLevel = -220
		GOTO ERRO
	END


	FETCH NEXT FROM InventoryMov_Cursor INTO

		@StoreID,
		@IDPessoa,
		@InventMovTypeID,
		@DocumentID,
		@ModelID,
		@Qty,
		@CostPrice,
		@VendorCost,
		@SalePrice,
		@BarCodeID,
		@MovDate,
		@IDUser,
		@IDLot
END
--fechamento do cursor
CLOSE InventoryMov_Cursor
--Destrui??o do cursor
DEALLOCATE InventoryMov_Cursor

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -208
	GOTO ERRO
END


-----------------------------------------------------------
-- Insiro as Qty do Pur_PurchaseQtyPrePurchase se for PreReceiving para atualizar o qtyOnPreReceive na TBL Inventory
--Declara??o do Cursor de Pur_PurchaseQtyPrePurchase
DECLARE Pur_PurchaseQtyPrePurchase_Cursor CURSOR FOR

SELECT
	PUI.IDModel,
	PU.IDStore,
	SUM(PUI.Qty - IsNull(PUI.QtyRet, 0))
FROM
	Pur_Purchase PU (NOLOCK) 
	JOIN Pur_PurchaseItem PUI (NOLOCK) ON (PU.IDPurchase = PUI.IDPurchase)
WHERE
	PU.IDPurchase = @IDPurchase
	AND
	PU.DateFinalReceiving IS NULL
GROUP BY
	PUI.IDModel,
	PU.IDStore,
	PUI.IDPOItem


OPEN Pur_PurchaseQtyPrePurchase_Cursor

--Inicializa??o de Pur_PurchaseQtyPrePurchase_Cursor
FETCH NEXT FROM Pur_PurchaseQtyPrePurchase_Cursor INTO
	@IDModel,
	@IDStore,
	@Qty
--Enquanto tem registros
WHILE
@@FETCH_STATUS = 0
BEGIN
	EXEC sp_Sis_GetNextCode'Pur_PurchaseQtyPrePurchase.IDPurchaseQtyPreSale', @IDPurchaseQtyPreSale OUTPUT
	INSERT Pur_PurchaseQtyPrePurchase
		(
		IDPurchaseQtyPreSale,
		IDPurchase,
		IDModel,
		IDStore,
		Qty
		)
	VALUES
		(
		@IDPurchaseQtyPreSale,
		@IDPurchase,
		@IDModel,
		@IDStore,
		@Qty
		)

	SET @SysError = @@ERROR
	IF @SysError <> 0
	BEGIN
		CLOSE Pur_PurchaseQtyPrePurchase_Cursor
		DEALLOCATE Pur_PurchaseQtyPrePurchase_Cursor
		SET @ErrorLevel = -209
		GOTO ERRO
	END

	FETCH NEXT FROM Pur_PurchaseQtyPrePurchase_Cursor INTO
		@IDModel,
		@IDStore,
		@Qty
END
--fechamento do cursor
CLOSE Pur_PurchaseQtyPrePurchase_Cursor
--Destrui??o do cursor
DEALLOCATE Pur_PurchaseQtyPrePurchase_Cursor


SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -209
	GOTO ERRO
END


-----------------------------------------------------------
-- Insiro as Qty do Pur_PurchaseQtyOrder - Atualizar as qty no PO
--Declara??o do Cursor de Pur_PurchaseQtyOrder

DECLARE Pur_PurchaseQtyOrder_Cursor CURSOR FOR

SELECT
	PUI.IDModel,
	PU.IDStore,
	PUI.IDPOItem,
	SUM(PUI.Qty - IsNull(PUI.QtyRet, 0))
FROM
	Pur_Purchase PU (NOLOCK) 
	JOIN Pur_PurchaseItem PUI (NOLOCK) ON (PU.IDPurchase = PUI.IDPurchase)
WHERE
	PU.IDPurchase = @IDPurchase
GROUP BY
	PUI.IDModel,
	PU.IDStore,
	PUI.IDPOItem

OPEN Pur_PurchaseQtyOrder_Cursor

--Inicializa??o de Pur_PurchaseQtyOrder_Cursor
FETCH NEXT FROM Pur_PurchaseQtyOrder_Cursor INTO
	@IDModel,
	@IDStore,
	@IDPOItem,
	@Qty
--Enquanto tem registros
WHILE
@@FETCH_STATUS = 0
BEGIN
	EXEC sp_Sis_GetNextCode'Pur_PurchaseQtyOrder.IDPurchaseQtyOrder', @IDPurchaseQtyOrder OUTPUT
	INSERT Pur_PurchaseQtyOrder
		(
		IDPurchaseQtyOrder,
		IDPurchase,
		IDModel,
		IDStore,
		IDPOItem,
		Qty
		)
	VALUES
		(
		@IDPurchaseQtyOrder,
		@IDPurchase,
		@IDModel,
		@IDStore,
		@IDPOItem,
		@Qty
		)

	SET @SysError = @@ERROR
	IF @SysError <> 0
	BEGIN
		CLOSE Pur_PurchaseQtyOrder_Cursor
		DEALLOCATE Pur_PurchaseQtyOrder_Cursor
		SET @ErrorLevel = -210
		GOTO ERRO
	END

	FETCH NEXT FROM Pur_PurchaseQtyOrder_Cursor INTO
		@IDModel,
		@IDStore,
		@IDPOItem,
		@Qty
END
--fechamento do cursor
CLOSE Pur_PurchaseQtyOrder_Cursor
--Destrui??o do cursor
DEALLOCATE Pur_PurchaseQtyOrder_Cursor


SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -210
	GOTO ERRO
END

------------------------------------------------------------------------------
-- Atualiza o total do PO

SELECT
	@IDPO = PIM.DocumentID
FROM
	PreInventoryMov PIM (NOLOCK) 
	JOIN Pur_PurchaseQtyOrder PQO (NOLOCK) ON (PIM.IDPreInventoryMov = PQO.IDPOItem)
WHERE
	PQO.IDPurchase = @IDPurchase	

EXEC sp_PO_AtuPOTotal @IDPO

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -211
	GOTO ERRO
END

------------------------------------------------------------------------------
-- Atualizo os totais da PO, se necessario
SELECT
	@IDPO = P.IDPO
FROM
	Pur_Purchase P (NOLOCK) 
WHERE
	IDPurchase = @IDPurchase

EXEC sp_PO_CalcTotalQty @IDPO

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -218
	GOTO ERRO
END


------------------------------------------------------------------------------
-- Crio os Serial Numbers no inventory se for final
INSERT
	InventorySerial
	(
	StoreID,
	ModelID,
	Serial
	)
SELECT
	PU.IDStore,
	PUI.IDModel,
	PIS.SerialNumber
FROM
	Pur_Purchase PU (NOLOCK) 
	JOIN Pur_PurchaseItemSerial PIS (NOLOCK) ON (PU.IDPurchase = PIS.IDPurchase)
	JOIN Pur_PurchaseItem PUI (NOLOCK) ON (PIS.IDPurchaseItem = PUI.IDPurchaseItem)
WHERE
	PIS.IDPurchase = @IDPurchase
	AND
	PU.DateFinalReceiving IS NOT NULL

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -212
	GOTO ERRO
END


------------------------------------------------------------------------------
-- Delete os Serail Numbers do Purchase
DELETE
	PIS
FROM
	Pur_PurchaseItemSerial PIS (NOLOCK) 
	JOIN Pur_Purchase PU (NOLOCK) ON (PU.IDPurchase = PIS.IDPurchase)
WHERE
	PIS.IDPurchase = @IDPurchase
	AND
	PU.DateFinalReceiving IS NOT NULL

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -213
	GOTO ERRO
END


------------------------------------------------------------------------------
-- Deleto o Term do Fin >>> Os termos so serao deletados se o Purchase Type for do typo Invoice


DELETE
	Fin_LancamentoTerm
WHERE
	IDLancamento IN (SELECT L.IDLancamento FROM Fin_Lancamento L WHERE L.IDPurchase = @IDPurchase)

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -214
	GOTO ERRO
END


------------------------------------------------------------------------------
-- Crio os lancamentos no contas a pagar, se necessario
IF (@TaxInCost=1)
	EXEC sp_Purchase_CriaPagamentoComImposto @IDPurchase
ELSE
	EXEC sp_Purchase_CriaPagamento @IDPurchase


SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -215
	GOTO ERRO
END


------------------------------------------------------------------------------
-- Crio os lancamentos de retorno no contas a pagar, se necessario

SELECT
	@HasRet = SUM(ABS(IsNull(PPI.QtyRet, 0)))
FROM
	Pur_Purchase PP (NOLOCK) 
	JOIN Pur_PurchaseItem PPI (NOLOCK) ON (PP.IDPurchase = PPI.IDPurchase)
WHERE
	PP.IDPurchase = @IDPurchase
	AND
	DateFinalReceiving IS NOT NULL

IF ((@TaxInCost=1) AND (@HasRet>0))
	EXEC sp_Purchase_CriaPagamentoComImpostoRet @IDPurchase

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -219
	GOTO ERRO
END

------------------------------------------------------------------------------
-- Incluio novamente o Term do Fin >>> Os termos so serao incluidos se o Purchase Type for do typo Invoice

INSERT
	Fin_LancamentoTerm (IDLancamento, DueDateShift, Discount)
SELECT
	L.IDLancamento, PT.DueDateShift, PT.Discount
FROM
	Pur_PurchaseTerm PT (NOLOCK) 
	JOIN Fin_Lancamento L (NOLOCK) ON (L.IDPurchase = PT.IDPurchase)
WHERE
	L.IDPurchase = @IDPurchase

SET @SysError = @@ERROR
IF @SysError <> 0
BEGIN
	SET @ErrorLevel = -216
	GOTO ERRO
END


OK:
	COMMIT TRAN
	RETURN 0

ERRO:
	ROLLBACK TRAN

	DECLARE @ErrorLevelStr varchar(10)
	SET  @ErrorLevelStr =  CAST(@ErrorLevel AS VARCHAR)
	EXEC sp_Sis_AppHistory_Add 0, 0, @SysError, 'MainRetail', 'Error: sp_Purchase_Do', @ErrorLevelStr

	--RETURN @ErrorLevel
	
    RETURN 'Stored Proc Error: '+ @ErrorLevel + ' in sp_PurchaseDo '
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_SelectModelTags]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
/*
 * Usage: exec [sp_SelectModelTags] @ModelID = 123
 */
ALTER proc [sp_SelectModelTags]
    @ModelID int
as
    set nocount on
    select * from TagsWithAttrsAndModels where IDModel = @ModelID;
    set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_SelectPotentialModelTags]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER proc sp_SelectPotentialModelTags
    @ModelID int
as
    set nocount on
    select * from TagsWithAttrsAndModels where IDModel <> @ModelID;
    set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_TagModelCounts]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER proc sp_TagModelCounts
as
set nocount on
select Tag.IDTag, Tag.TagName,
    (select count(*) from TagModel TM where TM.IDTag = Tag.IDTag) as ModelCount
from Tag
order by Tag.TagName;
set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_TagsForModel]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER proc sp_TagsForModel
    @IDModel int
as
set nocount on

select Tag.*
from Tag
where IDTag in (
    select IDTag
    from TagModel
    where IDModel = @IDModel
)
order by TagName, IDTag;

set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[LastAvgCost]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER FUNCTION dbo.LastAvgCost(
	@IDStore	int,
	@IDModel	int,
	@MovDate	DateTime
	) RETURNS money AS
BEGIN

DECLARE @AvgCost money

SELECT @AvgCost = 0

SELECT TOP 1
	@AvgCost = IM.AvgCost
FROM
	InventoryMov IM
WHERE
	IM.MovDate <= @MovDate
	AND
	IM.StoreID = (CASE @IDStore WHEN 0 THEN IM.StoreID ELSE @IDStore END)
	AND
	IM.ModelID = @IDModel
	AND
	IsNull(IM.AvgCost, 0) <> 0
ORDER BY
	IM.MovDate DESC

RETURN @AvgCost

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[fn_Inv_GetBalanceQty]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER FUNCTION fn_Inv_GetBalanceQty(
	@IDModel int,
	@Date DateTime
	) RETURNS float AS
BEGIN

DECLARE @Result float
DECLARE @RealDate DateTime
SET @RealDate = CONVERT(DateTime, '01/' + convert(varchar, DatePart(MM, @Date)) + '/' +	convert(varchar, DatePart(YY, @Date)), 103)

SELECT
	@Result = SUM(IsNull(IM.Qty * (2 * IMT.UpdateOnHand - 1), 0))
FROM
	InventoryMov IM (NOLOCK)
	JOIN InventoryMovType IMT (NOLOCK) ON (IM.InventMovTypeID = IMT.IDInventMovType)
WHERE
	IM.ModelID = @IDModel
	AND IM.MovDate < @RealDate

RETURN @Result
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[fn_Inv_LastAvgCost]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER FUNCTION fn_Inv_LastAvgCost(
	@IDStore	int,
	@IDModel	int,
	@MovDate	DateTime
	) RETURNS money AS
BEGIN

DECLARE @AvgCost money
SET @AvgCost = 0

SELECT
	@AvgCost = IM.AvgCost
FROM
	InventoryMov IM
	INNER JOIN (
		SELECT MAX(MovDate) MovDate
		FROM InventoryMov
		WHERE MovDate <= @MovDate AND ModelID = @IDModel 
	) A ON (IM.MovDate = A.MovDate)
WHERE
	IM.StoreID = (CASE @IDStore WHEN 0 THEN IM.StoreID ELSE @IDStore END)
	AND IM.ModelID = @IDModel
	AND IsNull(IM.AvgCost, 0) <> 0

RETURN @AvgCost
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[fn_Inv_LastAvgCostNonZero]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER FUNCTION fn_Inv_LastAvgCostNonZero(
	@IDModel	int,
	@MovDate	DateTime
	) RETURNS money AS
BEGIN

DECLARE @LastAvgCost money
DECLARE @DateInicio DateTime

SET @DateInicio = DATEADD(d, -DATEPART (d , @MovDate ) , @MovDate)

IF NOT EXISTS(select *
	   from inventorymov IM (nolock)
	  where IM.modelid = @IDModel
		AND IM.inventmovtypeid in (2, 5)
		AND CONVERT(smalldatetime, CONVERT(varchar, IM.MovDate, 103), 103) > @DateInicio
		AND CONVERT(smalldatetime, CONVERT(varchar, IM.MovDate, 103), 103) <= @MovDate
		AND CONVERT(smalldatetime, CONVERT(varchar, IM.MovDate, 103), 103) > (SELECT MAX(BalanceDate) LastBalanceDate
				 FROM Inv_ModelBalance
				WHERE IDModel = @IDModel
				      AND BalanceDate < @MovDate
				      AND Qty > 0) ) 


BEGIN

SELECT
	@LastAvgCost = MB.AvgCostOut
FROM
	Inv_ModelBalance MB
WHERE
	MB.IDModel = @IDModel
	AND MB.BalanceDate = (SELECT MAX(BalanceDate) LastBalanceDate
				 FROM Inv_ModelBalance
				WHERE IDModel = @IDModel
				      AND BalanceDate < @MovDate
				      AND Qty > 0)
END
ELSE
BEGIN

select @LastAvgCost = totalcostprice / qty
from (
select sum(im.qty) as qty,
	sum(im.qty * im.costprice) as totalcostprice
   from inventorymov im (nolock)
  where im.modelid = @IDModel
	and im.inventmovtypeid in (2, 5)
	and convert(smalldatetime, convert(varchar, im.movdate, 103), 103) <= @MovDate
	and convert(smalldatetime, convert(varchar, im.movdate, 103), 103) > (SELECT max(convert(smalldatetime, convert(varchar, im.movdate, 103), 103)) as movdate --proxima venda epois da ultima compra
										   FROM	InventoryMov IM
										  WHERE	IM.ModelID = @IDModel
											AND IM.InventMovTypeID = 1
											AND CONVERT(smalldatetime, CONVERT(varchar, IM.MovDate, 103), 103) < (select max(convert(smalldatetime, convert(varchar, im.movdate, 103), 103)) as movdate
																				   from inventorymov im (nolock) --Proxima compra
																				  where im.modelid = @IDModel
																					and convert(smalldatetime, convert(varchar, im.movdate, 103), 103) <= @MovDate
																				and im.inventmovtypeid in (2, 5) )
										) 										
) X
	

END

RETURN @LastAvgCost

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[fn_CalcPrice]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO

/*
 * Prices are selected in the following order of preference.
 * Example usage:
 *     select dbo.fn_CalcPrice(228086, 2192, 1, null);
 *
 * Note that Qty gets updated before this is called so that we
 * don't have to pass in @Qty.
 *
 */
ALTER function [dbo].[fn_CalcPrice] (
    @PreInventoryMovID int,
    @SpecialPriceID int = null
)
returns money with execute as caller as
begin
    declare @SalePrice money;

    select @SalePrice =
        ManualPrice
        from ManualPrice
        where IDPreInventoryMov = @PreInventoryMovID;

    if @SalePrice is not null
        return @SalePrice;

    if @SpecialPriceID is not null
        select @SalePrice =
            round(M.FinalCost * (SPBG.SpecialMarkUp + 1), 4)
            from PreInventoryMov PIM
            join Model M on (M.IDModel = PIM.ModelID)
            join SpecialPriceByGroup SPBG on (SPBG.GroupID = M.GroupID)
            where SPBG.SpecialPriceID = @SpecialPriceID
                and PIM.IDPreInventoryMov = @PreInventoryMovID;

    if @SalePrice is not null
        return @SalePrice;

    select @SalePrice =
        I.SellingPrice
        from PreInventoryMov PIM
        join Inventory I on (I.ModelID = PIM.ModeliD and I.StoreID = PIM.StoreID)
        where IDPreInventoryMov = @PreInventoryMovID;

    if @SalePrice is not null
        return @SalePrice;

    -- Gets values for all other rows with the matching IDTag
    with AllPIMTags as (
        select PIM.DocumentID, PIM.IDPreInventoryMov, PIM.Qty,
            TagModel.IDTag
        from PreInventoryMov PIM
        left join TagModel on (TagModel.IDModel = PIM.ModelID)
        where PIM.DocumentID = (
            select top 1 DocumentID
            from PreInventoryMov
            where IDPreInventoryMov = @PreInventoryMovID
              and TagModel.Active = 1 -- 2017, Oct 20 2:12 pm
        )
        --where PIM.IDPreInventoryMov = @PreInventoryMovID
    ),
    TagsWithQuantities as (
        -- Nick gave the following examples of how you should sum
        -- quantities for qty price breaks:
        -- -1 + -2 + -3 = -6, therefore 6 should be used
        -- -1 + 2 + -3 = -2, so then we use 2
        select IDTag, abs(sum(Qty)) as SumQtyForPriceBreaks
        from AllPIMTags
        group by IDTag
    ),
    PIMTagsWithLargestMinQuantity as (
        select TWQ.IDTag, max(TQPB.MinQuantity) as LargestMinQuantity
        from TagsWithQuantities TWQ
        join TagQtyPriceBreak TQPB on (
            TQPB.IDTag = TWQ.IDTag
            and SumQtyForPriceBreaks >= TQPB.MinQuantity
        )
        group by TWQ.IDTag
    ),
    PIMTagsWithDiscounts as (
        select Foo.*, TQPB.Discount
        from PIMTagsWithLargestMinQuantity Foo
        join TagQtyPriceBreak TQPB on
            (TQPB.IDTag = Foo.IDTag and TQPB.MinQuantity = Foo.LargestMinQuantity)
    ),
    PIMWithPotentialDiscounts as (
        select AllPIMTags.*, PTWD.Discount
        from AllPIMTags
        left join PIMTagsWithDiscounts PTWD on (PTWD.IDTag = AllPIMTags.IDTag)
    ),
    BestDiscounts as (
        select DocumentID, IDPreInventoryMov, max(Discount) as BestDiscount
        from PIMWithPotentialDiscounts
        group by DocumentID, IDPreInventoryMov
    ),
    PIMWithQtyBreakPrices as (
        select PIM.DocumentID, PIM.IDPreInventoryMov, M.SellingPrice, M.PromotionPrice,
            round(((1 - coalesce(BestDiscount, 0)) * M.SellingPrice), 2) as QtyBreakPrice
        from PreInventoryMov PIM
        join Model M on (M.IDModel = PIM.ModelID)
        join BestDiscounts on (BestDiscounts.IDPreInventoryMov = PIM.IDPreInventoryMov)
    ),
    PivotedPrices as (
        select DocumentID, IDPreInventoryMov, PriceName, Price
        from (
            select DocumentID, IDPreInventoryMov,
                SellingPrice, PromotionPrice, QtyBreakPrice
            from PIMWithQtyBreakPrices
        ) PivotedData
        unpivot (
            Price for PriceName in (SellingPrice, PromotionPrice, QtyBreakPrice)
        ) as UnPivotedData
    ),
    LowestPrices as (
        select DocumentID, IDPreInventoryMov, min(Price) as Price
        from PivotedPrices
        -- The unpivot() above will remove nulls, but let's do it again here
        -- so that it would work even if we later switch to a different method
        -- that doesn't remove nulls.
        where Price is not null
        group by DocumentID, IDPreInventoryMov
    )
    select @SalePrice = Price
    from LowestPrices
    where IDPreInventoryMov = @PreInventoryMovID;

    return @SalePrice;
end;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[fn_IsValidCouponDiscount]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO

ALTER function fn_IsValidCouponDiscount (
    @DocumentID int,
    @IDDiscount int
)
returns bit with execute as caller as
begin
    declare @IsValid bit;

    select top 1 @IsValid =
        case when IDPreInventoryMov is not null then
            1
        else
            0
        end
    from PreInventoryMov PIM
    join Discounts D on (D.IDDiscount = @IDDiscount)
    join Sal_Coupon SC on (SC.DocumentID = @DocumentID)
    join DiscCoupons DC on (
        DC.IDDiscount = @IDDiscount
        and DC.Code = SC.CouponCode
    )
    where PIM.DocumentID = @DocumentID;

    return @IsValid;
end
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[fn_Pur_TotalByCategory]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER FUNCTION dbo.fn_Pur_TotalByCategory(
	@IDGroup int,
	@FirstMovDate DateTime,
	@LastMovDate DateTime
	) RETURNS float AS
BEGIN

DECLARE @Result float

SELECT
	@Result = SUM(ISNULL(IM.Qty, 0) * IsNull(IM.CostPrice, 0))
FROM
	vw_Rep_InventoryMov IM
	JOIN Model M ON (M.IDModel = IM.IDModel)
WHERE
	M.GroupID = @IDGroup
	AND IM.IDInventMovType = 2
	AND CONVERT(smalldatetime, CONVERT(varchar, IM.MovDate, 103), 103) >= @FirstMovDate
	AND CONVERT(smalldatetime, CONVERT(varchar, IM.MovDate, 103), 103) <= @LastMovDate  

RETURN IsNull(@Result,0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[fn_Pur_TotalByModel]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER FUNCTION dbo.fn_Pur_TotalByModel(
	@IDModel	Int,
	@FirstMovDate	DateTime,
	@LastMovDate	DateTime
	) RETURNS money AS
BEGIN
DECLARE @Result money

SELECT
	@Result = SUM(ISNULL(IM.Qty, 0) * IsNull(IM.CostPrice, 0))
FROM
	vw_Rep_InventoryMov IM
WHERE
	IM.IDModel = @IDModel
	AND IM.IDInventMovType = 2
	AND CONVERT(smalldatetime, CONVERT(varchar, IM.MovDate, 103), 103) >= @FirstMovDate
	AND CONVERT(smalldatetime, CONVERT(varchar, IM.MovDate, 103), 103) <= @LastMovDate

RETURN @Result
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_CashRegister]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_CashRegister';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwInvoiceByModel]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwInvoiceByModel';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwInvoiceComission]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwInvoiceComission';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwInvoiceItemTax]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwInvoiceItemTax';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwInvoiceResult]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwInvoiceResult';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwModelHistoryMov]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwModelHistoryMov';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwPurchaseFornec]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwPurchaseFornec';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwPurchaseItem]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwPurchaseItem';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwPurchaseModel]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwPurchaseModel';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwPurchase_InvMovModel]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwPurchase_InvMovModel';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwTotInvMovContado]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwTotInvMovContado';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_BestSeller]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_BestSeller';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_CommissionBonus]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_CommissionBonus';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_InventoryHistory]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_InventoryHistory';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_InventoryMoviment]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_InventoryMoviment';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_InventoryMov]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_InventoryMov';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwSaleItemTax]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwSaleItemTax';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_SalesBySalesPerson]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_SalesBySalesPerson';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_SalesPersonCommission]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_SalesPersonCommission';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_SalesPersonResult]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_SalesPersonResult';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_ZipCode]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_ZipCode';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwUnitInvoiceDiscount]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwUnitInvoiceDiscount';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwCashRegisterMov]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwCashRegisterMov';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwGroupSales]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwGroupSales';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwGroupSalesGuide]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwGroupSalesGuide';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwHourResult]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwHourResult';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwInvoiceParents]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwInvoiceParents';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwDailySales]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwDailySales';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_Invoice]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_Invoice';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_All_Discounts]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER view vw_All_Discounts as
    select PIM.DocumentID, PIM.IDPreInventoryMov, PIM.StoreID,
        PIM.ModelID,
        PIM.IDPessoa, PIM.SalePrice,
        -- Not sure if abs() is correct here or not. Nick thinks that the
        -- problems with returns can be solved by adding abs() in the right
        -- spot, so this is the first guess (since we don't have a test case
        -- to reproduce the issue yet):
        abs(PIM.Qty) as Qty,
        Invoice.Subtotal,
        Pessoa.IDTipoPessoa, Discounts.*
    from PreInventoryMov PIM
    join Invoice on (Invoice.IDPreSale = PIM.DocumentID)
    join Pessoa on (Pessoa.IDPessoa = PIM.IDPessoa)
    left join Discounts on (1 = 1);
    --cross join Discounts;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_CalcCustomerDiscounts]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER view vw_CalcCustomerDiscounts as
    with InvMovesWithCustDiscount as (
        select PIM.DocumentID, PIM.IDPreInventoryMov, PIM.StoreID,
            PIM.ModelID,
            PIM.IDPessoa, PIM.SalePrice, PIM.Qty, Invoice.Subtotal,
            Pessoa.IDTipoPessoa,
            ECD.Discount as DiscountPercent,
            round(PIM.SalePrice * (ECD.Discount / 100), 2) as DiscountAmount
        from PreInventoryMov PIM
        join Invoice on (Invoice.IDPreSale = PIM.DocumentID)
        join Pessoa on (Pessoa.IDPessoa = PIM.IDPessoa)
        join Model on (Model.IDModel = PIM.ModelID)
        join Ent_CustomerDiscount ECD on (
            ECD.IDGroup = Model.GroupID
            and ECD.IDTipoPessoa = Pessoa.IDTipoPessoa
        )
    ),
    Final as (
        select
            cast(DocumentID as int) DocumentID,
            cast(IDPreInventoryMov as int) IDPreInventoryMov,
            Qty,
            cast('Customer File Discount' as varchar) DiscountName,
            cast(0 as bit) IsStackable,
            cast(1 as bit) IsPercentDiscount,
            cast(DiscountAmount as money) DiscountAmount,
            cast(DiscountPercent as numeric(5, 2)) DiscountPercent
        from InvMovesWithCustDiscount
    )
    select * from Final;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_CashRegisterFlow]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_CashRegisterFlow';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_DiscTimeRestrictions]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER view vw_DiscTimeRestrictions as
    select DocumentID, IDPreInventoryMov, IDDiscount
    from vw_All_Discounts
    where
        (StartOn is null or cast(current_timestamp as date) >= StartOn)
        and (EndOn is null or cast(current_timestamp as date) <= EndOn)
        and (
            BeginTimeOfDay is null
            or BeginTimeOfDay <= cast(current_timestamp as time)
        )
        and (
            EndTimeOfDay is null
            or EndTimeOfDay >= cast(current_timestamp as time)
        );
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_DiscDayRestrictions]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER view vw_DiscDayRestrictions as
    -- Query DiscValidOnDays: if there are no rows, then it passes this test.
    -- If there are rows, but none of them match today's DayOfWeek, then fail.
    -- We do this calculation with the following three CTEs:
    with DiscValidOnDaysSet as (
        select
            CZ.DocumentID, CZ.IDPreInventoryMov, CZ.IDDiscount, VOD.DayOfWeek,
            case when
                VOD.IDDiscount is null
                or VOD.DayOfWeek = datepart(weekday, current_timestamp)
            then 1
            else 0
            end as DayIsValid
        from vw_All_Discounts CZ
        left join DiscValidOnDays VOD on (VOD.IDDiscount = CZ.IDDiscount)
    ),
    Final as (
        select DocumentID, IDPreInventoryMov, IDDiscount
        from DiscValidOnDaysSet
        where DayIsValid = 1
        group by DocumentID, IDPreInventoryMov, IDDiscount
    )
    select * from Final;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_DiscSubTotalRestriction]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER view vw_DiscSubTotalRestriction as
    select DocumentID, IDPreInventoryMov, IDDiscount
    from vw_All_Discounts
    where (MinSubtotal is null or MinSubtotal <= Subtotal)
        and (MinDollarAmount is null or MinDollarAmount <= Subtotal);
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_ValidDiscStores]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER view vw_ValidDiscStores as
    with DiscStoresSet as (
        select AD.DocumentID, AD.IDPreInventoryMov, AD.IDDiscount, AD.IDStore as AD_IDStore,
            DS.IDStore as DS_IDStore, DS.IsInclude
        from vw_All_Discounts AD
        left join DiscStores DS on (DS.IDDiscount = AD.IDDiscount)
    ),
    DiscStoresFinal as (
        select DocumentID, IDPreInventoryMov, IDDiscount
        from DiscStoresSet
        where DS_IDStore is null -- <- If there are no rows in DiscStores
            or (AD_IDStore = DS_IDStore and IsInclude = 1)
            or (AD_IDStore <> DS_IDStore and IsInclude = 0)
    )
    select * from DiscStoresFinal;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_ValidMinQuantityDiscounts]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO

ALTER view [dbo].[vw_ValidMinQuantityDiscounts] as
    with IncludedQtyCount as (
        select AD.DocumentID, AD.IDPreInventoryMov, AD.IDDiscount,
            AD.MinQuantity, AD.Qty as QualifyingQty
        from vw_All_Discounts AD
        where MinQuantity is null or ModelID in (
            select distinct TagModel.IDModel
            from DiscQualifyingTags DQT
            join TagModel on (TagModel.IDTag = DQT.IDTag)
            where IDDiscount = AD.IDDiscount
              and TagModel.Active = 1 -- 2017, Oct 20 2:12 pm 
        )
    ),
    Final as (
        select DocumentID, IDPreInventoryMov, IDDiscount
        from IncludedQtyCount
        where coalesce(MinQuantity, 0) <= QualifyingQty
    )
    select * from Final;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_ValidCustGroupsDiscounts]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER view vw_ValidCustGroupsDiscounts as
    select AD.DocumentID, AD.IDPreInventoryMov, AD.IDDiscount
    from vw_All_Discounts AD
    left join DiscAllowedCustGroups ACG on (ACG.IDDiscount = AD.IDDiscount)
    where ACG.IDTipoPessoa is null or ACG.IDTipoPessoa = AD.IDTipoPessoa
    group by AD.DocumentID, AD.IDPreInventoryMov, AD.IDDiscount;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_ValidCustRestrDiscounts]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER view vw_ValidCustRestrDiscounts as
    with UseCountByCustomer as (
        select DU.IDDiscount, PIM.IDPessoa, count(*) as CustUseCount
        from DiscUses DU
        join Discounts D on (D.IDDiscount = DU.IDDiscount)
        join PreInventoryMov PIM on (PIM.IDPreInventoryMov = DU.IDInventoryMov)
        group by DU.IDDiscount, PIM.IDPessoa
    ),
    UseCountForAll as (
        select IDDiscount, sum(CustUseCount) as UseCount
        from UseCountByCustomer
        group by IDDiscount
    ),
    -- Discounts with Restriction Information.
    DiscWithRestrInfo as (
        select AD.DocumentID, AD.IDPreInventoryMov, AD.IDDiscount,
            AD.IDPessoa, UCFA.IDDiscount as UCFA_IDDiscount,
            UCBC.IDDiscount as UCBC_IDDiscount,
            AD.MaxUsesPerCustomer, UCBC.CustUseCount,
            AD.MaxUsesInTotal, UCFA.UseCount,
            AD.CustomerCardRequired, P.CustomerCard
        from vw_All_Discounts AD
        join Pessoa P on (P.IDPessoa = AD.IDPessoa) -- for CustomerCard below
        left join UseCountForAll UCFA on (UCFA.IDDiscount = AD.IDDiscount)
        left join UseCountByCustomer UCBC on
            (UCBC.IDDiscount = AD.IDDiscount and UCBC.IDPessoa = AD.IDPessoa)
    ),
    Final as (
        select DocumentID, IDPreInventoryMov, IDDiscount
        from DiscWithRestrInfo
        where
            (MaxUsesPerCustomer is null or MaxUsesPerCustomer >= CustUseCount)
            and (MaxUsesInTotal is null or MaxUsesInTotal >= UseCount)
            and (
                CustomerCardRequired is null
                or CustomerCardRequired = 0
                or CustomerCard is not null
            )
        group by DocumentID, IDPreInventoryMov, IDDiscount
    )
    select * from Final;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwCotacaoResult]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwCotacaoResult';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwCotationPOItem]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwCotationPOItem';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_PreInventoryMov_Grid]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_PreInventoryMov_Grid';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwCotacaoToModel]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwCotacaoToModel';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwSplit_ListItems]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwSplit_ListItems';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_Model]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_Model';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_CustomerDiscountWithModel]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER view vw_CustomerDiscountWithModel as
    select M.IDModel, ECD.*
    from Model M
    left join Ent_CustomerDiscount ECD on (ECD.IDGroup = M.GroupID);
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_ECDWithModel]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO

ALTER view vw_ECDWithModel as
    select M.IDModel, ECD.*
    from Model M
    left join Ent_CustomerDiscount ECD on (ECD.IDGroup = M.GroupID);
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwInventoryModel]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwInventoryModel';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwModelInventory]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwModelInventory';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_InvTotal]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_InvTotal';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_InveItemStock]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_InveItemStock';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwBarcode]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwBarcode';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwCotacaoModelQty]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwCotacaoModelQty';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_MarketingCustomerPurchaseHist]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_MarketingCustomerPurchaseHist';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_AgedInventory]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_AgedInventory';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_InventoryQtyByModel]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_InventoryQtyByModel';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_InventoryQtyByStore]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_InventoryQtyByStore';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwPOItem]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwPOItem';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_PreInventoryMov]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_PreInventoryMov';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_DiscInputs]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO

-- Store what basically amounts to "input data" from PIM with some other things
-- thrown in for good measure.
ALTER view vw_DiscInputs (
    IDPreInventoryMov, -- int primary key references PreInventoryMov,
    StoreID, -- int not null references Store(IDStore),
    ModelID, -- int not null references Model(IDModel),
    IDPessoa, -- int not null references Pessoa(IDPessoa),
    DocumentID, -- int not null,
    SalePrice, -- money not null,
    Qty, -- decimal(38,4) not null,
    ManualDiscount -- money
    --,ManualDiscountType varchar(max)
)as
    select PIM.IDPreInventoryMov, PIM.StoreID, PIM.ModelID, PIM.IDPessoa,
        PIM.DocumentID, PIM.SalePrice, PIM.Qty, SMD.ManualDiscount
    from PreInventoryMov PIM
    left join ManualDiscount SMD on (
        SMD.IDPreInventoryMov = PIM.IDPreInventoryMov
    );
    --where DocumentID = @DocumentID;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_ModelDiscountSummaries]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO


ALTER view [dbo].[vw_ModelDiscountSummaries] as
    select TM.IDModel, D.IDDiscount, D.DiscountName, D.AmountType,
        D.RewardAmount
    from Discounts D
    join DiscQualifyingTags DQT on (DQT.IDDiscount = D.IDDiscount)
    join TagModel TM on (TM.IDTag = DQT.IDTag)
    where TM.Active = 1; --2017, Oct 20 2:12 pm
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_TagsWithAttrs]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

ALTER view vw_TagsWithAttrs as
    with TagsAndPriceBreaks as (
        select
            Tag.IDTag,
            case when TQPB.IDTag is not null then 1 else 0 end
                as HasQtyPriceBreak
        from Tag
        left join TagQtyPriceBreak TQPB on (TQPB.IDTag = Tag.IDTag)
    ),
    TagsAndPriceBreaksGrouped as (
        select IDTag, cast(HasQtyPriceBreak as bit) as HasQtyPriceBreak
        from TagsAndPriceBreaks
        group by IDTag, HasQtyPriceBreak
    ),
    TagsWithAttrsFinal as (
        select TagsAndPriceBreaksGrouped.*, Tag.TagName
        from TagsAndPriceBreaksGrouped
        join Tag on (TagsAndPriceBreaksGrouped.IDTag = Tag.IDTag)
    )
    select * from TagsWithAttrsFinal;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_TagsWithAttrsAndModels]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO


ALTER view [dbo].[vw_TagsWithAttrsAndModels] as
    select vw_TagsWithAttrs.*, TagModel.IDModel, TagModel.PKTagModel
    from vw_TagsWithAttrs
    left join TagModel on (TagModel.IDTag = vw_TagsWithAttrs.IDTag)
    where TagModel.Active = 1; -- 2017, Oct 20 2:12 pm
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwCommission]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwCommission';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_ValidFirstTimeRestrictionDiscounts]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER view vw_ValidFirstTimeRestrictionDiscounts as
    with NumOrdersPerCustomer as (
        select
            AD.IDPessoa, (
                select count(*)
                from InventoryMov IM
                where IM.IDPessoa = AD.IDPessoa
                and IM.InventMovTypeID = (
                    select IDInventMovType
                    from InventoryMovType
                    where Name = 'Sold' and Desativado = 0
                )
                group by IM.IDPessoa
            ) as NumPreviousOrders
        from vw_All_Discounts AD
        group by IDPessoa
    ),
    Final as (
        select AD.DocumentID, AD.IDPreInventoryMov, AD.IDDiscount
        from vw_All_Discounts AD
        join NumOrdersPerCustomer NOPC on (NOPC.IDPessoa = AD.IDPessoa)
        where AD.FirstTimeCustomerOnly is null
            or AD.FirstTimeCustomerOnly = 0
            or NOPC.NumPreviousOrders > 0
    )
    select * from Final;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vwSaleItem]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vwSaleItem';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_InvoiceDate]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_InvoiceDate';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_SaleByManufacture]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_SaleByManufacture';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_AgencyAgentInvoices]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_AgencyAgentInvoices';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_CustomerPurchaseHistory_Sub]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_CustomerPurchaseHistory_Sub';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_SalesProfit]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_SalesProfit';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_CommissionDetails]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_CommissionDetails';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_Potential_Discounts]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER view vw_Potential_Discounts as
    select AD.*
        --,case when DTR.IDDiscount is null then 1 else 0 end as failed_DiscTimeRestrictions
    from vw_All_Discounts AD
    -- NOTE: If MSSQL does poorly at determining the optimal join order,
    -- then determine a good order manually and join them to eachother
    -- in sequence (instead of joining them all to vw_All_Discounts).
    join vw_DiscTimeRestrictions DTR on
        (DTR.IDPreInventoryMov = AD.IDPreInventoryMov and DTR.IDDiscount = AD.IDDiscount)
    join vw_DiscDayRestrictions DDR on
        (DDR.IDPreInventoryMov = DTR.IDPreInventoryMov and DDR.IDDiscount = DTR.IDDiscount)
    join vw_DiscSubTotalRestriction DST on
        (DST.IDPreInventoryMov = DDR.IDPreInventoryMov and DST.IDDiscount = DDR.IDDiscount)
    join vw_ValidDiscStores VDS on
        (VDS.IDPreInventoryMov = DST.IDPreInventoryMov and VDS.IDDiscount = DST.IDDiscount)
    join vw_ValidMinQuantityDiscounts VMQ on
        (VMQ.IDPreInventoryMov = VDS.IDPreInventoryMov and VMQ.IDDiscount = VDS.IDDiscount)
    join vw_ValidCustGroupsDiscounts VCG on
        (VCG.IDPreInventoryMov = VMQ.IDPreInventoryMov and VCG.IDDiscount = VMQ.IDDiscount)
    join vw_ValidCustRestrDiscounts VCR on
        (VCR.IDPreInventoryMov = VCG.IDPreInventoryMov and VCR.IDDiscount = VCG.IDDiscount)
    join vw_ValidFirstTimeRestrictionDiscounts FTR on
        (FTR.IDPreInventoryMov = VCR.IDPreInventoryMov and FTR.IDDiscount = VCR.IDDiscount)
    where 1 =
        case when AD.DiscType = 'Coupon' then
            dbo.fn_IsValidCouponDiscount(FTR.DocumentID, FTR.IDDiscount)
        else
            1
        end;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_CalcStandardDiscounts]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER view vw_CalcStandardDiscounts as
    -- CD is Calculated Discounts.
    with CD as (
        select
            vw_Potential_Discounts.DocumentID, IDPreInventoryMov, Qty, SalePrice,
            RewardAmount, DiscType,
            case when DiscType = 'Coupon' then 1 else 0 end as IsStackable,
            case when AmountType = 'Percent Off Item' then 1 else 0 end
                as IsPercentDiscount,
            case when AmountType = 'Amount Off Item' then
                RewardAmount
            when AmountType = 'Percent Off Item' then
                -- Percent is stored as multiplier for performance and converted for display.
                SalePrice - (SalePrice * RewardAmount)
            when AmountType = 'Sale Price' then
                SalePrice - RewardAmount
            end as UnitDiscount
        from vw_Potential_Discounts
    ),
    CD_after_coupons as (
        select CD.DocumentID, IDPreInventoryMov, Qty, SalePrice, RewardAmount,
            DiscType, IsStackable, IsPercentDiscount,
            case when DiscType = 'Coupon' then
                case when (SC.CouponCode is not null) then
                    UnitDiscount
                else
                    0
                end
            else
                UnitDiscount
            end
            as UnitDiscount
        from CD
        left join Sal_Coupon SC on (
            SC.DocumentID = CD.DocumentID
        )
    ),
    CD_with_ext as (
        select *, UnitDiscount * Qty as ExtensionDiscount
        from CD_after_coupons
    ),
    CD_rounded as (
        select *,
            round(UnitDiscount, 4) as UnitDiscountRounded,
            round(ExtensionDiscount, 2) as ExtensionDiscountRounded
        from CD_with_ext
    ),
    CD_with_discount_percent as (
        select DocumentID, IDPreInventoryMov, Qty,
            UnitDiscountRounded as UnitDiscount,
            ExtensionDiscountRounded as ExtensionDiscount,
            SalePrice, RewardAmount, IsStackable, IsPercentDiscount,
            case when IsPercentDiscount = 1 then RewardAmount else 0 end
                as DiscountPercent
        from CD_rounded
    ),
    CD_final as (
        select
            cast(DocumentID as int) DocumentID,
            cast(IDPreInventoryMov as int) IDPreInventoryMov,
            Qty,
            cast('Standard Discount' as varchar) DiscountName,
            cast(IsStackable as bit) IsStackable,
            cast(IsPercentDiscount as bit) IsPercentDiscount,
            cast(UnitDiscount as money) DiscountAmount,
            cast(DiscountPercent as numeric(5, 2)) DiscountPercent
        from CD_with_discount_percent
    )
    select * from CD_final;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_SelectFinalDiscounts]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER view vw_SelectFinalDiscounts as
    with PotentialDiscounts as (
        select * from vw_CalcCustomerDiscounts
        union all
        select * from vw_CalcStandardDiscounts
    ),
    GreatestNonStackableDiscounts as (
        select DocumentID, IDPreInventoryMov, Qty,
            max(DiscountAmount) as DiscountAmount
        from PotentialDiscounts
        where IsStackable = 0
        group by DocumentID, IDPreInventoryMov, Qty
    ),
    BothDiscounts as (
        select DocumentID, IDPreInventoryMov, Qty, DiscountAmount
        from GreatestNonStackableDiscounts
        union all
        select DocumentID, IDPreInventoryMov, Qty, DiscountAmount
        from PotentialDiscounts
        where IsStackable = 1
    ),
    SummedDiscounts as (
        select DocumentID, IDPreInventoryMov, Qty, sum(DiscountAmount) as UnitDiscount
        from BothDiscounts
        group by DocumentID, IDPreInventoryMov, Qty
    ),
    ZeroedDiscounts as (
        select DM.DocumentID, DM.IDPreInventoryMov, DM.Qty,
            coalesce(DM.UnitDiscount, 0) as UnitDiscount,
            coalesce(DM.UnitDiscount * DM.Qty, 0) as Discount
        from SummedDiscounts DM
    ),
    FinalDiscounts as (
        select DocumentID, IDPreInventoryMov, Qty,
            cast(round(UnitDiscount, 4) as money) as UnitDiscount,
            cast(round(Discount, 4) as money) as Discount
        from ZeroedDiscounts
    )
    select * from FinalDiscounts;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[vw_PreInventoryMovWithDiscounts]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO

ALTER view vw_PreInventoryMovWithDiscounts as
    select PIM.DocumentID, PIM.IDPreInventoryMov, PIM.ModelID, PIM.Qty,
        PIM.SalePrice, CD.UnitDiscount,
        round(PIM.SalePrice - CD.UnitDiscount, 2) as DiscountedPrice,
        cast(round((PIM.SalePrice * PIM.Qty), 2) as money) as Extension,
        cast(round((PIM.SalePrice * PIM.Qty - (CD.UnitDiscount * PIM.Qty)), 2) as money)
            as DiscountedExtension
    from vw_SelectFinalDiscounts CD
    join PreInventoryMov PIM on (PIM.IDPreInventoryMov = CD.IDPreInventoryMov);
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Refreshing [dbo].[vw_Rep_OpenLayawayHold]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
EXECUTE sp_refreshview N'dbo.vw_Rep_OpenLayawayHold';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Altering [dbo].[sp_SelectModelDiscountSummary]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
/*
 * Usage: exec [sp_SelectModelDiscountSummary] @ModelID = 123
 */
ALTER proc sp_SelectModelDiscountSummary
    @ModelID int
as
    set nocount on
    select * from vw_ModelDiscountSummaries where IDModel = @ModelID;
    set nocount off
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Sal_RemovedItem] WITH CHECK CHECK CONSTRAINT [FK_CashRegister_SalRemovedItem_IDCashRegister];

ALTER TABLE [dbo].[CashRegMov] WITH CHECK CHECK CONSTRAINT [FK_CashReg_CashRegMov_IDCashRegister];

ALTER TABLE [dbo].[Sal_DrawerKickLog] WITH CHECK CHECK CONSTRAINT [FK_CashRegister_SalDrawerKickLog_IDCashRegister];

ALTER TABLE [dbo].[Sal_ReducaoZ] WITH CHECK CHECK CONSTRAINT [FK_CashRegister_Sal_TotalizadorParcial_IDReducaoZ];

ALTER TABLE [dbo].[Inv_ModelVendor] WITH CHECK CHECK CONSTRAINT [FK_Model_InvModelVendor_IDModel];

ALTER TABLE [dbo].[Inv_ModelVendor] WITH CHECK CHECK CONSTRAINT [FK_Pessoa_InvModelVendor_IDFabricante];

ALTER TABLE [dbo].[Inv_MovDocument] WITH CHECK CHECK CONSTRAINT [FK_InventoryMov_InvMovDocument_IDInventoryMov];

ALTER TABLE [dbo].[Inv_MovComplement] WITH CHECK CHECK CONSTRAINT [FK_InventoryMov_InvMovComplement_IDInventoryMov];

ALTER TABLE [dbo].[SaleItemCommission] WITH CHECK CHECK CONSTRAINT [FK_InventoryMov_SaleItemCommission_IDInventoryMov];

ALTER TABLE [dbo].[Inv_MovPrice] WITH CHECK CHECK CONSTRAINT [FK_InventoryMov_InvMovPrice_IDInventoryMov];

ALTER TABLE [dbo].[GroupCost] WITH CHECK CHECK CONSTRAINT [FK_InventoryMov_GroupCost_IDInventoryMov];

ALTER TABLE [dbo].[InventoryMovTax] WITH CHECK CHECK CONSTRAINT [FK_InventoryMov_InventoryMovTax_IDInventoryMov];

ALTER TABLE [dbo].[DiscUses] WITH CHECK CHECK CONSTRAINT [FK_DiscUses_IDInventoryMov];

ALTER TABLE [dbo].[InventoryMov] WITH CHECK CHECK CONSTRAINT [FK_Repair_InventoryMov_IDRepair];

ALTER TABLE [dbo].[InventoryMov] WITH CHECK CHECK CONSTRAINT [FK_SystemUser_InventoryMov_IDUser];

ALTER TABLE [dbo].[InventoryMov] WITH CHECK CHECK CONSTRAINT [FK_InventoryMovType_IventoryMov_InventMovTypeID];

ALTER TABLE [dbo].[InventoryMov] WITH CHECK CHECK CONSTRAINT [FK_InvDepartment_InventoryMov_IDDepartment];

ALTER TABLE [dbo].[InventoryMov] WITH CHECK CHECK CONSTRAINT [FK_Pessoa_IventoryMov_IDPessoa];

ALTER TABLE [dbo].[InventoryMov] WITH CHECK CHECK CONSTRAINT [FK_Store_InventoryMov_StoreID];

ALTER TABLE [dbo].[InventoryMov] WITH CHECK CHECK CONSTRAINT [FK_Model_InventoryMov_ModelID];

ALTER TABLE [dbo].[Repair] WITH CHECK CHECK CONSTRAINT [FK_InventoryMov_Repair_IDInvMovReturn];

ALTER TABLE [dbo].[Repair] WITH CHECK CHECK CONSTRAINT [FK_InventoryMov_Repair_IDInvMovSend];

ALTER TABLE [dbo].[History] WITH CHECK CHECK CONSTRAINT [FK_Invoice_History_IDPreSale];

ALTER TABLE [dbo].[Sal_RemovedItem] WITH CHECK CHECK CONSTRAINT [FK_Invoice_Sal_RemovedItem_IDPreSale];

ALTER TABLE [dbo].[Sal_PaymentCondition] WITH CHECK CHECK CONSTRAINT [FK_Invoice_Sal_PaymentCondition_IDPreSale];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_Invoice_Invoice_IDPresaleParent];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_CashRegMov_Invoice_CashRegMovID];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_DeliverType_Invoice_DeliverTypeID];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_Pessoa_Invoice_IDCustomer];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_Media_Invoice_MediaID];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_TouristGroup_Invoice_IDTourisGroup];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_MeioPag_Invoice_IDMeioPag];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_SpecialPrice_Invoice_SpecialPriceID];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_Store_Invoice_IDStore];

ALTER TABLE [dbo].[Sal_InvoiceShipping] WITH CHECK CHECK CONSTRAINT [FK_Invoice_SalInvoiceShipping_IDPreSale];

ALTER TABLE [dbo].[Fin_Lancamento] WITH CHECK CHECK CONSTRAINT [FK_Invoice_Lancamento_IDPreSale];

ALTER TABLE [dbo].[Estimated] WITH CHECK CHECK CONSTRAINT [FK_Invoice_Estimated_IDPreSale];

ALTER TABLE [dbo].[Sal_RebateDiscount] WITH CHECK CHECK CONSTRAINT [FK_Invoice_SalRebateDiscount_IDPreSaleUsed];

ALTER TABLE [dbo].[Sal_RebateDiscount] WITH CHECK CHECK CONSTRAINT [FK_Invoice_SalRebateDiscount_IDPreSaleCreated];

ALTER TABLE [dbo].[Sal_AccountCardMov] WITH CHECK CHECK CONSTRAINT [FK_Invoice_SalAccountCardMov_IDPreSale];

ALTER TABLE [dbo].[InvoiceToCostType] WITH CHECK CHECK CONSTRAINT [FK_Invoice_InvoiceToCostType_IDPreSale];

ALTER TABLE [dbo].[InvoiceOBS] WITH CHECK CHECK CONSTRAINT [FK_Invoice_InvoiceOBS_IDPreSale];

ALTER TABLE [dbo].[Sal_Coupon] WITH CHECK CHECK CONSTRAINT [FK_Sal_Coupon_DocumentID];

ALTER TABLE [dbo].[Sal_RemovedItem] WITH CHECK CHECK CONSTRAINT [FK_Model_SalRemovedItem_IDModel];

ALTER TABLE [dbo].[Request] WITH CHECK CHECK CONSTRAINT [FK_Model_Request_ModelID];

ALTER TABLE [dbo].[Inv_ModelReceipt] WITH CHECK CHECK CONSTRAINT [FK_Model_InvModelReceipt_IDModel];

ALTER TABLE [dbo].[Pur_PurchaseVerify] WITH CHECK CHECK CONSTRAINT [FK_Model_PurchaseVerify_IDModel];

ALTER TABLE [dbo].[InvFeatures] WITH CHECK CHECK CONSTRAINT [FK_Model_InvFeatures_IDModel];

ALTER TABLE [dbo].[Inv_ModelBalance] WITH CHECK CHECK CONSTRAINT [R_236];

ALTER TABLE [dbo].[Sal_FrequentPromo] WITH CHECK CHECK CONSTRAINT [FK_Model_Sal_FrequentPromo_IDModel];

ALTER TABLE [dbo].[EstimatedItem] WITH CHECK CHECK CONSTRAINT [FK_Model_EstimatedItem_IDModel];

ALTER TABLE [dbo].[InventorySerial] WITH CHECK CHECK CONSTRAINT [FK_Model_InventorySerial_IDModel];

ALTER TABLE [dbo].[PreInventoryMov] WITH CHECK CHECK CONSTRAINT [FK_Model_PreInventMov_ModelID];

ALTER TABLE [dbo].[ModelPriceLog] WITH CHECK CHECK CONSTRAINT [FK_Model_ModelPriceLog_IDModel];

ALTER TABLE [dbo].[Sal_RebateItem] WITH CHECK CHECK CONSTRAINT [FK_Model_SalRebateItem_IDModel];

ALTER TABLE [dbo].[InvTechFeatures] WITH CHECK CHECK CONSTRAINT [FK_Model_InvTechFeatures_IDModel];

ALTER TABLE [dbo].[Inv_ModelPrice] WITH CHECK CHECK CONSTRAINT [FK_Model_InvModelPrice_IDModel];

ALTER TABLE [dbo].[Model] WITH CHECK CHECK CONSTRAINT [FK_Inv_NCM_Model_IDNCM];

ALTER TABLE [dbo].[Model] WITH CHECK CHECK CONSTRAINT [FK_ModelGroup_Model_IDModelGroup];

ALTER TABLE [dbo].[Model] WITH CHECK CHECK CONSTRAINT [FK_ModelSubGroup_Model_IDModelSubGroup];

ALTER TABLE [dbo].[Model] WITH CHECK CHECK CONSTRAINT [FK_InvColor_Model_IDColor];

ALTER TABLE [dbo].[Model] WITH CHECK CHECK CONSTRAINT [FK_InvSize_Model_IDSize];

ALTER TABLE [dbo].[Model] WITH CHECK CHECK CONSTRAINT [FK_MntCFOP_Model_IDCFOP];

ALTER TABLE [dbo].[Inv_StorePrice] WITH CHECK CHECK CONSTRAINT [FK_Model_InvStorePrice_IDModel];

ALTER TABLE [dbo].[Sal_PromoItem] WITH CHECK CHECK CONSTRAINT [FK_Model_SalPromoItem_IDModel];

ALTER TABLE [dbo].[Sal_PromoPrizeItem] WITH CHECK CHECK CONSTRAINT [FK_Model_SalPromoPrizeItem_IDModel];

ALTER TABLE [dbo].[Ser_SOItemProduct] WITH CHECK CHECK CONSTRAINT [FK_Model_Ser_SOItemProduct_IDModel];

ALTER TABLE [dbo].[Inv_ModelStateTax] WITH CHECK CHECK CONSTRAINT [PK_InvModelStateTax_Model_IDModel];

ALTER TABLE [dbo].[Pur_PurchaseItem] WITH CHECK CHECK CONSTRAINT [FK_Model_PurchaseItem_IDModel];

ALTER TABLE [dbo].[Pet] WITH CHECK CHECK CONSTRAINT [FK_Model_IDModel_Pet_IDModel];

ALTER TABLE [dbo].[Barcode] WITH CHECK CHECK CONSTRAINT [FK_Model_Barcode_IDModel];

ALTER TABLE [dbo].[ServiceRange] WITH CHECK CHECK CONSTRAINT [FK_Model_ServiceRange_IDModel];

ALTER TABLE [dbo].[GroupCostGift] WITH CHECK CHECK CONSTRAINT [FK_Model_GroupCostGift_IDModel];

ALTER TABLE [dbo].[Pur_PurchaseQtyOrder] WITH CHECK CHECK CONSTRAINT [FK_Model_PurchaseQtyOrder_IDModel];

ALTER TABLE [dbo].[Inv_Lot] WITH CHECK CHECK CONSTRAINT [FK_Model_Inv_Lot_IDModel];

ALTER TABLE [dbo].[Pur_PurchaseQtyPrePurchase] WITH CHECK CHECK CONSTRAINT [FK_Model_PurchaseQtyPrePurchase_IDModel];

ALTER TABLE [dbo].[Inv_ModelNutrition] WITH CHECK CHECK CONSTRAINT [FK_Model_Inv_ModelNutrition_IDModel];

ALTER TABLE [dbo].[Inv_StoreModelLot] WITH CHECK CHECK CONSTRAINT [FK_Model_Inv_StoreModelLot_IDModel];

ALTER TABLE [dbo].[Inv_ModelStoreBalance] WITH CHECK CHECK CONSTRAINT [FK_Model_InvModelStoreBalance_IDModel];

ALTER TABLE [dbo].[Pet_Microchip] WITH CHECK CHECK CONSTRAINT [FK_Model_IDModel_Pet_Microchip_IDModel];

ALTER TABLE [dbo].[ModelTransfDet] WITH CHECK CHECK CONSTRAINT [FK_Model_ModelTransfDet_IDModel];

ALTER TABLE [dbo].[PT_GlobalSettingDetail] WITH CHECK CHECK CONSTRAINT [PT_GlobalSet_Model_FK];

ALTER TABLE [dbo].[CotacaoResult] WITH CHECK CHECK CONSTRAINT [FK_Model_CotacaoResult_IDModel];

ALTER TABLE [dbo].[InvAccessory] WITH CHECK CHECK CONSTRAINT [FK_Model_InvAccessory_IDInvAccessory];

ALTER TABLE [dbo].[InvAccessory] WITH CHECK CHECK CONSTRAINT [FK_Model_InvAccessory_IDModel];

ALTER TABLE [dbo].[Repair] WITH CHECK CHECK CONSTRAINT [FK_Model_Repair_IDModel];

ALTER TABLE [dbo].[CotacaoToModel] WITH CHECK CHECK CONSTRAINT [FK_Model_CotacaoToModel_IDModel];

ALTER TABLE [dbo].[Inv_FrozeCount] WITH CHECK CHECK CONSTRAINT [FK_Model_InvFroze_IDModel];

ALTER TABLE [dbo].[VendorModelCode] WITH CHECK CHECK CONSTRAINT [FK_Model_VendorCode_IDModel];

ALTER TABLE [dbo].[TagModel] WITH CHECK CHECK CONSTRAINT [FK_TagModel_IDModel];

ALTER TABLE [dbo].[KitModel] WITH CHECK CHECK CONSTRAINT [FK_Model_KitModel_IDModel];

ALTER TABLE [dbo].[Inv_MovDocument] WITH CHECK CHECK CONSTRAINT [FK_PreInventoryMov_InvMovDocument_IDPreInventoryMov];

ALTER TABLE [dbo].[Request] WITH CHECK CHECK CONSTRAINT [FK_PreInventoryMov_Request_IDPreInventoryMov];

ALTER TABLE [dbo].[POItemRequest] WITH CHECK CHECK CONSTRAINT [FK_PreInventoryMov_POItemRequest_IDPreInventoryMov];

ALTER TABLE [dbo].[PreInventoryMov] WITH CHECK CHECK CONSTRAINT [FK_InvDepartment_PreInventoryMov_IDDepartment];

ALTER TABLE [dbo].[PreInventoryMov] WITH CHECK CHECK CONSTRAINT [FK_TaxCategory_PreInventMov_IDTaxCategory];

ALTER TABLE [dbo].[PreInventoryMov] WITH CHECK CHECK CONSTRAINT [FK_InventoryMovType_PreInventoryMov_InventMovTypeID];

ALTER TABLE [dbo].[PreInventoryMov] WITH CHECK CHECK CONSTRAINT [FK_Pessoa_PreInventoryMov_IDPessoa];

ALTER TABLE [dbo].[PreInventoryMov] WITH CHECK CHECK CONSTRAINT [FK_PreInventoryMov_PreInventoryMov_IDPreInventoryMovParent];

ALTER TABLE [dbo].[PreInventoryMov] WITH CHECK CHECK CONSTRAINT [FK_Cotacao_PreInventoryMov_IDCotacao];

ALTER TABLE [dbo].[PreInventoryMov] WITH CHECK CHECK CONSTRAINT [FK_Store_PreInventoryMov_StoreID];

ALTER TABLE [dbo].[PreInventoryMov] WITH CHECK CHECK CONSTRAINT [FK_SystemUser_PreInvnetoryMov_UserID];

ALTER TABLE [dbo].[SaleItemCommission] WITH CHECK CHECK CONSTRAINT [FK_PreInventoryMov_SaleItemCommission_IDPreInventoryMov];

ALTER TABLE [dbo].[Inv_MovPrice] WITH CHECK CHECK CONSTRAINT [FK_PreInventoryMov_InvMovPrice_IDPreInventoryMov];

ALTER TABLE [dbo].[ManualDiscount] WITH CHECK CHECK CONSTRAINT [FK_ManualDiscount_IDPreInventoryMov];

ALTER TABLE [dbo].[ManualPrice] WITH CHECK CHECK CONSTRAINT [FK_ManualPrice_IDPreInventoryMov];

ALTER TABLE [dbo].[PIMAppliedCoupons] WITH CHECK CHECK CONSTRAINT [FK_PIMAppliedCoupons_IDPreInventoryMov];


GO
