unit PAW_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// PASTLWTR : 1.2
// File generated on 8/3/2004 7:54:18 AM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Pawcom260\pawcom260.dll (1)
// LIBID: {38BAC5EB-EC29-40B8-B78A-351C11075DDD}
// LCID: 0
// Helpfile: 
// HelpString: Multiware PAW COM Library 2.6.0
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\STDOLE2.TLB)
// Errors:
//   Hint: Member 'Class' of '_FAAsset' changed to 'Class_'
//   Error creating palette bitmap of (TCompanyInformation) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TBtrieve) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSelectCompany) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TPeachw) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TDefaultCustomerData) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TChart) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TCustomer) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TAlarm) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSalesTaxCode) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TEmployee) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TTaxAuthority) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TVendor) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TLineItem) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TGeneralData) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSelectCustomer) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSelectDate) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSelectSalesTaxCode) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TDefaultShipMethod) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSelectSalesRep) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSelectAccount) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSalesJournal) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TJournal) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TAlert) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TEventlog) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TAuditTrail) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TCost) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TAssemblyAdjustmentJournal) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TFAAsset) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TFABook) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TFABusUse) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TFAClass) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TFAComp) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TFAPost) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TFAPrePst) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TDefaultStatementData) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TDefaultTaxTypes) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TDefaultVendorData) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TDefaultInventoryData) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TDefaultGLAccounts) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TDefaultJobData) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TDefaultEmployeeData) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TeCheckData) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TGroupData) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TInventoryChain) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TInventoryComponent) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TInventoryCost) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TENums) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TJobData) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TJobEstimate) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TJobTag) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TCashDisbursementJournal) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TCashReceiptJournal) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TGeneralJournal) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TInventoryAdjustmentJournal) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TPayrollJournal) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TPurchaseJournal) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TPurchaseOrderJournal) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSalesOrderJournal) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TPhase) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TReceiptTag) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TMemorizedTransactions) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TTaxTable) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TTicket) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TUser) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSortJob) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSelectVendor) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSelectLineItem) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSelectEmployee) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TJrnlHdr) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TJrnlRow) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TDefaultPriceLevels) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TRaiseHistory) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TBOMHistory) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TBOMItems) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TQuantityDiscount) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TUnitMeasure) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TWorkTicket) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TSelectJob) : Server C:\Pawcom260\pawcom260.dll contains no icons
//   Error creating palette bitmap of (TJrnlSNo) : Server C:\Pawcom260\pawcom260.dll contains no icons
// ************************************************************************ //
// *************************************************************************//
// NOTE:                                                                      
// Items guarded by $IFDEF_LIVE_SERVER_AT_DESIGN_TIME are used by properties  
// which return objects that may need to be explicitly created via a function 
// call prior to any access via the property. These items have been disabled  
// in order to prevent accidental use from within the object inspector. You   
// may enable them by defining LIVE_SERVER_AT_DESIGN_TIME or by selectively   
// removing them from the $IFDEF blocks. However, such items must still be    
// programmatically created via a method of the appropriate CoClass before    
// they can be used.                                                          
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
interface

uses Windows, ActiveX, Classes, Graphics, OleServer, StdVCL, Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  PAWMajorVersion = 1;
  PAWMinorVersion = 3;

  LIBID_PAW: TGUID = '{38BAC5EB-EC29-40B8-B78A-351C11075DDD}';

  IID__CompanyInformation: TGUID = '{9EFE1904-D8EE-412F-A444-553E9A7336A9}';
  CLASS_CompanyInformation: TGUID = '{3A826A61-14E4-4440-9665-97D95130BE6F}';
  IID__Btrieve: TGUID = '{125FEDEE-FF79-41B1-B34D-D567AC13C7FF}';
  CLASS_Btrieve: TGUID = '{07A753A0-84E4-4B1B-A730-7D3B204CF8E1}';
  IID__SelectCompany: TGUID = '{5C1F096E-B6AD-447E-B159-F15AD0ECD9AA}';
  CLASS_SelectCompany: TGUID = '{35863104-74D5-4320-8435-20FABD20CFDF}';
  IID__Peachw: TGUID = '{21537F5C-F7EA-4661-81FF-5370202ACC5F}';
  CLASS_Peachw: TGUID = '{CFEA016C-68DD-443D-AE54-FE685255D225}';
  IID__DefaultCustomerData: TGUID = '{154AF93B-D692-4FA6-8693-3EC812E22250}';
  CLASS_DefaultCustomerData: TGUID = '{678BC0D6-B784-4F1F-B687-608A1CFF12E4}';
  IID__Chart: TGUID = '{7FD6888B-863F-4726-99FF-F9FD67CB7956}';
  CLASS_Chart: TGUID = '{F48B46B7-63D8-43C5-8BEB-C883A9975AC6}';
  IID__Customer: TGUID = '{34AFE43F-CBD3-4340-BEBB-E200DAB272AB}';
  CLASS_Customer: TGUID = '{3BBEE809-6D9D-483E-9AE4-47B44F0F45BC}';
  IID__Alarm: TGUID = '{2E8F56F1-7459-4E81-8D84-9A91F3AA5206}';
  CLASS_Alarm: TGUID = '{03DE53DE-7B42-47E1-B0B6-1CBCE10C94D4}';
  IID__SalesTaxCode: TGUID = '{AC42A55B-321A-4ECE-941E-AB12D47B3662}';
  CLASS_SalesTaxCode: TGUID = '{E5A0323F-5459-4749-8FC3-E3DE56C98A60}';
  IID__Employee: TGUID = '{381C298F-0686-46B2-9188-29F2275757AE}';
  CLASS_Employee: TGUID = '{0196CACD-9606-4ED5-8130-8B848289F214}';
  IID__TaxAuthority: TGUID = '{05E5D9BD-5175-4627-8269-ED49AC32D662}';
  CLASS_TaxAuthority: TGUID = '{0A2C83E2-BAA3-4CDA-BBFA-A364D084B467}';
  IID__Vendor: TGUID = '{191C30C5-4808-46F3-97D9-3B14EE1D2AB3}';
  CLASS_Vendor: TGUID = '{484BF770-A229-453C-842F-B77FC047AD2F}';
  IID__LineItem: TGUID = '{84F73079-D468-42E8-BB31-E2700971AF0E}';
  CLASS_LineItem: TGUID = '{E4FD2C67-EADD-435D-B11E-4B751F56DA7C}';
  IID__GeneralData: TGUID = '{2CE67D67-2EE7-409B-9F42-C466E56E4B09}';
  CLASS_GeneralData: TGUID = '{41045BB1-3FF3-4447-94DE-B0672EE3A6B8}';
  IID__SelectCustomer: TGUID = '{83AB11CD-FFCB-4AB6-85E0-D0B2171120A2}';
  CLASS_SelectCustomer: TGUID = '{7A34BF98-6CDB-4F5B-8CF1-4361DFA683B5}';
  IID__SelectDate: TGUID = '{7131E671-4312-4354-ABAF-5E9D70118986}';
  CLASS_SelectDate: TGUID = '{F1D30CF3-F765-45A6-9C6E-EAEA6A172691}';
  IID__SelectSalesTaxCode: TGUID = '{6560FBC2-03A4-42E2-B388-FA05700FB5B3}';
  CLASS_SelectSalesTaxCode: TGUID = '{38A2D6FB-7787-4378-AAD0-60809156BFB3}';
  IID__DefaultShipMethod: TGUID = '{017D5A7E-C77F-4C99-9B8B-7FC70B4975AE}';
  CLASS_DefaultShipMethod: TGUID = '{96176F30-1DDE-4677-85EE-C16CA19615DD}';
  IID__SelectSalesRep: TGUID = '{420F9F2E-15E6-422E-84AA-E3CC2AD0D0B5}';
  CLASS_SelectSalesRep: TGUID = '{F8191383-82A3-4958-81F1-08B3292D7A5C}';
  IID__SelectAccount: TGUID = '{3E7726C7-B33F-4DB8-9A41-36C1AC345AE0}';
  CLASS_SelectAccount: TGUID = '{B73AC94B-FC41-4072-B77C-FBDDEED00D88}';
  IID__SalesJournal: TGUID = '{0FD1CB59-0033-4910-8CED-73E4953443C2}';
  CLASS_SalesJournal: TGUID = '{A9353DDD-90F9-4D37-A3C4-2340C238387A}';
  IID__Journal: TGUID = '{4B02042B-65FB-432E-B015-692AF10D2FF4}';
  CLASS_Journal: TGUID = '{2AC30DBA-9AE2-4B27-9577-DEF7CEBBBF1B}';
  IID__Alert: TGUID = '{433F1659-7F2D-42DE-86CC-2FA2EB8D1AE5}';
  CLASS_Alert: TGUID = '{2F4B0A29-7257-4BD2-BAE4-29839D548128}';
  IID__Eventlog: TGUID = '{64631A2F-7752-4C6A-AB79-263E7F7CD7F8}';
  CLASS_Eventlog: TGUID = '{C6A8701E-F407-4F58-98A9-E1A8B4275B9D}';
  IID__AuditTrail: TGUID = '{0308E528-3721-4B89-95CB-31649F5CDCD4}';
  CLASS_AuditTrail: TGUID = '{2A935BE4-95AA-4DAA-91AA-150C7A3B0E1E}';
  IID__Cost: TGUID = '{76C49CA7-1F47-49EA-A842-3E6E79C2AAA6}';
  CLASS_Cost: TGUID = '{0C0EF76E-4E44-465E-B2B1-8049BF9D37F8}';
  IID__AssemblyAdjustmentJournal: TGUID = '{183FA8D7-6686-4A5A-89D8-39E3E675E66D}';
  CLASS_AssemblyAdjustmentJournal: TGUID = '{55D6A38F-70CC-47C9-AE66-8AEC5E635DF0}';
  IID__FAAsset: TGUID = '{F2C0D9E2-6F81-49A1-B846-C1F5740B97A5}';
  CLASS_FAAsset: TGUID = '{2794648E-10A1-44A1-9103-0A87439A7081}';
  IID__FABook: TGUID = '{26F3EF12-AB32-4085-B74A-02D2F3220124}';
  CLASS_FABook: TGUID = '{C11ADB0A-7CD0-4F92-936B-D220E4C3B7B3}';
  IID__FABusUse: TGUID = '{91AF0605-3D70-4339-89BE-D7529627B213}';
  CLASS_FABusUse: TGUID = '{E10F99E2-18FB-4E6D-ACD6-43DAED08DC3B}';
  IID__FAClass: TGUID = '{1D3B8B73-7364-4C0A-BCD7-468C85E263DD}';
  CLASS_FAClass: TGUID = '{FC0F23F7-824A-42AD-A5F3-D1DCAE2FC4DC}';
  IID__FAComp: TGUID = '{1E00F48D-5C80-491F-8A26-6DF6AFD31769}';
  CLASS_FAComp: TGUID = '{8CA75560-9714-41B4-AF2D-4947E23CED75}';
  IID__FAPost: TGUID = '{3BE6A22F-677A-4B25-A1DC-DABF6AFEE050}';
  CLASS_FAPost: TGUID = '{C526D449-43D6-44E9-B5F2-7E5B220414F5}';
  IID__FAPrePst: TGUID = '{4E40871E-981E-4C7C-B4F4-FB1EBB4A0E05}';
  CLASS_FAPrePst: TGUID = '{6CA32A72-B918-403B-972C-BA5FD56C0778}';
  IID__DefaultStatementData: TGUID = '{95E03C99-E38C-413A-8D44-1D0B19F13A0C}';
  CLASS_DefaultStatementData: TGUID = '{65F4CA2E-BD56-4889-9FB3-EF31BA289636}';
  IID__DefaultTaxTypes: TGUID = '{8C51FB85-22A0-4911-B528-904321D88575}';
  CLASS_DefaultTaxTypes: TGUID = '{078F2EB5-8BC3-4677-A627-60DDBF864C90}';
  IID__DefaultVendorData: TGUID = '{694A13DF-B513-4AF2-BF55-2AA70D375DB4}';
  CLASS_DefaultVendorData: TGUID = '{1EFFAA3B-5888-4423-B0E8-9D9FF3CE102D}';
  IID__DefaultInventoryData: TGUID = '{8D834B33-7E7D-412C-819A-C87393958778}';
  CLASS_DefaultInventoryData: TGUID = '{3E93158D-7D06-4542-9294-4B105AC82049}';
  IID__DefaultGLAccounts: TGUID = '{7244422D-476B-43D1-B263-A3A4EC39FBA5}';
  CLASS_DefaultGLAccounts: TGUID = '{19B50B6E-5367-4402-97CF-5665BD91CA63}';
  IID__DefaultJobData: TGUID = '{95677474-3820-4C10-B5E9-FE0F96D6AEF4}';
  CLASS_DefaultJobData: TGUID = '{4362B82A-010A-4647-B7F5-95137500100F}';
  IID__DefaultEmployeeData: TGUID = '{FE278A92-7AB4-46BF-8C63-13A1A8B716AC}';
  CLASS_DefaultEmployeeData: TGUID = '{5912BA69-EF35-4F00-AF8E-BC176D8581DC}';
  IID__eCheckData: TGUID = '{F5C083F1-BB74-43DA-9DE3-050A82A310A6}';
  CLASS_eCheckData: TGUID = '{DD726905-EB74-4D7A-9EC8-F4E5A96B10E7}';
  IID__GroupData: TGUID = '{DFA18B58-6843-49F7-900F-2B85F02B7315}';
  CLASS_GroupData: TGUID = '{4409504D-0A68-4604-8C9D-489882B585BF}';
  IID__InventoryChain: TGUID = '{0C871551-80C7-4854-A9DB-E687A0DA193F}';
  CLASS_InventoryChain: TGUID = '{006EFB40-3C22-4A19-BAE4-8A317111DCEC}';
  IID__InventoryComponent: TGUID = '{E32AD34C-EA66-4B84-B0D8-F1AFBC6C5F4F}';
  CLASS_InventoryComponent: TGUID = '{D452ECB8-97EF-47F2-B81F-80CF61DF9CDC}';
  IID__InventoryCost: TGUID = '{A8D25F38-0008-49CD-976C-384BE0B59D7C}';
  CLASS_InventoryCost: TGUID = '{43FDAA1F-D7C3-4B1F-A5EE-5576C9258184}';
  IID__ENums: TGUID = '{5F86289E-E438-45CD-96C8-ADD96930695E}';
  CLASS_ENums: TGUID = '{7EF65709-5146-4C8D-96E9-61B033A55878}';
  IID__JobData: TGUID = '{E8A88023-3A3B-4589-AAEB-E4CDBEFAA403}';
  CLASS_JobData: TGUID = '{2AFC9962-F624-40CF-94FE-913E3C5F19C7}';
  IID__JobEstimate: TGUID = '{CC3E57D4-0951-42D9-9758-7DED330B1459}';
  CLASS_JobEstimate: TGUID = '{5A026537-DEA8-4ECE-829A-AFA1A9959409}';
  IID__JobTag: TGUID = '{DEF289CA-D93E-43B0-A96A-22DC2A5BF693}';
  CLASS_JobTag: TGUID = '{D91B8C8A-F21F-4D40-BAFC-FE864BC44530}';
  IID__CashDisbursementJournal: TGUID = '{BEAEE06C-BAD5-484E-8C89-A84C825E55BD}';
  CLASS_CashDisbursementJournal: TGUID = '{86968F99-2C7E-4AF8-8E8E-C2F11411C81C}';
  IID__CashReceiptJournal: TGUID = '{3D47D9FA-9FC9-445A-9C51-C34C54476933}';
  CLASS_CashReceiptJournal: TGUID = '{857E096D-6846-41EF-A395-179A138AA2F1}';
  IID__GeneralJournal: TGUID = '{29E5BBAB-8F57-4DEB-890B-B6F5D805F941}';
  CLASS_GeneralJournal: TGUID = '{AA4BA1A4-F3B9-4613-8AFB-F33A9EAC230A}';
  IID__InventoryAdjustmentJournal: TGUID = '{B57FFDF8-947B-4662-B996-65FDC8FA87E1}';
  CLASS_InventoryAdjustmentJournal: TGUID = '{0E1A7194-6BD5-4068-9505-8F5D51E12B28}';
  IID__PayrollJournal: TGUID = '{296F1A27-28AB-4511-B98A-C31D38E6CADE}';
  CLASS_PayrollJournal: TGUID = '{FEABC47D-91AE-4084-BBBF-F53D92DB21E3}';
  IID__PurchaseJournal: TGUID = '{FFDC920E-F028-4F48-8AED-DBA3AE359924}';
  CLASS_PurchaseJournal: TGUID = '{5271E4A4-A1B8-4063-A60A-D6662EE2206E}';
  IID__PurchaseOrderJournal: TGUID = '{BC073E73-CB03-4BEA-8DD7-2551A1B36C06}';
  CLASS_PurchaseOrderJournal: TGUID = '{CA936A79-B0D7-4D66-93EA-AE34E59A5103}';
  IID__SalesOrderJournal: TGUID = '{14188EF5-39B9-456D-9222-B03FF50D991B}';
  CLASS_SalesOrderJournal: TGUID = '{B65EA8D4-65B4-4C7E-A141-232D97058A47}';
  IID__Phase: TGUID = '{1920C000-56E7-493D-A454-3A53A6687C59}';
  CLASS_Phase: TGUID = '{C4403A67-4D78-4C9A-ABBC-8B44D817A329}';
  IID__ReceiptTag: TGUID = '{AD03D005-0348-437B-949B-3D9D9B038828}';
  CLASS_ReceiptTag: TGUID = '{A8B1880A-877F-4B42-89B4-73538459BE73}';
  IID__MemorizedTransactions: TGUID = '{A9B269CE-B5C4-47FF-88E0-FB7D80C3345C}';
  CLASS_MemorizedTransactions: TGUID = '{477B24C6-3A9A-401E-BA07-DD150F298C8A}';
  IID__TaxTable: TGUID = '{C30F17E2-96ED-4431-B27F-5435B8F51BDC}';
  CLASS_TaxTable: TGUID = '{9F2D622F-BDE1-477D-9042-D2EFE4444F95}';
  IID__Ticket: TGUID = '{F3A0D161-AC06-4746-9571-DA53CC94D4D6}';
  CLASS_Ticket: TGUID = '{EA040264-B44A-486B-8354-4833D8112FD9}';
  IID__User: TGUID = '{589B7A79-192C-4B3C-877F-45BE473C4EC6}';
  CLASS_User: TGUID = '{EEBBB557-D8B2-43B7-B0D7-ED0C731FA600}';
  IID__SortJob: TGUID = '{8166AFE8-8596-4A5F-B297-B3DAE7BB8255}';
  CLASS_SortJob: TGUID = '{E2CA2970-881F-4EFE-A4E6-2059623A9561}';
  IID__SelectVendor: TGUID = '{BB18B622-0E50-425E-92AB-A98D71577173}';
  CLASS_SelectVendor: TGUID = '{42E9681B-F32F-412A-BB9C-D49285D36F2A}';
  IID__SelectLineItem: TGUID = '{AC6315A9-0948-4D8C-A3CF-FF87DE45C155}';
  CLASS_SelectLineItem: TGUID = '{8B3C6604-07D3-4523-91A3-4A751037A7ED}';
  IID__SelectEmployee: TGUID = '{D13855A6-6CD1-4EC8-9AFB-A62093BF27A9}';
  CLASS_SelectEmployee: TGUID = '{A133126B-6247-48FD-BE36-06793EA2306A}';
  IID__JrnlHdr: TGUID = '{13A31E87-9BD4-4E4D-A26C-C5F16A2A5E5F}';
  CLASS_JrnlHdr: TGUID = '{82E9BC8E-3A9B-42B1-96EE-B535F9A6156B}';
  IID__JrnlRow: TGUID = '{410EED2D-74A6-4CF9-AF64-9B945AB6A785}';
  CLASS_JrnlRow: TGUID = '{4CA09D61-02CB-4571-95B8-604CF4C75F59}';
  IID__DefaultPriceLevels: TGUID = '{C4D13436-3E5C-490A-8FFB-0C3E213DF341}';
  CLASS_DefaultPriceLevels: TGUID = '{7CB0C3F2-B4E9-4E96-A868-A6EEC581823F}';
  IID__RaiseHistory: TGUID = '{8574F6FB-F69A-4B62-90F5-9F80ED9660FE}';
  CLASS_RaiseHistory: TGUID = '{9524FD3D-FD56-4612-A0C9-9FF8E98158D1}';
  IID__BOMHistory: TGUID = '{DDCDC5E2-2F2F-490B-A89C-634E2BDE7F34}';
  CLASS_BOMHistory: TGUID = '{7B5F7B39-FBED-470D-8375-A1D671A33C45}';
  IID__BOMItems: TGUID = '{A4C9C3FE-2F45-4486-BD10-B1872E62663A}';
  CLASS_BOMItems: TGUID = '{E233FF76-BC3A-4517-80A4-9BEBF1B92E70}';
  IID__QuantityDiscount: TGUID = '{56FD6770-B7B7-46F3-ABBD-A3A22C89654B}';
  CLASS_QuantityDiscount: TGUID = '{A34676E0-A112-45A2-AA25-2B29690DA5C2}';
  IID__UnitMeasure: TGUID = '{6612DC34-5B03-4093-8084-1262B6202C97}';
  CLASS_UnitMeasure: TGUID = '{83C4299F-D624-44E1-BC81-286DCCDA48C9}';
  IID__WorkTicket: TGUID = '{1BCB22F2-AD72-4D87-AC16-605C15E938D5}';
  CLASS_WorkTicket: TGUID = '{19FFABB7-AD64-4CF9-A7A6-227EBCCCACAE}';
  IID__SelectJob: TGUID = '{A1FC6EE3-9A7F-4C51-AAC0-C1375E8840E5}';
  CLASS_SelectJob: TGUID = '{711DC818-04BC-445A-AEB2-3789714724CC}';
  IID__JrnlSNo: TGUID = '{539D2157-A6A7-4DBC-BDF6-C517DF39C45B}';
  CLASS_JrnlSNo: TGUID = '{A61AEE9E-CD45-4AC3-94DB-52C0F331F5CE}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum pawJournalCode
type
  pawJournalCode = TOleEnum;
const
  pawJournalCodeGeneral = $00000000;
  pawJournalCodeCashReceipt = $00000001;
  pawJournalCodeCashDisbursement = $00000002;
  pawJournalCodeSales = $00000003;
  pawJournalCodePurchase = $00000004;
  pawJournalCodePayroll = $00000005;
  pawJournalCodeInventoryAdjustment = $00000007;
  pawJournalCodeAssemblyAdjustment = $00000008;
  pawJournalCodePurchaseOrder = $0000000A;
  pawJournalCodeSalesOrder = $0000000B;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  _CompanyInformation = interface;
  _CompanyInformationDisp = dispinterface;
  _Btrieve = interface;
  _BtrieveDisp = dispinterface;
  _SelectCompany = interface;
  _SelectCompanyDisp = dispinterface;
  _Peachw = interface;
  _PeachwDisp = dispinterface;
  _DefaultCustomerData = interface;
  _DefaultCustomerDataDisp = dispinterface;
  _Chart = interface;
  _ChartDisp = dispinterface;
  _Customer = interface;
  _CustomerDisp = dispinterface;
  _Alarm = interface;
  _AlarmDisp = dispinterface;
  _SalesTaxCode = interface;
  _SalesTaxCodeDisp = dispinterface;
  _Employee = interface;
  _EmployeeDisp = dispinterface;
  _TaxAuthority = interface;
  _TaxAuthorityDisp = dispinterface;
  _Vendor = interface;
  _VendorDisp = dispinterface;
  _LineItem = interface;
  _LineItemDisp = dispinterface;
  _GeneralData = interface;
  _GeneralDataDisp = dispinterface;
  _SelectCustomer = interface;
  _SelectCustomerDisp = dispinterface;
  _SelectDate = interface;
  _SelectDateDisp = dispinterface;
  _SelectSalesTaxCode = interface;
  _SelectSalesTaxCodeDisp = dispinterface;
  _DefaultShipMethod = interface;
  _DefaultShipMethodDisp = dispinterface;
  _SelectSalesRep = interface;
  _SelectSalesRepDisp = dispinterface;
  _SelectAccount = interface;
  _SelectAccountDisp = dispinterface;
  _SalesJournal = interface;
  _SalesJournalDisp = dispinterface;
  _Journal = interface;
  _JournalDisp = dispinterface;
  _Alert = interface;
  _AlertDisp = dispinterface;
  _Eventlog = interface;
  _EventlogDisp = dispinterface;
  _AuditTrail = interface;
  _AuditTrailDisp = dispinterface;
  _Cost = interface;
  _CostDisp = dispinterface;
  _AssemblyAdjustmentJournal = interface;
  _AssemblyAdjustmentJournalDisp = dispinterface;
  _FAAsset = interface;
  _FAAssetDisp = dispinterface;
  _FABook = interface;
  _FABookDisp = dispinterface;
  _FABusUse = interface;
  _FABusUseDisp = dispinterface;
  _FAClass = interface;
  _FAClassDisp = dispinterface;
  _FAComp = interface;
  _FACompDisp = dispinterface;
  _FAPost = interface;
  _FAPostDisp = dispinterface;
  _FAPrePst = interface;
  _FAPrePstDisp = dispinterface;
  _DefaultStatementData = interface;
  _DefaultStatementDataDisp = dispinterface;
  _DefaultTaxTypes = interface;
  _DefaultTaxTypesDisp = dispinterface;
  _DefaultVendorData = interface;
  _DefaultVendorDataDisp = dispinterface;
  _DefaultInventoryData = interface;
  _DefaultInventoryDataDisp = dispinterface;
  _DefaultGLAccounts = interface;
  _DefaultGLAccountsDisp = dispinterface;
  _DefaultJobData = interface;
  _DefaultJobDataDisp = dispinterface;
  _DefaultEmployeeData = interface;
  _DefaultEmployeeDataDisp = dispinterface;
  _eCheckData = interface;
  _eCheckDataDisp = dispinterface;
  _GroupData = interface;
  _GroupDataDisp = dispinterface;
  _InventoryChain = interface;
  _InventoryChainDisp = dispinterface;
  _InventoryComponent = interface;
  _InventoryComponentDisp = dispinterface;
  _InventoryCost = interface;
  _InventoryCostDisp = dispinterface;
  _ENums = interface;
  _ENumsDisp = dispinterface;
  _JobData = interface;
  _JobDataDisp = dispinterface;
  _JobEstimate = interface;
  _JobEstimateDisp = dispinterface;
  _JobTag = interface;
  _JobTagDisp = dispinterface;
  _CashDisbursementJournal = interface;
  _CashDisbursementJournalDisp = dispinterface;
  _CashReceiptJournal = interface;
  _CashReceiptJournalDisp = dispinterface;
  _GeneralJournal = interface;
  _GeneralJournalDisp = dispinterface;
  _InventoryAdjustmentJournal = interface;
  _InventoryAdjustmentJournalDisp = dispinterface;
  _PayrollJournal = interface;
  _PayrollJournalDisp = dispinterface;
  _PurchaseJournal = interface;
  _PurchaseJournalDisp = dispinterface;
  _PurchaseOrderJournal = interface;
  _PurchaseOrderJournalDisp = dispinterface;
  _SalesOrderJournal = interface;
  _SalesOrderJournalDisp = dispinterface;
  _Phase = interface;
  _PhaseDisp = dispinterface;
  _ReceiptTag = interface;
  _ReceiptTagDisp = dispinterface;
  _MemorizedTransactions = interface;
  _MemorizedTransactionsDisp = dispinterface;
  _TaxTable = interface;
  _TaxTableDisp = dispinterface;
  _Ticket = interface;
  _TicketDisp = dispinterface;
  _User = interface;
  _UserDisp = dispinterface;
  _SortJob = interface;
  _SortJobDisp = dispinterface;
  _SelectVendor = interface;
  _SelectVendorDisp = dispinterface;
  _SelectLineItem = interface;
  _SelectLineItemDisp = dispinterface;
  _SelectEmployee = interface;
  _SelectEmployeeDisp = dispinterface;
  _JrnlHdr = interface;
  _JrnlHdrDisp = dispinterface;
  _JrnlRow = interface;
  _JrnlRowDisp = dispinterface;
  _DefaultPriceLevels = interface;
  _DefaultPriceLevelsDisp = dispinterface;
  _RaiseHistory = interface;
  _RaiseHistoryDisp = dispinterface;
  _BOMHistory = interface;
  _BOMHistoryDisp = dispinterface;
  _BOMItems = interface;
  _BOMItemsDisp = dispinterface;
  _QuantityDiscount = interface;
  _QuantityDiscountDisp = dispinterface;
  _UnitMeasure = interface;
  _UnitMeasureDisp = dispinterface;
  _WorkTicket = interface;
  _WorkTicketDisp = dispinterface;
  _SelectJob = interface;
  _SelectJobDisp = dispinterface;
  _JrnlSNo = interface;
  _JrnlSNoDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  CompanyInformation = _CompanyInformation;
  Btrieve = _Btrieve;
  SelectCompany = _SelectCompany;
  Peachw = _Peachw;
  DefaultCustomerData = _DefaultCustomerData;
  Chart = _Chart;
  Customer = _Customer;
  Alarm = _Alarm;
  SalesTaxCode = _SalesTaxCode;
  Employee = _Employee;
  TaxAuthority = _TaxAuthority;
  Vendor = _Vendor;
  LineItem = _LineItem;
  GeneralData = _GeneralData;
  SelectCustomer = _SelectCustomer;
  SelectDate = _SelectDate;
  SelectSalesTaxCode = _SelectSalesTaxCode;
  DefaultShipMethod = _DefaultShipMethod;
  SelectSalesRep = _SelectSalesRep;
  SelectAccount = _SelectAccount;
  SalesJournal = _SalesJournal;
  Journal = _Journal;
  Alert = _Alert;
  Eventlog = _Eventlog;
  AuditTrail = _AuditTrail;
  Cost = _Cost;
  AssemblyAdjustmentJournal = _AssemblyAdjustmentJournal;
  FAAsset = _FAAsset;
  FABook = _FABook;
  FABusUse = _FABusUse;
  FAClass = _FAClass;
  FAComp = _FAComp;
  FAPost = _FAPost;
  FAPrePst = _FAPrePst;
  DefaultStatementData = _DefaultStatementData;
  DefaultTaxTypes = _DefaultTaxTypes;
  DefaultVendorData = _DefaultVendorData;
  DefaultInventoryData = _DefaultInventoryData;
  DefaultGLAccounts = _DefaultGLAccounts;
  DefaultJobData = _DefaultJobData;
  DefaultEmployeeData = _DefaultEmployeeData;
  eCheckData = _eCheckData;
  GroupData = _GroupData;
  InventoryChain = _InventoryChain;
  InventoryComponent = _InventoryComponent;
  InventoryCost = _InventoryCost;
  ENums = _ENums;
  JobData = _JobData;
  JobEstimate = _JobEstimate;
  JobTag = _JobTag;
  CashDisbursementJournal = _CashDisbursementJournal;
  CashReceiptJournal = _CashReceiptJournal;
  GeneralJournal = _GeneralJournal;
  InventoryAdjustmentJournal = _InventoryAdjustmentJournal;
  PayrollJournal = _PayrollJournal;
  PurchaseJournal = _PurchaseJournal;
  PurchaseOrderJournal = _PurchaseOrderJournal;
  SalesOrderJournal = _SalesOrderJournal;
  Phase = _Phase;
  ReceiptTag = _ReceiptTag;
  MemorizedTransactions = _MemorizedTransactions;
  TaxTable = _TaxTable;
  Ticket = _Ticket;
  User = _User;
  SortJob = _SortJob;
  SelectVendor = _SelectVendor;
  SelectLineItem = _SelectLineItem;
  SelectEmployee = _SelectEmployee;
  JrnlHdr = _JrnlHdr;
  JrnlRow = _JrnlRow;
  DefaultPriceLevels = _DefaultPriceLevels;
  RaiseHistory = _RaiseHistory;
  BOMHistory = _BOMHistory;
  BOMItems = _BOMItems;
  QuantityDiscount = _QuantityDiscount;
  UnitMeasure = _UnitMeasure;
  WorkTicket = _WorkTicket;
  SelectJob = _SelectJob;
  JrnlSNo = _JrnlSNo;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//

  Peachw___v0 = _Peachw; 
  PayrollJournal___v0 = _PayrollJournal; 
  MemorizedTransactions___v0 = _MemorizedTransactions; 

// *********************************************************************//
// Interface: _CompanyInformation
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9EFE1904-D8EE-412F-A444-553E9A7336A9}
// *********************************************************************//
  _CompanyInformation = interface(IDispatch)
    ['{9EFE1904-D8EE-412F-A444-553E9A7336A9}']
    function CloseFile: OleVariant; safecall;
    function OpenFile: Smallint; safecall;
    function StepFirst: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_ActualLength: Integer; safecall;
    function Get_AddrCountry: WideString; safecall;
    procedure Set_AddrCountry(const Param1: WideString); safecall;
    function Get_AddrLine1: WideString; safecall;
    procedure Set_AddrLine1(const Param1: WideString); safecall;
    function Get_AddrLine2: WideString; safecall;
    procedure Set_AddrLine2(const Param1: WideString); safecall;
    function Get_AddrCity: WideString; safecall;
    procedure Set_AddrCity(const Param1: WideString); safecall;
    function Get_AddrPostalCode: WideString; safecall;
    procedure Set_AddrPostalCode(const Param1: WideString); safecall;
    function Get_AddrState: WideString; safecall;
    procedure Set_AddrState(const Param1: WideString); safecall;
    function Get_ArchiveDate: OleVariant; safecall;
    procedure Set_ArchiveDate(Param1: OleVariant); safecall;
    function Get_ArchiveDescription: WideString; safecall;
    procedure Set_ArchiveDescription(const Param1: WideString); safecall;
    function Get_BusinessType: WideString; safecall;
    function Get_BusinessTypeCode: Byte; safecall;
    procedure Set_BusinessTypeCode(Param1: Byte); safecall;
    function Get_CashBasis: WordBool; safecall;
    procedure Set_CashBasis(Param1: WordBool); safecall;
    function Get_CompanyName: WideString; safecall;
    procedure Set_CompanyName(const Param1: WideString); safecall;
    function Get_CompanySpecial1a: Integer; safecall;
    procedure Set_CompanySpecial1a(Param1: Integer); safecall;
    function Get_CompanySpecial1b: Integer; safecall;
    procedure Set_CompanySpecial1b(Param1: Integer); safecall;
    function Get_CompanySpecial1c: Integer; safecall;
    procedure Set_CompanySpecial1c(Param1: Integer); safecall;
    function Get_CompanySpecial1d: Integer; safecall;
    procedure Set_CompanySpecial1d(Param1: Integer); safecall;
    function Get_Email: WideString; safecall;
    procedure Set_Email(const Param1: WideString); safecall;
    function Get_ETACompanyID: WideString; safecall;
    procedure Set_ETACompanyID(const Param1: WideString); safecall;
    function Get_ETAFlag: WordBool; safecall;
    procedure Set_ETAFlag(Param1: WordBool); safecall;
    function Get_ETAUnknown: WideString; safecall;
    procedure Set_ETAUnknown(const Param1: WideString); safecall;
    function Get_eTimeIndex: WideString; safecall;
    procedure Set_eTimeIndex(const Param1: WideString); safecall;
    function Get_Fax: WideString; safecall;
    procedure Set_Fax(const Param1: WideString); safecall;
    function Get_FEIN: WideString; safecall;
    procedure Set_FEIN(const Param1: WideString); safecall;
    function Get_Index: Integer; safecall;
    function Get_LastAccessTestDate: OleVariant; safecall;
    procedure Set_LastAccessTestDate(Param1: OleVariant); safecall;
    function Get_LastArchiveDate: OleVariant; safecall;
    procedure Set_LastArchiveDate(Param1: OleVariant); safecall;
    function Get_RealTime: WordBool; safecall;
    procedure Set_RealTime(Param1: WordBool); safecall;
    function Get_SEIN: WideString; safecall;
    procedure Set_SEIN(const Param1: WideString); safecall;
    function Get_SetupFlag(Index: Smallint): WordBool; safecall;
    procedure Set_SetupFlag(Index: Smallint; Param2: WordBool); safecall;
    function Get_StructureLength: Integer; safecall;
    function Get_SUIN: WideString; safecall;
    procedure Set_SUIN(const Param1: WideString); safecall;
    function Get_Telephone: WideString; safecall;
    procedure Set_Telephone(const Param1: WideString); safecall;
    function Get_Unused1: Byte; safecall;
    procedure Set_Unused1(Param1: Byte); safecall;
    function Get_Unused2: Byte; safecall;
    procedure Set_Unused2(Param1: Byte); safecall;
    function Get_Unused3(Index: Smallint): Byte; safecall;
    procedure Set_Unused3(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused4(Index: Smallint): Byte; safecall;
    procedure Set_Unused4(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused5(Index: Smallint): Byte; safecall;
    procedure Set_Unused5(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown1(Index: Smallint): Byte; safecall;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused11(Index: Smallint): Byte; safecall;
    procedure Set_Unused11(Index: Smallint; Param2: Byte); safecall;
    procedure Set_UseAuditTrail(Param1: WordBool); safecall;
    function Get_UseAuditTrail: WordBool; safecall;
    function Get_Version: Double; safecall;
    function Get_WebSite: WideString; safecall;
    procedure Set_WebSite(const Param1: WideString); safecall;
    property ActualLength: Integer read Get_ActualLength;
    property AddrCountry: WideString read Get_AddrCountry write Set_AddrCountry;
    property AddrLine1: WideString read Get_AddrLine1 write Set_AddrLine1;
    property AddrLine2: WideString read Get_AddrLine2 write Set_AddrLine2;
    property AddrCity: WideString read Get_AddrCity write Set_AddrCity;
    property AddrPostalCode: WideString read Get_AddrPostalCode write Set_AddrPostalCode;
    property AddrState: WideString read Get_AddrState write Set_AddrState;
    property ArchiveDate: OleVariant read Get_ArchiveDate write Set_ArchiveDate;
    property ArchiveDescription: WideString read Get_ArchiveDescription write Set_ArchiveDescription;
    property BusinessType: WideString read Get_BusinessType;
    property BusinessTypeCode: Byte read Get_BusinessTypeCode write Set_BusinessTypeCode;
    property CashBasis: WordBool read Get_CashBasis write Set_CashBasis;
    property CompanyName: WideString read Get_CompanyName write Set_CompanyName;
    property CompanySpecial1a: Integer read Get_CompanySpecial1a write Set_CompanySpecial1a;
    property CompanySpecial1b: Integer read Get_CompanySpecial1b write Set_CompanySpecial1b;
    property CompanySpecial1c: Integer read Get_CompanySpecial1c write Set_CompanySpecial1c;
    property CompanySpecial1d: Integer read Get_CompanySpecial1d write Set_CompanySpecial1d;
    property Email: WideString read Get_Email write Set_Email;
    property ETACompanyID: WideString read Get_ETACompanyID write Set_ETACompanyID;
    property ETAFlag: WordBool read Get_ETAFlag write Set_ETAFlag;
    property ETAUnknown: WideString read Get_ETAUnknown write Set_ETAUnknown;
    property eTimeIndex: WideString read Get_eTimeIndex write Set_eTimeIndex;
    property Fax: WideString read Get_Fax write Set_Fax;
    property FEIN: WideString read Get_FEIN write Set_FEIN;
    property Index: Integer read Get_Index;
    property LastAccessTestDate: OleVariant read Get_LastAccessTestDate write Set_LastAccessTestDate;
    property LastArchiveDate: OleVariant read Get_LastArchiveDate write Set_LastArchiveDate;
    property RealTime: WordBool read Get_RealTime write Set_RealTime;
    property SEIN: WideString read Get_SEIN write Set_SEIN;
    property SetupFlag[Index: Smallint]: WordBool read Get_SetupFlag write Set_SetupFlag;
    property StructureLength: Integer read Get_StructureLength;
    property SUIN: WideString read Get_SUIN write Set_SUIN;
    property Telephone: WideString read Get_Telephone write Set_Telephone;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unused2: Byte read Get_Unused2 write Set_Unused2;
    property Unused3[Index: Smallint]: Byte read Get_Unused3 write Set_Unused3;
    property Unused4[Index: Smallint]: Byte read Get_Unused4 write Set_Unused4;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property Unknown1[Index: Smallint]: Byte read Get_Unknown1 write Set_Unknown1;
    property Unused11[Index: Smallint]: Byte read Get_Unused11 write Set_Unused11;
    property UseAuditTrail: WordBool read Get_UseAuditTrail write Set_UseAuditTrail;
    property Version: Double read Get_Version;
    property WebSite: WideString read Get_WebSite write Set_WebSite;
  end;

// *********************************************************************//
// DispIntf:  _CompanyInformationDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9EFE1904-D8EE-412F-A444-553E9A7336A9}
// *********************************************************************//
  _CompanyInformationDisp = dispinterface
    ['{9EFE1904-D8EE-412F-A444-553E9A7336A9}']
    function CloseFile: OleVariant; dispid 1610809387;
    function OpenFile: Smallint; dispid 1610809389;
    function StepFirst: Smallint; dispid 1610809390;
    function Update: Smallint; dispid 1610809391;
    property ActualLength: Integer readonly dispid 1745027114;
    property AddrCountry: WideString dispid 1745027113;
    property AddrLine1: WideString dispid 1745027112;
    property AddrLine2: WideString dispid 1745027111;
    property AddrCity: WideString dispid 1745027110;
    property AddrPostalCode: WideString dispid 1745027109;
    property AddrState: WideString dispid 1745027108;
    property ArchiveDate: OleVariant dispid 1745027107;
    property ArchiveDescription: WideString dispid 1745027106;
    property BusinessType: WideString readonly dispid 1745027105;
    property BusinessTypeCode: Byte dispid 1745027104;
    property CashBasis: WordBool dispid 1745027103;
    property CompanyName: WideString dispid 1745027102;
    property CompanySpecial1a: Integer dispid 1745027101;
    property CompanySpecial1b: Integer dispid 1745027100;
    property CompanySpecial1c: Integer dispid 1745027099;
    property CompanySpecial1d: Integer dispid 1745027098;
    property Email: WideString dispid 1745027097;
    property ETACompanyID: WideString dispid 1745027096;
    property ETAFlag: WordBool dispid 1745027095;
    property ETAUnknown: WideString dispid 1745027094;
    property eTimeIndex: WideString dispid 1745027093;
    property Fax: WideString dispid 1745027092;
    property FEIN: WideString dispid 1745027091;
    property Index: Integer readonly dispid 1745027090;
    property LastAccessTestDate: OleVariant dispid 1745027089;
    property LastArchiveDate: OleVariant dispid 1745027088;
    property RealTime: WordBool dispid 1745027087;
    property SEIN: WideString dispid 1745027086;
    property SetupFlag[Index: Smallint]: WordBool dispid 1745027085;
    property StructureLength: Integer readonly dispid 1745027084;
    property SUIN: WideString dispid 1745027083;
    property Telephone: WideString dispid 1745027082;
    property Unused1: Byte dispid 1745027081;
    property Unused2: Byte dispid 1745027080;
    property Unused3[Index: Smallint]: Byte dispid 1745027079;
    property Unused4[Index: Smallint]: Byte dispid 1745027078;
    property Unused5[Index: Smallint]: Byte dispid 1745027077;
    property Unknown1[Index: Smallint]: Byte dispid 1745027076;
    property Unused11[Index: Smallint]: Byte dispid 1745027075;
    property UseAuditTrail: WordBool dispid 1745027074;
    property Version: Double readonly dispid 1745027073;
    property WebSite: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _Btrieve
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {125FEDEE-FF79-41B1-B34D-D567AC13C7FF}
// *********************************************************************//
  _Btrieve = interface(IDispatch)
    ['{125FEDEE-FF79-41B1-B34D-D567AC13C7FF}']
    function Connect(const Path: WideString): Smallint; safecall;
    function Disconnect: Smallint; safecall;
    function Reset: Smallint; safecall;
    function Get_ClientVersion: WideString; safecall;
    function Get_CompanyPath: WideString; safecall;
    procedure Set_CompanyPath(const Param1: WideString); safecall;
    function Get_ConnectCount: Integer; safecall;
    function Get_ErrorNumber: Integer; safecall;
    function Get_ErrorText: WideString; safecall;
    function Get_PawComVersion: WideString; safecall;
    function Get_RequestorVersion: WideString; safecall;
    function Get_ServerVersion: WideString; safecall;
    function ErrorMessage(ErrorNumber: Smallint): OleVariant; safecall;
    property ClientVersion: WideString read Get_ClientVersion;
    property CompanyPath: WideString read Get_CompanyPath write Set_CompanyPath;
    property ConnectCount: Integer read Get_ConnectCount;
    property ErrorNumber: Integer read Get_ErrorNumber;
    property ErrorText: WideString read Get_ErrorText;
    property PawComVersion: WideString read Get_PawComVersion;
    property RequestorVersion: WideString read Get_RequestorVersion;
    property ServerVersion: WideString read Get_ServerVersion;
  end;

// *********************************************************************//
// DispIntf:  _BtrieveDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {125FEDEE-FF79-41B1-B34D-D567AC13C7FF}
// *********************************************************************//
  _BtrieveDisp = dispinterface
    ['{125FEDEE-FF79-41B1-B34D-D567AC13C7FF}']
    function Connect(const Path: WideString): Smallint; dispid 1610809352;
    function Disconnect: Smallint; dispid 1610809353;
    function Reset: Smallint; dispid 1610809354;
    property ClientVersion: WideString readonly dispid 1745027079;
    property CompanyPath: WideString dispid 1745027078;
    property ConnectCount: Integer readonly dispid 1745027077;
    property ErrorNumber: Integer readonly dispid 1745027076;
    property ErrorText: WideString readonly dispid 1745027075;
    property PawComVersion: WideString readonly dispid 1745027074;
    property RequestorVersion: WideString readonly dispid 1745027073;
    property ServerVersion: WideString readonly dispid 1745027072;
    function ErrorMessage(ErrorNumber: Smallint): OleVariant; dispid 1610809356;
  end;

// *********************************************************************//
// Interface: _SelectCompany
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5C1F096E-B6AD-447E-B159-F15AD0ECD9AA}
// *********************************************************************//
  _SelectCompany = interface(IDispatch)
    ['{5C1F096E-B6AD-447E-B159-F15AD0ECD9AA}']
    function ShowOpen: OleVariant; safecall;
    function Get_CompanyName: WideString; safecall;
    function Get_CompanyPath: WideString; safecall;
    procedure Set_CompanyPath(const Param1: WideString); safecall;
    procedure Set_Icon(const Param1: WideString); safecall;
    procedure Set_IniPath(const Param1: WideString); safecall;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; safecall;
    property CompanyName: WideString read Get_CompanyName;
    property CompanyPath: WideString read Get_CompanyPath write Set_CompanyPath;
    property Icon: WideString write Set_Icon;
    property IniPath: WideString write Set_IniPath;
  end;

// *********************************************************************//
// DispIntf:  _SelectCompanyDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5C1F096E-B6AD-447E-B159-F15AD0ECD9AA}
// *********************************************************************//
  _SelectCompanyDisp = dispinterface
    ['{5C1F096E-B6AD-447E-B159-F15AD0ECD9AA}']
    function ShowOpen: OleVariant; dispid 1610809348;
    property CompanyName: WideString readonly dispid 1745027075;
    property CompanyPath: WideString dispid 1745027074;
    property Icon: WideString writeonly dispid 1745027073;
    property IniPath: WideString writeonly dispid 1745027072;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; dispid 1610809349;
  end;

// *********************************************************************//
// Interface: _Peachw
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {21537F5C-F7EA-4661-81FF-5370202ACC5F}
// *********************************************************************//
  _Peachw = interface(IDispatch)
    ['{21537F5C-F7EA-4661-81FF-5370202ACC5F}']
    function Get_Datapath: WideString; safecall;
    function Get_ProgramPath: WideString; safecall;
    function Get_GUID: WideString; safecall;
    property Datapath: WideString read Get_Datapath;
    property ProgramPath: WideString read Get_ProgramPath;
    property GUID: WideString read Get_GUID;
  end;

// *********************************************************************//
// DispIntf:  _PeachwDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {21537F5C-F7EA-4661-81FF-5370202ACC5F}
// *********************************************************************//
  _PeachwDisp = dispinterface
    ['{21537F5C-F7EA-4661-81FF-5370202ACC5F}']
    property Datapath: WideString readonly dispid 1745027073;
    property ProgramPath: WideString readonly dispid 1745027074;
    property GUID: WideString readonly dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _DefaultCustomerData
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {154AF93B-D692-4FA6-8693-3EC812E22250}
// *********************************************************************//
  _DefaultCustomerData = interface(IDispatch)
    ['{154AF93B-D692-4FA6-8693-3EC812E22250}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Read: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_ActualLength: Integer; safecall;
    function Get_AgeByDueDate: WordBool; safecall;
    procedure Set_AgeByDueDate(Param1: WordBool); safecall;
    function Get_AgingDays(Index: Smallint): Smallint; safecall;
    procedure Set_AgingDays(Index: Smallint; Param2: Smallint); safecall;
    function Get_AgingHeading(Index: Smallint): WideString; safecall;
    procedure Set_AgingHeading(Index: Smallint; const Param2: WideString); safecall;
    function Get_ARAccount: WideString; safecall;
    procedure Set_ARAccount(const Param1: WideString); safecall;
    function Get_AssignDepositTicketIDs: WordBool; safecall;
    procedure Set_AssignDepositTicketIDs(Param1: WordBool); safecall;
    function Get_CashAccount: WideString; safecall;
    procedure Set_CashAccount(const Param1: WideString); safecall;
    function Get_ChargeFinanceCharges: WordBool; safecall;
    procedure Set_ChargeFinanceCharges(Param1: WordBool); safecall;
    function Get_COD: WordBool; safecall;
    procedure Set_COD(Param1: WordBool); safecall;
    function Get_CreditLimit: Double; safecall;
    procedure Set_CreditLimit(Param1: Double); safecall;
    function Get_CustomFieldEnabled(Index: Smallint): WordBool; safecall;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool); safecall;
    function Get_CustomFieldLabel(Index: Smallint): WideString; safecall;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString); safecall;
    function Get_DefaultPayMethod: WideString; safecall;
    procedure Set_DefaultPayMethod(const Param1: WideString); safecall;
    function Get_DiscountDays: Smallint; safecall;
    procedure Set_DiscountDays(Param1: Smallint); safecall;
    function Get_DiscountGLAccount: WideString; safecall;
    procedure Set_DiscountGLAccount(const Param1: WideString); safecall;
    function Get_DiscountPercent: Double; safecall;
    procedure Set_DiscountPercent(Param1: Double); safecall;
    function Get_DueAtEndOfMonth: WordBool; safecall;
    procedure Set_DueAtEndOfMonth(Param1: WordBool); safecall;
    function Get_DueOnDayOfNextMonth: WordBool; safecall;
    procedure Set_DueOnDayOfNextMonth(Param1: WordBool); safecall;
    function Get_FCAnnualInterestRate: Double; safecall;
    procedure Set_FCAnnualInterestRate(Param1: Double); safecall;
    function Get_FCAppearsAs: WideString; safecall;
    procedure Set_FCAppearsAs(const Param1: WideString); safecall;
    function Get_FCChargeInterest: WordBool; safecall;
    procedure Set_FCChargeInterest(Param1: WordBool); safecall;
    function Get_FCDays: Smallint; safecall;
    procedure Set_FCDays(Param1: Smallint); safecall;
    function Get_FCGLAccount: WideString; safecall;
    procedure Set_FCGLAccount(const Param1: WideString); safecall;
    function Get_FCInterestAbove: Double; safecall;
    procedure Set_FCInterestAbove(Param1: Double); safecall;
    function Get_FCMinimum: Double; safecall;
    procedure Set_FCMinimum(Param1: Double); safecall;
    function Get_FCOverdueLimit: Double; safecall;
    procedure Set_FCOverdueLimit(Param1: Double); safecall;
    function Get_GLSalesAccount: WideString; safecall;
    procedure Set_GLSalesAccount(const Param1: WideString); safecall;
    function Get_NetDueDays: Smallint; safecall;
    procedure Set_NetDueDays(Param1: Smallint); safecall;
    function Get_NextInvoiceNumber: WideString; safecall;
    procedure Set_NextInvoiceNumber(const Param1: WideString); safecall;
    function Get_NextQuoteNumber: WideString; safecall;
    procedure Set_NextQuoteNumber(const Param1: WideString); safecall;
    function Get_NextSONumber: WideString; safecall;
    procedure Set_NextSONumber(const Param1: WideString); safecall;
    function Get_NLabels: Smallint; safecall;
    function Get_PaymentMethod(Index: Smallint): WideString; safecall;
    procedure Set_PaymentMethod(Index: Smallint; const Param2: WideString); safecall;
    function Get_Prepaid: WordBool; safecall;
    procedure Set_Prepaid(Param1: WordBool); safecall;
    function Get_TaxAccount: WideString; safecall;
    procedure Set_TaxAccount(const Param1: WideString); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused3: Smallint; safecall;
    procedure Set_Unused3(Param1: Smallint); safecall;
    function Get_Unused4: Byte; safecall;
    procedure Set_Unused4(Param1: Byte); safecall;
    function Get_Unused5(Index: Smallint): Smallint; safecall;
    procedure Set_Unused5(Index: Smallint; Param2: Smallint); safecall;
    function Get_Unused6(Index: Smallint): Byte; safecall;
    procedure Set_Unused6(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused10(Index: Smallint): Byte; safecall;
    procedure Set_Unused10(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused11(Index: Smallint): Byte; safecall;
    procedure Set_Unused11(Index: Smallint; Param2: Byte); safecall;
    property ActualLength: Integer read Get_ActualLength;
    property AgeByDueDate: WordBool read Get_AgeByDueDate write Set_AgeByDueDate;
    property AgingDays[Index: Smallint]: Smallint read Get_AgingDays write Set_AgingDays;
    property AgingHeading[Index: Smallint]: WideString read Get_AgingHeading write Set_AgingHeading;
    property ARAccount: WideString read Get_ARAccount write Set_ARAccount;
    property AssignDepositTicketIDs: WordBool read Get_AssignDepositTicketIDs write Set_AssignDepositTicketIDs;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property ChargeFinanceCharges: WordBool read Get_ChargeFinanceCharges write Set_ChargeFinanceCharges;
    property COD: WordBool read Get_COD write Set_COD;
    property CreditLimit: Double read Get_CreditLimit write Set_CreditLimit;
    property CustomFieldEnabled[Index: Smallint]: WordBool read Get_CustomFieldEnabled write Set_CustomFieldEnabled;
    property CustomFieldLabel[Index: Smallint]: WideString read Get_CustomFieldLabel write Set_CustomFieldLabel;
    property DefaultPayMethod: WideString read Get_DefaultPayMethod write Set_DefaultPayMethod;
    property DiscountDays: Smallint read Get_DiscountDays write Set_DiscountDays;
    property DiscountGLAccount: WideString read Get_DiscountGLAccount write Set_DiscountGLAccount;
    property DiscountPercent: Double read Get_DiscountPercent write Set_DiscountPercent;
    property DueAtEndOfMonth: WordBool read Get_DueAtEndOfMonth write Set_DueAtEndOfMonth;
    property DueOnDayOfNextMonth: WordBool read Get_DueOnDayOfNextMonth write Set_DueOnDayOfNextMonth;
    property FCAnnualInterestRate: Double read Get_FCAnnualInterestRate write Set_FCAnnualInterestRate;
    property FCAppearsAs: WideString read Get_FCAppearsAs write Set_FCAppearsAs;
    property FCChargeInterest: WordBool read Get_FCChargeInterest write Set_FCChargeInterest;
    property FCDays: Smallint read Get_FCDays write Set_FCDays;
    property FCGLAccount: WideString read Get_FCGLAccount write Set_FCGLAccount;
    property FCInterestAbove: Double read Get_FCInterestAbove write Set_FCInterestAbove;
    property FCMinimum: Double read Get_FCMinimum write Set_FCMinimum;
    property FCOverdueLimit: Double read Get_FCOverdueLimit write Set_FCOverdueLimit;
    property GLSalesAccount: WideString read Get_GLSalesAccount write Set_GLSalesAccount;
    property NetDueDays: Smallint read Get_NetDueDays write Set_NetDueDays;
    property NextInvoiceNumber: WideString read Get_NextInvoiceNumber write Set_NextInvoiceNumber;
    property NextQuoteNumber: WideString read Get_NextQuoteNumber write Set_NextQuoteNumber;
    property NextSONumber: WideString read Get_NextSONumber write Set_NextSONumber;
    property NLabels: Smallint read Get_NLabels;
    property PaymentMethod[Index: Smallint]: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property Prepaid: WordBool read Get_Prepaid write Set_Prepaid;
    property TaxAccount: WideString read Get_TaxAccount write Set_TaxAccount;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property Unused5[Index: Smallint]: Smallint read Get_Unused5 write Set_Unused5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property Unused10[Index: Smallint]: Byte read Get_Unused10 write Set_Unused10;
    property Unused11[Index: Smallint]: Byte read Get_Unused11 write Set_Unused11;
  end;

// *********************************************************************//
// DispIntf:  _DefaultCustomerDataDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {154AF93B-D692-4FA6-8693-3EC812E22250}
// *********************************************************************//
  _DefaultCustomerDataDisp = dispinterface
    ['{154AF93B-D692-4FA6-8693-3EC812E22250}']
    function CloseFile: Smallint; dispid 1610809386;
    function OpenFile: Smallint; dispid 1610809387;
    function Read: Smallint; dispid 1610809388;
    function Update: Smallint; dispid 1610809389;
    property ActualLength: Integer readonly dispid 1745027113;
    property AgeByDueDate: WordBool dispid 1745027112;
    property AgingDays[Index: Smallint]: Smallint dispid 1745027111;
    property AgingHeading[Index: Smallint]: WideString dispid 1745027110;
    property ARAccount: WideString dispid 1745027109;
    property AssignDepositTicketIDs: WordBool dispid 1745027108;
    property CashAccount: WideString dispid 1745027107;
    property ChargeFinanceCharges: WordBool dispid 1745027106;
    property COD: WordBool dispid 1745027105;
    property CreditLimit: Double dispid 1745027104;
    property CustomFieldEnabled[Index: Smallint]: WordBool dispid 1745027103;
    property CustomFieldLabel[Index: Smallint]: WideString dispid 1745027102;
    property DefaultPayMethod: WideString dispid 1745027101;
    property DiscountDays: Smallint dispid 1745027100;
    property DiscountGLAccount: WideString dispid 1745027099;
    property DiscountPercent: Double dispid 1745027098;
    property DueAtEndOfMonth: WordBool dispid 1745027097;
    property DueOnDayOfNextMonth: WordBool dispid 1745027096;
    property FCAnnualInterestRate: Double dispid 1745027095;
    property FCAppearsAs: WideString dispid 1745027094;
    property FCChargeInterest: WordBool dispid 1745027093;
    property FCDays: Smallint dispid 1745027092;
    property FCGLAccount: WideString dispid 1745027091;
    property FCInterestAbove: Double dispid 1745027090;
    property FCMinimum: Double dispid 1745027089;
    property FCOverdueLimit: Double dispid 1745027088;
    property GLSalesAccount: WideString dispid 1745027087;
    property NetDueDays: Smallint dispid 1745027086;
    property NextInvoiceNumber: WideString dispid 1745027085;
    property NextQuoteNumber: WideString dispid 1745027084;
    property NextSONumber: WideString dispid 1745027083;
    property NLabels: Smallint readonly dispid 1745027082;
    property PaymentMethod[Index: Smallint]: WideString dispid 1745027081;
    property Prepaid: WordBool dispid 1745027080;
    property TaxAccount: WideString dispid 1745027079;
    property Unused2[Index: Smallint]: Byte dispid 1745027078;
    property Unused3: Smallint dispid 1745027077;
    property Unused4: Byte dispid 1745027076;
    property Unused5[Index: Smallint]: Smallint dispid 1745027075;
    property Unused6[Index: Smallint]: Byte dispid 1745027074;
    property Unused10[Index: Smallint]: Byte dispid 1745027073;
    property Unused11[Index: Smallint]: Byte dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _Chart
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7FD6888B-863F-4726-99FF-F9FD67CB7956}
// *********************************************************************//
  _Chart = interface(IDispatch)
    ['{7FD6888B-863F-4726-99FF-F9FD67CB7956}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(Index: Integer): Smallint; safecall;
    function GetForAccountID(const AccountID: WideString): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AccountDescription: WideString; safecall;
    procedure Set_AccountDescription(var Param1: WideString); safecall;
    function Get_AccountDescription2: WideString; safecall;
    procedure Set_AccountDescription2(const Param1: WideString); safecall;
    function Get_AccountID: WideString; safecall;
    procedure Set_AccountID(const Param1: WideString); safecall;
    function Get_AccountType: Smallint; safecall;
    procedure Set_AccountType(Param1: Smallint); safecall;
    function Get_AccountTypeDescription: WideString; safecall;
    function Get_Activity(Index: Smallint): Double; safecall;
    procedure Set_Activity(Index: Smallint; Param2: Double); safecall;
    function Get_Budget(Index: Smallint): Double; safecall;
    procedure Set_Budget(Index: Smallint; Param2: Double); safecall;
    function Get_Credit(Index: Smallint): Double; safecall;
    procedure Set_Credit(Index: Smallint; Param2: Double); safecall;
    function Get_Debit(Index: Smallint): Double; safecall;
    procedure Set_Debit(Index: Smallint; Param2: Double); safecall;
    function Get_eCheckID: Smallint; safecall;
    procedure Set_eCheckID(Param1: Smallint); safecall;
    function Get_GL1099Index: Smallint; safecall;
    procedure Set_GL1099Index(Param1: Smallint); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_Inactive: WordBool; safecall;
    procedure Set_Inactive(Param1: WordBool); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_Internal1: WideString; safecall;
    procedure Set_Internal1(const Param1: WideString); safecall;
    function Get_LastDepositTicket: WideString; safecall;
    procedure Set_LastDepositTicket(const Param1: WideString); safecall;
    function Get_NextRef: WideString; safecall;
    procedure Set_NextRef(const Param1: WideString); safecall;
    function Get_ReceiptNum: WideString; safecall;
    procedure Set_ReceiptNum(const Param1: WideString); safecall;
    function Get_Revised(Index: Smallint): Double; safecall;
    procedure Set_Revised(Index: Smallint; Param2: Double); safecall;
    function Get_TaxCode: WideString; safecall;
    procedure Set_TaxCode(const Param1: WideString); safecall;
    function Get_Unknown(Index: Smallint): Byte; safecall;
    procedure Set_Unused6(Index: Smallint; Param2: Byte); safecall;
    property AccountDescription: WideString read Get_AccountDescription write Set_AccountDescription;
    property AccountDescription2: WideString read Get_AccountDescription2 write Set_AccountDescription2;
    property AccountID: WideString read Get_AccountID write Set_AccountID;
    property AccountType: Smallint read Get_AccountType write Set_AccountType;
    property AccountTypeDescription: WideString read Get_AccountTypeDescription;
    property Activity[Index: Smallint]: Double read Get_Activity write Set_Activity;
    property Budget[Index: Smallint]: Double read Get_Budget write Set_Budget;
    property Credit[Index: Smallint]: Double read Get_Credit write Set_Credit;
    property Debit[Index: Smallint]: Double read Get_Debit write Set_Debit;
    property eCheckID: Smallint read Get_eCheckID write Set_eCheckID;
    property GL1099Index: Smallint read Get_GL1099Index write Set_GL1099Index;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property Internal1: WideString read Get_Internal1 write Set_Internal1;
    property LastDepositTicket: WideString read Get_LastDepositTicket write Set_LastDepositTicket;
    property NextRef: WideString read Get_NextRef write Set_NextRef;
    property ReceiptNum: WideString read Get_ReceiptNum write Set_ReceiptNum;
    property Revised[Index: Smallint]: Double read Get_Revised write Set_Revised;
    property TaxCode: WideString read Get_TaxCode write Set_TaxCode;
    property Unknown[Index: Smallint]: Byte read Get_Unknown;
    property Unused6[Index: Smallint]: Byte write Set_Unused6;
  end;

// *********************************************************************//
// DispIntf:  _ChartDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7FD6888B-863F-4726-99FF-F9FD67CB7956}
// *********************************************************************//
  _ChartDisp = dispinterface
    ['{7FD6888B-863F-4726-99FF-F9FD67CB7956}']
    function CloseFile: Smallint; dispid 1610809366;
    function OpenFile: Smallint; dispid 1610809367;
    function Delete: Smallint; dispid 1610809368;
    function GetEqual(Index: Integer): Smallint; dispid 1610809369;
    function GetForAccountID(const AccountID: WideString): Smallint; dispid 1610809370;
    function Insert: Smallint; dispid 1610809371;
    function RecordCount: Integer; dispid 1610809373;
    function StepFirst: Smallint; dispid 1610809374;
    function StepLast: Smallint; dispid 1610809375;
    function StepNext: Smallint; dispid 1610809376;
    function StepPrevious: Smallint; dispid 1610809377;
    function Update: Smallint; dispid 1610809378;
    property AccountDescription: WideString dispid 1745027093;
    property AccountDescription2: WideString dispid 1745027092;
    property AccountID: WideString dispid 1745027091;
    property AccountType: Smallint dispid 1745027090;
    property AccountTypeDescription: WideString readonly dispid 1745027089;
    property Activity[Index: Smallint]: Double dispid 1745027088;
    property Budget[Index: Smallint]: Double dispid 1745027087;
    property Credit[Index: Smallint]: Double dispid 1745027086;
    property Debit[Index: Smallint]: Double dispid 1745027085;
    property eCheckID: Smallint dispid 1745027084;
    property GL1099Index: Smallint dispid 1745027083;
    property GUID: WideString dispid 1745027082;
    property Inactive: WordBool dispid 1745027081;
    property Index: Integer dispid 1745027080;
    property Internal1: WideString dispid 1745027079;
    property LastDepositTicket: WideString dispid 1745027078;
    property NextRef: WideString dispid 1745027077;
    property ReceiptNum: WideString dispid 1745027076;
    property Revised[Index: Smallint]: Double dispid 1745027075;
    property TaxCode: WideString dispid 1745027074;
    property Unknown[Index: Smallint]: Byte readonly dispid 1745027073;
    property Unused6[Index: Smallint]: Byte writeonly dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _Customer
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {34AFE43F-CBD3-4340-BEBB-E200DAB272AB}
// *********************************************************************//
  _Customer = interface(IDispatch)
    ['{34AFE43F-CBD3-4340-BEBB-E200DAB272AB}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function FindByPercent: Integer; safecall;
    function GetByPercent(Percent: Double): Smallint; safecall;
    function GetEqual(const CustomerID: WideString): Smallint; safecall;
    function GetFirst: Smallint; safecall;
    function GetForIndex(Index: Integer): Smallint; safecall;
    function GetGreaterThan(const CustomerID: WideString): Smallint; safecall;
    function GetGreaterThanOrEqual(const CustomerID: WideString): Smallint; safecall;
    function GetLast: Smallint; safecall;
    function GetLessThan(const CustomerID: WideString): Smallint; safecall;
    function GetLessThanOrEqual(const CustomerID: WideString): Smallint; safecall;
    function GetNext: Smallint; safecall;
    function GetPrevious: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_BillPresentment: WordBool; safecall;
    procedure Set_BillPresentment(Param1: WordBool); safecall;
    function Get_BillToAddress1: WideString; safecall;
    procedure Set_BillToAddress1(const Param1: WideString); safecall;
    function Get_BillToAddress2: WideString; safecall;
    procedure Set_BillToAddress2(const Param1: WideString); safecall;
    function Get_BillToCity: WideString; safecall;
    procedure Set_BillToCity(const Param1: WideString); safecall;
    function Get_BillToCountry: WideString; safecall;
    procedure Set_BillToCountry(const Param1: WideString); safecall;
    function Get_BillToName: WideString; safecall;
    procedure Set_BillToName(const Param1: WideString); safecall;
    function Get_BillToSalesTaxCode: WideString; safecall;
    procedure Set_BillToSalesTaxCode(const Param1: WideString); safecall;
    function Get_BillToState: WideString; safecall;
    procedure Set_BillToState(const Param1: WideString); safecall;
    function Get_BillToZipcode: WideString; safecall;
    procedure Set_BillToZipcode(const Param1: WideString); safecall;
    function Get_CardholderAddress1: WideString; safecall;
    procedure Set_CardholderAddress1(const Param1: WideString); safecall;
    function Get_CardholderAddress2: WideString; safecall;
    procedure Set_CardholderAddress2(const Param1: WideString); safecall;
    function Get_CardholderCity: WideString; safecall;
    procedure Set_CardholderCity(const Param1: WideString); safecall;
    function Get_CardholderCountry: WideString; safecall;
    procedure Set_CardholderCountry(const Param1: WideString); safecall;
    function Get_CardholderName: WideString; safecall;
    procedure Set_CardholderName(const Param1: WideString); safecall;
    function Get_CardholderState: WideString; safecall;
    procedure Set_CardholderState(const Param1: WideString); safecall;
    function Get_CardholderZipCode: WideString; safecall;
    procedure Set_CardholderZipCode(const Param1: WideString); safecall;
    function Get_CCExpirationDate: OleVariant; safecall;
    procedure Set_CCExpirationDate(Param1: OleVariant); safecall;
    function Get_CCNumber: WideString; safecall;
    procedure Set_CCNumber(const Param1: WideString); safecall;
    function Get_ChargeFinanceCharges: WordBool; safecall;
    procedure Set_ChargeFinanceCharges(Param1: WordBool); safecall;
    function Get_CODTerms: WordBool; safecall;
    procedure Set_CODTerms(Param1: WordBool); safecall;
    function Get_Contact: WideString; safecall;
    procedure Set_Contact(const Param1: WideString); safecall;
    function Get_CreditLimit: Double; safecall;
    procedure Set_CreditLimit(Param1: Double); safecall;
    function Get_CreditStatus: Integer; safecall;
    procedure Set_CreditStatus(Param1: Integer); safecall;
    function Get_CurrentBalance: Double; safecall;
    procedure Set_CurrentBalance(Param1: Double); safecall;
    function Get_CustomerID: WideString; safecall;
    procedure Set_CustomerID(const Param1: WideString); safecall;
    function Get_CustomerSinceDate: OleVariant; safecall;
    procedure Set_CustomerSinceDate(Param1: OleVariant); safecall;
    function Get_CustomerType: WideString; safecall;
    procedure Set_CustomerType(const Param1: WideString); safecall;
    function Get_CustomField(Index: Smallint): WideString; safecall;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString); safecall;
    function Get_DiscountDays: Smallint; safecall;
    procedure Set_DiscountDays(Param1: Smallint); safecall;
    function Get_DiscountPercent: Double; safecall;
    procedure Set_DiscountPercent(Param1: Double); safecall;
    function Get_DueAtEndOfMonth: WordBool; safecall;
    procedure Set_DueAtEndOfMonth(Param1: WordBool); safecall;
    function Get_DueOnDayOfNextMonth: WordBool; safecall;
    procedure Set_DueOnDayOfNextMonth(Param1: WordBool); safecall;
    function Get_Email: WideString; safecall;
    procedure Set_Email(const Param1: WideString); safecall;
    function Get_Fax: WideString; safecall;
    procedure Set_Fax(const Param1: WideString); safecall;
    function Get_FormDeliveryFlags: Integer; safecall;
    procedure Set_FormDeliveryFlags(Param1: Integer); safecall;
    function Get_GLSalesAccount: WideString; safecall;
    procedure Set_GLSalesAccount(const Param1: WideString); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_Inactive: WordBool; safecall;
    procedure Set_Inactive(Param1: WordBool); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_LastInvoiceAmount: Double; safecall;
    procedure Set_LastInvoiceAmount(Param1: Double); safecall;
    function Get_LastInvoiceDate: OleVariant; safecall;
    procedure Set_LastInvoiceDate(Param1: OleVariant); safecall;
    function Get_LastPaymentAmount: Double; safecall;
    procedure Set_LastPaymentAmount(Param1: Double); safecall;
    function Get_LastPaymentDate: OleVariant; safecall;
    procedure Set_LastPaymentDate(Param1: OleVariant); safecall;
    function Get_LastStatementDate: OleVariant; safecall;
    procedure Set_LastStatementDate(Param1: OleVariant); safecall;
    function Get_LastUpdateCounter: Integer; safecall;
    procedure Set_LastUpdateCounter(Param1: Integer); safecall;
    function Get_NetDueDays: Smallint; safecall;
    procedure Set_NetDueDays(Param1: Smallint); safecall;
    function Get_OpenPONumber: WideString; safecall;
    procedure Set_OpenPONumber(const Param1: WideString); safecall;
    function Get_OurAccount: WideString; safecall;
    procedure Set_OurAccount(const Param1: WideString); safecall;
    function Get_PaymentAccount: WideString; safecall;
    procedure Set_PaymentAccount(const Param1: WideString); safecall;
    function Get_PaymentDefaultData: Integer; safecall;
    procedure Set_PaymentDefaultData(Param1: Integer); safecall;
    function Get_PaymentMethod: WideString; safecall;
    procedure Set_PaymentMethod(const Param1: WideString); safecall;
    function Get_PrepaidTerms: WordBool; safecall;
    procedure Set_PrepaidTerms(Param1: WordBool); safecall;
    function Get_PricingLevel: Byte; safecall;
    procedure Set_PricingLevel(Param1: Byte); safecall;
    function Get_Prospect: WordBool; safecall;
    procedure Set_Prospect(Param1: WordBool); safecall;
    function Get_Receipts(Index: Smallint): Double; safecall;
    procedure Set_Receipts(Index: Smallint; Param2: Double); safecall;
    function Get_ResaleNumber: WideString; safecall;
    procedure Set_ResaleNumber(const Param1: WideString); safecall;
    function Get_Sales(Index: Smallint): Double; safecall;
    procedure Set_Sales(Index: Smallint; Param2: Double); safecall;
    function Get_SalesRepID: WideString; safecall;
    procedure Set_SalesRepID(const Param1: WideString); safecall;
    function Get_ShipToAddress1(Index: Smallint): WideString; safecall;
    procedure Set_ShipToAddress1(Index: Smallint; const Param2: WideString); safecall;
    function Get_ShipToAddress2(Index: Smallint): WideString; safecall;
    procedure Set_ShipToAddress2(Index: Smallint; const Param2: WideString); safecall;
    function Get_ShipToCity(Index: Smallint): WideString; safecall;
    procedure Set_ShipToCity(Index: Smallint; const Param2: WideString); safecall;
    function Get_ShipToCountry(Index: Smallint): WideString; safecall;
    procedure Set_ShipToCountry(Index: Smallint; const Param2: WideString); safecall;
    function Get_ShipToName(Index: Smallint): WideString; safecall;
    procedure Set_ShipToName(Index: Smallint; const Param2: WideString); safecall;
    function Get_ShipToSalesTaxCode(Index: Smallint): WideString; safecall;
    procedure Set_ShipToSalesTaxCode(Index: Smallint; const Param2: WideString); safecall;
    function Get_ShipToState(Index: Smallint): WideString; safecall;
    procedure Set_ShipToState(Index: Smallint; const Param2: WideString); safecall;
    function Get_ShipToZipCode(Index: Smallint): WideString; safecall;
    procedure Set_ShipToZipCode(Index: Smallint; const Param2: WideString); safecall;
    function Get_ShipVia: Byte; safecall;
    procedure Set_ShipVia(Param1: Byte); safecall;
    function Get_Telephone1: WideString; safecall;
    procedure Set_Telephone1(const Param1: WideString); safecall;
    function Get_Telephone2: WideString; safecall;
    procedure Set_Telephone2(const Param1: WideString); safecall;
    function Get_Unknown1(Index: Smallint): Byte; safecall;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused1: Byte; safecall;
    procedure Set_Unused1(Param1: Byte); safecall;
    function Get_Unknown2(Index: Smallint): Byte; safecall;
    procedure Set_Unknown2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown3: Byte; safecall;
    procedure Set_Unknown3(Param1: Byte); safecall;
    function Get_Unknown4: Byte; safecall;
    procedure Set_Unknown4(Param1: Byte); safecall;
    function Get_Unused5: Smallint; safecall;
    procedure Set_Unused5(Param1: Smallint); safecall;
    function Get_UseReceiptWindowSettingsNot: Integer; safecall;
    procedure Set_UseReceiptWindowSettingsNot(Param1: Integer); safecall;
    function Get_UseStandardTerms: WordBool; safecall;
    procedure Set_UseStandardTerms(Param1: WordBool); safecall;
    function Get_Web: WideString; safecall;
    procedure Set_Web(const Param1: WideString); safecall;
    property BillPresentment: WordBool read Get_BillPresentment write Set_BillPresentment;
    property BillToAddress1: WideString read Get_BillToAddress1 write Set_BillToAddress1;
    property BillToAddress2: WideString read Get_BillToAddress2 write Set_BillToAddress2;
    property BillToCity: WideString read Get_BillToCity write Set_BillToCity;
    property BillToCountry: WideString read Get_BillToCountry write Set_BillToCountry;
    property BillToName: WideString read Get_BillToName write Set_BillToName;
    property BillToSalesTaxCode: WideString read Get_BillToSalesTaxCode write Set_BillToSalesTaxCode;
    property BillToState: WideString read Get_BillToState write Set_BillToState;
    property BillToZipcode: WideString read Get_BillToZipcode write Set_BillToZipcode;
    property CardholderAddress1: WideString read Get_CardholderAddress1 write Set_CardholderAddress1;
    property CardholderAddress2: WideString read Get_CardholderAddress2 write Set_CardholderAddress2;
    property CardholderCity: WideString read Get_CardholderCity write Set_CardholderCity;
    property CardholderCountry: WideString read Get_CardholderCountry write Set_CardholderCountry;
    property CardholderName: WideString read Get_CardholderName write Set_CardholderName;
    property CardholderState: WideString read Get_CardholderState write Set_CardholderState;
    property CardholderZipCode: WideString read Get_CardholderZipCode write Set_CardholderZipCode;
    property CCExpirationDate: OleVariant read Get_CCExpirationDate write Set_CCExpirationDate;
    property CCNumber: WideString read Get_CCNumber write Set_CCNumber;
    property ChargeFinanceCharges: WordBool read Get_ChargeFinanceCharges write Set_ChargeFinanceCharges;
    property CODTerms: WordBool read Get_CODTerms write Set_CODTerms;
    property Contact: WideString read Get_Contact write Set_Contact;
    property CreditLimit: Double read Get_CreditLimit write Set_CreditLimit;
    property CreditStatus: Integer read Get_CreditStatus write Set_CreditStatus;
    property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
    property CustomerID: WideString read Get_CustomerID write Set_CustomerID;
    property CustomerSinceDate: OleVariant read Get_CustomerSinceDate write Set_CustomerSinceDate;
    property CustomerType: WideString read Get_CustomerType write Set_CustomerType;
    property CustomField[Index: Smallint]: WideString read Get_CustomField write Set_CustomField;
    property DiscountDays: Smallint read Get_DiscountDays write Set_DiscountDays;
    property DiscountPercent: Double read Get_DiscountPercent write Set_DiscountPercent;
    property DueAtEndOfMonth: WordBool read Get_DueAtEndOfMonth write Set_DueAtEndOfMonth;
    property DueOnDayOfNextMonth: WordBool read Get_DueOnDayOfNextMonth write Set_DueOnDayOfNextMonth;
    property Email: WideString read Get_Email write Set_Email;
    property Fax: WideString read Get_Fax write Set_Fax;
    property FormDeliveryFlags: Integer read Get_FormDeliveryFlags write Set_FormDeliveryFlags;
    property GLSalesAccount: WideString read Get_GLSalesAccount write Set_GLSalesAccount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property LastInvoiceAmount: Double read Get_LastInvoiceAmount write Set_LastInvoiceAmount;
    property LastInvoiceDate: OleVariant read Get_LastInvoiceDate write Set_LastInvoiceDate;
    property LastPaymentAmount: Double read Get_LastPaymentAmount write Set_LastPaymentAmount;
    property LastPaymentDate: OleVariant read Get_LastPaymentDate write Set_LastPaymentDate;
    property LastStatementDate: OleVariant read Get_LastStatementDate write Set_LastStatementDate;
    property LastUpdateCounter: Integer read Get_LastUpdateCounter write Set_LastUpdateCounter;
    property NetDueDays: Smallint read Get_NetDueDays write Set_NetDueDays;
    property OpenPONumber: WideString read Get_OpenPONumber write Set_OpenPONumber;
    property OurAccount: WideString read Get_OurAccount write Set_OurAccount;
    property PaymentAccount: WideString read Get_PaymentAccount write Set_PaymentAccount;
    property PaymentDefaultData: Integer read Get_PaymentDefaultData write Set_PaymentDefaultData;
    property PaymentMethod: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property PrepaidTerms: WordBool read Get_PrepaidTerms write Set_PrepaidTerms;
    property PricingLevel: Byte read Get_PricingLevel write Set_PricingLevel;
    property Prospect: WordBool read Get_Prospect write Set_Prospect;
    property Receipts[Index: Smallint]: Double read Get_Receipts write Set_Receipts;
    property ResaleNumber: WideString read Get_ResaleNumber write Set_ResaleNumber;
    property Sales[Index: Smallint]: Double read Get_Sales write Set_Sales;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property ShipToAddress1[Index: Smallint]: WideString read Get_ShipToAddress1 write Set_ShipToAddress1;
    property ShipToAddress2[Index: Smallint]: WideString read Get_ShipToAddress2 write Set_ShipToAddress2;
    property ShipToCity[Index: Smallint]: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry[Index: Smallint]: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName[Index: Smallint]: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToSalesTaxCode[Index: Smallint]: WideString read Get_ShipToSalesTaxCode write Set_ShipToSalesTaxCode;
    property ShipToState[Index: Smallint]: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode[Index: Smallint]: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: Byte read Get_ShipVia write Set_ShipVia;
    property Telephone1: WideString read Get_Telephone1 write Set_Telephone1;
    property Telephone2: WideString read Get_Telephone2 write Set_Telephone2;
    property Unknown1[Index: Smallint]: Byte read Get_Unknown1 write Set_Unknown1;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unknown2[Index: Smallint]: Byte read Get_Unknown2 write Set_Unknown2;
    property Unknown3: Byte read Get_Unknown3 write Set_Unknown3;
    property Unknown4: Byte read Get_Unknown4 write Set_Unknown4;
    property Unused5: Smallint read Get_Unused5 write Set_Unused5;
    property UseReceiptWindowSettingsNot: Integer read Get_UseReceiptWindowSettingsNot write Set_UseReceiptWindowSettingsNot;
    property UseStandardTerms: WordBool read Get_UseStandardTerms write Set_UseStandardTerms;
    property Web: WideString read Get_Web write Set_Web;
  end;

// *********************************************************************//
// DispIntf:  _CustomerDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {34AFE43F-CBD3-4340-BEBB-E200DAB272AB}
// *********************************************************************//
  _CustomerDisp = dispinterface
    ['{34AFE43F-CBD3-4340-BEBB-E200DAB272AB}']
    function CloseFile: Smallint; dispid 1610809422;
    function OpenFile: Smallint; dispid 1610809423;
    function Delete: Smallint; dispid 1610809424;
    function FindByPercent: Integer; dispid 1610809425;
    function GetByPercent(Percent: Double): Smallint; dispid 1610809426;
    function GetEqual(const CustomerID: WideString): Smallint; dispid 1610809427;
    function GetFirst: Smallint; dispid 1610809428;
    function GetForIndex(Index: Integer): Smallint; dispid 1610809429;
    function GetGreaterThan(const CustomerID: WideString): Smallint; dispid 1610809430;
    function GetGreaterThanOrEqual(const CustomerID: WideString): Smallint; dispid 1610809431;
    function GetLast: Smallint; dispid 1610809432;
    function GetLessThan(const CustomerID: WideString): Smallint; dispid 1610809433;
    function GetLessThanOrEqual(const CustomerID: WideString): Smallint; dispid 1610809434;
    function GetNext: Smallint; dispid 1610809435;
    function GetPrevious: Smallint; dispid 1610809436;
    function Insert: Smallint; dispid 1610809437;
    function RecordCount: Integer; dispid 1610809439;
    function StepFirst: Smallint; dispid 1610809440;
    function StepLast: Smallint; dispid 1610809441;
    function StepNext: Smallint; dispid 1610809442;
    function StepPrevious: Smallint; dispid 1610809443;
    function Update: Smallint; dispid 1610809444;
    property BillPresentment: WordBool dispid 1745027149;
    property BillToAddress1: WideString dispid 1745027148;
    property BillToAddress2: WideString dispid 1745027147;
    property BillToCity: WideString dispid 1745027146;
    property BillToCountry: WideString dispid 1745027145;
    property BillToName: WideString dispid 1745027144;
    property BillToSalesTaxCode: WideString dispid 1745027143;
    property BillToState: WideString dispid 1745027142;
    property BillToZipcode: WideString dispid 1745027141;
    property CardholderAddress1: WideString dispid 1745027140;
    property CardholderAddress2: WideString dispid 1745027139;
    property CardholderCity: WideString dispid 1745027138;
    property CardholderCountry: WideString dispid 1745027137;
    property CardholderName: WideString dispid 1745027136;
    property CardholderState: WideString dispid 1745027135;
    property CardholderZipCode: WideString dispid 1745027134;
    property CCExpirationDate: OleVariant dispid 1745027133;
    property CCNumber: WideString dispid 1745027132;
    property ChargeFinanceCharges: WordBool dispid 1745027131;
    property CODTerms: WordBool dispid 1745027130;
    property Contact: WideString dispid 1745027129;
    property CreditLimit: Double dispid 1745027128;
    property CreditStatus: Integer dispid 1745027127;
    property CurrentBalance: Double dispid 1745027126;
    property CustomerID: WideString dispid 1745027125;
    property CustomerSinceDate: OleVariant dispid 1745027124;
    property CustomerType: WideString dispid 1745027123;
    property CustomField[Index: Smallint]: WideString dispid 1745027122;
    property DiscountDays: Smallint dispid 1745027121;
    property DiscountPercent: Double dispid 1745027120;
    property DueAtEndOfMonth: WordBool dispid 1745027119;
    property DueOnDayOfNextMonth: WordBool dispid 1745027118;
    property Email: WideString dispid 1745027117;
    property Fax: WideString dispid 1745027116;
    property FormDeliveryFlags: Integer dispid 1745027115;
    property GLSalesAccount: WideString dispid 1745027114;
    property GUID: WideString dispid 1745027113;
    property Inactive: WordBool dispid 1745027112;
    property Index: Integer dispid 1745027111;
    property LastInvoiceAmount: Double dispid 1745027110;
    property LastInvoiceDate: OleVariant dispid 1745027109;
    property LastPaymentAmount: Double dispid 1745027108;
    property LastPaymentDate: OleVariant dispid 1745027107;
    property LastStatementDate: OleVariant dispid 1745027106;
    property LastUpdateCounter: Integer dispid 1745027105;
    property NetDueDays: Smallint dispid 1745027104;
    property OpenPONumber: WideString dispid 1745027103;
    property OurAccount: WideString dispid 1745027102;
    property PaymentAccount: WideString dispid 1745027101;
    property PaymentDefaultData: Integer dispid 1745027100;
    property PaymentMethod: WideString dispid 1745027099;
    property PrepaidTerms: WordBool dispid 1745027098;
    property PricingLevel: Byte dispid 1745027097;
    property Prospect: WordBool dispid 1745027096;
    property Receipts[Index: Smallint]: Double dispid 1745027095;
    property ResaleNumber: WideString dispid 1745027094;
    property Sales[Index: Smallint]: Double dispid 1745027093;
    property SalesRepID: WideString dispid 1745027092;
    property ShipToAddress1[Index: Smallint]: WideString dispid 1745027091;
    property ShipToAddress2[Index: Smallint]: WideString dispid 1745027090;
    property ShipToCity[Index: Smallint]: WideString dispid 1745027089;
    property ShipToCountry[Index: Smallint]: WideString dispid 1745027088;
    property ShipToName[Index: Smallint]: WideString dispid 1745027087;
    property ShipToSalesTaxCode[Index: Smallint]: WideString dispid 1745027086;
    property ShipToState[Index: Smallint]: WideString dispid 1745027085;
    property ShipToZipCode[Index: Smallint]: WideString dispid 1745027084;
    property ShipVia: Byte dispid 1745027083;
    property Telephone1: WideString dispid 1745027082;
    property Telephone2: WideString dispid 1745027081;
    property Unknown1[Index: Smallint]: Byte dispid 1745027080;
    property Unused1: Byte dispid 1745027079;
    property Unknown2[Index: Smallint]: Byte dispid 1745027078;
    property Unknown3: Byte dispid 1745027077;
    property Unknown4: Byte dispid 1745027076;
    property Unused5: Smallint dispid 1745027075;
    property UseReceiptWindowSettingsNot: Integer dispid 1745027074;
    property UseStandardTerms: WordBool dispid 1745027073;
    property Web: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _Alarm
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2E8F56F1-7459-4E81-8D84-9A91F3AA5206}
// *********************************************************************//
  _Alarm = interface(IDispatch)
    ['{2E8F56F1-7459-4E81-8D84-9A91F3AA5206}']
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetCustomer(Index: Integer): Smallint; safecall;
    function GetFirst: Smallint; safecall;
    function GetItem(Index: Integer): Smallint; safecall;
    function GetLast: Smallint; safecall;
    function GetNext: Smallint; safecall;
    function GetPrevious: Smallint; safecall;
    function GetVendor(Index: Integer): Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AlarmIndex: Integer; safecall;
    procedure Set_AlarmIndex(Param1: Integer); safecall;
    function Get_AlertIndex: Smallint; safecall;
    procedure Set_AlertIndex(Param1: Smallint); safecall;
    function Get_ApplyTo: Smallint; safecall;
    procedure Set_ApplyTo(Param1: Smallint); safecall;
    function Get_ApplyToDescription(Index: Smallint): WideString; safecall;
    function Get_FromDate: OleVariant; safecall;
    procedure Set_FromDate(Param1: OleVariant); safecall;
    function Get_ID: WideString; safecall;
    procedure Set_ID(const Param1: WideString); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_ToDate: OleVariant; safecall;
    procedure Set_ToDate(Param1: OleVariant); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_TrxNumberL: Integer; safecall;
    procedure Set_TrxNumberL(Param1: Integer); safecall;
    function Get_Unknown: Integer; safecall;
    procedure Set_Unknown(Param1: Integer); safecall;
    property AlarmIndex: Integer read Get_AlarmIndex write Set_AlarmIndex;
    property AlertIndex: Smallint read Get_AlertIndex write Set_AlertIndex;
    property ApplyTo: Smallint read Get_ApplyTo write Set_ApplyTo;
    property ApplyToDescription[Index: Smallint]: WideString read Get_ApplyToDescription;
    property FromDate: OleVariant read Get_FromDate write Set_FromDate;
    property ID: WideString read Get_ID write Set_ID;
    property Index: Integer read Get_Index write Set_Index;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property Period: Smallint read Get_Period write Set_Period;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property ToDate: OleVariant read Get_ToDate write Set_ToDate;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unknown: Integer read Get_Unknown write Set_Unknown;
  end;

// *********************************************************************//
// DispIntf:  _AlarmDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2E8F56F1-7459-4E81-8D84-9A91F3AA5206}
// *********************************************************************//
  _AlarmDisp = dispinterface
    ['{2E8F56F1-7459-4E81-8D84-9A91F3AA5206}']
    function CloseFile: Smallint; dispid 1610809360;
    function Delete: Smallint; dispid 1610809361;
    function GetCustomer(Index: Integer): Smallint; dispid 1610809362;
    function GetFirst: Smallint; dispid 1610809363;
    function GetItem(Index: Integer): Smallint; dispid 1610809364;
    function GetLast: Smallint; dispid 1610809366;
    function GetNext: Smallint; dispid 1610809367;
    function GetPrevious: Smallint; dispid 1610809368;
    function GetVendor(Index: Integer): Smallint; dispid 1610809369;
    function Insert: Smallint; dispid 1610809370;
    function OpenFile: Smallint; dispid 1610809372;
    function RecordCount: Integer; dispid 1610809373;
    function StepFirst: Smallint; dispid 1610809374;
    function StepLast: Smallint; dispid 1610809375;
    function StepNext: Smallint; dispid 1610809376;
    function StepPrevious: Smallint; dispid 1610809377;
    function Update: Smallint; dispid 1610809378;
    property AlarmIndex: Integer dispid 1745027087;
    property AlertIndex: Smallint dispid 1745027086;
    property ApplyTo: Smallint dispid 1745027085;
    property ApplyToDescription[Index: Smallint]: WideString readonly dispid 1745027084;
    property FromDate: OleVariant dispid 1745027083;
    property ID: WideString dispid 1745027082;
    property Index: Integer dispid 1745027081;
    property JournalID: Smallint dispid 1745027080;
    property Key: Double dispid 1745027079;
    property Period: Smallint dispid 1745027078;
    property Subindex1: Byte dispid 1745027077;
    property Subindex2: Byte dispid 1745027076;
    property ToDate: OleVariant dispid 1745027075;
    property TrxNumber: Smallint dispid 1745027074;
    property TrxNumberL: Integer dispid 1745027073;
    property Unknown: Integer dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _SalesTaxCode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AC42A55B-321A-4ECE-941E-AB12D47B3662}
// *********************************************************************//
  _SalesTaxCode = interface(IDispatch)
    ['{AC42A55B-321A-4ECE-941E-AB12D47B3662}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(const ID: WideString): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Authority(Index: Smallint): WideString; safecall;
    procedure Set_Authority(Index: Smallint; const Param2: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_SalesTaxCode: WideString; safecall;
    procedure Set_SalesTaxCode(const Param1: WideString); safecall;
    function Get_TaxFreight: WordBool; safecall;
    procedure Set_TaxFreight(Param1: WordBool); safecall;
    property Authority[Index: Smallint]: WideString read Get_Authority write Set_Authority;
    property Description: WideString read Get_Description write Set_Description;
    property GUID: WideString read Get_GUID write Set_GUID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property TaxFreight: WordBool read Get_TaxFreight write Set_TaxFreight;
  end;

// *********************************************************************//
// DispIntf:  _SalesTaxCodeDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AC42A55B-321A-4ECE-941E-AB12D47B3662}
// *********************************************************************//
  _SalesTaxCodeDisp = dispinterface
    ['{AC42A55B-321A-4ECE-941E-AB12D47B3662}']
    function CloseFile: Smallint; dispid 1610809349;
    function OpenFile: Smallint; dispid 1610809350;
    function Delete: Smallint; dispid 1610809351;
    function GetEqual(const ID: WideString): Smallint; dispid 1610809352;
    function Insert: Smallint; dispid 1610809353;
    function RecordCount: Integer; dispid 1610809355;
    function StepFirst: Smallint; dispid 1610809356;
    function StepLast: Smallint; dispid 1610809357;
    function StepNext: Smallint; dispid 1610809358;
    function StepPrevious: Smallint; dispid 1610809359;
    function Update: Smallint; dispid 1610809360;
    property Authority[Index: Smallint]: WideString dispid 1745027076;
    property Description: WideString dispid 1745027075;
    property GUID: WideString dispid 1745027074;
    property SalesTaxCode: WideString dispid 1745027073;
    property TaxFreight: WordBool dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _Employee
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {381C298F-0686-46B2-9188-29F2275757AE}
// *********************************************************************//
  _Employee = interface(IDispatch)
    ['{381C298F-0686-46B2-9188-29F2275757AE}']
    function CacheCharts(Flag: WordBool): Smallint; safecall;
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(const EmployeeID: WideString): Smallint; safecall;
    function GetForIndex(Index: Integer): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AcctDataGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_AcctDataGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_AcctDataUseStandard(Index: Smallint): WordBool; safecall;
    procedure Set_AcctDataUseStandard(Index: Smallint; Param2: WordBool); safecall;
    function Get_AdditionalFederalWithholding: Double; safecall;
    procedure Set_AdditionalFederalWithholding(Param1: Double); safecall;
    function Get_AdditionalLocalWithholding: Double; safecall;
    procedure Set_AdditionalLocalWithholding(Param1: Double); safecall;
    function Get_AdditionalStateWithholding: Double; safecall;
    procedure Set_AdditionalStateWithholding(Param1: Double); safecall;
    function Get_Address1: WideString; safecall;
    procedure Set_Address1(const Param1: WideString); safecall;
    function Get_Address2: WideString; safecall;
    procedure Set_Address2(const Param1: WideString); safecall;
    function Get_City: WideString; safecall;
    procedure Set_City(const Param1: WideString); safecall;
    function Get_Country: WideString; safecall;
    procedure Set_Country(const Param1: WideString); safecall;
    function Get_CustomField(Index: Smallint): WideString; safecall;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString); safecall;
    function Get_DateHired: OleVariant; safecall;
    procedure Set_DateHired(Param1: OleVariant); safecall;
    function Get_DateLastRaise: OleVariant; safecall;
    procedure Set_DateLastRaise(Param1: OleVariant); safecall;
    function Get_DateTerminated: OleVariant; safecall;
    procedure Set_DateTerminated(Param1: OleVariant); safecall;
    function Get_Deferred: WordBool; safecall;
    procedure Set_Deferred(Param1: WordBool); safecall;
    function Get_EEAdjust(Index1: Smallint; Index2: Smallint): Byte; safecall;
    procedure Set_EEAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte); safecall;
    function Get_EEAmount(Index: Smallint): Double; safecall;
    procedure Set_EEAmount(Index: Smallint; Param2: Double); safecall;
    function Get_EECalcName(Index: Smallint): WideString; safecall;
    procedure Set_EECalcName(Index: Smallint; const Param2: WideString); safecall;
    function Get_EECalcOn(Index: Smallint): WordBool; safecall;
    procedure Set_EECalcOn(Index: Smallint; Param2: WordBool); safecall;
    function Get_EEGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_EEGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_EEUnused(Index1: Smallint; Index2: Smallint): Byte; safecall;
    procedure Set_EEUnused(Index1: Smallint; Index2: Smallint; Param3: Byte); safecall;
    function Get_EEUseCustom(Index: Smallint): WordBool; safecall;
    procedure Set_EEUseCustom(Index: Smallint; Param2: WordBool); safecall;
    function Get_Email: WideString; safecall;
    procedure Set_Email(const Param1: WideString); safecall;
    function Get_ERAdjust(Index1: Smallint; Index2: Smallint): Byte; safecall;
    procedure Set_ERAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte); safecall;
    function Get_ERCalcName(Index: Smallint): WideString; safecall;
    procedure Set_ERCalcName(Index: Smallint; const Param2: WideString); safecall;
    function Get_ERCalcOn(Index: Smallint): WordBool; safecall;
    procedure Set_ERCalcOn(Index: Smallint; Param2: WordBool); safecall;
    function Get_ERExpenseAccount(Index: Smallint): WideString; safecall;
    procedure Set_ERExpenseAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_ERLiabilityAccount(Index: Smallint): WideString; safecall;
    procedure Set_ERLiabilityAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_ERUseCustom(Index: Smallint): WordBool; safecall;
    procedure Set_ERUseCustom(Index: Smallint; Param2: WordBool); safecall;
    function Get_IsEmployee: WordBool; safecall;
    procedure Set_IsEmployee(Param1: WordBool); safecall;
    function Get_EmployeeID: WideString; safecall;
    procedure Set_EmployeeID(const Param1: WideString); safecall;
    function Get_EmployeeFirstName: WideString; safecall;
    procedure Set_EmployeeFirstName(const Param1: WideString); safecall;
    function Get_EmployeeLastName: WideString; safecall;
    procedure Set_EmployeeLastName(const Param1: WideString); safecall;
    function Get_EmployeeMiddleInit: WideString; safecall;
    procedure Set_EmployeeMiddleInit(const Param1: WideString); safecall;
    function Get_EmployeeName: WideString; safecall;
    procedure Set_EmployeeName(const Param1: WideString); safecall;
    function Get_EmployeeType: WideString; safecall;
    procedure Set_EmployeeType(const Param1: WideString); safecall;
    function Get_eTimeBadgeNum: WideString; safecall;
    procedure Set_eTimeBadgeNum(const Param1: WideString); safecall;
    function Get_eTimeDept: WideString; safecall;
    procedure Set_eTimeDept(const Param1: WideString); safecall;
    function Get_eTimeEmpID: WideString; safecall;
    procedure Set_eTimeEmpID(const Param1: WideString); safecall;
    function Get_eTimeHomeTimeClock: WideString; safecall;
    procedure Set_eTimeHomeTimeClock(const Param1: WideString); safecall;
    function Get_eTimePayClass: WideString; safecall;
    procedure Set_eTimePayClass(const Param1: WideString); safecall;
    function Get_eTimeProfile: WideString; safecall;
    procedure Set_eTimeProfile(const Param1: WideString); safecall;
    function Get_Extra401k: Double; safecall;
    procedure Set_Extra401k(Param1: Double); safecall;
    function Get_ExtraSpecial1: Double; safecall;
    procedure Set_ExtraSpecial1(Param1: Double); safecall;
    function Get_ExtraSpecial2: Double; safecall;
    procedure Set_ExtraSpecial2(Param1: Double); safecall;
    function Get_FederalAllowances: Smallint; safecall;
    procedure Set_FederalAllowances(Param1: Smallint); safecall;
    function Get_FederalFilingStatus: Smallint; safecall;
    procedure Set_FederalFilingStatus(Param1: Smallint); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_HourlyBillingRate: Double; safecall;
    procedure Set_HourlyBillingRate(Param1: Double); safecall;
    function Get_HoursPerPayPeriod: Double; safecall;
    procedure Set_HoursPerPayPeriod(Param1: Double); safecall;
    function Get_Inactive: WordBool; safecall;
    procedure Set_Inactive(Param1: WordBool); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_LocalAllowances: Smallint; safecall;
    procedure Set_LocalAllowances(Param1: Smallint); safecall;
    function Get_LocalFilingStatus: Smallint; safecall;
    procedure Set_LocalFilingStatus(Param1: Smallint); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Param1: WideString); safecall;
    function Get_PayFrequency: Byte; safecall;
    procedure Set_PayFrequency(Param1: Byte); safecall;
    function Get_PayMethod: Smallint; safecall;
    procedure Set_PayMethod(Param1: Smallint); safecall;
    function Get_PayRateAmount(Index: Smallint): Double; safecall;
    procedure Set_PayRateAmount(Index: Smallint; Param2: Double); safecall;
    function Get_PayrollEE(Quarter: Smallint; Index: Smallint): Double; safecall;
    procedure Set_PayrollEE(Quarter: Smallint; Index: Smallint; Param3: Double); safecall;
    function Get_PayrollER(Quarter: Smallint; Index: Smallint): Double; safecall;
    procedure Set_PayrollER(Quarter: Smallint; Index: Smallint; Param3: Double); safecall;
    function Get_PayrollHoursLevel(Quarter: Smallint; Index: Smallint): Double; safecall;
    procedure Set_PayrollHoursLevel(Quarter: Smallint; Index: Smallint; Param3: Double); safecall;
    function Get_PayrollPayLevel(Quarter: Smallint; Index: Smallint): Double; safecall;
    procedure Set_PayrollPayLevel(Quarter: Smallint; Index: Smallint; Param3: Double); safecall;
    function Get_PayrollUnused(Quarter: Smallint): Double; safecall;
    procedure Set_PayrollUnused(Quarter: Smallint; Param2: Double); safecall;
    function Get_PayrollWeeks(Quarter: Smallint): Smallint; safecall;
    procedure Set_PayrollWeeks(Quarter: Smallint; Param2: Smallint); safecall;
    function Get_PayType: Byte; safecall;
    procedure Set_PayType(Param1: Byte); safecall;
    function Get_Pension: WordBool; safecall;
    procedure Set_Pension(Param1: WordBool); safecall;
    function Get_PrevHoursLevel(Index: Smallint): Double; safecall;
    procedure Set_PrevHoursLevel(Index: Smallint; Param2: Double); safecall;
    function Get_PrevPayLevel(Index: Smallint): Double; safecall;
    procedure Set_PrevPayLevel(Index: Smallint; Param2: Double); safecall;
    function Get_PreviousYearsEE(Index: Smallint): Double; safecall;
    procedure Set_PreviousYearsEE(Index: Smallint; Param2: Double); safecall;
    function Get_PreviousYearsER(Index: Smallint): Double; safecall;
    procedure Set_PreviousYearsER(Index: Smallint; Param2: Double); safecall;
    function Get_PrevUnused: Double; safecall;
    procedure Set_PrevUnused(Param1: Double); safecall;
    function Get_PrevWeeks: Smallint; safecall;
    procedure Set_PrevWeeks(Param1: Smallint); safecall;
    function Get_SalesRep: WordBool; safecall;
    procedure Set_SalesRep(Param1: WordBool); safecall;
    function Get_SocialSecurityNumber: WideString; safecall;
    procedure Set_SocialSecurityNumber(const Param1: WideString); safecall;
    function Get_SpecialAllowance1: Smallint; safecall;
    procedure Set_SpecialAllowance1(Param1: Smallint); safecall;
    function Get_SpecialAllowance2: Smallint; safecall;
    procedure Set_SpecialAllowance2(Param1: Smallint); safecall;
    function Get_State: WideString; safecall;
    procedure Set_State(const Param1: WideString); safecall;
    function Get_StateAllowances: Smallint; safecall;
    procedure Set_StateAllowances(Param1: Smallint); safecall;
    function Get_StateFilingStatus: Smallint; safecall;
    procedure Set_StateFilingStatus(Param1: Smallint); safecall;
    function Get_Telephone: WideString; safecall;
    procedure Set_Telephone(const Param1: WideString); safecall;
    function Get_Unused0(Index: Smallint): Byte; safecall;
    procedure Set_Unused0(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused1: Byte; safecall;
    procedure Set_Unused1(Param1: Byte); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused3: Byte; safecall;
    procedure Set_Unused3(Param1: Byte); safecall;
    function Get_Unused4(Index: Smallint): Byte; safecall;
    procedure Set_Unused4(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown5: Byte; safecall;
    procedure Set_Unknown5(Param1: Byte); safecall;
    function Get_Unknown6: Byte; safecall;
    procedure Set_Unknown6(Param1: Byte); safecall;
    function Get_Unused7: Byte; safecall;
    procedure Set_Unused7(Param1: Byte); safecall;
    function Get_Unknown8(Index: Smallint): Byte; safecall;
    procedure Set_Unknown8(Index: Smallint; Param2: Byte); safecall;
    function Get_W2IDLocal: WideString; safecall;
    procedure Set_W2IDLocal(const Param1: WideString); safecall;
    function Get_W2IDState: WideString; safecall;
    procedure Set_W2IDState(const Param1: WideString); safecall;
    function Get_Zipcode: WideString; safecall;
    procedure Set_Zipcode(const Param1: WideString); safecall;
    property AcctDataGLAccount[Index: Smallint]: WideString read Get_AcctDataGLAccount write Set_AcctDataGLAccount;
    property AcctDataUseStandard[Index: Smallint]: WordBool read Get_AcctDataUseStandard write Set_AcctDataUseStandard;
    property AdditionalFederalWithholding: Double read Get_AdditionalFederalWithholding write Set_AdditionalFederalWithholding;
    property AdditionalLocalWithholding: Double read Get_AdditionalLocalWithholding write Set_AdditionalLocalWithholding;
    property AdditionalStateWithholding: Double read Get_AdditionalStateWithholding write Set_AdditionalStateWithholding;
    property Address1: WideString read Get_Address1 write Set_Address1;
    property Address2: WideString read Get_Address2 write Set_Address2;
    property City: WideString read Get_City write Set_City;
    property Country: WideString read Get_Country write Set_Country;
    property CustomField[Index: Smallint]: WideString read Get_CustomField write Set_CustomField;
    property DateHired: OleVariant read Get_DateHired write Set_DateHired;
    property DateLastRaise: OleVariant read Get_DateLastRaise write Set_DateLastRaise;
    property DateTerminated: OleVariant read Get_DateTerminated write Set_DateTerminated;
    property Deferred: WordBool read Get_Deferred write Set_Deferred;
    property EEAdjust[Index1: Smallint; Index2: Smallint]: Byte read Get_EEAdjust write Set_EEAdjust;
    property EEAmount[Index: Smallint]: Double read Get_EEAmount write Set_EEAmount;
    property EECalcName[Index: Smallint]: WideString read Get_EECalcName write Set_EECalcName;
    property EECalcOn[Index: Smallint]: WordBool read Get_EECalcOn write Set_EECalcOn;
    property EEGLAccount[Index: Smallint]: WideString read Get_EEGLAccount write Set_EEGLAccount;
    property EEUnused[Index1: Smallint; Index2: Smallint]: Byte read Get_EEUnused write Set_EEUnused;
    property EEUseCustom[Index: Smallint]: WordBool read Get_EEUseCustom write Set_EEUseCustom;
    property Email: WideString read Get_Email write Set_Email;
    property ERAdjust[Index1: Smallint; Index2: Smallint]: Byte read Get_ERAdjust write Set_ERAdjust;
    property ERCalcName[Index: Smallint]: WideString read Get_ERCalcName write Set_ERCalcName;
    property ERCalcOn[Index: Smallint]: WordBool read Get_ERCalcOn write Set_ERCalcOn;
    property ERExpenseAccount[Index: Smallint]: WideString read Get_ERExpenseAccount write Set_ERExpenseAccount;
    property ERLiabilityAccount[Index: Smallint]: WideString read Get_ERLiabilityAccount write Set_ERLiabilityAccount;
    property ERUseCustom[Index: Smallint]: WordBool read Get_ERUseCustom write Set_ERUseCustom;
    property IsEmployee: WordBool read Get_IsEmployee write Set_IsEmployee;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
    property EmployeeFirstName: WideString read Get_EmployeeFirstName write Set_EmployeeFirstName;
    property EmployeeLastName: WideString read Get_EmployeeLastName write Set_EmployeeLastName;
    property EmployeeMiddleInit: WideString read Get_EmployeeMiddleInit write Set_EmployeeMiddleInit;
    property EmployeeName: WideString read Get_EmployeeName write Set_EmployeeName;
    property EmployeeType: WideString read Get_EmployeeType write Set_EmployeeType;
    property eTimeBadgeNum: WideString read Get_eTimeBadgeNum write Set_eTimeBadgeNum;
    property eTimeDept: WideString read Get_eTimeDept write Set_eTimeDept;
    property eTimeEmpID: WideString read Get_eTimeEmpID write Set_eTimeEmpID;
    property eTimeHomeTimeClock: WideString read Get_eTimeHomeTimeClock write Set_eTimeHomeTimeClock;
    property eTimePayClass: WideString read Get_eTimePayClass write Set_eTimePayClass;
    property eTimeProfile: WideString read Get_eTimeProfile write Set_eTimeProfile;
    property Extra401k: Double read Get_Extra401k write Set_Extra401k;
    property ExtraSpecial1: Double read Get_ExtraSpecial1 write Set_ExtraSpecial1;
    property ExtraSpecial2: Double read Get_ExtraSpecial2 write Set_ExtraSpecial2;
    property FederalAllowances: Smallint read Get_FederalAllowances write Set_FederalAllowances;
    property FederalFilingStatus: Smallint read Get_FederalFilingStatus write Set_FederalFilingStatus;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HourlyBillingRate: Double read Get_HourlyBillingRate write Set_HourlyBillingRate;
    property HoursPerPayPeriod: Double read Get_HoursPerPayPeriod write Set_HoursPerPayPeriod;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property LocalAllowances: Smallint read Get_LocalAllowances write Set_LocalAllowances;
    property LocalFilingStatus: Smallint read Get_LocalFilingStatus write Set_LocalFilingStatus;
    property Name: WideString read Get_Name write Set_Name;
    property PayFrequency: Byte read Get_PayFrequency write Set_PayFrequency;
    property PayMethod: Smallint read Get_PayMethod write Set_PayMethod;
    property PayRateAmount[Index: Smallint]: Double read Get_PayRateAmount write Set_PayRateAmount;
    property PayrollEE[Quarter: Smallint; Index: Smallint]: Double read Get_PayrollEE write Set_PayrollEE;
    property PayrollER[Quarter: Smallint; Index: Smallint]: Double read Get_PayrollER write Set_PayrollER;
    property PayrollHoursLevel[Quarter: Smallint; Index: Smallint]: Double read Get_PayrollHoursLevel write Set_PayrollHoursLevel;
    property PayrollPayLevel[Quarter: Smallint; Index: Smallint]: Double read Get_PayrollPayLevel write Set_PayrollPayLevel;
    property PayrollUnused[Quarter: Smallint]: Double read Get_PayrollUnused write Set_PayrollUnused;
    property PayrollWeeks[Quarter: Smallint]: Smallint read Get_PayrollWeeks write Set_PayrollWeeks;
    property PayType: Byte read Get_PayType write Set_PayType;
    property Pension: WordBool read Get_Pension write Set_Pension;
    property PrevHoursLevel[Index: Smallint]: Double read Get_PrevHoursLevel write Set_PrevHoursLevel;
    property PrevPayLevel[Index: Smallint]: Double read Get_PrevPayLevel write Set_PrevPayLevel;
    property PreviousYearsEE[Index: Smallint]: Double read Get_PreviousYearsEE write Set_PreviousYearsEE;
    property PreviousYearsER[Index: Smallint]: Double read Get_PreviousYearsER write Set_PreviousYearsER;
    property PrevUnused: Double read Get_PrevUnused write Set_PrevUnused;
    property PrevWeeks: Smallint read Get_PrevWeeks write Set_PrevWeeks;
    property SalesRep: WordBool read Get_SalesRep write Set_SalesRep;
    property SocialSecurityNumber: WideString read Get_SocialSecurityNumber write Set_SocialSecurityNumber;
    property SpecialAllowance1: Smallint read Get_SpecialAllowance1 write Set_SpecialAllowance1;
    property SpecialAllowance2: Smallint read Get_SpecialAllowance2 write Set_SpecialAllowance2;
    property State: WideString read Get_State write Set_State;
    property StateAllowances: Smallint read Get_StateAllowances write Set_StateAllowances;
    property StateFilingStatus: Smallint read Get_StateFilingStatus write Set_StateFilingStatus;
    property Telephone: WideString read Get_Telephone write Set_Telephone;
    property Unused0[Index: Smallint]: Byte read Get_Unused0 write Set_Unused0;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3: Byte read Get_Unused3 write Set_Unused3;
    property Unused4[Index: Smallint]: Byte read Get_Unused4 write Set_Unused4;
    property Unknown5: Byte read Get_Unknown5 write Set_Unknown5;
    property Unknown6: Byte read Get_Unknown6 write Set_Unknown6;
    property Unused7: Byte read Get_Unused7 write Set_Unused7;
    property Unknown8[Index: Smallint]: Byte read Get_Unknown8 write Set_Unknown8;
    property W2IDLocal: WideString read Get_W2IDLocal write Set_W2IDLocal;
    property W2IDState: WideString read Get_W2IDState write Set_W2IDState;
    property Zipcode: WideString read Get_Zipcode write Set_Zipcode;
  end;

// *********************************************************************//
// DispIntf:  _EmployeeDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {381C298F-0686-46B2-9188-29F2275757AE}
// *********************************************************************//
  _EmployeeDisp = dispinterface
    ['{381C298F-0686-46B2-9188-29F2275757AE}']
    function CacheCharts(Flag: WordBool): Smallint; dispid 1610809435;
    function CloseFile: Smallint; dispid 1610809436;
    function OpenFile: Smallint; dispid 1610809437;
    function Delete: Smallint; dispid 1610809438;
    function GetEqual(const EmployeeID: WideString): Smallint; dispid 1610809439;
    function GetForIndex(Index: Integer): Smallint; dispid 1610809440;
    function Insert: Smallint; dispid 1610809441;
    function RecordCount: Integer; dispid 1610809443;
    function StepFirst: Smallint; dispid 1610809444;
    function StepLast: Smallint; dispid 1610809445;
    function StepNext: Smallint; dispid 1610809446;
    function StepPrevious: Smallint; dispid 1610809447;
    function Update: Smallint; dispid 1610809448;
    property AcctDataGLAccount[Index: Smallint]: WideString dispid 1745027162;
    property AcctDataUseStandard[Index: Smallint]: WordBool dispid 1745027161;
    property AdditionalFederalWithholding: Double dispid 1745027160;
    property AdditionalLocalWithholding: Double dispid 1745027159;
    property AdditionalStateWithholding: Double dispid 1745027158;
    property Address1: WideString dispid 1745027157;
    property Address2: WideString dispid 1745027156;
    property City: WideString dispid 1745027155;
    property Country: WideString dispid 1745027154;
    property CustomField[Index: Smallint]: WideString dispid 1745027153;
    property DateHired: OleVariant dispid 1745027152;
    property DateLastRaise: OleVariant dispid 1745027151;
    property DateTerminated: OleVariant dispid 1745027150;
    property Deferred: WordBool dispid 1745027149;
    property EEAdjust[Index1: Smallint; Index2: Smallint]: Byte dispid 1745027148;
    property EEAmount[Index: Smallint]: Double dispid 1745027147;
    property EECalcName[Index: Smallint]: WideString dispid 1745027146;
    property EECalcOn[Index: Smallint]: WordBool dispid 1745027145;
    property EEGLAccount[Index: Smallint]: WideString dispid 1745027144;
    property EEUnused[Index1: Smallint; Index2: Smallint]: Byte dispid 1745027143;
    property EEUseCustom[Index: Smallint]: WordBool dispid 1745027142;
    property Email: WideString dispid 1745027141;
    property ERAdjust[Index1: Smallint; Index2: Smallint]: Byte dispid 1745027140;
    property ERCalcName[Index: Smallint]: WideString dispid 1745027139;
    property ERCalcOn[Index: Smallint]: WordBool dispid 1745027138;
    property ERExpenseAccount[Index: Smallint]: WideString dispid 1745027137;
    property ERLiabilityAccount[Index: Smallint]: WideString dispid 1745027136;
    property ERUseCustom[Index: Smallint]: WordBool dispid 1745027135;
    property IsEmployee: WordBool dispid 1745027134;
    property EmployeeID: WideString dispid 1745027133;
    property EmployeeFirstName: WideString dispid 1745027132;
    property EmployeeLastName: WideString dispid 1745027131;
    property EmployeeMiddleInit: WideString dispid 1745027130;
    property EmployeeName: WideString dispid 1745027129;
    property EmployeeType: WideString dispid 1745027128;
    property eTimeBadgeNum: WideString dispid 1745027127;
    property eTimeDept: WideString dispid 1745027126;
    property eTimeEmpID: WideString dispid 1745027125;
    property eTimeHomeTimeClock: WideString dispid 1745027124;
    property eTimePayClass: WideString dispid 1745027123;
    property eTimeProfile: WideString dispid 1745027122;
    property Extra401k: Double dispid 1745027121;
    property ExtraSpecial1: Double dispid 1745027120;
    property ExtraSpecial2: Double dispid 1745027119;
    property FederalAllowances: Smallint dispid 1745027118;
    property FederalFilingStatus: Smallint dispid 1745027117;
    property GUID: WideString dispid 1745027116;
    property HourlyBillingRate: Double dispid 1745027115;
    property HoursPerPayPeriod: Double dispid 1745027114;
    property Inactive: WordBool dispid 1745027113;
    property Index: Integer dispid 1745027112;
    property LocalAllowances: Smallint dispid 1745027111;
    property LocalFilingStatus: Smallint dispid 1745027110;
    property Name: WideString dispid 1745027109;
    property PayFrequency: Byte dispid 1745027108;
    property PayMethod: Smallint dispid 1745027107;
    property PayRateAmount[Index: Smallint]: Double dispid 1745027106;
    property PayrollEE[Quarter: Smallint; Index: Smallint]: Double dispid 1745027105;
    property PayrollER[Quarter: Smallint; Index: Smallint]: Double dispid 1745027104;
    property PayrollHoursLevel[Quarter: Smallint; Index: Smallint]: Double dispid 1745027103;
    property PayrollPayLevel[Quarter: Smallint; Index: Smallint]: Double dispid 1745027102;
    property PayrollUnused[Quarter: Smallint]: Double dispid 1745027101;
    property PayrollWeeks[Quarter: Smallint]: Smallint dispid 1745027100;
    property PayType: Byte dispid 1745027099;
    property Pension: WordBool dispid 1745027098;
    property PrevHoursLevel[Index: Smallint]: Double dispid 1745027097;
    property PrevPayLevel[Index: Smallint]: Double dispid 1745027096;
    property PreviousYearsEE[Index: Smallint]: Double dispid 1745027095;
    property PreviousYearsER[Index: Smallint]: Double dispid 1745027094;
    property PrevUnused: Double dispid 1745027093;
    property PrevWeeks: Smallint dispid 1745027092;
    property SalesRep: WordBool dispid 1745027091;
    property SocialSecurityNumber: WideString dispid 1745027090;
    property SpecialAllowance1: Smallint dispid 1745027089;
    property SpecialAllowance2: Smallint dispid 1745027088;
    property State: WideString dispid 1745027087;
    property StateAllowances: Smallint dispid 1745027086;
    property StateFilingStatus: Smallint dispid 1745027085;
    property Telephone: WideString dispid 1745027084;
    property Unused0[Index: Smallint]: Byte dispid 1745027083;
    property Unused1: Byte dispid 1745027082;
    property Unused2[Index: Smallint]: Byte dispid 1745027081;
    property Unused3: Byte dispid 1745027080;
    property Unused4[Index: Smallint]: Byte dispid 1745027079;
    property Unknown5: Byte dispid 1745027078;
    property Unknown6: Byte dispid 1745027077;
    property Unused7: Byte dispid 1745027076;
    property Unknown8[Index: Smallint]: Byte dispid 1745027075;
    property W2IDLocal: WideString dispid 1745027074;
    property W2IDState: WideString dispid 1745027073;
    property Zipcode: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _TaxAuthority
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {05E5D9BD-5175-4627-8269-ED49AC32D662}
// *********************************************************************//
  _TaxAuthority = interface(IDispatch)
    ['{05E5D9BD-5175-4627-8269-ED49AC32D662}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(const ID: WideString): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Account: WideString; safecall;
    procedure Set_Account(const Param1: WideString); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_ID: WideString; safecall;
    procedure Set_ID(const Param1: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Param1: WideString); safecall;
    function Get_Rate: Double; safecall;
    procedure Set_Rate(Param1: Double); safecall;
    function Get_Rate2: Double; safecall;
    procedure Set_Rate2(Param1: Double); safecall;
    function Get_TaxBasis: Integer; safecall;
    procedure Set_TaxBasis(Param1: Integer); safecall;
    function Get_TaxChangeAt: Double; safecall;
    procedure Set_TaxChangeAt(Param1: Double); safecall;
    function Get_TaxUsesFormula: WordBool; safecall;
    procedure Set_TaxUsesFormula(Param1: WordBool); safecall;
    function Get_VendorIndex: Integer; safecall;
    procedure Set_VendorIndex(Param1: Integer); safecall;
    property Account: WideString read Get_Account write Set_Account;
    property GUID: WideString read Get_GUID write Set_GUID;
    property ID: WideString read Get_ID write Set_ID;
    property Name: WideString read Get_Name write Set_Name;
    property Rate: Double read Get_Rate write Set_Rate;
    property Rate2: Double read Get_Rate2 write Set_Rate2;
    property TaxBasis: Integer read Get_TaxBasis write Set_TaxBasis;
    property TaxChangeAt: Double read Get_TaxChangeAt write Set_TaxChangeAt;
    property TaxUsesFormula: WordBool read Get_TaxUsesFormula write Set_TaxUsesFormula;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
  end;

// *********************************************************************//
// DispIntf:  _TaxAuthorityDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {05E5D9BD-5175-4627-8269-ED49AC32D662}
// *********************************************************************//
  _TaxAuthorityDisp = dispinterface
    ['{05E5D9BD-5175-4627-8269-ED49AC32D662}']
    function CloseFile: Smallint; dispid 1610809354;
    function OpenFile: Smallint; dispid 1610809355;
    function Delete: Smallint; dispid 1610809356;
    function GetEqual(const ID: WideString): Smallint; dispid 1610809357;
    function Insert: Smallint; dispid 1610809358;
    function RecordCount: Integer; dispid 1610809360;
    function StepFirst: Smallint; dispid 1610809361;
    function StepLast: Smallint; dispid 1610809362;
    function StepNext: Smallint; dispid 1610809363;
    function StepPrevious: Smallint; dispid 1610809364;
    function Update: Smallint; dispid 1610809365;
    property Account: WideString dispid 1745027081;
    property GUID: WideString dispid 1745027080;
    property ID: WideString dispid 1745027079;
    property Name: WideString dispid 1745027078;
    property Rate: Double dispid 1745027077;
    property Rate2: Double dispid 1745027076;
    property TaxBasis: Integer dispid 1745027075;
    property TaxChangeAt: Double dispid 1745027074;
    property TaxUsesFormula: WordBool dispid 1745027073;
    property VendorIndex: Integer dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _Vendor
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {191C30C5-4808-46F3-97D9-3B14EE1D2AB3}
// *********************************************************************//
  _Vendor = interface(IDispatch)
    ['{191C30C5-4808-46F3-97D9-3B14EE1D2AB3}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function FindByPercent: Integer; safecall;
    function GetByPercent(Percent: Double): Smallint; safecall;
    function GetEqual(const VendorID: WideString): Smallint; safecall;
    function GetFirst: Smallint; safecall;
    function GetForIndex(Index: Integer): Smallint; safecall;
    function GetGreaterThan(const VendorID: WideString): Smallint; safecall;
    function GetGreaterThanOrEqual(const VendorID: WideString): Smallint; safecall;
    function GetLast: Smallint; safecall;
    function GetLessThan(const VendorID: WideString): Smallint; safecall;
    function GetLessThanOrEqual(const VendorID: WideString): Smallint; safecall;
    function GetNext: Smallint; safecall;
    function GetPrevious: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AccountNumber: WideString; safecall;
    procedure Set_AccountNumber(const Param1: WideString); safecall;
    function Get_Address1: WideString; safecall;
    procedure Set_Address1(const Param1: WideString); safecall;
    function Get_Address2: WideString; safecall;
    procedure Set_Address2(const Param1: WideString); safecall;
    function Get_City: WideString; safecall;
    procedure Set_City(const Param1: WideString); safecall;
    function Get_CODTerms: WordBool; safecall;
    procedure Set_CODTerms(Param1: WordBool); safecall;
    function Get_Contact: WideString; safecall;
    procedure Set_Contact(const Param1: WideString); safecall;
    function Get_Country: WideString; safecall;
    procedure Set_Country(const Param1: WideString); safecall;
    function Get_CreditLimit: Double; safecall;
    procedure Set_CreditLimit(Param1: Double); safecall;
    function Get_CurrentBalance: Double; safecall;
    procedure Set_CurrentBalance(Param1: Double); safecall;
    function Get_CustomField(Index: Smallint): WideString; safecall;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString); safecall;
    function Get_DiscountDays: Smallint; safecall;
    procedure Set_DiscountDays(Param1: Smallint); safecall;
    function Get_DiscountPercent: Double; safecall;
    procedure Set_DiscountPercent(Param1: Double); safecall;
    function Get_DueAtEndOfMonth: WordBool; safecall;
    procedure Set_DueAtEndOfMonth(Param1: WordBool); safecall;
    function Get_DueOnDayOfNextMonth: WordBool; safecall;
    procedure Set_DueOnDayOfNextMonth(Param1: WordBool); safecall;
    function Get_Email: WideString; safecall;
    procedure Set_Email(const Param1: WideString); safecall;
    function Get_EmployeeIndex: Integer; safecall;
    procedure Set_EmployeeIndex(Param1: Integer); safecall;
    function Get_Fax: WideString; safecall;
    procedure Set_Fax(const Param1: WideString); safecall;
    function Get_FormsDeliveryFlags: Integer; safecall;
    procedure Set_FormsDeliveryFlags(Param1: Integer); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_Inactive: WordBool; safecall;
    procedure Set_Inactive(Param1: WordBool); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_LastInvoiceAmount: Double; safecall;
    procedure Set_LastInvoiceAmount(Param1: Double); safecall;
    function Get_LastInvoiceDate: OleVariant; safecall;
    procedure Set_LastInvoiceDate(Param1: OleVariant); safecall;
    function Get_LastPaymentAmount: Double; safecall;
    procedure Set_LastPaymentAmount(Param1: Double); safecall;
    function Get_LastPaymentDate: OleVariant; safecall;
    procedure Set_LastPaymentDate(Param1: OleVariant); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Param1: WideString); safecall;
    function Get_NetDueDays: Smallint; safecall;
    procedure Set_NetDueDays(Param1: Smallint); safecall;
    function Get_Payments(Index: Smallint): Double; safecall;
    procedure Set_Payments(Index: Smallint; Param2: Double); safecall;
    function Get_PrepaidTerms: WordBool; safecall;
    procedure Set_PrepaidTerms(Param1: WordBool); safecall;
    function Get_PurchaseAccount: WideString; safecall;
    procedure Set_PurchaseAccount(const Param1: WideString); safecall;
    function Get_Purchases(Index: Smallint): Double; safecall;
    procedure Set_Purchases(Index: Smallint; Param2: Double); safecall;
    function Get_ShipVia: Smallint; safecall;
    procedure Set_ShipVia(Param1: Smallint); safecall;
    function Get_State: WideString; safecall;
    procedure Set_State(const Param1: WideString); safecall;
    function Get_TaxIDNumber: WideString; safecall;
    procedure Set_TaxIDNumber(const Param1: WideString); safecall;
    function Get_Telephone1: WideString; safecall;
    procedure Set_Telephone1(const Param1: WideString); safecall;
    function Get_Telephone2: WideString; safecall;
    procedure Set_Telephone2(const Param1: WideString); safecall;
    function Get_Type1099: Smallint; safecall;
    procedure Set_Type1099(Param1: Smallint); safecall;
    function Get_Unused1(Index: Smallint): Byte; safecall;
    procedure Set_Unused1(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused3(Index: Smallint): Byte; safecall;
    procedure Set_Unused3(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused4: Byte; safecall;
    procedure Set_Unused4(Param1: Byte); safecall;
    function Get_Unused5(Index: Smallint): Byte; safecall;
    procedure Set_Unused5(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused6: Integer; safecall;
    procedure Set_Unused6(Param1: Integer); safecall;
    function Get_UseStandardTerms: WordBool; safecall;
    procedure Set_UseStandardTerms(Param1: WordBool); safecall;
    function Get_VendorID: WideString; safecall;
    procedure Set_VendorID(const Param1: WideString); safecall;
    function Get_VendorSinceDate: OleVariant; safecall;
    procedure Set_VendorSinceDate(Param1: OleVariant); safecall;
    function Get_VendorType: WideString; safecall;
    procedure Set_VendorType(const Param1: WideString); safecall;
    function Get_Web: WideString; safecall;
    procedure Set_Web(const Param1: WideString); safecall;
    function Get_Zipcode: WideString; safecall;
    procedure Set_Zipcode(const Param1: WideString); safecall;
    property AccountNumber: WideString read Get_AccountNumber write Set_AccountNumber;
    property Address1: WideString read Get_Address1 write Set_Address1;
    property Address2: WideString read Get_Address2 write Set_Address2;
    property City: WideString read Get_City write Set_City;
    property CODTerms: WordBool read Get_CODTerms write Set_CODTerms;
    property Contact: WideString read Get_Contact write Set_Contact;
    property Country: WideString read Get_Country write Set_Country;
    property CreditLimit: Double read Get_CreditLimit write Set_CreditLimit;
    property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
    property CustomField[Index: Smallint]: WideString read Get_CustomField write Set_CustomField;
    property DiscountDays: Smallint read Get_DiscountDays write Set_DiscountDays;
    property DiscountPercent: Double read Get_DiscountPercent write Set_DiscountPercent;
    property DueAtEndOfMonth: WordBool read Get_DueAtEndOfMonth write Set_DueAtEndOfMonth;
    property DueOnDayOfNextMonth: WordBool read Get_DueOnDayOfNextMonth write Set_DueOnDayOfNextMonth;
    property Email: WideString read Get_Email write Set_Email;
    property EmployeeIndex: Integer read Get_EmployeeIndex write Set_EmployeeIndex;
    property Fax: WideString read Get_Fax write Set_Fax;
    property FormsDeliveryFlags: Integer read Get_FormsDeliveryFlags write Set_FormsDeliveryFlags;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property LastInvoiceAmount: Double read Get_LastInvoiceAmount write Set_LastInvoiceAmount;
    property LastInvoiceDate: OleVariant read Get_LastInvoiceDate write Set_LastInvoiceDate;
    property LastPaymentAmount: Double read Get_LastPaymentAmount write Set_LastPaymentAmount;
    property LastPaymentDate: OleVariant read Get_LastPaymentDate write Set_LastPaymentDate;
    property Name: WideString read Get_Name write Set_Name;
    property NetDueDays: Smallint read Get_NetDueDays write Set_NetDueDays;
    property Payments[Index: Smallint]: Double read Get_Payments write Set_Payments;
    property PrepaidTerms: WordBool read Get_PrepaidTerms write Set_PrepaidTerms;
    property PurchaseAccount: WideString read Get_PurchaseAccount write Set_PurchaseAccount;
    property Purchases[Index: Smallint]: Double read Get_Purchases write Set_Purchases;
    property ShipVia: Smallint read Get_ShipVia write Set_ShipVia;
    property State: WideString read Get_State write Set_State;
    property TaxIDNumber: WideString read Get_TaxIDNumber write Set_TaxIDNumber;
    property Telephone1: WideString read Get_Telephone1 write Set_Telephone1;
    property Telephone2: WideString read Get_Telephone2 write Set_Telephone2;
    property Type1099: Smallint read Get_Type1099 write Set_Type1099;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3[Index: Smallint]: Byte read Get_Unused3 write Set_Unused3;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property Unused6: Integer read Get_Unused6 write Set_Unused6;
    property UseStandardTerms: WordBool read Get_UseStandardTerms write Set_UseStandardTerms;
    property VendorID: WideString read Get_VendorID write Set_VendorID;
    property VendorSinceDate: OleVariant read Get_VendorSinceDate write Set_VendorSinceDate;
    property VendorType: WideString read Get_VendorType write Set_VendorType;
    property Web: WideString read Get_Web write Set_Web;
    property Zipcode: WideString read Get_Zipcode write Set_Zipcode;
  end;

// *********************************************************************//
// DispIntf:  _VendorDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {191C30C5-4808-46F3-97D9-3B14EE1D2AB3}
// *********************************************************************//
  _VendorDisp = dispinterface
    ['{191C30C5-4808-46F3-97D9-3B14EE1D2AB3}']
    function CloseFile: Smallint; dispid 1610809393;
    function OpenFile: Smallint; dispid 1610809394;
    function Delete: Smallint; dispid 1610809395;
    function FindByPercent: Integer; dispid 1610809396;
    function GetByPercent(Percent: Double): Smallint; dispid 1610809397;
    function GetEqual(const VendorID: WideString): Smallint; dispid 1610809398;
    function GetFirst: Smallint; dispid 1610809399;
    function GetForIndex(Index: Integer): Smallint; dispid 1610809400;
    function GetGreaterThan(const VendorID: WideString): Smallint; dispid 1610809401;
    function GetGreaterThanOrEqual(const VendorID: WideString): Smallint; dispid 1610809402;
    function GetLast: Smallint; dispid 1610809403;
    function GetLessThan(const VendorID: WideString): Smallint; dispid 1610809404;
    function GetLessThanOrEqual(const VendorID: WideString): Smallint; dispid 1610809405;
    function GetNext: Smallint; dispid 1610809406;
    function GetPrevious: Smallint; dispid 1610809407;
    function Insert: Smallint; dispid 1610809408;
    function RecordCount: Integer; dispid 1610809410;
    function StepFirst: Smallint; dispid 1610809411;
    function StepLast: Smallint; dispid 1610809412;
    function StepNext: Smallint; dispid 1610809413;
    function StepPrevious: Smallint; dispid 1610809414;
    function Update: Smallint; dispid 1610809415;
    property AccountNumber: WideString dispid 1745027120;
    property Address1: WideString dispid 1745027119;
    property Address2: WideString dispid 1745027118;
    property City: WideString dispid 1745027117;
    property CODTerms: WordBool dispid 1745027116;
    property Contact: WideString dispid 1745027115;
    property Country: WideString dispid 1745027114;
    property CreditLimit: Double dispid 1745027113;
    property CurrentBalance: Double dispid 1745027112;
    property CustomField[Index: Smallint]: WideString dispid 1745027111;
    property DiscountDays: Smallint dispid 1745027110;
    property DiscountPercent: Double dispid 1745027109;
    property DueAtEndOfMonth: WordBool dispid 1745027108;
    property DueOnDayOfNextMonth: WordBool dispid 1745027107;
    property Email: WideString dispid 1745027106;
    property EmployeeIndex: Integer dispid 1745027105;
    property Fax: WideString dispid 1745027104;
    property FormsDeliveryFlags: Integer dispid 1745027103;
    property GUID: WideString dispid 1745027102;
    property Inactive: WordBool dispid 1745027101;
    property Index: Integer dispid 1745027100;
    property LastInvoiceAmount: Double dispid 1745027099;
    property LastInvoiceDate: OleVariant dispid 1745027098;
    property LastPaymentAmount: Double dispid 1745027097;
    property LastPaymentDate: OleVariant dispid 1745027096;
    property Name: WideString dispid 1745027095;
    property NetDueDays: Smallint dispid 1745027094;
    property Payments[Index: Smallint]: Double dispid 1745027093;
    property PrepaidTerms: WordBool dispid 1745027092;
    property PurchaseAccount: WideString dispid 1745027091;
    property Purchases[Index: Smallint]: Double dispid 1745027090;
    property ShipVia: Smallint dispid 1745027089;
    property State: WideString dispid 1745027088;
    property TaxIDNumber: WideString dispid 1745027087;
    property Telephone1: WideString dispid 1745027086;
    property Telephone2: WideString dispid 1745027085;
    property Type1099: Smallint dispid 1745027084;
    property Unused1[Index: Smallint]: Byte dispid 1745027083;
    property Unused2[Index: Smallint]: Byte dispid 1745027082;
    property Unused3[Index: Smallint]: Byte dispid 1745027081;
    property Unused4: Byte dispid 1745027080;
    property Unused5[Index: Smallint]: Byte dispid 1745027079;
    property Unused6: Integer dispid 1745027078;
    property UseStandardTerms: WordBool dispid 1745027077;
    property VendorID: WideString dispid 1745027076;
    property VendorSinceDate: OleVariant dispid 1745027075;
    property VendorType: WideString dispid 1745027074;
    property Web: WideString dispid 1745027073;
    property Zipcode: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _LineItem
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {84F73079-D468-42E8-BB31-E2700971AF0E}
// *********************************************************************//
  _LineItem = interface(IDispatch)
    ['{84F73079-D468-42E8-BB31-E2700971AF0E}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function FindByPercent: Integer; safecall;
    function GetByPercent(Percent: Double): Smallint; safecall;
    function GetEqual(const ID: WideString): Smallint; safecall;
    function GetFirst: Smallint; safecall;
    function GetForIndex(Index: Integer): Smallint; safecall;
    function GetGreaterThan(const LineItemID: WideString): Smallint; safecall;
    function GetGreaterThanOrEqual(const LineItemID: WideString): Smallint; safecall;
    function GetLast: Smallint; safecall;
    function GetLessThan(const LineItemID: WideString): Smallint; safecall;
    function GetLessThanOrEqual(const LineItemID: WideString): Smallint; safecall;
    function GetNext: Smallint; safecall;
    function GetPrevious: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_BuyerID: WideString; safecall;
    procedure Set_BuyerID(const Param1: WideString); safecall;
    function Get_ComponentIndex(Index: Smallint): Integer; safecall;
    procedure Set_ComponentIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_ComponentQuantity(Index: Smallint): Double; safecall;
    procedure Set_ComponentQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_Cost: Double; safecall;
    procedure Set_Cost(Param1: Double); safecall;
    function Get_CostingMethod: Byte; safecall;
    procedure Set_CostingMethod(Param1: Byte); safecall;
    function Get_CustomField(Index: Smallint): WideString; safecall;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString); safecall;
    function Get_DefaultForPurchasing: WordBool; safecall;
    procedure Set_DefaultForPurchasing(Param1: WordBool); safecall;
    function Get_DefaultForSales: WordBool; safecall;
    procedure Set_DefaultForSales(Param1: WordBool); safecall;
    function Get_DescriptionForPurchases: WideString; safecall;
    procedure Set_DescriptionForPurchases(const Param1: WideString); safecall;
    function Get_DescriptionForSales: WideString; safecall;
    procedure Set_DescriptionForSales(const Param1: WideString); safecall;
    function Get_GLCOGSSalaryAccount: WideString; safecall;
    procedure Set_GLCOGSSalaryAccount(const Param1: WideString); safecall;
    function Get_GLInventoryAccount: WideString; safecall;
    procedure Set_GLInventoryAccount(const Param1: WideString); safecall;
    function Get_GLSalesAccount: WideString; safecall;
    procedure Set_GLSalesAccount(const Param1: WideString); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_Inactive: WordBool; safecall;
    procedure Set_Inactive(Param1: WordBool); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_ItemClass: Smallint; safecall;
    procedure Set_ItemClass(Param1: Smallint); safecall;
    function Get_ItemDescription: WideString; safecall;
    procedure Set_ItemDescription(const Param1: WideString); safecall;
    function Get_ItemID: WideString; safecall;
    procedure Set_ItemID(const Param1: WideString); safecall;
    function Get_ItemNote: WideString; safecall;
    procedure Set_ItemNote(const Param1: WideString); safecall;
    function Get_ItemTaxType: Smallint; safecall;
    procedure Set_ItemTaxType(Param1: Smallint); safecall;
    function Get_ItemType: WideString; safecall;
    procedure Set_ItemType(const Param1: WideString); safecall;
    function Get_Location: WideString; safecall;
    procedure Set_Location(const Param1: WideString); safecall;
    function Get_MasterItemID: WideString; safecall;
    procedure Set_MasterItemID(const Param1: WideString); safecall;
    function Get_MasterItemIndex: Integer; safecall;
    procedure Set_MasterItemIndex(Param1: Integer); safecall;
    function Get_MinimumStock: Double; safecall;
    procedure Set_MinimumStock(Param1: Double); safecall;
    function Get_NotStockItem: WordBool; safecall;
    procedure Set_NotStockItem(Param1: WordBool); safecall;
    function Get_NPrimaryAttributes: Integer; safecall;
    procedure Set_NPrimaryAttributes(Param1: Integer); safecall;
    function Get_NSecondaryAttributes: Integer; safecall;
    procedure Set_NSecondaryAttributes(Param1: Integer); safecall;
    function Get_NumberOfComponents: Smallint; safecall;
    procedure Set_NumberOfComponents(Param1: Smallint); safecall;
    function Get_PriceLevel1Value(Index: Smallint): Double; safecall;
    procedure Set_PriceLevel1Value(Index: Smallint; Param2: Double); safecall;
    function Get_PriceLevelIndex(Index: Smallint): Smallint; safecall;
    procedure Set_PriceLevelIndex(Index: Smallint; Param2: Smallint); safecall;
    function Get_PriceLevelMethod(Index: Smallint): Smallint; safecall;
    procedure Set_PriceLevelMethod(Index: Smallint; Param2: Smallint); safecall;
    function Get_PriceLevelMethodAmount(Index: Smallint): Double; safecall;
    procedure Set_PriceLevelMethodAmount(Index: Smallint; Param2: Double); safecall;
    function Get_PriceLevelName(Index: Smallint): WideString; safecall;
    procedure Set_PriceLevelName(Index: Smallint; const Param2: WideString); safecall;
    function Get_PriceLevelPrice(Index: Smallint): Double; safecall;
    procedure Set_PriceLevelPrice(Index: Smallint; Param2: Double); safecall;
    function Get_PriceLevelRounding(Index: Smallint): Smallint; safecall;
    procedure Set_PriceLevelRounding(Index: Smallint; Param2: Smallint); safecall;
    function Get_PriceLevelSpecificCent(Index: Smallint): Double; safecall;
    procedure Set_PriceLevelSpecificCent(Index: Smallint; Param2: Double); safecall;
    function Get_PriceLevelUse(Index: Smallint): Smallint; safecall;
    procedure Set_PriceLevelUse(Index: Smallint; Param2: Smallint); safecall;
    function Get_PrimaryAttributeDesc(Index: Smallint): WideString; safecall;
    procedure Set_PrimaryAttributeDesc(Index: Smallint; const Param2: WideString); safecall;
    function Get_PrimaryAttributeID(Index: Smallint): WideString; safecall;
    procedure Set_PrimaryAttributeID(Index: Smallint; const Param2: WideString); safecall;
    function Get_PrimaryAttributeName: WideString; safecall;
    procedure Set_PrimaryAttributeName(const Param1: WideString); safecall;
    function Get_PrintComponents: WordBool; safecall;
    procedure Set_PrintComponents(Param1: WordBool); safecall;
    function Get_PurchasingGUID: WideString; safecall;
    procedure Set_PurchasingGUID(const Param1: WideString); safecall;
    function Get_PurchasingUPC_SCC: WideString; safecall;
    procedure Set_PurchasingUPC_SCC(const Param1: WideString); safecall;
    function Get_PurchasingWeight: Double; safecall;
    procedure Set_PurchasingWeight(Param1: Double); safecall;
    function Get_QtyDiscGUID: WideString; safecall;
    procedure Set_QtyDiscGUID(const Param1: WideString); safecall;
    function Get_ReorderQuantity: Double; safecall;
    procedure Set_ReorderQuantity(Param1: Double); safecall;
    function Get_Sales(Index: Smallint): Double; safecall;
    procedure Set_Sales(Index: Smallint; Param2: Double); safecall;
    function Get_SalesGUID: WideString; safecall;
    procedure Set_SalesGUID(const Param1: WideString); safecall;
    function Get_SalesPrice(Index: Smallint): Double; safecall;
    procedure Set_SalesPrice(Index: Smallint; Param2: Double); safecall;
    function Get_SalesUPC_SCC: WideString; safecall;
    procedure Set_SalesUPC_SCC(const Param1: WideString); safecall;
    function Get_SalesWeight: Double; safecall;
    procedure Set_SalesWeight(Param1: Double); safecall;
    function Get_SecondaryAttributeDesc(Index: Smallint): WideString; safecall;
    procedure Set_SecondaryAttributeDesc(Index: Smallint; const Param2: WideString); safecall;
    function Get_SecondaryAttributeID(Index: Smallint): WideString; safecall;
    procedure Set_SecondaryAttributeID(Index: Smallint; const Param2: WideString); safecall;
    function Get_SecondaryAttributeName: WideString; safecall;
    procedure Set_SecondaryAttributeName(const Param1: WideString); safecall;
    function Get_SubjectToCommission: WordBool; safecall;
    procedure Set_SubjectToCommission(Param1: WordBool); safecall;
    function Get_SubstockPrimaryAttributeDesc: WideString; safecall;
    procedure Set_SubstockPrimaryAttributeDesc(const Param1: WideString); safecall;
    function Get_SubstockPrimaryAttributeID: WideString; safecall;
    procedure Set_SubstockPrimaryAttributeID(const Param1: WideString); safecall;
    function Get_SubstockSecondaryAttributeDesc: WideString; safecall;
    procedure Set_SubstockSecondaryAttributeDesc(const Param1: WideString); safecall;
    function Get_SubstockSecondaryAttributeID: WideString; safecall;
    procedure Set_SubstockSecondaryAttributeID(const Param1: WideString); safecall;
    function Get_UnitOfMeasure: WideString; safecall;
    procedure Set_UnitOfMeasure(const Param1: WideString); safecall;
    function Get_UnitsSold(Index: Smallint): Double; safecall;
    procedure Set_UnitsSold(Index: Smallint; Param2: Double); safecall;
    function Get_Unused1: Byte; safecall;
    procedure Set_Unused1(Param1: Byte); safecall;
    function Get_UPC_SKU: WideString; safecall;
    procedure Set_UPC_SKU(const Param1: WideString); safecall;
    function Get_UseMultiPacks: WordBool; safecall;
    procedure Set_UseMultiPacks(Param1: WordBool); safecall;
    function Get_VendorIndex: Integer; safecall;
    procedure Set_VendorIndex(Param1: Integer); safecall;
    function Get_Weight: Double; safecall;
    procedure Set_Weight(Param1: Double); safecall;
    function Get_WarrantyPeriod: Integer; safecall;
    procedure Set_WarrantyPeriod(Param1: Integer); safecall;
    function Get_WarrantySpan: Integer; safecall;
    procedure Set_WarrantySpan(Param1: Integer); safecall;
    property BuyerID: WideString read Get_BuyerID write Set_BuyerID;
    property ComponentIndex[Index: Smallint]: Integer read Get_ComponentIndex write Set_ComponentIndex;
    property ComponentQuantity[Index: Smallint]: Double read Get_ComponentQuantity write Set_ComponentQuantity;
    property Cost: Double read Get_Cost write Set_Cost;
    property CostingMethod: Byte read Get_CostingMethod write Set_CostingMethod;
    property CustomField[Index: Smallint]: WideString read Get_CustomField write Set_CustomField;
    property DefaultForPurchasing: WordBool read Get_DefaultForPurchasing write Set_DefaultForPurchasing;
    property DefaultForSales: WordBool read Get_DefaultForSales write Set_DefaultForSales;
    property DescriptionForPurchases: WideString read Get_DescriptionForPurchases write Set_DescriptionForPurchases;
    property DescriptionForSales: WideString read Get_DescriptionForSales write Set_DescriptionForSales;
    property GLCOGSSalaryAccount: WideString read Get_GLCOGSSalaryAccount write Set_GLCOGSSalaryAccount;
    property GLInventoryAccount: WideString read Get_GLInventoryAccount write Set_GLInventoryAccount;
    property GLSalesAccount: WideString read Get_GLSalesAccount write Set_GLSalesAccount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property ItemClass: Smallint read Get_ItemClass write Set_ItemClass;
    property ItemDescription: WideString read Get_ItemDescription write Set_ItemDescription;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property ItemNote: WideString read Get_ItemNote write Set_ItemNote;
    property ItemTaxType: Smallint read Get_ItemTaxType write Set_ItemTaxType;
    property ItemType: WideString read Get_ItemType write Set_ItemType;
    property Location: WideString read Get_Location write Set_Location;
    property MasterItemID: WideString read Get_MasterItemID write Set_MasterItemID;
    property MasterItemIndex: Integer read Get_MasterItemIndex write Set_MasterItemIndex;
    property MinimumStock: Double read Get_MinimumStock write Set_MinimumStock;
    property NotStockItem: WordBool read Get_NotStockItem write Set_NotStockItem;
    property NPrimaryAttributes: Integer read Get_NPrimaryAttributes write Set_NPrimaryAttributes;
    property NSecondaryAttributes: Integer read Get_NSecondaryAttributes write Set_NSecondaryAttributes;
    property NumberOfComponents: Smallint read Get_NumberOfComponents write Set_NumberOfComponents;
    property PriceLevel1Value[Index: Smallint]: Double read Get_PriceLevel1Value write Set_PriceLevel1Value;
    property PriceLevelIndex[Index: Smallint]: Smallint read Get_PriceLevelIndex write Set_PriceLevelIndex;
    property PriceLevelMethod[Index: Smallint]: Smallint read Get_PriceLevelMethod write Set_PriceLevelMethod;
    property PriceLevelMethodAmount[Index: Smallint]: Double read Get_PriceLevelMethodAmount write Set_PriceLevelMethodAmount;
    property PriceLevelName[Index: Smallint]: WideString read Get_PriceLevelName write Set_PriceLevelName;
    property PriceLevelPrice[Index: Smallint]: Double read Get_PriceLevelPrice write Set_PriceLevelPrice;
    property PriceLevelRounding[Index: Smallint]: Smallint read Get_PriceLevelRounding write Set_PriceLevelRounding;
    property PriceLevelSpecificCent[Index: Smallint]: Double read Get_PriceLevelSpecificCent write Set_PriceLevelSpecificCent;
    property PriceLevelUse[Index: Smallint]: Smallint read Get_PriceLevelUse write Set_PriceLevelUse;
    property PrimaryAttributeDesc[Index: Smallint]: WideString read Get_PrimaryAttributeDesc write Set_PrimaryAttributeDesc;
    property PrimaryAttributeID[Index: Smallint]: WideString read Get_PrimaryAttributeID write Set_PrimaryAttributeID;
    property PrimaryAttributeName: WideString read Get_PrimaryAttributeName write Set_PrimaryAttributeName;
    property PrintComponents: WordBool read Get_PrintComponents write Set_PrintComponents;
    property PurchasingGUID: WideString read Get_PurchasingGUID write Set_PurchasingGUID;
    property PurchasingUPC_SCC: WideString read Get_PurchasingUPC_SCC write Set_PurchasingUPC_SCC;
    property PurchasingWeight: Double read Get_PurchasingWeight write Set_PurchasingWeight;
    property QtyDiscGUID: WideString read Get_QtyDiscGUID write Set_QtyDiscGUID;
    property ReorderQuantity: Double read Get_ReorderQuantity write Set_ReorderQuantity;
    property Sales[Index: Smallint]: Double read Get_Sales write Set_Sales;
    property SalesGUID: WideString read Get_SalesGUID write Set_SalesGUID;
    property SalesPrice[Index: Smallint]: Double read Get_SalesPrice write Set_SalesPrice;
    property SalesUPC_SCC: WideString read Get_SalesUPC_SCC write Set_SalesUPC_SCC;
    property SalesWeight: Double read Get_SalesWeight write Set_SalesWeight;
    property SecondaryAttributeDesc[Index: Smallint]: WideString read Get_SecondaryAttributeDesc write Set_SecondaryAttributeDesc;
    property SecondaryAttributeID[Index: Smallint]: WideString read Get_SecondaryAttributeID write Set_SecondaryAttributeID;
    property SecondaryAttributeName: WideString read Get_SecondaryAttributeName write Set_SecondaryAttributeName;
    property SubjectToCommission: WordBool read Get_SubjectToCommission write Set_SubjectToCommission;
    property SubstockPrimaryAttributeDesc: WideString read Get_SubstockPrimaryAttributeDesc write Set_SubstockPrimaryAttributeDesc;
    property SubstockPrimaryAttributeID: WideString read Get_SubstockPrimaryAttributeID write Set_SubstockPrimaryAttributeID;
    property SubstockSecondaryAttributeDesc: WideString read Get_SubstockSecondaryAttributeDesc write Set_SubstockSecondaryAttributeDesc;
    property SubstockSecondaryAttributeID: WideString read Get_SubstockSecondaryAttributeID write Set_SubstockSecondaryAttributeID;
    property UnitOfMeasure: WideString read Get_UnitOfMeasure write Set_UnitOfMeasure;
    property UnitsSold[Index: Smallint]: Double read Get_UnitsSold write Set_UnitsSold;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property UPC_SKU: WideString read Get_UPC_SKU write Set_UPC_SKU;
    property UseMultiPacks: WordBool read Get_UseMultiPacks write Set_UseMultiPacks;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property Weight: Double read Get_Weight write Set_Weight;
    property WarrantyPeriod: Integer read Get_WarrantyPeriod write Set_WarrantyPeriod;
    property WarrantySpan: Integer read Get_WarrantySpan write Set_WarrantySpan;
  end;

// *********************************************************************//
// DispIntf:  _LineItemDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {84F73079-D468-42E8-BB31-E2700971AF0E}
// *********************************************************************//
  _LineItemDisp = dispinterface
    ['{84F73079-D468-42E8-BB31-E2700971AF0E}']
    function CloseFile: Smallint; dispid 1610809414;
    function OpenFile: Smallint; dispid 1610809415;
    function Delete: Smallint; dispid 1610809416;
    function FindByPercent: Integer; dispid 1610809417;
    function GetByPercent(Percent: Double): Smallint; dispid 1610809418;
    function GetEqual(const ID: WideString): Smallint; dispid 1610809419;
    function GetFirst: Smallint; dispid 1610809420;
    function GetForIndex(Index: Integer): Smallint; dispid 1610809421;
    function GetGreaterThan(const LineItemID: WideString): Smallint; dispid 1610809422;
    function GetGreaterThanOrEqual(const LineItemID: WideString): Smallint; dispid 1610809423;
    function GetLast: Smallint; dispid 1610809424;
    function GetLessThan(const LineItemID: WideString): Smallint; dispid 1610809425;
    function GetLessThanOrEqual(const LineItemID: WideString): Smallint; dispid 1610809426;
    function GetNext: Smallint; dispid 1610809427;
    function GetPrevious: Smallint; dispid 1610809428;
    function Insert: Smallint; dispid 1610809429;
    function RecordCount: Integer; dispid 1610809431;
    function StepFirst: Smallint; dispid 1610809432;
    function StepLast: Smallint; dispid 1610809433;
    function StepNext: Smallint; dispid 1610809434;
    function StepPrevious: Smallint; dispid 1610809435;
    function Update: Smallint; dispid 1610809436;
    property BuyerID: WideString dispid 1745027141;
    property ComponentIndex[Index: Smallint]: Integer dispid 1745027140;
    property ComponentQuantity[Index: Smallint]: Double dispid 1745027139;
    property Cost: Double dispid 1745027138;
    property CostingMethod: Byte dispid 1745027137;
    property CustomField[Index: Smallint]: WideString dispid 1745027136;
    property DefaultForPurchasing: WordBool dispid 1745027135;
    property DefaultForSales: WordBool dispid 1745027134;
    property DescriptionForPurchases: WideString dispid 1745027133;
    property DescriptionForSales: WideString dispid 1745027132;
    property GLCOGSSalaryAccount: WideString dispid 1745027131;
    property GLInventoryAccount: WideString dispid 1745027130;
    property GLSalesAccount: WideString dispid 1745027129;
    property GUID: WideString dispid 1745027128;
    property Inactive: WordBool dispid 1745027127;
    property Index: Integer dispid 1745027126;
    property ItemClass: Smallint dispid 1745027125;
    property ItemDescription: WideString dispid 1745027124;
    property ItemID: WideString dispid 1745027123;
    property ItemNote: WideString dispid 1745027122;
    property ItemTaxType: Smallint dispid 1745027121;
    property ItemType: WideString dispid 1745027120;
    property Location: WideString dispid 1745027119;
    property MasterItemID: WideString dispid 1745027118;
    property MasterItemIndex: Integer dispid 1745027117;
    property MinimumStock: Double dispid 1745027116;
    property NotStockItem: WordBool dispid 1745027115;
    property NPrimaryAttributes: Integer dispid 1745027114;
    property NSecondaryAttributes: Integer dispid 1745027113;
    property NumberOfComponents: Smallint dispid 1745027112;
    property PriceLevel1Value[Index: Smallint]: Double dispid 1745027111;
    property PriceLevelIndex[Index: Smallint]: Smallint dispid 1745027110;
    property PriceLevelMethod[Index: Smallint]: Smallint dispid 1745027109;
    property PriceLevelMethodAmount[Index: Smallint]: Double dispid 1745027108;
    property PriceLevelName[Index: Smallint]: WideString dispid 1745027107;
    property PriceLevelPrice[Index: Smallint]: Double dispid 1745027106;
    property PriceLevelRounding[Index: Smallint]: Smallint dispid 1745027105;
    property PriceLevelSpecificCent[Index: Smallint]: Double dispid 1745027104;
    property PriceLevelUse[Index: Smallint]: Smallint dispid 1745027103;
    property PrimaryAttributeDesc[Index: Smallint]: WideString dispid 1745027102;
    property PrimaryAttributeID[Index: Smallint]: WideString dispid 1745027101;
    property PrimaryAttributeName: WideString dispid 1745027100;
    property PrintComponents: WordBool dispid 1745027099;
    property PurchasingGUID: WideString dispid 1745027098;
    property PurchasingUPC_SCC: WideString dispid 1745027097;
    property PurchasingWeight: Double dispid 1745027096;
    property QtyDiscGUID: WideString dispid 1745027095;
    property ReorderQuantity: Double dispid 1745027094;
    property Sales[Index: Smallint]: Double dispid 1745027093;
    property SalesGUID: WideString dispid 1745027092;
    property SalesPrice[Index: Smallint]: Double dispid 1745027091;
    property SalesUPC_SCC: WideString dispid 1745027090;
    property SalesWeight: Double dispid 1745027089;
    property SecondaryAttributeDesc[Index: Smallint]: WideString dispid 1745027088;
    property SecondaryAttributeID[Index: Smallint]: WideString dispid 1745027087;
    property SecondaryAttributeName: WideString dispid 1745027086;
    property SubjectToCommission: WordBool dispid 1745027085;
    property SubstockPrimaryAttributeDesc: WideString dispid 1745027084;
    property SubstockPrimaryAttributeID: WideString dispid 1745027083;
    property SubstockSecondaryAttributeDesc: WideString dispid 1745027082;
    property SubstockSecondaryAttributeID: WideString dispid 1745027081;
    property UnitOfMeasure: WideString dispid 1745027080;
    property UnitsSold[Index: Smallint]: Double dispid 1745027079;
    property Unused1: Byte dispid 1745027078;
    property UPC_SKU: WideString dispid 1745027077;
    property UseMultiPacks: WordBool dispid 1745027076;
    property VendorIndex: Integer dispid 1745027075;
    property Weight: Double dispid 1745027074;
    property WarrantyPeriod: Integer dispid 1745027073;
    property WarrantySpan: Integer dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _GeneralData
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2CE67D67-2EE7-409B-9F42-C466E56E4B09}
// *********************************************************************//
  _GeneralData = interface(IDispatch)
    ['{2CE67D67-2EE7-409B-9F42-C466E56E4B09}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Read: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_BankRecAccount: WideString; safecall;
    procedure Set_BankRecAccount(const Param1: WideString); safecall;
    function Get_BatchEntryCount(Index: Smallint): Smallint; safecall;
    procedure Set_BatchEntryCount(Index: Smallint; Param2: Smallint); safecall;
    function Get_BatchFlag(Index: Smallint): Byte; safecall;
    procedure Set_BatchFlag(Index: Smallint; Param2: Byte); safecall;
    function Get_BBEquityAccount: WideString; safecall;
    procedure Set_BBEquityAccount(const Param1: WideString); safecall;
    function Get_CalendarYear: Smallint; safecall;
    procedure Set_CalendarYear(Param1: Smallint); safecall;
    function Get_CurrentPeriod: Smallint; safecall;
    function Get_DateLastPurge: OleVariant; safecall;
    procedure Set_DateLastPurge(Param1: OleVariant); safecall;
    function Get_LastActRecAccnt: WideString; safecall;
    procedure Set_LastActRecAccnt(const Param1: WideString); safecall;
    function Get_LastPostOrderNumber: Integer; safecall;
    procedure Set_LastPostOrderNumber(Param1: Integer); safecall;
    function Get_NumberOfPeriods: Smallint; safecall;
    procedure Set_NumberOfPeriods(Param1: Smallint); safecall;
    function Get_OldestPO: OleVariant; safecall;
    procedure Set_OldestPO(Param1: OleVariant); safecall;
    function Get_OldestQuote: OleVariant; safecall;
    procedure Set_OldestQuote(Param1: OleVariant); safecall;
    function Get_OldestUnpostedTrx: OleVariant; safecall;
    procedure Set_OldestUnpostedTrx(Param1: OleVariant); safecall;
    function Get_PeriodEndDate(Index: Smallint): OleVariant; safecall;
    procedure Set_PeriodEndDate(Index: Smallint; Param2: OleVariant); safecall;
    function Get_PeriodStartDate(Index: Smallint): OleVariant; safecall;
    procedure Set_PeriodStartDate(Index: Smallint; Param2: OleVariant); safecall;
    function Get_PriorPeriod: Smallint; safecall;
    procedure Set_PriorPeriod(Param1: Smallint); safecall;
    function Get_RoundingAccount: WideString; safecall;
    procedure Set_RoundingAccount(const Param1: WideString); safecall;
    function Get_Ten99UnprintedNextYear: WordBool; safecall;
    procedure Set_Ten99UnprintedNextYear(Param1: WordBool); safecall;
    function Get_Ten99UnprintedThisYear: WordBool; safecall;
    procedure Set_Ten99UnprintedThisYear(Param1: WordBool); safecall;
    function Get_UnidentifiedAccount1: WideString; safecall;
    procedure Set_UnidentifiedAccount1(const Param1: WideString); safecall;
    function Get_UnidentifiedAccount2: WideString; safecall;
    procedure Set_UnidentifiedAccount2(const Param1: WideString); safecall;
    function Get_UnidentifiedDate: OleVariant; safecall;
    procedure Set_UnidentifiedDate(Param1: OleVariant); safecall;
    function Get_UnpostedFlag: Byte; safecall;
    procedure Set_UnpostedFlag(Param1: Byte); safecall;
    function Get_UnusedDate1: OleVariant; safecall;
    procedure Set_UnusedDate1(Param1: OleVariant); safecall;
    function Get_UnusedDate2: OleVariant; safecall;
    procedure Set_UnusedDate2(Param1: OleVariant); safecall;
    function Get_Unused1(Index: Smallint): Byte; safecall;
    procedure Set_Unused1(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused3(Index: Smallint): Byte; safecall;
    procedure Set_Unused3(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused4: Byte; safecall;
    procedure Set_Unused4(Param1: Byte); safecall;
    function Get_Unknown5: Byte; safecall;
    procedure Set_Unknown5(Param1: Byte); safecall;
    function Get_Unused6(Index: Smallint): Byte; safecall;
    procedure Set_Unused6(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused7(Index: Smallint): Byte; safecall;
    procedure Set_Unused7(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown8: Byte; safecall;
    procedure Set_Unknown8(Param1: Byte); safecall;
    function Get_Unused9(Index: Smallint): Byte; safecall;
    procedure Set_Unused9(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused10: Byte; safecall;
    procedure Set_Unused10(Param1: Byte); safecall;
    function Get_Unknown11(Index: Smallint): Byte; safecall;
    procedure Set_Unknown11(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown12(Index: Smallint): Byte; safecall;
    procedure Set_Unknown12(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused13(Index: Smallint): Byte; safecall;
    procedure Set_Unused13(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown14(Index: Smallint): Byte; safecall;
    procedure Set_Unknown14(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused15(Index: Smallint): Byte; safecall;
    procedure Set_Unused15(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown16(Index: Smallint): Byte; safecall;
    procedure Set_Unknown16(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused17(Index: Smallint): Byte; safecall;
    procedure Set_Unused17(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused18: Byte; safecall;
    procedure Set_Unused18(Param1: Byte); safecall;
    function Get_Unused19: Byte; safecall;
    procedure Set_Unused19(Param1: Byte); safecall;
    function Get_Version: WideString; safecall;
    function Get_W2UnprintedNextYear: WordBool; safecall;
    procedure Set_W2UnprintedNextYear(Param1: WordBool); safecall;
    function Get_W2UnprintedThisYear: WordBool; safecall;
    procedure Set_W2UnprintedThisYear(Param1: WordBool); safecall;
    function Get_YearlyGLPrintedNextYear: WordBool; safecall;
    procedure Set_YearlyGLPrintedNextYear(Param1: WordBool); safecall;
    function Get_YearlyGLPrintedThisYear: WordBool; safecall;
    procedure Set_YearlyGLPrintedThisYear(Param1: WordBool); safecall;
    property BankRecAccount: WideString read Get_BankRecAccount write Set_BankRecAccount;
    property BatchEntryCount[Index: Smallint]: Smallint read Get_BatchEntryCount write Set_BatchEntryCount;
    property BatchFlag[Index: Smallint]: Byte read Get_BatchFlag write Set_BatchFlag;
    property BBEquityAccount: WideString read Get_BBEquityAccount write Set_BBEquityAccount;
    property CalendarYear: Smallint read Get_CalendarYear write Set_CalendarYear;
    property CurrentPeriod: Smallint read Get_CurrentPeriod;
    property DateLastPurge: OleVariant read Get_DateLastPurge write Set_DateLastPurge;
    property LastActRecAccnt: WideString read Get_LastActRecAccnt write Set_LastActRecAccnt;
    property LastPostOrderNumber: Integer read Get_LastPostOrderNumber write Set_LastPostOrderNumber;
    property NumberOfPeriods: Smallint read Get_NumberOfPeriods write Set_NumberOfPeriods;
    property OldestPO: OleVariant read Get_OldestPO write Set_OldestPO;
    property OldestQuote: OleVariant read Get_OldestQuote write Set_OldestQuote;
    property OldestUnpostedTrx: OleVariant read Get_OldestUnpostedTrx write Set_OldestUnpostedTrx;
    property PeriodEndDate[Index: Smallint]: OleVariant read Get_PeriodEndDate write Set_PeriodEndDate;
    property PeriodStartDate[Index: Smallint]: OleVariant read Get_PeriodStartDate write Set_PeriodStartDate;
    property PriorPeriod: Smallint read Get_PriorPeriod write Set_PriorPeriod;
    property RoundingAccount: WideString read Get_RoundingAccount write Set_RoundingAccount;
    property Ten99UnprintedNextYear: WordBool read Get_Ten99UnprintedNextYear write Set_Ten99UnprintedNextYear;
    property Ten99UnprintedThisYear: WordBool read Get_Ten99UnprintedThisYear write Set_Ten99UnprintedThisYear;
    property UnidentifiedAccount1: WideString read Get_UnidentifiedAccount1 write Set_UnidentifiedAccount1;
    property UnidentifiedAccount2: WideString read Get_UnidentifiedAccount2 write Set_UnidentifiedAccount2;
    property UnidentifiedDate: OleVariant read Get_UnidentifiedDate write Set_UnidentifiedDate;
    property UnpostedFlag: Byte read Get_UnpostedFlag write Set_UnpostedFlag;
    property UnusedDate1: OleVariant read Get_UnusedDate1 write Set_UnusedDate1;
    property UnusedDate2: OleVariant read Get_UnusedDate2 write Set_UnusedDate2;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3[Index: Smallint]: Byte read Get_Unused3 write Set_Unused3;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property Unknown5: Byte read Get_Unknown5 write Set_Unknown5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property Unused7[Index: Smallint]: Byte read Get_Unused7 write Set_Unused7;
    property Unknown8: Byte read Get_Unknown8 write Set_Unknown8;
    property Unused9[Index: Smallint]: Byte read Get_Unused9 write Set_Unused9;
    property Unused10: Byte read Get_Unused10 write Set_Unused10;
    property Unknown11[Index: Smallint]: Byte read Get_Unknown11 write Set_Unknown11;
    property Unknown12[Index: Smallint]: Byte read Get_Unknown12 write Set_Unknown12;
    property Unused13[Index: Smallint]: Byte read Get_Unused13 write Set_Unused13;
    property Unknown14[Index: Smallint]: Byte read Get_Unknown14 write Set_Unknown14;
    property Unused15[Index: Smallint]: Byte read Get_Unused15 write Set_Unused15;
    property Unknown16[Index: Smallint]: Byte read Get_Unknown16 write Set_Unknown16;
    property Unused17[Index: Smallint]: Byte read Get_Unused17 write Set_Unused17;
    property Unused18: Byte read Get_Unused18 write Set_Unused18;
    property Unused19: Byte read Get_Unused19 write Set_Unused19;
    property Version: WideString read Get_Version;
    property W2UnprintedNextYear: WordBool read Get_W2UnprintedNextYear write Set_W2UnprintedNextYear;
    property W2UnprintedThisYear: WordBool read Get_W2UnprintedThisYear write Set_W2UnprintedThisYear;
    property YearlyGLPrintedNextYear: WordBool read Get_YearlyGLPrintedNextYear write Set_YearlyGLPrintedNextYear;
    property YearlyGLPrintedThisYear: WordBool read Get_YearlyGLPrintedThisYear write Set_YearlyGLPrintedThisYear;
  end;

// *********************************************************************//
// DispIntf:  _GeneralDataDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2CE67D67-2EE7-409B-9F42-C466E56E4B09}
// *********************************************************************//
  _GeneralDataDisp = dispinterface
    ['{2CE67D67-2EE7-409B-9F42-C466E56E4B09}']
    function CloseFile: Smallint; dispid 1610809393;
    function OpenFile: Smallint; dispid 1610809394;
    function Read: Smallint; dispid 1610809395;
    function Update: Smallint; dispid 1610809396;
    property BankRecAccount: WideString dispid 1745027120;
    property BatchEntryCount[Index: Smallint]: Smallint dispid 1745027119;
    property BatchFlag[Index: Smallint]: Byte dispid 1745027118;
    property BBEquityAccount: WideString dispid 1745027117;
    property CalendarYear: Smallint dispid 1745027116;
    property CurrentPeriod: Smallint readonly dispid 1745027115;
    property DateLastPurge: OleVariant dispid 1745027114;
    property LastActRecAccnt: WideString dispid 1745027113;
    property LastPostOrderNumber: Integer dispid 1745027112;
    property NumberOfPeriods: Smallint dispid 1745027111;
    property OldestPO: OleVariant dispid 1745027110;
    property OldestQuote: OleVariant dispid 1745027109;
    property OldestUnpostedTrx: OleVariant dispid 1745027108;
    property PeriodEndDate[Index: Smallint]: OleVariant dispid 1745027107;
    property PeriodStartDate[Index: Smallint]: OleVariant dispid 1745027106;
    property PriorPeriod: Smallint dispid 1745027105;
    property RoundingAccount: WideString dispid 1745027104;
    property Ten99UnprintedNextYear: WordBool dispid 1745027103;
    property Ten99UnprintedThisYear: WordBool dispid 1745027102;
    property UnidentifiedAccount1: WideString dispid 1745027101;
    property UnidentifiedAccount2: WideString dispid 1745027100;
    property UnidentifiedDate: OleVariant dispid 1745027099;
    property UnpostedFlag: Byte dispid 1745027098;
    property UnusedDate1: OleVariant dispid 1745027097;
    property UnusedDate2: OleVariant dispid 1745027096;
    property Unused1[Index: Smallint]: Byte dispid 1745027095;
    property Unused2[Index: Smallint]: Byte dispid 1745027094;
    property Unused3[Index: Smallint]: Byte dispid 1745027093;
    property Unused4: Byte dispid 1745027092;
    property Unknown5: Byte dispid 1745027091;
    property Unused6[Index: Smallint]: Byte dispid 1745027090;
    property Unused7[Index: Smallint]: Byte dispid 1745027089;
    property Unknown8: Byte dispid 1745027088;
    property Unused9[Index: Smallint]: Byte dispid 1745027087;
    property Unused10: Byte dispid 1745027086;
    property Unknown11[Index: Smallint]: Byte dispid 1745027085;
    property Unknown12[Index: Smallint]: Byte dispid 1745027084;
    property Unused13[Index: Smallint]: Byte dispid 1745027083;
    property Unknown14[Index: Smallint]: Byte dispid 1745027082;
    property Unused15[Index: Smallint]: Byte dispid 1745027081;
    property Unknown16[Index: Smallint]: Byte dispid 1745027080;
    property Unused17[Index: Smallint]: Byte dispid 1745027079;
    property Unused18: Byte dispid 1745027078;
    property Unused19: Byte dispid 1745027077;
    property Version: WideString readonly dispid 1745027076;
    property W2UnprintedNextYear: WordBool dispid 1745027075;
    property W2UnprintedThisYear: WordBool dispid 1745027074;
    property YearlyGLPrintedNextYear: WordBool dispid 1745027073;
    property YearlyGLPrintedThisYear: WordBool dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _SelectCustomer
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {83AB11CD-FFCB-4AB6-85E0-D0B2171120A2}
// *********************************************************************//
  _SelectCustomer = interface(IDispatch)
    ['{83AB11CD-FFCB-4AB6-85E0-D0B2171120A2}']
    function ShowOpen: OleVariant; safecall;
    function Get_CustomerID: WideString; safecall;
    procedure Set_CustomerID(const Param1: WideString); safecall;
    procedure Set_ExcludeInactive(Param1: WordBool); safecall;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; safecall;
    property CustomerID: WideString read Get_CustomerID write Set_CustomerID;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
  end;

// *********************************************************************//
// DispIntf:  _SelectCustomerDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {83AB11CD-FFCB-4AB6-85E0-D0B2171120A2}
// *********************************************************************//
  _SelectCustomerDisp = dispinterface
    ['{83AB11CD-FFCB-4AB6-85E0-D0B2171120A2}']
    function ShowOpen: OleVariant; dispid 1610809346;
    property CustomerID: WideString dispid 1745027073;
    property ExcludeInactive: WordBool writeonly dispid 1745027072;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; dispid 1610809347;
  end;

// *********************************************************************//
// Interface: _SelectDate
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7131E671-4312-4354-ABAF-5E9D70118986}
// *********************************************************************//
  _SelectDate = interface(IDispatch)
    ['{7131E671-4312-4354-ABAF-5E9D70118986}']
    function ShowOpen: OleVariant; safecall;
    function Get_SelectedDate: OleVariant; safecall;
    procedure Set_SelectedDate(Param1: OleVariant); safecall;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; safecall;
    property SelectedDate: OleVariant read Get_SelectedDate write Set_SelectedDate;
  end;

// *********************************************************************//
// DispIntf:  _SelectDateDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7131E671-4312-4354-ABAF-5E9D70118986}
// *********************************************************************//
  _SelectDateDisp = dispinterface
    ['{7131E671-4312-4354-ABAF-5E9D70118986}']
    function ShowOpen: OleVariant; dispid 1610809345;
    property SelectedDate: OleVariant dispid 1745027072;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; dispid 1610809346;
  end;

// *********************************************************************//
// Interface: _SelectSalesTaxCode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6560FBC2-03A4-42E2-B388-FA05700FB5B3}
// *********************************************************************//
  _SelectSalesTaxCode = interface(IDispatch)
    ['{6560FBC2-03A4-42E2-B388-FA05700FB5B3}']
    function ShowOpen: OleVariant; safecall;
    function Get_SalesTaxCode: WideString; safecall;
    procedure Set_SalesTaxCode(const Param1: WideString); safecall;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; safecall;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
  end;

// *********************************************************************//
// DispIntf:  _SelectSalesTaxCodeDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6560FBC2-03A4-42E2-B388-FA05700FB5B3}
// *********************************************************************//
  _SelectSalesTaxCodeDisp = dispinterface
    ['{6560FBC2-03A4-42E2-B388-FA05700FB5B3}']
    function ShowOpen: OleVariant; dispid 1610809345;
    property SalesTaxCode: WideString dispid 1745027072;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; dispid 1610809346;
  end;

// *********************************************************************//
// Interface: _DefaultShipMethod
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {017D5A7E-C77F-4C99-9B8B-7FC70B4975AE}
// *********************************************************************//
  _DefaultShipMethod = interface(IDispatch)
    ['{017D5A7E-C77F-4C99-9B8B-7FC70B4975AE}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Read: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Description(Index: Smallint): WideString; safecall;
    procedure Set_Description(Index: Smallint; const Param2: WideString); safecall;
    property Description[Index: Smallint]: WideString read Get_Description write Set_Description;
  end;

// *********************************************************************//
// DispIntf:  _DefaultShipMethodDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {017D5A7E-C77F-4C99-9B8B-7FC70B4975AE}
// *********************************************************************//
  _DefaultShipMethodDisp = dispinterface
    ['{017D5A7E-C77F-4C99-9B8B-7FC70B4975AE}']
    function CloseFile: Smallint; dispid 1610809345;
    function OpenFile: Smallint; dispid 1610809346;
    function Read: Smallint; dispid 1610809347;
    function Update: Smallint; dispid 1610809348;
    property Description[Index: Smallint]: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _SelectSalesRep
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {420F9F2E-15E6-422E-84AA-E3CC2AD0D0B5}
// *********************************************************************//
  _SelectSalesRep = interface(IDispatch)
    ['{420F9F2E-15E6-422E-84AA-E3CC2AD0D0B5}']
    function ShowOpen: OleVariant; safecall;
    function Get_EmployeeID: WideString; safecall;
    procedure Set_EmployeeID(const Param1: WideString); safecall;
    procedure Set_ExcludeInactive(Param1: WordBool); safecall;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; safecall;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
  end;

// *********************************************************************//
// DispIntf:  _SelectSalesRepDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {420F9F2E-15E6-422E-84AA-E3CC2AD0D0B5}
// *********************************************************************//
  _SelectSalesRepDisp = dispinterface
    ['{420F9F2E-15E6-422E-84AA-E3CC2AD0D0B5}']
    function ShowOpen: OleVariant; dispid 1610809346;
    property EmployeeID: WideString dispid 1745027073;
    property ExcludeInactive: WordBool writeonly dispid 1745027072;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; dispid 1610809347;
  end;

// *********************************************************************//
// Interface: _SelectAccount
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3E7726C7-B33F-4DB8-9A41-36C1AC345AE0}
// *********************************************************************//
  _SelectAccount = interface(IDispatch)
    ['{3E7726C7-B33F-4DB8-9A41-36C1AC345AE0}']
    function ShowOpen: OleVariant; safecall;
    function Get_AccountID: WideString; safecall;
    procedure Set_AccountID(const Param1: WideString); safecall;
    procedure Set_ExcludeInactive(Param1: WordBool); safecall;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; safecall;
    property AccountID: WideString read Get_AccountID write Set_AccountID;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
  end;

// *********************************************************************//
// DispIntf:  _SelectAccountDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3E7726C7-B33F-4DB8-9A41-36C1AC345AE0}
// *********************************************************************//
  _SelectAccountDisp = dispinterface
    ['{3E7726C7-B33F-4DB8-9A41-36C1AC345AE0}']
    function ShowOpen: OleVariant; dispid 1610809346;
    property AccountID: WideString dispid 1745027073;
    property ExcludeInactive: WordBool writeonly dispid 1745027072;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; dispid 1610809347;
  end;

// *********************************************************************//
// Interface: _SalesJournal
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0FD1CB59-0033-4910-8CED-73E4953443C2}
// *********************************************************************//
  _SalesJournal = interface(IDispatch)
    ['{0FD1CB59-0033-4910-8CED-73E4953443C2}']
    function ClearRecord: Smallint; safecall;
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(NRecord: Integer): Smallint; safecall;
    function GetForInvoice(const Invoice: WideString): Smallint; safecall;
    function IncrementBatchCount: Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function ReadFirst(Period: Smallint): Smallint; safecall;
    function ReadFirstForCustomer(Index: Integer): Smallint; safecall;
    function ReadNext: Smallint; safecall;
    function ReadNextByCustomer: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AmountReceived: Double; safecall;
    procedure Set_AmountReceived(Param1: Double); safecall;
    function Get_ARAccount: WideString; safecall;
    procedure Set_ARAccount(const Param1: WideString); safecall;
    function Get_ARAmount: Double; safecall;
    procedure Set_ARAmount(Param1: Double); safecall;
    function Get_BeginningBalanceFlag: WordBool; safecall;
    procedure Set_BeginningBalanceFlag(Param1: WordBool); safecall;
    function Get_CloseSalesOrder: WordBool; safecall;
    procedure Set_CloseSalesOrder(Param1: WordBool); safecall;
    function Get_CustomerIndex: Integer; safecall;
    procedure Set_CustomerIndex(Param1: Integer); safecall;
    function Get_CustomerName: WideString; safecall;
    procedure Set_CustomerName(const Param1: WideString); safecall;
    function Get_CustomerPO: WideString; safecall;
    procedure Set_CustomerPO(const Param1: WideString); safecall;
    function Get_DateCleared: OleVariant; safecall;
    procedure Set_DateCleared(Param1: OleVariant); safecall;
    function Get_DateDue: OleVariant; safecall;
    procedure Set_DateDue(Param1: OleVariant); safecall;
    function Get_DetailAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailApplyToSO(Index: Smallint): WordBool; safecall;
    procedure Set_DetailApplyToSO(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailCostIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailCostOfSalesAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailCostOfSalesAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailCostOfSalesAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool; safecall;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailCustomerIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCustomerIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailDescription(Index: Smallint): WideString; safecall;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailDisplayedLine(Index: Smallint): Smallint; safecall;
    procedure Set_DetailDisplayedLine(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailFlag1(Index: Smallint): WordBool; safecall;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailFreightFlag(Index: Smallint): WordBool; safecall;
    procedure Set_DetailFreightFlag(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailInventoryAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailInvoiceNRecord(Index: Smallint): Integer; safecall;
    procedure Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailInvoicePaid(Index: Smallint): WideString; safecall;
    procedure Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailItemIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailJobIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailLineNo(Index: Smallint): Smallint; safecall;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailPhaseIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailSalesTaxAuthority(Index: Smallint): WideString; safecall;
    procedure Set_DetailSalesTaxAuthority(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailSOLine(Index: Smallint): Smallint; safecall;
    procedure Set_DetailSOLine(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailStockingQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailTaxType(Index: Smallint): Smallint; safecall;
    procedure Set_DetailTaxType(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailTrxType(Index: Smallint): Integer; safecall;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailUMGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailUnused1(Index: Smallint): Byte; safecall;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Byte); safecall;
    function Get_DiscountAmount: Double; safecall;
    procedure Set_DiscountAmount(Param1: Double); safecall;
    function Get_DiscountDate: OleVariant; safecall;
    procedure Set_DiscountDate(Param1: OleVariant); safecall;
    function Get_DropShip: WordBool; safecall;
    procedure Set_DropShip(Param1: WordBool); safecall;
    function Get_DropShipCustomerIndex: Integer; safecall;
    procedure Set_DropShipCustomerIndex(Param1: Integer); safecall;
    function Get_DropShipInvNo: WideString; safecall;
    procedure Set_DropShipInvNo(const Param1: WideString); safecall;
    function Get_EditCount: Integer; safecall;
    procedure Set_EditCount(Param1: Integer); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_HasPartner: WordBool; safecall;
    procedure Set_HasPartner(Param1: WordBool); safecall;
    function Get_InternalNote: WideString; safecall;
    procedure Set_InternalNote(const Param1: WideString); safecall;
    function Get_InvoiceNumber: WideString; safecall;
    procedure Set_InvoiceNumber(const Param1: WideString); safecall;
    function Get_JournalCode: WideString; safecall;
    procedure Set_JournalCode(const Param1: WideString); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_JrnlTypeEx: Integer; safecall;
    procedure Set_JrnlTypeEx(Param1: Integer); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_MainAccount: WideString; safecall;
    procedure Set_MainAccount(const Param1: WideString); safecall;
    function Get_MaxNRecord: Integer; safecall;
    function Get_MaxTrxNumber(Period: Smallint): Smallint; safecall;
    function Get_MaxTrxNumberL(Period: Smallint): Integer; safecall;
    function Get_NDistributions: Smallint; safecall;
    procedure Set_NDistributions(Param1: Smallint); safecall;
    function Get_NextInvoiceNumber: WideString; safecall;
    procedure Set_NextInvoiceNumber(const Param1: WideString); safecall;
    function Get_NextQuoteNumber: WideString; safecall;
    procedure Set_NextSONumber(const Param1: WideString); safecall;
    function Get_Note: WideString; safecall;
    procedure Set_Note(const Param1: WideString); safecall;
    function Get_NotePrintsAfterItems: WordBool; safecall;
    procedure Set_NotePrintsAfterItems(Param1: WordBool); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_NumOrderLines: Smallint; safecall;
    procedure Set_NumOrderLines(Param1: Smallint); safecall;
    function Get_PaymentDate: OleVariant; safecall;
    procedure Set_PaymentDate(Param1: OleVariant); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_Posted: WordBool; safecall;
    procedure Set_Posted(Param1: WordBool); safecall;
    function Get_Prepayment: WordBool; safecall;
    procedure Set_Prepayment(Param1: WordBool); safecall;
    function Get_PrintBeforeInvoiceReference: WordBool; safecall;
    procedure Set_PrintBeforeInvoiceReference(Param1: WordBool); safecall;
    function Get_Quote: WordBool; safecall;
    procedure Set_Quote(Param1: WordBool); safecall;
    function Get_QuoteGoodThruDate: OleVariant; safecall;
    procedure Set_QuoteGoodThruDate(Param1: OleVariant); safecall;
    function Get_QuoteNumber: WideString; safecall;
    procedure Set_QuoteNumber(const Param1: WideString); safecall;
    function Get_ReceiptDate: OleVariant; safecall;
    procedure Set_ReceiptDate(Param1: OleVariant); safecall;
    function Get_RecurrenceIndex: Integer; safecall;
    procedure Set_RecurrenceIndex(Param1: Integer); safecall;
    function Get_RecurrenceRate: Smallint; safecall;
    procedure Set_RecurrenceRate(Param1: Smallint); safecall;
    function Get_ReimbursableExpense: WordBool; safecall;
    procedure Set_ReimbursableExpense(Param1: WordBool); safecall;
    function Get_ReturnAuthorization: WideString; safecall;
    procedure Set_ReturnAuthorization(const Param1: WideString); safecall;
    function Get_SalesRepID: WideString; safecall;
    procedure Set_SalesRepID(const Param1: WideString); safecall;
    function Get_SalesTaxCode: WideString; safecall;
    procedure Set_SalesTaxCode(const Param1: WideString); safecall;
    function Get_ShipDate: OleVariant; safecall;
    procedure Set_ShipDate(Param1: OleVariant); safecall;
    function Get_ShipToAddr1: WideString; safecall;
    procedure Set_ShipToAddr1(const Param1: WideString); safecall;
    function Get_ShipToAddr2: WideString; safecall;
    procedure Set_ShipToAddr2(const Param1: WideString); safecall;
    function Get_ShipToCity: WideString; safecall;
    procedure Set_ShipToCity(const Param1: WideString); safecall;
    function Get_ShipToCountry: WideString; safecall;
    procedure Set_ShipToCountry(const Param1: WideString); safecall;
    function Get_ShipToName: WideString; safecall;
    procedure Set_ShipToName(const Param1: WideString); safecall;
    function Get_ShipToState: WideString; safecall;
    procedure Set_ShipToState(const Param1: WideString); safecall;
    function Get_ShipToZipCode: WideString; safecall;
    procedure Set_ShipToZipCode(const Param1: WideString); safecall;
    function Get_ShipVia: WideString; safecall;
    procedure Set_ShipVia(const Param1: WideString); safecall;
    function Get_SONo: WideString; safecall;
    procedure Set_SONo(const Param1: WideString); safecall;
    function Get_StatementNote: WideString; safecall;
    procedure Set_StatementNote(const Param1: WideString); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_Terms: WideString; safecall;
    procedure Set_Terms(const Param1: WideString); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_TrxNumberL: Integer; safecall;
    procedure Set_TrxNumberL(Param1: Integer); safecall;
    function Get_TrxVoidedBy: Integer; safecall;
    procedure Set_TrxVoidedBy(Param1: Integer); safecall;
    function Get_Unused1: Byte; safecall;
    procedure Set_Unused1(Param1: Byte); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused3(Index: Smallint): Byte; safecall;
    procedure Set_Unused3(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused4: Byte; safecall;
    procedure Set_Unused4(Param1: Byte); safecall;
    function Get_Unused5(Index: Smallint): Byte; safecall;
    procedure Set_Unused5(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused6(Index: Smallint): Byte; safecall;
    procedure Set_Unused6(Index: Smallint; Param2: Byte); safecall;
    property AmountReceived: Double read Get_AmountReceived write Set_AmountReceived;
    property ARAccount: WideString read Get_ARAccount write Set_ARAccount;
    property ARAmount: Double read Get_ARAmount write Set_ARAmount;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CloseSalesOrder: WordBool read Get_CloseSalesOrder write Set_CloseSalesOrder;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property CustomerPO: WideString read Get_CustomerPO write Set_CustomerPO;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DateDue: OleVariant read Get_DateDue write Set_DateDue;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailApplyToSO[Index: Smallint]: WordBool read Get_DetailApplyToSO write Set_DetailApplyToSO;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCostOfSalesAccount[Index: Smallint]: WideString read Get_DetailCostOfSalesAccount write Set_DetailCostOfSalesAccount;
    property DetailCostOfSalesAmount[Index: Smallint]: Double read Get_DetailCostOfSalesAmount write Set_DetailCostOfSalesAmount;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool read Get_DetailCostOfSalesTrx write Set_DetailCostOfSalesTrx;
    property DetailCustomerIndex[Index: Smallint]: Integer read Get_DetailCustomerIndex write Set_DetailCustomerIndex;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailDisplayedLine[Index: Smallint]: Smallint read Get_DetailDisplayedLine write Set_DetailDisplayedLine;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailFreightFlag[Index: Smallint]: WordBool read Get_DetailFreightFlag write Set_DetailFreightFlag;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailInventoryAccount[Index: Smallint]: WideString read Get_DetailInventoryAccount write Set_DetailInventoryAccount;
    property DetailInvoiceNRecord[Index: Smallint]: Integer read Get_DetailInvoiceNRecord write Set_DetailInvoiceNRecord;
    property DetailInvoicePaid[Index: Smallint]: WideString read Get_DetailInvoicePaid write Set_DetailInvoicePaid;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailSalesTaxAuthority[Index: Smallint]: WideString read Get_DetailSalesTaxAuthority write Set_DetailSalesTaxAuthority;
    property DetailSOLine[Index: Smallint]: Smallint read Get_DetailSOLine write Set_DetailSOLine;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTaxType[Index: Smallint]: Smallint read Get_DetailTaxType write Set_DetailTaxType;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUMGUID[Index: Smallint]: WideString read Get_DetailUMGUID write Set_DetailUMGUID;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnused1[Index: Smallint]: Byte read Get_DetailUnused1 write Set_DetailUnused1;
    property DiscountAmount: Double read Get_DiscountAmount write Set_DiscountAmount;
    property DiscountDate: OleVariant read Get_DiscountDate write Set_DiscountDate;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property DropShipInvNo: WideString read Get_DropShipInvNo write Set_DropShipInvNo;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasPartner: WordBool read Get_HasPartner write Set_HasPartner;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property InvoiceNumber: WideString read Get_InvoiceNumber write Set_InvoiceNumber;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property JrnlTypeEx: Integer read Get_JrnlTypeEx write Set_JrnlTypeEx;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NextInvoiceNumber: WideString read Get_NextInvoiceNumber write Set_NextInvoiceNumber;
    property NextQuoteNumber: WideString read Get_NextQuoteNumber;
    property NextSONumber: WideString write Set_NextSONumber;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumOrderLines: Smallint read Get_NumOrderLines write Set_NumOrderLines;
    property PaymentDate: OleVariant read Get_PaymentDate write Set_PaymentDate;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property PrintBeforeInvoiceReference: WordBool read Get_PrintBeforeInvoiceReference write Set_PrintBeforeInvoiceReference;
    property Quote: WordBool read Get_Quote write Set_Quote;
    property QuoteGoodThruDate: OleVariant read Get_QuoteGoodThruDate write Set_QuoteGoodThruDate;
    property QuoteNumber: WideString read Get_QuoteNumber write Set_QuoteNumber;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property ReturnAuthorization: WideString read Get_ReturnAuthorization write Set_ReturnAuthorization;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property ShipDate: OleVariant read Get_ShipDate write Set_ShipDate;
    property ShipToAddr1: WideString read Get_ShipToAddr1 write Set_ShipToAddr1;
    property ShipToAddr2: WideString read Get_ShipToAddr2 write Set_ShipToAddr2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property SONo: WideString read Get_SONo write Set_SONo;
    property StatementNote: WideString read Get_StatementNote write Set_StatementNote;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property TrxVoidedBy: Integer read Get_TrxVoidedBy write Set_TrxVoidedBy;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3[Index: Smallint]: Byte read Get_Unused3 write Set_Unused3;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
  end;

// *********************************************************************//
// DispIntf:  _SalesJournalDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0FD1CB59-0033-4910-8CED-73E4953443C2}
// *********************************************************************//
  _SalesJournalDisp = dispinterface
    ['{0FD1CB59-0033-4910-8CED-73E4953443C2}']
    function ClearRecord: Smallint; dispid 1610809449;
    function CloseFile: Smallint; dispid 1610809450;
    function Delete: Smallint; dispid 1610809451;
    function GetEqual(NRecord: Integer): Smallint; dispid 1610809452;
    function GetForInvoice(const Invoice: WideString): Smallint; dispid 1610809453;
    function IncrementBatchCount: Smallint; dispid 1610809454;
    function Insert: Smallint; dispid 1610809455;
    function OpenFile: Smallint; dispid 1610809456;
    function ReadFirst(Period: Smallint): Smallint; dispid 1610809458;
    function ReadFirstForCustomer(Index: Integer): Smallint; dispid 1610809459;
    function ReadNext: Smallint; dispid 1610809460;
    function ReadNextByCustomer: Smallint; dispid 1610809461;
    function Update: Smallint; dispid 1610809462;
    property AmountReceived: Double dispid 1745027176;
    property ARAccount: WideString dispid 1745027175;
    property ARAmount: Double dispid 1745027174;
    property BeginningBalanceFlag: WordBool dispid 1745027173;
    property CloseSalesOrder: WordBool dispid 1745027172;
    property CustomerIndex: Integer dispid 1745027171;
    property CustomerName: WideString dispid 1745027170;
    property CustomerPO: WideString dispid 1745027169;
    property DateCleared: OleVariant dispid 1745027168;
    property DateDue: OleVariant dispid 1745027167;
    property DetailAmount[Index: Smallint]: Double dispid 1745027166;
    property DetailApplyToSO[Index: Smallint]: WordBool dispid 1745027165;
    property DetailCostIndex[Index: Smallint]: Integer dispid 1745027164;
    property DetailCostOfSalesAccount[Index: Smallint]: WideString dispid 1745027163;
    property DetailCostOfSalesAmount[Index: Smallint]: Double dispid 1745027162;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool dispid 1745027161;
    property DetailCustomerIndex[Index: Smallint]: Integer dispid 1745027160;
    property DetailDescription[Index: Smallint]: WideString dispid 1745027159;
    property DetailDisplayedLine[Index: Smallint]: Smallint dispid 1745027158;
    property DetailFlag1[Index: Smallint]: WordBool dispid 1745027157;
    property DetailFreightFlag[Index: Smallint]: WordBool dispid 1745027156;
    property DetailGLAccount[Index: Smallint]: WideString dispid 1745027155;
    property DetailGUID[Index: Smallint]: WideString dispid 1745027154;
    property DetailInventoryAccount[Index: Smallint]: WideString dispid 1745027153;
    property DetailInvoiceNRecord[Index: Smallint]: Integer dispid 1745027152;
    property DetailInvoicePaid[Index: Smallint]: WideString dispid 1745027151;
    property DetailItemIndex[Index: Smallint]: Integer dispid 1745027150;
    property DetailJobIndex[Index: Smallint]: Integer dispid 1745027149;
    property DetailLineNo[Index: Smallint]: Smallint dispid 1745027148;
    property DetailPhaseIndex[Index: Smallint]: Integer dispid 1745027147;
    property DetailQuantity[Index: Smallint]: Double dispid 1745027146;
    property DetailSalesTaxAuthority[Index: Smallint]: WideString dispid 1745027145;
    property DetailSOLine[Index: Smallint]: Smallint dispid 1745027144;
    property DetailStockingQuantity[Index: Smallint]: Double dispid 1745027143;
    property DetailStockingUnitPrice[Index: Smallint]: Double dispid 1745027142;
    property DetailTaxType[Index: Smallint]: Smallint dispid 1745027141;
    property DetailTrxType[Index: Smallint]: Integer dispid 1745027140;
    property DetailUMGUID[Index: Smallint]: WideString dispid 1745027139;
    property DetailUnitPrice[Index: Smallint]: Double dispid 1745027138;
    property DetailUnused1[Index: Smallint]: Byte dispid 1745027137;
    property DiscountAmount: Double dispid 1745027136;
    property DiscountDate: OleVariant dispid 1745027135;
    property DropShip: WordBool dispid 1745027134;
    property DropShipCustomerIndex: Integer dispid 1745027133;
    property DropShipInvNo: WideString dispid 1745027132;
    property EditCount: Integer dispid 1745027131;
    property GUID: WideString dispid 1745027130;
    property HasPartner: WordBool dispid 1745027129;
    property InternalNote: WideString dispid 1745027128;
    property InvoiceNumber: WideString dispid 1745027127;
    property JournalCode: WideString dispid 1745027126;
    property JournalID: Smallint dispid 1745027125;
    property JrnlTypeEx: Integer dispid 1745027124;
    property Key: Double dispid 1745027123;
    property MainAccount: WideString dispid 1745027122;
    property MaxNRecord: Integer readonly dispid 1745027121;
    property MaxTrxNumber[Period: Smallint]: Smallint readonly dispid 1745027120;
    property MaxTrxNumberL[Period: Smallint]: Integer readonly dispid 1745027119;
    property NDistributions: Smallint dispid 1745027118;
    property NextInvoiceNumber: WideString dispid 1745027117;
    property NextQuoteNumber: WideString readonly dispid 1745027116;
    property NextSONumber: WideString writeonly dispid 1745027115;
    property Note: WideString dispid 1745027114;
    property NotePrintsAfterItems: WordBool dispid 1745027113;
    property NRecord: Integer dispid 1745027112;
    property NumOrderLines: Smallint dispid 1745027111;
    property PaymentDate: OleVariant dispid 1745027110;
    property Period: Smallint dispid 1745027109;
    property Posted: WordBool dispid 1745027108;
    property Prepayment: WordBool dispid 1745027107;
    property PrintBeforeInvoiceReference: WordBool dispid 1745027106;
    property Quote: WordBool dispid 1745027105;
    property QuoteGoodThruDate: OleVariant dispid 1745027104;
    property QuoteNumber: WideString dispid 1745027103;
    property ReceiptDate: OleVariant dispid 1745027102;
    property RecurrenceIndex: Integer dispid 1745027101;
    property RecurrenceRate: Smallint dispid 1745027100;
    property ReimbursableExpense: WordBool dispid 1745027099;
    property ReturnAuthorization: WideString dispid 1745027098;
    property SalesRepID: WideString dispid 1745027097;
    property SalesTaxCode: WideString dispid 1745027096;
    property ShipDate: OleVariant dispid 1745027095;
    property ShipToAddr1: WideString dispid 1745027094;
    property ShipToAddr2: WideString dispid 1745027093;
    property ShipToCity: WideString dispid 1745027092;
    property ShipToCountry: WideString dispid 1745027091;
    property ShipToName: WideString dispid 1745027090;
    property ShipToState: WideString dispid 1745027089;
    property ShipToZipCode: WideString dispid 1745027088;
    property ShipVia: WideString dispid 1745027087;
    property SONo: WideString dispid 1745027086;
    property StatementNote: WideString dispid 1745027085;
    property Subindex1: Byte dispid 1745027084;
    property Subindex2: Byte dispid 1745027083;
    property Terms: WideString dispid 1745027082;
    property TrxDate: OleVariant dispid 1745027081;
    property TrxNumber: Smallint dispid 1745027080;
    property TrxNumberL: Integer dispid 1745027079;
    property TrxVoidedBy: Integer dispid 1745027078;
    property Unused1: Byte dispid 1745027077;
    property Unused2[Index: Smallint]: Byte dispid 1745027076;
    property Unused3[Index: Smallint]: Byte dispid 1745027075;
    property Unused4: Byte dispid 1745027074;
    property Unused5[Index: Smallint]: Byte dispid 1745027073;
    property Unused6[Index: Smallint]: Byte dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _Journal
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4B02042B-65FB-432E-B015-692AF10D2FF4}
// *********************************************************************//
  _Journal = interface(IDispatch)
    ['{4B02042B-65FB-432E-B015-692AF10D2FF4}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete(NRecord: Integer): Smallint; safecall;
    function CustomerInJournals(CustomerIndex: Integer): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  _JournalDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4B02042B-65FB-432E-B015-692AF10D2FF4}
// *********************************************************************//
  _JournalDisp = dispinterface
    ['{4B02042B-65FB-432E-B015-692AF10D2FF4}']
    function CloseFile: Smallint; dispid 1610809344;
    function OpenFile: Smallint; dispid 1610809345;
    function Delete(NRecord: Integer): Smallint; dispid 1610809346;
    function CustomerInJournals(CustomerIndex: Integer): WordBool; dispid 1610809348;
  end;

// *********************************************************************//
// Interface: _Alert
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {433F1659-7F2D-42DE-86CC-2FA2EB8D1AE5}
// *********************************************************************//
  _Alert = interface(IDispatch)
    ['{433F1659-7F2D-42DE-86CC-2FA2EB8D1AE5}']
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(Index: Smallint): Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Amount: Double; safecall;
    procedure Set_Amount(Param1: Double); safecall;
    function Get_ApplyTo: Smallint; safecall;
    procedure Set_ApplyTo(Param1: Smallint); safecall;
    function Get_ApplyToDescription(Index: Smallint): WideString; safecall;
    function Get_Condition: Smallint; safecall;
    procedure Set_Condition(Param1: Smallint); safecall;
    function Get_ConditionDescription(Index: Smallint): WideString; safecall;
    function Get_Email: WordBool; safecall;
    procedure Set_Email(Param1: WordBool); safecall;
    function Get_EmailBCC: WideString; safecall;
    procedure Set_EmailBCC(const Param1: WideString); safecall;
    function Get_EmailCC: WideString; safecall;
    procedure Set_EmailCC(const Param1: WideString); safecall;
    function Get_EmailNote: WordBool; safecall;
    procedure Set_EmailNote(Param1: WordBool); safecall;
    function Get_EmailTo: WideString; safecall;
    procedure Set_EmailTo(const Param1: WideString); safecall;
    function Get_FromID: WideString; safecall;
    procedure Set_FromID(const Param1: WideString); safecall;
    function Get_Index: Smallint; safecall;
    procedure Set_Index(Param1: Smallint); safecall;
    function Get_Note: WideString; safecall;
    procedure Set_Note(const Param1: WideString); safecall;
    function Get_StandardMessage: WordBool; safecall;
    procedure Set_StandardMessage(Param1: WordBool); safecall;
    function Get_Subject: WideString; safecall;
    procedure Set_Subject(const Param1: WideString); safecall;
    function Get_ToID: WideString; safecall;
    procedure Set_ToID(const Param1: WideString); safecall;
    function Get_TypeIndex: Smallint; safecall;
    procedure Set_TypeIndex(Param1: Smallint); safecall;
    function Get_TypeDescription(Index: Smallint): WideString; safecall;
    property Amount: Double read Get_Amount write Set_Amount;
    property ApplyTo: Smallint read Get_ApplyTo write Set_ApplyTo;
    property ApplyToDescription[Index: Smallint]: WideString read Get_ApplyToDescription;
    property Condition: Smallint read Get_Condition write Set_Condition;
    property ConditionDescription[Index: Smallint]: WideString read Get_ConditionDescription;
    property Email: WordBool read Get_Email write Set_Email;
    property EmailBCC: WideString read Get_EmailBCC write Set_EmailBCC;
    property EmailCC: WideString read Get_EmailCC write Set_EmailCC;
    property EmailNote: WordBool read Get_EmailNote write Set_EmailNote;
    property EmailTo: WideString read Get_EmailTo write Set_EmailTo;
    property FromID: WideString read Get_FromID write Set_FromID;
    property Index: Smallint read Get_Index write Set_Index;
    property Note: WideString read Get_Note write Set_Note;
    property StandardMessage: WordBool read Get_StandardMessage write Set_StandardMessage;
    property Subject: WideString read Get_Subject write Set_Subject;
    property ToID: WideString read Get_ToID write Set_ToID;
    property TypeIndex: Smallint read Get_TypeIndex write Set_TypeIndex;
    property TypeDescription[Index: Smallint]: WideString read Get_TypeDescription;
  end;

// *********************************************************************//
// DispIntf:  _AlertDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {433F1659-7F2D-42DE-86CC-2FA2EB8D1AE5}
// *********************************************************************//
  _AlertDisp = dispinterface
    ['{433F1659-7F2D-42DE-86CC-2FA2EB8D1AE5}']
    function CloseFile: Smallint; dispid 1610809362;
    function Delete: Smallint; dispid 1610809363;
    function GetEqual(Index: Smallint): Smallint; dispid 1610809364;
    function Insert: Smallint; dispid 1610809365;
    function OpenFile: Smallint; dispid 1610809366;
    function RecordCount: Integer; dispid 1610809368;
    function StepFirst: Smallint; dispid 1610809369;
    function StepLast: Smallint; dispid 1610809370;
    function StepNext: Smallint; dispid 1610809371;
    function StepPrevious: Smallint; dispid 1610809372;
    function Update: Smallint; dispid 1610809373;
    property Amount: Double dispid 1745027089;
    property ApplyTo: Smallint dispid 1745027088;
    property ApplyToDescription[Index: Smallint]: WideString readonly dispid 1745027087;
    property Condition: Smallint dispid 1745027086;
    property ConditionDescription[Index: Smallint]: WideString readonly dispid 1745027085;
    property Email: WordBool dispid 1745027084;
    property EmailBCC: WideString dispid 1745027083;
    property EmailCC: WideString dispid 1745027082;
    property EmailNote: WordBool dispid 1745027081;
    property EmailTo: WideString dispid 1745027080;
    property FromID: WideString dispid 1745027079;
    property Index: Smallint dispid 1745027078;
    property Note: WideString dispid 1745027077;
    property StandardMessage: WordBool dispid 1745027076;
    property Subject: WideString dispid 1745027075;
    property ToID: WideString dispid 1745027074;
    property TypeIndex: Smallint dispid 1745027073;
    property TypeDescription[Index: Smallint]: WideString readonly dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _Eventlog
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {64631A2F-7752-4C6A-AB79-263E7F7CD7F8}
// *********************************************************************//
  _Eventlog = interface(IDispatch)
    ['{64631A2F-7752-4C6A-AB79-263E7F7CD7F8}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_BeforeAfter: WordBool; safecall;
    procedure Set_BeforeAfter(Param1: WordBool); safecall;
    function Get_Completed: WordBool; safecall;
    procedure Set_Completed(Param1: WordBool); safecall;
    function Get_CompletionDate: OleVariant; safecall;
    procedure Set_CompletionDate(Param1: OleVariant); safecall;
    function Get_Days: Smallint; safecall;
    procedure Set_Days(Param1: Smallint); safecall;
    function Get_Display: WordBool; safecall;
    procedure Set_Display(Param1: WordBool); safecall;
    function Get_EventCategory: Smallint; safecall;
    procedure Set_EventCategory(Param1: Smallint); safecall;
    function Get_EventDate: OleVariant; safecall;
    procedure Set_EventDate(Param1: OleVariant); safecall;
    function Get_EventSource: WideString; safecall;
    procedure Set_EventSource(const Param1: WideString); safecall;
    function Get_EventType: Smallint; safecall;
    procedure Set_EventType(Param1: Smallint); safecall;
    function Get_ID: WideString; safecall;
    procedure Set_ID(const Param1: WideString); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_LineNumber: Smallint; safecall;
    procedure Set_LineNumber(Param1: Smallint); safecall;
    function Get_Note: WideString; safecall;
    procedure Set_Note(const Param1: WideString); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_TrxNumberL: Integer; safecall;
    procedure Set_TrxNumberL(Param1: Integer); safecall;
    function Get_Unused1: Smallint; safecall;
    procedure Set_Unused1(Param1: Smallint); safecall;
    function Get_Unused2: Byte; safecall;
    procedure Set_Unused2(Param1: Byte); safecall;
    function Get_Unused3: Byte; safecall;
    procedure Set_Unused3(Param1: Byte); safecall;
    function Get_Unused4: Smallint; safecall;
    procedure Set_Unused4(Param1: Smallint); safecall;
    function Get_Unknown5: Integer; safecall;
    procedure Set_Unknown5(Param1: Integer); safecall;
    property BeforeAfter: WordBool read Get_BeforeAfter write Set_BeforeAfter;
    property Completed: WordBool read Get_Completed write Set_Completed;
    property CompletionDate: OleVariant read Get_CompletionDate write Set_CompletionDate;
    property Days: Smallint read Get_Days write Set_Days;
    property Display: WordBool read Get_Display write Set_Display;
    property EventCategory: Smallint read Get_EventCategory write Set_EventCategory;
    property EventDate: OleVariant read Get_EventDate write Set_EventDate;
    property EventSource: WideString read Get_EventSource write Set_EventSource;
    property EventType: Smallint read Get_EventType write Set_EventType;
    property ID: WideString read Get_ID write Set_ID;
    property Index: Integer read Get_Index write Set_Index;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property LineNumber: Smallint read Get_LineNumber write Set_LineNumber;
    property Note: WideString read Get_Note write Set_Note;
    property Period: Smallint read Get_Period write Set_Period;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused2: Byte read Get_Unused2 write Set_Unused2;
    property Unused3: Byte read Get_Unused3 write Set_Unused3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unknown5: Integer read Get_Unknown5 write Set_Unknown5;
  end;

// *********************************************************************//
// DispIntf:  _EventlogDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {64631A2F-7752-4C6A-AB79-263E7F7CD7F8}
// *********************************************************************//
  _EventlogDisp = dispinterface
    ['{64631A2F-7752-4C6A-AB79-263E7F7CD7F8}']
    function CloseFile: Smallint; dispid 1610809369;
    function OpenFile: Smallint; dispid 1610809370;
    function Delete: Smallint; dispid 1610809371;
    function Insert: Smallint; dispid 1610809372;
    function RecordCount: Integer; dispid 1610809374;
    function StepFirst: Smallint; dispid 1610809375;
    function StepLast: Smallint; dispid 1610809376;
    function StepNext: Smallint; dispid 1610809377;
    function StepPrevious: Smallint; dispid 1610809378;
    function Update: Smallint; dispid 1610809379;
    property BeforeAfter: WordBool dispid 1745027096;
    property Completed: WordBool dispid 1745027095;
    property CompletionDate: OleVariant dispid 1745027094;
    property Days: Smallint dispid 1745027093;
    property Display: WordBool dispid 1745027092;
    property EventCategory: Smallint dispid 1745027091;
    property EventDate: OleVariant dispid 1745027090;
    property EventSource: WideString dispid 1745027089;
    property EventType: Smallint dispid 1745027088;
    property ID: WideString dispid 1745027087;
    property Index: Integer dispid 1745027086;
    property JournalID: Smallint dispid 1745027085;
    property Key: Double dispid 1745027084;
    property LineNumber: Smallint dispid 1745027083;
    property Note: WideString dispid 1745027082;
    property Period: Smallint dispid 1745027081;
    property Subindex1: Byte dispid 1745027080;
    property Subindex2: Byte dispid 1745027079;
    property TrxNumber: Smallint dispid 1745027078;
    property TrxNumberL: Integer dispid 1745027077;
    property Unused1: Smallint dispid 1745027076;
    property Unused2: Byte dispid 1745027075;
    property Unused3: Byte dispid 1745027074;
    property Unused4: Smallint dispid 1745027073;
    property Unknown5: Integer dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _AuditTrail
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0308E528-3721-4B89-95CB-31649F5CDCD4}
// *********************************************************************//
  _AuditTrail = interface(IDispatch)
    ['{0308E528-3721-4B89-95CB-31649F5CDCD4}']
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetFirst: Smallint; safecall;
    function GetLast: Smallint; safecall;
    function GetNext: Smallint; safecall;
    function GetPrevious: Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_ActionCode: Smallint; safecall;
    procedure Set_ActionCode(Param1: Smallint); safecall;
    function Get_Amount: Double; safecall;
    procedure Set_Amount(Param1: Double); safecall;
    function Get_EntryDate: TDateTime; safecall;
    procedure Set_EntryDate(Param1: TDateTime); safecall;
    function Get_EntryTime: TDateTime; safecall;
    procedure Set_EntryTime(Param1: TDateTime); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_TransactionID: WideString; safecall;
    procedure Set_TransactionID(const Param1: WideString); safecall;
    function Get_TransactionReference: WideString; safecall;
    procedure Set_TransactionReference(const Param1: WideString); safecall;
    function Get_TransactionType: Smallint; safecall;
    procedure Set_TransactionType(Param1: Smallint); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_Unknown1: Smallint; safecall;
    procedure Set_Unknown1(Param1: Smallint); safecall;
    function Get_UserID: WideString; safecall;
    procedure Set_UserID(const Param1: WideString); safecall;
    function Get_WindowName: WideString; safecall;
    procedure Set_WindowName(const Param1: WideString); safecall;
    property ActionCode: Smallint read Get_ActionCode write Set_ActionCode;
    property Amount: Double read Get_Amount write Set_Amount;
    property EntryDate: TDateTime read Get_EntryDate write Set_EntryDate;
    property EntryTime: TDateTime read Get_EntryTime write Set_EntryTime;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TransactionID: WideString read Get_TransactionID write Set_TransactionID;
    property TransactionReference: WideString read Get_TransactionReference write Set_TransactionReference;
    property TransactionType: Smallint read Get_TransactionType write Set_TransactionType;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property UserID: WideString read Get_UserID write Set_UserID;
    property WindowName: WideString read Get_WindowName write Set_WindowName;
  end;

// *********************************************************************//
// DispIntf:  _AuditTrailDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0308E528-3721-4B89-95CB-31649F5CDCD4}
// *********************************************************************//
  _AuditTrailDisp = dispinterface
    ['{0308E528-3721-4B89-95CB-31649F5CDCD4}']
    function CloseFile: Smallint; dispid 1610809361;
    function Delete: Smallint; dispid 1610809362;
    function GetFirst: Smallint; dispid 1610809363;
    function GetLast: Smallint; dispid 1610809364;
    function GetNext: Smallint; dispid 1610809365;
    function GetPrevious: Smallint; dispid 1610809366;
    function Insert: Smallint; dispid 1610809367;
    function OpenFile: Smallint; dispid 1610809369;
    function RecordCount: Integer; dispid 1610809370;
    function StepFirst: Smallint; dispid 1610809371;
    function StepLast: Smallint; dispid 1610809372;
    function StepNext: Smallint; dispid 1610809373;
    function StepPrevious: Smallint; dispid 1610809374;
    function Update: Smallint; dispid 1610809375;
    property ActionCode: Smallint dispid 1745027088;
    property Amount: Double dispid 1745027087;
    property EntryDate: TDateTime dispid 1745027086;
    property EntryTime: TDateTime dispid 1745027085;
    property JournalID: Smallint dispid 1745027084;
    property Key: Double dispid 1745027083;
    property NRecord: Integer dispid 1745027082;
    property Period: Smallint dispid 1745027081;
    property Subindex1: Byte dispid 1745027080;
    property Subindex2: Byte dispid 1745027079;
    property TransactionID: WideString dispid 1745027078;
    property TransactionReference: WideString dispid 1745027077;
    property TransactionType: Smallint dispid 1745027076;
    property TrxNumber: Smallint dispid 1745027075;
    property Unknown1: Smallint dispid 1745027074;
    property UserID: WideString dispid 1745027073;
    property WindowName: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _Cost
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {76C49CA7-1F47-49EA-A842-3E6E79C2AAA6}
// *********************************************************************//
  _Cost = interface(IDispatch)
    ['{76C49CA7-1F47-49EA-A842-3E6E79C2AAA6}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(const ID: WideString): Smallint; safecall;
    function GetForIndex(Index: Integer): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_CostID: WideString; safecall;
    procedure Set_CostID(const Param1: WideString); safecall;
    function Get_CostType: WideString; safecall;
    procedure Set_CostType(const Param1: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_Inactive: WordBool; safecall;
    procedure Set_Inactive(Param1: WordBool); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_Unknown1(Index: Smallint): Byte; safecall;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown2: WordBool; safecall;
    procedure Set_Unknown2(Param1: WordBool); safecall;
    property CostID: WideString read Get_CostID write Set_CostID;
    property CostType: WideString read Get_CostType write Set_CostType;
    property Description: WideString read Get_Description write Set_Description;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property Unknown1[Index: Smallint]: Byte read Get_Unknown1 write Set_Unknown1;
    property Unknown2: WordBool read Get_Unknown2 write Set_Unknown2;
  end;

// *********************************************************************//
// DispIntf:  _CostDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {76C49CA7-1F47-49EA-A842-3E6E79C2AAA6}
// *********************************************************************//
  _CostDisp = dispinterface
    ['{76C49CA7-1F47-49EA-A842-3E6E79C2AAA6}']
    function CloseFile: Smallint; dispid 1610809351;
    function OpenFile: Smallint; dispid 1610809352;
    function Delete: Smallint; dispid 1610809353;
    function GetEqual(const ID: WideString): Smallint; dispid 1610809354;
    function GetForIndex(Index: Integer): Smallint; dispid 1610809355;
    function Insert: Smallint; dispid 1610809356;
    function RecordCount: Integer; dispid 1610809358;
    function StepFirst: Smallint; dispid 1610809359;
    function StepLast: Smallint; dispid 1610809360;
    function StepNext: Smallint; dispid 1610809361;
    function StepPrevious: Smallint; dispid 1610809362;
    function Update: Smallint; dispid 1610809363;
    property CostID: WideString dispid 1745027078;
    property CostType: WideString dispid 1745027077;
    property Description: WideString dispid 1745027076;
    property Inactive: WordBool dispid 1745027075;
    property Index: Integer dispid 1745027074;
    property Unknown1[Index: Smallint]: Byte dispid 1745027073;
    property Unknown2: WordBool dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _AssemblyAdjustmentJournal
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {183FA8D7-6686-4A5A-89D8-39E3E675E66D}
// *********************************************************************//
  _AssemblyAdjustmentJournal = interface(IDispatch)
    ['{183FA8D7-6686-4A5A-89D8-39E3E675E66D}']
    function ClearRecord: Smallint; safecall;
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(NRecord: Integer): Smallint; safecall;
    function IncrementBatchCount: Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function ReadFirst(Period: Smallint): Smallint; safecall;
    function ReadNext: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AmountAdjusted: Double; safecall;
    procedure Set_AmountAdjusted(Param1: Double); safecall;
    function Get_DateCleared: OleVariant; safecall;
    procedure Set_DateCleared(Param1: OleVariant); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_DetailAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailComponentItemIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailComponentItemIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailCostIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool; safecall;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailDescription(Index: Smallint): WideString; safecall;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailFlag1(Index: Smallint): WordBool; safecall;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailJobIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailLineNo(Index: Smallint): Smallint; safecall;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailPhaseIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailTrxType(Index: Smallint): Integer; safecall;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_EditCount: Integer; safecall;
    procedure Set_EditCount(Param1: Integer); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_InventoryAccount: WideString; safecall;
    procedure Set_InventoryAccount(const Param1: WideString); safecall;
    function Get_ItemIndex: Integer; safecall;
    procedure Set_ItemIndex(Param1: Integer); safecall;
    function Get_JournalCode: WideString; safecall;
    procedure Set_JournalCode(const Param1: WideString); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_MaxNRecord: Integer; safecall;
    function Get_MaxTrxNumber(Period: Smallint): Smallint; safecall;
    function Get_MaxTrxNumberL(Period: Smallint): Integer; safecall;
    function Get_MainAccount: WideString; safecall;
    procedure Set_MainAccount(const Param1: WideString); safecall;
    function Get_NDistributions: Smallint; safecall;
    procedure Set_NDistributions(Param1: Smallint); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_Posted: WordBool; safecall;
    procedure Set_Posted(Param1: WordBool); safecall;
    function Get_QuantityBuilt: Double; safecall;
    procedure Set_QuantityBuilt(Param1: Double); safecall;
    function Get_ReasonForBuild: WideString; safecall;
    procedure Set_ReasonForBuild(const Param1: WideString); safecall;
    function Get_ReceiptDate: OleVariant; safecall;
    procedure Set_ReceiptDate(Param1: OleVariant); safecall;
    function Get_Reference: WideString; safecall;
    procedure Set_Reference(const Param1: WideString); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_SuperRecordNumber: Byte; safecall;
    procedure Set_SuperRecordNumber(Param1: Byte); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_TrxNumberL: Integer; safecall;
    procedure Set_TrxNumberL(Param1: Integer); safecall;
    function Get_Unused1(Index: Smallint): Byte; safecall;
    procedure Set_Unused1(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown3: Smallint; safecall;
    procedure Set_Unknown3(Param1: Smallint); safecall;
    function Get_Unused4: Smallint; safecall;
    procedure Set_Unused4(Param1: Smallint); safecall;
    function Get_Unknown5: Smallint; safecall;
    procedure Set_Unknown5(Param1: Smallint); safecall;
    function Get_Unused6(Index: Smallint): Byte; safecall;
    procedure Set_Unused6(Index: Smallint; Param2: Byte); safecall;
    property AmountAdjusted: Double read Get_AmountAdjusted write Set_AmountAdjusted;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property Description: WideString read Get_Description write Set_Description;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailComponentItemIndex[Index: Smallint]: Integer read Get_DetailComponentItemIndex write Set_DetailComponentItemIndex;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool read Get_DetailCostOfSalesTrx write Set_DetailCostOfSalesTrx;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InventoryAccount: WideString read Get_InventoryAccount write Set_InventoryAccount;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property QuantityBuilt: Double read Get_QuantityBuilt write Set_QuantityBuilt;
    property ReasonForBuild: WideString read Get_ReasonForBuild write Set_ReasonForBuild;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property Reference: WideString read Get_Reference write Set_Reference;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property SuperRecordNumber: Byte read Get_SuperRecordNumber write Set_SuperRecordNumber;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unknown3: Smallint read Get_Unknown3 write Set_Unknown3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unknown5: Smallint read Get_Unknown5 write Set_Unknown5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
  end;

// *********************************************************************//
// DispIntf:  _AssemblyAdjustmentJournalDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {183FA8D7-6686-4A5A-89D8-39E3E675E66D}
// *********************************************************************//
  _AssemblyAdjustmentJournalDisp = dispinterface
    ['{183FA8D7-6686-4A5A-89D8-39E3E675E66D}']
    function ClearRecord: Smallint; dispid 1610809394;
    function CloseFile: Smallint; dispid 1610809395;
    function Delete: Smallint; dispid 1610809396;
    function GetEqual(NRecord: Integer): Smallint; dispid 1610809397;
    function IncrementBatchCount: Smallint; dispid 1610809398;
    function Insert: Smallint; dispid 1610809399;
    function OpenFile: Smallint; dispid 1610809400;
    function ReadFirst(Period: Smallint): Smallint; dispid 1610809402;
    function ReadNext: Smallint; dispid 1610809403;
    function Update: Smallint; dispid 1610809404;
    property AmountAdjusted: Double dispid 1745027121;
    property DateCleared: OleVariant dispid 1745027120;
    property Description: WideString dispid 1745027119;
    property DetailAmount[Index: Smallint]: Double dispid 1745027118;
    property DetailComponentItemIndex[Index: Smallint]: Integer dispid 1745027117;
    property DetailCostIndex[Index: Smallint]: Integer dispid 1745027116;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool dispid 1745027115;
    property DetailDescription[Index: Smallint]: WideString dispid 1745027114;
    property DetailFlag1[Index: Smallint]: WordBool dispid 1745027113;
    property DetailGLAccount[Index: Smallint]: WideString dispid 1745027112;
    property DetailGUID[Index: Smallint]: WideString dispid 1745027111;
    property DetailJobIndex[Index: Smallint]: Integer dispid 1745027110;
    property DetailLineNo[Index: Smallint]: Smallint dispid 1745027109;
    property DetailPhaseIndex[Index: Smallint]: Integer dispid 1745027108;
    property DetailQuantity[Index: Smallint]: Double dispid 1745027107;
    property DetailStockingQuantity[Index: Smallint]: Double dispid 1745027106;
    property DetailStockingUnitPrice[Index: Smallint]: Double dispid 1745027105;
    property DetailTrxType[Index: Smallint]: Integer dispid 1745027104;
    property DetailUnitPrice[Index: Smallint]: Double dispid 1745027103;
    property EditCount: Integer dispid 1745027102;
    property GUID: WideString dispid 1745027101;
    property InventoryAccount: WideString dispid 1745027100;
    property ItemIndex: Integer dispid 1745027099;
    property JournalCode: WideString dispid 1745027098;
    property JournalID: Smallint dispid 1745027097;
    property Key: Double dispid 1745027096;
    property MaxNRecord: Integer readonly dispid 1745027095;
    property MaxTrxNumber[Period: Smallint]: Smallint readonly dispid 1745027094;
    property MaxTrxNumberL[Period: Smallint]: Integer readonly dispid 1745027093;
    property MainAccount: WideString dispid 1745027092;
    property NDistributions: Smallint dispid 1745027091;
    property NRecord: Integer dispid 1745027090;
    property Period: Smallint dispid 1745027089;
    property Posted: WordBool dispid 1745027088;
    property QuantityBuilt: Double dispid 1745027087;
    property ReasonForBuild: WideString dispid 1745027086;
    property ReceiptDate: OleVariant dispid 1745027085;
    property Reference: WideString dispid 1745027084;
    property Subindex1: Byte dispid 1745027083;
    property Subindex2: Byte dispid 1745027082;
    property SuperRecordNumber: Byte dispid 1745027081;
    property TrxDate: OleVariant dispid 1745027080;
    property TrxNumber: Smallint dispid 1745027079;
    property TrxNumberL: Integer dispid 1745027078;
    property Unused1[Index: Smallint]: Byte dispid 1745027077;
    property Unused2[Index: Smallint]: Byte dispid 1745027076;
    property Unknown3: Smallint dispid 1745027075;
    property Unused4: Smallint dispid 1745027074;
    property Unknown5: Smallint dispid 1745027073;
    property Unused6[Index: Smallint]: Byte dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _FAAsset
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F2C0D9E2-6F81-49A1-B846-C1F5740B97A5}
// *********************************************************************//
  _FAAsset = interface(IDispatch)
    ['{F2C0D9E2-6F81-49A1-B846-C1F5740B97A5}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(ID: Integer): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Acquired: TDateTime; safecall;
    procedure Set_Acquired(Param1: TDateTime); safecall;
    function Get_AssetID: Integer; safecall;
    procedure Set_AssetID(Param1: Integer); safecall;
    function Get_Class_: WideString; safecall;
    procedure Set_Class_(const Param1: WideString); safecall;
    function Get_Department: WideString; safecall;
    procedure Set_Department(const Param1: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_GLAssetAccount: WideString; safecall;
    procedure Set_GLAssetAccount(const Param1: WideString); safecall;
    function Get_GLAccumulatedDepreciationAccount: WideString; safecall;
    procedure Set_GLAccumulatedDepreciationAccount(const Param1: WideString); safecall;
    function Get_GLDepreciationExpenseAccount: WideString; safecall;
    procedure Set_GLDepreciationExpenseAccount(const Param1: WideString); safecall;
    function Get_LastAssetID: Integer; safecall;
    function Get_Listed: WordBool; safecall;
    procedure Set_Listed(Param1: WordBool); safecall;
    function Get_Location: WideString; safecall;
    procedure Set_Location(const Param1: WideString); safecall;
    function Get_NewFlag: WordBool; safecall;
    procedure Set_NewFlag(Param1: WordBool); safecall;
    function Get_SerialNumber: WideString; safecall;
    procedure Set_SerialNumber(const Param1: WideString); safecall;
    function Get_Unused1(Index: Smallint): Byte; safecall;
    procedure Set_Unused1(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused3: Smallint; safecall;
    procedure Set_Unused3(Param1: Smallint); safecall;
    property Acquired: TDateTime read Get_Acquired write Set_Acquired;
    property AssetID: Integer read Get_AssetID write Set_AssetID;
    property Class_: WideString read Get_Class_ write Set_Class_;
    property Department: WideString read Get_Department write Set_Department;
    property Description: WideString read Get_Description write Set_Description;
    property GLAssetAccount: WideString read Get_GLAssetAccount write Set_GLAssetAccount;
    property GLAccumulatedDepreciationAccount: WideString read Get_GLAccumulatedDepreciationAccount write Set_GLAccumulatedDepreciationAccount;
    property GLDepreciationExpenseAccount: WideString read Get_GLDepreciationExpenseAccount write Set_GLDepreciationExpenseAccount;
    property LastAssetID: Integer read Get_LastAssetID;
    property Listed: WordBool read Get_Listed write Set_Listed;
    property Location: WideString read Get_Location write Set_Location;
    property NewFlag: WordBool read Get_NewFlag write Set_NewFlag;
    property SerialNumber: WideString read Get_SerialNumber write Set_SerialNumber;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
  end;

// *********************************************************************//
// DispIntf:  _FAAssetDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F2C0D9E2-6F81-49A1-B846-C1F5740B97A5}
// *********************************************************************//
  _FAAssetDisp = dispinterface
    ['{F2C0D9E2-6F81-49A1-B846-C1F5740B97A5}']
    function CloseFile: Smallint; dispid 1610809360;
    function OpenFile: Smallint; dispid 1610809361;
    function Delete: Smallint; dispid 1610809362;
    function GetEqual(ID: Integer): Smallint; dispid 1610809363;
    function Insert: Smallint; dispid 1610809365;
    function RecordCount: Integer; dispid 1610809367;
    function StepFirst: Smallint; dispid 1610809368;
    function StepLast: Smallint; dispid 1610809369;
    function StepNext: Smallint; dispid 1610809370;
    function StepPrevious: Smallint; dispid 1610809371;
    function Update: Smallint; dispid 1610809372;
    property Acquired: TDateTime dispid 1745027087;
    property AssetID: Integer dispid 1745027086;
    property Class_: WideString dispid 1745027085;
    property Department: WideString dispid 1745027084;
    property Description: WideString dispid 1745027083;
    property GLAssetAccount: WideString dispid 1745027082;
    property GLAccumulatedDepreciationAccount: WideString dispid 1745027081;
    property GLDepreciationExpenseAccount: WideString dispid 1745027080;
    property LastAssetID: Integer readonly dispid 1745027079;
    property Listed: WordBool dispid 1745027078;
    property Location: WideString dispid 1745027077;
    property NewFlag: WordBool dispid 1745027076;
    property SerialNumber: WideString dispid 1745027075;
    property Unused1[Index: Smallint]: Byte dispid 1745027074;
    property Unused2[Index: Smallint]: Byte dispid 1745027073;
    property Unused3: Smallint dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _FABook
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {26F3EF12-AB32-4085-B74A-02D2F3220124}
// *********************************************************************//
  _FABook = interface(IDispatch)
    ['{26F3EF12-AB32-4085-B74A-02D2F3220124}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(ID: Integer): Smallint; safecall;
    function GetNext: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AnnualDepreciation: Double; safecall;
    procedure Set_AnnualDepreciation(Param1: Double); safecall;
    function Get_AssetID: Integer; safecall;
    procedure Set_AssetID(Param1: Integer); safecall;
    function Get_BookCode: Smallint; safecall;
    procedure Set_BookCode(Param1: Smallint); safecall;
    function Get_Cost: Double; safecall;
    procedure Set_Cost(Param1: Double); safecall;
    function Get_DateAsOf: OleVariant; safecall;
    procedure Set_DateAsOf(Param1: OleVariant); safecall;
    function Get_DateAsOfHistory: OleVariant; safecall;
    procedure Set_DateAsOfHistory(Param1: OleVariant); safecall;
    function Get_DateInService: TDateTime; safecall;
    procedure Set_DateInService(Param1: TDateTime); safecall;
    function Get_DecliningBalancePercent: Smallint; safecall;
    procedure Set_DecliningBalancePercent(Param1: Smallint); safecall;
    function Get_FullUse: WordBool; safecall;
    procedure Set_FullUse(Param1: WordBool); safecall;
    function Get_ITCAmount: Double; safecall;
    procedure Set_ITCAmount(Param1: Double); safecall;
    function Get_ITCCode: WideString; safecall;
    procedure Set_ITCCode(const Param1: WideString); safecall;
    function Get_LastDepreciationRun: Double; safecall;
    procedure Set_LastDepreciationRun(Param1: Double); safecall;
    function Get_Life: Double; safecall;
    procedure Set_Life(Param1: Double); safecall;
    function Get_LifeToDateDepreciation: Double; safecall;
    procedure Set_LifeToDateDepreciation(Param1: Double); safecall;
    function Get_LifeToDateDepreciationHistory: Double; safecall;
    procedure Set_LifeToDateDepreciationHistory(Param1: Double); safecall;
    function Get_Method: WideString; safecall;
    procedure Set_Method(const Param1: WideString); safecall;
    function Get_MidQuarterConvention: WordBool; safecall;
    procedure Set_MidQuarterConvention(Param1: WordBool); safecall;
    function Get_ReducedBasis: Smallint; safecall;
    procedure Set_ReducedBasis(Param1: Smallint); safecall;
    function Get_Salvage: Double; safecall;
    procedure Set_Salvage(Param1: Double); safecall;
    function Get_Section179: Double; safecall;
    procedure Set_Section179(Param1: Double); safecall;
    function Get_Unused1: Double; safecall;
    procedure Set_Unused1(Param1: Double); safecall;
    function Get_Unknown2: Double; safecall;
    procedure Set_Unknown2(Param1: Double); safecall;
    function Get_YearToDateDepreciation: Double; safecall;
    procedure Set_YearToDateDepreciation(Param1: Double); safecall;
    function Get_YearToDateDepreciationHistory: Double; safecall;
    procedure Set_YearToDateDepreciationHistory(Param1: Double); safecall;
    property AnnualDepreciation: Double read Get_AnnualDepreciation write Set_AnnualDepreciation;
    property AssetID: Integer read Get_AssetID write Set_AssetID;
    property BookCode: Smallint read Get_BookCode write Set_BookCode;
    property Cost: Double read Get_Cost write Set_Cost;
    property DateAsOf: OleVariant read Get_DateAsOf write Set_DateAsOf;
    property DateAsOfHistory: OleVariant read Get_DateAsOfHistory write Set_DateAsOfHistory;
    property DateInService: TDateTime read Get_DateInService write Set_DateInService;
    property DecliningBalancePercent: Smallint read Get_DecliningBalancePercent write Set_DecliningBalancePercent;
    property FullUse: WordBool read Get_FullUse write Set_FullUse;
    property ITCAmount: Double read Get_ITCAmount write Set_ITCAmount;
    property ITCCode: WideString read Get_ITCCode write Set_ITCCode;
    property LastDepreciationRun: Double read Get_LastDepreciationRun write Set_LastDepreciationRun;
    property Life: Double read Get_Life write Set_Life;
    property LifeToDateDepreciation: Double read Get_LifeToDateDepreciation write Set_LifeToDateDepreciation;
    property LifeToDateDepreciationHistory: Double read Get_LifeToDateDepreciationHistory write Set_LifeToDateDepreciationHistory;
    property Method: WideString read Get_Method write Set_Method;
    property MidQuarterConvention: WordBool read Get_MidQuarterConvention write Set_MidQuarterConvention;
    property ReducedBasis: Smallint read Get_ReducedBasis write Set_ReducedBasis;
    property Salvage: Double read Get_Salvage write Set_Salvage;
    property Section179: Double read Get_Section179 write Set_Section179;
    property Unused1: Double read Get_Unused1 write Set_Unused1;
    property Unknown2: Double read Get_Unknown2 write Set_Unknown2;
    property YearToDateDepreciation: Double read Get_YearToDateDepreciation write Set_YearToDateDepreciation;
    property YearToDateDepreciationHistory: Double read Get_YearToDateDepreciationHistory write Set_YearToDateDepreciationHistory;
  end;

// *********************************************************************//
// DispIntf:  _FABookDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {26F3EF12-AB32-4085-B74A-02D2F3220124}
// *********************************************************************//
  _FABookDisp = dispinterface
    ['{26F3EF12-AB32-4085-B74A-02D2F3220124}']
    function CloseFile: Smallint; dispid 1610809368;
    function OpenFile: Smallint; dispid 1610809369;
    function Delete: Smallint; dispid 1610809370;
    function GetEqual(ID: Integer): Smallint; dispid 1610809371;
    function GetNext: Smallint; dispid 1610809372;
    function Insert: Smallint; dispid 1610809373;
    function RecordCount: Integer; dispid 1610809375;
    function StepFirst: Smallint; dispid 1610809376;
    function StepLast: Smallint; dispid 1610809377;
    function StepNext: Smallint; dispid 1610809378;
    function StepPrevious: Smallint; dispid 1610809379;
    function Update: Smallint; dispid 1610809380;
    property AnnualDepreciation: Double dispid 1745027095;
    property AssetID: Integer dispid 1745027094;
    property BookCode: Smallint dispid 1745027093;
    property Cost: Double dispid 1745027092;
    property DateAsOf: OleVariant dispid 1745027091;
    property DateAsOfHistory: OleVariant dispid 1745027090;
    property DateInService: TDateTime dispid 1745027089;
    property DecliningBalancePercent: Smallint dispid 1745027088;
    property FullUse: WordBool dispid 1745027087;
    property ITCAmount: Double dispid 1745027086;
    property ITCCode: WideString dispid 1745027085;
    property LastDepreciationRun: Double dispid 1745027084;
    property Life: Double dispid 1745027083;
    property LifeToDateDepreciation: Double dispid 1745027082;
    property LifeToDateDepreciationHistory: Double dispid 1745027081;
    property Method: WideString dispid 1745027080;
    property MidQuarterConvention: WordBool dispid 1745027079;
    property ReducedBasis: Smallint dispid 1745027078;
    property Salvage: Double dispid 1745027077;
    property Section179: Double dispid 1745027076;
    property Unused1: Double dispid 1745027075;
    property Unknown2: Double dispid 1745027074;
    property YearToDateDepreciation: Double dispid 1745027073;
    property YearToDateDepreciationHistory: Double dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _FABusUse
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91AF0605-3D70-4339-89BE-D7529627B213}
// *********************************************************************//
  _FABusUse = interface(IDispatch)
    ['{91AF0605-3D70-4339-89BE-D7529627B213}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(ID: Integer): Smallint; safecall;
    function GetNext: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AssetID: Integer; safecall;
    procedure Set_AssetID(Param1: Integer); safecall;
    function Get_BookCode: Smallint; safecall;
    procedure Set_BookCode(Param1: Smallint); safecall;
    function Get_Date1: OleVariant; safecall;
    procedure Set_Date1(Param1: OleVariant); safecall;
    function Get_Date2: OleVariant; safecall;
    procedure Set_Date2(Param1: OleVariant); safecall;
    function Get_Date3: OleVariant; safecall;
    procedure Set_Date3(Param1: OleVariant); safecall;
    function Get_Date4: OleVariant; safecall;
    procedure Set_Date4(Param1: OleVariant); safecall;
    function Get_Date5: OleVariant; safecall;
    procedure Set_Date5(Param1: OleVariant); safecall;
    function Get_Percent1: Smallint; safecall;
    procedure Set_Percent1(Param1: Smallint); safecall;
    function Get_Percent2: Smallint; safecall;
    procedure Set_Percent2(Param1: Smallint); safecall;
    function Get_Percent3: Smallint; safecall;
    procedure Set_Percent3(Param1: Smallint); safecall;
    function Get_Percent4: Smallint; safecall;
    procedure Set_Percent4(Param1: Smallint); safecall;
    function Get_Percent5: Smallint; safecall;
    procedure Set_Percent5(Param1: Smallint); safecall;
    property AssetID: Integer read Get_AssetID write Set_AssetID;
    property BookCode: Smallint read Get_BookCode write Set_BookCode;
    property Date1: OleVariant read Get_Date1 write Set_Date1;
    property Date2: OleVariant read Get_Date2 write Set_Date2;
    property Date3: OleVariant read Get_Date3 write Set_Date3;
    property Date4: OleVariant read Get_Date4 write Set_Date4;
    property Date5: OleVariant read Get_Date5 write Set_Date5;
    property Percent1: Smallint read Get_Percent1 write Set_Percent1;
    property Percent2: Smallint read Get_Percent2 write Set_Percent2;
    property Percent3: Smallint read Get_Percent3 write Set_Percent3;
    property Percent4: Smallint read Get_Percent4 write Set_Percent4;
    property Percent5: Smallint read Get_Percent5 write Set_Percent5;
  end;

// *********************************************************************//
// DispIntf:  _FABusUseDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91AF0605-3D70-4339-89BE-D7529627B213}
// *********************************************************************//
  _FABusUseDisp = dispinterface
    ['{91AF0605-3D70-4339-89BE-D7529627B213}']
    function CloseFile: Smallint; dispid 1610809356;
    function OpenFile: Smallint; dispid 1610809357;
    function Delete: Smallint; dispid 1610809358;
    function GetEqual(ID: Integer): Smallint; dispid 1610809359;
    function GetNext: Smallint; dispid 1610809360;
    function Insert: Smallint; dispid 1610809361;
    function RecordCount: Integer; dispid 1610809363;
    function StepFirst: Smallint; dispid 1610809364;
    function StepLast: Smallint; dispid 1610809365;
    function StepNext: Smallint; dispid 1610809366;
    function StepPrevious: Smallint; dispid 1610809367;
    function Update: Smallint; dispid 1610809368;
    property AssetID: Integer dispid 1745027083;
    property BookCode: Smallint dispid 1745027082;
    property Date1: OleVariant dispid 1745027081;
    property Date2: OleVariant dispid 1745027080;
    property Date3: OleVariant dispid 1745027079;
    property Date4: OleVariant dispid 1745027078;
    property Date5: OleVariant dispid 1745027077;
    property Percent1: Smallint dispid 1745027076;
    property Percent2: Smallint dispid 1745027075;
    property Percent3: Smallint dispid 1745027074;
    property Percent4: Smallint dispid 1745027073;
    property Percent5: Smallint dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _FAClass
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D3B8B73-7364-4C0A-BCD7-468C85E263DD}
// *********************************************************************//
  _FAClass = interface(IDispatch)
    ['{1D3B8B73-7364-4C0A-BCD7-468C85E263DD}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(const Value: WideString): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_Life1: WideString; safecall;
    procedure Set_Life1(const Param1: WideString); safecall;
    function Get_Life2: WideString; safecall;
    procedure Set_Life2(const Param1: WideString); safecall;
    function Get_Method1: WideString; safecall;
    procedure Set_Method1(const Param1: WideString); safecall;
    function Get_Method2: WideString; safecall;
    procedure Set_Method2(const Param1: WideString); safecall;
    function Get_Method3: WideString; safecall;
    procedure Set_Method3(const Param1: WideString); safecall;
    function Get_Method4: WideString; safecall;
    procedure Set_Method4(const Param1: WideString); safecall;
    property Description: WideString read Get_Description write Set_Description;
    property Life1: WideString read Get_Life1 write Set_Life1;
    property Life2: WideString read Get_Life2 write Set_Life2;
    property Method1: WideString read Get_Method1 write Set_Method1;
    property Method2: WideString read Get_Method2 write Set_Method2;
    property Method3: WideString read Get_Method3 write Set_Method3;
    property Method4: WideString read Get_Method4 write Set_Method4;
  end;

// *********************************************************************//
// DispIntf:  _FAClassDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D3B8B73-7364-4C0A-BCD7-468C85E263DD}
// *********************************************************************//
  _FAClassDisp = dispinterface
    ['{1D3B8B73-7364-4C0A-BCD7-468C85E263DD}']
    function CloseFile: Smallint; dispid 1610809351;
    function OpenFile: Smallint; dispid 1610809352;
    function Delete: Smallint; dispid 1610809353;
    function GetEqual(const Value: WideString): Smallint; dispid 1610809354;
    function Insert: Smallint; dispid 1610809355;
    function RecordCount: Integer; dispid 1610809357;
    function StepFirst: Smallint; dispid 1610809358;
    function StepLast: Smallint; dispid 1610809359;
    function StepNext: Smallint; dispid 1610809360;
    function StepPrevious: Smallint; dispid 1610809361;
    function Update: Smallint; dispid 1610809362;
    property Description: WideString dispid 1745027078;
    property Life1: WideString dispid 1745027077;
    property Life2: WideString dispid 1745027076;
    property Method1: WideString dispid 1745027075;
    property Method2: WideString dispid 1745027074;
    property Method3: WideString dispid 1745027073;
    property Method4: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _FAComp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1E00F48D-5C80-491F-8A26-6DF6AFD31769}
// *********************************************************************//
  _FAComp = interface(IDispatch)
    ['{1E00F48D-5C80-491F-8A26-6DF6AFD31769}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_ACEBook: WordBool; safecall;
    procedure Set_ACEBook(Param1: WordBool); safecall;
    function Get_AMTBook: WordBool; safecall;
    procedure Set_AMTBook(Param1: WordBool); safecall;
    function Get_CompanyName: WideString; safecall;
    procedure Set_CompanyName(const Param1: WideString); safecall;
    function Get_ConversionDate: OleVariant; safecall;
    procedure Set_ConversionDate(Param1: OleVariant); safecall;
    function Get_Date1: OleVariant; safecall;
    procedure Set_Date1(Param1: OleVariant); safecall;
    function Get_Date2: OleVariant; safecall;
    procedure Set_Date2(Param1: OleVariant); safecall;
    function Get_Date3: OleVariant; safecall;
    procedure Set_Date3(Param1: OleVariant); safecall;
    function Get_FederalIDNumber: WideString; safecall;
    procedure Set_FederalIDNumber(const Param1: WideString); safecall;
    function Get_FederalTaxBook: WordBool; safecall;
    procedure Set_FederalTaxBook(Param1: WordBool); safecall;
    function Get_FinancialBook: WordBool; safecall;
    procedure Set_FinancialBook(Param1: WordBool); safecall;
    function Get_FormOfBusiness: WideString; safecall;
    procedure Set_FormOfBusiness(const Param1: WideString); safecall;
    function Get_MonthFiscalYearEnds: Smallint; safecall;
    procedure Set_MonthFiscalYearEnds(Param1: Smallint); safecall;
    function Get_OtherBook: WordBool; safecall;
    procedure Set_OtherBook(Param1: WordBool); safecall;
    function Get_ShortTaxYearsFrom1: OleVariant; safecall;
    procedure Set_ShortTaxYearsFrom1(Param1: OleVariant); safecall;
    function Get_ShortTaxYearsFrom2: OleVariant; safecall;
    procedure Set_ShortTaxYearsFrom2(Param1: OleVariant); safecall;
    function Get_ShortTaxYearsFrom3: OleVariant; safecall;
    procedure Set_ShortTaxYearsFrom3(Param1: OleVariant); safecall;
    function Get_ShortTaxYearsFrom4: OleVariant; safecall;
    procedure Set_ShortTaxYearsFrom4(Param1: OleVariant); safecall;
    function Get_ShortTaxYearsTo1: OleVariant; safecall;
    procedure Set_ShortTaxYearsTo1(Param1: OleVariant); safecall;
    function Get_ShortTaxYearsTo2: OleVariant; safecall;
    procedure Set_ShortTaxYearsTo2(Param1: OleVariant); safecall;
    function Get_ShortTaxYearsTo3: OleVariant; safecall;
    procedure Set_ShortTaxYearsTo3(Param1: OleVariant); safecall;
    function Get_ShortTaxYearsTo4: OleVariant; safecall;
    procedure Set_ShortTaxYearsTo4(Param1: OleVariant); safecall;
    function Get_StateTaxBook: WordBool; safecall;
    procedure Set_StateTaxBook(Param1: WordBool); safecall;
    function Get_UnknownBook: WordBool; safecall;
    procedure Set_UnknownBook(Param1: WordBool); safecall;
    function Get_Unused1: Smallint; safecall;
    procedure Set_Unused1(Param1: Smallint); safecall;
    function Get_Unknown2: Smallint; safecall;
    procedure Set_Unknown2(Param1: Smallint); safecall;
    function Get_Unused3: Integer; safecall;
    procedure Set_Unused3(Param1: Integer); safecall;
    function Get_Unused4: Integer; safecall;
    procedure Set_Unused4(Param1: Integer); safecall;
    function Get_Unused5: Integer; safecall;
    procedure Set_Unused5(Param1: Integer); safecall;
    function Get_Unused6: Integer; safecall;
    procedure Set_Unused6(Param1: Integer); safecall;
    function Get_Unused7: Integer; safecall;
    procedure Set_Unused7(Param1: Integer); safecall;
    function Get_Unused8: Integer; safecall;
    procedure Set_Unused8(Param1: Integer); safecall;
    function Get_Unused9: Integer; safecall;
    procedure Set_Unused9(Param1: Integer); safecall;
    function Get_Unused10: Integer; safecall;
    procedure Set_Unused10(Param1: Integer); safecall;
    function Get_Unused11: Integer; safecall;
    procedure Set_Unused11(Param1: Integer); safecall;
    function Get_Unused12: Integer; safecall;
    procedure Set_Unused12(Param1: Integer); safecall;
    function Get_Unknown13: OleVariant; safecall;
    procedure Set_Unknown13(Param1: OleVariant); safecall;
    function Get_Unknown14: OleVariant; safecall;
    procedure Set_Unknown14(Param1: OleVariant); safecall;
    function Get_Unused15: Smallint; safecall;
    procedure Set_Unused15(Param1: Smallint); safecall;
    property ACEBook: WordBool read Get_ACEBook write Set_ACEBook;
    property AMTBook: WordBool read Get_AMTBook write Set_AMTBook;
    property CompanyName: WideString read Get_CompanyName write Set_CompanyName;
    property ConversionDate: OleVariant read Get_ConversionDate write Set_ConversionDate;
    property Date1: OleVariant read Get_Date1 write Set_Date1;
    property Date2: OleVariant read Get_Date2 write Set_Date2;
    property Date3: OleVariant read Get_Date3 write Set_Date3;
    property FederalIDNumber: WideString read Get_FederalIDNumber write Set_FederalIDNumber;
    property FederalTaxBook: WordBool read Get_FederalTaxBook write Set_FederalTaxBook;
    property FinancialBook: WordBool read Get_FinancialBook write Set_FinancialBook;
    property FormOfBusiness: WideString read Get_FormOfBusiness write Set_FormOfBusiness;
    property MonthFiscalYearEnds: Smallint read Get_MonthFiscalYearEnds write Set_MonthFiscalYearEnds;
    property OtherBook: WordBool read Get_OtherBook write Set_OtherBook;
    property ShortTaxYearsFrom1: OleVariant read Get_ShortTaxYearsFrom1 write Set_ShortTaxYearsFrom1;
    property ShortTaxYearsFrom2: OleVariant read Get_ShortTaxYearsFrom2 write Set_ShortTaxYearsFrom2;
    property ShortTaxYearsFrom3: OleVariant read Get_ShortTaxYearsFrom3 write Set_ShortTaxYearsFrom3;
    property ShortTaxYearsFrom4: OleVariant read Get_ShortTaxYearsFrom4 write Set_ShortTaxYearsFrom4;
    property ShortTaxYearsTo1: OleVariant read Get_ShortTaxYearsTo1 write Set_ShortTaxYearsTo1;
    property ShortTaxYearsTo2: OleVariant read Get_ShortTaxYearsTo2 write Set_ShortTaxYearsTo2;
    property ShortTaxYearsTo3: OleVariant read Get_ShortTaxYearsTo3 write Set_ShortTaxYearsTo3;
    property ShortTaxYearsTo4: OleVariant read Get_ShortTaxYearsTo4 write Set_ShortTaxYearsTo4;
    property StateTaxBook: WordBool read Get_StateTaxBook write Set_StateTaxBook;
    property UnknownBook: WordBool read Get_UnknownBook write Set_UnknownBook;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unused3: Integer read Get_Unused3 write Set_Unused3;
    property Unused4: Integer read Get_Unused4 write Set_Unused4;
    property Unused5: Integer read Get_Unused5 write Set_Unused5;
    property Unused6: Integer read Get_Unused6 write Set_Unused6;
    property Unused7: Integer read Get_Unused7 write Set_Unused7;
    property Unused8: Integer read Get_Unused8 write Set_Unused8;
    property Unused9: Integer read Get_Unused9 write Set_Unused9;
    property Unused10: Integer read Get_Unused10 write Set_Unused10;
    property Unused11: Integer read Get_Unused11 write Set_Unused11;
    property Unused12: Integer read Get_Unused12 write Set_Unused12;
    property Unknown13: OleVariant read Get_Unknown13 write Set_Unknown13;
    property Unknown14: OleVariant read Get_Unknown14 write Set_Unknown14;
    property Unused15: Smallint read Get_Unused15 write Set_Unused15;
  end;

// *********************************************************************//
// DispIntf:  _FACompDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1E00F48D-5C80-491F-8A26-6DF6AFD31769}
// *********************************************************************//
  _FACompDisp = dispinterface
    ['{1E00F48D-5C80-491F-8A26-6DF6AFD31769}']
    function CloseFile: Smallint; dispid 1610809382;
    function OpenFile: Smallint; dispid 1610809383;
    function Delete: Smallint; dispid 1610809384;
    function Insert: Smallint; dispid 1610809385;
    function RecordCount: Integer; dispid 1610809387;
    function StepFirst: Smallint; dispid 1610809388;
    function Update: Smallint; dispid 1610809389;
    property ACEBook: WordBool dispid 1745027109;
    property AMTBook: WordBool dispid 1745027108;
    property CompanyName: WideString dispid 1745027107;
    property ConversionDate: OleVariant dispid 1745027106;
    property Date1: OleVariant dispid 1745027105;
    property Date2: OleVariant dispid 1745027104;
    property Date3: OleVariant dispid 1745027103;
    property FederalIDNumber: WideString dispid 1745027102;
    property FederalTaxBook: WordBool dispid 1745027101;
    property FinancialBook: WordBool dispid 1745027100;
    property FormOfBusiness: WideString dispid 1745027099;
    property MonthFiscalYearEnds: Smallint dispid 1745027098;
    property OtherBook: WordBool dispid 1745027097;
    property ShortTaxYearsFrom1: OleVariant dispid 1745027096;
    property ShortTaxYearsFrom2: OleVariant dispid 1745027095;
    property ShortTaxYearsFrom3: OleVariant dispid 1745027094;
    property ShortTaxYearsFrom4: OleVariant dispid 1745027093;
    property ShortTaxYearsTo1: OleVariant dispid 1745027092;
    property ShortTaxYearsTo2: OleVariant dispid 1745027091;
    property ShortTaxYearsTo3: OleVariant dispid 1745027090;
    property ShortTaxYearsTo4: OleVariant dispid 1745027089;
    property StateTaxBook: WordBool dispid 1745027088;
    property UnknownBook: WordBool dispid 1745027087;
    property Unused1: Smallint dispid 1745027086;
    property Unknown2: Smallint dispid 1745027085;
    property Unused3: Integer dispid 1745027084;
    property Unused4: Integer dispid 1745027083;
    property Unused5: Integer dispid 1745027082;
    property Unused6: Integer dispid 1745027081;
    property Unused7: Integer dispid 1745027080;
    property Unused8: Integer dispid 1745027079;
    property Unused9: Integer dispid 1745027078;
    property Unused10: Integer dispid 1745027077;
    property Unused11: Integer dispid 1745027076;
    property Unused12: Integer dispid 1745027075;
    property Unknown13: OleVariant dispid 1745027074;
    property Unknown14: OleVariant dispid 1745027073;
    property Unused15: Smallint dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _FAPost
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3BE6A22F-677A-4B25-A1DC-DABF6AFEE050}
// *********************************************************************//
  _FAPost = interface(IDispatch)
    ['{3BE6A22F-677A-4B25-A1DC-DABF6AFEE050}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(Value: OleVariant): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Account: WideString; safecall;
    procedure Set_Account(const Param1: WideString); safecall;
    function Get_Amount: Double; safecall;
    procedure Set_Amount(Param1: Double); safecall;
    function Get_Batch: WideString; safecall;
    procedure Set_Batch(const Param1: WideString); safecall;
    function Get_DatePosted: TDateTime; safecall;
    procedure Set_DatePosted(Param1: TDateTime); safecall;
    function Get_Day: Smallint; safecall;
    procedure Set_Day(Param1: Smallint); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_Month: Smallint; safecall;
    procedure Set_Month(Param1: Smallint); safecall;
    function Get_Year: Smallint; safecall;
    procedure Set_Year(Param1: Smallint); safecall;
    function Get_Unknown: Integer; safecall;
    procedure Set_Unknown(Param1: Integer); safecall;
    property Account: WideString read Get_Account write Set_Account;
    property Amount: Double read Get_Amount write Set_Amount;
    property Batch: WideString read Get_Batch write Set_Batch;
    property DatePosted: TDateTime read Get_DatePosted write Set_DatePosted;
    property Day: Smallint read Get_Day write Set_Day;
    property Description: WideString read Get_Description write Set_Description;
    property Month: Smallint read Get_Month write Set_Month;
    property Year: Smallint read Get_Year write Set_Year;
    property Unknown: Integer read Get_Unknown write Set_Unknown;
  end;

// *********************************************************************//
// DispIntf:  _FAPostDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3BE6A22F-677A-4B25-A1DC-DABF6AFEE050}
// *********************************************************************//
  _FAPostDisp = dispinterface
    ['{3BE6A22F-677A-4B25-A1DC-DABF6AFEE050}']
    function CloseFile: Smallint; dispid 1610809353;
    function OpenFile: Smallint; dispid 1610809354;
    function Delete: Smallint; dispid 1610809355;
    function GetEqual(Value: OleVariant): Smallint; dispid 1610809356;
    function Insert: Smallint; dispid 1610809357;
    function RecordCount: Integer; dispid 1610809359;
    function StepFirst: Smallint; dispid 1610809360;
    function StepLast: Smallint; dispid 1610809361;
    function StepNext: Smallint; dispid 1610809362;
    function StepPrevious: Smallint; dispid 1610809363;
    function Update: Smallint; dispid 1610809364;
    property Account: WideString dispid 1745027080;
    property Amount: Double dispid 1745027079;
    property Batch: WideString dispid 1745027078;
    property DatePosted: TDateTime dispid 1745027077;
    property Day: Smallint dispid 1745027076;
    property Description: WideString dispid 1745027075;
    property Month: Smallint dispid 1745027074;
    property Year: Smallint dispid 1745027073;
    property Unknown: Integer dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _FAPrePst
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4E40871E-981E-4C7C-B4F4-FB1EBB4A0E05}
// *********************************************************************//
  _FAPrePst = interface(IDispatch)
    ['{4E40871E-981E-4C7C-B4F4-FB1EBB4A0E05}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Account: WideString; safecall;
    procedure Set_Account(const Param1: WideString); safecall;
    function Get_Amount: Double; safecall;
    procedure Set_Amount(Param1: Double); safecall;
    function Get_EntryDate: OleVariant; safecall;
    procedure Set_EntryDate(Param1: OleVariant); safecall;
    function Get_Index: WideString; safecall;
    procedure Set_Index(const Param1: WideString); safecall;
    function Get_Unused: WideString; safecall;
    procedure Set_Unused(const Param1: WideString); safecall;
    property Account: WideString read Get_Account write Set_Account;
    property Amount: Double read Get_Amount write Set_Amount;
    property EntryDate: OleVariant read Get_EntryDate write Set_EntryDate;
    property Index: WideString read Get_Index write Set_Index;
    property Unused: WideString read Get_Unused write Set_Unused;
  end;

// *********************************************************************//
// DispIntf:  _FAPrePstDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4E40871E-981E-4C7C-B4F4-FB1EBB4A0E05}
// *********************************************************************//
  _FAPrePstDisp = dispinterface
    ['{4E40871E-981E-4C7C-B4F4-FB1EBB4A0E05}']
    function CloseFile: Smallint; dispid 1610809349;
    function OpenFile: Smallint; dispid 1610809350;
    function Delete: Smallint; dispid 1610809351;
    function Insert: Smallint; dispid 1610809352;
    function RecordCount: Integer; dispid 1610809354;
    function StepFirst: Smallint; dispid 1610809355;
    function StepLast: Smallint; dispid 1610809356;
    function StepNext: Smallint; dispid 1610809357;
    function StepPrevious: Smallint; dispid 1610809358;
    function Update: Smallint; dispid 1610809359;
    property Account: WideString dispid 1745027076;
    property Amount: Double dispid 1745027075;
    property EntryDate: OleVariant dispid 1745027074;
    property Index: WideString dispid 1745027073;
    property Unused: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _DefaultStatementData
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {95E03C99-E38C-413A-8D44-1D0B19F13A0C}
// *********************************************************************//
  _DefaultStatementData = interface(IDispatch)
    ['{95E03C99-E38C-413A-8D44-1D0B19F13A0C}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Read: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_ActualLength: Integer; safecall;
    function Get_DunningDays(Index: Smallint): Smallint; safecall;
    procedure Set_DunningDays(Index: Smallint; Param2: Smallint); safecall;
    function Get_DunningMessage(Index: Smallint): WideString; safecall;
    procedure Set_DunningMessage(Index: Smallint; const Param2: WideString); safecall;
    function Get_FCWarningMessage: WideString; safecall;
    procedure Set_FCWarningMessage(const Param1: WideString); safecall;
    function Get_PrintAddress: WordBool; safecall;
    procedure Set_PrintAddress(Param1: WordBool); safecall;
    function Get_PrintAnyActivity: WordBool; safecall;
    procedure Set_PrintAnyActivity(Param1: WordBool); safecall;
    function Get_PrintBalancesAtLeast: WordBool; safecall;
    procedure Set_PrintBalancesAtLeast(Param1: WordBool); safecall;
    function Get_PrintFCWarning: WordBool; safecall;
    procedure Set_PrintFCWarning(Param1: WordBool); safecall;
    function Get_PrintInvoicesAtLeast: WordBool; safecall;
    procedure Set_PrintInvoicesAtLeast(Param1: WordBool); safecall;
    function Get_PrintMinimumBalance: Double; safecall;
    procedure Set_PrintMinimumBalance(Param1: Double); safecall;
    function Get_PrintNegativeBalance: WordBool; safecall;
    procedure Set_PrintNegativeBalance(Param1: WordBool); safecall;
    function Get_PrintNegativeBalanceChar: WideString; safecall;
    procedure Set_PrintNegativeBalanceChar(const Param1: WideString); safecall;
    function Get_PrintOverdueDays: Smallint; safecall;
    procedure Set_PrintOverdueDays(Param1: Smallint); safecall;
    function Get_PrintZeroBalance: WordBool; safecall;
    procedure Set_PrintZeroBalance(Param1: WordBool); safecall;
    function Get_PrintZeroBalanceChar: WideString; safecall;
    procedure Set_PrintZeroBalanceChar(const Param1: WideString); safecall;
    property ActualLength: Integer read Get_ActualLength;
    property DunningDays[Index: Smallint]: Smallint read Get_DunningDays write Set_DunningDays;
    property DunningMessage[Index: Smallint]: WideString read Get_DunningMessage write Set_DunningMessage;
    property FCWarningMessage: WideString read Get_FCWarningMessage write Set_FCWarningMessage;
    property PrintAddress: WordBool read Get_PrintAddress write Set_PrintAddress;
    property PrintAnyActivity: WordBool read Get_PrintAnyActivity write Set_PrintAnyActivity;
    property PrintBalancesAtLeast: WordBool read Get_PrintBalancesAtLeast write Set_PrintBalancesAtLeast;
    property PrintFCWarning: WordBool read Get_PrintFCWarning write Set_PrintFCWarning;
    property PrintInvoicesAtLeast: WordBool read Get_PrintInvoicesAtLeast write Set_PrintInvoicesAtLeast;
    property PrintMinimumBalance: Double read Get_PrintMinimumBalance write Set_PrintMinimumBalance;
    property PrintNegativeBalance: WordBool read Get_PrintNegativeBalance write Set_PrintNegativeBalance;
    property PrintNegativeBalanceChar: WideString read Get_PrintNegativeBalanceChar write Set_PrintNegativeBalanceChar;
    property PrintOverdueDays: Smallint read Get_PrintOverdueDays write Set_PrintOverdueDays;
    property PrintZeroBalance: WordBool read Get_PrintZeroBalance write Set_PrintZeroBalance;
    property PrintZeroBalanceChar: WideString read Get_PrintZeroBalanceChar write Set_PrintZeroBalanceChar;
  end;

// *********************************************************************//
// DispIntf:  _DefaultStatementDataDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {95E03C99-E38C-413A-8D44-1D0B19F13A0C}
// *********************************************************************//
  _DefaultStatementDataDisp = dispinterface
    ['{95E03C99-E38C-413A-8D44-1D0B19F13A0C}']
    function CloseFile: Smallint; dispid 1610809359;
    function OpenFile: Smallint; dispid 1610809360;
    function Read: Smallint; dispid 1610809361;
    function Update: Smallint; dispid 1610809362;
    property ActualLength: Integer readonly dispid 1745027086;
    property DunningDays[Index: Smallint]: Smallint dispid 1745027085;
    property DunningMessage[Index: Smallint]: WideString dispid 1745027084;
    property FCWarningMessage: WideString dispid 1745027083;
    property PrintAddress: WordBool dispid 1745027082;
    property PrintAnyActivity: WordBool dispid 1745027081;
    property PrintBalancesAtLeast: WordBool dispid 1745027080;
    property PrintFCWarning: WordBool dispid 1745027079;
    property PrintInvoicesAtLeast: WordBool dispid 1745027078;
    property PrintMinimumBalance: Double dispid 1745027077;
    property PrintNegativeBalance: WordBool dispid 1745027076;
    property PrintNegativeBalanceChar: WideString dispid 1745027075;
    property PrintOverdueDays: Smallint dispid 1745027074;
    property PrintZeroBalance: WordBool dispid 1745027073;
    property PrintZeroBalanceChar: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _DefaultTaxTypes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C51FB85-22A0-4911-B528-904321D88575}
// *********************************************************************//
  _DefaultTaxTypes = interface(IDispatch)
    ['{8C51FB85-22A0-4911-B528-904321D88575}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Read: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Description(Index: Smallint): WideString; safecall;
    procedure Set_Description(Index: Smallint; const Param2: WideString); safecall;
    function Get_Taxable(Index: Smallint): WordBool; safecall;
    procedure Set_Taxable(Index: Smallint; Param2: WordBool); safecall;
    function Get_Unknown(Index: Smallint): Byte; safecall;
    procedure Set_Unknown(Index: Smallint; Param2: Byte); safecall;
    property Description[Index: Smallint]: WideString read Get_Description write Set_Description;
    property Taxable[Index: Smallint]: WordBool read Get_Taxable write Set_Taxable;
    property Unknown[Index: Smallint]: Byte read Get_Unknown write Set_Unknown;
  end;

// *********************************************************************//
// DispIntf:  _DefaultTaxTypesDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C51FB85-22A0-4911-B528-904321D88575}
// *********************************************************************//
  _DefaultTaxTypesDisp = dispinterface
    ['{8C51FB85-22A0-4911-B528-904321D88575}']
    function CloseFile: Smallint; dispid 1610809347;
    function OpenFile: Smallint; dispid 1610809348;
    function Read: Smallint; dispid 1610809349;
    function Update: Smallint; dispid 1610809350;
    property Description[Index: Smallint]: WideString dispid 1745027074;
    property Taxable[Index: Smallint]: WordBool dispid 1745027073;
    property Unknown[Index: Smallint]: Byte dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _DefaultVendorData
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {694A13DF-B513-4AF2-BF55-2AA70D375DB4}
// *********************************************************************//
  _DefaultVendorData = interface(IDispatch)
    ['{694A13DF-B513-4AF2-BF55-2AA70D375DB4}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Read: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_ActualLength: Integer; safecall;
    function Get_AgeByDueDate: WordBool; safecall;
    procedure Set_AgeByDueDate(Param1: WordBool); safecall;
    function Get_AgingDays(Index: Smallint): Smallint; safecall;
    procedure Set_AgingDays(Index: Smallint; Param2: Smallint); safecall;
    function Get_AgingHeading(Index: Smallint): WideString; safecall;
    procedure Set_AgingHeading(Index: Smallint; const Param2: WideString); safecall;
    function Get_APAccount: WideString; safecall;
    procedure Set_APAccount(const Param1: WideString); safecall;
    function Get_CashAccount: WideString; safecall;
    procedure Set_CashAccount(const Param1: WideString); safecall;
    function Get_COD: WordBool; safecall;
    procedure Set_COD(Param1: WordBool); safecall;
    function Get_CreditLimit: Double; safecall;
    procedure Set_CreditLimit(Param1: Double); safecall;
    function Get_CustomFieldEnabled(Index: Smallint): WordBool; safecall;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool); safecall;
    function Get_CustomFieldLabel(Index: Smallint): WideString; safecall;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString); safecall;
    function Get_DiscountDays: Smallint; safecall;
    procedure Set_DiscountDays(Param1: Smallint); safecall;
    function Get_DiscountPercent: Double; safecall;
    procedure Set_DiscountPercent(Param1: Double); safecall;
    function Get_DiscountGLAccount: WideString; safecall;
    procedure Set_DiscountGLAccount(const Param1: WideString); safecall;
    function Get_DueAtEndOfMonth: WordBool; safecall;
    procedure Set_DueAtEndOfMonth(Param1: WordBool); safecall;
    function Get_DueOnDayOfNextMonth: WordBool; safecall;
    procedure Set_DueOnDayOfNextMonth(Param1: WordBool); safecall;
    function Get_LastPONumber: WideString; safecall;
    procedure Set_LastPONumber(const Param1: WideString); safecall;
    function Get_NetDueDays: Smallint; safecall;
    procedure Set_NetDueDays(Param1: Smallint); safecall;
    function Get_NLabels: Smallint; safecall;
    function Get_Prepaid: WordBool; safecall;
    procedure Set_Prepaid(Param1: WordBool); safecall;
    function Get_PurchaseAccount: WideString; safecall;
    procedure Set_PurchaseAccount(const Param1: WideString); safecall;
    function Get_Unknown1(Index: Smallint): Byte; safecall;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused3: Byte; safecall;
    procedure Set_Unused3(Param1: Byte); safecall;
    function Get_Unused4(Index: Smallint): Byte; safecall;
    procedure Set_Unused4(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused5(Index: Smallint): Byte; safecall;
    procedure Set_Unused5(Index: Smallint; Param2: Byte); safecall;
    function Get_WriteCheckCashAccount: WideString; safecall;
    procedure Set_WriteCheckCashAccount(const Param1: WideString); safecall;
    property ActualLength: Integer read Get_ActualLength;
    property AgeByDueDate: WordBool read Get_AgeByDueDate write Set_AgeByDueDate;
    property AgingDays[Index: Smallint]: Smallint read Get_AgingDays write Set_AgingDays;
    property AgingHeading[Index: Smallint]: WideString read Get_AgingHeading write Set_AgingHeading;
    property APAccount: WideString read Get_APAccount write Set_APAccount;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property COD: WordBool read Get_COD write Set_COD;
    property CreditLimit: Double read Get_CreditLimit write Set_CreditLimit;
    property CustomFieldEnabled[Index: Smallint]: WordBool read Get_CustomFieldEnabled write Set_CustomFieldEnabled;
    property CustomFieldLabel[Index: Smallint]: WideString read Get_CustomFieldLabel write Set_CustomFieldLabel;
    property DiscountDays: Smallint read Get_DiscountDays write Set_DiscountDays;
    property DiscountPercent: Double read Get_DiscountPercent write Set_DiscountPercent;
    property DiscountGLAccount: WideString read Get_DiscountGLAccount write Set_DiscountGLAccount;
    property DueAtEndOfMonth: WordBool read Get_DueAtEndOfMonth write Set_DueAtEndOfMonth;
    property DueOnDayOfNextMonth: WordBool read Get_DueOnDayOfNextMonth write Set_DueOnDayOfNextMonth;
    property LastPONumber: WideString read Get_LastPONumber write Set_LastPONumber;
    property NetDueDays: Smallint read Get_NetDueDays write Set_NetDueDays;
    property NLabels: Smallint read Get_NLabels;
    property Prepaid: WordBool read Get_Prepaid write Set_Prepaid;
    property PurchaseAccount: WideString read Get_PurchaseAccount write Set_PurchaseAccount;
    property Unknown1[Index: Smallint]: Byte read Get_Unknown1 write Set_Unknown1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3: Byte read Get_Unused3 write Set_Unused3;
    property Unused4[Index: Smallint]: Byte read Get_Unused4 write Set_Unused4;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property WriteCheckCashAccount: WideString read Get_WriteCheckCashAccount write Set_WriteCheckCashAccount;
  end;

// *********************************************************************//
// DispIntf:  _DefaultVendorDataDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {694A13DF-B513-4AF2-BF55-2AA70D375DB4}
// *********************************************************************//
  _DefaultVendorDataDisp = dispinterface
    ['{694A13DF-B513-4AF2-BF55-2AA70D375DB4}']
    function CloseFile: Smallint; dispid 1610809370;
    function OpenFile: Smallint; dispid 1610809371;
    function Read: Smallint; dispid 1610809372;
    function Update: Smallint; dispid 1610809373;
    property ActualLength: Integer readonly dispid 1745027097;
    property AgeByDueDate: WordBool dispid 1745027096;
    property AgingDays[Index: Smallint]: Smallint dispid 1745027095;
    property AgingHeading[Index: Smallint]: WideString dispid 1745027094;
    property APAccount: WideString dispid 1745027093;
    property CashAccount: WideString dispid 1745027092;
    property COD: WordBool dispid 1745027091;
    property CreditLimit: Double dispid 1745027090;
    property CustomFieldEnabled[Index: Smallint]: WordBool dispid 1745027089;
    property CustomFieldLabel[Index: Smallint]: WideString dispid 1745027088;
    property DiscountDays: Smallint dispid 1745027087;
    property DiscountPercent: Double dispid 1745027086;
    property DiscountGLAccount: WideString dispid 1745027085;
    property DueAtEndOfMonth: WordBool dispid 1745027084;
    property DueOnDayOfNextMonth: WordBool dispid 1745027083;
    property LastPONumber: WideString dispid 1745027082;
    property NetDueDays: Smallint dispid 1745027081;
    property NLabels: Smallint readonly dispid 1745027080;
    property Prepaid: WordBool dispid 1745027079;
    property PurchaseAccount: WideString dispid 1745027078;
    property Unknown1[Index: Smallint]: Byte dispid 1745027077;
    property Unused2[Index: Smallint]: Byte dispid 1745027076;
    property Unused3: Byte dispid 1745027075;
    property Unused4[Index: Smallint]: Byte dispid 1745027074;
    property Unused5[Index: Smallint]: Byte dispid 1745027073;
    property WriteCheckCashAccount: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _DefaultInventoryData
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8D834B33-7E7D-412C-819A-C87393958778}
// *********************************************************************//
  _DefaultInventoryData = interface(IDispatch)
    ['{8D834B33-7E7D-412C-819A-C87393958778}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Read: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_CustomFieldEnabled(Index: Smallint): WordBool; safecall;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool); safecall;
    function Get_CustomFieldLabel(Index: Smallint): WideString; safecall;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString); safecall;
    function Get_GLFreightAccount: WideString; safecall;
    procedure Set_GLFreightAccount(const Param1: WideString); safecall;
    function Get_NLabels: Smallint; safecall;
    property CustomFieldEnabled[Index: Smallint]: WordBool read Get_CustomFieldEnabled write Set_CustomFieldEnabled;
    property CustomFieldLabel[Index: Smallint]: WideString read Get_CustomFieldLabel write Set_CustomFieldLabel;
    property GLFreightAccount: WideString read Get_GLFreightAccount write Set_GLFreightAccount;
    property NLabels: Smallint read Get_NLabels;
  end;

// *********************************************************************//
// DispIntf:  _DefaultInventoryDataDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8D834B33-7E7D-412C-819A-C87393958778}
// *********************************************************************//
  _DefaultInventoryDataDisp = dispinterface
    ['{8D834B33-7E7D-412C-819A-C87393958778}']
    function CloseFile: Smallint; dispid 1610809348;
    function OpenFile: Smallint; dispid 1610809349;
    function Read: Smallint; dispid 1610809350;
    function Update: Smallint; dispid 1610809351;
    property CustomFieldEnabled[Index: Smallint]: WordBool dispid 1745027075;
    property CustomFieldLabel[Index: Smallint]: WideString dispid 1745027074;
    property GLFreightAccount: WideString dispid 1745027073;
    property NLabels: Smallint readonly dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _DefaultGLAccounts
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7244422D-476B-43D1-B263-A3A4EC39FBA5}
// *********************************************************************//
  _DefaultGLAccounts = interface(IDispatch)
    ['{7244422D-476B-43D1-B263-A3A4EC39FBA5}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Read: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Costing(Index: Smallint): Smallint; safecall;
    procedure Set_Costing(Index: Smallint; Param2: Smallint); safecall;
    function Get_GLCostOfSales(Index: Smallint): WideString; safecall;
    procedure Set_GLCostOfSales(Index: Smallint; const Param2: WideString); safecall;
    function Get_GLInventoryWage(Index: Smallint): WideString; safecall;
    procedure Set_GLInventoryWage(Index: Smallint; const Param2: WideString); safecall;
    function Get_GLSales(Index: Smallint): WideString; safecall;
    procedure Set_GLSales(Index: Smallint; const Param2: WideString); safecall;
    function Get_ItemClassIndex(Index: Smallint): Smallint; safecall;
    procedure Set_ItemClassIndex(Index: Smallint; Param2: Smallint); safecall;
    property Costing[Index: Smallint]: Smallint read Get_Costing write Set_Costing;
    property GLCostOfSales[Index: Smallint]: WideString read Get_GLCostOfSales write Set_GLCostOfSales;
    property GLInventoryWage[Index: Smallint]: WideString read Get_GLInventoryWage write Set_GLInventoryWage;
    property GLSales[Index: Smallint]: WideString read Get_GLSales write Set_GLSales;
    property ItemClassIndex[Index: Smallint]: Smallint read Get_ItemClassIndex write Set_ItemClassIndex;
  end;

// *********************************************************************//
// DispIntf:  _DefaultGLAccountsDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7244422D-476B-43D1-B263-A3A4EC39FBA5}
// *********************************************************************//
  _DefaultGLAccountsDisp = dispinterface
    ['{7244422D-476B-43D1-B263-A3A4EC39FBA5}']
    function CloseFile: Smallint; dispid 1610809349;
    function OpenFile: Smallint; dispid 1610809350;
    function Read: Smallint; dispid 1610809351;
    function Update: Smallint; dispid 1610809352;
    property Costing[Index: Smallint]: Smallint dispid 1745027076;
    property GLCostOfSales[Index: Smallint]: WideString dispid 1745027075;
    property GLInventoryWage[Index: Smallint]: WideString dispid 1745027074;
    property GLSales[Index: Smallint]: WideString dispid 1745027073;
    property ItemClassIndex[Index: Smallint]: Smallint dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _DefaultJobData
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {95677474-3820-4C10-B5E9-FE0F96D6AEF4}
// *********************************************************************//
  _DefaultJobData = interface(IDispatch)
    ['{95677474-3820-4C10-B5E9-FE0F96D6AEF4}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Read: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_CustomFieldEnabled(Index: Smallint): WordBool; safecall;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool); safecall;
    function Get_CustomFieldLabel(Index: Smallint): WideString; safecall;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString); safecall;
    function Get_NLabels: Smallint; safecall;
    property CustomFieldEnabled[Index: Smallint]: WordBool read Get_CustomFieldEnabled write Set_CustomFieldEnabled;
    property CustomFieldLabel[Index: Smallint]: WideString read Get_CustomFieldLabel write Set_CustomFieldLabel;
    property NLabels: Smallint read Get_NLabels;
  end;

// *********************************************************************//
// DispIntf:  _DefaultJobDataDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {95677474-3820-4C10-B5E9-FE0F96D6AEF4}
// *********************************************************************//
  _DefaultJobDataDisp = dispinterface
    ['{95677474-3820-4C10-B5E9-FE0F96D6AEF4}']
    function CloseFile: Smallint; dispid 1610809347;
    function OpenFile: Smallint; dispid 1610809348;
    function Read: Smallint; dispid 1610809349;
    function Update: Smallint; dispid 1610809350;
    property CustomFieldEnabled[Index: Smallint]: WordBool dispid 1745027074;
    property CustomFieldLabel[Index: Smallint]: WideString dispid 1745027073;
    property NLabels: Smallint readonly dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _DefaultEmployeeData
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FE278A92-7AB4-46BF-8C63-13A1A8B716AC}
// *********************************************************************//
  _DefaultEmployeeData = interface(IDispatch)
    ['{FE278A92-7AB4-46BF-8C63-13A1A8B716AC}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Read: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_CustomFieldEnabled(Index: Smallint): WordBool; safecall;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool); safecall;
    function Get_CustomFieldLabel(Index: Smallint): WideString; safecall;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString); safecall;
    function Get_DisplayLastNameFirst: WordBool; safecall;
    procedure Set_DisplayLastNameFirst(Param1: WordBool); safecall;
    function Get_EEAdjust(Index1: Smallint; Index2: Smallint): Byte; safecall;
    procedure Set_EEAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte); safecall;
    function Get_EEAmount(Index: Smallint): Double; safecall;
    procedure Set_EEAmount(Index: Smallint; Param2: Double); safecall;
    function Get_EECalc(Index: Smallint): WordBool; safecall;
    procedure Set_EECalc(Index: Smallint; Param2: WordBool); safecall;
    function Get_EECalcName(Index: Smallint): WideString; safecall;
    procedure Set_EECalcName(Index: Smallint; const Param2: WideString); safecall;
    function Get_EEDescription(Index: Smallint): WideString; safecall;
    procedure Set_EEDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_EEDisability: Smallint; safecall;
    procedure Set_EEDisability(Param1: Smallint); safecall;
    function Get_EEStateUnemployment: Smallint; safecall;
    procedure Set_EEStateUnemployment(Param1: Smallint); safecall;
    function Get_EETrainingTax: Smallint; safecall;
    procedure Set_EETrainingTax(Param1: Smallint); safecall;
    function Get_EEGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_EEGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_EEMemo(Index: Smallint): WordBool; safecall;
    procedure Set_EEMemo(Index: Smallint; Param2: WordBool); safecall;
    function Get_EERun(Index: Smallint): WordBool; safecall;
    procedure Set_EERun(Index: Smallint; Param2: WordBool); safecall;
    function Get_ERAdjust(Index1: Smallint; Index2: Smallint): Byte; safecall;
    procedure Set_ERAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte); safecall;
    function Get_ERCalc(Index: Smallint): WordBool; safecall;
    procedure Set_ERCalc(Index: Smallint; Param2: WordBool); safecall;
    function Get_ERCalcName(Index: Smallint): WideString; safecall;
    procedure Set_ERCalcName(Index: Smallint; const Param2: WideString); safecall;
    function Get_ERDescription(Index: Smallint): WideString; safecall;
    procedure Set_ERDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_ERExpenseAccount(Index: Smallint): WideString; safecall;
    procedure Set_ERExpenseAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_ERLiabilityAccount(Index: Smallint): WideString; safecall;
    procedure Set_ERLiabilityAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_FUTA_ER: Smallint; safecall;
    procedure Set_FUTA_ER(Param1: Smallint); safecall;
    function Get_HoursDescription(Index: Smallint): WideString; safecall;
    procedure Set_HoursDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_HoursGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_HoursGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_Locality: WideString; safecall;
    procedure Set_Locality(const Param1: WideString); safecall;
    function Get_NLabels: Smallint; safecall;
    function Get_PayrollCashAccount: WideString; safecall;
    procedure Set_PayrollCashAccount(const Param1: WideString); safecall;
    function Get_SalaryDescription(Index: Smallint): WideString; safecall;
    procedure Set_SalaryDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_SalaryGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_SalaryGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_SDI: Smallint; safecall;
    procedure Set_SDI(Param1: Smallint); safecall;
    function Get_State: WideString; safecall;
    procedure Set_State(const Param1: WideString); safecall;
    function Get_StateSpecialA: Smallint; safecall;
    procedure Set_StateSpecialA(Param1: Smallint); safecall;
    function Get_StateSpecialB: Smallint; safecall;
    procedure Set_StateSpecialB(Param1: Smallint); safecall;
    function Get_StateTrainingTax: Smallint; safecall;
    procedure Set_StateTrainingTax(Param1: Smallint); safecall;
    function Get_SUI_ER: Smallint; safecall;
    procedure Set_SUI_ER(Param1: Smallint); safecall;
    function Get_Unknown1: Smallint; safecall;
    procedure Set_Unknown1(Param1: Smallint); safecall;
    function Get_Unknown2: Smallint; safecall;
    procedure Set_Unknown2(Param1: Smallint); safecall;
    function Get_Unknown3(Index: Smallint): Byte; safecall;
    procedure Set_Unknown3(Index: Smallint; Param2: Byte); safecall;
    function Get_W2Field2: Smallint; safecall;
    procedure Set_W2Field2(Param1: Smallint); safecall;
    function Get_W2Field4: Smallint; safecall;
    procedure Set_W2Field4(Param1: Smallint); safecall;
    function Get_W2Field6: Smallint; safecall;
    procedure Set_W2Field6(Param1: Smallint); safecall;
    function Get_W2Field7: Smallint; safecall;
    procedure Set_W2Field7(Param1: Smallint); safecall;
    function Get_W2Field8: Smallint; safecall;
    procedure Set_W2Field8(Param1: Smallint); safecall;
    function Get_W2Field9: Smallint; safecall;
    procedure Set_W2Field9(Param1: Smallint); safecall;
    function Get_W2Field10: Smallint; safecall;
    procedure Set_W2Field10(Param1: Smallint); safecall;
    function Get_W2Field11: Smallint; safecall;
    procedure Set_W2Field11(Param1: Smallint); safecall;
    function Get_W2Field12: Smallint; safecall;
    procedure Set_W2Field12(Param1: Smallint); safecall;
    function Get_W2Field13C1: WideString; safecall;
    procedure Set_W2Field13C1(const Param1: WideString); safecall;
    function Get_W2Field13C2: WideString; safecall;
    procedure Set_W2Field13C2(const Param1: WideString); safecall;
    function Get_W2Field13C3: WideString; safecall;
    procedure Set_W2Field13C3(const Param1: WideString); safecall;
    function Get_W2Field13C4: WideString; safecall;
    procedure Set_W2Field13C4(const Param1: WideString); safecall;
    function Get_W2Field13F1: Smallint; safecall;
    procedure Set_W2Field13F1(Param1: Smallint); safecall;
    function Get_W2Field13F2: Smallint; safecall;
    procedure Set_W2Field13F2(Param1: Smallint); safecall;
    function Get_W2Field13F3: Smallint; safecall;
    procedure Set_W2Field13F3(Param1: Smallint); safecall;
    function Get_W2Field13F4: Smallint; safecall;
    procedure Set_W2Field13F4(Param1: Smallint); safecall;
    function Get_W2Field14: Smallint; safecall;
    procedure Set_W2Field14(Param1: Smallint); safecall;
    function Get_W2Field14B: Smallint; safecall;
    procedure Set_W2Field14B(Param1: Smallint); safecall;
    function Get_W2Field18: Smallint; safecall;
    procedure Set_W2Field18(Param1: Smallint); safecall;
    function Get_W2Field21: Smallint; safecall;
    procedure Set_W2Field21(Param1: Smallint); safecall;
    function Get_W2Text: WideString; safecall;
    procedure Set_W2Text(const Param1: WideString); safecall;
    function Get_W2Text2: WideString; safecall;
    procedure Set_W2Text2(const Param1: WideString); safecall;
    property CustomFieldEnabled[Index: Smallint]: WordBool read Get_CustomFieldEnabled write Set_CustomFieldEnabled;
    property CustomFieldLabel[Index: Smallint]: WideString read Get_CustomFieldLabel write Set_CustomFieldLabel;
    property DisplayLastNameFirst: WordBool read Get_DisplayLastNameFirst write Set_DisplayLastNameFirst;
    property EEAdjust[Index1: Smallint; Index2: Smallint]: Byte read Get_EEAdjust write Set_EEAdjust;
    property EEAmount[Index: Smallint]: Double read Get_EEAmount write Set_EEAmount;
    property EECalc[Index: Smallint]: WordBool read Get_EECalc write Set_EECalc;
    property EECalcName[Index: Smallint]: WideString read Get_EECalcName write Set_EECalcName;
    property EEDescription[Index: Smallint]: WideString read Get_EEDescription write Set_EEDescription;
    property EEDisability: Smallint read Get_EEDisability write Set_EEDisability;
    property EEStateUnemployment: Smallint read Get_EEStateUnemployment write Set_EEStateUnemployment;
    property EETrainingTax: Smallint read Get_EETrainingTax write Set_EETrainingTax;
    property EEGLAccount[Index: Smallint]: WideString read Get_EEGLAccount write Set_EEGLAccount;
    property EEMemo[Index: Smallint]: WordBool read Get_EEMemo write Set_EEMemo;
    property EERun[Index: Smallint]: WordBool read Get_EERun write Set_EERun;
    property ERAdjust[Index1: Smallint; Index2: Smallint]: Byte read Get_ERAdjust write Set_ERAdjust;
    property ERCalc[Index: Smallint]: WordBool read Get_ERCalc write Set_ERCalc;
    property ERCalcName[Index: Smallint]: WideString read Get_ERCalcName write Set_ERCalcName;
    property ERDescription[Index: Smallint]: WideString read Get_ERDescription write Set_ERDescription;
    property ERExpenseAccount[Index: Smallint]: WideString read Get_ERExpenseAccount write Set_ERExpenseAccount;
    property ERLiabilityAccount[Index: Smallint]: WideString read Get_ERLiabilityAccount write Set_ERLiabilityAccount;
    property FUTA_ER: Smallint read Get_FUTA_ER write Set_FUTA_ER;
    property HoursDescription[Index: Smallint]: WideString read Get_HoursDescription write Set_HoursDescription;
    property HoursGLAccount[Index: Smallint]: WideString read Get_HoursGLAccount write Set_HoursGLAccount;
    property Locality: WideString read Get_Locality write Set_Locality;
    property NLabels: Smallint read Get_NLabels;
    property PayrollCashAccount: WideString read Get_PayrollCashAccount write Set_PayrollCashAccount;
    property SalaryDescription[Index: Smallint]: WideString read Get_SalaryDescription write Set_SalaryDescription;
    property SalaryGLAccount[Index: Smallint]: WideString read Get_SalaryGLAccount write Set_SalaryGLAccount;
    property SDI: Smallint read Get_SDI write Set_SDI;
    property State: WideString read Get_State write Set_State;
    property StateSpecialA: Smallint read Get_StateSpecialA write Set_StateSpecialA;
    property StateSpecialB: Smallint read Get_StateSpecialB write Set_StateSpecialB;
    property StateTrainingTax: Smallint read Get_StateTrainingTax write Set_StateTrainingTax;
    property SUI_ER: Smallint read Get_SUI_ER write Set_SUI_ER;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unknown3[Index: Smallint]: Byte read Get_Unknown3 write Set_Unknown3;
    property W2Field2: Smallint read Get_W2Field2 write Set_W2Field2;
    property W2Field4: Smallint read Get_W2Field4 write Set_W2Field4;
    property W2Field6: Smallint read Get_W2Field6 write Set_W2Field6;
    property W2Field7: Smallint read Get_W2Field7 write Set_W2Field7;
    property W2Field8: Smallint read Get_W2Field8 write Set_W2Field8;
    property W2Field9: Smallint read Get_W2Field9 write Set_W2Field9;
    property W2Field10: Smallint read Get_W2Field10 write Set_W2Field10;
    property W2Field11: Smallint read Get_W2Field11 write Set_W2Field11;
    property W2Field12: Smallint read Get_W2Field12 write Set_W2Field12;
    property W2Field13C1: WideString read Get_W2Field13C1 write Set_W2Field13C1;
    property W2Field13C2: WideString read Get_W2Field13C2 write Set_W2Field13C2;
    property W2Field13C3: WideString read Get_W2Field13C3 write Set_W2Field13C3;
    property W2Field13C4: WideString read Get_W2Field13C4 write Set_W2Field13C4;
    property W2Field13F1: Smallint read Get_W2Field13F1 write Set_W2Field13F1;
    property W2Field13F2: Smallint read Get_W2Field13F2 write Set_W2Field13F2;
    property W2Field13F3: Smallint read Get_W2Field13F3 write Set_W2Field13F3;
    property W2Field13F4: Smallint read Get_W2Field13F4 write Set_W2Field13F4;
    property W2Field14: Smallint read Get_W2Field14 write Set_W2Field14;
    property W2Field14B: Smallint read Get_W2Field14B write Set_W2Field14B;
    property W2Field18: Smallint read Get_W2Field18 write Set_W2Field18;
    property W2Field21: Smallint read Get_W2Field21 write Set_W2Field21;
    property W2Text: WideString read Get_W2Text write Set_W2Text;
    property W2Text2: WideString read Get_W2Text2 write Set_W2Text2;
  end;

// *********************************************************************//
// DispIntf:  _DefaultEmployeeDataDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FE278A92-7AB4-46BF-8C63-13A1A8B716AC}
// *********************************************************************//
  _DefaultEmployeeDataDisp = dispinterface
    ['{FE278A92-7AB4-46BF-8C63-13A1A8B716AC}']
    function CloseFile: Smallint; dispid 1610809404;
    function OpenFile: Smallint; dispid 1610809405;
    function Read: Smallint; dispid 1610809406;
    function Update: Smallint; dispid 1610809407;
    property CustomFieldEnabled[Index: Smallint]: WordBool dispid 1745027131;
    property CustomFieldLabel[Index: Smallint]: WideString dispid 1745027130;
    property DisplayLastNameFirst: WordBool dispid 1745027129;
    property EEAdjust[Index1: Smallint; Index2: Smallint]: Byte dispid 1745027128;
    property EEAmount[Index: Smallint]: Double dispid 1745027127;
    property EECalc[Index: Smallint]: WordBool dispid 1745027126;
    property EECalcName[Index: Smallint]: WideString dispid 1745027125;
    property EEDescription[Index: Smallint]: WideString dispid 1745027124;
    property EEDisability: Smallint dispid 1745027123;
    property EEStateUnemployment: Smallint dispid 1745027122;
    property EETrainingTax: Smallint dispid 1745027121;
    property EEGLAccount[Index: Smallint]: WideString dispid 1745027120;
    property EEMemo[Index: Smallint]: WordBool dispid 1745027119;
    property EERun[Index: Smallint]: WordBool dispid 1745027118;
    property ERAdjust[Index1: Smallint; Index2: Smallint]: Byte dispid 1745027117;
    property ERCalc[Index: Smallint]: WordBool dispid 1745027116;
    property ERCalcName[Index: Smallint]: WideString dispid 1745027115;
    property ERDescription[Index: Smallint]: WideString dispid 1745027114;
    property ERExpenseAccount[Index: Smallint]: WideString dispid 1745027113;
    property ERLiabilityAccount[Index: Smallint]: WideString dispid 1745027112;
    property FUTA_ER: Smallint dispid 1745027111;
    property HoursDescription[Index: Smallint]: WideString dispid 1745027110;
    property HoursGLAccount[Index: Smallint]: WideString dispid 1745027109;
    property Locality: WideString dispid 1745027108;
    property NLabels: Smallint readonly dispid 1745027107;
    property PayrollCashAccount: WideString dispid 1745027106;
    property SalaryDescription[Index: Smallint]: WideString dispid 1745027105;
    property SalaryGLAccount[Index: Smallint]: WideString dispid 1745027104;
    property SDI: Smallint dispid 1745027103;
    property State: WideString dispid 1745027102;
    property StateSpecialA: Smallint dispid 1745027101;
    property StateSpecialB: Smallint dispid 1745027100;
    property StateTrainingTax: Smallint dispid 1745027099;
    property SUI_ER: Smallint dispid 1745027098;
    property Unknown1: Smallint dispid 1745027097;
    property Unknown2: Smallint dispid 1745027096;
    property Unknown3[Index: Smallint]: Byte dispid 1745027095;
    property W2Field2: Smallint dispid 1745027094;
    property W2Field4: Smallint dispid 1745027093;
    property W2Field6: Smallint dispid 1745027092;
    property W2Field7: Smallint dispid 1745027091;
    property W2Field8: Smallint dispid 1745027090;
    property W2Field9: Smallint dispid 1745027089;
    property W2Field10: Smallint dispid 1745027088;
    property W2Field11: Smallint dispid 1745027087;
    property W2Field12: Smallint dispid 1745027086;
    property W2Field13C1: WideString dispid 1745027085;
    property W2Field13C2: WideString dispid 1745027084;
    property W2Field13C3: WideString dispid 1745027083;
    property W2Field13C4: WideString dispid 1745027082;
    property W2Field13F1: Smallint dispid 1745027081;
    property W2Field13F2: Smallint dispid 1745027080;
    property W2Field13F3: Smallint dispid 1745027079;
    property W2Field13F4: Smallint dispid 1745027078;
    property W2Field14: Smallint dispid 1745027077;
    property W2Field14B: Smallint dispid 1745027076;
    property W2Field18: Smallint dispid 1745027075;
    property W2Field21: Smallint dispid 1745027074;
    property W2Text: WideString dispid 1745027073;
    property W2Text2: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _eCheckData
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5C083F1-BB74-43DA-9DE3-050A82A310A6}
// *********************************************************************//
  _eCheckData = interface(IDispatch)
    ['{F5C083F1-BB74-43DA-9DE3-050A82A310A6}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Read: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_MasterBusinessID: Integer; safecall;
    procedure Set_MasterBusinessID(Param1: Integer); safecall;
    function Get_SecurityCode: WideString; safecall;
    procedure Set_SecurityCode(const Param1: WideString); safecall;
    function Get_TransmissionPhone: WideString; safecall;
    procedure Set_TransmissionPhone(const Param1: WideString); safecall;
    function Get_Unknown(Index: Smallint): Byte; safecall;
    procedure Set_Unknown(Index: Smallint; Param2: Byte); safecall;
    property MasterBusinessID: Integer read Get_MasterBusinessID write Set_MasterBusinessID;
    property SecurityCode: WideString read Get_SecurityCode write Set_SecurityCode;
    property TransmissionPhone: WideString read Get_TransmissionPhone write Set_TransmissionPhone;
    property Unknown[Index: Smallint]: Byte read Get_Unknown write Set_Unknown;
  end;

// *********************************************************************//
// DispIntf:  _eCheckDataDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5C083F1-BB74-43DA-9DE3-050A82A310A6}
// *********************************************************************//
  _eCheckDataDisp = dispinterface
    ['{F5C083F1-BB74-43DA-9DE3-050A82A310A6}']
    function CloseFile: Smallint; dispid 1610809348;
    function OpenFile: Smallint; dispid 1610809349;
    function Read: Smallint; dispid 1610809350;
    function Update: Smallint; dispid 1610809351;
    property MasterBusinessID: Integer dispid 1745027075;
    property SecurityCode: WideString dispid 1745027074;
    property TransmissionPhone: WideString dispid 1745027073;
    property Unknown[Index: Smallint]: Byte dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _GroupData
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DFA18B58-6843-49F7-900F-2B85F02B7315}
// *********************************************************************//
  _GroupData = interface(IDispatch)
    ['{DFA18B58-6843-49F7-900F-2B85F02B7315}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(Index: Smallint): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Flag(Index: Smallint): Byte; safecall;
    procedure Set_Flag(Index: Smallint; Param2: Byte); safecall;
    function Get_IDA(Index: Smallint): Smallint; safecall;
    procedure Set_IDA(Index: Smallint; Param2: Smallint); safecall;
    function Get_IDB(Index: Smallint): Smallint; safecall;
    procedure Set_IDB(Index: Smallint; Param2: Smallint); safecall;
    function Get_Index: Smallint; safecall;
    procedure Set_Index(Param1: Smallint); safecall;
    function Get_LongDescription: WideString; safecall;
    procedure Set_LongDescription(const Param1: WideString); safecall;
    function Get_ShortDescription: WideString; safecall;
    procedure Set_ShortDescription(const Param1: WideString); safecall;
    property Flag[Index: Smallint]: Byte read Get_Flag write Set_Flag;
    property IDA[Index: Smallint]: Smallint read Get_IDA write Set_IDA;
    property IDB[Index: Smallint]: Smallint read Get_IDB write Set_IDB;
    property Index: Smallint read Get_Index write Set_Index;
    property LongDescription: WideString read Get_LongDescription write Set_LongDescription;
    property ShortDescription: WideString read Get_ShortDescription write Set_ShortDescription;
  end;

// *********************************************************************//
// DispIntf:  _GroupDataDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DFA18B58-6843-49F7-900F-2B85F02B7315}
// *********************************************************************//
  _GroupDataDisp = dispinterface
    ['{DFA18B58-6843-49F7-900F-2B85F02B7315}']
    function CloseFile: Smallint; dispid 1610809350;
    function OpenFile: Smallint; dispid 1610809351;
    function Delete: Smallint; dispid 1610809352;
    function GetEqual(Index: Smallint): Smallint; dispid 1610809353;
    function Insert: Smallint; dispid 1610809354;
    function RecordCount: Integer; dispid 1610809356;
    function StepFirst: Smallint; dispid 1610809357;
    function StepLast: Smallint; dispid 1610809358;
    function StepNext: Smallint; dispid 1610809359;
    function StepPrevious: Smallint; dispid 1610809360;
    function Update: Smallint; dispid 1610809361;
    property Flag[Index: Smallint]: Byte dispid 1745027077;
    property IDA[Index: Smallint]: Smallint dispid 1745027076;
    property IDB[Index: Smallint]: Smallint dispid 1745027075;
    property Index: Smallint dispid 1745027074;
    property LongDescription: WideString dispid 1745027073;
    property ShortDescription: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _InventoryChain
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0C871551-80C7-4854-A9DB-E687A0DA193F}
// *********************************************************************//
  _InventoryChain = interface(IDispatch)
    ['{0C871551-80C7-4854-A9DB-E687A0DA193F}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Index1: Integer; safecall;
    procedure Set_Index1(Param1: Integer); safecall;
    function Get_Index2: Smallint; safecall;
    procedure Set_Index2(Param1: Smallint); safecall;
    function Get_Index3: Integer; safecall;
    procedure Set_Index3(Param1: Integer); safecall;
    function Get_Index4: Smallint; safecall;
    procedure Set_Index4(Param1: Smallint); safecall;
    function Get_Value: Double; safecall;
    procedure Set_Value(Param1: Double); safecall;
    property Index1: Integer read Get_Index1 write Set_Index1;
    property Index2: Smallint read Get_Index2 write Set_Index2;
    property Index3: Integer read Get_Index3 write Set_Index3;
    property Index4: Smallint read Get_Index4 write Set_Index4;
    property Value: Double read Get_Value write Set_Value;
  end;

// *********************************************************************//
// DispIntf:  _InventoryChainDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0C871551-80C7-4854-A9DB-E687A0DA193F}
// *********************************************************************//
  _InventoryChainDisp = dispinterface
    ['{0C871551-80C7-4854-A9DB-E687A0DA193F}']
    function CloseFile: Smallint; dispid 1610809349;
    function OpenFile: Smallint; dispid 1610809350;
    function Delete: Smallint; dispid 1610809351;
    function Insert: Smallint; dispid 1610809352;
    function RecordCount: Integer; dispid 1610809354;
    function StepFirst: Smallint; dispid 1610809355;
    function StepLast: Smallint; dispid 1610809356;
    function StepNext: Smallint; dispid 1610809357;
    function StepPrevious: Smallint; dispid 1610809358;
    function Update: Smallint; dispid 1610809359;
    property Index1: Integer dispid 1745027076;
    property Index2: Smallint dispid 1745027075;
    property Index3: Integer dispid 1745027074;
    property Index4: Smallint dispid 1745027073;
    property Value: Double dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _InventoryComponent
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E32AD34C-EA66-4B84-B0D8-F1AFBC6C5F4F}
// *********************************************************************//
  _InventoryComponent = interface(IDispatch)
    ['{E32AD34C-EA66-4B84-B0D8-F1AFBC6C5F4F}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_ComponentID: WideString; safecall;
    procedure Set_ComponentID(const Param1: WideString); safecall;
    function Get_ItemID: WideString; safecall;
    procedure Set_ItemID(const Param1: WideString); safecall;
    function Get_Quantity: Double; safecall;
    procedure Set_Quantity(Param1: Double); safecall;
    function Get_Unknown: Smallint; safecall;
    procedure Set_Unknown(Param1: Smallint); safecall;
    property ComponentID: WideString read Get_ComponentID write Set_ComponentID;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property Quantity: Double read Get_Quantity write Set_Quantity;
    property Unknown: Smallint read Get_Unknown write Set_Unknown;
  end;

// *********************************************************************//
// DispIntf:  _InventoryComponentDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E32AD34C-EA66-4B84-B0D8-F1AFBC6C5F4F}
// *********************************************************************//
  _InventoryComponentDisp = dispinterface
    ['{E32AD34C-EA66-4B84-B0D8-F1AFBC6C5F4F}']
    function CloseFile: Smallint; dispid 1610809348;
    function OpenFile: Smallint; dispid 1610809349;
    function Delete: Smallint; dispid 1610809350;
    function Insert: Smallint; dispid 1610809351;
    function RecordCount: Integer; dispid 1610809353;
    function StepFirst: Smallint; dispid 1610809354;
    function StepLast: Smallint; dispid 1610809355;
    function StepNext: Smallint; dispid 1610809356;
    function StepPrevious: Smallint; dispid 1610809357;
    function Update: Smallint; dispid 1610809358;
    property ComponentID: WideString dispid 1745027075;
    property ItemID: WideString dispid 1745027074;
    property Quantity: Double dispid 1745027073;
    property Unknown: Smallint dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _InventoryCost
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A8D25F38-0008-49CD-976C-384BE0B59D7C}
// *********************************************************************//
  _InventoryCost = interface(IDispatch)
    ['{A8D25F38-0008-49CD-976C-384BE0B59D7C}']
    function CloseFile: Smallint; safecall;
    function GetEqual(NRecord: Integer; Line: Smallint): Smallint; safecall;
    function GetFirst(Index: Integer): Smallint; safecall;
    function GetNext: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function Insert: Smallint; safecall;
    function QuantityOnHand(Index: Integer): Double; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_BeginningBalanceFlag: WordBool; safecall;
    procedure Set_BeginningBalanceFlag(Param1: WordBool); safecall;
    function Get_Code: Byte; safecall;
    procedure Set_Code(Param1: Byte); safecall;
    function Get_Cost1: Double; safecall;
    procedure Set_Cost1(Param1: Double); safecall;
    function Get_Cost2: Double; safecall;
    procedure Set_Cost2(Param1: Double); safecall;
    function Get_EntryDate: OleVariant; safecall;
    procedure Set_EntryDate(Param1: OleVariant); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_InventoryAccountIndex: Integer; safecall;
    procedure Set_InventoryAccountIndex(Param1: Integer); safecall;
    function Get_Number: Integer; safecall;
    procedure Set_Number(Param1: Integer); safecall;
    function Get_Quantity1: Double; safecall;
    procedure Set_Quantity1(Param1: Double); safecall;
    function Get_Quantity2: Double; safecall;
    procedure Set_Quantity2(Param1: Double); safecall;
    function Get_QuantitySold: Double; safecall;
    procedure Set_QuantitySold(Param1: Double); safecall;
    function Get_RecordCode: Smallint; safecall;
    procedure Set_RecordCode(Param1: Smallint); safecall;
    function Get_RecordType: Smallint; safecall;
    procedure Set_RecordType(Param1: Smallint); safecall;
    function Get_SaleFlag: WordBool; safecall;
    procedure Set_SaleFlag(Param1: WordBool); safecall;
    function Get_SalesAccountIndex: Integer; safecall;
    procedure Set_SalesAccountIndex(Param1: Integer); safecall;
    function Get_Unused: Byte; safecall;
    procedure Set_Unused(Param1: Byte); safecall;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property Code: Byte read Get_Code write Set_Code;
    property Cost1: Double read Get_Cost1 write Set_Cost1;
    property Cost2: Double read Get_Cost2 write Set_Cost2;
    property EntryDate: OleVariant read Get_EntryDate write Set_EntryDate;
    property Index: Integer read Get_Index write Set_Index;
    property InventoryAccountIndex: Integer read Get_InventoryAccountIndex write Set_InventoryAccountIndex;
    property Number: Integer read Get_Number write Set_Number;
    property Quantity1: Double read Get_Quantity1 write Set_Quantity1;
    property Quantity2: Double read Get_Quantity2 write Set_Quantity2;
    property QuantitySold: Double read Get_QuantitySold write Set_QuantitySold;
    property RecordCode: Smallint read Get_RecordCode write Set_RecordCode;
    property RecordType: Smallint read Get_RecordType write Set_RecordType;
    property SaleFlag: WordBool read Get_SaleFlag write Set_SaleFlag;
    property SalesAccountIndex: Integer read Get_SalesAccountIndex write Set_SalesAccountIndex;
    property Unused: Byte read Get_Unused write Set_Unused;
  end;

// *********************************************************************//
// DispIntf:  _InventoryCostDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A8D25F38-0008-49CD-976C-384BE0B59D7C}
// *********************************************************************//
  _InventoryCostDisp = dispinterface
    ['{A8D25F38-0008-49CD-976C-384BE0B59D7C}']
    function CloseFile: Smallint; dispid 1610809360;
    function GetEqual(NRecord: Integer; Line: Smallint): Smallint; dispid 1610809361;
    function GetFirst(Index: Integer): Smallint; dispid 1610809362;
    function GetNext: Smallint; dispid 1610809363;
    function OpenFile: Smallint; dispid 1610809364;
    function Delete: Smallint; dispid 1610809365;
    function Insert: Smallint; dispid 1610809366;
    function QuantityOnHand(Index: Integer): Double; dispid 1610809368;
    function RecordCount: Integer; dispid 1610809369;
    function StepFirst: Smallint; dispid 1610809370;
    function StepLast: Smallint; dispid 1610809371;
    function StepNext: Smallint; dispid 1610809372;
    function StepPrevious: Smallint; dispid 1610809373;
    function Update: Smallint; dispid 1610809374;
    property BeginningBalanceFlag: WordBool dispid 1745027087;
    property Code: Byte dispid 1745027086;
    property Cost1: Double dispid 1745027085;
    property Cost2: Double dispid 1745027084;
    property EntryDate: OleVariant dispid 1745027083;
    property Index: Integer dispid 1745027082;
    property InventoryAccountIndex: Integer dispid 1745027081;
    property Number: Integer dispid 1745027080;
    property Quantity1: Double dispid 1745027079;
    property Quantity2: Double dispid 1745027078;
    property QuantitySold: Double dispid 1745027077;
    property RecordCode: Smallint dispid 1745027076;
    property RecordType: Smallint dispid 1745027075;
    property SaleFlag: WordBool dispid 1745027074;
    property SalesAccountIndex: Integer dispid 1745027073;
    property Unused: Byte dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _ENums
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5F86289E-E438-45CD-96C8-ADD96930695E}
// *********************************************************************//
  _ENums = interface(IDispatch)
    ['{5F86289E-E438-45CD-96C8-ADD96930695E}']
  end;

// *********************************************************************//
// DispIntf:  _ENumsDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5F86289E-E438-45CD-96C8-ADD96930695E}
// *********************************************************************//
  _ENumsDisp = dispinterface
    ['{5F86289E-E438-45CD-96C8-ADD96930695E}']
  end;

// *********************************************************************//
// Interface: _JobData
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E8A88023-3A3B-4589-AAEB-E4CDBEFAA403}
// *********************************************************************//
  _JobData = interface(IDispatch)
    ['{E8A88023-3A3B-4589-AAEB-E4CDBEFAA403}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(const JobID: WideString): Smallint; safecall;
    function GetForIndex(Index: Integer): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_CustomerIndex: Integer; safecall;
    procedure Set_CustomerIndex(Param1: Integer); safecall;
    function Get_CustomField(Index: Smallint): WideString; safecall;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString); safecall;
    function Get_EndDate: OleVariant; safecall;
    procedure Set_EndDate(Param1: OleVariant); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_Inactive: WordBool; safecall;
    procedure Set_Inactive(Param1: WordBool); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_JobDescription: WideString; safecall;
    procedure Set_JobDescription(const Param1: WideString); safecall;
    function Get_JobID: WideString; safecall;
    procedure Set_JobID(const Param1: WideString); safecall;
    function Get_JobNote: WideString; safecall;
    procedure Set_JobNote(const Param1: WideString); safecall;
    function Get_JobType: WideString; safecall;
    procedure Set_JobType(const Param1: WideString); safecall;
    function Get_PercentComplete: Smallint; safecall;
    procedure Set_PercentComplete(Param1: Smallint); safecall;
    function Get_PONumber: WideString; safecall;
    procedure Set_PONumber(const Param1: WideString); safecall;
    function Get_StartDate: OleVariant; safecall;
    procedure Set_StartDate(Param1: OleVariant); safecall;
    function Get_Supervisor: WideString; safecall;
    procedure Set_Supervisor(const Param1: WideString); safecall;
    function Get_UsePhases: WordBool; safecall;
    procedure Set_UsePhases(Param1: WordBool); safecall;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property CustomField[Index: Smallint]: WideString read Get_CustomField write Set_CustomField;
    property EndDate: OleVariant read Get_EndDate write Set_EndDate;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property JobDescription: WideString read Get_JobDescription write Set_JobDescription;
    property JobID: WideString read Get_JobID write Set_JobID;
    property JobNote: WideString read Get_JobNote write Set_JobNote;
    property JobType: WideString read Get_JobType write Set_JobType;
    property PercentComplete: Smallint read Get_PercentComplete write Set_PercentComplete;
    property PONumber: WideString read Get_PONumber write Set_PONumber;
    property StartDate: OleVariant read Get_StartDate write Set_StartDate;
    property Supervisor: WideString read Get_Supervisor write Set_Supervisor;
    property UsePhases: WordBool read Get_UsePhases write Set_UsePhases;
  end;

// *********************************************************************//
// DispIntf:  _JobDataDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E8A88023-3A3B-4589-AAEB-E4CDBEFAA403}
// *********************************************************************//
  _JobDataDisp = dispinterface
    ['{E8A88023-3A3B-4589-AAEB-E4CDBEFAA403}']
    function CloseFile: Smallint; dispid 1610809359;
    function OpenFile: Smallint; dispid 1610809360;
    function Delete: Smallint; dispid 1610809361;
    function GetEqual(const JobID: WideString): Smallint; dispid 1610809362;
    function GetForIndex(Index: Integer): Smallint; dispid 1610809363;
    function Insert: Smallint; dispid 1610809364;
    function RecordCount: Integer; dispid 1610809366;
    function StepFirst: Smallint; dispid 1610809367;
    function StepLast: Smallint; dispid 1610809368;
    function StepNext: Smallint; dispid 1610809369;
    function StepPrevious: Smallint; dispid 1610809370;
    function Update: Smallint; dispid 1610809371;
    property CustomerIndex: Integer dispid 1745027086;
    property CustomField[Index: Smallint]: WideString dispid 1745027085;
    property EndDate: OleVariant dispid 1745027084;
    property GUID: WideString dispid 1745027083;
    property Inactive: WordBool dispid 1745027082;
    property Index: Integer dispid 1745027081;
    property JobDescription: WideString dispid 1745027080;
    property JobID: WideString dispid 1745027079;
    property JobNote: WideString dispid 1745027078;
    property JobType: WideString dispid 1745027077;
    property PercentComplete: Smallint dispid 1745027076;
    property PONumber: WideString dispid 1745027075;
    property StartDate: OleVariant dispid 1745027074;
    property Supervisor: WideString dispid 1745027073;
    property UsePhases: WordBool dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _JobEstimate
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CC3E57D4-0951-42D9-9758-7DED330B1459}
// *********************************************************************//
  _JobEstimate = interface(IDispatch)
    ['{CC3E57D4-0951-42D9-9758-7DED330B1459}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(JobIndex: Integer; PhaseIndex: Integer; CostIndex: Integer): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_CostIndex: Integer; safecall;
    procedure Set_CostIndex(Param1: Integer); safecall;
    function Get_Expenses: Double; safecall;
    procedure Set_Expenses(Param1: Double); safecall;
    function Get_JobIndex: Integer; safecall;
    procedure Set_JobIndex(Param1: Integer); safecall;
    function Get_NumberOfUnits: Double; safecall;
    procedure Set_NumberOfUnits(Param1: Double); safecall;
    function Get_PhaseIndex: Integer; safecall;
    procedure Set_PhaseIndex(Param1: Integer); safecall;
    function Get_Revenues: Double; safecall;
    procedure Set_Revenues(Param1: Double); safecall;
    property CostIndex: Integer read Get_CostIndex write Set_CostIndex;
    property Expenses: Double read Get_Expenses write Set_Expenses;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property NumberOfUnits: Double read Get_NumberOfUnits write Set_NumberOfUnits;
    property PhaseIndex: Integer read Get_PhaseIndex write Set_PhaseIndex;
    property Revenues: Double read Get_Revenues write Set_Revenues;
  end;

// *********************************************************************//
// DispIntf:  _JobEstimateDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CC3E57D4-0951-42D9-9758-7DED330B1459}
// *********************************************************************//
  _JobEstimateDisp = dispinterface
    ['{CC3E57D4-0951-42D9-9758-7DED330B1459}']
    function CloseFile: Smallint; dispid 1610809350;
    function OpenFile: Smallint; dispid 1610809351;
    function Delete: Smallint; dispid 1610809352;
    function GetEqual(JobIndex: Integer; PhaseIndex: Integer; CostIndex: Integer): Smallint; dispid 1610809353;
    function Insert: Smallint; dispid 1610809354;
    function RecordCount: Integer; dispid 1610809356;
    function StepFirst: Smallint; dispid 1610809357;
    function StepLast: Smallint; dispid 1610809358;
    function StepNext: Smallint; dispid 1610809359;
    function StepPrevious: Smallint; dispid 1610809360;
    function Update: Smallint; dispid 1610809361;
    property CostIndex: Integer dispid 1745027077;
    property Expenses: Double dispid 1745027076;
    property JobIndex: Integer dispid 1745027075;
    property NumberOfUnits: Double dispid 1745027074;
    property PhaseIndex: Integer dispid 1745027073;
    property Revenues: Double dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _JobTag
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DEF289CA-D93E-43B0-A96A-22DC2A5BF693}
// *********************************************************************//
  _JobTag = interface(IDispatch)
    ['{DEF289CA-D93E-43B0-A96A-22DC2A5BF693}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetFirst(JobIndex: Integer; PhaseIndex: Integer; CostIndex: Integer; 
                      JobDate: OleVariant): Smallint; safecall;
    function GetNext: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Amount: Double; safecall;
    procedure Set_Amount(Param1: Double); safecall;
    function Get_ComponentIndex: Integer; safecall;
    procedure Set_ComponentIndex(Param1: Integer); safecall;
    function Get_CostIndex: Integer; safecall;
    procedure Set_CostIndex(Param1: Integer); safecall;
    function Get_EntryDate: OleVariant; safecall;
    procedure Set_EntryDate(Param1: OleVariant); safecall;
    function Get_GLAccountID: WideString; safecall;
    procedure Set_GLAccountID(const Param1: WideString); safecall;
    function Get_JobIndex: Integer; safecall;
    procedure Set_JobIndex(Param1: Integer); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_PhaseIndex: Integer; safecall;
    procedure Set_PhaseIndex(Param1: Integer); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_StockItem: WordBool; safecall;
    procedure Set_StockItem(Param1: WordBool); safecall;
    function Get_LineNumber: Smallint; safecall;
    procedure Set_LineNumber(Param1: Smallint); safecall;
    property Amount: Double read Get_Amount write Set_Amount;
    property ComponentIndex: Integer read Get_ComponentIndex write Set_ComponentIndex;
    property CostIndex: Integer read Get_CostIndex write Set_CostIndex;
    property EntryDate: OleVariant read Get_EntryDate write Set_EntryDate;
    property GLAccountID: WideString read Get_GLAccountID write Set_GLAccountID;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property Period: Smallint read Get_Period write Set_Period;
    property PhaseIndex: Integer read Get_PhaseIndex write Set_PhaseIndex;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property StockItem: WordBool read Get_StockItem write Set_StockItem;
    property LineNumber: Smallint read Get_LineNumber write Set_LineNumber;
  end;

// *********************************************************************//
// DispIntf:  _JobTagDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DEF289CA-D93E-43B0-A96A-22DC2A5BF693}
// *********************************************************************//
  _JobTagDisp = dispinterface
    ['{DEF289CA-D93E-43B0-A96A-22DC2A5BF693}']
    function CloseFile: Smallint; dispid 1610809359;
    function OpenFile: Smallint; dispid 1610809360;
    function Delete: Smallint; dispid 1610809361;
    function GetFirst(JobIndex: Integer; PhaseIndex: Integer; CostIndex: Integer; 
                      JobDate: OleVariant): Smallint; dispid 1610809362;
    function GetNext: Smallint; dispid 1610809363;
    function Insert: Smallint; dispid 1610809364;
    function RecordCount: Integer; dispid 1610809366;
    function StepFirst: Smallint; dispid 1610809367;
    function StepLast: Smallint; dispid 1610809368;
    function StepNext: Smallint; dispid 1610809369;
    function StepPrevious: Smallint; dispid 1610809370;
    function Update: Smallint; dispid 1610809371;
    property Amount: Double dispid 1745027086;
    property ComponentIndex: Integer dispid 1745027085;
    property CostIndex: Integer dispid 1745027084;
    property EntryDate: OleVariant dispid 1745027083;
    property GLAccountID: WideString dispid 1745027082;
    property JobIndex: Integer dispid 1745027081;
    property JournalID: Smallint dispid 1745027080;
    property Key: Double dispid 1745027079;
    property Period: Smallint dispid 1745027078;
    property PhaseIndex: Integer dispid 1745027077;
    property Subindex1: Byte dispid 1745027076;
    property Subindex2: Byte dispid 1745027075;
    property TrxNumber: Smallint dispid 1745027074;
    property StockItem: WordBool dispid 1745027073;
    property LineNumber: Smallint dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _CashDisbursementJournal
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BEAEE06C-BAD5-484E-8C89-A84C825E55BD}
// *********************************************************************//
  _CashDisbursementJournal = interface(IDispatch)
    ['{BEAEE06C-BAD5-484E-8C89-A84C825E55BD}']
    function ClearRecord: Smallint; safecall;
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(NRecord: Integer): Smallint; safecall;
    function IncrementBatchCount: Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function ReadFirst(Period: Smallint): Smallint; safecall;
    function ReadFirstForVendor(Index: Integer): Smallint; safecall;
    function ReadNext: Smallint; safecall;
    function ReadNextByVendor: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_BeginningBalanceFlag: WordBool; safecall;
    procedure Set_BeginningBalanceFlag(Param1: WordBool); safecall;
    function Get_CashAccount: WideString; safecall;
    procedure Set_CashAccount(const Param1: WideString); safecall;
    function Get_CashAmount: Double; safecall;
    procedure Set_CashAmount(Param1: Double); safecall;
    function Get_CheckAddr1: WideString; safecall;
    procedure Set_CheckAddr1(const Param1: WideString); safecall;
    function Get_CheckAddr2: WideString; safecall;
    procedure Set_CheckAddr2(const Param1: WideString); safecall;
    function Get_CheckCity: WideString; safecall;
    procedure Set_CheckCity(const Param1: WideString); safecall;
    function Get_CheckCountry: WideString; safecall;
    procedure Set_CheckCountry(const Param1: WideString); safecall;
    function Get_CheckName: WideString; safecall;
    procedure Set_CheckName(const Param1: WideString); safecall;
    function Get_CheckNumber: WideString; safecall;
    procedure Set_CheckNumber(const Param1: WideString); safecall;
    function Get_CheckState: WideString; safecall;
    procedure Set_CheckState(const Param1: WideString); safecall;
    function Get_CheckZipcode: WideString; safecall;
    procedure Set_CheckZipcode(const Param1: WideString); safecall;
    function Get_CustomerIndex: Integer; safecall;
    procedure Set_CustomerIndex(Param1: Integer); safecall;
    function Get_CustomerPayment: WordBool; safecall;
    procedure Set_CustomerPayment(Param1: WordBool); safecall;
    function Get_DateCleared: OleVariant; safecall;
    procedure Set_DateCleared(Param1: OleVariant); safecall;
    function Get_DetailAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailCostIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailCostOfSalesAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool; safecall;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailCustomerIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCustomerIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailDateCleared(Index: Smallint): OleVariant; safecall;
    procedure Set_DetailDateCleared(Index: Smallint; Param2: OleVariant); safecall;
    function Get_DetailDescription(Index: Smallint): WideString; safecall;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailDiscountAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailDiscountAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailFlag1(Index: Smallint): WordBool; safecall;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailFlag2(Index: Smallint): WordBool; safecall;
    procedure Set_DetailFlag2(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailInventoryAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailInventoryAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailInventoryAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailInvoiceNRecord(Index: Smallint): Integer; safecall;
    procedure Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailInvoicePaid(Index: Smallint): WideString; safecall;
    procedure Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailItemIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailJobIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailLineNo(Index: Smallint): Smallint; safecall;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailPhaseIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailTaxType(Index: Smallint): Smallint; safecall;
    procedure Set_DetailTaxType(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailTrxType(Index: Smallint): Integer; safecall;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailUnknownBoolean(Index: Smallint): WordBool; safecall;
    procedure Set_DetailUnknownBoolean(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailUnused1(Index: Smallint): Byte; safecall;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Byte); safecall;
    function Get_DetailVendorIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailVendorIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DiscountAccount: WideString; safecall;
    procedure Set_DiscountAccount(const Param1: WideString); safecall;
    function Get_EditCount: Integer; safecall;
    procedure Set_EditCount(Param1: Integer); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_JournalCode: WideString; safecall;
    procedure Set_JournalCode(const Param1: WideString); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_JrnlTypeEx: Integer; safecall;
    procedure Set_JrnlTypeEx(Param1: Integer); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_MainAccount: WideString; safecall;
    procedure Set_MainAccount(const Param1: WideString); safecall;
    function Get_MaxNRecord: Integer; safecall;
    function Get_MaxTrxNumber(Period: Smallint): Smallint; safecall;
    function Get_MaxTrxNumberL(Period: Smallint): Integer; safecall;
    function Get_Memo: WideString; safecall;
    procedure Set_Memo(const Param1: WideString); safecall;
    function Get_NDistributions: Smallint; safecall;
    procedure Set_NDistributions(Param1: Smallint); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_PaymentMethod: WideString; safecall;
    procedure Set_PaymentMethod(const Param1: WideString); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_Posted: WordBool; safecall;
    procedure Set_Posted(Param1: WordBool); safecall;
    function Get_Prepayment: WordBool; safecall;
    procedure Set_Prepayment(Param1: WordBool); safecall;
    function Get_PrintCheck: WordBool; safecall;
    procedure Set_PrintCheck(Param1: WordBool); safecall;
    function Get_ReceiptDate: OleVariant; safecall;
    procedure Set_ReceiptDate(Param1: OleVariant); safecall;
    function Get_RecurrenceIndex: Integer; safecall;
    procedure Set_RecurrenceIndex(Param1: Integer); safecall;
    function Get_RecurrenceRate: Smallint; safecall;
    procedure Set_RecurrenceRate(Param1: Smallint); safecall;
    function Get_ReimbursableExpense: WordBool; safecall;
    procedure Set_ReimbursableExpense(Param1: WordBool); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_TotalPaidOnInvoice: Double; safecall;
    procedure Set_TotalPaidOnInvoice(Param1: Double); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_TrxNumberL: Integer; safecall;
    procedure Set_TrxNumberL(Param1: Integer); safecall;
    function Get_Unused1(Index: Smallint): Byte; safecall;
    procedure Set_Unused1(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown2: Smallint; safecall;
    procedure Set_Unknown2(Param1: Smallint); safecall;
    function Get_Unused3: Smallint; safecall;
    procedure Set_Unused3(Param1: Smallint); safecall;
    function Get_Unknown4: Smallint; safecall;
    procedure Set_Unknown4(Param1: Smallint); safecall;
    function Get_Unused5(Index: Smallint): Byte; safecall;
    procedure Set_Unused5(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused6(Index: Smallint): Byte; safecall;
    procedure Set_Unused6(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused7(Index: Smallint): Byte; safecall;
    procedure Set_Unused7(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused8: Byte; safecall;
    procedure Set_Unused8(Param1: Byte); safecall;
    function Get_VendorIndex: Integer; safecall;
    procedure Set_VendorIndex(Param1: Integer); safecall;
    function Get_VendorName: WideString; safecall;
    procedure Set_VendorName(const Param1: WideString); safecall;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property CashAmount: Double read Get_CashAmount write Set_CashAmount;
    property CheckAddr1: WideString read Get_CheckAddr1 write Set_CheckAddr1;
    property CheckAddr2: WideString read Get_CheckAddr2 write Set_CheckAddr2;
    property CheckCity: WideString read Get_CheckCity write Set_CheckCity;
    property CheckCountry: WideString read Get_CheckCountry write Set_CheckCountry;
    property CheckName: WideString read Get_CheckName write Set_CheckName;
    property CheckNumber: WideString read Get_CheckNumber write Set_CheckNumber;
    property CheckState: WideString read Get_CheckState write Set_CheckState;
    property CheckZipcode: WideString read Get_CheckZipcode write Set_CheckZipcode;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property CustomerPayment: WordBool read Get_CustomerPayment write Set_CustomerPayment;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCostOfSalesAccount[Index: Smallint]: WideString read Get_DetailCostOfSalesAccount write Set_DetailCostOfSalesAccount;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool read Get_DetailCostOfSalesTrx write Set_DetailCostOfSalesTrx;
    property DetailCustomerIndex[Index: Smallint]: Integer read Get_DetailCustomerIndex write Set_DetailCustomerIndex;
    property DetailDateCleared[Index: Smallint]: OleVariant read Get_DetailDateCleared write Set_DetailDateCleared;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailDiscountAmount[Index: Smallint]: Double read Get_DetailDiscountAmount write Set_DetailDiscountAmount;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailFlag2[Index: Smallint]: WordBool read Get_DetailFlag2 write Set_DetailFlag2;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailInventoryAccount[Index: Smallint]: WideString read Get_DetailInventoryAccount write Set_DetailInventoryAccount;
    property DetailInventoryAmount[Index: Smallint]: Double read Get_DetailInventoryAmount write Set_DetailInventoryAmount;
    property DetailInvoiceNRecord[Index: Smallint]: Integer read Get_DetailInvoiceNRecord write Set_DetailInvoiceNRecord;
    property DetailInvoicePaid[Index: Smallint]: WideString read Get_DetailInvoicePaid write Set_DetailInvoicePaid;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTaxType[Index: Smallint]: Smallint read Get_DetailTaxType write Set_DetailTaxType;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnknownBoolean[Index: Smallint]: WordBool read Get_DetailUnknownBoolean write Set_DetailUnknownBoolean;
    property DetailUnused1[Index: Smallint]: Byte read Get_DetailUnused1 write Set_DetailUnused1;
    property DetailVendorIndex[Index: Smallint]: Integer read Get_DetailVendorIndex write Set_DetailVendorIndex;
    property DiscountAccount: WideString read Get_DiscountAccount write Set_DiscountAccount;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property JrnlTypeEx: Integer read Get_JrnlTypeEx write Set_JrnlTypeEx;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property Memo: WideString read Get_Memo write Set_Memo;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property PaymentMethod: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property PrintCheck: WordBool read Get_PrintCheck write Set_PrintCheck;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TotalPaidOnInvoice: Double read Get_TotalPaidOnInvoice write Set_TotalPaidOnInvoice;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
    property Unknown4: Smallint read Get_Unknown4 write Set_Unknown4;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property Unused7[Index: Smallint]: Byte read Get_Unused7 write Set_Unused7;
    property Unused8: Byte read Get_Unused8 write Set_Unused8;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property VendorName: WideString read Get_VendorName write Set_VendorName;
  end;

// *********************************************************************//
// DispIntf:  _CashDisbursementJournalDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BEAEE06C-BAD5-484E-8C89-A84C825E55BD}
// *********************************************************************//
  _CashDisbursementJournalDisp = dispinterface
    ['{BEAEE06C-BAD5-484E-8C89-A84C825E55BD}']
    function ClearRecord: Smallint; dispid 1610809426;
    function CloseFile: Smallint; dispid 1610809427;
    function Delete: Smallint; dispid 1610809428;
    function GetEqual(NRecord: Integer): Smallint; dispid 1610809429;
    function IncrementBatchCount: Smallint; dispid 1610809430;
    function Insert: Smallint; dispid 1610809431;
    function OpenFile: Smallint; dispid 1610809432;
    function ReadFirst(Period: Smallint): Smallint; dispid 1610809434;
    function ReadFirstForVendor(Index: Integer): Smallint; dispid 1610809435;
    function ReadNext: Smallint; dispid 1610809436;
    function ReadNextByVendor: Smallint; dispid 1610809437;
    function Update: Smallint; dispid 1610809438;
    property BeginningBalanceFlag: WordBool dispid 1745027153;
    property CashAccount: WideString dispid 1745027152;
    property CashAmount: Double dispid 1745027151;
    property CheckAddr1: WideString dispid 1745027150;
    property CheckAddr2: WideString dispid 1745027149;
    property CheckCity: WideString dispid 1745027148;
    property CheckCountry: WideString dispid 1745027147;
    property CheckName: WideString dispid 1745027146;
    property CheckNumber: WideString dispid 1745027145;
    property CheckState: WideString dispid 1745027144;
    property CheckZipcode: WideString dispid 1745027143;
    property CustomerIndex: Integer dispid 1745027142;
    property CustomerPayment: WordBool dispid 1745027141;
    property DateCleared: OleVariant dispid 1745027140;
    property DetailAmount[Index: Smallint]: Double dispid 1745027139;
    property DetailCostIndex[Index: Smallint]: Integer dispid 1745027138;
    property DetailCostOfSalesAccount[Index: Smallint]: WideString dispid 1745027137;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool dispid 1745027136;
    property DetailCustomerIndex[Index: Smallint]: Integer dispid 1745027135;
    property DetailDateCleared[Index: Smallint]: OleVariant dispid 1745027134;
    property DetailDescription[Index: Smallint]: WideString dispid 1745027133;
    property DetailDiscountAmount[Index: Smallint]: Double dispid 1745027132;
    property DetailFlag1[Index: Smallint]: WordBool dispid 1745027131;
    property DetailFlag2[Index: Smallint]: WordBool dispid 1745027130;
    property DetailGLAccount[Index: Smallint]: WideString dispid 1745027129;
    property DetailGUID[Index: Smallint]: WideString dispid 1745027128;
    property DetailInventoryAccount[Index: Smallint]: WideString dispid 1745027127;
    property DetailInventoryAmount[Index: Smallint]: Double dispid 1745027126;
    property DetailInvoiceNRecord[Index: Smallint]: Integer dispid 1745027125;
    property DetailInvoicePaid[Index: Smallint]: WideString dispid 1745027124;
    property DetailItemIndex[Index: Smallint]: Integer dispid 1745027123;
    property DetailJobIndex[Index: Smallint]: Integer dispid 1745027122;
    property DetailLineNo[Index: Smallint]: Smallint dispid 1745027121;
    property DetailPhaseIndex[Index: Smallint]: Integer dispid 1745027120;
    property DetailQuantity[Index: Smallint]: Double dispid 1745027119;
    property DetailStockingQuantity[Index: Smallint]: Double dispid 1745027118;
    property DetailStockingUnitPrice[Index: Smallint]: Double dispid 1745027117;
    property DetailTaxType[Index: Smallint]: Smallint dispid 1745027116;
    property DetailTrxType[Index: Smallint]: Integer dispid 1745027115;
    property DetailUnitPrice[Index: Smallint]: Double dispid 1745027114;
    property DetailUnknownBoolean[Index: Smallint]: WordBool dispid 1745027113;
    property DetailUnused1[Index: Smallint]: Byte dispid 1745027112;
    property DetailVendorIndex[Index: Smallint]: Integer dispid 1745027111;
    property DiscountAccount: WideString dispid 1745027110;
    property EditCount: Integer dispid 1745027109;
    property GUID: WideString dispid 1745027108;
    property JournalCode: WideString dispid 1745027107;
    property JournalID: Smallint dispid 1745027106;
    property JrnlTypeEx: Integer dispid 1745027105;
    property Key: Double dispid 1745027104;
    property MainAccount: WideString dispid 1745027103;
    property MaxNRecord: Integer readonly dispid 1745027102;
    property MaxTrxNumber[Period: Smallint]: Smallint readonly dispid 1745027101;
    property MaxTrxNumberL[Period: Smallint]: Integer readonly dispid 1745027100;
    property Memo: WideString dispid 1745027099;
    property NDistributions: Smallint dispid 1745027098;
    property NRecord: Integer dispid 1745027097;
    property PaymentMethod: WideString dispid 1745027096;
    property Period: Smallint dispid 1745027095;
    property Posted: WordBool dispid 1745027094;
    property Prepayment: WordBool dispid 1745027093;
    property PrintCheck: WordBool dispid 1745027092;
    property ReceiptDate: OleVariant dispid 1745027091;
    property RecurrenceIndex: Integer dispid 1745027090;
    property RecurrenceRate: Smallint dispid 1745027089;
    property ReimbursableExpense: WordBool dispid 1745027088;
    property Subindex1: Byte dispid 1745027087;
    property Subindex2: Byte dispid 1745027086;
    property TotalPaidOnInvoice: Double dispid 1745027085;
    property TrxDate: OleVariant dispid 1745027084;
    property TrxNumber: Smallint dispid 1745027083;
    property TrxNumberL: Integer dispid 1745027082;
    property Unused1[Index: Smallint]: Byte dispid 1745027081;
    property Unknown2: Smallint dispid 1745027080;
    property Unused3: Smallint dispid 1745027079;
    property Unknown4: Smallint dispid 1745027078;
    property Unused5[Index: Smallint]: Byte dispid 1745027077;
    property Unused6[Index: Smallint]: Byte dispid 1745027076;
    property Unused7[Index: Smallint]: Byte dispid 1745027075;
    property Unused8: Byte dispid 1745027074;
    property VendorIndex: Integer dispid 1745027073;
    property VendorName: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _CashReceiptJournal
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3D47D9FA-9FC9-445A-9C51-C34C54476933}
// *********************************************************************//
  _CashReceiptJournal = interface(IDispatch)
    ['{3D47D9FA-9FC9-445A-9C51-C34C54476933}']
    function ClearRecord: Smallint; safecall;
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(NRecord: Integer): Smallint; safecall;
    function GetForKey(Subindex1: Byte; TrxNumber: Smallint; Period: Smallint; JournalID: Smallint; 
                       Subindex2: Smallint): OleVariant; safecall;
    function GetForKeyL(Subindex1: Byte; TrxNumber: Integer; Period: Smallint; JournalID: Smallint; 
                        Subindex2: Smallint): OleVariant; safecall;
    function IncrementBatchCount: Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function ReadFirst(Period: Smallint): Smallint; safecall;
    function ReadFirstForCustomer(Index: Integer): Smallint; safecall;
    function ReadNext: Smallint; safecall;
    function ReadNextByCustomer: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_BeginningBalanceFlag: WordBool; safecall;
    procedure Set_BeginningBalanceFlag(Param1: WordBool); safecall;
    function Get_CashAccount: WideString; safecall;
    procedure Set_CashAccount(const Param1: WideString); safecall;
    function Get_CashAmount: Double; safecall;
    procedure Set_CashAmount(Param1: Double); safecall;
    function Get_CCAddress1: WideString; safecall;
    procedure Set_CCAddress1(const Param1: WideString); safecall;
    function Get_CCAddress2: WideString; safecall;
    procedure Set_CCAddress2(const Param1: WideString); safecall;
    function Get_CCAuthorization: WideString; safecall;
    procedure Set_CCAuthorization(const Param1: WideString); safecall;
    function Get_CCCity: WideString; safecall;
    procedure Set_CCCity(const Param1: WideString); safecall;
    function Get_CCComment: WideString; safecall;
    procedure Set_CCComment(const Param1: WideString); safecall;
    function Get_CCCountry: WideString; safecall;
    procedure Set_CCCountry(const Param1: WideString); safecall;
    function Get_CCEncryptedCard: WideString; safecall;
    procedure Set_CCEncryptedCard(const Param1: WideString); safecall;
    function Get_CCExpirationDate: OleVariant; safecall;
    procedure Set_CCExpirationDate(Param1: OleVariant); safecall;
    function Get_CCFlag: Byte; safecall;
    procedure Set_CCFlag(Param1: Byte); safecall;
    function Get_CCName: WideString; safecall;
    procedure Set_CCName(const Param1: WideString); safecall;
    function Get_CCNumber: WideString; safecall;
    procedure Set_CCNumber(const Param1: WideString); safecall;
    function Get_CCState: WideString; safecall;
    procedure Set_CCState(const Param1: WideString); safecall;
    function Get_CCUnknown(Index: Smallint): Byte; safecall;
    procedure Set_CCUnknown(Index: Smallint; Param2: Byte); safecall;
    function Get_CCZipcode: WideString; safecall;
    procedure Set_CCZipcode(const Param1: WideString); safecall;
    function Get_CheckAddr1: WideString; safecall;
    procedure Set_CheckAddr1(const Param1: WideString); safecall;
    function Get_CheckAddr2: WideString; safecall;
    procedure Set_CheckAddr2(const Param1: WideString); safecall;
    function Get_CheckCity: WideString; safecall;
    procedure Set_CheckCity(const Param1: WideString); safecall;
    function Get_CheckCountry: WideString; safecall;
    procedure Set_CheckCountry(const Param1: WideString); safecall;
    function Get_CheckName: WideString; safecall;
    procedure Set_CheckName(const Param1: WideString); safecall;
    function Get_CheckState: WideString; safecall;
    procedure Set_CheckState(const Param1: WideString); safecall;
    function Get_CheckZipcode: WideString; safecall;
    procedure Set_CheckZipcode(const Param1: WideString); safecall;
    function Get_CustomerIndex: Integer; safecall;
    procedure Set_CustomerIndex(Param1: Integer); safecall;
    function Get_CustomerName: WideString; safecall;
    procedure Set_CustomerName(const Param1: WideString); safecall;
    function Get_DateCleared: OleVariant; safecall;
    procedure Set_DateCleared(Param1: OleVariant); safecall;
    function Get_DepositDate: OleVariant; safecall;
    procedure Set_DepositDate(Param1: OleVariant); safecall;
    function Get_DepositTicketID: WideString; safecall;
    procedure Set_DepositTicketID(const Param1: WideString); safecall;
    function Get_DetailAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailCostIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailCostOfSalesAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailCostOfSalesAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailCostOfSalesAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool; safecall;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailCustomerIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCustomerIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailDateCleared(Index: Smallint): OleVariant; safecall;
    procedure Set_DetailDateCleared(Index: Smallint; Param2: OleVariant); safecall;
    function Get_DetailDescription(Index: Smallint): WideString; safecall;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailDiscountAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailDiscountAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailFlag1(Index: Smallint): WordBool; safecall;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailInventoryAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailInvoiceNRecord(Index: Smallint): Integer; safecall;
    procedure Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailInvoicePaid(Index: Smallint): WideString; safecall;
    procedure Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailItemIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailJobIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailLineNo(Index: Smallint): Smallint; safecall;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailPhaseIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailSalesTaxAuthority(Index: Smallint): WideString; safecall;
    procedure Set_DetailSalesTaxAuthority(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailStockingQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailTaxType(Index: Smallint): Smallint; safecall;
    procedure Set_DetailTaxType(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailTrxType(Index: Smallint): Integer; safecall;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailUnused1(Index: Smallint): Byte; safecall;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Byte); safecall;
    function Get_DetailVendorIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailVendorIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DiscountAccount: WideString; safecall;
    procedure Set_DiscountAccount(const Param1: WideString); safecall;
    function Get_EditCount: Integer; safecall;
    procedure Set_EditCount(Param1: Integer); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_InvoicesPaid: Double; safecall;
    procedure Set_InvoicesPaid(Param1: Double); safecall;
    function Get_JournalCode: WideString; safecall;
    procedure Set_JournalCode(const Param1: WideString); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_MainAccount: WideString; safecall;
    procedure Set_MainAccount(const Param1: WideString); safecall;
    function Get_MaxNRecord: Integer; safecall;
    function Get_MaxTrxNumber(Period: Smallint): Smallint; safecall;
    function Get_MaxTrxNumberL(Period: Smallint): Integer; safecall;
    function Get_NDistributions: Smallint; safecall;
    procedure Set_NDistributions(Param1: Smallint); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_PaymentMethod: WideString; safecall;
    procedure Set_PaymentMethod(const Param1: WideString); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_Posted: WordBool; safecall;
    procedure Set_Posted(Param1: WordBool); safecall;
    function Get_Prepayment: WordBool; safecall;
    procedure Set_Prepayment(Param1: WordBool); safecall;
    function Get_ReceiptDate: OleVariant; safecall;
    procedure Set_ReceiptDate(Param1: OleVariant); safecall;
    function Get_ReceiptNum: WideString; safecall;
    procedure Set_ReceiptNum(const Param1: WideString); safecall;
    function Get_RecurrenceIndex: Integer; safecall;
    procedure Set_RecurrenceIndex(Param1: Integer); safecall;
    function Get_RecurrenceRate: Smallint; safecall;
    procedure Set_RecurrenceRate(Param1: Smallint); safecall;
    function Get_Reference: WideString; safecall;
    procedure Set_Reference(const Param1: WideString); safecall;
    function Get_SalesRepID: WideString; safecall;
    procedure Set_SalesRepID(const Param1: WideString); safecall;
    function Get_SalesTaxCode: WideString; safecall;
    procedure Set_SalesTaxCode(const Param1: WideString); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_TrxNumberL: Integer; safecall;
    procedure Set_TrxNumberL(Param1: Integer); safecall;
    function Get_Unused1: Byte; safecall;
    procedure Set_Unused1(Param1: Byte); safecall;
    function Get_Unknown2: Smallint; safecall;
    procedure Set_Unknown2(Param1: Smallint); safecall;
    function Get_Unused3: Smallint; safecall;
    procedure Set_Unused3(Param1: Smallint); safecall;
    function Get_Unknown4: Smallint; safecall;
    procedure Set_Unknown4(Param1: Smallint); safecall;
    function Get_Unused5: Byte; safecall;
    procedure Set_Unused5(Param1: Byte); safecall;
    function Get_Unused6(Index: Smallint): Byte; safecall;
    procedure Set_Unused6(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused7(Index: Smallint): Byte; safecall;
    procedure Set_Unused7(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused8: Byte; safecall;
    procedure Set_Unused8(Param1: Byte); safecall;
    function Get_VendorIndex: Integer; safecall;
    procedure Set_VendorIndex(Param1: Integer); safecall;
    function Get_VendorReceipt: WordBool; safecall;
    procedure Set_VendorReceipt(Param1: WordBool); safecall;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property CashAmount: Double read Get_CashAmount write Set_CashAmount;
    property CCAddress1: WideString read Get_CCAddress1 write Set_CCAddress1;
    property CCAddress2: WideString read Get_CCAddress2 write Set_CCAddress2;
    property CCAuthorization: WideString read Get_CCAuthorization write Set_CCAuthorization;
    property CCCity: WideString read Get_CCCity write Set_CCCity;
    property CCComment: WideString read Get_CCComment write Set_CCComment;
    property CCCountry: WideString read Get_CCCountry write Set_CCCountry;
    property CCEncryptedCard: WideString read Get_CCEncryptedCard write Set_CCEncryptedCard;
    property CCExpirationDate: OleVariant read Get_CCExpirationDate write Set_CCExpirationDate;
    property CCFlag: Byte read Get_CCFlag write Set_CCFlag;
    property CCName: WideString read Get_CCName write Set_CCName;
    property CCNumber: WideString read Get_CCNumber write Set_CCNumber;
    property CCState: WideString read Get_CCState write Set_CCState;
    property CCUnknown[Index: Smallint]: Byte read Get_CCUnknown write Set_CCUnknown;
    property CCZipcode: WideString read Get_CCZipcode write Set_CCZipcode;
    property CheckAddr1: WideString read Get_CheckAddr1 write Set_CheckAddr1;
    property CheckAddr2: WideString read Get_CheckAddr2 write Set_CheckAddr2;
    property CheckCity: WideString read Get_CheckCity write Set_CheckCity;
    property CheckCountry: WideString read Get_CheckCountry write Set_CheckCountry;
    property CheckName: WideString read Get_CheckName write Set_CheckName;
    property CheckState: WideString read Get_CheckState write Set_CheckState;
    property CheckZipcode: WideString read Get_CheckZipcode write Set_CheckZipcode;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DepositDate: OleVariant read Get_DepositDate write Set_DepositDate;
    property DepositTicketID: WideString read Get_DepositTicketID write Set_DepositTicketID;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCostOfSalesAccount[Index: Smallint]: WideString read Get_DetailCostOfSalesAccount write Set_DetailCostOfSalesAccount;
    property DetailCostOfSalesAmount[Index: Smallint]: Double read Get_DetailCostOfSalesAmount write Set_DetailCostOfSalesAmount;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool read Get_DetailCostOfSalesTrx write Set_DetailCostOfSalesTrx;
    property DetailCustomerIndex[Index: Smallint]: Integer read Get_DetailCustomerIndex write Set_DetailCustomerIndex;
    property DetailDateCleared[Index: Smallint]: OleVariant read Get_DetailDateCleared write Set_DetailDateCleared;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailDiscountAmount[Index: Smallint]: Double read Get_DetailDiscountAmount write Set_DetailDiscountAmount;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailInventoryAccount[Index: Smallint]: WideString read Get_DetailInventoryAccount write Set_DetailInventoryAccount;
    property DetailInvoiceNRecord[Index: Smallint]: Integer read Get_DetailInvoiceNRecord write Set_DetailInvoiceNRecord;
    property DetailInvoicePaid[Index: Smallint]: WideString read Get_DetailInvoicePaid write Set_DetailInvoicePaid;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailSalesTaxAuthority[Index: Smallint]: WideString read Get_DetailSalesTaxAuthority write Set_DetailSalesTaxAuthority;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTaxType[Index: Smallint]: Smallint read Get_DetailTaxType write Set_DetailTaxType;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnused1[Index: Smallint]: Byte read Get_DetailUnused1 write Set_DetailUnused1;
    property DetailVendorIndex[Index: Smallint]: Integer read Get_DetailVendorIndex write Set_DetailVendorIndex;
    property DiscountAccount: WideString read Get_DiscountAccount write Set_DiscountAccount;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InvoicesPaid: Double read Get_InvoicesPaid write Set_InvoicesPaid;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property PaymentMethod: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property ReceiptNum: WideString read Get_ReceiptNum write Set_ReceiptNum;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property Reference: WideString read Get_Reference write Set_Reference;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
    property Unknown4: Smallint read Get_Unknown4 write Set_Unknown4;
    property Unused5: Byte read Get_Unused5 write Set_Unused5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property Unused7[Index: Smallint]: Byte read Get_Unused7 write Set_Unused7;
    property Unused8: Byte read Get_Unused8 write Set_Unused8;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property VendorReceipt: WordBool read Get_VendorReceipt write Set_VendorReceipt;
  end;

// *********************************************************************//
// DispIntf:  _CashReceiptJournalDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3D47D9FA-9FC9-445A-9C51-C34C54476933}
// *********************************************************************//
  _CashReceiptJournalDisp = dispinterface
    ['{3D47D9FA-9FC9-445A-9C51-C34C54476933}']
    function ClearRecord: Smallint; dispid 1610809440;
    function CloseFile: Smallint; dispid 1610809441;
    function Delete: Smallint; dispid 1610809442;
    function GetEqual(NRecord: Integer): Smallint; dispid 1610809443;
    function GetForKey(Subindex1: Byte; TrxNumber: Smallint; Period: Smallint; JournalID: Smallint; 
                       Subindex2: Smallint): OleVariant; dispid 1610809444;
    function GetForKeyL(Subindex1: Byte; TrxNumber: Integer; Period: Smallint; JournalID: Smallint; 
                        Subindex2: Smallint): OleVariant; dispid 1610809445;
    function IncrementBatchCount: Smallint; dispid 1610809446;
    function Insert: Smallint; dispid 1610809447;
    function OpenFile: Smallint; dispid 1610809448;
    function ReadFirst(Period: Smallint): Smallint; dispid 1610809450;
    function ReadFirstForCustomer(Index: Integer): Smallint; dispid 1610809451;
    function ReadNext: Smallint; dispid 1610809452;
    function ReadNextByCustomer: Smallint; dispid 1610809453;
    function Update: Smallint; dispid 1610809454;
    property BeginningBalanceFlag: WordBool dispid 1745027167;
    property CashAccount: WideString dispid 1745027166;
    property CashAmount: Double dispid 1745027165;
    property CCAddress1: WideString dispid 1745027164;
    property CCAddress2: WideString dispid 1745027163;
    property CCAuthorization: WideString dispid 1745027162;
    property CCCity: WideString dispid 1745027161;
    property CCComment: WideString dispid 1745027160;
    property CCCountry: WideString dispid 1745027159;
    property CCEncryptedCard: WideString dispid 1745027158;
    property CCExpirationDate: OleVariant dispid 1745027157;
    property CCFlag: Byte dispid 1745027156;
    property CCName: WideString dispid 1745027155;
    property CCNumber: WideString dispid 1745027154;
    property CCState: WideString dispid 1745027153;
    property CCUnknown[Index: Smallint]: Byte dispid 1745027152;
    property CCZipcode: WideString dispid 1745027151;
    property CheckAddr1: WideString dispid 1745027150;
    property CheckAddr2: WideString dispid 1745027149;
    property CheckCity: WideString dispid 1745027148;
    property CheckCountry: WideString dispid 1745027147;
    property CheckName: WideString dispid 1745027146;
    property CheckState: WideString dispid 1745027145;
    property CheckZipcode: WideString dispid 1745027144;
    property CustomerIndex: Integer dispid 1745027143;
    property CustomerName: WideString dispid 1745027142;
    property DateCleared: OleVariant dispid 1745027141;
    property DepositDate: OleVariant dispid 1745027140;
    property DepositTicketID: WideString dispid 1745027139;
    property DetailAmount[Index: Smallint]: Double dispid 1745027138;
    property DetailCostIndex[Index: Smallint]: Integer dispid 1745027137;
    property DetailCostOfSalesAccount[Index: Smallint]: WideString dispid 1745027136;
    property DetailCostOfSalesAmount[Index: Smallint]: Double dispid 1745027135;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool dispid 1745027134;
    property DetailCustomerIndex[Index: Smallint]: Integer dispid 1745027133;
    property DetailDateCleared[Index: Smallint]: OleVariant dispid 1745027132;
    property DetailDescription[Index: Smallint]: WideString dispid 1745027131;
    property DetailDiscountAmount[Index: Smallint]: Double dispid 1745027130;
    property DetailFlag1[Index: Smallint]: WordBool dispid 1745027129;
    property DetailGLAccount[Index: Smallint]: WideString dispid 1745027128;
    property DetailGUID[Index: Smallint]: WideString dispid 1745027127;
    property DetailInventoryAccount[Index: Smallint]: WideString dispid 1745027126;
    property DetailInvoiceNRecord[Index: Smallint]: Integer dispid 1745027125;
    property DetailInvoicePaid[Index: Smallint]: WideString dispid 1745027124;
    property DetailItemIndex[Index: Smallint]: Integer dispid 1745027123;
    property DetailJobIndex[Index: Smallint]: Integer dispid 1745027122;
    property DetailLineNo[Index: Smallint]: Smallint dispid 1745027121;
    property DetailPhaseIndex[Index: Smallint]: Integer dispid 1745027120;
    property DetailQuantity[Index: Smallint]: Double dispid 1745027119;
    property DetailSalesTaxAuthority[Index: Smallint]: WideString dispid 1745027118;
    property DetailStockingQuantity[Index: Smallint]: Double dispid 1745027117;
    property DetailStockingUnitPrice[Index: Smallint]: Double dispid 1745027116;
    property DetailTaxType[Index: Smallint]: Smallint dispid 1745027115;
    property DetailTrxType[Index: Smallint]: Integer dispid 1745027114;
    property DetailUnitPrice[Index: Smallint]: Double dispid 1745027113;
    property DetailUnused1[Index: Smallint]: Byte dispid 1745027112;
    property DetailVendorIndex[Index: Smallint]: Integer dispid 1745027111;
    property DiscountAccount: WideString dispid 1745027110;
    property EditCount: Integer dispid 1745027109;
    property GUID: WideString dispid 1745027108;
    property InvoicesPaid: Double dispid 1745027107;
    property JournalCode: WideString dispid 1745027106;
    property JournalID: Smallint dispid 1745027105;
    property Key: Double dispid 1745027104;
    property MainAccount: WideString dispid 1745027103;
    property MaxNRecord: Integer readonly dispid 1745027102;
    property MaxTrxNumber[Period: Smallint]: Smallint readonly dispid 1745027101;
    property MaxTrxNumberL[Period: Smallint]: Integer readonly dispid 1745027100;
    property NDistributions: Smallint dispid 1745027099;
    property NRecord: Integer dispid 1745027098;
    property PaymentMethod: WideString dispid 1745027097;
    property Period: Smallint dispid 1745027096;
    property Posted: WordBool dispid 1745027095;
    property Prepayment: WordBool dispid 1745027094;
    property ReceiptDate: OleVariant dispid 1745027093;
    property ReceiptNum: WideString dispid 1745027092;
    property RecurrenceIndex: Integer dispid 1745027091;
    property RecurrenceRate: Smallint dispid 1745027090;
    property Reference: WideString dispid 1745027089;
    property SalesRepID: WideString dispid 1745027088;
    property SalesTaxCode: WideString dispid 1745027087;
    property Subindex1: Byte dispid 1745027086;
    property Subindex2: Byte dispid 1745027085;
    property TrxDate: OleVariant dispid 1745027084;
    property TrxNumber: Smallint dispid 1745027083;
    property TrxNumberL: Integer dispid 1745027082;
    property Unused1: Byte dispid 1745027081;
    property Unknown2: Smallint dispid 1745027080;
    property Unused3: Smallint dispid 1745027079;
    property Unknown4: Smallint dispid 1745027078;
    property Unused5: Byte dispid 1745027077;
    property Unused6[Index: Smallint]: Byte dispid 1745027076;
    property Unused7[Index: Smallint]: Byte dispid 1745027075;
    property Unused8: Byte dispid 1745027074;
    property VendorIndex: Integer dispid 1745027073;
    property VendorReceipt: WordBool dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _GeneralJournal
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {29E5BBAB-8F57-4DEB-890B-B6F5D805F941}
// *********************************************************************//
  _GeneralJournal = interface(IDispatch)
    ['{29E5BBAB-8F57-4DEB-890B-B6F5D805F941}']
    function ClearRecord: Smallint; safecall;
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(NRecord: Integer): Smallint; safecall;
    function IncrementBatchCount: Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function ReadFirst(Period: Smallint): OleVariant; safecall;
    function ReadNext: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_BeginningBalanceFlag: WordBool; safecall;
    procedure Set_BeginningBalanceFlag(Param1: WordBool); safecall;
    function Get_DateCleared: OleVariant; safecall;
    procedure Set_DateCleared(Param1: OleVariant); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_DetailAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailCostIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailDateCleared(Index: Smallint): OleVariant; safecall;
    procedure Set_DetailDateCleared(Index: Smallint; Param2: OleVariant); safecall;
    function Get_DetailDescription(Index: Smallint): WideString; safecall;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailFlag1(Index: Smallint): WordBool; safecall;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailFlag2(Index: Smallint): WordBool; safecall;
    procedure Set_DetailFlag2(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailJobIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailLineNo(Index: Smallint): Smallint; safecall;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailPhaseIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailPosted(Index: Smallint): WordBool; safecall;
    procedure Set_DetailPosted(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailReversed(Index: Smallint): WordBool; safecall;
    procedure Set_DetailReversed(Index: Smallint; Param2: WordBool); safecall;
    function Get_EditCount: Integer; safecall;
    procedure Set_EditCount(Param1: Integer); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_HasPartner: WordBool; safecall;
    procedure Set_HasPartner(Param1: WordBool); safecall;
    function Get_JournalCode: WideString; safecall;
    procedure Set_JournalCode(const Param1: WideString); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_MainAccount: WideString; safecall;
    procedure Set_MainAccount(const Param1: WideString); safecall;
    function Get_MainAmount: Double; safecall;
    procedure Set_MainAmount(Param1: Double); safecall;
    function Get_MaxNRecord: Integer; safecall;
    function Get_MaxTrxNumber(Period: Smallint): Smallint; safecall;
    function Get_MaxTrxNumberL(Period: Smallint): Integer; safecall;
    function Get_NDistributions: Smallint; safecall;
    procedure Set_NDistributions(Param1: Smallint); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_Posted: WordBool; safecall;
    procedure Set_Posted(Param1: WordBool); safecall;
    function Get_PrimaryID: WideString; safecall;
    procedure Set_PrimaryID(const Param1: WideString); safecall;
    function Get_ReceiptDate: OleVariant; safecall;
    procedure Set_ReceiptDate(Param1: OleVariant); safecall;
    function Get_RecurrenceIndex: Integer; safecall;
    procedure Set_RecurrenceIndex(Param1: Integer); safecall;
    function Get_RecurrenceRate: Smallint; safecall;
    procedure Set_RecurrenceRate(Param1: Smallint); safecall;
    function Get_Reference: WideString; safecall;
    procedure Set_Reference(const Param1: WideString); safecall;
    function Get_Reversed: WordBool; safecall;
    procedure Set_Reversed(Param1: WordBool); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_TrxNumberL: Integer; safecall;
    procedure Set_TrxNumberL(Param1: Integer); safecall;
    function Get_Unused1: Smallint; safecall;
    procedure Set_Unused1(Param1: Smallint); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown3: Smallint; safecall;
    procedure Set_Unknown3(Param1: Smallint); safecall;
    function Get_Unused4: Smallint; safecall;
    procedure Set_Unused4(Param1: Smallint); safecall;
    function Get_Unknown5: Smallint; safecall;
    procedure Set_Unknown5(Param1: Smallint); safecall;
    function Get_Unused6(Index: Smallint): Byte; safecall;
    procedure Set_Unused6(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused7: Double; safecall;
    procedure Set_Unused7(Param1: Double); safecall;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property Description: WideString read Get_Description write Set_Description;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailDateCleared[Index: Smallint]: OleVariant read Get_DetailDateCleared write Set_DetailDateCleared;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailFlag2[Index: Smallint]: WordBool read Get_DetailFlag2 write Set_DetailFlag2;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailPosted[Index: Smallint]: WordBool read Get_DetailPosted write Set_DetailPosted;
    property DetailReversed[Index: Smallint]: WordBool read Get_DetailReversed write Set_DetailReversed;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasPartner: WordBool read Get_HasPartner write Set_HasPartner;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property MainAmount: Double read Get_MainAmount write Set_MainAmount;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property PrimaryID: WideString read Get_PrimaryID write Set_PrimaryID;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property Reference: WideString read Get_Reference write Set_Reference;
    property Reversed: WordBool read Get_Reversed write Set_Reversed;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unknown3: Smallint read Get_Unknown3 write Set_Unknown3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unknown5: Smallint read Get_Unknown5 write Set_Unknown5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property Unused7: Double read Get_Unused7 write Set_Unused7;
  end;

// *********************************************************************//
// DispIntf:  _GeneralJournalDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {29E5BBAB-8F57-4DEB-890B-B6F5D805F941}
// *********************************************************************//
  _GeneralJournalDisp = dispinterface
    ['{29E5BBAB-8F57-4DEB-890B-B6F5D805F941}']
    function ClearRecord: Smallint; dispid 1610809393;
    function CloseFile: Smallint; dispid 1610809394;
    function Delete: Smallint; dispid 1610809395;
    function GetEqual(NRecord: Integer): Smallint; dispid 1610809396;
    function IncrementBatchCount: Smallint; dispid 1610809397;
    function Insert: Smallint; dispid 1610809398;
    function OpenFile: Smallint; dispid 1610809399;
    function ReadFirst(Period: Smallint): OleVariant; dispid 1610809401;
    function ReadNext: Smallint; dispid 1610809402;
    function Update: Smallint; dispid 1610809403;
    property BeginningBalanceFlag: WordBool dispid 1745027120;
    property DateCleared: OleVariant dispid 1745027119;
    property Description: WideString dispid 1745027118;
    property DetailAmount[Index: Smallint]: Double dispid 1745027117;
    property DetailCostIndex[Index: Smallint]: Integer dispid 1745027116;
    property DetailDateCleared[Index: Smallint]: OleVariant dispid 1745027115;
    property DetailDescription[Index: Smallint]: WideString dispid 1745027114;
    property DetailFlag1[Index: Smallint]: WordBool dispid 1745027113;
    property DetailFlag2[Index: Smallint]: WordBool dispid 1745027112;
    property DetailGLAccount[Index: Smallint]: WideString dispid 1745027111;
    property DetailGUID[Index: Smallint]: WideString dispid 1745027110;
    property DetailJobIndex[Index: Smallint]: Integer dispid 1745027109;
    property DetailLineNo[Index: Smallint]: Smallint dispid 1745027108;
    property DetailPhaseIndex[Index: Smallint]: Integer dispid 1745027107;
    property DetailPosted[Index: Smallint]: WordBool dispid 1745027106;
    property DetailReversed[Index: Smallint]: WordBool dispid 1745027105;
    property EditCount: Integer dispid 1745027104;
    property GUID: WideString dispid 1745027103;
    property HasPartner: WordBool dispid 1745027102;
    property JournalCode: WideString dispid 1745027101;
    property JournalID: Smallint dispid 1745027100;
    property Key: Double dispid 1745027099;
    property MainAccount: WideString dispid 1745027098;
    property MainAmount: Double dispid 1745027097;
    property MaxNRecord: Integer readonly dispid 1745027096;
    property MaxTrxNumber[Period: Smallint]: Smallint readonly dispid 1745027095;
    property MaxTrxNumberL[Period: Smallint]: Integer readonly dispid 1745027094;
    property NDistributions: Smallint dispid 1745027093;
    property NRecord: Integer dispid 1745027092;
    property Period: Smallint dispid 1745027091;
    property Posted: WordBool dispid 1745027090;
    property PrimaryID: WideString dispid 1745027089;
    property ReceiptDate: OleVariant dispid 1745027088;
    property RecurrenceIndex: Integer dispid 1745027087;
    property RecurrenceRate: Smallint dispid 1745027086;
    property Reference: WideString dispid 1745027085;
    property Reversed: WordBool dispid 1745027084;
    property Subindex1: Byte dispid 1745027083;
    property Subindex2: Byte dispid 1745027082;
    property TrxDate: OleVariant dispid 1745027081;
    property TrxNumber: Smallint dispid 1745027080;
    property TrxNumberL: Integer dispid 1745027079;
    property Unused1: Smallint dispid 1745027078;
    property Unused2[Index: Smallint]: Byte dispid 1745027077;
    property Unknown3: Smallint dispid 1745027076;
    property Unused4: Smallint dispid 1745027075;
    property Unknown5: Smallint dispid 1745027074;
    property Unused6[Index: Smallint]: Byte dispid 1745027073;
    property Unused7: Double dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _InventoryAdjustmentJournal
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B57FFDF8-947B-4662-B996-65FDC8FA87E1}
// *********************************************************************//
  _InventoryAdjustmentJournal = interface(IDispatch)
    ['{B57FFDF8-947B-4662-B996-65FDC8FA87E1}']
    function ClearRecord: Smallint; safecall;
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(NRecord: Integer): Smallint; safecall;
    function IncrementBatchCount: Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function ReadFirst(Period: Smallint): Smallint; safecall;
    function ReadNext: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AmountAdjusted: Double; safecall;
    procedure Set_AmountAdjusted(Param1: Double); safecall;
    function Get_DateCleared: OleVariant; safecall;
    procedure Set_DateCleared(Param1: OleVariant); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_DetailAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailCostIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool; safecall;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailFlag1(Index: Smallint): WordBool; safecall;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailItemIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailJobIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailLineNo(Index: Smallint): Smallint; safecall;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailPhaseIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailReasonToAdjust(Index: Smallint): WideString; safecall;
    procedure Set_DetailReasonToAdjust(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailStockingQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailTrxType(Index: Smallint): Integer; safecall;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailUnitCost(Index: Smallint): Double; safecall;
    procedure Set_DetailUnitCost(Index: Smallint; Param2: Double); safecall;
    function Get_DetailUnused7(Index1: Smallint; Index2: Smallint): Byte; safecall;
    procedure Set_DetailUnused7(Index1: Smallint; Index2: Smallint; Param3: Byte); safecall;
    function Get_EditCount: Integer; safecall;
    procedure Set_EditCount(Param1: Integer); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_InventoryAccount: WideString; safecall;
    procedure Set_InventoryAccount(const Param1: WideString); safecall;
    function Get_ItemIndex: Integer; safecall;
    procedure Set_ItemIndex(Param1: Integer); safecall;
    function Get_JournalCode: WideString; safecall;
    procedure Set_JournalCode(const Param1: WideString); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_MainAccount: WideString; safecall;
    procedure Set_MainAccount(const Param1: WideString); safecall;
    function Get_MaxNRecord: Integer; safecall;
    function Get_MaxTrxNumber(Period: Smallint): Smallint; safecall;
    function Get_MaxTrxNumberL(Period: Smallint): Integer; safecall;
    function Get_NDistributions: Smallint; safecall;
    procedure Set_NDistributions(Param1: Smallint); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_Posted: WordBool; safecall;
    procedure Set_Posted(Param1: WordBool); safecall;
    function Get_ReceiptDate: OleVariant; safecall;
    procedure Set_ReceiptDate(Param1: OleVariant); safecall;
    function Get_Reference: WideString; safecall;
    procedure Set_Reference(const Param1: WideString); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_TrxNumberL: Integer; safecall;
    procedure Set_TrxNumberL(Param1: Integer); safecall;
    function Get_Unused1(Index: Smallint): Byte; safecall;
    procedure Set_Unused1(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown3: Smallint; safecall;
    procedure Set_Unknown3(Param1: Smallint); safecall;
    function Get_Unused4: Smallint; safecall;
    procedure Set_Unused4(Param1: Smallint); safecall;
    function Get_Unknown5: Smallint; safecall;
    procedure Set_Unknown5(Param1: Smallint); safecall;
    function Get_Unused6(Index: Smallint): Byte; safecall;
    procedure Set_Unused6(Index: Smallint; Param2: Byte); safecall;
    property AmountAdjusted: Double read Get_AmountAdjusted write Set_AmountAdjusted;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property Description: WideString read Get_Description write Set_Description;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool read Get_DetailCostOfSalesTrx write Set_DetailCostOfSalesTrx;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailReasonToAdjust[Index: Smallint]: WideString read Get_DetailReasonToAdjust write Set_DetailReasonToAdjust;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUnitCost[Index: Smallint]: Double read Get_DetailUnitCost write Set_DetailUnitCost;
    property DetailUnused7[Index1: Smallint; Index2: Smallint]: Byte read Get_DetailUnused7 write Set_DetailUnused7;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InventoryAccount: WideString read Get_InventoryAccount write Set_InventoryAccount;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property Reference: WideString read Get_Reference write Set_Reference;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unknown3: Smallint read Get_Unknown3 write Set_Unknown3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unknown5: Smallint read Get_Unknown5 write Set_Unknown5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
  end;

// *********************************************************************//
// DispIntf:  _InventoryAdjustmentJournalDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B57FFDF8-947B-4662-B996-65FDC8FA87E1}
// *********************************************************************//
  _InventoryAdjustmentJournalDisp = dispinterface
    ['{B57FFDF8-947B-4662-B996-65FDC8FA87E1}']
    function ClearRecord: Smallint; dispid 1610809392;
    function CloseFile: Smallint; dispid 1610809393;
    function Delete: Smallint; dispid 1610809394;
    function GetEqual(NRecord: Integer): Smallint; dispid 1610809395;
    function IncrementBatchCount: Smallint; dispid 1610809396;
    function Insert: Smallint; dispid 1610809397;
    function OpenFile: Smallint; dispid 1610809398;
    function ReadFirst(Period: Smallint): Smallint; dispid 1610809400;
    function ReadNext: Smallint; dispid 1610809401;
    function Update: Smallint; dispid 1610809402;
    property AmountAdjusted: Double dispid 1745027119;
    property DateCleared: OleVariant dispid 1745027118;
    property Description: WideString dispid 1745027117;
    property DetailAmount[Index: Smallint]: Double dispid 1745027116;
    property DetailCostIndex[Index: Smallint]: Integer dispid 1745027115;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool dispid 1745027114;
    property DetailFlag1[Index: Smallint]: WordBool dispid 1745027113;
    property DetailGLAccount[Index: Smallint]: WideString dispid 1745027112;
    property DetailGUID[Index: Smallint]: WideString dispid 1745027111;
    property DetailItemIndex[Index: Smallint]: Integer dispid 1745027110;
    property DetailJobIndex[Index: Smallint]: Integer dispid 1745027109;
    property DetailLineNo[Index: Smallint]: Smallint dispid 1745027108;
    property DetailPhaseIndex[Index: Smallint]: Integer dispid 1745027107;
    property DetailQuantity[Index: Smallint]: Double dispid 1745027106;
    property DetailReasonToAdjust[Index: Smallint]: WideString dispid 1745027105;
    property DetailStockingQuantity[Index: Smallint]: Double dispid 1745027104;
    property DetailStockingUnitPrice[Index: Smallint]: Double dispid 1745027103;
    property DetailTrxType[Index: Smallint]: Integer dispid 1745027102;
    property DetailUnitCost[Index: Smallint]: Double dispid 1745027101;
    property DetailUnused7[Index1: Smallint; Index2: Smallint]: Byte dispid 1745027100;
    property EditCount: Integer dispid 1745027099;
    property GUID: WideString dispid 1745027098;
    property InventoryAccount: WideString dispid 1745027097;
    property ItemIndex: Integer dispid 1745027096;
    property JournalCode: WideString dispid 1745027095;
    property JournalID: Smallint dispid 1745027094;
    property Key: Double dispid 1745027093;
    property MainAccount: WideString dispid 1745027092;
    property MaxNRecord: Integer readonly dispid 1745027091;
    property MaxTrxNumber[Period: Smallint]: Smallint readonly dispid 1745027090;
    property MaxTrxNumberL[Period: Smallint]: Integer readonly dispid 1745027089;
    property NDistributions: Smallint dispid 1745027088;
    property NRecord: Integer dispid 1745027087;
    property Period: Smallint dispid 1745027086;
    property Posted: WordBool dispid 1745027085;
    property ReceiptDate: OleVariant dispid 1745027084;
    property Reference: WideString dispid 1745027083;
    property Subindex1: Byte dispid 1745027082;
    property Subindex2: Byte dispid 1745027081;
    property TrxDate: OleVariant dispid 1745027080;
    property TrxNumber: Smallint dispid 1745027079;
    property TrxNumberL: Integer dispid 1745027078;
    property Unused1[Index: Smallint]: Byte dispid 1745027077;
    property Unused2[Index: Smallint]: Byte dispid 1745027076;
    property Unknown3: Smallint dispid 1745027075;
    property Unused4: Smallint dispid 1745027074;
    property Unknown5: Smallint dispid 1745027073;
    property Unused6[Index: Smallint]: Byte dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _PayrollJournal
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {296F1A27-28AB-4511-B98A-C31D38E6CADE}
// *********************************************************************//
  _PayrollJournal = interface(IDispatch)
    ['{296F1A27-28AB-4511-B98A-C31D38E6CADE}']
    function ClearRecord: Smallint; safecall;
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(NRecord: Integer): Smallint; safecall;
    function IncrementBatchCount: Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function ReadFirst(Period: Smallint): Smallint; safecall;
    function ReadNext: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_BeginningBalanceFlag: WordBool; safecall;
    procedure Set_BeginningBalanceFlag(Param1: WordBool); safecall;
    function Get_CashAccount: WideString; safecall;
    procedure Set_CashAccount(const Param1: WideString); safecall;
    function Get_CashAmount: Double; safecall;
    procedure Set_CashAmount(Param1: Double); safecall;
    function Get_CheckNumber: WideString; safecall;
    procedure Set_CheckNumber(const Param1: WideString); safecall;
    function Get_DateCleared: OleVariant; safecall;
    procedure Set_DateCleared(Param1: OleVariant); safecall;
    function Get_EmployeeID: WideString; safecall;
    procedure Set_EmployeeID(const Param1: WideString); safecall;
    function Get_EmployeeName: WideString; safecall;
    procedure Set_EmployeeName(const Param1: WideString); safecall;
    function Get_EditCount: Integer; safecall;
    procedure Set_EditCount(Param1: Integer); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_HoursSalaryAmount(Index: Smallint): Double; safecall;
    procedure Set_HoursSalaryAmount(Index: Smallint; Param2: Double); safecall;
    function Get_JobAccount(Index: Smallint): WideString; safecall;
    procedure Set_JobAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_JobAmount(Index: Smallint): Double; safecall;
    procedure Set_JobAmount(Index: Smallint; Param2: Double); safecall;
    function Get_JobCostIndex(Index: Smallint): Integer; safecall;
    procedure Set_JobCostIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_JobEmployeeID(Index: Smallint): WideString; safecall;
    procedure Set_JobEmployeeID(Index: Smallint; const Param2: WideString); safecall;
    function Get_JobFieldNumber(Index: Smallint): Smallint; safecall;
    procedure Set_JobFieldNumber(Index: Smallint; Param2: Smallint); safecall;
    function Get_JobFlag1(Index: Smallint): WordBool; safecall;
    procedure Set_JobFlag1(Index: Smallint; Param2: WordBool); safecall;
    function Get_JobGUID(Index: Smallint): WideString; safecall;
    procedure Set_JobGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_JobFlag2(Index: Smallint): WordBool; safecall;
    procedure Set_JobFlag2(Index: Smallint; Param2: WordBool); safecall;
    function Get_JobHours(Index: Smallint): Double; safecall;
    procedure Set_JobHours(Index: Smallint; Param2: Double); safecall;
    function Get_JobJobIndex(Index: Smallint): Integer; safecall;
    procedure Set_JobJobIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_JobLevel(Index: Smallint): Smallint; safecall;
    procedure Set_JobLevel(Index: Smallint; Param2: Smallint); safecall;
    function Get_JobLineNo(Index: Smallint): Smallint; safecall;
    procedure Set_JobLineNo(Index: Smallint; Param2: Smallint); safecall;
    function Get_JobPhaseIndex(Index: Smallint): Integer; safecall;
    procedure Set_JobPhaseIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_JobTrxType(Index: Smallint): Integer; safecall;
    procedure Set_JobTrxType(Index: Smallint; Param2: Integer); safecall;
    function Get_JobUnknown(Index: Smallint): Byte; safecall;
    procedure Set_JobUnknown(Index: Smallint; Param2: Byte); safecall;
    function Get_JournalCode: WideString; safecall;
    procedure Set_JournalCode(const Param1: WideString); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_MainAccount: WideString; safecall;
    procedure Set_MainAccount(const Param1: WideString); safecall;
    function Get_MaxNRecord: Integer; safecall;
    function Get_MaxTrxNumber(Period: Smallint): Smallint; safecall;
    function Get_MaxTrxNumberL(Period: Smallint): Integer; safecall;
    function Get_NDistributions: Smallint; safecall;
    procedure Set_NDistributions(Param1: Smallint); safecall;
    function Get_NLaborDistributions: Smallint; safecall;
    procedure Set_NLaborDistributions(Param1: Smallint); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_PayAccount(Index: Smallint): WideString; safecall;
    procedure Set_PayAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_PayAmount(Index: Smallint): Double; safecall;
    procedure Set_PayAmount(Index: Smallint; Param2: Double); safecall;
    function Get_PayDateCleared(Index: Smallint): OleVariant; safecall;
    procedure Set_PayDateCleared(Index: Smallint; Param2: OleVariant); safecall;
    function Get_PayDescription(Index: Smallint): WideString; safecall;
    procedure Set_PayDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_PayEmployeeID(Index: Smallint): WideString; safecall;
    procedure Set_PayEmployeeID(Index: Smallint; const Param2: WideString); safecall;
    function Get_PayFieldNumber(Index: Smallint): Smallint; safecall;
    procedure Set_PayFieldNumber(Index: Smallint; Param2: Smallint); safecall;
    function Get_PayFlag1(Index: Smallint): WordBool; safecall;
    procedure Set_PayFlag1(Index: Smallint; Param2: WordBool); safecall;
    function Get_PayFlag2(Index: Smallint): WordBool; safecall;
    procedure Set_PayFlag2(Index: Smallint; Param2: WordBool); safecall;
    function Get_PayGUID(Index: Smallint): WideString; safecall;
    procedure Set_PayGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_PayLineNo(Index: Smallint): Smallint; safecall;
    procedure Set_PayLineNo(Index: Smallint; Param2: Smallint); safecall;
    function Get_PayMemoAmount(Index: Smallint): Double; safecall;
    procedure Set_PayMemoAmount(Index: Smallint; Param2: Double); safecall;
    function Get_PayNField(Index: Smallint): Smallint; safecall;
    procedure Set_PayNField(Index: Smallint; Param2: Smallint); safecall;
    function Get_PayPeriodEnd: OleVariant; safecall;
    procedure Set_PayPeriodEnd(Param1: OleVariant); safecall;
    function Get_PayQuantity(Index: Smallint): Double; safecall;
    procedure Set_PayQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_PayTrxType(Index: Smallint): Integer; safecall;
    procedure Set_PayTrxType(Index: Smallint; Param2: Integer); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_Posted: WordBool; safecall;
    procedure Set_Posted(Param1: WordBool); safecall;
    function Get_ReceiptDate: OleVariant; safecall;
    procedure Set_ReceiptDate(Param1: OleVariant); safecall;
    function Get_ReimbursableExpense: WordBool; safecall;
    procedure Set_ReimbursableExpense(Param1: WordBool); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    function Get_TrxIsReadOnly: Smallint; safecall;
    procedure Set_TrxIsReadOnly(Param1: Smallint); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_TrxNumberL: Integer; safecall;
    procedure Set_TrxNumberL(Param1: Integer); safecall;
    function Get_Unused1: Smallint; safecall;
    procedure Set_Unused1(Param1: Smallint); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused3: Double; safecall;
    procedure Set_Unused3(Param1: Double); safecall;
    function Get_WeeksInPayPeriod: Smallint; safecall;
    procedure Set_WeeksInPayPeriod(Param1: Smallint); safecall;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property CashAmount: Double read Get_CashAmount write Set_CashAmount;
    property CheckNumber: WideString read Get_CheckNumber write Set_CheckNumber;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
    property EmployeeName: WideString read Get_EmployeeName write Set_EmployeeName;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HoursSalaryAmount[Index: Smallint]: Double read Get_HoursSalaryAmount write Set_HoursSalaryAmount;
    property JobAccount[Index: Smallint]: WideString read Get_JobAccount write Set_JobAccount;
    property JobAmount[Index: Smallint]: Double read Get_JobAmount write Set_JobAmount;
    property JobCostIndex[Index: Smallint]: Integer read Get_JobCostIndex write Set_JobCostIndex;
    property JobEmployeeID[Index: Smallint]: WideString read Get_JobEmployeeID write Set_JobEmployeeID;
    property JobFieldNumber[Index: Smallint]: Smallint read Get_JobFieldNumber write Set_JobFieldNumber;
    property JobFlag1[Index: Smallint]: WordBool read Get_JobFlag1 write Set_JobFlag1;
    property JobGUID[Index: Smallint]: WideString read Get_JobGUID write Set_JobGUID;
    property JobFlag2[Index: Smallint]: WordBool read Get_JobFlag2 write Set_JobFlag2;
    property JobHours[Index: Smallint]: Double read Get_JobHours write Set_JobHours;
    property JobJobIndex[Index: Smallint]: Integer read Get_JobJobIndex write Set_JobJobIndex;
    property JobLevel[Index: Smallint]: Smallint read Get_JobLevel write Set_JobLevel;
    property JobLineNo[Index: Smallint]: Smallint read Get_JobLineNo write Set_JobLineNo;
    property JobPhaseIndex[Index: Smallint]: Integer read Get_JobPhaseIndex write Set_JobPhaseIndex;
    property JobTrxType[Index: Smallint]: Integer read Get_JobTrxType write Set_JobTrxType;
    property JobUnknown[Index: Smallint]: Byte read Get_JobUnknown write Set_JobUnknown;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NLaborDistributions: Smallint read Get_NLaborDistributions write Set_NLaborDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property PayAccount[Index: Smallint]: WideString read Get_PayAccount write Set_PayAccount;
    property PayAmount[Index: Smallint]: Double read Get_PayAmount write Set_PayAmount;
    property PayDateCleared[Index: Smallint]: OleVariant read Get_PayDateCleared write Set_PayDateCleared;
    property PayDescription[Index: Smallint]: WideString read Get_PayDescription write Set_PayDescription;
    property PayEmployeeID[Index: Smallint]: WideString read Get_PayEmployeeID write Set_PayEmployeeID;
    property PayFieldNumber[Index: Smallint]: Smallint read Get_PayFieldNumber write Set_PayFieldNumber;
    property PayFlag1[Index: Smallint]: WordBool read Get_PayFlag1 write Set_PayFlag1;
    property PayFlag2[Index: Smallint]: WordBool read Get_PayFlag2 write Set_PayFlag2;
    property PayGUID[Index: Smallint]: WideString read Get_PayGUID write Set_PayGUID;
    property PayLineNo[Index: Smallint]: Smallint read Get_PayLineNo write Set_PayLineNo;
    property PayMemoAmount[Index: Smallint]: Double read Get_PayMemoAmount write Set_PayMemoAmount;
    property PayNField[Index: Smallint]: Smallint read Get_PayNField write Set_PayNField;
    property PayPeriodEnd: OleVariant read Get_PayPeriodEnd write Set_PayPeriodEnd;
    property PayQuantity[Index: Smallint]: Double read Get_PayQuantity write Set_PayQuantity;
    property PayTrxType[Index: Smallint]: Integer read Get_PayTrxType write Set_PayTrxType;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property TrxIsReadOnly: Smallint read Get_TrxIsReadOnly write Set_TrxIsReadOnly;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3: Double read Get_Unused3 write Set_Unused3;
    property WeeksInPayPeriod: Smallint read Get_WeeksInPayPeriod write Set_WeeksInPayPeriod;
  end;

// *********************************************************************//
// DispIntf:  _PayrollJournalDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {296F1A27-28AB-4511-B98A-C31D38E6CADE}
// *********************************************************************//
  _PayrollJournalDisp = dispinterface
    ['{296F1A27-28AB-4511-B98A-C31D38E6CADE}']
    function ClearRecord: Smallint; dispid 1610809405;
    function CloseFile: Smallint; dispid 1610809406;
    function Delete: Smallint; dispid 1610809407;
    function GetEqual(NRecord: Integer): Smallint; dispid 1610809409;
    function IncrementBatchCount: Smallint; dispid 1610809411;
    function Insert: Smallint; dispid 1610809412;
    function OpenFile: Smallint; dispid 1610809413;
    function ReadFirst(Period: Smallint): Smallint; dispid 1610809415;
    function ReadNext: Smallint; dispid 1610809416;
    function Update: Smallint; dispid 1610809417;
    property BeginningBalanceFlag: WordBool dispid 1745027132;
    property CashAccount: WideString dispid 1745027131;
    property CashAmount: Double dispid 1745027130;
    property CheckNumber: WideString dispid 1745027129;
    property DateCleared: OleVariant dispid 1745027128;
    property EmployeeID: WideString dispid 1745027127;
    property EmployeeName: WideString dispid 1745027126;
    property EditCount: Integer dispid 1745027125;
    property GUID: WideString dispid 1745027124;
    property HoursSalaryAmount[Index: Smallint]: Double dispid 1745027123;
    property JobAccount[Index: Smallint]: WideString dispid 1745027148;
    property JobAmount[Index: Smallint]: Double dispid 1745027122;
    property JobCostIndex[Index: Smallint]: Integer dispid 1745027121;
    property JobEmployeeID[Index: Smallint]: WideString dispid 1745027147;
    property JobFieldNumber[Index: Smallint]: Smallint dispid 1745027146;
    property JobFlag1[Index: Smallint]: WordBool dispid 1745027119;
    property JobGUID[Index: Smallint]: WideString dispid 1745027120;
    property JobFlag2[Index: Smallint]: WordBool dispid 1745027118;
    property JobHours[Index: Smallint]: Double dispid 1745027117;
    property JobJobIndex[Index: Smallint]: Integer dispid 1745027116;
    property JobLevel[Index: Smallint]: Smallint dispid 1745027115;
    property JobLineNo[Index: Smallint]: Smallint dispid 1745027114;
    property JobPhaseIndex[Index: Smallint]: Integer dispid 1745027113;
    property JobTrxType[Index: Smallint]: Integer dispid 1745027112;
    property JobUnknown[Index: Smallint]: Byte dispid 1745027111;
    property JournalCode: WideString dispid 1745027110;
    property JournalID: Smallint dispid 1745027109;
    property Key: Double dispid 1745027108;
    property MainAccount: WideString dispid 1745027107;
    property MaxNRecord: Integer readonly dispid 1745027106;
    property MaxTrxNumber[Period: Smallint]: Smallint readonly dispid 1745027105;
    property MaxTrxNumberL[Period: Smallint]: Integer readonly dispid 1745027104;
    property NDistributions: Smallint dispid 1745027103;
    property NLaborDistributions: Smallint dispid 1745027102;
    property NRecord: Integer dispid 1745027101;
    property PayAccount[Index: Smallint]: WideString dispid 1745027100;
    property PayAmount[Index: Smallint]: Double dispid 1745027099;
    property PayDateCleared[Index: Smallint]: OleVariant dispid 1745027098;
    property PayDescription[Index: Smallint]: WideString dispid 1745027097;
    property PayEmployeeID[Index: Smallint]: WideString dispid 1745027096;
    property PayFieldNumber[Index: Smallint]: Smallint dispid 1745027095;
    property PayFlag1[Index: Smallint]: WordBool dispid 1745027094;
    property PayFlag2[Index: Smallint]: WordBool dispid 1745027093;
    property PayGUID[Index: Smallint]: WideString dispid 1745027092;
    property PayLineNo[Index: Smallint]: Smallint dispid 1745027091;
    property PayMemoAmount[Index: Smallint]: Double dispid 1745027090;
    property PayNField[Index: Smallint]: Smallint dispid 1745027089;
    property PayPeriodEnd: OleVariant dispid 1745027088;
    property PayQuantity[Index: Smallint]: Double dispid 1745027087;
    property PayTrxType[Index: Smallint]: Integer dispid 1745027086;
    property Period: Smallint dispid 1745027085;
    property Posted: WordBool dispid 1745027084;
    property ReceiptDate: OleVariant dispid 1745027083;
    property ReimbursableExpense: WordBool dispid 1745027082;
    property Subindex1: Byte dispid 1745027081;
    property Subindex2: Byte dispid 1745027080;
    property TrxDate: OleVariant dispid 1745027079;
    property TrxIsReadOnly: Smallint dispid 1745027078;
    property TrxNumber: Smallint dispid 1745027077;
    property TrxNumberL: Integer dispid 1745027076;
    property Unused1: Smallint dispid 1745027075;
    property Unused2[Index: Smallint]: Byte dispid 1745027074;
    property Unused3: Double dispid 1745027073;
    property WeeksInPayPeriod: Smallint dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _PurchaseJournal
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FFDC920E-F028-4F48-8AED-DBA3AE359924}
// *********************************************************************//
  _PurchaseJournal = interface(IDispatch)
    ['{FFDC920E-F028-4F48-8AED-DBA3AE359924}']
    function ClearRecord: Smallint; safecall;
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(NRecord: Integer): Smallint; safecall;
    function IncrementBatchCount: Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function ReadFirst(Period: Smallint): Smallint; safecall;
    function ReadFirstForVendor(Index: Integer): Smallint; safecall;
    function ReadNext: Smallint; safecall;
    function ReadNextByVendor: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AmountPaid: Double; safecall;
    procedure Set_AmountPaid(Param1: Double); safecall;
    function Get_APAccount: WideString; safecall;
    procedure Set_APAccount(const Param1: WideString); safecall;
    function Get_APAmount: Double; safecall;
    procedure Set_APAmount(Param1: Double); safecall;
    function Get_BeginningBalanceFlag: WordBool; safecall;
    procedure Set_BeginningBalanceFlag(Param1: WordBool); safecall;
    function Get_DateCleared: OleVariant; safecall;
    procedure Set_DateCleared(Param1: OleVariant); safecall;
    function Get_DateDue: OleVariant; safecall;
    procedure Set_DateDue(Param1: OleVariant); safecall;
    function Get_DetailAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailApplyToPO(Index: Smallint): WordBool; safecall;
    procedure Set_DetailApplyToPO(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailCostIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailCostOfSalesAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool; safecall;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailDescription(Index: Smallint): WideString; safecall;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailDisplayedLine(Index: Smallint): Smallint; safecall;
    procedure Set_DetailDisplayedLine(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailFlag1(Index: Smallint): WordBool; safecall;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailFlag2(Index: Smallint): WordBool; safecall;
    procedure Set_DetailFlag2(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailInventoryAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailInvoiceNRecord(Index: Smallint): Integer; safecall;
    procedure Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailInvoicePaid(Index: Smallint): WideString; safecall;
    procedure Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailItemIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailJobIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailLineNo(Index: Smallint): Smallint; safecall;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailPhaseIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailPOLine(Index: Smallint): Smallint; safecall;
    procedure Set_DetailPOLine(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailTrxType(Index: Smallint): Integer; safecall;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailUMGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailUnknown(Index: Smallint): Byte; safecall;
    procedure Set_DetailUnknown(Index: Smallint; Param2: Byte); safecall;
    function Get_DetailUnused1(Index: Smallint): Smallint; safecall;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailUnused2(Index: Smallint): Smallint; safecall;
    procedure Set_DetailUnused2(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailUnused3(Index: Smallint): Byte; safecall;
    procedure Set_DetailUnused3(Index: Smallint; Param2: Byte); safecall;
    function Get_DetailUnused4(Index: Smallint): Double; safecall;
    procedure Set_DetailUnused4(Index: Smallint; Param2: Double); safecall;
    function Get_DetailVendorIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailVendorIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DiscountAmount: Double; safecall;
    procedure Set_DiscountAmount(Param1: Double); safecall;
    function Get_DiscountDate: OleVariant; safecall;
    procedure Set_DiscountDate(Param1: OleVariant); safecall;
    function Get_DropShip: WordBool; safecall;
    procedure Set_DropShip(Param1: WordBool); safecall;
    function Get_DropShipCustomerIndex: Integer; safecall;
    procedure Set_DropShipCustomerIndex(Param1: Integer); safecall;
    function Get_DropShipInvNo: WideString; safecall;
    procedure Set_DropShipInvNo(const Param1: WideString); safecall;
    function Get_EditCount: Integer; safecall;
    procedure Set_EditCount(Param1: Integer); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_HasPartner: WordBool; safecall;
    procedure Set_HasPartner(Param1: WordBool); safecall;
    function Get_InternalNote: WideString; safecall;
    procedure Set_InternalNote(const Param1: WideString); safecall;
    function Get_InvoiceNumber: WideString; safecall;
    procedure Set_InvoiceNumber(const Param1: WideString); safecall;
    function Get_JournalCode: WideString; safecall;
    procedure Set_JournalCode(const Param1: WideString); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_JrnlTypeEx: Integer; safecall;
    procedure Set_JrnlTypeEx(Param1: Integer); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_MainAccount: WideString; safecall;
    procedure Set_MainAccount(const Param1: WideString); safecall;
    function Get_MaxNRecord: Integer; safecall;
    function Get_MaxTrxNumber(Period: Smallint): Smallint; safecall;
    function Get_MaxTrxNumberL(Period: Smallint): Integer; safecall;
    function Get_NDistributions: Smallint; safecall;
    procedure Set_NDistributions(Param1: Smallint); safecall;
    function Get_Note: WideString; safecall;
    procedure Set_Note(const Param1: WideString); safecall;
    function Get_NotePrintsAfterItems: WordBool; safecall;
    procedure Set_NotePrintsAfterItems(Param1: WordBool); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_NumOrderLines: Smallint; safecall;
    procedure Set_NumOrderLines(Param1: Smallint); safecall;
    function Get_PaymentDate: OleVariant; safecall;
    procedure Set_PaymentDate(Param1: OleVariant); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_PO: WordBool; safecall;
    procedure Set_PO(Param1: WordBool); safecall;
    function Get_POGoodThruDate: OleVariant; safecall;
    procedure Set_POGoodThruDate(Param1: OleVariant); safecall;
    function Get_PONo: WideString; safecall;
    procedure Set_PONo(const Param1: WideString); safecall;
    function Get_PONumber: WideString; safecall;
    procedure Set_PONumber(const Param1: WideString); safecall;
    function Get_Posted: WordBool; safecall;
    procedure Set_Posted(Param1: WordBool); safecall;
    function Get_Prepayment: WordBool; safecall;
    procedure Set_Prepayment(Param1: WordBool); safecall;
    function Get_PrintCheck: WordBool; safecall;
    procedure Set_PrintCheck(Param1: WordBool); safecall;
    function Get_ReceiptDate: OleVariant; safecall;
    procedure Set_ReceiptDate(Param1: OleVariant); safecall;
    function Get_RecurrenceIndex: Integer; safecall;
    procedure Set_RecurrenceIndex(Param1: Integer); safecall;
    function Get_RecurrenceRate: Smallint; safecall;
    procedure Set_RecurrenceRate(Param1: Smallint); safecall;
    function Get_ReimbursableExpense: WordBool; safecall;
    procedure Set_ReimbursableExpense(Param1: WordBool); safecall;
    function Get_ShipToAddr1: WideString; safecall;
    procedure Set_ShipToAddr1(const Param1: WideString); safecall;
    function Get_ShipToAddr2: WideString; safecall;
    procedure Set_ShipToAddr2(const Param1: WideString); safecall;
    function Get_ShipToCity: WideString; safecall;
    procedure Set_ShipToCity(const Param1: WideString); safecall;
    function Get_ShipToCountry: WideString; safecall;
    procedure Set_ShipToCountry(const Param1: WideString); safecall;
    function Get_ShipToName: WideString; safecall;
    procedure Set_ShipToName(const Param1: WideString); safecall;
    function Get_ShipToState: WideString; safecall;
    procedure Set_ShipToState(const Param1: WideString); safecall;
    function Get_ShipToZipCode: WideString; safecall;
    procedure Set_ShipToZipCode(const Param1: WideString); safecall;
    function Get_ShipVia: WideString; safecall;
    procedure Set_ShipVia(const Param1: WideString); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_Terms: WideString; safecall;
    procedure Set_Terms(const Param1: WideString); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_TrxNumberL: Integer; safecall;
    procedure Set_TrxNumberL(Param1: Integer); safecall;
    function Get_Unused1: Smallint; safecall;
    procedure Set_Unused1(Param1: Smallint); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused3: Double; safecall;
    procedure Set_Unused3(Param1: Double); safecall;
    function Get_Unused4: Byte; safecall;
    procedure Set_Unused4(Param1: Byte); safecall;
    function Get_Unused5(Index: Smallint): Byte; safecall;
    procedure Set_Unused5(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused6(Index: Smallint): Byte; safecall;
    procedure Set_Unused6(Index: Smallint; Param2: Byte); safecall;
    function Get_VendorIndex: Integer; safecall;
    procedure Set_VendorIndex(Param1: Integer); safecall;
    function Get_VendorName: WideString; safecall;
    procedure Set_VendorName(const Param1: WideString); safecall;
    function Get_WaitingOnBill: WordBool; safecall;
    procedure Set_WaitingOnBill(Param1: WordBool); safecall;
    property AmountPaid: Double read Get_AmountPaid write Set_AmountPaid;
    property APAccount: WideString read Get_APAccount write Set_APAccount;
    property APAmount: Double read Get_APAmount write Set_APAmount;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DateDue: OleVariant read Get_DateDue write Set_DateDue;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailApplyToPO[Index: Smallint]: WordBool read Get_DetailApplyToPO write Set_DetailApplyToPO;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCostOfSalesAccount[Index: Smallint]: WideString read Get_DetailCostOfSalesAccount write Set_DetailCostOfSalesAccount;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool read Get_DetailCostOfSalesTrx write Set_DetailCostOfSalesTrx;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailDisplayedLine[Index: Smallint]: Smallint read Get_DetailDisplayedLine write Set_DetailDisplayedLine;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailFlag2[Index: Smallint]: WordBool read Get_DetailFlag2 write Set_DetailFlag2;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailInventoryAccount[Index: Smallint]: WideString read Get_DetailInventoryAccount write Set_DetailInventoryAccount;
    property DetailInvoiceNRecord[Index: Smallint]: Integer read Get_DetailInvoiceNRecord write Set_DetailInvoiceNRecord;
    property DetailInvoicePaid[Index: Smallint]: WideString read Get_DetailInvoicePaid write Set_DetailInvoicePaid;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailPOLine[Index: Smallint]: Smallint read Get_DetailPOLine write Set_DetailPOLine;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUMGUID[Index: Smallint]: WideString read Get_DetailUMGUID write Set_DetailUMGUID;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnknown[Index: Smallint]: Byte read Get_DetailUnknown write Set_DetailUnknown;
    property DetailUnused1[Index: Smallint]: Smallint read Get_DetailUnused1 write Set_DetailUnused1;
    property DetailUnused2[Index: Smallint]: Smallint read Get_DetailUnused2 write Set_DetailUnused2;
    property DetailUnused3[Index: Smallint]: Byte read Get_DetailUnused3 write Set_DetailUnused3;
    property DetailUnused4[Index: Smallint]: Double read Get_DetailUnused4 write Set_DetailUnused4;
    property DetailVendorIndex[Index: Smallint]: Integer read Get_DetailVendorIndex write Set_DetailVendorIndex;
    property DiscountAmount: Double read Get_DiscountAmount write Set_DiscountAmount;
    property DiscountDate: OleVariant read Get_DiscountDate write Set_DiscountDate;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property DropShipInvNo: WideString read Get_DropShipInvNo write Set_DropShipInvNo;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasPartner: WordBool read Get_HasPartner write Set_HasPartner;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property InvoiceNumber: WideString read Get_InvoiceNumber write Set_InvoiceNumber;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property JrnlTypeEx: Integer read Get_JrnlTypeEx write Set_JrnlTypeEx;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumOrderLines: Smallint read Get_NumOrderLines write Set_NumOrderLines;
    property PaymentDate: OleVariant read Get_PaymentDate write Set_PaymentDate;
    property Period: Smallint read Get_Period write Set_Period;
    property PO: WordBool read Get_PO write Set_PO;
    property POGoodThruDate: OleVariant read Get_POGoodThruDate write Set_POGoodThruDate;
    property PONo: WideString read Get_PONo write Set_PONo;
    property PONumber: WideString read Get_PONumber write Set_PONumber;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property PrintCheck: WordBool read Get_PrintCheck write Set_PrintCheck;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property ShipToAddr1: WideString read Get_ShipToAddr1 write Set_ShipToAddr1;
    property ShipToAddr2: WideString read Get_ShipToAddr2 write Set_ShipToAddr2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3: Double read Get_Unused3 write Set_Unused3;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property VendorName: WideString read Get_VendorName write Set_VendorName;
    property WaitingOnBill: WordBool read Get_WaitingOnBill write Set_WaitingOnBill;
  end;

// *********************************************************************//
// DispIntf:  _PurchaseJournalDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FFDC920E-F028-4F48-8AED-DBA3AE359924}
// *********************************************************************//
  _PurchaseJournalDisp = dispinterface
    ['{FFDC920E-F028-4F48-8AED-DBA3AE359924}']
    function ClearRecord: Smallint; dispid 1610809440;
    function CloseFile: Smallint; dispid 1610809441;
    function Delete: Smallint; dispid 1610809442;
    function GetEqual(NRecord: Integer): Smallint; dispid 1610809443;
    function IncrementBatchCount: Smallint; dispid 1610809444;
    function Insert: Smallint; dispid 1610809445;
    function OpenFile: Smallint; dispid 1610809446;
    function ReadFirst(Period: Smallint): Smallint; dispid 1610809448;
    function ReadFirstForVendor(Index: Integer): Smallint; dispid 1610809449;
    function ReadNext: Smallint; dispid 1610809450;
    function ReadNextByVendor: Smallint; dispid 1610809451;
    function Update: Smallint; dispid 1610809452;
    property AmountPaid: Double dispid 1745027167;
    property APAccount: WideString dispid 1745027166;
    property APAmount: Double dispid 1745027165;
    property BeginningBalanceFlag: WordBool dispid 1745027164;
    property DateCleared: OleVariant dispid 1745027163;
    property DateDue: OleVariant dispid 1745027162;
    property DetailAmount[Index: Smallint]: Double dispid 1745027161;
    property DetailApplyToPO[Index: Smallint]: WordBool dispid 1745027160;
    property DetailCostIndex[Index: Smallint]: Integer dispid 1745027159;
    property DetailCostOfSalesAccount[Index: Smallint]: WideString dispid 1745027158;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool dispid 1745027157;
    property DetailDescription[Index: Smallint]: WideString dispid 1745027156;
    property DetailDisplayedLine[Index: Smallint]: Smallint dispid 1745027155;
    property DetailFlag1[Index: Smallint]: WordBool dispid 1745027154;
    property DetailFlag2[Index: Smallint]: WordBool dispid 1745027153;
    property DetailGLAccount[Index: Smallint]: WideString dispid 1745027152;
    property DetailGUID[Index: Smallint]: WideString dispid 1745027151;
    property DetailInventoryAccount[Index: Smallint]: WideString dispid 1745027150;
    property DetailInvoiceNRecord[Index: Smallint]: Integer dispid 1745027149;
    property DetailInvoicePaid[Index: Smallint]: WideString dispid 1745027148;
    property DetailItemIndex[Index: Smallint]: Integer dispid 1745027147;
    property DetailJobIndex[Index: Smallint]: Integer dispid 1745027146;
    property DetailLineNo[Index: Smallint]: Smallint dispid 1745027145;
    property DetailPhaseIndex[Index: Smallint]: Integer dispid 1745027144;
    property DetailPOLine[Index: Smallint]: Smallint dispid 1745027143;
    property DetailQuantity[Index: Smallint]: Double dispid 1745027142;
    property DetailStockingQuantity[Index: Smallint]: Double dispid 1745027141;
    property DetailStockingUnitPrice[Index: Smallint]: Double dispid 1745027140;
    property DetailTrxType[Index: Smallint]: Integer dispid 1745027139;
    property DetailUMGUID[Index: Smallint]: WideString dispid 1745027138;
    property DetailUnitPrice[Index: Smallint]: Double dispid 1745027137;
    property DetailUnknown[Index: Smallint]: Byte dispid 1745027136;
    property DetailUnused1[Index: Smallint]: Smallint dispid 1745027135;
    property DetailUnused2[Index: Smallint]: Smallint dispid 1745027134;
    property DetailUnused3[Index: Smallint]: Byte dispid 1745027133;
    property DetailUnused4[Index: Smallint]: Double dispid 1745027132;
    property DetailVendorIndex[Index: Smallint]: Integer dispid 1745027131;
    property DiscountAmount: Double dispid 1745027130;
    property DiscountDate: OleVariant dispid 1745027129;
    property DropShip: WordBool dispid 1745027128;
    property DropShipCustomerIndex: Integer dispid 1745027127;
    property DropShipInvNo: WideString dispid 1745027126;
    property EditCount: Integer dispid 1745027125;
    property GUID: WideString dispid 1745027124;
    property HasPartner: WordBool dispid 1745027123;
    property InternalNote: WideString dispid 1745027122;
    property InvoiceNumber: WideString dispid 1745027121;
    property JournalCode: WideString dispid 1745027120;
    property JournalID: Smallint dispid 1745027119;
    property JrnlTypeEx: Integer dispid 1745027118;
    property Key: Double dispid 1745027117;
    property MainAccount: WideString dispid 1745027116;
    property MaxNRecord: Integer readonly dispid 1745027115;
    property MaxTrxNumber[Period: Smallint]: Smallint readonly dispid 1745027114;
    property MaxTrxNumberL[Period: Smallint]: Integer readonly dispid 1745027113;
    property NDistributions: Smallint dispid 1745027112;
    property Note: WideString dispid 1745027111;
    property NotePrintsAfterItems: WordBool dispid 1745027110;
    property NRecord: Integer dispid 1745027109;
    property NumOrderLines: Smallint dispid 1745027108;
    property PaymentDate: OleVariant dispid 1745027107;
    property Period: Smallint dispid 1745027106;
    property PO: WordBool dispid 1745027105;
    property POGoodThruDate: OleVariant dispid 1745027104;
    property PONo: WideString dispid 1745027103;
    property PONumber: WideString dispid 1745027102;
    property Posted: WordBool dispid 1745027101;
    property Prepayment: WordBool dispid 1745027100;
    property PrintCheck: WordBool dispid 1745027099;
    property ReceiptDate: OleVariant dispid 1745027098;
    property RecurrenceIndex: Integer dispid 1745027097;
    property RecurrenceRate: Smallint dispid 1745027096;
    property ReimbursableExpense: WordBool dispid 1745027095;
    property ShipToAddr1: WideString dispid 1745027094;
    property ShipToAddr2: WideString dispid 1745027093;
    property ShipToCity: WideString dispid 1745027092;
    property ShipToCountry: WideString dispid 1745027091;
    property ShipToName: WideString dispid 1745027090;
    property ShipToState: WideString dispid 1745027089;
    property ShipToZipCode: WideString dispid 1745027088;
    property ShipVia: WideString dispid 1745027087;
    property Subindex1: Byte dispid 1745027086;
    property Subindex2: Byte dispid 1745027085;
    property Terms: WideString dispid 1745027084;
    property TrxDate: OleVariant dispid 1745027083;
    property TrxNumber: Smallint dispid 1745027082;
    property TrxNumberL: Integer dispid 1745027081;
    property Unused1: Smallint dispid 1745027080;
    property Unused2[Index: Smallint]: Byte dispid 1745027079;
    property Unused3: Double dispid 1745027078;
    property Unused4: Byte dispid 1745027077;
    property Unused5[Index: Smallint]: Byte dispid 1745027076;
    property Unused6[Index: Smallint]: Byte dispid 1745027075;
    property VendorIndex: Integer dispid 1745027074;
    property VendorName: WideString dispid 1745027073;
    property WaitingOnBill: WordBool dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _PurchaseOrderJournal
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BC073E73-CB03-4BEA-8DD7-2551A1B36C06}
// *********************************************************************//
  _PurchaseOrderJournal = interface(IDispatch)
    ['{BC073E73-CB03-4BEA-8DD7-2551A1B36C06}']
    function ClearRecord: Smallint; safecall;
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(NRecord: Integer): Smallint; safecall;
    function IncrementBatchCount: Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function ReadFirst(Period: Smallint): Smallint; safecall;
    function ReadFirstForVendor(Index: Integer): Smallint; safecall;
    function ReadNext: Smallint; safecall;
    function ReadNextByVendor: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AmountPaid: Double; safecall;
    procedure Set_AmountPaid(Param1: Double); safecall;
    function Get_APAccount: WideString; safecall;
    procedure Set_APAccount(const Param1: WideString); safecall;
    function Get_APAmount: Double; safecall;
    procedure Set_APAmount(Param1: Double); safecall;
    function Get_BeginningBalanceFlag: WordBool; safecall;
    procedure Set_BeginningBalanceFlag(Param1: WordBool); safecall;
    function Get_ClosePurchaseOrder: WordBool; safecall;
    procedure Set_ClosePurchaseOrder(Param1: WordBool); safecall;
    function Get_CustomerInvoiceNumber: WideString; safecall;
    procedure Set_CustomerInvoiceNumber(const Param1: WideString); safecall;
    function Get_DateCleared: OleVariant; safecall;
    procedure Set_DateCleared(Param1: OleVariant); safecall;
    function Get_DateDue: OleVariant; safecall;
    procedure Set_DateDue(Param1: OleVariant); safecall;
    function Get_DetailAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailCostIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailDescription(Index: Smallint): WideString; safecall;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailExtension(Index: Smallint): Double; safecall;
    procedure Set_DetailExtension(Index: Smallint; Param2: Double); safecall;
    function Get_DetailGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailItemIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailJobIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailLineNo(Index: Smallint): Smallint; safecall;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailPhaseIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailPOLine(Index: Smallint): Byte; safecall;
    procedure Set_DetailPOLine(Index: Smallint; Param2: Byte); safecall;
    function Get_DetailPOLine2(Index: Smallint): Smallint; safecall;
    procedure Set_DetailPOLine2(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailReceivedAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailReceivedAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailReceivedQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailReceivedQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingQuantityOrdered(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingQuantityOrdered(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingQuantityShipped(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingQuantityShipped(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailUMGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailUnused(Index1: Smallint; Index2: Smallint): Byte; safecall;
    procedure Set_DetailUnused(Index1: Smallint; Index2: Smallint; Param3: Byte); safecall;
    function Get_DetailVendorIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailVendorIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DiscountAmount: Double; safecall;
    procedure Set_DiscountAmount(Param1: Double); safecall;
    function Get_DiscountDate: OleVariant; safecall;
    procedure Set_DiscountDate(Param1: OleVariant); safecall;
    function Get_DropShip: WordBool; safecall;
    procedure Set_DropShip(Param1: WordBool); safecall;
    function Get_DropShipCustomerIndex: Integer; safecall;
    procedure Set_DropShipCustomerIndex(Param1: Integer); safecall;
    function Get_DropShipInvoiceNumber: WideString; safecall;
    procedure Set_DropShipInvoiceNumber(const Param1: WideString); safecall;
    function Get_EditCount: Integer; safecall;
    procedure Set_EditCount(Param1: Integer); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_InternalNote: WideString; safecall;
    procedure Set_InternalNote(const Param1: WideString); safecall;
    function Get_JournalCode: WideString; safecall;
    procedure Set_JournalCode(const Param1: WideString); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_LastPONumber: WideString; safecall;
    procedure Set_LastPONumber(const Param1: WideString); safecall;
    function Get_MainAccount: WideString; safecall;
    procedure Set_MainAccount(const Param1: WideString); safecall;
    function Get_MaxNRecord: Integer; safecall;
    function Get_MaxTrxNumber(Period: Smallint): Smallint; safecall;
    function Get_MaxTrxNumberL(Period: Smallint): Integer; safecall;
    function Get_NDistributions: Smallint; safecall;
    procedure Set_NDistributions(Param1: Smallint); safecall;
    function Get_Note: WideString; safecall;
    procedure Set_Note(const Param1: WideString); safecall;
    function Get_NotePrintsAfterItems: WordBool; safecall;
    procedure Set_NotePrintsAfterItems(Param1: WordBool); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_NumPOLines: Byte; safecall;
    procedure Set_NumPOLines(Param1: Byte); safecall;
    function Get_NumPOLines2: Smallint; safecall;
    procedure Set_NumPOLines2(Param1: Smallint); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_POGoodThruDate: OleVariant; safecall;
    procedure Set_POGoodThruDate(Param1: OleVariant); safecall;
    function Get_PONumber: WideString; safecall;
    procedure Set_PONumber(const Param1: WideString); safecall;
    function Get_Posted: WordBool; safecall;
    procedure Set_Posted(Param1: WordBool); safecall;
    function Get_Prepayment: WordBool; safecall;
    procedure Set_Prepayment(Param1: WordBool); safecall;
    function Get_ReceiptDate: OleVariant; safecall;
    procedure Set_ReceiptDate(Param1: OleVariant); safecall;
    function Get_ReimbursableExpense: WordBool; safecall;
    procedure Set_ReimbursableExpense(Param1: WordBool); safecall;
    function Get_ShipToAddr1: WideString; safecall;
    procedure Set_ShipToAddr1(const Param1: WideString); safecall;
    function Get_ShipToAddr2: WideString; safecall;
    procedure Set_ShipToAddr2(const Param1: WideString); safecall;
    function Get_ShipToCity: WideString; safecall;
    procedure Set_ShipToCity(const Param1: WideString); safecall;
    function Get_ShipToCountry: WideString; safecall;
    procedure Set_ShipToCountry(const Param1: WideString); safecall;
    function Get_ShipToName: WideString; safecall;
    procedure Set_ShipToName(const Param1: WideString); safecall;
    function Get_ShipToState: WideString; safecall;
    procedure Set_ShipToState(const Param1: WideString); safecall;
    function Get_ShipToZipCode: WideString; safecall;
    procedure Set_ShipToZipCode(const Param1: WideString); safecall;
    function Get_ShipVia: WideString; safecall;
    procedure Set_ShipVia(const Param1: WideString); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_Terms: WideString; safecall;
    procedure Set_Terms(const Param1: WideString); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_TrxNumberL: Integer; safecall;
    procedure Set_TrxNumberL(Param1: Integer); safecall;
    function Get_Unused1: Smallint; safecall;
    procedure Set_Unused1(Param1: Smallint); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused3: Double; safecall;
    procedure Set_Unused3(Param1: Double); safecall;
    function Get_Unused4: Byte; safecall;
    procedure Set_Unused4(Param1: Byte); safecall;
    function Get_Unused5(Index: Smallint): Byte; safecall;
    procedure Set_Unused5(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused6(Index: Smallint): Byte; safecall;
    procedure Set_Unused6(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused7: Double; safecall;
    procedure Set_Unused7(Param1: Double); safecall;
    function Get_VendorIndex: Integer; safecall;
    procedure Set_VendorIndex(Param1: Integer); safecall;
    function Get_VendorName: WideString; safecall;
    procedure Set_VendorName(const Param1: WideString); safecall;
    property AmountPaid: Double read Get_AmountPaid write Set_AmountPaid;
    property APAccount: WideString read Get_APAccount write Set_APAccount;
    property APAmount: Double read Get_APAmount write Set_APAmount;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property ClosePurchaseOrder: WordBool read Get_ClosePurchaseOrder write Set_ClosePurchaseOrder;
    property CustomerInvoiceNumber: WideString read Get_CustomerInvoiceNumber write Set_CustomerInvoiceNumber;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DateDue: OleVariant read Get_DateDue write Set_DateDue;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailExtension[Index: Smallint]: Double read Get_DetailExtension write Set_DetailExtension;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailPOLine[Index: Smallint]: Byte read Get_DetailPOLine write Set_DetailPOLine;
    property DetailPOLine2[Index: Smallint]: Smallint read Get_DetailPOLine2 write Set_DetailPOLine2;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailReceivedAmount[Index: Smallint]: Double read Get_DetailReceivedAmount write Set_DetailReceivedAmount;
    property DetailReceivedQuantity[Index: Smallint]: Double read Get_DetailReceivedQuantity write Set_DetailReceivedQuantity;
    property DetailStockingQuantityOrdered[Index: Smallint]: Double read Get_DetailStockingQuantityOrdered write Set_DetailStockingQuantityOrdered;
    property DetailStockingQuantityShipped[Index: Smallint]: Double read Get_DetailStockingQuantityShipped write Set_DetailStockingQuantityShipped;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailUMGUID[Index: Smallint]: WideString read Get_DetailUMGUID write Set_DetailUMGUID;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnused[Index1: Smallint; Index2: Smallint]: Byte read Get_DetailUnused write Set_DetailUnused;
    property DetailVendorIndex[Index: Smallint]: Integer read Get_DetailVendorIndex write Set_DetailVendorIndex;
    property DiscountAmount: Double read Get_DiscountAmount write Set_DiscountAmount;
    property DiscountDate: OleVariant read Get_DiscountDate write Set_DiscountDate;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property DropShipInvoiceNumber: WideString read Get_DropShipInvoiceNumber write Set_DropShipInvoiceNumber;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property LastPONumber: WideString read Get_LastPONumber write Set_LastPONumber;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumPOLines: Byte read Get_NumPOLines write Set_NumPOLines;
    property NumPOLines2: Smallint read Get_NumPOLines2 write Set_NumPOLines2;
    property Period: Smallint read Get_Period write Set_Period;
    property POGoodThruDate: OleVariant read Get_POGoodThruDate write Set_POGoodThruDate;
    property PONumber: WideString read Get_PONumber write Set_PONumber;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property ShipToAddr1: WideString read Get_ShipToAddr1 write Set_ShipToAddr1;
    property ShipToAddr2: WideString read Get_ShipToAddr2 write Set_ShipToAddr2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3: Double read Get_Unused3 write Set_Unused3;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property Unused7: Double read Get_Unused7 write Set_Unused7;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property VendorName: WideString read Get_VendorName write Set_VendorName;
  end;

// *********************************************************************//
// DispIntf:  _PurchaseOrderJournalDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BC073E73-CB03-4BEA-8DD7-2551A1B36C06}
// *********************************************************************//
  _PurchaseOrderJournalDisp = dispinterface
    ['{BC073E73-CB03-4BEA-8DD7-2551A1B36C06}']
    function ClearRecord: Smallint; dispid 1610809426;
    function CloseFile: Smallint; dispid 1610809427;
    function Delete: Smallint; dispid 1610809428;
    function GetEqual(NRecord: Integer): Smallint; dispid 1610809429;
    function IncrementBatchCount: Smallint; dispid 1610809430;
    function Insert: Smallint; dispid 1610809431;
    function OpenFile: Smallint; dispid 1610809432;
    function ReadFirst(Period: Smallint): Smallint; dispid 1610809434;
    function ReadFirstForVendor(Index: Integer): Smallint; dispid 1610809435;
    function ReadNext: Smallint; dispid 1610809436;
    function ReadNextByVendor: Smallint; dispid 1610809437;
    function Update: Smallint; dispid 1610809438;
    property AmountPaid: Double dispid 1745027153;
    property APAccount: WideString dispid 1745027152;
    property APAmount: Double dispid 1745027151;
    property BeginningBalanceFlag: WordBool dispid 1745027150;
    property ClosePurchaseOrder: WordBool dispid 1745027149;
    property CustomerInvoiceNumber: WideString dispid 1745027148;
    property DateCleared: OleVariant dispid 1745027147;
    property DateDue: OleVariant dispid 1745027146;
    property DetailAmount[Index: Smallint]: Double dispid 1745027145;
    property DetailCostIndex[Index: Smallint]: Integer dispid 1745027144;
    property DetailDescription[Index: Smallint]: WideString dispid 1745027143;
    property DetailExtension[Index: Smallint]: Double dispid 1745027142;
    property DetailGLAccount[Index: Smallint]: WideString dispid 1745027141;
    property DetailGUID[Index: Smallint]: WideString dispid 1745027140;
    property DetailItemIndex[Index: Smallint]: Integer dispid 1745027139;
    property DetailJobIndex[Index: Smallint]: Integer dispid 1745027138;
    property DetailLineNo[Index: Smallint]: Smallint dispid 1745027137;
    property DetailPhaseIndex[Index: Smallint]: Integer dispid 1745027136;
    property DetailPOLine[Index: Smallint]: Byte dispid 1745027135;
    property DetailPOLine2[Index: Smallint]: Smallint dispid 1745027134;
    property DetailQuantity[Index: Smallint]: Double dispid 1745027133;
    property DetailReceivedAmount[Index: Smallint]: Double dispid 1745027132;
    property DetailReceivedQuantity[Index: Smallint]: Double dispid 1745027131;
    property DetailStockingQuantityOrdered[Index: Smallint]: Double dispid 1745027130;
    property DetailStockingQuantityShipped[Index: Smallint]: Double dispid 1745027129;
    property DetailStockingUnitPrice[Index: Smallint]: Double dispid 1745027128;
    property DetailUMGUID[Index: Smallint]: WideString dispid 1745027127;
    property DetailUnitPrice[Index: Smallint]: Double dispid 1745027126;
    property DetailUnused[Index1: Smallint; Index2: Smallint]: Byte dispid 1745027125;
    property DetailVendorIndex[Index: Smallint]: Integer dispid 1745027124;
    property DiscountAmount: Double dispid 1745027123;
    property DiscountDate: OleVariant dispid 1745027122;
    property DropShip: WordBool dispid 1745027121;
    property DropShipCustomerIndex: Integer dispid 1745027120;
    property DropShipInvoiceNumber: WideString dispid 1745027119;
    property EditCount: Integer dispid 1745027118;
    property GUID: WideString dispid 1745027117;
    property InternalNote: WideString dispid 1745027116;
    property JournalCode: WideString dispid 1745027115;
    property JournalID: Smallint dispid 1745027114;
    property Key: Double dispid 1745027113;
    property LastPONumber: WideString dispid 1745027112;
    property MainAccount: WideString dispid 1745027111;
    property MaxNRecord: Integer readonly dispid 1745027110;
    property MaxTrxNumber[Period: Smallint]: Smallint readonly dispid 1745027109;
    property MaxTrxNumberL[Period: Smallint]: Integer readonly dispid 1745027108;
    property NDistributions: Smallint dispid 1745027107;
    property Note: WideString dispid 1745027106;
    property NotePrintsAfterItems: WordBool dispid 1745027105;
    property NRecord: Integer dispid 1745027104;
    property NumPOLines: Byte dispid 1745027103;
    property NumPOLines2: Smallint dispid 1745027102;
    property Period: Smallint dispid 1745027101;
    property POGoodThruDate: OleVariant dispid 1745027100;
    property PONumber: WideString dispid 1745027099;
    property Posted: WordBool dispid 1745027098;
    property Prepayment: WordBool dispid 1745027097;
    property ReceiptDate: OleVariant dispid 1745027096;
    property ReimbursableExpense: WordBool dispid 1745027095;
    property ShipToAddr1: WideString dispid 1745027094;
    property ShipToAddr2: WideString dispid 1745027093;
    property ShipToCity: WideString dispid 1745027092;
    property ShipToCountry: WideString dispid 1745027091;
    property ShipToName: WideString dispid 1745027090;
    property ShipToState: WideString dispid 1745027089;
    property ShipToZipCode: WideString dispid 1745027088;
    property ShipVia: WideString dispid 1745027087;
    property Subindex1: Byte dispid 1745027086;
    property Subindex2: Byte dispid 1745027085;
    property Terms: WideString dispid 1745027084;
    property TrxDate: OleVariant dispid 1745027083;
    property TrxNumber: Smallint dispid 1745027082;
    property TrxNumberL: Integer dispid 1745027081;
    property Unused1: Smallint dispid 1745027080;
    property Unused2[Index: Smallint]: Byte dispid 1745027079;
    property Unused3: Double dispid 1745027078;
    property Unused4: Byte dispid 1745027077;
    property Unused5[Index: Smallint]: Byte dispid 1745027076;
    property Unused6[Index: Smallint]: Byte dispid 1745027075;
    property Unused7: Double dispid 1745027074;
    property VendorIndex: Integer dispid 1745027073;
    property VendorName: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _SalesOrderJournal
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {14188EF5-39B9-456D-9222-B03FF50D991B}
// *********************************************************************//
  _SalesOrderJournal = interface(IDispatch)
    ['{14188EF5-39B9-456D-9222-B03FF50D991B}']
    function ClearRecord: Smallint; safecall;
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(NRecord: Integer): Smallint; safecall;
    function IncrementBatchCount: Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function ReadFirst(Period: Smallint): Smallint; safecall;
    function ReadFirstForCustomer(Index: Integer): Smallint; safecall;
    function ReadNext: Smallint; safecall;
    function ReadNextByCustomer: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_ARAccount: WideString; safecall;
    procedure Set_ARAccount(const Param1: WideString); safecall;
    function Get_ARAmount: Double; safecall;
    procedure Set_ARAmount(Param1: Double); safecall;
    function Get_BeginningBalanceFlag: WordBool; safecall;
    procedure Set_BeginningBalanceFlag(Param1: WordBool); safecall;
    function Get_CloseSalesOrder: WordBool; safecall;
    procedure Set_CloseSalesOrder(Param1: WordBool); safecall;
    function Get_CustomerIndex: Integer; safecall;
    procedure Set_CustomerIndex(Param1: Integer); safecall;
    function Get_CustomerName: WideString; safecall;
    procedure Set_CustomerName(const Param1: WideString); safecall;
    function Get_CustomerPO: WideString; safecall;
    procedure Set_CustomerPO(const Param1: WideString); safecall;
    function Get_DateCleared: OleVariant; safecall;
    procedure Set_DateCleared(Param1: OleVariant); safecall;
    function Get_DateDue: OleVariant; safecall;
    procedure Set_DateDue(Param1: OleVariant); safecall;
    function Get_DetailAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailCostIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailCustomerIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCustomerIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailDescription(Index: Smallint): WideString; safecall;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailExtension(Index: Smallint): Double; safecall;
    procedure Set_DetailExtension(Index: Smallint; Param2: Double); safecall;
    function Get_DetailFreightFlag(Index: Smallint): WordBool; safecall;
    procedure Set_DetailFreightFlag(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailItemIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailJobIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailLineNo(Index: Smallint): Smallint; safecall;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailPhaseIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailSalesTaxAuthority(Index: Smallint): WideString; safecall;
    procedure Set_DetailSalesTaxAuthority(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailShippedAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailShippedAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailShippedQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailShippedQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailSOLine(Index: Smallint): Byte; safecall;
    procedure Set_DetailSOLine(Index: Smallint; Param2: Byte); safecall;
    function Get_DetailSOLine2(Index: Smallint): Smallint; safecall;
    procedure Set_DetailSOLine2(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailStockingQuantityOrdered(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingQuantityOrdered(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingQuantityShipped(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingQuantityShipped(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailTaxFlag(Index: Smallint): WordBool; safecall;
    procedure Set_DetailTaxFlag(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailTaxType(Index: Smallint): Smallint; safecall;
    procedure Set_DetailTaxType(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailTrxType(Index: Smallint): Integer; safecall;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailUMGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailUnused1(Index: Smallint): Byte; safecall;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Byte); safecall;
    function Get_DetailUnknown2(Index: Smallint): Byte; safecall;
    procedure Set_DetailUnknown2(Index: Smallint; Param2: Byte); safecall;
    function Get_DetailUnused3(Index: Smallint): Byte; safecall;
    procedure Set_DetailUnused3(Index: Smallint; Param2: Byte); safecall;
    function Get_DiscountDate: OleVariant; safecall;
    procedure Set_DiscountDate(Param1: OleVariant); safecall;
    function Get_DropShip: WordBool; safecall;
    procedure Set_DropShip(Param1: WordBool); safecall;
    function Get_DropShipCustomerIndex: Integer; safecall;
    procedure Set_DropShipCustomerIndex(Param1: Integer); safecall;
    function Get_EditCount: Integer; safecall;
    procedure Set_EditCount(Param1: Integer); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_InternalNote: WideString; safecall;
    procedure Set_InternalNote(const Param1: WideString); safecall;
    function Get_InvoiceNumber: WideString; safecall;
    procedure Set_InvoiceNumber(const Param1: WideString); safecall;
    function Get_JournalCode: WideString; safecall;
    procedure Set_JournalCode(const Param1: WideString); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_MainAccount: WideString; safecall;
    procedure Set_MainAccount(const Param1: WideString); safecall;
    function Get_MaxNRecord: Integer; safecall;
    function Get_MaxTrxNumber(Period: Smallint): Smallint; safecall;
    function Get_MaxTrxNumberL(Period: Smallint): Integer; safecall;
    function Get_NDistributions: Smallint; safecall;
    procedure Set_NDistributions(Param1: Smallint); safecall;
    function Get_NextSONumber: WideString; safecall;
    procedure Set_NextSONumber(const Param1: WideString); safecall;
    function Get_Note: WideString; safecall;
    procedure Set_Note(const Param1: WideString); safecall;
    function Get_NotePrintsAfterItems: WordBool; safecall;
    procedure Set_NotePrintsAfterItems(Param1: WordBool); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_NumSOLines: Byte; safecall;
    procedure Set_NumSOLines(Param1: Byte); safecall;
    function Get_NumSOLines2: Smallint; safecall;
    procedure Set_NumSOLines2(Param1: Smallint); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_Posted: WordBool; safecall;
    procedure Set_Posted(Param1: WordBool); safecall;
    function Get_PrintBeforeInvoiceReference: WordBool; safecall;
    procedure Set_PrintBeforeInvoiceReference(Param1: WordBool); safecall;
    function Get_QuoteGoodThruDate: OleVariant; safecall;
    procedure Set_QuoteGoodThruDate(Param1: OleVariant); safecall;
    function Get_QuoteNumber: WideString; safecall;
    procedure Set_QuoteNumber(const Param1: WideString); safecall;
    function Get_ReceiptDate: OleVariant; safecall;
    procedure Set_ReceiptDate(Param1: OleVariant); safecall;
    function Get_ReimbursableExpense: WordBool; safecall;
    procedure Set_ReimbursableExpense(Param1: WordBool); safecall;
    function Get_SalesRepID: WideString; safecall;
    procedure Set_SalesRepID(const Param1: WideString); safecall;
    function Get_SalesTaxCode: WideString; safecall;
    procedure Set_SalesTaxCode(const Param1: WideString); safecall;
    function Get_ShipByDate: OleVariant; safecall;
    procedure Set_ShipByDate(Param1: OleVariant); safecall;
    function Get_ShipToAddr1: WideString; safecall;
    procedure Set_ShipToAddr1(const Param1: WideString); safecall;
    function Get_ShipToAddr2: WideString; safecall;
    procedure Set_ShipToAddr2(const Param1: WideString); safecall;
    function Get_ShipToCity: WideString; safecall;
    procedure Set_ShipToCity(const Param1: WideString); safecall;
    function Get_ShipToCountry: WideString; safecall;
    procedure Set_ShipToCountry(const Param1: WideString); safecall;
    function Get_ShipToName: WideString; safecall;
    procedure Set_ShipToName(const Param1: WideString); safecall;
    function Get_ShipToState: WideString; safecall;
    procedure Set_ShipToState(const Param1: WideString); safecall;
    function Get_ShipToZipCode: WideString; safecall;
    procedure Set_ShipToZipCode(const Param1: WideString); safecall;
    function Get_ShipVia: WideString; safecall;
    procedure Set_ShipVia(const Param1: WideString); safecall;
    function Get_StatementNote: WideString; safecall;
    procedure Set_StatementNote(const Param1: WideString); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_Terms: WideString; safecall;
    procedure Set_Terms(const Param1: WideString); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_TrxNumberL: Integer; safecall;
    procedure Set_TrxNumberL(Param1: Integer); safecall;
    function Get_Unused1: Smallint; safecall;
    procedure Set_Unused1(Param1: Smallint); safecall;
    function Get_Unused2(Index: Smallint): Byte; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused3: Double; safecall;
    procedure Set_Unused3(Param1: Double); safecall;
    function Get_Unused4: Integer; safecall;
    procedure Set_Unused4(Param1: Integer); safecall;
    function Get_Unused5: Byte; safecall;
    procedure Set_Unused5(Param1: Byte); safecall;
    function Get_Unused6(Index: Smallint): Byte; safecall;
    procedure Set_Unused6(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused7(Index: Smallint): Byte; safecall;
    procedure Set_Unused7(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused8: Double; safecall;
    procedure Set_Unused8(Param1: Double); safecall;
    property ARAccount: WideString read Get_ARAccount write Set_ARAccount;
    property ARAmount: Double read Get_ARAmount write Set_ARAmount;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CloseSalesOrder: WordBool read Get_CloseSalesOrder write Set_CloseSalesOrder;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property CustomerPO: WideString read Get_CustomerPO write Set_CustomerPO;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DateDue: OleVariant read Get_DateDue write Set_DateDue;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCustomerIndex[Index: Smallint]: Integer read Get_DetailCustomerIndex write Set_DetailCustomerIndex;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailExtension[Index: Smallint]: Double read Get_DetailExtension write Set_DetailExtension;
    property DetailFreightFlag[Index: Smallint]: WordBool read Get_DetailFreightFlag write Set_DetailFreightFlag;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailSalesTaxAuthority[Index: Smallint]: WideString read Get_DetailSalesTaxAuthority write Set_DetailSalesTaxAuthority;
    property DetailShippedAmount[Index: Smallint]: Double read Get_DetailShippedAmount write Set_DetailShippedAmount;
    property DetailShippedQuantity[Index: Smallint]: Double read Get_DetailShippedQuantity write Set_DetailShippedQuantity;
    property DetailSOLine[Index: Smallint]: Byte read Get_DetailSOLine write Set_DetailSOLine;
    property DetailSOLine2[Index: Smallint]: Smallint read Get_DetailSOLine2 write Set_DetailSOLine2;
    property DetailStockingQuantityOrdered[Index: Smallint]: Double read Get_DetailStockingQuantityOrdered write Set_DetailStockingQuantityOrdered;
    property DetailStockingQuantityShipped[Index: Smallint]: Double read Get_DetailStockingQuantityShipped write Set_DetailStockingQuantityShipped;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTaxFlag[Index: Smallint]: WordBool read Get_DetailTaxFlag write Set_DetailTaxFlag;
    property DetailTaxType[Index: Smallint]: Smallint read Get_DetailTaxType write Set_DetailTaxType;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUMGUID[Index: Smallint]: WideString read Get_DetailUMGUID write Set_DetailUMGUID;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnused1[Index: Smallint]: Byte read Get_DetailUnused1 write Set_DetailUnused1;
    property DetailUnknown2[Index: Smallint]: Byte read Get_DetailUnknown2 write Set_DetailUnknown2;
    property DetailUnused3[Index: Smallint]: Byte read Get_DetailUnused3 write Set_DetailUnused3;
    property DiscountDate: OleVariant read Get_DiscountDate write Set_DiscountDate;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property InvoiceNumber: WideString read Get_InvoiceNumber write Set_InvoiceNumber;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NextSONumber: WideString read Get_NextSONumber write Set_NextSONumber;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumSOLines: Byte read Get_NumSOLines write Set_NumSOLines;
    property NumSOLines2: Smallint read Get_NumSOLines2 write Set_NumSOLines2;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property PrintBeforeInvoiceReference: WordBool read Get_PrintBeforeInvoiceReference write Set_PrintBeforeInvoiceReference;
    property QuoteGoodThruDate: OleVariant read Get_QuoteGoodThruDate write Set_QuoteGoodThruDate;
    property QuoteNumber: WideString read Get_QuoteNumber write Set_QuoteNumber;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property ShipByDate: OleVariant read Get_ShipByDate write Set_ShipByDate;
    property ShipToAddr1: WideString read Get_ShipToAddr1 write Set_ShipToAddr1;
    property ShipToAddr2: WideString read Get_ShipToAddr2 write Set_ShipToAddr2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property StatementNote: WideString read Get_StatementNote write Set_StatementNote;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3: Double read Get_Unused3 write Set_Unused3;
    property Unused4: Integer read Get_Unused4 write Set_Unused4;
    property Unused5: Byte read Get_Unused5 write Set_Unused5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property Unused7[Index: Smallint]: Byte read Get_Unused7 write Set_Unused7;
    property Unused8: Double read Get_Unused8 write Set_Unused8;
  end;

// *********************************************************************//
// DispIntf:  _SalesOrderJournalDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {14188EF5-39B9-456D-9222-B03FF50D991B}
// *********************************************************************//
  _SalesOrderJournalDisp = dispinterface
    ['{14188EF5-39B9-456D-9222-B03FF50D991B}']
    function ClearRecord: Smallint; dispid 1610809436;
    function CloseFile: Smallint; dispid 1610809437;
    function Delete: Smallint; dispid 1610809438;
    function GetEqual(NRecord: Integer): Smallint; dispid 1610809439;
    function IncrementBatchCount: Smallint; dispid 1610809440;
    function Insert: Smallint; dispid 1610809441;
    function OpenFile: Smallint; dispid 1610809442;
    function ReadFirst(Period: Smallint): Smallint; dispid 1610809444;
    function ReadFirstForCustomer(Index: Integer): Smallint; dispid 1610809445;
    function ReadNext: Smallint; dispid 1610809446;
    function ReadNextByCustomer: Smallint; dispid 1610809447;
    function Update: Smallint; dispid 1610809448;
    property ARAccount: WideString dispid 1745027163;
    property ARAmount: Double dispid 1745027162;
    property BeginningBalanceFlag: WordBool dispid 1745027161;
    property CloseSalesOrder: WordBool dispid 1745027160;
    property CustomerIndex: Integer dispid 1745027159;
    property CustomerName: WideString dispid 1745027158;
    property CustomerPO: WideString dispid 1745027157;
    property DateCleared: OleVariant dispid 1745027156;
    property DateDue: OleVariant dispid 1745027155;
    property DetailAmount[Index: Smallint]: Double dispid 1745027154;
    property DetailCostIndex[Index: Smallint]: Integer dispid 1745027153;
    property DetailCustomerIndex[Index: Smallint]: Integer dispid 1745027152;
    property DetailDescription[Index: Smallint]: WideString dispid 1745027151;
    property DetailExtension[Index: Smallint]: Double dispid 1745027150;
    property DetailFreightFlag[Index: Smallint]: WordBool dispid 1745027149;
    property DetailGLAccount[Index: Smallint]: WideString dispid 1745027148;
    property DetailGUID[Index: Smallint]: WideString dispid 1745027147;
    property DetailItemIndex[Index: Smallint]: Integer dispid 1745027146;
    property DetailJobIndex[Index: Smallint]: Integer dispid 1745027145;
    property DetailLineNo[Index: Smallint]: Smallint dispid 1745027144;
    property DetailPhaseIndex[Index: Smallint]: Integer dispid 1745027143;
    property DetailQuantity[Index: Smallint]: Double dispid 1745027142;
    property DetailSalesTaxAuthority[Index: Smallint]: WideString dispid 1745027141;
    property DetailShippedAmount[Index: Smallint]: Double dispid 1745027140;
    property DetailShippedQuantity[Index: Smallint]: Double dispid 1745027139;
    property DetailSOLine[Index: Smallint]: Byte dispid 1745027138;
    property DetailSOLine2[Index: Smallint]: Smallint dispid 1745027137;
    property DetailStockingQuantityOrdered[Index: Smallint]: Double dispid 1745027136;
    property DetailStockingQuantityShipped[Index: Smallint]: Double dispid 1745027135;
    property DetailStockingUnitPrice[Index: Smallint]: Double dispid 1745027134;
    property DetailTaxFlag[Index: Smallint]: WordBool dispid 1745027133;
    property DetailTaxType[Index: Smallint]: Smallint dispid 1745027132;
    property DetailTrxType[Index: Smallint]: Integer dispid 1745027131;
    property DetailUMGUID[Index: Smallint]: WideString dispid 1745027130;
    property DetailUnitPrice[Index: Smallint]: Double dispid 1745027129;
    property DetailUnused1[Index: Smallint]: Byte dispid 1745027128;
    property DetailUnknown2[Index: Smallint]: Byte dispid 1745027127;
    property DetailUnused3[Index: Smallint]: Byte dispid 1745027126;
    property DiscountDate: OleVariant dispid 1745027125;
    property DropShip: WordBool dispid 1745027124;
    property DropShipCustomerIndex: Integer dispid 1745027123;
    property EditCount: Integer dispid 1745027122;
    property GUID: WideString dispid 1745027121;
    property InternalNote: WideString dispid 1745027120;
    property InvoiceNumber: WideString dispid 1745027119;
    property JournalCode: WideString dispid 1745027118;
    property JournalID: Smallint dispid 1745027117;
    property Key: Double dispid 1745027116;
    property MainAccount: WideString dispid 1745027115;
    property MaxNRecord: Integer readonly dispid 1745027114;
    property MaxTrxNumber[Period: Smallint]: Smallint readonly dispid 1745027113;
    property MaxTrxNumberL[Period: Smallint]: Integer readonly dispid 1745027112;
    property NDistributions: Smallint dispid 1745027111;
    property NextSONumber: WideString dispid 1745027110;
    property Note: WideString dispid 1745027109;
    property NotePrintsAfterItems: WordBool dispid 1745027108;
    property NRecord: Integer dispid 1745027107;
    property NumSOLines: Byte dispid 1745027106;
    property NumSOLines2: Smallint dispid 1745027105;
    property Period: Smallint dispid 1745027104;
    property Posted: WordBool dispid 1745027103;
    property PrintBeforeInvoiceReference: WordBool dispid 1745027102;
    property QuoteGoodThruDate: OleVariant dispid 1745027101;
    property QuoteNumber: WideString dispid 1745027100;
    property ReceiptDate: OleVariant dispid 1745027099;
    property ReimbursableExpense: WordBool dispid 1745027098;
    property SalesRepID: WideString dispid 1745027097;
    property SalesTaxCode: WideString dispid 1745027096;
    property ShipByDate: OleVariant dispid 1745027095;
    property ShipToAddr1: WideString dispid 1745027094;
    property ShipToAddr2: WideString dispid 1745027093;
    property ShipToCity: WideString dispid 1745027092;
    property ShipToCountry: WideString dispid 1745027091;
    property ShipToName: WideString dispid 1745027090;
    property ShipToState: WideString dispid 1745027089;
    property ShipToZipCode: WideString dispid 1745027088;
    property ShipVia: WideString dispid 1745027087;
    property StatementNote: WideString dispid 1745027086;
    property Subindex1: Byte dispid 1745027085;
    property Subindex2: Byte dispid 1745027084;
    property Terms: WideString dispid 1745027083;
    property TrxDate: OleVariant dispid 1745027082;
    property TrxNumber: Smallint dispid 1745027081;
    property TrxNumberL: Integer dispid 1745027080;
    property Unused1: Smallint dispid 1745027079;
    property Unused2[Index: Smallint]: Byte dispid 1745027078;
    property Unused3: Double dispid 1745027077;
    property Unused4: Integer dispid 1745027076;
    property Unused5: Byte dispid 1745027075;
    property Unused6[Index: Smallint]: Byte dispid 1745027074;
    property Unused7[Index: Smallint]: Byte dispid 1745027073;
    property Unused8: Double dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _Phase
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1920C000-56E7-493D-A454-3A53A6687C59}
// *********************************************************************//
  _Phase = interface(IDispatch)
    ['{1920C000-56E7-493D-A454-3A53A6687C59}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(const ID: WideString): Smallint; safecall;
    function GetForIndex(Index: Integer): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_CostType: WideString; safecall;
    procedure Set_CostType(const Param1: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_Inactive: WordBool; safecall;
    procedure Set_Inactive(Param1: WordBool); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_PhaseID: WideString; safecall;
    procedure Set_PhaseID(const Param1: WideString); safecall;
    function Get_UseCostCodes: WordBool; safecall;
    procedure Set_UseCostCodes(Param1: WordBool); safecall;
    property CostType: WideString read Get_CostType write Set_CostType;
    property Description: WideString read Get_Description write Set_Description;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property PhaseID: WideString read Get_PhaseID write Set_PhaseID;
    property UseCostCodes: WordBool read Get_UseCostCodes write Set_UseCostCodes;
  end;

// *********************************************************************//
// DispIntf:  _PhaseDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1920C000-56E7-493D-A454-3A53A6687C59}
// *********************************************************************//
  _PhaseDisp = dispinterface
    ['{1920C000-56E7-493D-A454-3A53A6687C59}']
    function CloseFile: Smallint; dispid 1610809350;
    function OpenFile: Smallint; dispid 1610809351;
    function Delete: Smallint; dispid 1610809352;
    function GetEqual(const ID: WideString): Smallint; dispid 1610809353;
    function GetForIndex(Index: Integer): Smallint; dispid 1610809354;
    function Insert: Smallint; dispid 1610809355;
    function RecordCount: Integer; dispid 1610809357;
    function StepFirst: Smallint; dispid 1610809358;
    function StepLast: Smallint; dispid 1610809359;
    function StepNext: Smallint; dispid 1610809360;
    function StepPrevious: Smallint; dispid 1610809361;
    function Update: Smallint; dispid 1610809362;
    property CostType: WideString dispid 1745027077;
    property Description: WideString dispid 1745027076;
    property Inactive: WordBool dispid 1745027075;
    property Index: Integer dispid 1745027074;
    property PhaseID: WideString dispid 1745027073;
    property UseCostCodes: WordBool dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _ReceiptTag
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AD03D005-0348-437B-949B-3D9D9B038828}
// *********************************************************************//
  _ReceiptTag = interface(IDispatch)
    ['{AD03D005-0348-437B-949B-3D9D9B038828}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_JournalIDA: Smallint; safecall;
    procedure Set_JournalIDA(Param1: Smallint); safecall;
    function Get_JournalIDB: Smallint; safecall;
    procedure Set_JournalIDB(Param1: Smallint); safecall;
    function Get_KeyA: Double; safecall;
    procedure Set_KeyA(Param1: Double); safecall;
    function Get_KeyB: Double; safecall;
    procedure Set_KeyB(Param1: Double); safecall;
    function Get_NRecordA: Integer; safecall;
    procedure Set_NRecordA(Param1: Integer); safecall;
    function Get_NRecordB: Integer; safecall;
    procedure Set_NRecordB(Param1: Integer); safecall;
    function Get_PeriodA: Smallint; safecall;
    procedure Set_PeriodA(Param1: Smallint); safecall;
    function Get_PeriodB: Smallint; safecall;
    procedure Set_PeriodB(Param1: Smallint); safecall;
    function Get_Subindex1A: Byte; safecall;
    procedure Set_Subindex1A(Param1: Byte); safecall;
    function Get_Subindex1B: Byte; safecall;
    procedure Set_Subindex1B(Param1: Byte); safecall;
    function Get_Subindex2A: Byte; safecall;
    procedure Set_Subindex2A(Param1: Byte); safecall;
    function Get_Subindex2B: Byte; safecall;
    procedure Set_Subindex2B(Param1: Byte); safecall;
    function Get_TrxNumberA: Smallint; safecall;
    procedure Set_TrxNumberA(Param1: Smallint); safecall;
    function Get_TrxNumberB: Smallint; safecall;
    procedure Set_TrxNumberB(Param1: Smallint); safecall;
    function Get_TrxNumberLA: Integer; safecall;
    procedure Set_TrxNumberLA(Param1: Integer); safecall;
    function Get_TrxNumberLB: Integer; safecall;
    procedure Set_TrxNumberLB(Param1: Integer); safecall;
    function Get_UnknownDate: OleVariant; safecall;
    procedure Set_UnknownDate(Param1: OleVariant); safecall;
    function Get_Unknown1: Smallint; safecall;
    procedure Set_Unknown1(Param1: Smallint); safecall;
    function Get_Unknown2: Double; safecall;
    procedure Set_Unknown2(Param1: Double); safecall;
    function Get_Unknown3: Byte; safecall;
    procedure Set_Unknown3(Param1: Byte); safecall;
    function Get_Unknown4: Byte; safecall;
    procedure Set_Unknown4(Param1: Byte); safecall;
    function Get_Unknown5: Byte; safecall;
    procedure Set_Unknown5(Param1: Byte); safecall;
    function Get_Unknown6: Byte; safecall;
    procedure Set_Unknown6(Param1: Byte); safecall;
    property JournalIDA: Smallint read Get_JournalIDA write Set_JournalIDA;
    property JournalIDB: Smallint read Get_JournalIDB write Set_JournalIDB;
    property KeyA: Double read Get_KeyA write Set_KeyA;
    property KeyB: Double read Get_KeyB write Set_KeyB;
    property NRecordA: Integer read Get_NRecordA write Set_NRecordA;
    property NRecordB: Integer read Get_NRecordB write Set_NRecordB;
    property PeriodA: Smallint read Get_PeriodA write Set_PeriodA;
    property PeriodB: Smallint read Get_PeriodB write Set_PeriodB;
    property Subindex1A: Byte read Get_Subindex1A write Set_Subindex1A;
    property Subindex1B: Byte read Get_Subindex1B write Set_Subindex1B;
    property Subindex2A: Byte read Get_Subindex2A write Set_Subindex2A;
    property Subindex2B: Byte read Get_Subindex2B write Set_Subindex2B;
    property TrxNumberA: Smallint read Get_TrxNumberA write Set_TrxNumberA;
    property TrxNumberB: Smallint read Get_TrxNumberB write Set_TrxNumberB;
    property TrxNumberLA: Integer read Get_TrxNumberLA write Set_TrxNumberLA;
    property TrxNumberLB: Integer read Get_TrxNumberLB write Set_TrxNumberLB;
    property UnknownDate: OleVariant read Get_UnknownDate write Set_UnknownDate;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Double read Get_Unknown2 write Set_Unknown2;
    property Unknown3: Byte read Get_Unknown3 write Set_Unknown3;
    property Unknown4: Byte read Get_Unknown4 write Set_Unknown4;
    property Unknown5: Byte read Get_Unknown5 write Set_Unknown5;
    property Unknown6: Byte read Get_Unknown6 write Set_Unknown6;
  end;

// *********************************************************************//
// DispIntf:  _ReceiptTagDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AD03D005-0348-437B-949B-3D9D9B038828}
// *********************************************************************//
  _ReceiptTagDisp = dispinterface
    ['{AD03D005-0348-437B-949B-3D9D9B038828}']
    function CloseFile: Smallint; dispid 1610809367;
    function OpenFile: Smallint; dispid 1610809368;
    function Delete: Smallint; dispid 1610809369;
    function Insert: Smallint; dispid 1610809370;
    function RecordCount: Integer; dispid 1610809372;
    function StepFirst: Smallint; dispid 1610809373;
    function StepLast: Smallint; dispid 1610809374;
    function StepNext: Smallint; dispid 1610809375;
    function StepPrevious: Smallint; dispid 1610809376;
    function Update: Smallint; dispid 1610809377;
    property JournalIDA: Smallint dispid 1745027094;
    property JournalIDB: Smallint dispid 1745027093;
    property KeyA: Double dispid 1745027092;
    property KeyB: Double dispid 1745027091;
    property NRecordA: Integer dispid 1745027090;
    property NRecordB: Integer dispid 1745027089;
    property PeriodA: Smallint dispid 1745027088;
    property PeriodB: Smallint dispid 1745027087;
    property Subindex1A: Byte dispid 1745027086;
    property Subindex1B: Byte dispid 1745027085;
    property Subindex2A: Byte dispid 1745027084;
    property Subindex2B: Byte dispid 1745027083;
    property TrxNumberA: Smallint dispid 1745027082;
    property TrxNumberB: Smallint dispid 1745027081;
    property TrxNumberLA: Integer dispid 1745027080;
    property TrxNumberLB: Integer dispid 1745027079;
    property UnknownDate: OleVariant dispid 1745027078;
    property Unknown1: Smallint dispid 1745027077;
    property Unknown2: Double dispid 1745027076;
    property Unknown3: Byte dispid 1745027075;
    property Unknown4: Byte dispid 1745027074;
    property Unknown5: Byte dispid 1745027073;
    property Unknown6: Byte dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _MemorizedTransactions
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A9B269CE-B5C4-47FF-88E0-FB7D80C3345C}
// *********************************************************************//
  _MemorizedTransactions = interface(IDispatch)
    ['{A9B269CE-B5C4-47FF-88E0-FB7D80C3345C}']
    function ClearRecord: Smallint; safecall;
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Account: WideString; safecall;
    procedure Set_Account(const Param1: WideString); safecall;
    function Get_AddrAddr1: WideString; safecall;
    procedure Set_AddrAddr1(const Param1: WideString); safecall;
    function Get_AddrAddr2: WideString; safecall;
    procedure Set_AddrAddr2(const Param1: WideString); safecall;
    function Get_AddrCity: WideString; safecall;
    procedure Set_AddrCity(const Param1: WideString); safecall;
    function Get_AddrCountry: WideString; safecall;
    procedure Set_AddrCountry(const Param1: WideString); safecall;
    function Get_AddressPresent: WordBool; safecall;
    procedure Set_AddressPresent(Param1: WordBool); safecall;
    function Get_AddrName: WideString; safecall;
    procedure Set_AddrName(const Param1: WideString); safecall;
    function Get_AddrState: WideString; safecall;
    procedure Set_AddrState(const Param1: WideString); safecall;
    function Get_AddrZipCode: WideString; safecall;
    procedure Set_AddrZipCode(const Param1: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_DetailAmount(Index: Smallint): Double; safecall;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double); safecall;
    function Get_DetailCostIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailDescription(Index: Smallint): WideString; safecall;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailFreightFlag(Index: Smallint): WordBool; safecall;
    procedure Set_DetailFreightFlag(Index: Smallint; Param2: WordBool); safecall;
    function Get_DetailGLAccount(Index: Smallint): WideString; safecall;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailItemIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailJobIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailPhaseIndex(Index: Smallint): Integer; safecall;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_DetailQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingQuantity(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_DetailStockingUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailTaxCode(Index: Smallint): Smallint; safecall;
    procedure Set_DetailTaxCode(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailUMGUID(Index: Smallint): WideString; safecall;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString); safecall;
    function Get_DetailUnitPrice(Index: Smallint): Double; safecall;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double); safecall;
    function Get_DetailUnused1(Index: Smallint): Smallint; safecall;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailUnused2(Index1: Smallint; Index2: Smallint): Byte; safecall;
    procedure Set_DetailUnused2(Index1: Smallint; Index2: Smallint; Param3: Byte); safecall;
    function Get_DetailUnused3(Index: Smallint): Smallint; safecall;
    procedure Set_DetailUnused3(Index: Smallint; Param2: Smallint); safecall;
    function Get_DetailUnused4(Index: Smallint): Byte; safecall;
    procedure Set_DetailUnused4(Index: Smallint; Param2: Byte); safecall;
    function Get_DetailUnused5(Index: Smallint): Byte; safecall;
    procedure Set_DetailUnused5(Index: Smallint; Param2: Byte); safecall;
    function Get_DetailUnused6(Index1: Smallint; Index2: Smallint): Byte; safecall;
    procedure Set_DetailUnused6(Index1: Smallint; Index2: Smallint; Param3: Byte); safecall;
    function Get_DropShip: WordBool; safecall;
    procedure Set_DropShip(Param1: WordBool); safecall;
    function Get_DropShipCustomerIndex: Integer; safecall;
    procedure Set_DropShipCustomerIndex(Param1: Integer); safecall;
    function Get_ID: WideString; safecall;
    procedure Set_ID(const Param1: WideString); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_Memo: WideString; safecall;
    procedure Set_Memo(const Param1: WideString); safecall;
    function Get_NDistributions: Smallint; safecall;
    procedure Set_NDistributions(Param1: Smallint); safecall;
    function Get_RecordType: Smallint; safecall;
    procedure Set_RecordType(Param1: Smallint); safecall;
    function Get_Reference: WideString; safecall;
    procedure Set_Reference(const Param1: WideString); safecall;
    function Get_ReverseTransaction: WordBool; safecall;
    procedure Set_ReverseTransaction(Param1: WordBool); safecall;
    function Get_ShipToIndex: Smallint; safecall;
    procedure Set_ShipToIndex(Param1: Smallint); safecall;
    function Get_TotalAmount: Double; safecall;
    procedure Set_TotalAmount(Param1: Double); safecall;
    function Get_TransactionID: WideString; safecall;
    procedure Set_TransactionID(const Param1: WideString); safecall;
    function Get_Unknown1: Smallint; safecall;
    procedure Set_Unknown1(Param1: Smallint); safecall;
    function Get_Unknown2: Smallint; safecall;
    procedure Set_Unknown2(Param1: Smallint); safecall;
    function Get_Unused3(Index: Smallint): Byte; safecall;
    procedure Set_Unused3(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused4: Smallint; safecall;
    procedure Set_Unused4(Param1: Smallint); safecall;
    function Get_Unused5: Byte; safecall;
    procedure Set_Unused5(Param1: Byte); safecall;
    property Account: WideString read Get_Account write Set_Account;
    property AddrAddr1: WideString read Get_AddrAddr1 write Set_AddrAddr1;
    property AddrAddr2: WideString read Get_AddrAddr2 write Set_AddrAddr2;
    property AddrCity: WideString read Get_AddrCity write Set_AddrCity;
    property AddrCountry: WideString read Get_AddrCountry write Set_AddrCountry;
    property AddressPresent: WordBool read Get_AddressPresent write Set_AddressPresent;
    property AddrName: WideString read Get_AddrName write Set_AddrName;
    property AddrState: WideString read Get_AddrState write Set_AddrState;
    property AddrZipCode: WideString read Get_AddrZipCode write Set_AddrZipCode;
    property Description: WideString read Get_Description write Set_Description;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailFreightFlag[Index: Smallint]: WordBool read Get_DetailFreightFlag write Set_DetailFreightFlag;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTaxCode[Index: Smallint]: Smallint read Get_DetailTaxCode write Set_DetailTaxCode;
    property DetailUMGUID[Index: Smallint]: WideString read Get_DetailUMGUID write Set_DetailUMGUID;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnused1[Index: Smallint]: Smallint read Get_DetailUnused1 write Set_DetailUnused1;
    property DetailUnused2[Index1: Smallint; Index2: Smallint]: Byte read Get_DetailUnused2 write Set_DetailUnused2;
    property DetailUnused3[Index: Smallint]: Smallint read Get_DetailUnused3 write Set_DetailUnused3;
    property DetailUnused4[Index: Smallint]: Byte read Get_DetailUnused4 write Set_DetailUnused4;
    property DetailUnused5[Index: Smallint]: Byte read Get_DetailUnused5 write Set_DetailUnused5;
    property DetailUnused6[Index1: Smallint; Index2: Smallint]: Byte read Get_DetailUnused6 write Set_DetailUnused6;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property ID: WideString read Get_ID write Set_ID;
    property Index: Integer read Get_Index write Set_Index;
    property Memo: WideString read Get_Memo write Set_Memo;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property RecordType: Smallint read Get_RecordType write Set_RecordType;
    property Reference: WideString read Get_Reference write Set_Reference;
    property ReverseTransaction: WordBool read Get_ReverseTransaction write Set_ReverseTransaction;
    property ShipToIndex: Smallint read Get_ShipToIndex write Set_ShipToIndex;
    property TotalAmount: Double read Get_TotalAmount write Set_TotalAmount;
    property TransactionID: WideString read Get_TransactionID write Set_TransactionID;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unused3[Index: Smallint]: Byte read Get_Unused3 write Set_Unused3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unused5: Byte read Get_Unused5 write Set_Unused5;
  end;

// *********************************************************************//
// DispIntf:  _MemorizedTransactionsDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A9B269CE-B5C4-47FF-88E0-FB7D80C3345C}
// *********************************************************************//
  _MemorizedTransactionsDisp = dispinterface
    ['{A9B269CE-B5C4-47FF-88E0-FB7D80C3345C}']
    function ClearRecord: Smallint; dispid 1610809388;
    function CloseFile: Smallint; dispid 1610809389;
    function OpenFile: Smallint; dispid 1610809390;
    function Delete: Smallint; dispid 1610809391;
    function Insert: Smallint; dispid 1610809392;
    function RecordCount: Integer; dispid 1610809394;
    function StepFirst: Smallint; dispid 1610809395;
    function StepLast: Smallint; dispid 1610809396;
    function StepNext: Smallint; dispid 1610809397;
    function StepPrevious: Smallint; dispid 1610809398;
    function Update: Smallint; dispid 1610809399;
    property Account: WideString dispid 1745027115;
    property AddrAddr1: WideString dispid 1745027114;
    property AddrAddr2: WideString dispid 1745027113;
    property AddrCity: WideString dispid 1745027112;
    property AddrCountry: WideString dispid 1745027111;
    property AddressPresent: WordBool dispid 1745027110;
    property AddrName: WideString dispid 1745027109;
    property AddrState: WideString dispid 1745027108;
    property AddrZipCode: WideString dispid 1745027107;
    property Description: WideString dispid 1745027106;
    property DetailAmount[Index: Smallint]: Double dispid 1745027105;
    property DetailCostIndex[Index: Smallint]: Integer dispid 1745027104;
    property DetailDescription[Index: Smallint]: WideString dispid 1745027103;
    property DetailFreightFlag[Index: Smallint]: WordBool dispid 1745027102;
    property DetailGLAccount[Index: Smallint]: WideString dispid 1745027101;
    property DetailItemIndex[Index: Smallint]: Integer dispid 1745027100;
    property DetailJobIndex[Index: Smallint]: Integer dispid 1745027099;
    property DetailPhaseIndex[Index: Smallint]: Integer dispid 1745027098;
    property DetailQuantity[Index: Smallint]: Double dispid 1745027097;
    property DetailStockingQuantity[Index: Smallint]: Double dispid 1745027130;
    property DetailStockingUnitPrice[Index: Smallint]: Double dispid 1745027129;
    property DetailTaxCode[Index: Smallint]: Smallint dispid 1745027096;
    property DetailUMGUID[Index: Smallint]: WideString dispid 1745027128;
    property DetailUnitPrice[Index: Smallint]: Double dispid 1745027095;
    property DetailUnused1[Index: Smallint]: Smallint dispid 1745027094;
    property DetailUnused2[Index1: Smallint; Index2: Smallint]: Byte dispid 1745027093;
    property DetailUnused3[Index: Smallint]: Smallint dispid 1745027092;
    property DetailUnused4[Index: Smallint]: Byte dispid 1745027091;
    property DetailUnused5[Index: Smallint]: Byte dispid 1745027090;
    property DetailUnused6[Index1: Smallint; Index2: Smallint]: Byte dispid 1745027089;
    property DropShip: WordBool dispid 1745027088;
    property DropShipCustomerIndex: Integer dispid 1745027087;
    property ID: WideString dispid 1745027086;
    property Index: Integer dispid 1745027085;
    property Memo: WideString dispid 1745027084;
    property NDistributions: Smallint dispid 1745027083;
    property RecordType: Smallint dispid 1745027082;
    property Reference: WideString dispid 1745027081;
    property ReverseTransaction: WordBool dispid 1745027080;
    property ShipToIndex: Smallint dispid 1745027079;
    property TotalAmount: Double dispid 1745027078;
    property TransactionID: WideString dispid 1745027077;
    property Unknown1: Smallint dispid 1745027076;
    property Unknown2: Smallint dispid 1745027075;
    property Unused3[Index: Smallint]: Byte dispid 1745027074;
    property Unused4: Smallint dispid 1745027073;
    property Unused5: Byte dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _TaxTable
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C30F17E2-96ED-4431-B27F-5435B8F51BDC}
// *********************************************************************//
  _TaxTable = interface(IDispatch)
    ['{C30F17E2-96ED-4431-B27F-5435B8F51BDC}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(const ID: WideString): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Appears: WordBool; safecall;
    procedure Set_Appears(Param1: WordBool); safecall;
    function Get_CodeID: WideString; safecall;
    procedure Set_CodeID(const Param1: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_FilingStatus: Smallint; safecall;
    procedure Set_FilingStatus(Param1: Smallint); safecall;
    function Get_Formula: WideString; safecall;
    procedure Set_Formula(const Param1: WideString); safecall;
    function Get_Government: Smallint; safecall;
    procedure Set_Government(Param1: Smallint); safecall;
    function Get_GrossMoreThan(Index: Smallint): Double; safecall;
    procedure Set_GrossMoreThan(Index: Smallint; Param2: Double); safecall;
    function Get_LocalName: WideString; safecall;
    procedure Set_LocalName(const Param1: WideString); safecall;
    function Get_Plus(Index: Smallint): Double; safecall;
    procedure Set_Plus(Index: Smallint; Param2: Double); safecall;
    function Get_StateName: WideString; safecall;
    procedure Set_StateName(const Param1: WideString); safecall;
    function Get_V9Flag(Index: Smallint): Byte; safecall;
    procedure Set_V9Flag(Index: Smallint; Param2: Byte); safecall;
    function Get_Withhold(Index: Smallint): Double; safecall;
    procedure Set_Withhold(Index: Smallint; Param2: Double); safecall;
    property Appears: WordBool read Get_Appears write Set_Appears;
    property CodeID: WideString read Get_CodeID write Set_CodeID;
    property Description: WideString read Get_Description write Set_Description;
    property FilingStatus: Smallint read Get_FilingStatus write Set_FilingStatus;
    property Formula: WideString read Get_Formula write Set_Formula;
    property Government: Smallint read Get_Government write Set_Government;
    property GrossMoreThan[Index: Smallint]: Double read Get_GrossMoreThan write Set_GrossMoreThan;
    property LocalName: WideString read Get_LocalName write Set_LocalName;
    property Plus[Index: Smallint]: Double read Get_Plus write Set_Plus;
    property StateName: WideString read Get_StateName write Set_StateName;
    property V9Flag[Index: Smallint]: Byte read Get_V9Flag write Set_V9Flag;
    property Withhold[Index: Smallint]: Double read Get_Withhold write Set_Withhold;
  end;

// *********************************************************************//
// DispIntf:  _TaxTableDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C30F17E2-96ED-4431-B27F-5435B8F51BDC}
// *********************************************************************//
  _TaxTableDisp = dispinterface
    ['{C30F17E2-96ED-4431-B27F-5435B8F51BDC}']
    function CloseFile: Smallint; dispid 1610809356;
    function OpenFile: Smallint; dispid 1610809357;
    function Delete: Smallint; dispid 1610809358;
    function GetEqual(const ID: WideString): Smallint; dispid 1610809359;
    function Insert: Smallint; dispid 1610809360;
    function RecordCount: Integer; dispid 1610809362;
    function StepFirst: Smallint; dispid 1610809363;
    function StepLast: Smallint; dispid 1610809364;
    function StepNext: Smallint; dispid 1610809365;
    function StepPrevious: Smallint; dispid 1610809366;
    function Update: Smallint; dispid 1610809367;
    property Appears: WordBool dispid 1745027083;
    property CodeID: WideString dispid 1745027082;
    property Description: WideString dispid 1745027081;
    property FilingStatus: Smallint dispid 1745027080;
    property Formula: WideString dispid 1745027079;
    property Government: Smallint dispid 1745027078;
    property GrossMoreThan[Index: Smallint]: Double dispid 1745027077;
    property LocalName: WideString dispid 1745027076;
    property Plus[Index: Smallint]: Double dispid 1745027075;
    property StateName: WideString dispid 1745027074;
    property V9Flag[Index: Smallint]: Byte dispid 1745027073;
    property Withhold[Index: Smallint]: Double dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _Ticket
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F3A0D161-AC06-4746-9571-DA53CC94D4D6}
// *********************************************************************//
  _Ticket = interface(IDispatch)
    ['{F3A0D161-AC06-4746-9571-DA53CC94D4D6}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(const TicketNumber: WideString): Smallint; safecall;
    function GetFirst: Smallint; safecall;
    function GetGreaterThan(const TicketNumber: WideString): Smallint; safecall;
    function GetGreaterThanOrEqual(const TicketNumber: WideString): Smallint; safecall;
    function GetLast: Smallint; safecall;
    function GetLessThan(const TicketNumber: WideString): Smallint; safecall;
    function GetLessThanOrEqual(const TicketNumber: WideString): Smallint; safecall;
    function GetNext: Smallint; safecall;
    function GetPrevious: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_ARUsed: WordBool; safecall;
    procedure Set_ARUsed(Param1: WordBool); safecall;
    function Get_BillingAmount: Double; safecall;
    procedure Set_BillingAmount(Param1: Double); safecall;
    function Get_BillingRate: Double; safecall;
    procedure Set_BillingRate(Param1: Double); safecall;
    function Get_BillingStatus: Smallint; safecall;
    procedure Set_BillingStatus(Param1: Smallint); safecall;
    function Get_BillingType: Smallint; safecall;
    procedure Set_BillingType(Param1: Smallint); safecall;
    function Get_BillingUnit: Double; safecall;
    procedure Set_BillingUnit(Param1: Double); safecall;
    function Get_BreakHours: Smallint; safecall;
    procedure Set_BreakHours(Param1: Smallint); safecall;
    function Get_BreakMinutes: Smallint; safecall;
    procedure Set_BreakMinutes(Param1: Smallint); safecall;
    function Get_BreakSeconds: Smallint; safecall;
    procedure Set_BreakSeconds(Param1: Smallint); safecall;
    function Get_CompletedForID: WideString; safecall;
    procedure Set_CompletedForID(const Param1: WideString); safecall;
    function Get_CostID: WideString; safecall;
    procedure Set_CostID(const Param1: WideString); safecall;
    function Get_CustJobAdmin: Smallint; safecall;
    procedure Set_CustJobAdmin(Param1: Smallint); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_DurationHours: Smallint; safecall;
    procedure Set_DurationHours(Param1: Smallint); safecall;
    function Get_DurationMinutes: Smallint; safecall;
    procedure Set_DurationMinutes(Param1: Smallint); safecall;
    function Get_DurationSeconds: Smallint; safecall;
    procedure Set_DurationSeconds(Param1: Smallint); safecall;
    function Get_ItemClass: Smallint; safecall;
    procedure Set_ItemClass(Param1: Smallint); safecall;
    function Get_ItemIndex: Integer; safecall;
    procedure Set_ItemIndex(Param1: Integer); safecall;
    function Get_LastTicketNumber: WideString; safecall;
    function Get_Memo: WideString; safecall;
    procedure Set_Memo(const Param1: WideString); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_PayLevel: Smallint; safecall;
    procedure Set_PayLevel(Param1: Smallint); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_PhaseID: WideString; safecall;
    procedure Set_PhaseID(const Param1: WideString); safecall;
    function Get_PRUsed: WordBool; safecall;
    procedure Set_PRUsed(Param1: WordBool); safecall;
    function Get_RecordedByID: WideString; safecall;
    procedure Set_RecordedByID(const Param1: WideString); safecall;
    function Get_Reimburse: WordBool; safecall;
    procedure Set_Reimburse(Param1: WordBool); safecall;
    function Get_StartHours: Smallint; safecall;
    procedure Set_StartHours(Param1: Smallint); safecall;
    function Get_StartMinutes: Smallint; safecall;
    procedure Set_StartMinutes(Param1: Smallint); safecall;
    function Get_StartSeconds: Smallint; safecall;
    procedure Set_StartSeconds(Param1: Smallint); safecall;
    function Get_StartPM: Smallint; safecall;
    procedure Set_StartPM(Param1: Smallint); safecall;
    function Get_StopHours: Smallint; safecall;
    procedure Set_StopHours(Param1: Smallint); safecall;
    function Get_StopMinutes: Smallint; safecall;
    procedure Set_StopMinutes(Param1: Smallint); safecall;
    function Get_StopSeconds: Smallint; safecall;
    procedure Set_StopSeconds(Param1: Smallint); safecall;
    function Get_StopPM: Smallint; safecall;
    procedure Set_StopPM(Param1: Smallint); safecall;
    function Get_TicketDate: OleVariant; safecall;
    procedure Set_TicketDate(Param1: OleVariant); safecall;
    function Get_TicketNumber: WideString; safecall;
    procedure Set_TicketNumber(const Param1: WideString); safecall;
    function Get_TimedDuration: WordBool; safecall;
    procedure Set_TimedDuration(Param1: WordBool); safecall;
    function Get_Unused1(Index: Smallint): Byte; safecall;
    procedure Set_Unused1(Index: Smallint; Param2: Byte); safecall;
    function Get_Unused2: Smallint; safecall;
    procedure Set_Unused2(Param1: Smallint); safecall;
    function Get_Unused3: Smallint; safecall;
    procedure Set_Unused3(Param1: Smallint); safecall;
    function Get_Unused4: Smallint; safecall;
    procedure Set_Unused4(Param1: Smallint); safecall;
    function Get_Unused5: Smallint; safecall;
    procedure Set_Unused5(Param1: Smallint); safecall;
    function Get_Unknown6: Byte; safecall;
    procedure Set_Unknown6(Param1: Byte); safecall;
    function Get_Unused7: Smallint; safecall;
    procedure Set_Unused7(Param1: Smallint); safecall;
    function Get_VendorFlag: WordBool; safecall;
    procedure Set_VendorFlag(Param1: WordBool); safecall;
    property ARUsed: WordBool read Get_ARUsed write Set_ARUsed;
    property BillingAmount: Double read Get_BillingAmount write Set_BillingAmount;
    property BillingRate: Double read Get_BillingRate write Set_BillingRate;
    property BillingStatus: Smallint read Get_BillingStatus write Set_BillingStatus;
    property BillingType: Smallint read Get_BillingType write Set_BillingType;
    property BillingUnit: Double read Get_BillingUnit write Set_BillingUnit;
    property BreakHours: Smallint read Get_BreakHours write Set_BreakHours;
    property BreakMinutes: Smallint read Get_BreakMinutes write Set_BreakMinutes;
    property BreakSeconds: Smallint read Get_BreakSeconds write Set_BreakSeconds;
    property CompletedForID: WideString read Get_CompletedForID write Set_CompletedForID;
    property CostID: WideString read Get_CostID write Set_CostID;
    property CustJobAdmin: Smallint read Get_CustJobAdmin write Set_CustJobAdmin;
    property Description: WideString read Get_Description write Set_Description;
    property DurationHours: Smallint read Get_DurationHours write Set_DurationHours;
    property DurationMinutes: Smallint read Get_DurationMinutes write Set_DurationMinutes;
    property DurationSeconds: Smallint read Get_DurationSeconds write Set_DurationSeconds;
    property ItemClass: Smallint read Get_ItemClass write Set_ItemClass;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property LastTicketNumber: WideString read Get_LastTicketNumber;
    property Memo: WideString read Get_Memo write Set_Memo;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property PayLevel: Smallint read Get_PayLevel write Set_PayLevel;
    property Period: Smallint read Get_Period write Set_Period;
    property PhaseID: WideString read Get_PhaseID write Set_PhaseID;
    property PRUsed: WordBool read Get_PRUsed write Set_PRUsed;
    property RecordedByID: WideString read Get_RecordedByID write Set_RecordedByID;
    property Reimburse: WordBool read Get_Reimburse write Set_Reimburse;
    property StartHours: Smallint read Get_StartHours write Set_StartHours;
    property StartMinutes: Smallint read Get_StartMinutes write Set_StartMinutes;
    property StartSeconds: Smallint read Get_StartSeconds write Set_StartSeconds;
    property StartPM: Smallint read Get_StartPM write Set_StartPM;
    property StopHours: Smallint read Get_StopHours write Set_StopHours;
    property StopMinutes: Smallint read Get_StopMinutes write Set_StopMinutes;
    property StopSeconds: Smallint read Get_StopSeconds write Set_StopSeconds;
    property StopPM: Smallint read Get_StopPM write Set_StopPM;
    property TicketDate: OleVariant read Get_TicketDate write Set_TicketDate;
    property TicketNumber: WideString read Get_TicketNumber write Set_TicketNumber;
    property TimedDuration: WordBool read Get_TimedDuration write Set_TimedDuration;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property Unused2: Smallint read Get_Unused2 write Set_Unused2;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unused5: Smallint read Get_Unused5 write Set_Unused5;
    property Unknown6: Byte read Get_Unknown6 write Set_Unknown6;
    property Unused7: Smallint read Get_Unused7 write Set_Unused7;
    property VendorFlag: WordBool read Get_VendorFlag write Set_VendorFlag;
  end;

// *********************************************************************//
// DispIntf:  _TicketDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F3A0D161-AC06-4746-9571-DA53CC94D4D6}
// *********************************************************************//
  _TicketDisp = dispinterface
    ['{F3A0D161-AC06-4746-9571-DA53CC94D4D6}']
    function CloseFile: Smallint; dispid 1610809390;
    function OpenFile: Smallint; dispid 1610809391;
    function Delete: Smallint; dispid 1610809392;
    function GetEqual(const TicketNumber: WideString): Smallint; dispid 1610809393;
    function GetFirst: Smallint; dispid 1610809394;
    function GetGreaterThan(const TicketNumber: WideString): Smallint; dispid 1610809395;
    function GetGreaterThanOrEqual(const TicketNumber: WideString): Smallint; dispid 1610809396;
    function GetLast: Smallint; dispid 1610809397;
    function GetLessThan(const TicketNumber: WideString): Smallint; dispid 1610809398;
    function GetLessThanOrEqual(const TicketNumber: WideString): Smallint; dispid 1610809399;
    function GetNext: Smallint; dispid 1610809400;
    function GetPrevious: Smallint; dispid 1610809401;
    function Insert: Smallint; dispid 1610809402;
    function RecordCount: Integer; dispid 1610809404;
    function StepFirst: Smallint; dispid 1610809405;
    function StepLast: Smallint; dispid 1610809406;
    function StepNext: Smallint; dispid 1610809407;
    function StepPrevious: Smallint; dispid 1610809408;
    function Update: Smallint; dispid 1610809409;
    property ARUsed: WordBool dispid 1745027117;
    property BillingAmount: Double dispid 1745027116;
    property BillingRate: Double dispid 1745027115;
    property BillingStatus: Smallint dispid 1745027114;
    property BillingType: Smallint dispid 1745027113;
    property BillingUnit: Double dispid 1745027112;
    property BreakHours: Smallint dispid 1745027111;
    property BreakMinutes: Smallint dispid 1745027110;
    property BreakSeconds: Smallint dispid 1745027109;
    property CompletedForID: WideString dispid 1745027108;
    property CostID: WideString dispid 1745027107;
    property CustJobAdmin: Smallint dispid 1745027106;
    property Description: WideString dispid 1745027105;
    property DurationHours: Smallint dispid 1745027104;
    property DurationMinutes: Smallint dispid 1745027103;
    property DurationSeconds: Smallint dispid 1745027102;
    property ItemClass: Smallint dispid 1745027101;
    property ItemIndex: Integer dispid 1745027100;
    property LastTicketNumber: WideString readonly dispid 1745027099;
    property Memo: WideString dispid 1745027098;
    property NRecord: Integer dispid 1745027097;
    property PayLevel: Smallint dispid 1745027096;
    property Period: Smallint dispid 1745027095;
    property PhaseID: WideString dispid 1745027094;
    property PRUsed: WordBool dispid 1745027093;
    property RecordedByID: WideString dispid 1745027092;
    property Reimburse: WordBool dispid 1745027091;
    property StartHours: Smallint dispid 1745027090;
    property StartMinutes: Smallint dispid 1745027089;
    property StartSeconds: Smallint dispid 1745027088;
    property StartPM: Smallint dispid 1745027087;
    property StopHours: Smallint dispid 1745027086;
    property StopMinutes: Smallint dispid 1745027085;
    property StopSeconds: Smallint dispid 1745027084;
    property StopPM: Smallint dispid 1745027083;
    property TicketDate: OleVariant dispid 1745027082;
    property TicketNumber: WideString dispid 1745027081;
    property TimedDuration: WordBool dispid 1745027080;
    property Unused1[Index: Smallint]: Byte dispid 1745027079;
    property Unused2: Smallint dispid 1745027078;
    property Unused3: Smallint dispid 1745027077;
    property Unused4: Smallint dispid 1745027076;
    property Unused5: Smallint dispid 1745027075;
    property Unknown6: Byte dispid 1745027074;
    property Unused7: Smallint dispid 1745027073;
    property VendorFlag: WordBool dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _User
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {589B7A79-192C-4B3C-877F-45BE473C4EC6}
// *********************************************************************//
  _User = interface(IDispatch)
    ['{589B7A79-192C-4B3C-877F-45BE473C4EC6}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(const ID: WideString): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AccessToMaintainUsers: WordBool; safecall;
    procedure Set_AccessToMaintainUsers(Param1: WordBool); safecall;
    function Get_CreditCardAccess: Smallint; safecall;
    procedure Set_CreditCardAccess(Param1: Smallint); safecall;
    function Get_CrystalAccess: Smallint; safecall;
    procedure Set_CrystalAccess(Param1: Smallint); safecall;
    function Get_Inactive: WordBool; safecall;
    procedure Set_Inactive(Param1: WordBool); safecall;
    function Get_Password: WideString; safecall;
    procedure Set_Password(const Param1: WideString); safecall;
    function Get_GeneralLedger_Maint_Budgets: Smallint; safecall;
    procedure Set_GeneralLedger_Maint_Budgets(Param1: Smallint); safecall;
    function Get_GeneralLedger_Maint_ChartOfAccounts: Smallint; safecall;
    procedure Set_GeneralLedger_Maint_ChartOfAccounts(Param1: Smallint); safecall;
    function Get_GeneralLedger_Maint_ChartOfAccountsBB: Smallint; safecall;
    procedure Set_GeneralLedger_Maint_ChartOfAccountsBB(Param1: Smallint); safecall;
    function Get_GeneralLedger_Reports_AccountReconcil: Smallint; safecall;
    procedure Set_GeneralLedger_Reports_AccountReconcil(Param1: Smallint); safecall;
    function Get_GeneralLedger_Reports_FinancialStatement: Smallint; safecall;
    procedure Set_GeneralLedger_Reports_FinancialStatement(Param1: Smallint); safecall;
    function Get_GeneralLedger_Reports_MasterLists: Smallint; safecall;
    procedure Set_GeneralLedger_Reports_MasterLists(Param1: Smallint); safecall;
    function Get_GeneralLedger_Reports_TransactionLists: Smallint; safecall;
    procedure Set_GeneralLedger_Reports_TransactionLists(Param1: Smallint); safecall;
    function Get_GeneralLedger_Tasks_GeneralJournal: Smallint; safecall;
    procedure Set_GeneralLedger_Tasks_GeneralJournal(Param1: Smallint); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_Inventory_Maint_InventoryItems: Smallint; safecall;
    procedure Set_Inventory_Maint_InventoryItems(Param1: Smallint); safecall;
    function Get_Inventory_Maint_InventoryItemsBB: Smallint; safecall;
    procedure Set_Inventory_Maint_InventoryItemsBB(Param1: Smallint); safecall;
    function Get_Inventory_Maint_MultipleItemPrices: Smallint; safecall;
    procedure Set_Inventory_Maint_MultipleItemPrices(Param1: Smallint); safecall;
    function Get_Inventory_Maint_Revisions: Smallint; safecall;
    procedure Set_Inventory_Maint_Revisions(Param1: Smallint); safecall;
    function Get_Inventory_Maint_UnitMeasures: Smallint; safecall;
    procedure Set_Inventory_Maint_UnitMeasures(Param1: Smallint); safecall;
    function Get_Inventory_Reports_Forms: Smallint; safecall;
    procedure Set_Inventory_Reports_Forms(Param1: Smallint); safecall;
    function Get_Inventory_Reports_MasterLists: Smallint; safecall;
    procedure Set_Inventory_Reports_MasterLists(Param1: Smallint); safecall;
    function Get_Inventory_Reports_OtherReports: Smallint; safecall;
    procedure Set_Inventory_Reports_OtherReports(Param1: Smallint); safecall;
    function Get_Inventory_Reports_TransactionLists: Smallint; safecall;
    procedure Set_Inventory_Reports_TransactionLists(Param1: Smallint); safecall;
    function Get_Inventory_Tasks_Inventory: Smallint; safecall;
    procedure Set_Inventory_Tasks_Inventory(Param1: Smallint); safecall;
    function Get_Inventory_Tasks_WorkTickets: Smallint; safecall;
    procedure Set_Inventory_Tasks_WorkTickets(Param1: Smallint); safecall;
    function Get_Payroll_Maint_EmployeesSalesReps: Smallint; safecall;
    procedure Set_Payroll_Maint_EmployeesSalesReps(Param1: Smallint); safecall;
    function Get_Payroll_Maint_EmployeesSalesRepsBB: Smallint; safecall;
    procedure Set_Payroll_Maint_EmployeesSalesRepsBB(Param1: Smallint); safecall;
    function Get_Payroll_Maint_PayrollTaxTables: Smallint; safecall;
    procedure Set_Payroll_Maint_PayrollTaxTables(Param1: Smallint); safecall;
    function Get_Payroll_Reports_Forms: Smallint; safecall;
    procedure Set_Payroll_Reports_Forms(Param1: Smallint); safecall;
    function Get_Payroll_Reports_MasterLists: Smallint; safecall;
    procedure Set_Payroll_Reports_MasterLists(Param1: Smallint); safecall;
    function Get_Payroll_Reports_MailMerge: Smallint; safecall;
    procedure Set_Payroll_Reports_MailMerge(Param1: Smallint); safecall;
    function Get_Payroll_Reports_OtherReports: Smallint; safecall;
    procedure Set_Payroll_Reports_OtherReports(Param1: Smallint); safecall;
    function Get_Payroll_Reports_TransactionLists: Smallint; safecall;
    procedure Set_Payroll_Reports_TransactionLists(Param1: Smallint); safecall;
    function Get_Payroll_Tasks_PayrollEntry: Smallint; safecall;
    procedure Set_Payroll_Tasks_PayrollEntry(Param1: Smallint); safecall;
    function Get_Payroll_Tasks_VoidPRChecks: Smallint; safecall;
    procedure Set_Payroll_Tasks_VoidPRChecks(Param1: Smallint); safecall;
    function Get_Purchases_Maint_Vendors: Smallint; safecall;
    procedure Set_Purchases_Maint_Vendors(Param1: Smallint); safecall;
    function Get_Purchases_Maint_VendorsBB: Smallint; safecall;
    procedure Set_Purchases_Maint_VendorsBB(Param1: Smallint); safecall;
    function Get_Purchases_Reports_Forms: Smallint; safecall;
    procedure Set_Purchases_Reports_Forms(Param1: Smallint); safecall;
    function Get_Purchases_Reports_MasterLists: Smallint; safecall;
    procedure Set_Purchases_Reports_MasterLists(Param1: Smallint); safecall;
    function Get_Purchases_Reports_MailMerge: Smallint; safecall;
    procedure Set_Purchases_Reports_MailMerge(Param1: Smallint); safecall;
    function Get_Purchases_Reports_OtherReports: Smallint; safecall;
    procedure Set_Purchases_Reports_OtherReports(Param1: Smallint); safecall;
    function Get_Purchases_Reports_TransactionLists: Smallint; safecall;
    procedure Set_Purchases_Reports_TransactionLists(Param1: Smallint); safecall;
    function Get_Purchases_Tasks_Payments: Smallint; safecall;
    procedure Set_Purchases_Tasks_Payments(Param1: Smallint); safecall;
    function Get_Purchases_Tasks_PurchaseOrders: Smallint; safecall;
    procedure Set_Purchases_Tasks_PurchaseOrders(Param1: Smallint); safecall;
    function Get_Purchases_Tasks_PurchasesInventory: Smallint; safecall;
    procedure Set_Purchases_Tasks_PurchasesInventory(Param1: Smallint); safecall;
    function Get_Purchases_Tasks_VendorCreditMemos: Smallint; safecall;
    procedure Set_Purchases_Tasks_VendorCreditMemos(Param1: Smallint); safecall;
    function Get_Purchases_Tasks_VoidChecks: Smallint; safecall;
    procedure Set_Purchases_Tasks_VoidChecks(Param1: Smallint); safecall;
    function Get_Sales_Maint_CustomerPaymentDefaults: Smallint; safecall;
    procedure Set_Sales_Maint_CustomerPaymentDefaults(Param1: Smallint); safecall;
    function Get_Sales_Maint_Customers: Smallint; safecall;
    procedure Set_Sales_Maint_Customers(Param1: Smallint); safecall;
    function Get_Sales_Maint_CustomersProspectsBB: Smallint; safecall;
    procedure Set_Sales_Maint_CustomersProspectsBB(Param1: Smallint); safecall;
    function Get_Sales_Reports_Forms: Smallint; safecall;
    procedure Set_Sales_Reports_Forms(Param1: Smallint); safecall;
    function Get_Sales_Reports_MailMerge: Smallint; safecall;
    procedure Set_Sales_Reports_MailMerge(Param1: Smallint); safecall;
    function Get_Sales_Reports_MasterLists: Smallint; safecall;
    procedure Set_Sales_Reports_MasterLists(Param1: Smallint); safecall;
    function Get_Sales_Reports_OtherReports: Smallint; safecall;
    procedure Set_Sales_Reports_OtherReports(Param1: Smallint); safecall;
    function Get_Sales_Reports_TransactionLists: Smallint; safecall;
    procedure Set_Sales_Reports_TransactionLists(Param1: Smallint); safecall;
    function Get_Sales_Tasks_CreditMemos: Smallint; safecall;
    procedure Set_Sales_Tasks_CreditMemos(Param1: Smallint); safecall;
    function Get_Sales_Tasks_Quotes: Smallint; safecall;
    procedure Set_Sales_Tasks_Quotes(Param1: Smallint); safecall;
    function Get_Sales_Tasks_Receipts: Smallint; safecall;
    procedure Set_Sales_Tasks_Receipts(Param1: Smallint); safecall;
    function Get_Sales_Tasks_SalesInvoicing: Smallint; safecall;
    procedure Set_Sales_Tasks_SalesInvoicing(Param1: Smallint); safecall;
    function Get_Sales_Tasks_SalesOrders: Smallint; safecall;
    procedure Set_Sales_Tasks_SalesOrders(Param1: Smallint); safecall;
    function Get_Sales_Tasks_Shipment: Smallint; safecall;
    procedure Set_Sales_Tasks_Shipment(Param1: Smallint); safecall;
    function Get_Sales_Tasks_ShipmentRegistrationWizard: Smallint; safecall;
    procedure Set_Sales_Tasks_ShipmentRegistrationWizard(Param1: Smallint); safecall;
    function Get_System_Analysis_CashManager: Smallint; safecall;
    procedure Set_System_Analysis_CashManager(Param1: Smallint); safecall;
    function Get_System_Analysis_CollectionManager: Smallint; safecall;
    procedure Set_System_Analysis_CollectionManager(Param1: Smallint); safecall;
    function Get_System_Analysis_FinancialManager: Smallint; safecall;
    procedure Set_System_Analysis_FinancialManager(Param1: Smallint); safecall;
    function Get_System_Analysis_PaymentManager: Smallint; safecall;
    procedure Set_System_Analysis_PaymentManager(Param1: Smallint); safecall;
    function Get_System_File_ArchiveCompany: Smallint; safecall;
    procedure Set_System_File_ArchiveCompany(Param1: Smallint); safecall;
    function Get_System_File_Backup: Smallint; safecall;
    procedure Set_System_File_Backup(Param1: Smallint); safecall;
    function Get_System_File_ImportExport: Smallint; safecall;
    procedure Set_System_File_ImportExport(Param1: Smallint); safecall;
    function Get_System_File_IntegrityCheck: Smallint; safecall;
    procedure Set_System_File_IntegrityCheck(Param1: Smallint); safecall;
    function Get_System_File_NewCompany: Smallint; safecall;
    procedure Set_System_File_NewCompany(Param1: Smallint); safecall;
    function Get_System_File_OnlineBackup: Smallint; safecall;
    procedure Set_System_File_OnlineBackup(Param1: Smallint); safecall;
    function Get_System_File_ReconsolidateCompany: Smallint; safecall;
    procedure Set_System_File_ReconsolidateCompany(Param1: Smallint); safecall;
    function Get_System_File_Restore: Smallint; safecall;
    procedure Set_System_File_Restore(Param1: Smallint); safecall;
    function Get_System_Modem: Smallint; safecall;
    procedure Set_System_Modem(Param1: Smallint); safecall;
    function Get_System_Maint_CompanyInformation: Smallint; safecall;
    procedure Set_System_Maint_CompanyInformation(Param1: Smallint); safecall;
    function Get_System_Maint_ElectronicPayments: Smallint; safecall;
    procedure Set_System_Maint_ElectronicPayments(Param1: Smallint); safecall;
    function Get_System_Maint_Jobs: Smallint; safecall;
    procedure Set_System_Maint_Jobs(Param1: Smallint); safecall;
    function Get_System_Options_ActionItemsEventLog: Smallint; safecall;
    procedure Set_System_Options_ActionItemsEventLog(Param1: Smallint); safecall;
    function Get_System_Options_ChangeSystemDate: Smallint; safecall;
    procedure Set_System_Options_ChangeSystemDate(Param1: Smallint); safecall;
    function Get_System_Reports_AccountReconcil: Smallint; safecall;
    procedure Set_System_Reports_AccountReconcil(Param1: Smallint); safecall;
    function Get_System_Reports_AuditTrail: Smallint; safecall;
    procedure Set_System_Reports_AuditTrail(Param1: Smallint); safecall;
    function Get_System_Reports_ElectronicBillPayment: Smallint; safecall;
    procedure Set_System_Reports_ElectronicBillPayment(Param1: Smallint); safecall;
    function Get_System_Reports_Jobs: Smallint; safecall;
    procedure Set_System_Reports_Jobs(Param1: Smallint); safecall;
    function Get_System_Reports_ReportGroups: Smallint; safecall;
    procedure Set_System_Reports_ReportGroups(Param1: Smallint); safecall;
    function Get_System_Reports_TimeExpense: Smallint; safecall;
    procedure Set_System_Reports_TimeExpense(Param1: Smallint); safecall;
    function Get_System_Tasks_AccountReconciliation: Smallint; safecall;
    procedure Set_System_Tasks_AccountReconciliation(Param1: Smallint); safecall;
    function Get_System_Tasks_ActionItems: Smallint; safecall;
    procedure Set_System_Tasks_ActionItems(Param1: Smallint); safecall;
    function Get_System_Tasks_ChangeAccountingPeriod: Smallint; safecall;
    procedure Set_System_Tasks_ChangeAccountingPeriod(Param1: Smallint); safecall;
    function Get_System_Tasks_CloseFiscalYear: Smallint; safecall;
    procedure Set_System_Tasks_CloseFiscalYear(Param1: Smallint); safecall;
    function Get_System_Tasks_ClosePayrollYear: Smallint; safecall;
    procedure Set_System_Tasks_ClosePayrollYear(Param1: Smallint); safecall;
    function Get_System_Tasks_ElectronicBillPayment: Smallint; safecall;
    procedure Set_System_Tasks_ElectronicBillPayment(Param1: Smallint); safecall;
    function Get_System_Tasks_FindTransactions: Smallint; safecall;
    procedure Set_System_Tasks_FindTransactions(Param1: Smallint); safecall;
    function Get_System_Tasks_LinkToOtherApps: Smallint; safecall;
    procedure Set_System_Tasks_LinkToOtherApps(Param1: Smallint); safecall;
    function Get_System_Tasks_Post: Smallint; safecall;
    procedure Set_System_Tasks_Post(Param1: Smallint); safecall;
    function Get_System_Tasks_Purge: Smallint; safecall;
    procedure Set_System_Tasks_Purge(Param1: Smallint); safecall;
    function Get_System_Tasks_TimeAndExpenseTickets: Smallint; safecall;
    procedure Set_System_Tasks_TimeAndExpenseTickets(Param1: Smallint); safecall;
    function Get_System_Tasks_TransactionsInPriorPeriods: Smallint; safecall;
    procedure Set_System_Tasks_TransactionsInPriorPeriods(Param1: Smallint); safecall;
    function Get_System_Tasks_Unpost: Smallint; safecall;
    procedure Set_System_Tasks_Unpost(Param1: Smallint); safecall;
    function Get_Unknown1: Smallint; safecall;
    procedure Set_Unknown1(Param1: Smallint); safecall;
    function Get_Unknown2: Smallint; safecall;
    procedure Set_Unknown2(Param1: Smallint); safecall;
    function Get_Unknown3(Index: Smallint): Byte; safecall;
    procedure Set_Unknown3(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown4: Smallint; safecall;
    procedure Set_Unknown4(Param1: Smallint); safecall;
    function Get_UserName: WideString; safecall;
    procedure Set_UserName(const Param1: WideString); safecall;
    property AccessToMaintainUsers: WordBool read Get_AccessToMaintainUsers write Set_AccessToMaintainUsers;
    property CreditCardAccess: Smallint read Get_CreditCardAccess write Set_CreditCardAccess;
    property CrystalAccess: Smallint read Get_CrystalAccess write Set_CrystalAccess;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Password: WideString read Get_Password write Set_Password;
    property GeneralLedger_Maint_Budgets: Smallint read Get_GeneralLedger_Maint_Budgets write Set_GeneralLedger_Maint_Budgets;
    property GeneralLedger_Maint_ChartOfAccounts: Smallint read Get_GeneralLedger_Maint_ChartOfAccounts write Set_GeneralLedger_Maint_ChartOfAccounts;
    property GeneralLedger_Maint_ChartOfAccountsBB: Smallint read Get_GeneralLedger_Maint_ChartOfAccountsBB write Set_GeneralLedger_Maint_ChartOfAccountsBB;
    property GeneralLedger_Reports_AccountReconcil: Smallint read Get_GeneralLedger_Reports_AccountReconcil write Set_GeneralLedger_Reports_AccountReconcil;
    property GeneralLedger_Reports_FinancialStatement: Smallint read Get_GeneralLedger_Reports_FinancialStatement write Set_GeneralLedger_Reports_FinancialStatement;
    property GeneralLedger_Reports_MasterLists: Smallint read Get_GeneralLedger_Reports_MasterLists write Set_GeneralLedger_Reports_MasterLists;
    property GeneralLedger_Reports_TransactionLists: Smallint read Get_GeneralLedger_Reports_TransactionLists write Set_GeneralLedger_Reports_TransactionLists;
    property GeneralLedger_Tasks_GeneralJournal: Smallint read Get_GeneralLedger_Tasks_GeneralJournal write Set_GeneralLedger_Tasks_GeneralJournal;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inventory_Maint_InventoryItems: Smallint read Get_Inventory_Maint_InventoryItems write Set_Inventory_Maint_InventoryItems;
    property Inventory_Maint_InventoryItemsBB: Smallint read Get_Inventory_Maint_InventoryItemsBB write Set_Inventory_Maint_InventoryItemsBB;
    property Inventory_Maint_MultipleItemPrices: Smallint read Get_Inventory_Maint_MultipleItemPrices write Set_Inventory_Maint_MultipleItemPrices;
    property Inventory_Maint_Revisions: Smallint read Get_Inventory_Maint_Revisions write Set_Inventory_Maint_Revisions;
    property Inventory_Maint_UnitMeasures: Smallint read Get_Inventory_Maint_UnitMeasures write Set_Inventory_Maint_UnitMeasures;
    property Inventory_Reports_Forms: Smallint read Get_Inventory_Reports_Forms write Set_Inventory_Reports_Forms;
    property Inventory_Reports_MasterLists: Smallint read Get_Inventory_Reports_MasterLists write Set_Inventory_Reports_MasterLists;
    property Inventory_Reports_OtherReports: Smallint read Get_Inventory_Reports_OtherReports write Set_Inventory_Reports_OtherReports;
    property Inventory_Reports_TransactionLists: Smallint read Get_Inventory_Reports_TransactionLists write Set_Inventory_Reports_TransactionLists;
    property Inventory_Tasks_Inventory: Smallint read Get_Inventory_Tasks_Inventory write Set_Inventory_Tasks_Inventory;
    property Inventory_Tasks_WorkTickets: Smallint read Get_Inventory_Tasks_WorkTickets write Set_Inventory_Tasks_WorkTickets;
    property Payroll_Maint_EmployeesSalesReps: Smallint read Get_Payroll_Maint_EmployeesSalesReps write Set_Payroll_Maint_EmployeesSalesReps;
    property Payroll_Maint_EmployeesSalesRepsBB: Smallint read Get_Payroll_Maint_EmployeesSalesRepsBB write Set_Payroll_Maint_EmployeesSalesRepsBB;
    property Payroll_Maint_PayrollTaxTables: Smallint read Get_Payroll_Maint_PayrollTaxTables write Set_Payroll_Maint_PayrollTaxTables;
    property Payroll_Reports_Forms: Smallint read Get_Payroll_Reports_Forms write Set_Payroll_Reports_Forms;
    property Payroll_Reports_MasterLists: Smallint read Get_Payroll_Reports_MasterLists write Set_Payroll_Reports_MasterLists;
    property Payroll_Reports_MailMerge: Smallint read Get_Payroll_Reports_MailMerge write Set_Payroll_Reports_MailMerge;
    property Payroll_Reports_OtherReports: Smallint read Get_Payroll_Reports_OtherReports write Set_Payroll_Reports_OtherReports;
    property Payroll_Reports_TransactionLists: Smallint read Get_Payroll_Reports_TransactionLists write Set_Payroll_Reports_TransactionLists;
    property Payroll_Tasks_PayrollEntry: Smallint read Get_Payroll_Tasks_PayrollEntry write Set_Payroll_Tasks_PayrollEntry;
    property Payroll_Tasks_VoidPRChecks: Smallint read Get_Payroll_Tasks_VoidPRChecks write Set_Payroll_Tasks_VoidPRChecks;
    property Purchases_Maint_Vendors: Smallint read Get_Purchases_Maint_Vendors write Set_Purchases_Maint_Vendors;
    property Purchases_Maint_VendorsBB: Smallint read Get_Purchases_Maint_VendorsBB write Set_Purchases_Maint_VendorsBB;
    property Purchases_Reports_Forms: Smallint read Get_Purchases_Reports_Forms write Set_Purchases_Reports_Forms;
    property Purchases_Reports_MasterLists: Smallint read Get_Purchases_Reports_MasterLists write Set_Purchases_Reports_MasterLists;
    property Purchases_Reports_MailMerge: Smallint read Get_Purchases_Reports_MailMerge write Set_Purchases_Reports_MailMerge;
    property Purchases_Reports_OtherReports: Smallint read Get_Purchases_Reports_OtherReports write Set_Purchases_Reports_OtherReports;
    property Purchases_Reports_TransactionLists: Smallint read Get_Purchases_Reports_TransactionLists write Set_Purchases_Reports_TransactionLists;
    property Purchases_Tasks_Payments: Smallint read Get_Purchases_Tasks_Payments write Set_Purchases_Tasks_Payments;
    property Purchases_Tasks_PurchaseOrders: Smallint read Get_Purchases_Tasks_PurchaseOrders write Set_Purchases_Tasks_PurchaseOrders;
    property Purchases_Tasks_PurchasesInventory: Smallint read Get_Purchases_Tasks_PurchasesInventory write Set_Purchases_Tasks_PurchasesInventory;
    property Purchases_Tasks_VendorCreditMemos: Smallint read Get_Purchases_Tasks_VendorCreditMemos write Set_Purchases_Tasks_VendorCreditMemos;
    property Purchases_Tasks_VoidChecks: Smallint read Get_Purchases_Tasks_VoidChecks write Set_Purchases_Tasks_VoidChecks;
    property Sales_Maint_CustomerPaymentDefaults: Smallint read Get_Sales_Maint_CustomerPaymentDefaults write Set_Sales_Maint_CustomerPaymentDefaults;
    property Sales_Maint_Customers: Smallint read Get_Sales_Maint_Customers write Set_Sales_Maint_Customers;
    property Sales_Maint_CustomersProspectsBB: Smallint read Get_Sales_Maint_CustomersProspectsBB write Set_Sales_Maint_CustomersProspectsBB;
    property Sales_Reports_Forms: Smallint read Get_Sales_Reports_Forms write Set_Sales_Reports_Forms;
    property Sales_Reports_MailMerge: Smallint read Get_Sales_Reports_MailMerge write Set_Sales_Reports_MailMerge;
    property Sales_Reports_MasterLists: Smallint read Get_Sales_Reports_MasterLists write Set_Sales_Reports_MasterLists;
    property Sales_Reports_OtherReports: Smallint read Get_Sales_Reports_OtherReports write Set_Sales_Reports_OtherReports;
    property Sales_Reports_TransactionLists: Smallint read Get_Sales_Reports_TransactionLists write Set_Sales_Reports_TransactionLists;
    property Sales_Tasks_CreditMemos: Smallint read Get_Sales_Tasks_CreditMemos write Set_Sales_Tasks_CreditMemos;
    property Sales_Tasks_Quotes: Smallint read Get_Sales_Tasks_Quotes write Set_Sales_Tasks_Quotes;
    property Sales_Tasks_Receipts: Smallint read Get_Sales_Tasks_Receipts write Set_Sales_Tasks_Receipts;
    property Sales_Tasks_SalesInvoicing: Smallint read Get_Sales_Tasks_SalesInvoicing write Set_Sales_Tasks_SalesInvoicing;
    property Sales_Tasks_SalesOrders: Smallint read Get_Sales_Tasks_SalesOrders write Set_Sales_Tasks_SalesOrders;
    property Sales_Tasks_Shipment: Smallint read Get_Sales_Tasks_Shipment write Set_Sales_Tasks_Shipment;
    property Sales_Tasks_ShipmentRegistrationWizard: Smallint read Get_Sales_Tasks_ShipmentRegistrationWizard write Set_Sales_Tasks_ShipmentRegistrationWizard;
    property System_Analysis_CashManager: Smallint read Get_System_Analysis_CashManager write Set_System_Analysis_CashManager;
    property System_Analysis_CollectionManager: Smallint read Get_System_Analysis_CollectionManager write Set_System_Analysis_CollectionManager;
    property System_Analysis_FinancialManager: Smallint read Get_System_Analysis_FinancialManager write Set_System_Analysis_FinancialManager;
    property System_Analysis_PaymentManager: Smallint read Get_System_Analysis_PaymentManager write Set_System_Analysis_PaymentManager;
    property System_File_ArchiveCompany: Smallint read Get_System_File_ArchiveCompany write Set_System_File_ArchiveCompany;
    property System_File_Backup: Smallint read Get_System_File_Backup write Set_System_File_Backup;
    property System_File_ImportExport: Smallint read Get_System_File_ImportExport write Set_System_File_ImportExport;
    property System_File_IntegrityCheck: Smallint read Get_System_File_IntegrityCheck write Set_System_File_IntegrityCheck;
    property System_File_NewCompany: Smallint read Get_System_File_NewCompany write Set_System_File_NewCompany;
    property System_File_OnlineBackup: Smallint read Get_System_File_OnlineBackup write Set_System_File_OnlineBackup;
    property System_File_ReconsolidateCompany: Smallint read Get_System_File_ReconsolidateCompany write Set_System_File_ReconsolidateCompany;
    property System_File_Restore: Smallint read Get_System_File_Restore write Set_System_File_Restore;
    property System_Modem: Smallint read Get_System_Modem write Set_System_Modem;
    property System_Maint_CompanyInformation: Smallint read Get_System_Maint_CompanyInformation write Set_System_Maint_CompanyInformation;
    property System_Maint_ElectronicPayments: Smallint read Get_System_Maint_ElectronicPayments write Set_System_Maint_ElectronicPayments;
    property System_Maint_Jobs: Smallint read Get_System_Maint_Jobs write Set_System_Maint_Jobs;
    property System_Options_ActionItemsEventLog: Smallint read Get_System_Options_ActionItemsEventLog write Set_System_Options_ActionItemsEventLog;
    property System_Options_ChangeSystemDate: Smallint read Get_System_Options_ChangeSystemDate write Set_System_Options_ChangeSystemDate;
    property System_Reports_AccountReconcil: Smallint read Get_System_Reports_AccountReconcil write Set_System_Reports_AccountReconcil;
    property System_Reports_AuditTrail: Smallint read Get_System_Reports_AuditTrail write Set_System_Reports_AuditTrail;
    property System_Reports_ElectronicBillPayment: Smallint read Get_System_Reports_ElectronicBillPayment write Set_System_Reports_ElectronicBillPayment;
    property System_Reports_Jobs: Smallint read Get_System_Reports_Jobs write Set_System_Reports_Jobs;
    property System_Reports_ReportGroups: Smallint read Get_System_Reports_ReportGroups write Set_System_Reports_ReportGroups;
    property System_Reports_TimeExpense: Smallint read Get_System_Reports_TimeExpense write Set_System_Reports_TimeExpense;
    property System_Tasks_AccountReconciliation: Smallint read Get_System_Tasks_AccountReconciliation write Set_System_Tasks_AccountReconciliation;
    property System_Tasks_ActionItems: Smallint read Get_System_Tasks_ActionItems write Set_System_Tasks_ActionItems;
    property System_Tasks_ChangeAccountingPeriod: Smallint read Get_System_Tasks_ChangeAccountingPeriod write Set_System_Tasks_ChangeAccountingPeriod;
    property System_Tasks_CloseFiscalYear: Smallint read Get_System_Tasks_CloseFiscalYear write Set_System_Tasks_CloseFiscalYear;
    property System_Tasks_ClosePayrollYear: Smallint read Get_System_Tasks_ClosePayrollYear write Set_System_Tasks_ClosePayrollYear;
    property System_Tasks_ElectronicBillPayment: Smallint read Get_System_Tasks_ElectronicBillPayment write Set_System_Tasks_ElectronicBillPayment;
    property System_Tasks_FindTransactions: Smallint read Get_System_Tasks_FindTransactions write Set_System_Tasks_FindTransactions;
    property System_Tasks_LinkToOtherApps: Smallint read Get_System_Tasks_LinkToOtherApps write Set_System_Tasks_LinkToOtherApps;
    property System_Tasks_Post: Smallint read Get_System_Tasks_Post write Set_System_Tasks_Post;
    property System_Tasks_Purge: Smallint read Get_System_Tasks_Purge write Set_System_Tasks_Purge;
    property System_Tasks_TimeAndExpenseTickets: Smallint read Get_System_Tasks_TimeAndExpenseTickets write Set_System_Tasks_TimeAndExpenseTickets;
    property System_Tasks_TransactionsInPriorPeriods: Smallint read Get_System_Tasks_TransactionsInPriorPeriods write Set_System_Tasks_TransactionsInPriorPeriods;
    property System_Tasks_Unpost: Smallint read Get_System_Tasks_Unpost write Set_System_Tasks_Unpost;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unknown3[Index: Smallint]: Byte read Get_Unknown3 write Set_Unknown3;
    property Unknown4: Smallint read Get_Unknown4 write Set_Unknown4;
    property UserName: WideString read Get_UserName write Set_UserName;
  end;

// *********************************************************************//
// DispIntf:  _UserDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {589B7A79-192C-4B3C-877F-45BE473C4EC6}
// *********************************************************************//
  _UserDisp = dispinterface
    ['{589B7A79-192C-4B3C-877F-45BE473C4EC6}']
    function CloseFile: Smallint; dispid 1610809448;
    function OpenFile: Smallint; dispid 1610809449;
    function Delete: Smallint; dispid 1610809450;
    function GetEqual(const ID: WideString): Smallint; dispid 1610809451;
    function Insert: Smallint; dispid 1610809452;
    function RecordCount: Integer; dispid 1610809454;
    function StepFirst: Smallint; dispid 1610809455;
    function StepLast: Smallint; dispid 1610809456;
    function StepNext: Smallint; dispid 1610809457;
    function StepPrevious: Smallint; dispid 1610809458;
    function Update: Smallint; dispid 1610809459;
    property AccessToMaintainUsers: WordBool dispid 1745027175;
    property CreditCardAccess: Smallint dispid 1745027174;
    property CrystalAccess: Smallint dispid 1745027173;
    property Inactive: WordBool dispid 1745027172;
    property Password: WideString dispid 1745027171;
    property GeneralLedger_Maint_Budgets: Smallint dispid 1745027170;
    property GeneralLedger_Maint_ChartOfAccounts: Smallint dispid 1745027169;
    property GeneralLedger_Maint_ChartOfAccountsBB: Smallint dispid 1745027168;
    property GeneralLedger_Reports_AccountReconcil: Smallint dispid 1745027167;
    property GeneralLedger_Reports_FinancialStatement: Smallint dispid 1745027166;
    property GeneralLedger_Reports_MasterLists: Smallint dispid 1745027165;
    property GeneralLedger_Reports_TransactionLists: Smallint dispid 1745027164;
    property GeneralLedger_Tasks_GeneralJournal: Smallint dispid 1745027163;
    property GUID: WideString dispid 1745027162;
    property Inventory_Maint_InventoryItems: Smallint dispid 1745027161;
    property Inventory_Maint_InventoryItemsBB: Smallint dispid 1745027160;
    property Inventory_Maint_MultipleItemPrices: Smallint dispid 1745027159;
    property Inventory_Maint_Revisions: Smallint dispid 1745027158;
    property Inventory_Maint_UnitMeasures: Smallint dispid 1745027157;
    property Inventory_Reports_Forms: Smallint dispid 1745027156;
    property Inventory_Reports_MasterLists: Smallint dispid 1745027155;
    property Inventory_Reports_OtherReports: Smallint dispid 1745027154;
    property Inventory_Reports_TransactionLists: Smallint dispid 1745027153;
    property Inventory_Tasks_Inventory: Smallint dispid 1745027152;
    property Inventory_Tasks_WorkTickets: Smallint dispid 1745027151;
    property Payroll_Maint_EmployeesSalesReps: Smallint dispid 1745027150;
    property Payroll_Maint_EmployeesSalesRepsBB: Smallint dispid 1745027149;
    property Payroll_Maint_PayrollTaxTables: Smallint dispid 1745027148;
    property Payroll_Reports_Forms: Smallint dispid 1745027147;
    property Payroll_Reports_MasterLists: Smallint dispid 1745027146;
    property Payroll_Reports_MailMerge: Smallint dispid 1745027145;
    property Payroll_Reports_OtherReports: Smallint dispid 1745027144;
    property Payroll_Reports_TransactionLists: Smallint dispid 1745027143;
    property Payroll_Tasks_PayrollEntry: Smallint dispid 1745027142;
    property Payroll_Tasks_VoidPRChecks: Smallint dispid 1745027141;
    property Purchases_Maint_Vendors: Smallint dispid 1745027140;
    property Purchases_Maint_VendorsBB: Smallint dispid 1745027139;
    property Purchases_Reports_Forms: Smallint dispid 1745027138;
    property Purchases_Reports_MasterLists: Smallint dispid 1745027137;
    property Purchases_Reports_MailMerge: Smallint dispid 1745027136;
    property Purchases_Reports_OtherReports: Smallint dispid 1745027135;
    property Purchases_Reports_TransactionLists: Smallint dispid 1745027134;
    property Purchases_Tasks_Payments: Smallint dispid 1745027133;
    property Purchases_Tasks_PurchaseOrders: Smallint dispid 1745027132;
    property Purchases_Tasks_PurchasesInventory: Smallint dispid 1745027131;
    property Purchases_Tasks_VendorCreditMemos: Smallint dispid 1745027130;
    property Purchases_Tasks_VoidChecks: Smallint dispid 1745027129;
    property Sales_Maint_CustomerPaymentDefaults: Smallint dispid 1745027128;
    property Sales_Maint_Customers: Smallint dispid 1745027127;
    property Sales_Maint_CustomersProspectsBB: Smallint dispid 1745027126;
    property Sales_Reports_Forms: Smallint dispid 1745027125;
    property Sales_Reports_MailMerge: Smallint dispid 1745027124;
    property Sales_Reports_MasterLists: Smallint dispid 1745027123;
    property Sales_Reports_OtherReports: Smallint dispid 1745027122;
    property Sales_Reports_TransactionLists: Smallint dispid 1745027121;
    property Sales_Tasks_CreditMemos: Smallint dispid 1745027120;
    property Sales_Tasks_Quotes: Smallint dispid 1745027119;
    property Sales_Tasks_Receipts: Smallint dispid 1745027118;
    property Sales_Tasks_SalesInvoicing: Smallint dispid 1745027117;
    property Sales_Tasks_SalesOrders: Smallint dispid 1745027116;
    property Sales_Tasks_Shipment: Smallint dispid 1745027115;
    property Sales_Tasks_ShipmentRegistrationWizard: Smallint dispid 1745027114;
    property System_Analysis_CashManager: Smallint dispid 1745027113;
    property System_Analysis_CollectionManager: Smallint dispid 1745027112;
    property System_Analysis_FinancialManager: Smallint dispid 1745027111;
    property System_Analysis_PaymentManager: Smallint dispid 1745027110;
    property System_File_ArchiveCompany: Smallint dispid 1745027109;
    property System_File_Backup: Smallint dispid 1745027108;
    property System_File_ImportExport: Smallint dispid 1745027107;
    property System_File_IntegrityCheck: Smallint dispid 1745027106;
    property System_File_NewCompany: Smallint dispid 1745027105;
    property System_File_OnlineBackup: Smallint dispid 1745027104;
    property System_File_ReconsolidateCompany: Smallint dispid 1745027103;
    property System_File_Restore: Smallint dispid 1745027102;
    property System_Modem: Smallint dispid 1745027101;
    property System_Maint_CompanyInformation: Smallint dispid 1745027100;
    property System_Maint_ElectronicPayments: Smallint dispid 1745027099;
    property System_Maint_Jobs: Smallint dispid 1745027098;
    property System_Options_ActionItemsEventLog: Smallint dispid 1745027097;
    property System_Options_ChangeSystemDate: Smallint dispid 1745027096;
    property System_Reports_AccountReconcil: Smallint dispid 1745027095;
    property System_Reports_AuditTrail: Smallint dispid 1745027094;
    property System_Reports_ElectronicBillPayment: Smallint dispid 1745027093;
    property System_Reports_Jobs: Smallint dispid 1745027092;
    property System_Reports_ReportGroups: Smallint dispid 1745027091;
    property System_Reports_TimeExpense: Smallint dispid 1745027090;
    property System_Tasks_AccountReconciliation: Smallint dispid 1745027089;
    property System_Tasks_ActionItems: Smallint dispid 1745027088;
    property System_Tasks_ChangeAccountingPeriod: Smallint dispid 1745027087;
    property System_Tasks_CloseFiscalYear: Smallint dispid 1745027086;
    property System_Tasks_ClosePayrollYear: Smallint dispid 1745027085;
    property System_Tasks_ElectronicBillPayment: Smallint dispid 1745027084;
    property System_Tasks_FindTransactions: Smallint dispid 1745027083;
    property System_Tasks_LinkToOtherApps: Smallint dispid 1745027082;
    property System_Tasks_Post: Smallint dispid 1745027081;
    property System_Tasks_Purge: Smallint dispid 1745027080;
    property System_Tasks_TimeAndExpenseTickets: Smallint dispid 1745027079;
    property System_Tasks_TransactionsInPriorPeriods: Smallint dispid 1745027078;
    property System_Tasks_Unpost: Smallint dispid 1745027077;
    property Unknown1: Smallint dispid 1745027076;
    property Unknown2: Smallint dispid 1745027075;
    property Unknown3[Index: Smallint]: Byte dispid 1745027074;
    property Unknown4: Smallint dispid 1745027073;
    property UserName: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _SortJob
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8166AFE8-8596-4A5F-B297-B3DAE7BB8255}
// *********************************************************************//
  _SortJob = interface(IDispatch)
    ['{8166AFE8-8596-4A5F-B297-B3DAE7BB8255}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Account: WideString; safecall;
    procedure Set_Account(const Param1: WideString); safecall;
    function Get_Amount: Double; safecall;
    procedure Set_Amount(Param1: Double); safecall;
    function Get_AmountType: Smallint; safecall;
    procedure Set_AmountType(Param1: Smallint); safecall;
    function Get_CostDescription: WideString; safecall;
    procedure Set_CostDescription(const Param1: WideString); safecall;
    function Get_CostIndex: Integer; safecall;
    procedure Set_CostIndex(Param1: Integer); safecall;
    function Get_CostOfSalesTrx: Byte; safecall;
    procedure Set_CostOfSalesTrx(Param1: Byte); safecall;
    function Get_ID: WideString; safecall;
    procedure Set_ID(const Param1: WideString); safecall;
    function Get_Index: Integer; safecall;
    procedure Set_Index(Param1: Integer); safecall;
    function Get_Invoice: WideString; safecall;
    procedure Set_Invoice(const Param1: WideString); safecall;
    function Get_ItemIndex: Integer; safecall;
    procedure Set_ItemIndex(Param1: Integer); safecall;
    function Get_JobDescription: WideString; safecall;
    procedure Set_JobDescription(const Param1: WideString); safecall;
    function Get_JobIndex: Integer; safecall;
    procedure Set_JobIndex(Param1: Integer); safecall;
    function Get_JournalCode: Byte; safecall;
    procedure Set_JournalCode(Param1: Byte); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_Line: Smallint; safecall;
    procedure Set_Line(Param1: Smallint); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_PhaseDescription: WideString; safecall;
    procedure Set_PhaseDescription(const Param1: WideString); safecall;
    function Get_PhaseIndex: Integer; safecall;
    procedure Set_PhaseIndex(Param1: Integer); safecall;
    function Get_Posted: Byte; safecall;
    procedure Set_Posted(Param1: Byte); safecall;
    function Get_Quote: Byte; safecall;
    procedure Set_Quote(Param1: Byte); safecall;
    function Get_Reference: WideString; safecall;
    procedure Set_Reference(const Param1: WideString); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    function Get_Unknown1: Integer; safecall;
    procedure Set_Unknown1(Param1: Integer); safecall;
    function Get_Unknown2: Byte; safecall;
    procedure Set_Unknown2(Param1: Byte); safecall;
    function Get_Unknown3: Byte; safecall;
    procedure Set_Unknown3(Param1: Byte); safecall;
    function Get_Unknown4: Smallint; safecall;
    procedure Set_Unknown4(Param1: Smallint); safecall;
    property Account: WideString read Get_Account write Set_Account;
    property Amount: Double read Get_Amount write Set_Amount;
    property AmountType: Smallint read Get_AmountType write Set_AmountType;
    property CostDescription: WideString read Get_CostDescription write Set_CostDescription;
    property CostIndex: Integer read Get_CostIndex write Set_CostIndex;
    property CostOfSalesTrx: Byte read Get_CostOfSalesTrx write Set_CostOfSalesTrx;
    property ID: WideString read Get_ID write Set_ID;
    property Index: Integer read Get_Index write Set_Index;
    property Invoice: WideString read Get_Invoice write Set_Invoice;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property JobDescription: WideString read Get_JobDescription write Set_JobDescription;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property JournalCode: Byte read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Line: Smallint read Get_Line write Set_Line;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property PhaseDescription: WideString read Get_PhaseDescription write Set_PhaseDescription;
    property PhaseIndex: Integer read Get_PhaseIndex write Set_PhaseIndex;
    property Posted: Byte read Get_Posted write Set_Posted;
    property Quote: Byte read Get_Quote write Set_Quote;
    property Reference: WideString read Get_Reference write Set_Reference;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property Unknown1: Integer read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Byte read Get_Unknown2 write Set_Unknown2;
    property Unknown3: Byte read Get_Unknown3 write Set_Unknown3;
    property Unknown4: Smallint read Get_Unknown4 write Set_Unknown4;
  end;

// *********************************************************************//
// DispIntf:  _SortJobDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8166AFE8-8596-4A5F-B297-B3DAE7BB8255}
// *********************************************************************//
  _SortJobDisp = dispinterface
    ['{8166AFE8-8596-4A5F-B297-B3DAE7BB8255}']
    function CloseFile: Smallint; dispid 1610809371;
    function OpenFile: Smallint; dispid 1610809372;
    function Delete: Smallint; dispid 1610809373;
    function Insert: Smallint; dispid 1610809374;
    function RecordCount: Integer; dispid 1610809376;
    function StepFirst: Smallint; dispid 1610809377;
    function StepLast: Smallint; dispid 1610809378;
    function StepNext: Smallint; dispid 1610809379;
    function StepPrevious: Smallint; dispid 1610809380;
    function Update: Smallint; dispid 1610809381;
    property Account: WideString dispid 1745027098;
    property Amount: Double dispid 1745027097;
    property AmountType: Smallint dispid 1745027096;
    property CostDescription: WideString dispid 1745027095;
    property CostIndex: Integer dispid 1745027094;
    property CostOfSalesTrx: Byte dispid 1745027093;
    property ID: WideString dispid 1745027092;
    property Index: Integer dispid 1745027091;
    property Invoice: WideString dispid 1745027090;
    property ItemIndex: Integer dispid 1745027089;
    property JobDescription: WideString dispid 1745027088;
    property JobIndex: Integer dispid 1745027087;
    property JournalCode: Byte dispid 1745027086;
    property JournalID: Smallint dispid 1745027085;
    property Line: Smallint dispid 1745027084;
    property NRecord: Integer dispid 1745027083;
    property PhaseDescription: WideString dispid 1745027082;
    property PhaseIndex: Integer dispid 1745027081;
    property Posted: Byte dispid 1745027080;
    property Quote: Byte dispid 1745027079;
    property Reference: WideString dispid 1745027078;
    property Subindex2: Byte dispid 1745027077;
    property TrxDate: OleVariant dispid 1745027076;
    property Unknown1: Integer dispid 1745027075;
    property Unknown2: Byte dispid 1745027074;
    property Unknown3: Byte dispid 1745027073;
    property Unknown4: Smallint dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _SelectVendor
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BB18B622-0E50-425E-92AB-A98D71577173}
// *********************************************************************//
  _SelectVendor = interface(IDispatch)
    ['{BB18B622-0E50-425E-92AB-A98D71577173}']
    function ShowOpen: OleVariant; safecall;
    function Get_VendorID: WideString; safecall;
    procedure Set_VendorID(const Param1: WideString); safecall;
    procedure Set_ExcludeInactive(Param1: WordBool); safecall;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; safecall;
    property VendorID: WideString read Get_VendorID write Set_VendorID;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
  end;

// *********************************************************************//
// DispIntf:  _SelectVendorDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BB18B622-0E50-425E-92AB-A98D71577173}
// *********************************************************************//
  _SelectVendorDisp = dispinterface
    ['{BB18B622-0E50-425E-92AB-A98D71577173}']
    function ShowOpen: OleVariant; dispid 1610809346;
    property VendorID: WideString dispid 1745027073;
    property ExcludeInactive: WordBool writeonly dispid 1745027072;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; dispid 1610809347;
  end;

// *********************************************************************//
// Interface: _SelectLineItem
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AC6315A9-0948-4D8C-A3CF-FF87DE45C155}
// *********************************************************************//
  _SelectLineItem = interface(IDispatch)
    ['{AC6315A9-0948-4D8C-A3CF-FF87DE45C155}']
    function ShowOpen: OleVariant; safecall;
    function Get_ItemID: WideString; safecall;
    procedure Set_ItemID(const Param1: WideString); safecall;
    procedure Set_ExcludeInactive(Param1: WordBool); safecall;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; safecall;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
  end;

// *********************************************************************//
// DispIntf:  _SelectLineItemDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AC6315A9-0948-4D8C-A3CF-FF87DE45C155}
// *********************************************************************//
  _SelectLineItemDisp = dispinterface
    ['{AC6315A9-0948-4D8C-A3CF-FF87DE45C155}']
    function ShowOpen: OleVariant; dispid 1610809346;
    property ItemID: WideString dispid 1745027073;
    property ExcludeInactive: WordBool writeonly dispid 1745027072;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; dispid 1610809347;
  end;

// *********************************************************************//
// Interface: _SelectEmployee
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D13855A6-6CD1-4EC8-9AFB-A62093BF27A9}
// *********************************************************************//
  _SelectEmployee = interface(IDispatch)
    ['{D13855A6-6CD1-4EC8-9AFB-A62093BF27A9}']
    function ShowOpen: OleVariant; safecall;
    function Get_EmployeeID: WideString; safecall;
    procedure Set_EmployeeID(const Param1: WideString); safecall;
    procedure Set_ExcludeInactive(Param1: WordBool); safecall;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; safecall;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
  end;

// *********************************************************************//
// DispIntf:  _SelectEmployeeDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D13855A6-6CD1-4EC8-9AFB-A62093BF27A9}
// *********************************************************************//
  _SelectEmployeeDisp = dispinterface
    ['{D13855A6-6CD1-4EC8-9AFB-A62093BF27A9}']
    function ShowOpen: OleVariant; dispid 1610809346;
    property EmployeeID: WideString dispid 1745027073;
    property ExcludeInactive: WordBool writeonly dispid 1745027072;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; dispid 1610809347;
  end;

// *********************************************************************//
// Interface: _JrnlHdr
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {13A31E87-9BD4-4E4D-A26C-C5F16A2A5E5F}
// *********************************************************************//
  _JrnlHdr = interface(IDispatch)
    ['{13A31E87-9BD4-4E4D-A26C-C5F16A2A5E5F}']
    function ClearRecord: Smallint; safecall;
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(NRecord: Integer): Smallint; safecall;
    function GetForKeyL(Subindex1: Byte; TrxNumber: Integer; Period: Smallint; JournalID: Smallint; 
                        Subindex2: Smallint): OleVariant; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function ReadBytes: Smallint; safecall;
    function ReadFirst(JrnlCode: Smallint; Period: Smallint): Smallint; safecall;
    function ReadFirstForIDIndex(JrnlCode: Smallint; Index: Integer): Smallint; safecall;
    function ReadFirstForInvoice(const Invoice: WideString): Smallint; safecall;
    function ReadNext: Smallint; safecall;
    function ReadNextForIDIndex: Smallint; safecall;
    function ReadNextForInvoice: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_ActualLength: Integer; safecall;
    function Get_Address1: WideString; safecall;
    procedure Set_Address1(const Param1: WideString); safecall;
    function Get_Address2: WideString; safecall;
    procedure Set_Address2(const Param1: WideString); safecall;
    function Get_Amount: Double; safecall;
    procedure Set_Amount(Param1: Double); safecall;
    function Get_AmountPaid: Double; safecall;
    procedure Set_AmountPaid(Param1: Double); safecall;
    function Get_AppName: WideString; safecall;
    procedure Set_AppName(const Param1: WideString); safecall;
    function Get_BeginningBalance: WordBool; safecall;
    procedure Set_BeginningBalance(Param1: WordBool); safecall;
    function Get_CCAddress1: WideString; safecall;
    procedure Set_CCAddress1(const Param1: WideString); safecall;
    function Get_CCAddress2: WideString; safecall;
    procedure Set_CCAddress2(const Param1: WideString); safecall;
    function Get_CCAuthorization: WideString; safecall;
    procedure Set_CCAuthorization(const Param1: WideString); safecall;
    function Get_CCCity: WideString; safecall;
    procedure Set_CCCity(const Param1: WideString); safecall;
    function Get_CCComment: WideString; safecall;
    procedure Set_CCComment(const Param1: WideString); safecall;
    function Get_CCCountry: WideString; safecall;
    procedure Set_CCCountry(const Param1: WideString); safecall;
    function Get_CCEncryptedCard: WideString; safecall;
    procedure Set_CCEncryptedCard(const Param1: WideString); safecall;
    function Get_CCExpirationDate: OleVariant; safecall;
    procedure Set_CCExpirationDate(Param1: OleVariant); safecall;
    function Get_CCFlag: Byte; safecall;
    procedure Set_CCFlag(Param1: Byte); safecall;
    function Get_CCName: WideString; safecall;
    procedure Set_CCName(const Param1: WideString); safecall;
    function Get_CCNumber: WideString; safecall;
    procedure Set_CCNumber(const Param1: WideString); safecall;
    function Get_CCState: WideString; safecall;
    procedure Set_CCState(const Param1: WideString); safecall;
    function Get_CCZipcode: WideString; safecall;
    procedure Set_CCZipcode(const Param1: WideString); safecall;
    function Get_City: WideString; safecall;
    procedure Set_City(const Param1: WideString); safecall;
    function Get_CloseOrder: WordBool; safecall;
    procedure Set_CloseOrder(Param1: WordBool); safecall;
    function Get_Country: WideString; safecall;
    procedure Set_Country(const Param1: WideString); safecall;
    function Get_CustomerSONo: WideString; safecall;
    procedure Set_CustomerSONo(const Param1: WideString); safecall;
    function Get_DateCleared: OleVariant; safecall;
    procedure Set_DateCleared(Param1: OleVariant); safecall;
    function Get_DateDue: OleVariant; safecall;
    procedure Set_DateDue(Param1: OleVariant); safecall;
    function Get_DepositDate: OleVariant; safecall;
    procedure Set_DepositDate(Param1: OleVariant); safecall;
    function Get_DepositTicketID: WideString; safecall;
    procedure Set_DepositTicketID(const Param1: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_DiscountAmount: Double; safecall;
    procedure Set_DiscountAmount(Param1: Double); safecall;
    function Get_DiscountDate: OleVariant; safecall;
    procedure Set_DiscountDate(Param1: OleVariant); safecall;
    function Get_DropShip: Byte; safecall;
    procedure Set_DropShip(Param1: Byte); safecall;
    function Get_EditCount: Integer; safecall;
    procedure Set_EditCount(Param1: Integer); safecall;
    function Get_GoodThruDate: OleVariant; safecall;
    procedure Set_GoodThruDate(Param1: OleVariant); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_HasPartner: WordBool; safecall;
    procedure Set_HasPartner(Param1: WordBool); safecall;
    function Get_IDNumber: Integer; safecall;
    procedure Set_IDNumber(Param1: Integer); safecall;
    function Get_IDText: WideString; safecall;
    procedure Set_IDText(const Param1: WideString); safecall;
    function Get_InternalNote: WideString; safecall;
    procedure Set_InternalNote(const Param1: WideString); safecall;
    function Get_JournalCode: WideString; safecall;
    procedure Set_JournalCode(const Param1: WideString); safecall;
    function Get_JournalID: Smallint; safecall;
    procedure Set_JournalID(Param1: Smallint); safecall;
    function Get_JrnlTypeEx: Integer; safecall;
    procedure Set_JrnlTypeEx(Param1: Integer); safecall;
    function Get_Key: Double; safecall;
    procedure Set_Key(Param1: Double); safecall;
    function Get_MainAccount: WideString; safecall;
    procedure Set_MainAccount(const Param1: WideString); safecall;
    function Get_MaxNRecord: Integer; safecall;
    function Get_MaxTrxNumberL(Period: Smallint; var JournalCode: Smallint): Integer; safecall;
    function Get_Memo: WideString; safecall;
    procedure Set_Memo(const Param1: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Param1: WideString); safecall;
    function Get_Note: WideString; safecall;
    procedure Set_Note(const Param1: WideString); safecall;
    function Get_NotePrintsAfterItems: WordBool; safecall;
    procedure Set_NotePrintsAfterItems(Param1: WordBool); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_NumOrderLines: Smallint; safecall;
    procedure Set_NumOrderLines(Param1: Smallint); safecall;
    function Get_OrderNumber: WideString; safecall;
    procedure Set_OrderNumber(const Param1: WideString); safecall;
    function Get_OtherIndex: Integer; safecall;
    procedure Set_OtherIndex(Param1: Integer); safecall;
    function Get_OtherReceipt: WordBool; safecall;
    procedure Set_OtherReceipt(Param1: WordBool); safecall;
    function Get_PaidOnInvoice: Double; safecall;
    procedure Set_PaidOnInvoice(Param1: Double); safecall;
    function Get_PaymentDate: OleVariant; safecall;
    procedure Set_PaymentDate(Param1: OleVariant); safecall;
    function Get_PayLevel(Index: Smallint): Double; safecall;
    procedure Set_PayLevel(Index: Smallint; Param2: Double); safecall;
    function Get_PaymentMethod: WideString; safecall;
    procedure Set_PaymentMethod(const Param1: WideString); safecall;
    function Get_PayPeriodEnd: OleVariant; safecall;
    procedure Set_PayPeriodEnd(Param1: OleVariant); safecall;
    function Get_Period: Smallint; safecall;
    procedure Set_Period(Param1: Smallint); safecall;
    function Get_PONumber: WideString; safecall;
    procedure Set_PONumber(const Param1: WideString); safecall;
    function Get_Posted: WordBool; safecall;
    procedure Set_Posted(Param1: WordBool); safecall;
    function Get_Prepayment: WordBool; safecall;
    procedure Set_Prepayment(Param1: WordBool); safecall;
    function Get_PrintBeforeInvoiceReference: WordBool; safecall;
    procedure Set_PrintBeforeInvoiceReference(Param1: WordBool); safecall;
    function Get_PrintCheck: WordBool; safecall;
    procedure Set_PrintCheck(Param1: WordBool); safecall;
    function Get_PurchaseOrderNumber: WideString; safecall;
    procedure Set_PurchaseOrderNumber(const Param1: WideString); safecall;
    function Get_QuoteNumber: WideString; safecall;
    procedure Set_QuoteNumber(const Param1: WideString); safecall;
    function Get_ReceiptDate: OleVariant; safecall;
    procedure Set_ReceiptDate(Param1: OleVariant); safecall;
    function Get_ReceiptNum: WideString; safecall;
    procedure Set_ReceiptNum(const Param1: WideString); safecall;
    function Get_RecordByte(Index: Integer): Byte; safecall;
    function Get_RecurrenceIndex: Integer; safecall;
    procedure Set_RecurrenceIndex(Param1: Integer); safecall;
    function Get_RecurrenceRate: Smallint; safecall;
    procedure Set_RecurrenceRate(Param1: Smallint); safecall;
    function Get_ReimbursableExpense: WordBool; safecall;
    procedure Set_ReimbursableExpense(Param1: WordBool); safecall;
    function Get_Reference: WideString; safecall;
    procedure Set_Reference(const Param1: WideString); safecall;
    function Get_ReturnAuthorization: WideString; safecall;
    procedure Set_ReturnAuthorization(const Param1: WideString); safecall;
    function Get_Reversed: WordBool; safecall;
    procedure Set_Reversed(Param1: WordBool); safecall;
    function Get_SalesRepID: WideString; safecall;
    procedure Set_SalesRepID(const Param1: WideString); safecall;
    function Get_SalesTaxCode: WideString; safecall;
    procedure Set_SalesTaxCode(const Param1: WideString); safecall;
    function Get_ShipByDate: OleVariant; safecall;
    procedure Set_ShipByDate(Param1: OleVariant); safecall;
    function Get_ShipDate: OleVariant; safecall;
    procedure Set_ShipDate(Param1: OleVariant); safecall;
    function Get_ShipIndex: Integer; safecall;
    procedure Set_ShipIndex(Param1: Integer); safecall;
    function Get_ShipToAddress1: WideString; safecall;
    procedure Set_ShipToAddress1(const Param1: WideString); safecall;
    function Get_ShipToAddress2: WideString; safecall;
    procedure Set_ShipToAddress2(const Param1: WideString); safecall;
    function Get_ShipToCity: WideString; safecall;
    procedure Set_ShipToCity(const Param1: WideString); safecall;
    function Get_ShipToCountry: WideString; safecall;
    procedure Set_ShipToCountry(const Param1: WideString); safecall;
    function Get_ShipToName: WideString; safecall;
    procedure Set_ShipToName(const Param1: WideString); safecall;
    function Get_ShipToState: WideString; safecall;
    procedure Set_ShipToState(const Param1: WideString); safecall;
    function Get_ShipToZipCode: WideString; safecall;
    procedure Set_ShipToZipCode(const Param1: WideString); safecall;
    function Get_ShipVia: WideString; safecall;
    procedure Set_ShipVia(const Param1: WideString); safecall;
    function Get_State: WideString; safecall;
    procedure Set_State(const Param1: WideString); safecall;
    function Get_StatementNote: WideString; safecall;
    procedure Set_StatementNote(const Param1: WideString); safecall;
    function Get_Subindex1: Byte; safecall;
    procedure Set_Subindex1(Param1: Byte); safecall;
    function Get_Subindex2: Byte; safecall;
    procedure Set_Subindex2(Param1: Byte); safecall;
    function Get_SuperRecordNumber: Integer; safecall;
    procedure Set_SuperRecordNumber(Param1: Integer); safecall;
    function Get_Terms: WideString; safecall;
    procedure Set_Terms(const Param1: WideString); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    function Get_TrxIsReadOnly: Smallint; safecall;
    procedure Set_TrxIsReadOnly(Param1: Smallint); safecall;
    function Get_TrxNumber: Smallint; safecall;
    procedure Set_TrxNumber(Param1: Smallint); safecall;
    function Get_TrxNumberL: Integer; safecall;
    procedure Set_TrxNumberL(Param1: Integer); safecall;
    function Get_TrxVoidedBy: Integer; safecall;
    procedure Set_TrxVoidedBy(Param1: Integer); safecall;
    function Get_Unknown1(Index: Smallint): Byte; safecall;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte); safecall;
    function Get_UnusedInteger3: Smallint; safecall;
    procedure Set_UnusedInteger3(Param1: Smallint); safecall;
    function Get_UnusedByte10: Byte; safecall;
    procedure Set_UnusedByte10(Param1: Byte); safecall;
    function Get_UnknownLong11: Integer; safecall;
    procedure Set_UnknownLong11(Param1: Integer); safecall;
    function Get_UnknownLong12: Integer; safecall;
    procedure Set_UnknownLong12(Param1: Integer); safecall;
    function Get_Unknown13(Index: Smallint): Byte; safecall;
    procedure Set_Unknown13(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown14(Index: Smallint): Byte; safecall;
    procedure Set_Unknown14(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown15(Index: Smallint): Byte; safecall;
    procedure Set_Unknown15(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown16(Index: Smallint): Byte; safecall;
    procedure Set_Unknown16(Index: Smallint; Param2: Byte); safecall;
    function Get_Unknown17: Byte; safecall;
    procedure Set_Unknown17(Param1: Byte); safecall;
    function Get_UPSShipmentRecNum: Integer; safecall;
    procedure Set_UPSShipmentRecNum(Param1: Integer); safecall;
    function Get_WaitingOnBill: WordBool; safecall;
    procedure Set_WaitingOnBill(Param1: WordBool); safecall;
    function Get_WeeksInPayPeriod: Smallint; safecall;
    procedure Set_WeeksInPayPeriod(Param1: Smallint); safecall;
    function Get_Zipcode: WideString; safecall;
    procedure Set_Zipcode(const Param1: WideString); safecall;
    property ActualLength: Integer read Get_ActualLength;
    property Address1: WideString read Get_Address1 write Set_Address1;
    property Address2: WideString read Get_Address2 write Set_Address2;
    property Amount: Double read Get_Amount write Set_Amount;
    property AmountPaid: Double read Get_AmountPaid write Set_AmountPaid;
    property AppName: WideString read Get_AppName write Set_AppName;
    property BeginningBalance: WordBool read Get_BeginningBalance write Set_BeginningBalance;
    property CCAddress1: WideString read Get_CCAddress1 write Set_CCAddress1;
    property CCAddress2: WideString read Get_CCAddress2 write Set_CCAddress2;
    property CCAuthorization: WideString read Get_CCAuthorization write Set_CCAuthorization;
    property CCCity: WideString read Get_CCCity write Set_CCCity;
    property CCComment: WideString read Get_CCComment write Set_CCComment;
    property CCCountry: WideString read Get_CCCountry write Set_CCCountry;
    property CCEncryptedCard: WideString read Get_CCEncryptedCard write Set_CCEncryptedCard;
    property CCExpirationDate: OleVariant read Get_CCExpirationDate write Set_CCExpirationDate;
    property CCFlag: Byte read Get_CCFlag write Set_CCFlag;
    property CCName: WideString read Get_CCName write Set_CCName;
    property CCNumber: WideString read Get_CCNumber write Set_CCNumber;
    property CCState: WideString read Get_CCState write Set_CCState;
    property CCZipcode: WideString read Get_CCZipcode write Set_CCZipcode;
    property City: WideString read Get_City write Set_City;
    property CloseOrder: WordBool read Get_CloseOrder write Set_CloseOrder;
    property Country: WideString read Get_Country write Set_Country;
    property CustomerSONo: WideString read Get_CustomerSONo write Set_CustomerSONo;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DateDue: OleVariant read Get_DateDue write Set_DateDue;
    property DepositDate: OleVariant read Get_DepositDate write Set_DepositDate;
    property DepositTicketID: WideString read Get_DepositTicketID write Set_DepositTicketID;
    property Description: WideString read Get_Description write Set_Description;
    property DiscountAmount: Double read Get_DiscountAmount write Set_DiscountAmount;
    property DiscountDate: OleVariant read Get_DiscountDate write Set_DiscountDate;
    property DropShip: Byte read Get_DropShip write Set_DropShip;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GoodThruDate: OleVariant read Get_GoodThruDate write Set_GoodThruDate;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasPartner: WordBool read Get_HasPartner write Set_HasPartner;
    property IDNumber: Integer read Get_IDNumber write Set_IDNumber;
    property IDText: WideString read Get_IDText write Set_IDText;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property JrnlTypeEx: Integer read Get_JrnlTypeEx write Set_JrnlTypeEx;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumberL[Period: Smallint; var JournalCode: Smallint]: Integer read Get_MaxTrxNumberL;
    property Memo: WideString read Get_Memo write Set_Memo;
    property Name: WideString read Get_Name write Set_Name;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumOrderLines: Smallint read Get_NumOrderLines write Set_NumOrderLines;
    property OrderNumber: WideString read Get_OrderNumber write Set_OrderNumber;
    property OtherIndex: Integer read Get_OtherIndex write Set_OtherIndex;
    property OtherReceipt: WordBool read Get_OtherReceipt write Set_OtherReceipt;
    property PaidOnInvoice: Double read Get_PaidOnInvoice write Set_PaidOnInvoice;
    property PaymentDate: OleVariant read Get_PaymentDate write Set_PaymentDate;
    property PayLevel[Index: Smallint]: Double read Get_PayLevel write Set_PayLevel;
    property PaymentMethod: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property PayPeriodEnd: OleVariant read Get_PayPeriodEnd write Set_PayPeriodEnd;
    property Period: Smallint read Get_Period write Set_Period;
    property PONumber: WideString read Get_PONumber write Set_PONumber;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property PrintBeforeInvoiceReference: WordBool read Get_PrintBeforeInvoiceReference write Set_PrintBeforeInvoiceReference;
    property PrintCheck: WordBool read Get_PrintCheck write Set_PrintCheck;
    property PurchaseOrderNumber: WideString read Get_PurchaseOrderNumber write Set_PurchaseOrderNumber;
    property QuoteNumber: WideString read Get_QuoteNumber write Set_QuoteNumber;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property ReceiptNum: WideString read Get_ReceiptNum write Set_ReceiptNum;
    property RecordByte[Index: Integer]: Byte read Get_RecordByte;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property Reference: WideString read Get_Reference write Set_Reference;
    property ReturnAuthorization: WideString read Get_ReturnAuthorization write Set_ReturnAuthorization;
    property Reversed: WordBool read Get_Reversed write Set_Reversed;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property ShipByDate: OleVariant read Get_ShipByDate write Set_ShipByDate;
    property ShipDate: OleVariant read Get_ShipDate write Set_ShipDate;
    property ShipIndex: Integer read Get_ShipIndex write Set_ShipIndex;
    property ShipToAddress1: WideString read Get_ShipToAddress1 write Set_ShipToAddress1;
    property ShipToAddress2: WideString read Get_ShipToAddress2 write Set_ShipToAddress2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property State: WideString read Get_State write Set_State;
    property StatementNote: WideString read Get_StatementNote write Set_StatementNote;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property SuperRecordNumber: Integer read Get_SuperRecordNumber write Set_SuperRecordNumber;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property TrxIsReadOnly: Smallint read Get_TrxIsReadOnly write Set_TrxIsReadOnly;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property TrxVoidedBy: Integer read Get_TrxVoidedBy write Set_TrxVoidedBy;
    property Unknown1[Index: Smallint]: Byte read Get_Unknown1 write Set_Unknown1;
    property UnusedInteger3: Smallint read Get_UnusedInteger3 write Set_UnusedInteger3;
    property UnusedByte10: Byte read Get_UnusedByte10 write Set_UnusedByte10;
    property UnknownLong11: Integer read Get_UnknownLong11 write Set_UnknownLong11;
    property UnknownLong12: Integer read Get_UnknownLong12 write Set_UnknownLong12;
    property Unknown13[Index: Smallint]: Byte read Get_Unknown13 write Set_Unknown13;
    property Unknown14[Index: Smallint]: Byte read Get_Unknown14 write Set_Unknown14;
    property Unknown15[Index: Smallint]: Byte read Get_Unknown15 write Set_Unknown15;
    property Unknown16[Index: Smallint]: Byte read Get_Unknown16 write Set_Unknown16;
    property Unknown17: Byte read Get_Unknown17 write Set_Unknown17;
    property UPSShipmentRecNum: Integer read Get_UPSShipmentRecNum write Set_UPSShipmentRecNum;
    property WaitingOnBill: WordBool read Get_WaitingOnBill write Set_WaitingOnBill;
    property WeeksInPayPeriod: Smallint read Get_WeeksInPayPeriod write Set_WeeksInPayPeriod;
    property Zipcode: WideString read Get_Zipcode write Set_Zipcode;
  end;

// *********************************************************************//
// DispIntf:  _JrnlHdrDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {13A31E87-9BD4-4E4D-A26C-C5F16A2A5E5F}
// *********************************************************************//
  _JrnlHdrDisp = dispinterface
    ['{13A31E87-9BD4-4E4D-A26C-C5F16A2A5E5F}']
    function ClearRecord: Smallint; dispid 1610809459;
    function CloseFile: Smallint; dispid 1610809460;
    function Delete: Smallint; dispid 1610809461;
    function GetEqual(NRecord: Integer): Smallint; dispid 1610809462;
    function GetForKeyL(Subindex1: Byte; TrxNumber: Integer; Period: Smallint; JournalID: Smallint; 
                        Subindex2: Smallint): OleVariant; dispid 1610809463;
    function Insert: Smallint; dispid 1610809464;
    function OpenFile: Smallint; dispid 1610809465;
    function ReadBytes: Smallint; dispid 1610809467;
    function ReadFirst(JrnlCode: Smallint; Period: Smallint): Smallint; dispid 1610809468;
    function ReadFirstForIDIndex(JrnlCode: Smallint; Index: Integer): Smallint; dispid 1610809469;
    function ReadFirstForInvoice(const Invoice: WideString): Smallint; dispid 1610809470;
    function ReadNext: Smallint; dispid 1610809471;
    function ReadNextForIDIndex: Smallint; dispid 1610809472;
    function ReadNextForInvoice: Smallint; dispid 1610809473;
    function RecordCount: Integer; dispid 1610809474;
    function StepFirst: Smallint; dispid 1610809475;
    function StepLast: Smallint; dispid 1610809476;
    function StepNext: Smallint; dispid 1610809477;
    function StepPrevious: Smallint; dispid 1610809478;
    function Update: Smallint; dispid 1610809479;
    property ActualLength: Integer readonly dispid 1745027186;
    property Address1: WideString dispid 1745027185;
    property Address2: WideString dispid 1745027184;
    property Amount: Double dispid 1745027183;
    property AmountPaid: Double dispid 1745027182;
    property AppName: WideString dispid 1745027181;
    property BeginningBalance: WordBool dispid 1745027180;
    property CCAddress1: WideString dispid 1745027179;
    property CCAddress2: WideString dispid 1745027178;
    property CCAuthorization: WideString dispid 1745027177;
    property CCCity: WideString dispid 1745027176;
    property CCComment: WideString dispid 1745027175;
    property CCCountry: WideString dispid 1745027174;
    property CCEncryptedCard: WideString dispid 1745027173;
    property CCExpirationDate: OleVariant dispid 1745027172;
    property CCFlag: Byte dispid 1745027171;
    property CCName: WideString dispid 1745027170;
    property CCNumber: WideString dispid 1745027169;
    property CCState: WideString dispid 1745027168;
    property CCZipcode: WideString dispid 1745027167;
    property City: WideString dispid 1745027166;
    property CloseOrder: WordBool dispid 1745027165;
    property Country: WideString dispid 1745027164;
    property CustomerSONo: WideString dispid 1745027163;
    property DateCleared: OleVariant dispid 1745027162;
    property DateDue: OleVariant dispid 1745027161;
    property DepositDate: OleVariant dispid 1745027160;
    property DepositTicketID: WideString dispid 1745027159;
    property Description: WideString dispid 1745027158;
    property DiscountAmount: Double dispid 1745027157;
    property DiscountDate: OleVariant dispid 1745027156;
    property DropShip: Byte dispid 1745027155;
    property EditCount: Integer dispid 1745027154;
    property GoodThruDate: OleVariant dispid 1745027153;
    property GUID: WideString dispid 1745027152;
    property HasPartner: WordBool dispid 1745027151;
    property IDNumber: Integer dispid 1745027150;
    property IDText: WideString dispid 1745027149;
    property InternalNote: WideString dispid 1745027148;
    property JournalCode: WideString dispid 1745027147;
    property JournalID: Smallint dispid 1745027146;
    property JrnlTypeEx: Integer dispid 1745027145;
    property Key: Double dispid 1745027144;
    property MainAccount: WideString dispid 1745027143;
    property MaxNRecord: Integer readonly dispid 1745027142;
    property MaxTrxNumberL[Period: Smallint; var JournalCode: Smallint]: Integer readonly dispid 1745027141;
    property Memo: WideString dispid 1745027140;
    property Name: WideString dispid 1745027139;
    property Note: WideString dispid 1745027138;
    property NotePrintsAfterItems: WordBool dispid 1745027137;
    property NRecord: Integer dispid 1745027136;
    property NumOrderLines: Smallint dispid 1745027135;
    property OrderNumber: WideString dispid 1745027134;
    property OtherIndex: Integer dispid 1745027133;
    property OtherReceipt: WordBool dispid 1745027132;
    property PaidOnInvoice: Double dispid 1745027131;
    property PaymentDate: OleVariant dispid 1745027130;
    property PayLevel[Index: Smallint]: Double dispid 1745027129;
    property PaymentMethod: WideString dispid 1745027128;
    property PayPeriodEnd: OleVariant dispid 1745027127;
    property Period: Smallint dispid 1745027126;
    property PONumber: WideString dispid 1745027125;
    property Posted: WordBool dispid 1745027124;
    property Prepayment: WordBool dispid 1745027123;
    property PrintBeforeInvoiceReference: WordBool dispid 1745027122;
    property PrintCheck: WordBool dispid 1745027121;
    property PurchaseOrderNumber: WideString dispid 1745027120;
    property QuoteNumber: WideString dispid 1745027119;
    property ReceiptDate: OleVariant dispid 1745027118;
    property ReceiptNum: WideString dispid 1745027117;
    property RecordByte[Index: Integer]: Byte readonly dispid 1745027116;
    property RecurrenceIndex: Integer dispid 1745027115;
    property RecurrenceRate: Smallint dispid 1745027114;
    property ReimbursableExpense: WordBool dispid 1745027113;
    property Reference: WideString dispid 1745027112;
    property ReturnAuthorization: WideString dispid 1745027111;
    property Reversed: WordBool dispid 1745027110;
    property SalesRepID: WideString dispid 1745027109;
    property SalesTaxCode: WideString dispid 1745027108;
    property ShipByDate: OleVariant dispid 1745027107;
    property ShipDate: OleVariant dispid 1745027106;
    property ShipIndex: Integer dispid 1745027105;
    property ShipToAddress1: WideString dispid 1745027104;
    property ShipToAddress2: WideString dispid 1745027103;
    property ShipToCity: WideString dispid 1745027102;
    property ShipToCountry: WideString dispid 1745027101;
    property ShipToName: WideString dispid 1745027100;
    property ShipToState: WideString dispid 1745027099;
    property ShipToZipCode: WideString dispid 1745027098;
    property ShipVia: WideString dispid 1745027097;
    property State: WideString dispid 1745027096;
    property StatementNote: WideString dispid 1745027095;
    property Subindex1: Byte dispid 1745027094;
    property Subindex2: Byte dispid 1745027093;
    property SuperRecordNumber: Integer dispid 1745027092;
    property Terms: WideString dispid 1745027091;
    property TrxDate: OleVariant dispid 1745027090;
    property TrxIsReadOnly: Smallint dispid 1745027089;
    property TrxNumber: Smallint dispid 1745027088;
    property TrxNumberL: Integer dispid 1745027087;
    property TrxVoidedBy: Integer dispid 1745027086;
    property Unknown1[Index: Smallint]: Byte dispid 1745027085;
    property UnusedInteger3: Smallint dispid 1745027084;
    property UnusedByte10: Byte dispid 1745027083;
    property UnknownLong11: Integer dispid 1745027082;
    property UnknownLong12: Integer dispid 1745027081;
    property Unknown13[Index: Smallint]: Byte dispid 1745027080;
    property Unknown14[Index: Smallint]: Byte dispid 1745027079;
    property Unknown15[Index: Smallint]: Byte dispid 1745027078;
    property Unknown16[Index: Smallint]: Byte dispid 1745027077;
    property Unknown17: Byte dispid 1745027076;
    property UPSShipmentRecNum: Integer dispid 1745027075;
    property WaitingOnBill: WordBool dispid 1745027074;
    property WeeksInPayPeriod: Smallint dispid 1745027073;
    property Zipcode: WideString dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _JrnlRow
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {410EED2D-74A6-4CF9-AF64-9B945AB6A785}
// *********************************************************************//
  _JrnlRow = interface(IDispatch)
    ['{410EED2D-74A6-4CF9-AF64-9B945AB6A785}']
    function CloseFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetFirst(NRecord: Integer): Smallint; safecall;
    function GetFirstForJob(JobIndex: Integer; const PhaseID: WideString; const CostID: WideString; 
                            TrxDate: OleVariant): Smallint; safecall;
    function GetNext: Smallint; safecall;
    function GetNextByJob: Smallint; safecall;
    function Insert: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function ReadBytes: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AccountID: WideString; safecall;
    procedure Set_AccountID(const Param1: WideString); safecall;
    function Get_AccountIndex: Integer; safecall;
    procedure Set_AccountIndex(Param1: Integer); safecall;
    function Get_ActualLength: Integer; safecall;
    function Get_Amount: Double; safecall;
    procedure Set_Amount(Param1: Double); safecall;
    function Get_AmountShipped: Double; safecall;
    procedure Set_AmountShipped(Param1: Double); safecall;
    function Get_CloseOrder: WordBool; safecall;
    procedure Set_CloseOrder(Param1: WordBool); safecall;
    function Get_CostID: WideString; safecall;
    procedure Set_CostID(const Param1: WideString); safecall;
    function Get_CostOfSalesTrx: WordBool; safecall;
    procedure Set_CostOfSalesTrx(Param1: WordBool); safecall;
    function Get_CustomerIndex: Integer; safecall;
    procedure Set_CustomerIndex(Param1: Integer); safecall;
    function Get_DateCleared: OleVariant; safecall;
    procedure Set_DateCleared(Param1: OleVariant); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_EmployeeID: WideString; safecall;
    procedure Set_EmployeeID(const Param1: WideString); safecall;
    function Get_Extension: Double; safecall;
    procedure Set_Extension(Param1: Double); safecall;
    function Get_Flag1: WordBool; safecall;
    procedure Set_Flag1(Param1: WordBool); safecall;
    function Get_Flag2: WordBool; safecall;
    procedure Set_Flag2(Param1: WordBool); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_HasSerialNumbers: WordBool; safecall;
    procedure Set_HasSerialNumbers(Param1: WordBool); safecall;
    function Get_InvoiceNumber: WideString; safecall;
    procedure Set_InvoiceNumber(const Param1: WideString); safecall;
    function Get_ItemIndex: Integer; safecall;
    procedure Set_ItemIndex(Param1: Integer); safecall;
    function Get_JobIndex: Integer; safecall;
    procedure Set_JobIndex(Param1: Integer); safecall;
    function Get_JournalID: Integer; safecall;
    procedure Set_JournalID(Param1: Integer); safecall;
    function Get_LineNo: Smallint; safecall;
    procedure Set_LineNo(Param1: Smallint); safecall;
    function Get_LinkToOtherTrxIndex: Smallint; safecall;
    procedure Set_LinkToOtherTrxIndex(Param1: Smallint); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_OrderLine: Smallint; safecall;
    procedure Set_OrderLine(Param1: Smallint); safecall;
    function Get_OtherNRecord: Integer; safecall;
    procedure Set_OtherNRecord(Param1: Integer); safecall;
    function Get_PayrollItemIndex: Smallint; safecall;
    procedure Set_PayrollItemIndex(Param1: Smallint); safecall;
    function Get_PhaseID: WideString; safecall;
    procedure Set_PhaseID(const Param1: WideString); safecall;
    function Get_POCreated: WordBool; safecall;
    procedure Set_POCreated(Param1: WordBool); safecall;
    function Get_Quantity: Double; safecall;
    procedure Set_Quantity(Param1: Double); safecall;
    function Get_QuantityOrdered: Double; safecall;
    procedure Set_QuantityOrdered(Param1: Double); safecall;
    function Get_QuantityShipped: Double; safecall;
    procedure Set_QuantityShipped(Param1: Double); safecall;
    function Get_RecordByte(Index: Integer): Byte; safecall;
    function Get_ReimbursableExpense: WordBool; safecall;
    procedure Set_ReimbursableExpense(Param1: WordBool); safecall;
    function Get_StockingQuantityOrdered: Double; safecall;
    procedure Set_StockingQuantityOrdered(Param1: Double); safecall;
    function Get_StockingQuantityShipped: Double; safecall;
    procedure Set_StockingQuantityShipped(Param1: Double); safecall;
    function Get_StockingQuantity: Double; safecall;
    procedure Set_StockingQuantity(Param1: Double); safecall;
    function Get_StockingUnitPrice: Double; safecall;
    procedure Set_StockingUnitPrice(Param1: Double); safecall;
    function Get_TaxCode: WideString; safecall;
    procedure Set_TaxCode(const Param1: WideString); safecall;
    function Get_TaxType: Smallint; safecall;
    procedure Set_TaxType(Param1: Smallint); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    function Get_TrxType: Integer; safecall;
    procedure Set_TrxType(Param1: Integer); safecall;
    function Get_UMGUID: WideString; safecall;
    procedure Set_UMGUID(const Param1: WideString); safecall;
    function Get_UnitPrice: Double; safecall;
    procedure Set_UnitPrice(Param1: Double); safecall;
    function Get_UnusedInteger2: Smallint; safecall;
    procedure Set_UnusedInteger2(Param1: Smallint); safecall;
    function Get_VendorIndex: Integer; safecall;
    procedure Set_VendorIndex(Param1: Integer); safecall;
    property AccountID: WideString read Get_AccountID write Set_AccountID;
    property AccountIndex: Integer read Get_AccountIndex write Set_AccountIndex;
    property ActualLength: Integer read Get_ActualLength;
    property Amount: Double read Get_Amount write Set_Amount;
    property AmountShipped: Double read Get_AmountShipped write Set_AmountShipped;
    property CloseOrder: WordBool read Get_CloseOrder write Set_CloseOrder;
    property CostID: WideString read Get_CostID write Set_CostID;
    property CostOfSalesTrx: WordBool read Get_CostOfSalesTrx write Set_CostOfSalesTrx;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property Description: WideString read Get_Description write Set_Description;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
    property Extension: Double read Get_Extension write Set_Extension;
    property Flag1: WordBool read Get_Flag1 write Set_Flag1;
    property Flag2: WordBool read Get_Flag2 write Set_Flag2;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasSerialNumbers: WordBool read Get_HasSerialNumbers write Set_HasSerialNumbers;
    property InvoiceNumber: WideString read Get_InvoiceNumber write Set_InvoiceNumber;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property JournalID: Integer read Get_JournalID write Set_JournalID;
    property LineNo: Smallint read Get_LineNo write Set_LineNo;
    property LinkToOtherTrxIndex: Smallint read Get_LinkToOtherTrxIndex write Set_LinkToOtherTrxIndex;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property OrderLine: Smallint read Get_OrderLine write Set_OrderLine;
    property OtherNRecord: Integer read Get_OtherNRecord write Set_OtherNRecord;
    property PayrollItemIndex: Smallint read Get_PayrollItemIndex write Set_PayrollItemIndex;
    property PhaseID: WideString read Get_PhaseID write Set_PhaseID;
    property POCreated: WordBool read Get_POCreated write Set_POCreated;
    property Quantity: Double read Get_Quantity write Set_Quantity;
    property QuantityOrdered: Double read Get_QuantityOrdered write Set_QuantityOrdered;
    property QuantityShipped: Double read Get_QuantityShipped write Set_QuantityShipped;
    property RecordByte[Index: Integer]: Byte read Get_RecordByte;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property StockingQuantityOrdered: Double read Get_StockingQuantityOrdered write Set_StockingQuantityOrdered;
    property StockingQuantityShipped: Double read Get_StockingQuantityShipped write Set_StockingQuantityShipped;
    property StockingQuantity: Double read Get_StockingQuantity write Set_StockingQuantity;
    property StockingUnitPrice: Double read Get_StockingUnitPrice write Set_StockingUnitPrice;
    property TaxCode: WideString read Get_TaxCode write Set_TaxCode;
    property TaxType: Smallint read Get_TaxType write Set_TaxType;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property TrxType: Integer read Get_TrxType write Set_TrxType;
    property UMGUID: WideString read Get_UMGUID write Set_UMGUID;
    property UnitPrice: Double read Get_UnitPrice write Set_UnitPrice;
    property UnusedInteger2: Smallint read Get_UnusedInteger2 write Set_UnusedInteger2;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
  end;

// *********************************************************************//
// DispIntf:  _JrnlRowDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {410EED2D-74A6-4CF9-AF64-9B945AB6A785}
// *********************************************************************//
  _JrnlRowDisp = dispinterface
    ['{410EED2D-74A6-4CF9-AF64-9B945AB6A785}']
    function CloseFile: Smallint; dispid 1610809390;
    function Delete: Smallint; dispid 1610809391;
    function GetFirst(NRecord: Integer): Smallint; dispid 1610809392;
    function GetFirstForJob(JobIndex: Integer; const PhaseID: WideString; const CostID: WideString; 
                            TrxDate: OleVariant): Smallint; dispid 1610809393;
    function GetNext: Smallint; dispid 1610809394;
    function GetNextByJob: Smallint; dispid 1610809395;
    function Insert: Smallint; dispid 1610809396;
    function OpenFile: Smallint; dispid 1610809397;
    function ReadBytes: Smallint; dispid 1610809399;
    function RecordCount: Integer; dispid 1610809400;
    function StepFirst: Smallint; dispid 1610809401;
    function StepLast: Smallint; dispid 1610809402;
    function StepNext: Smallint; dispid 1610809403;
    function StepPrevious: Smallint; dispid 1610809404;
    function Update: Smallint; dispid 1610809405;
    property AccountID: WideString dispid 1745027117;
    property AccountIndex: Integer dispid 1745027116;
    property ActualLength: Integer readonly dispid 1745027115;
    property Amount: Double dispid 1745027114;
    property AmountShipped: Double dispid 1745027113;
    property CloseOrder: WordBool dispid 1745027112;
    property CostID: WideString dispid 1745027111;
    property CostOfSalesTrx: WordBool dispid 1745027110;
    property CustomerIndex: Integer dispid 1745027109;
    property DateCleared: OleVariant dispid 1745027108;
    property Description: WideString dispid 1745027107;
    property EmployeeID: WideString dispid 1745027106;
    property Extension: Double dispid 1745027105;
    property Flag1: WordBool dispid 1745027104;
    property Flag2: WordBool dispid 1745027103;
    property GUID: WideString dispid 1745027102;
    property HasSerialNumbers: WordBool dispid 1745027101;
    property InvoiceNumber: WideString dispid 1745027100;
    property ItemIndex: Integer dispid 1745027099;
    property JobIndex: Integer dispid 1745027098;
    property JournalID: Integer dispid 1745027097;
    property LineNo: Smallint dispid 1745027096;
    property LinkToOtherTrxIndex: Smallint dispid 1745027095;
    property NRecord: Integer dispid 1745027094;
    property OrderLine: Smallint dispid 1745027093;
    property OtherNRecord: Integer dispid 1745027092;
    property PayrollItemIndex: Smallint dispid 1745027091;
    property PhaseID: WideString dispid 1745027090;
    property POCreated: WordBool dispid 1745027089;
    property Quantity: Double dispid 1745027088;
    property QuantityOrdered: Double dispid 1745027087;
    property QuantityShipped: Double dispid 1745027086;
    property RecordByte[Index: Integer]: Byte readonly dispid 1745027085;
    property ReimbursableExpense: WordBool dispid 1745027084;
    property StockingQuantityOrdered: Double dispid 1745027083;
    property StockingQuantityShipped: Double dispid 1745027082;
    property StockingQuantity: Double dispid 1745027081;
    property StockingUnitPrice: Double dispid 1745027080;
    property TaxCode: WideString dispid 1745027079;
    property TaxType: Smallint dispid 1745027078;
    property TrxDate: OleVariant dispid 1745027077;
    property TrxType: Integer dispid 1745027076;
    property UMGUID: WideString dispid 1745027075;
    property UnitPrice: Double dispid 1745027074;
    property UnusedInteger2: Smallint dispid 1745027073;
    property VendorIndex: Integer dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _DefaultPriceLevels
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C4D13436-3E5C-490A-8FFB-0C3E213DF341}
// *********************************************************************//
  _DefaultPriceLevels = interface(IDispatch)
    ['{C4D13436-3E5C-490A-8FFB-0C3E213DF341}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Read: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Amount(Index: Smallint): Double; safecall;
    procedure Set_Amount(Index: Smallint; Param2: Double); safecall;
    function Get_Enabled(Index: Smallint): Smallint; safecall;
    procedure Set_Enabled(Index: Smallint; Param2: Smallint); safecall;
    function Get_Level(Index: Smallint): Smallint; safecall;
    procedure Set_Level(Index: Smallint; Param2: Smallint); safecall;
    function Get_Method(Index: Smallint): Smallint; safecall;
    procedure Set_Method(Index: Smallint; Param2: Smallint); safecall;
    function Get_Name(Index: Smallint): WideString; safecall;
    procedure Set_Name(Index: Smallint; const Param2: WideString); safecall;
    function Get_RoundBy(Index: Smallint): Double; safecall;
    procedure Set_RoundBy(Index: Smallint; Param2: Double); safecall;
    function Get_Rounding(Index: Smallint): Smallint; safecall;
    procedure Set_Rounding(Index: Smallint; Param2: Smallint); safecall;
    function Get_Use(Index: Smallint): Smallint; safecall;
    procedure Set_Use(Index: Smallint; Param2: Smallint); safecall;
    function Get_Unused1(Index: Smallint): Double; safecall;
    procedure Set_Unused1(Index: Smallint; Param2: Double); safecall;
    function Get_Unused2(Index: Smallint): Double; safecall;
    procedure Set_Unused2(Index: Smallint; Param2: Double); safecall;
    function Get_Unused3(Index: Smallint): Smallint; safecall;
    procedure Set_Unused3(Index: Smallint; Param2: Smallint); safecall;
    property Amount[Index: Smallint]: Double read Get_Amount write Set_Amount;
    property Enabled[Index: Smallint]: Smallint read Get_Enabled write Set_Enabled;
    property Level[Index: Smallint]: Smallint read Get_Level write Set_Level;
    property Method[Index: Smallint]: Smallint read Get_Method write Set_Method;
    property Name[Index: Smallint]: WideString read Get_Name write Set_Name;
    property RoundBy[Index: Smallint]: Double read Get_RoundBy write Set_RoundBy;
    property Rounding[Index: Smallint]: Smallint read Get_Rounding write Set_Rounding;
    property Use[Index: Smallint]: Smallint read Get_Use write Set_Use;
    property Unused1[Index: Smallint]: Double read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Double read Get_Unused2 write Set_Unused2;
    property Unused3[Index: Smallint]: Smallint read Get_Unused3 write Set_Unused3;
  end;

// *********************************************************************//
// DispIntf:  _DefaultPriceLevelsDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C4D13436-3E5C-490A-8FFB-0C3E213DF341}
// *********************************************************************//
  _DefaultPriceLevelsDisp = dispinterface
    ['{C4D13436-3E5C-490A-8FFB-0C3E213DF341}']
    function CloseFile: Smallint; dispid 1610809355;
    function OpenFile: Smallint; dispid 1610809356;
    function Read: Smallint; dispid 1610809357;
    function Update: Smallint; dispid 1610809358;
    property Amount[Index: Smallint]: Double dispid 1745027082;
    property Enabled[Index: Smallint]: Smallint dispid 1745027081;
    property Level[Index: Smallint]: Smallint dispid 1745027080;
    property Method[Index: Smallint]: Smallint dispid 1745027079;
    property Name[Index: Smallint]: WideString dispid 1745027078;
    property RoundBy[Index: Smallint]: Double dispid 1745027077;
    property Rounding[Index: Smallint]: Smallint dispid 1745027076;
    property Use[Index: Smallint]: Smallint dispid 1745027075;
    property Unused1[Index: Smallint]: Double dispid 1745027074;
    property Unused2[Index: Smallint]: Double dispid 1745027073;
    property Unused3[Index: Smallint]: Smallint dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _RaiseHistory
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8574F6FB-F69A-4B62-90F5-9F80ED9660FE}
// *********************************************************************//
  _RaiseHistory = interface(IDispatch)
    ['{8574F6FB-F69A-4B62-90F5-9F80ED9660FE}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_BaseAmount: Double; safecall;
    procedure Set_BaseAmount(Param1: Double); safecall;
    function Get_DateLastRaise: OleVariant; safecall;
    procedure Set_DateLastRaise(Param1: OleVariant); safecall;
    function Get_EmployeeIndex: Integer; safecall;
    procedure Set_EmployeeIndex(Param1: Integer); safecall;
    function Get_NewAmount: Double; safecall;
    procedure Set_NewAmount(Param1: Double); safecall;
    function Get_RaiseNote: WideString; safecall;
    procedure Set_RaiseNote(const Param1: WideString); safecall;
    function Get_RaiseAmount: Double; safecall;
    procedure Set_RaiseAmount(Param1: Double); safecall;
    function Get_RaisePercent: Double; safecall;
    procedure Set_RaisePercent(Param1: Double); safecall;
    function Get_Rate: Smallint; safecall;
    procedure Set_Rate(Param1: Smallint); safecall;
    property BaseAmount: Double read Get_BaseAmount write Set_BaseAmount;
    property DateLastRaise: OleVariant read Get_DateLastRaise write Set_DateLastRaise;
    property EmployeeIndex: Integer read Get_EmployeeIndex write Set_EmployeeIndex;
    property NewAmount: Double read Get_NewAmount write Set_NewAmount;
    property RaiseNote: WideString read Get_RaiseNote write Set_RaiseNote;
    property RaiseAmount: Double read Get_RaiseAmount write Set_RaiseAmount;
    property RaisePercent: Double read Get_RaisePercent write Set_RaisePercent;
    property Rate: Smallint read Get_Rate write Set_Rate;
  end;

// *********************************************************************//
// DispIntf:  _RaiseHistoryDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8574F6FB-F69A-4B62-90F5-9F80ED9660FE}
// *********************************************************************//
  _RaiseHistoryDisp = dispinterface
    ['{8574F6FB-F69A-4B62-90F5-9F80ED9660FE}']
    function CloseFile: Smallint; dispid 1610809352;
    function OpenFile: Smallint; dispid 1610809353;
    function Delete: Smallint; dispid 1610809354;
    function Insert: Smallint; dispid 1610809355;
    function RecordCount: Integer; dispid 1610809357;
    function StepFirst: Smallint; dispid 1610809358;
    function StepLast: Smallint; dispid 1610809359;
    function StepNext: Smallint; dispid 1610809360;
    function StepPrevious: Smallint; dispid 1610809361;
    function Update: Smallint; dispid 1610809362;
    property BaseAmount: Double dispid 1745027079;
    property DateLastRaise: OleVariant dispid 1745027078;
    property EmployeeIndex: Integer dispid 1745027077;
    property NewAmount: Double dispid 1745027076;
    property RaiseNote: WideString dispid 1745027075;
    property RaiseAmount: Double dispid 1745027074;
    property RaisePercent: Double dispid 1745027073;
    property Rate: Smallint dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _BOMHistory
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DDCDC5E2-2F2F-490B-A89C-634E2BDE7F34}
// *********************************************************************//
  _BOMHistory = interface(IDispatch)
    ['{DDCDC5E2-2F2F-490B-A89C-634E2BDE7F34}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(RecordNumber: Integer): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AssemblyRecordNo: Integer; safecall;
    procedure Set_AssemblyRecordNo(Param1: Integer); safecall;
    function Get_ComponentQtyRequired(Index: Smallint): Double; safecall;
    procedure Set_ComponentQtyRequired(Index: Smallint; Param2: Double); safecall;
    function Get_ComponentRecordNumber(Index: Smallint): Integer; safecall;
    procedure Set_ComponentRecordNumber(Index: Smallint; Param2: Integer); safecall;
    function Get_EffectiveDate: OleVariant; safecall;
    procedure Set_EffectiveDate(Param1: OleVariant); safecall;
    function Get_LastUpdateCounter: Integer; safecall;
    procedure Set_LastUpdateCounter(Param1: Integer); safecall;
    function Get_NoComponents: Integer; safecall;
    procedure Set_NoComponents(Param1: Integer); safecall;
    function Get_RecordNumber: Integer; safecall;
    procedure Set_RecordNumber(Param1: Integer); safecall;
    function Get_RevisionNote: WideString; safecall;
    procedure Set_RevisionNote(const Param1: WideString); safecall;
    function Get_RevisionNumber: Integer; safecall;
    procedure Set_RevisionNumber(Param1: Integer); safecall;
    property AssemblyRecordNo: Integer read Get_AssemblyRecordNo write Set_AssemblyRecordNo;
    property ComponentQtyRequired[Index: Smallint]: Double read Get_ComponentQtyRequired write Set_ComponentQtyRequired;
    property ComponentRecordNumber[Index: Smallint]: Integer read Get_ComponentRecordNumber write Set_ComponentRecordNumber;
    property EffectiveDate: OleVariant read Get_EffectiveDate write Set_EffectiveDate;
    property LastUpdateCounter: Integer read Get_LastUpdateCounter write Set_LastUpdateCounter;
    property NoComponents: Integer read Get_NoComponents write Set_NoComponents;
    property RecordNumber: Integer read Get_RecordNumber write Set_RecordNumber;
    property RevisionNote: WideString read Get_RevisionNote write Set_RevisionNote;
    property RevisionNumber: Integer read Get_RevisionNumber write Set_RevisionNumber;
  end;

// *********************************************************************//
// DispIntf:  _BOMHistoryDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DDCDC5E2-2F2F-490B-A89C-634E2BDE7F34}
// *********************************************************************//
  _BOMHistoryDisp = dispinterface
    ['{DDCDC5E2-2F2F-490B-A89C-634E2BDE7F34}']
    function CloseFile: Smallint; dispid 1610809353;
    function OpenFile: Smallint; dispid 1610809354;
    function Delete: Smallint; dispid 1610809355;
    function GetEqual(RecordNumber: Integer): Smallint; dispid 1610809356;
    function Insert: Smallint; dispid 1610809357;
    function RecordCount: Integer; dispid 1610809359;
    function StepFirst: Smallint; dispid 1610809360;
    function StepLast: Smallint; dispid 1610809361;
    function StepNext: Smallint; dispid 1610809362;
    function StepPrevious: Smallint; dispid 1610809363;
    function Update: Smallint; dispid 1610809364;
    property AssemblyRecordNo: Integer dispid 1745027080;
    property ComponentQtyRequired[Index: Smallint]: Double dispid 1745027079;
    property ComponentRecordNumber[Index: Smallint]: Integer dispid 1745027078;
    property EffectiveDate: OleVariant dispid 1745027077;
    property LastUpdateCounter: Integer dispid 1745027076;
    property NoComponents: Integer dispid 1745027075;
    property RecordNumber: Integer dispid 1745027074;
    property RevisionNote: WideString dispid 1745027073;
    property RevisionNumber: Integer dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _BOMItems
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A4C9C3FE-2F45-4486-BD10-B1872E62663A}
// *********************************************************************//
  _BOMItems = interface(IDispatch)
    ['{A4C9C3FE-2F45-4486-BD10-B1872E62663A}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(RecordNumber: Integer): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AssemblyRecordNo: Integer; safecall;
    procedure Set_AssemblyRecordNo(Param1: Integer); safecall;
    function Get_ComponentNumber: Integer; safecall;
    procedure Set_ComponentNumber(Param1: Integer); safecall;
    function Get_ComponentRecordNo: Integer; safecall;
    procedure Set_ComponentRecordNo(Param1: Integer); safecall;
    function Get_EffectiveDate: OleVariant; safecall;
    procedure Set_EffectiveDate(Param1: OleVariant); safecall;
    function Get_QtyRequired: Double; safecall;
    procedure Set_QtyRequired(Param1: Double); safecall;
    function Get_RecordNumber: Integer; safecall;
    procedure Set_RecordNumber(Param1: Integer); safecall;
    function Get_RevisionNumber: Integer; safecall;
    procedure Set_RevisionNumber(Param1: Integer); safecall;
    property AssemblyRecordNo: Integer read Get_AssemblyRecordNo write Set_AssemblyRecordNo;
    property ComponentNumber: Integer read Get_ComponentNumber write Set_ComponentNumber;
    property ComponentRecordNo: Integer read Get_ComponentRecordNo write Set_ComponentRecordNo;
    property EffectiveDate: OleVariant read Get_EffectiveDate write Set_EffectiveDate;
    property QtyRequired: Double read Get_QtyRequired write Set_QtyRequired;
    property RecordNumber: Integer read Get_RecordNumber write Set_RecordNumber;
    property RevisionNumber: Integer read Get_RevisionNumber write Set_RevisionNumber;
  end;

// *********************************************************************//
// DispIntf:  _BOMItemsDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A4C9C3FE-2F45-4486-BD10-B1872E62663A}
// *********************************************************************//
  _BOMItemsDisp = dispinterface
    ['{A4C9C3FE-2F45-4486-BD10-B1872E62663A}']
    function CloseFile: Smallint; dispid 1610809351;
    function OpenFile: Smallint; dispid 1610809352;
    function Delete: Smallint; dispid 1610809353;
    function GetEqual(RecordNumber: Integer): Smallint; dispid 1610809354;
    function Insert: Smallint; dispid 1610809355;
    function RecordCount: Integer; dispid 1610809357;
    function StepFirst: Smallint; dispid 1610809358;
    function StepLast: Smallint; dispid 1610809359;
    function StepNext: Smallint; dispid 1610809360;
    function StepPrevious: Smallint; dispid 1610809361;
    function Update: Smallint; dispid 1610809362;
    property AssemblyRecordNo: Integer dispid 1745027078;
    property ComponentNumber: Integer dispid 1745027077;
    property ComponentRecordNo: Integer dispid 1745027076;
    property EffectiveDate: OleVariant dispid 1745027075;
    property QtyRequired: Double dispid 1745027074;
    property RecordNumber: Integer dispid 1745027073;
    property RevisionNumber: Integer dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _QuantityDiscount
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {56FD6770-B7B7-46F3-ABBD-A3A22C89654B}
// *********************************************************************//
  _QuantityDiscount = interface(IDispatch)
    ['{56FD6770-B7B7-46F3-ABBD-A3A22C89654B}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(const RecordNumber: WideString): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_CalcMethod: Smallint; safecall;
    procedure Set_CalcMethod(Param1: Smallint); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_Discount(Index: Smallint): Double; safecall;
    procedure Set_Discount(Index: Smallint; Param2: Double); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_Inactive: WordBool; safecall;
    procedure Set_Inactive(Param1: WordBool); safecall;
    function Get_MinQuantity(Index: Smallint): Double; safecall;
    procedure Set_MinQuantity(Index: Smallint; Param2: Double); safecall;
    function Get_PriceLevelSelected(Index: Smallint): WordBool; safecall;
    procedure Set_PriceLevelSelected(Index: Smallint; Param2: WordBool); safecall;
    function Get_RecordNumber: WideString; safecall;
    procedure Set_RecordNumber(const Param1: WideString); safecall;
    function Get_RoundingCents: Double; safecall;
    procedure Set_RoundingCents(Param1: Double); safecall;
    function Get_RoundingMethod: Smallint; safecall;
    procedure Set_RoundingMethod(Param1: Smallint); safecall;
    function Get_Unused1: Integer; safecall;
    procedure Set_Unused1(Param1: Integer); safecall;
    function Get_QuantitySpecified(Index: Smallint): WordBool; safecall;
    procedure Set_QuantitySpecified(Index: Smallint; Param2: WordBool); safecall;
    property CalcMethod: Smallint read Get_CalcMethod write Set_CalcMethod;
    property Description: WideString read Get_Description write Set_Description;
    property Discount[Index: Smallint]: Double read Get_Discount write Set_Discount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property MinQuantity[Index: Smallint]: Double read Get_MinQuantity write Set_MinQuantity;
    property PriceLevelSelected[Index: Smallint]: WordBool read Get_PriceLevelSelected write Set_PriceLevelSelected;
    property RecordNumber: WideString read Get_RecordNumber write Set_RecordNumber;
    property RoundingCents: Double read Get_RoundingCents write Set_RoundingCents;
    property RoundingMethod: Smallint read Get_RoundingMethod write Set_RoundingMethod;
    property Unused1: Integer read Get_Unused1 write Set_Unused1;
    property QuantitySpecified[Index: Smallint]: WordBool read Get_QuantitySpecified write Set_QuantitySpecified;
  end;

// *********************************************************************//
// DispIntf:  _QuantityDiscountDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {56FD6770-B7B7-46F3-ABBD-A3A22C89654B}
// *********************************************************************//
  _QuantityDiscountDisp = dispinterface
    ['{56FD6770-B7B7-46F3-ABBD-A3A22C89654B}']
    function CloseFile: Smallint; dispid 1610809356;
    function OpenFile: Smallint; dispid 1610809357;
    function Delete: Smallint; dispid 1610809358;
    function GetEqual(const RecordNumber: WideString): Smallint; dispid 1610809359;
    function Insert: Smallint; dispid 1610809360;
    function RecordCount: Integer; dispid 1610809362;
    function StepFirst: Smallint; dispid 1610809363;
    function StepLast: Smallint; dispid 1610809364;
    function StepNext: Smallint; dispid 1610809365;
    function StepPrevious: Smallint; dispid 1610809366;
    function Update: Smallint; dispid 1610809367;
    property CalcMethod: Smallint dispid 1745027083;
    property Description: WideString dispid 1745027082;
    property Discount[Index: Smallint]: Double dispid 1745027081;
    property GUID: WideString dispid 1745027080;
    property Inactive: WordBool dispid 1745027079;
    property MinQuantity[Index: Smallint]: Double dispid 1745027078;
    property PriceLevelSelected[Index: Smallint]: WordBool dispid 1745027077;
    property RecordNumber: WideString dispid 1745027076;
    property RoundingCents: Double dispid 1745027075;
    property RoundingMethod: Smallint dispid 1745027074;
    property Unused1: Integer dispid 1745027073;
    property QuantitySpecified[Index: Smallint]: WordBool dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _UnitMeasure
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6612DC34-5B03-4093-8084-1262B6202C97}
// *********************************************************************//
  _UnitMeasure = interface(IDispatch)
    ['{6612DC34-5B03-4093-8084-1262B6202C97}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(const ID: WideString): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Param1: WideString); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const Param1: WideString); safecall;
    function Get_ID: WideString; safecall;
    procedure Set_ID(const Param1: WideString); safecall;
    function Get_Inactive: WordBool; safecall;
    procedure Set_Inactive(Param1: WordBool); safecall;
    function Get_NoStockingUnits: Double; safecall;
    procedure Set_NoStockingUnits(Param1: Double); safecall;
    property Description: WideString read Get_Description write Set_Description;
    property GUID: WideString read Get_GUID write Set_GUID;
    property ID: WideString read Get_ID write Set_ID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property NoStockingUnits: Double read Get_NoStockingUnits write Set_NoStockingUnits;
  end;

// *********************************************************************//
// DispIntf:  _UnitMeasureDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6612DC34-5B03-4093-8084-1262B6202C97}
// *********************************************************************//
  _UnitMeasureDisp = dispinterface
    ['{6612DC34-5B03-4093-8084-1262B6202C97}']
    function CloseFile: Smallint; dispid 1610809349;
    function OpenFile: Smallint; dispid 1610809350;
    function Delete: Smallint; dispid 1610809351;
    function GetEqual(const ID: WideString): Smallint; dispid 1610809352;
    function Insert: Smallint; dispid 1610809353;
    function RecordCount: Integer; dispid 1610809355;
    function StepFirst: Smallint; dispid 1610809356;
    function StepLast: Smallint; dispid 1610809357;
    function StepNext: Smallint; dispid 1610809358;
    function StepPrevious: Smallint; dispid 1610809359;
    function Update: Smallint; dispid 1610809360;
    property Description: WideString dispid 1745027076;
    property GUID: WideString dispid 1745027075;
    property ID: WideString dispid 1745027074;
    property Inactive: WordBool dispid 1745027073;
    property NoStockingUnits: Double dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _WorkTicket
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1BCB22F2-AD72-4D87-AC16-605C15E938D5}
// *********************************************************************//
  _WorkTicket = interface(IDispatch)
    ['{1BCB22F2-AD72-4D87-AC16-605C15E938D5}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function GetEqual(RecordNumber: Integer): Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_AssemblyRevNo: Integer; safecall;
    procedure Set_AssemblyRevNo(Param1: Integer); safecall;
    function Get_Closed: WordBool; safecall;
    procedure Set_Closed(Param1: WordBool); safecall;
    function Get_ComponentActualHours(Index: Smallint): Double; safecall;
    procedure Set_ComponentActualHours(Index: Smallint; Param2: Double); safecall;
    function Get_ComponentFinished(Index: Smallint): WordBool; safecall;
    procedure Set_ComponentFinished(Index: Smallint; Param2: WordBool); safecall;
    function Get_ComponentPOCreated(Index: Smallint): WordBool; safecall;
    procedure Set_ComponentPOCreated(Index: Smallint; Param2: WordBool); safecall;
    function Get_ComponentIndex(Index: Smallint): Integer; safecall;
    procedure Set_ComponentIndex(Index: Smallint; Param2: Integer); safecall;
    function Get_ComponentQuantityRequired(Index: Smallint): Double; safecall;
    procedure Set_ComponentQuantityRequired(Index: Smallint; Param2: Double); safecall;
    function Get_DateComplete: OleVariant; safecall;
    procedure Set_DateComplete(Param1: OleVariant); safecall;
    function Get_DateNeededBy: OleVariant; safecall;
    procedure Set_DateNeededBy(Param1: OleVariant); safecall;
    function Get_DateStarted: OleVariant; safecall;
    procedure Set_DateStarted(Param1: OleVariant); safecall;
    function Get_EmployeeIndex: Integer; safecall;
    procedure Set_EmployeeIndex(Param1: Integer); safecall;
    function Get_Internal1: Integer; safecall;
    procedure Set_Internal1(Param1: Integer); safecall;
    function Get_Internal2: Integer; safecall;
    procedure Set_Internal2(Param1: Integer); safecall;
    function Get_Internal3: Integer; safecall;
    procedure Set_Internal3(Param1: Integer); safecall;
    function Get_ItemIndex: Integer; safecall;
    procedure Set_ItemIndex(Param1: Integer); safecall;
    function Get_Note: WideString; safecall;
    procedure Set_Note(const Param1: WideString); safecall;
    function Get_NComponents: Integer; safecall;
    procedure Set_NComponents(Param1: Integer); safecall;
    function Get_NRecord: Integer; safecall;
    procedure Set_NRecord(Param1: Integer); safecall;
    function Get_Number: WideString; safecall;
    procedure Set_Number(const Param1: WideString); safecall;
    function Get_QtyToBuild: Double; safecall;
    procedure Set_QtyToBuild(Param1: Double); safecall;
    function Get_RecordNumber: Integer; safecall;
    procedure Set_RecordNumber(Param1: Integer); safecall;
    function Get_TotalEstHours: Double; safecall;
    procedure Set_TotalEstHours(Param1: Double); safecall;
    function Get_TrxDate: OleVariant; safecall;
    procedure Set_TrxDate(Param1: OleVariant); safecall;
    property AssemblyRevNo: Integer read Get_AssemblyRevNo write Set_AssemblyRevNo;
    property Closed: WordBool read Get_Closed write Set_Closed;
    property ComponentActualHours[Index: Smallint]: Double read Get_ComponentActualHours write Set_ComponentActualHours;
    property ComponentFinished[Index: Smallint]: WordBool read Get_ComponentFinished write Set_ComponentFinished;
    property ComponentPOCreated[Index: Smallint]: WordBool read Get_ComponentPOCreated write Set_ComponentPOCreated;
    property ComponentIndex[Index: Smallint]: Integer read Get_ComponentIndex write Set_ComponentIndex;
    property ComponentQuantityRequired[Index: Smallint]: Double read Get_ComponentQuantityRequired write Set_ComponentQuantityRequired;
    property DateComplete: OleVariant read Get_DateComplete write Set_DateComplete;
    property DateNeededBy: OleVariant read Get_DateNeededBy write Set_DateNeededBy;
    property DateStarted: OleVariant read Get_DateStarted write Set_DateStarted;
    property EmployeeIndex: Integer read Get_EmployeeIndex write Set_EmployeeIndex;
    property Internal1: Integer read Get_Internal1 write Set_Internal1;
    property Internal2: Integer read Get_Internal2 write Set_Internal2;
    property Internal3: Integer read Get_Internal3 write Set_Internal3;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property Note: WideString read Get_Note write Set_Note;
    property NComponents: Integer read Get_NComponents write Set_NComponents;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Number: WideString read Get_Number write Set_Number;
    property QtyToBuild: Double read Get_QtyToBuild write Set_QtyToBuild;
    property RecordNumber: Integer read Get_RecordNumber write Set_RecordNumber;
    property TotalEstHours: Double read Get_TotalEstHours write Set_TotalEstHours;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
  end;

// *********************************************************************//
// DispIntf:  _WorkTicketDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1BCB22F2-AD72-4D87-AC16-605C15E938D5}
// *********************************************************************//
  _WorkTicketDisp = dispinterface
    ['{1BCB22F2-AD72-4D87-AC16-605C15E938D5}']
    function CloseFile: Smallint; dispid 1610809367;
    function OpenFile: Smallint; dispid 1610809368;
    function Delete: Smallint; dispid 1610809369;
    function GetEqual(RecordNumber: Integer): Smallint; dispid 1610809370;
    function Insert: Smallint; dispid 1610809371;
    function RecordCount: Integer; dispid 1610809373;
    function StepFirst: Smallint; dispid 1610809374;
    function StepLast: Smallint; dispid 1610809375;
    function StepNext: Smallint; dispid 1610809376;
    function StepPrevious: Smallint; dispid 1610809377;
    function Update: Smallint; dispid 1610809378;
    property AssemblyRevNo: Integer dispid 1745027094;
    property Closed: WordBool dispid 1745027093;
    property ComponentActualHours[Index: Smallint]: Double dispid 1745027092;
    property ComponentFinished[Index: Smallint]: WordBool dispid 1745027091;
    property ComponentPOCreated[Index: Smallint]: WordBool dispid 1745027090;
    property ComponentIndex[Index: Smallint]: Integer dispid 1745027089;
    property ComponentQuantityRequired[Index: Smallint]: Double dispid 1745027088;
    property DateComplete: OleVariant dispid 1745027087;
    property DateNeededBy: OleVariant dispid 1745027086;
    property DateStarted: OleVariant dispid 1745027085;
    property EmployeeIndex: Integer dispid 1745027084;
    property Internal1: Integer dispid 1745027083;
    property Internal2: Integer dispid 1745027082;
    property Internal3: Integer dispid 1745027081;
    property ItemIndex: Integer dispid 1745027080;
    property Note: WideString dispid 1745027079;
    property NComponents: Integer dispid 1745027078;
    property NRecord: Integer dispid 1745027077;
    property Number: WideString dispid 1745027076;
    property QtyToBuild: Double dispid 1745027075;
    property RecordNumber: Integer dispid 1745027074;
    property TotalEstHours: Double dispid 1745027073;
    property TrxDate: OleVariant dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _SelectJob
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A1FC6EE3-9A7F-4C51-AAC0-C1375E8840E5}
// *********************************************************************//
  _SelectJob = interface(IDispatch)
    ['{A1FC6EE3-9A7F-4C51-AAC0-C1375E8840E5}']
    function ShowOpen: OleVariant; safecall;
    function Get_CostIndex: Integer; safecall;
    procedure Set_CostIndex(Param1: Integer); safecall;
    procedure Set_ExcludeInactive(Param1: WordBool); safecall;
    function Get_JobIndex: Integer; safecall;
    procedure Set_JobIndex(Param1: Integer); safecall;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; safecall;
    function Get_PhaseIndex: Integer; safecall;
    procedure Set_PhaseIndex(Param1: Integer); safecall;
    property CostIndex: Integer read Get_CostIndex write Set_CostIndex;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property PhaseIndex: Integer read Get_PhaseIndex write Set_PhaseIndex;
  end;

// *********************************************************************//
// DispIntf:  _SelectJobDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A1FC6EE3-9A7F-4C51-AAC0-C1375E8840E5}
// *********************************************************************//
  _SelectJobDisp = dispinterface
    ['{A1FC6EE3-9A7F-4C51-AAC0-C1375E8840E5}']
    function ShowOpen: OleVariant; dispid 1610809348;
    property CostIndex: Integer dispid 1745027075;
    property ExcludeInactive: WordBool writeonly dispid 1745027074;
    property JobIndex: Integer dispid 1745027073;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant; dispid 1610809349;
    property PhaseIndex: Integer dispid 1745027072;
  end;

// *********************************************************************//
// Interface: _JrnlSNo
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {539D2157-A6A7-4DBC-BDF6-C517DF39C45B}
// *********************************************************************//
  _JrnlSNo = interface(IDispatch)
    ['{539D2157-A6A7-4DBC-BDF6-C517DF39C45B}']
    function CloseFile: Smallint; safecall;
    function OpenFile: Smallint; safecall;
    function Delete: Smallint; safecall;
    function Insert: Smallint; safecall;
    function RecordCount: Integer; safecall;
    function StepFirst: Smallint; safecall;
    function StepLast: Smallint; safecall;
    function StepNext: Smallint; safecall;
    function StepPrevious: Smallint; safecall;
    function Update: Smallint; safecall;
    function Get_ItemRecordNumber: Integer; safecall;
    procedure Set_ItemRecordNumber(Param1: Integer); safecall;
    function Get_JrnlPostOrder: Integer; safecall;
    procedure Set_JrnlPostOrder(Param1: Integer); safecall;
    function Get_JrnlRowIndex: Integer; safecall;
    procedure Set_JrnlRowIndex(Param1: Integer); safecall;
    function Get_SerialNumber: WideString; safecall;
    procedure Set_SerialNumber(const Param1: WideString); safecall;
    function Get_SerialRecordNumber: Integer; safecall;
    procedure Set_SerialRecordNumber(Param1: Integer); safecall;
    function Get_TransactionClass: Integer; safecall;
    procedure Set_TransactionClass(Param1: Integer); safecall;
    function Get_TransactionCost: Double; safecall;
    procedure Set_TransactionCost(Param1: Double); safecall;
    function Get_TransactionDate: OleVariant; safecall;
    procedure Set_TransactionDate(Param1: OleVariant); safecall;
    function Get_WorkTktReferenceNo: Integer; safecall;
    procedure Set_WorkTktReferenceNo(Param1: Integer); safecall;
    property ItemRecordNumber: Integer read Get_ItemRecordNumber write Set_ItemRecordNumber;
    property JrnlPostOrder: Integer read Get_JrnlPostOrder write Set_JrnlPostOrder;
    property JrnlRowIndex: Integer read Get_JrnlRowIndex write Set_JrnlRowIndex;
    property SerialNumber: WideString read Get_SerialNumber write Set_SerialNumber;
    property SerialRecordNumber: Integer read Get_SerialRecordNumber write Set_SerialRecordNumber;
    property TransactionClass: Integer read Get_TransactionClass write Set_TransactionClass;
    property TransactionCost: Double read Get_TransactionCost write Set_TransactionCost;
    property TransactionDate: OleVariant read Get_TransactionDate write Set_TransactionDate;
    property WorkTktReferenceNo: Integer read Get_WorkTktReferenceNo write Set_WorkTktReferenceNo;
  end;

// *********************************************************************//
// DispIntf:  _JrnlSNoDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {539D2157-A6A7-4DBC-BDF6-C517DF39C45B}
// *********************************************************************//
  _JrnlSNoDisp = dispinterface
    ['{539D2157-A6A7-4DBC-BDF6-C517DF39C45B}']
    function CloseFile: Smallint; dispid 1610809353;
    function OpenFile: Smallint; dispid 1610809354;
    function Delete: Smallint; dispid 1610809355;
    function Insert: Smallint; dispid 1610809356;
    function RecordCount: Integer; dispid 1610809358;
    function StepFirst: Smallint; dispid 1610809359;
    function StepLast: Smallint; dispid 1610809360;
    function StepNext: Smallint; dispid 1610809361;
    function StepPrevious: Smallint; dispid 1610809362;
    function Update: Smallint; dispid 1610809363;
    property ItemRecordNumber: Integer dispid 1745027080;
    property JrnlPostOrder: Integer dispid 1745027079;
    property JrnlRowIndex: Integer dispid 1745027078;
    property SerialNumber: WideString dispid 1745027077;
    property SerialRecordNumber: Integer dispid 1745027076;
    property TransactionClass: Integer dispid 1745027075;
    property TransactionCost: Double dispid 1745027074;
    property TransactionDate: OleVariant dispid 1745027073;
    property WorkTktReferenceNo: Integer dispid 1745027072;
  end;

// *********************************************************************//
// The Class CoCompanyInformation provides a Create and CreateRemote method to          
// create instances of the default interface _CompanyInformation exposed by              
// the CoClass CompanyInformation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCompanyInformation = class
    class function Create: _CompanyInformation;
    class function CreateRemote(const MachineName: string): _CompanyInformation;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCompanyInformation
// Help String      : Data in the COMPANY.DAT file
// Default Interface: _CompanyInformation
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCompanyInformationProperties= class;
{$ENDIF}
  TCompanyInformation = class(TOleServer)
  private
    FIntf:        _CompanyInformation;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCompanyInformationProperties;
    function      GetServerProperties: TCompanyInformationProperties;
{$ENDIF}
    function      GetDefaultInterface: _CompanyInformation;
  protected
    procedure InitServerData; override;
    function Get_ActualLength: Integer;
    function Get_AddrCountry: WideString;
    procedure Set_AddrCountry(const Param1: WideString);
    function Get_AddrLine1: WideString;
    procedure Set_AddrLine1(const Param1: WideString);
    function Get_AddrLine2: WideString;
    procedure Set_AddrLine2(const Param1: WideString);
    function Get_AddrCity: WideString;
    procedure Set_AddrCity(const Param1: WideString);
    function Get_AddrPostalCode: WideString;
    procedure Set_AddrPostalCode(const Param1: WideString);
    function Get_AddrState: WideString;
    procedure Set_AddrState(const Param1: WideString);
    function Get_ArchiveDate: OleVariant;
    procedure Set_ArchiveDate(Param1: OleVariant);
    function Get_ArchiveDescription: WideString;
    procedure Set_ArchiveDescription(const Param1: WideString);
    function Get_BusinessType: WideString;
    function Get_BusinessTypeCode: Byte;
    procedure Set_BusinessTypeCode(Param1: Byte);
    function Get_CashBasis: WordBool;
    procedure Set_CashBasis(Param1: WordBool);
    function Get_CompanyName: WideString;
    procedure Set_CompanyName(const Param1: WideString);
    function Get_CompanySpecial1a: Integer;
    procedure Set_CompanySpecial1a(Param1: Integer);
    function Get_CompanySpecial1b: Integer;
    procedure Set_CompanySpecial1b(Param1: Integer);
    function Get_CompanySpecial1c: Integer;
    procedure Set_CompanySpecial1c(Param1: Integer);
    function Get_CompanySpecial1d: Integer;
    procedure Set_CompanySpecial1d(Param1: Integer);
    function Get_Email: WideString;
    procedure Set_Email(const Param1: WideString);
    function Get_ETACompanyID: WideString;
    procedure Set_ETACompanyID(const Param1: WideString);
    function Get_ETAFlag: WordBool;
    procedure Set_ETAFlag(Param1: WordBool);
    function Get_ETAUnknown: WideString;
    procedure Set_ETAUnknown(const Param1: WideString);
    function Get_eTimeIndex: WideString;
    procedure Set_eTimeIndex(const Param1: WideString);
    function Get_Fax: WideString;
    procedure Set_Fax(const Param1: WideString);
    function Get_FEIN: WideString;
    procedure Set_FEIN(const Param1: WideString);
    function Get_Index: Integer;
    function Get_LastAccessTestDate: OleVariant;
    procedure Set_LastAccessTestDate(Param1: OleVariant);
    function Get_LastArchiveDate: OleVariant;
    procedure Set_LastArchiveDate(Param1: OleVariant);
    function Get_RealTime: WordBool;
    procedure Set_RealTime(Param1: WordBool);
    function Get_SEIN: WideString;
    procedure Set_SEIN(const Param1: WideString);
    function Get_SetupFlag(Index: Smallint): WordBool;
    procedure Set_SetupFlag(Index: Smallint; Param2: WordBool);
    function Get_StructureLength: Integer;
    function Get_SUIN: WideString;
    procedure Set_SUIN(const Param1: WideString);
    function Get_Telephone: WideString;
    procedure Set_Telephone(const Param1: WideString);
    function Get_Unused1: Byte;
    procedure Set_Unused1(Param1: Byte);
    function Get_Unused2: Byte;
    procedure Set_Unused2(Param1: Byte);
    function Get_Unused3(Index: Smallint): Byte;
    procedure Set_Unused3(Index: Smallint; Param2: Byte);
    function Get_Unused4(Index: Smallint): Byte;
    procedure Set_Unused4(Index: Smallint; Param2: Byte);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_Unknown1(Index: Smallint): Byte;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte);
    function Get_Unused11(Index: Smallint): Byte;
    procedure Set_Unused11(Index: Smallint; Param2: Byte);
    procedure Set_UseAuditTrail(Param1: WordBool);
    function Get_UseAuditTrail: WordBool;
    function Get_Version: Double;
    function Get_WebSite: WideString;
    procedure Set_WebSite(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _CompanyInformation);
    procedure Disconnect; override;
    function CloseFile: OleVariant;
    function OpenFile: Smallint;
    function StepFirst: Smallint;
    function Update: Smallint;
    property DefaultInterface: _CompanyInformation read GetDefaultInterface;
    property ActualLength: Integer read Get_ActualLength;
    property ArchiveDate: OleVariant read Get_ArchiveDate write Set_ArchiveDate;
    property BusinessType: WideString read Get_BusinessType;
    property Index: Integer read Get_Index;
    property LastAccessTestDate: OleVariant read Get_LastAccessTestDate write Set_LastAccessTestDate;
    property LastArchiveDate: OleVariant read Get_LastArchiveDate write Set_LastArchiveDate;
    property SetupFlag[Index: Smallint]: WordBool read Get_SetupFlag write Set_SetupFlag;
    property StructureLength: Integer read Get_StructureLength;
    property Unused3[Index: Smallint]: Byte read Get_Unused3 write Set_Unused3;
    property Unused4[Index: Smallint]: Byte read Get_Unused4 write Set_Unused4;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property Unknown1[Index: Smallint]: Byte read Get_Unknown1 write Set_Unknown1;
    property Unused11[Index: Smallint]: Byte read Get_Unused11 write Set_Unused11;
    property Version: Double read Get_Version;
    property AddrCountry: WideString read Get_AddrCountry write Set_AddrCountry;
    property AddrLine1: WideString read Get_AddrLine1 write Set_AddrLine1;
    property AddrLine2: WideString read Get_AddrLine2 write Set_AddrLine2;
    property AddrCity: WideString read Get_AddrCity write Set_AddrCity;
    property AddrPostalCode: WideString read Get_AddrPostalCode write Set_AddrPostalCode;
    property AddrState: WideString read Get_AddrState write Set_AddrState;
    property ArchiveDescription: WideString read Get_ArchiveDescription write Set_ArchiveDescription;
    property BusinessTypeCode: Byte read Get_BusinessTypeCode write Set_BusinessTypeCode;
    property CashBasis: WordBool read Get_CashBasis write Set_CashBasis;
    property CompanyName: WideString read Get_CompanyName write Set_CompanyName;
    property CompanySpecial1a: Integer read Get_CompanySpecial1a write Set_CompanySpecial1a;
    property CompanySpecial1b: Integer read Get_CompanySpecial1b write Set_CompanySpecial1b;
    property CompanySpecial1c: Integer read Get_CompanySpecial1c write Set_CompanySpecial1c;
    property CompanySpecial1d: Integer read Get_CompanySpecial1d write Set_CompanySpecial1d;
    property Email: WideString read Get_Email write Set_Email;
    property ETACompanyID: WideString read Get_ETACompanyID write Set_ETACompanyID;
    property ETAFlag: WordBool read Get_ETAFlag write Set_ETAFlag;
    property ETAUnknown: WideString read Get_ETAUnknown write Set_ETAUnknown;
    property eTimeIndex: WideString read Get_eTimeIndex write Set_eTimeIndex;
    property Fax: WideString read Get_Fax write Set_Fax;
    property FEIN: WideString read Get_FEIN write Set_FEIN;
    property RealTime: WordBool read Get_RealTime write Set_RealTime;
    property SEIN: WideString read Get_SEIN write Set_SEIN;
    property SUIN: WideString read Get_SUIN write Set_SUIN;
    property Telephone: WideString read Get_Telephone write Set_Telephone;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unused2: Byte read Get_Unused2 write Set_Unused2;
    property UseAuditTrail: WordBool read Get_UseAuditTrail write Set_UseAuditTrail;
    property WebSite: WideString read Get_WebSite write Set_WebSite;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCompanyInformationProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCompanyInformation
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCompanyInformationProperties = class(TPersistent)
  private
    FServer:    TCompanyInformation;
    function    GetDefaultInterface: _CompanyInformation;
    constructor Create(AServer: TCompanyInformation);
  protected
    function Get_ActualLength: Integer;
    function Get_AddrCountry: WideString;
    procedure Set_AddrCountry(const Param1: WideString);
    function Get_AddrLine1: WideString;
    procedure Set_AddrLine1(const Param1: WideString);
    function Get_AddrLine2: WideString;
    procedure Set_AddrLine2(const Param1: WideString);
    function Get_AddrCity: WideString;
    procedure Set_AddrCity(const Param1: WideString);
    function Get_AddrPostalCode: WideString;
    procedure Set_AddrPostalCode(const Param1: WideString);
    function Get_AddrState: WideString;
    procedure Set_AddrState(const Param1: WideString);
    function Get_ArchiveDate: OleVariant;
    procedure Set_ArchiveDate(Param1: OleVariant);
    function Get_ArchiveDescription: WideString;
    procedure Set_ArchiveDescription(const Param1: WideString);
    function Get_BusinessType: WideString;
    function Get_BusinessTypeCode: Byte;
    procedure Set_BusinessTypeCode(Param1: Byte);
    function Get_CashBasis: WordBool;
    procedure Set_CashBasis(Param1: WordBool);
    function Get_CompanyName: WideString;
    procedure Set_CompanyName(const Param1: WideString);
    function Get_CompanySpecial1a: Integer;
    procedure Set_CompanySpecial1a(Param1: Integer);
    function Get_CompanySpecial1b: Integer;
    procedure Set_CompanySpecial1b(Param1: Integer);
    function Get_CompanySpecial1c: Integer;
    procedure Set_CompanySpecial1c(Param1: Integer);
    function Get_CompanySpecial1d: Integer;
    procedure Set_CompanySpecial1d(Param1: Integer);
    function Get_Email: WideString;
    procedure Set_Email(const Param1: WideString);
    function Get_ETACompanyID: WideString;
    procedure Set_ETACompanyID(const Param1: WideString);
    function Get_ETAFlag: WordBool;
    procedure Set_ETAFlag(Param1: WordBool);
    function Get_ETAUnknown: WideString;
    procedure Set_ETAUnknown(const Param1: WideString);
    function Get_eTimeIndex: WideString;
    procedure Set_eTimeIndex(const Param1: WideString);
    function Get_Fax: WideString;
    procedure Set_Fax(const Param1: WideString);
    function Get_FEIN: WideString;
    procedure Set_FEIN(const Param1: WideString);
    function Get_Index: Integer;
    function Get_LastAccessTestDate: OleVariant;
    procedure Set_LastAccessTestDate(Param1: OleVariant);
    function Get_LastArchiveDate: OleVariant;
    procedure Set_LastArchiveDate(Param1: OleVariant);
    function Get_RealTime: WordBool;
    procedure Set_RealTime(Param1: WordBool);
    function Get_SEIN: WideString;
    procedure Set_SEIN(const Param1: WideString);
    function Get_SetupFlag(Index: Smallint): WordBool;
    procedure Set_SetupFlag(Index: Smallint; Param2: WordBool);
    function Get_StructureLength: Integer;
    function Get_SUIN: WideString;
    procedure Set_SUIN(const Param1: WideString);
    function Get_Telephone: WideString;
    procedure Set_Telephone(const Param1: WideString);
    function Get_Unused1: Byte;
    procedure Set_Unused1(Param1: Byte);
    function Get_Unused2: Byte;
    procedure Set_Unused2(Param1: Byte);
    function Get_Unused3(Index: Smallint): Byte;
    procedure Set_Unused3(Index: Smallint; Param2: Byte);
    function Get_Unused4(Index: Smallint): Byte;
    procedure Set_Unused4(Index: Smallint; Param2: Byte);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_Unknown1(Index: Smallint): Byte;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte);
    function Get_Unused11(Index: Smallint): Byte;
    procedure Set_Unused11(Index: Smallint; Param2: Byte);
    procedure Set_UseAuditTrail(Param1: WordBool);
    function Get_UseAuditTrail: WordBool;
    function Get_Version: Double;
    function Get_WebSite: WideString;
    procedure Set_WebSite(const Param1: WideString);
  public
    property DefaultInterface: _CompanyInformation read GetDefaultInterface;
  published
    property AddrCountry: WideString read Get_AddrCountry write Set_AddrCountry;
    property AddrLine1: WideString read Get_AddrLine1 write Set_AddrLine1;
    property AddrLine2: WideString read Get_AddrLine2 write Set_AddrLine2;
    property AddrCity: WideString read Get_AddrCity write Set_AddrCity;
    property AddrPostalCode: WideString read Get_AddrPostalCode write Set_AddrPostalCode;
    property AddrState: WideString read Get_AddrState write Set_AddrState;
    property ArchiveDescription: WideString read Get_ArchiveDescription write Set_ArchiveDescription;
    property BusinessTypeCode: Byte read Get_BusinessTypeCode write Set_BusinessTypeCode;
    property CashBasis: WordBool read Get_CashBasis write Set_CashBasis;
    property CompanyName: WideString read Get_CompanyName write Set_CompanyName;
    property CompanySpecial1a: Integer read Get_CompanySpecial1a write Set_CompanySpecial1a;
    property CompanySpecial1b: Integer read Get_CompanySpecial1b write Set_CompanySpecial1b;
    property CompanySpecial1c: Integer read Get_CompanySpecial1c write Set_CompanySpecial1c;
    property CompanySpecial1d: Integer read Get_CompanySpecial1d write Set_CompanySpecial1d;
    property Email: WideString read Get_Email write Set_Email;
    property ETACompanyID: WideString read Get_ETACompanyID write Set_ETACompanyID;
    property ETAFlag: WordBool read Get_ETAFlag write Set_ETAFlag;
    property ETAUnknown: WideString read Get_ETAUnknown write Set_ETAUnknown;
    property eTimeIndex: WideString read Get_eTimeIndex write Set_eTimeIndex;
    property Fax: WideString read Get_Fax write Set_Fax;
    property FEIN: WideString read Get_FEIN write Set_FEIN;
    property RealTime: WordBool read Get_RealTime write Set_RealTime;
    property SEIN: WideString read Get_SEIN write Set_SEIN;
    property SUIN: WideString read Get_SUIN write Set_SUIN;
    property Telephone: WideString read Get_Telephone write Set_Telephone;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unused2: Byte read Get_Unused2 write Set_Unused2;
    property UseAuditTrail: WordBool read Get_UseAuditTrail write Set_UseAuditTrail;
    property WebSite: WideString read Get_WebSite write Set_WebSite;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBtrieve provides a Create and CreateRemote method to          
// create instances of the default interface _Btrieve exposed by              
// the CoClass Btrieve. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBtrieve = class
    class function Create: _Btrieve;
    class function CreateRemote(const MachineName: string): _Btrieve;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBtrieve
// Help String      : Interface to Btrieve engine
// Default Interface: _Btrieve
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBtrieveProperties= class;
{$ENDIF}
  TBtrieve = class(TOleServer)
  private
    FIntf:        _Btrieve;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBtrieveProperties;
    function      GetServerProperties: TBtrieveProperties;
{$ENDIF}
    function      GetDefaultInterface: _Btrieve;
  protected
    procedure InitServerData; override;
    function Get_ClientVersion: WideString;
    function Get_CompanyPath: WideString;
    procedure Set_CompanyPath(const Param1: WideString);
    function Get_ConnectCount: Integer;
    function Get_ErrorNumber: Integer;
    function Get_ErrorText: WideString;
    function Get_PawComVersion: WideString;
    function Get_RequestorVersion: WideString;
    function Get_ServerVersion: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Btrieve);
    procedure Disconnect; override;
    function Connect1(const Path: WideString): Smallint;
    function Disconnect1: Smallint;
    function Reset: Smallint;
    function ErrorMessage(ErrorNumber: Smallint): OleVariant;
    property DefaultInterface: _Btrieve read GetDefaultInterface;
    property ClientVersion: WideString read Get_ClientVersion;
    property ConnectCount: Integer read Get_ConnectCount;
    property ErrorNumber: Integer read Get_ErrorNumber;
    property ErrorText: WideString read Get_ErrorText;
    property PawComVersion: WideString read Get_PawComVersion;
    property RequestorVersion: WideString read Get_RequestorVersion;
    property ServerVersion: WideString read Get_ServerVersion;
    property CompanyPath: WideString read Get_CompanyPath write Set_CompanyPath;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBtrieveProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBtrieve
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBtrieveProperties = class(TPersistent)
  private
    FServer:    TBtrieve;
    function    GetDefaultInterface: _Btrieve;
    constructor Create(AServer: TBtrieve);
  protected
    function Get_ClientVersion: WideString;
    function Get_CompanyPath: WideString;
    procedure Set_CompanyPath(const Param1: WideString);
    function Get_ConnectCount: Integer;
    function Get_ErrorNumber: Integer;
    function Get_ErrorText: WideString;
    function Get_PawComVersion: WideString;
    function Get_RequestorVersion: WideString;
    function Get_ServerVersion: WideString;
  public
    property DefaultInterface: _Btrieve read GetDefaultInterface;
  published
    property CompanyPath: WideString read Get_CompanyPath write Set_CompanyPath;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSelectCompany provides a Create and CreateRemote method to          
// create instances of the default interface _SelectCompany exposed by              
// the CoClass SelectCompany. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectCompany = class
    class function Create: _SelectCompany;
    class function CreateRemote(const MachineName: string): _SelectCompany;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSelectCompany
// Help String      : 
// Default Interface: _SelectCompany
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSelectCompanyProperties= class;
{$ENDIF}
  TSelectCompany = class(TOleServer)
  private
    FIntf:        _SelectCompany;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSelectCompanyProperties;
    function      GetServerProperties: TSelectCompanyProperties;
{$ENDIF}
    function      GetDefaultInterface: _SelectCompany;
  protected
    procedure InitServerData; override;
    function Get_CompanyName: WideString;
    function Get_CompanyPath: WideString;
    procedure Set_CompanyPath(const Param1: WideString);
    procedure Set_Icon(const Param1: WideString);
    procedure Set_IniPath(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SelectCompany);
    procedure Disconnect; override;
    function ShowOpen: OleVariant;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
    property DefaultInterface: _SelectCompany read GetDefaultInterface;
    property CompanyName: WideString read Get_CompanyName;
    property Icon: WideString write Set_Icon;
    property IniPath: WideString write Set_IniPath;
    property CompanyPath: WideString read Get_CompanyPath write Set_CompanyPath;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSelectCompanyProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSelectCompany
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSelectCompanyProperties = class(TPersistent)
  private
    FServer:    TSelectCompany;
    function    GetDefaultInterface: _SelectCompany;
    constructor Create(AServer: TSelectCompany);
  protected
    function Get_CompanyName: WideString;
    function Get_CompanyPath: WideString;
    procedure Set_CompanyPath(const Param1: WideString);
    procedure Set_Icon(const Param1: WideString);
    procedure Set_IniPath(const Param1: WideString);
  public
    property DefaultInterface: _SelectCompany read GetDefaultInterface;
  published
    property CompanyPath: WideString read Get_CompanyPath write Set_CompanyPath;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoPeachw provides a Create and CreateRemote method to          
// create instances of the default interface _Peachw exposed by              
// the CoClass Peachw. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPeachw = class
    class function Create: _Peachw;
    class function CreateRemote(const MachineName: string): _Peachw;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPeachw
// Help String      : 
// Default Interface: _Peachw
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TPeachwProperties= class;
{$ENDIF}
  TPeachw = class(TOleServer)
  private
    FIntf:        _Peachw;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TPeachwProperties;
    function      GetServerProperties: TPeachwProperties;
{$ENDIF}
    function      GetDefaultInterface: _Peachw;
  protected
    procedure InitServerData; override;
    function Get_Datapath: WideString;
    function Get_ProgramPath: WideString;
    function Get_GUID: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Peachw);
    procedure Disconnect; override;
    property DefaultInterface: _Peachw read GetDefaultInterface;
    property Datapath: WideString read Get_Datapath;
    property ProgramPath: WideString read Get_ProgramPath;
    property GUID: WideString read Get_GUID;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TPeachwProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TPeachw
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TPeachwProperties = class(TPersistent)
  private
    FServer:    TPeachw;
    function    GetDefaultInterface: _Peachw;
    constructor Create(AServer: TPeachw);
  protected
    function Get_Datapath: WideString;
    function Get_ProgramPath: WideString;
    function Get_GUID: WideString;
  public
    property DefaultInterface: _Peachw read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDefaultCustomerData provides a Create and CreateRemote method to          
// create instances of the default interface _DefaultCustomerData exposed by              
// the CoClass DefaultCustomerData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDefaultCustomerData = class
    class function Create: _DefaultCustomerData;
    class function CreateRemote(const MachineName: string): _DefaultCustomerData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDefaultCustomerData
// Help String      : 
// Default Interface: _DefaultCustomerData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDefaultCustomerDataProperties= class;
{$ENDIF}
  TDefaultCustomerData = class(TOleServer)
  private
    FIntf:        _DefaultCustomerData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDefaultCustomerDataProperties;
    function      GetServerProperties: TDefaultCustomerDataProperties;
{$ENDIF}
    function      GetDefaultInterface: _DefaultCustomerData;
  protected
    procedure InitServerData; override;
    function Get_ActualLength: Integer;
    function Get_AgeByDueDate: WordBool;
    procedure Set_AgeByDueDate(Param1: WordBool);
    function Get_AgingDays(Index: Smallint): Smallint;
    procedure Set_AgingDays(Index: Smallint; Param2: Smallint);
    function Get_AgingHeading(Index: Smallint): WideString;
    procedure Set_AgingHeading(Index: Smallint; const Param2: WideString);
    function Get_ARAccount: WideString;
    procedure Set_ARAccount(const Param1: WideString);
    function Get_AssignDepositTicketIDs: WordBool;
    procedure Set_AssignDepositTicketIDs(Param1: WordBool);
    function Get_CashAccount: WideString;
    procedure Set_CashAccount(const Param1: WideString);
    function Get_ChargeFinanceCharges: WordBool;
    procedure Set_ChargeFinanceCharges(Param1: WordBool);
    function Get_COD: WordBool;
    procedure Set_COD(Param1: WordBool);
    function Get_CreditLimit: Double;
    procedure Set_CreditLimit(Param1: Double);
    function Get_CustomFieldEnabled(Index: Smallint): WordBool;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
    function Get_CustomFieldLabel(Index: Smallint): WideString;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
    function Get_DefaultPayMethod: WideString;
    procedure Set_DefaultPayMethod(const Param1: WideString);
    function Get_DiscountDays: Smallint;
    procedure Set_DiscountDays(Param1: Smallint);
    function Get_DiscountGLAccount: WideString;
    procedure Set_DiscountGLAccount(const Param1: WideString);
    function Get_DiscountPercent: Double;
    procedure Set_DiscountPercent(Param1: Double);
    function Get_DueAtEndOfMonth: WordBool;
    procedure Set_DueAtEndOfMonth(Param1: WordBool);
    function Get_DueOnDayOfNextMonth: WordBool;
    procedure Set_DueOnDayOfNextMonth(Param1: WordBool);
    function Get_FCAnnualInterestRate: Double;
    procedure Set_FCAnnualInterestRate(Param1: Double);
    function Get_FCAppearsAs: WideString;
    procedure Set_FCAppearsAs(const Param1: WideString);
    function Get_FCChargeInterest: WordBool;
    procedure Set_FCChargeInterest(Param1: WordBool);
    function Get_FCDays: Smallint;
    procedure Set_FCDays(Param1: Smallint);
    function Get_FCGLAccount: WideString;
    procedure Set_FCGLAccount(const Param1: WideString);
    function Get_FCInterestAbove: Double;
    procedure Set_FCInterestAbove(Param1: Double);
    function Get_FCMinimum: Double;
    procedure Set_FCMinimum(Param1: Double);
    function Get_FCOverdueLimit: Double;
    procedure Set_FCOverdueLimit(Param1: Double);
    function Get_GLSalesAccount: WideString;
    procedure Set_GLSalesAccount(const Param1: WideString);
    function Get_NetDueDays: Smallint;
    procedure Set_NetDueDays(Param1: Smallint);
    function Get_NextInvoiceNumber: WideString;
    procedure Set_NextInvoiceNumber(const Param1: WideString);
    function Get_NextQuoteNumber: WideString;
    procedure Set_NextQuoteNumber(const Param1: WideString);
    function Get_NextSONumber: WideString;
    procedure Set_NextSONumber(const Param1: WideString);
    function Get_NLabels: Smallint;
    function Get_PaymentMethod(Index: Smallint): WideString;
    procedure Set_PaymentMethod(Index: Smallint; const Param2: WideString);
    function Get_Prepaid: WordBool;
    procedure Set_Prepaid(Param1: WordBool);
    function Get_TaxAccount: WideString;
    procedure Set_TaxAccount(const Param1: WideString);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Smallint;
    procedure Set_Unused3(Param1: Smallint);
    function Get_Unused4: Byte;
    procedure Set_Unused4(Param1: Byte);
    function Get_Unused5(Index: Smallint): Smallint;
    procedure Set_Unused5(Index: Smallint; Param2: Smallint);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused10(Index: Smallint): Byte;
    procedure Set_Unused10(Index: Smallint; Param2: Byte);
    function Get_Unused11(Index: Smallint): Byte;
    procedure Set_Unused11(Index: Smallint; Param2: Byte);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DefaultCustomerData);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Read: Smallint;
    function Update: Smallint;
    property DefaultInterface: _DefaultCustomerData read GetDefaultInterface;
    property ActualLength: Integer read Get_ActualLength;
    property AgingDays[Index: Smallint]: Smallint read Get_AgingDays write Set_AgingDays;
    property AgingHeading[Index: Smallint]: WideString read Get_AgingHeading write Set_AgingHeading;
    property CustomFieldEnabled[Index: Smallint]: WordBool read Get_CustomFieldEnabled write Set_CustomFieldEnabled;
    property CustomFieldLabel[Index: Smallint]: WideString read Get_CustomFieldLabel write Set_CustomFieldLabel;
    property NLabels: Smallint read Get_NLabels;
    property PaymentMethod[Index: Smallint]: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused5[Index: Smallint]: Smallint read Get_Unused5 write Set_Unused5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property Unused10[Index: Smallint]: Byte read Get_Unused10 write Set_Unused10;
    property Unused11[Index: Smallint]: Byte read Get_Unused11 write Set_Unused11;
    property AgeByDueDate: WordBool read Get_AgeByDueDate write Set_AgeByDueDate;
    property ARAccount: WideString read Get_ARAccount write Set_ARAccount;
    property AssignDepositTicketIDs: WordBool read Get_AssignDepositTicketIDs write Set_AssignDepositTicketIDs;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property ChargeFinanceCharges: WordBool read Get_ChargeFinanceCharges write Set_ChargeFinanceCharges;
    property COD: WordBool read Get_COD write Set_COD;
    property CreditLimit: Double read Get_CreditLimit write Set_CreditLimit;
    property DefaultPayMethod: WideString read Get_DefaultPayMethod write Set_DefaultPayMethod;
    property DiscountDays: Smallint read Get_DiscountDays write Set_DiscountDays;
    property DiscountGLAccount: WideString read Get_DiscountGLAccount write Set_DiscountGLAccount;
    property DiscountPercent: Double read Get_DiscountPercent write Set_DiscountPercent;
    property DueAtEndOfMonth: WordBool read Get_DueAtEndOfMonth write Set_DueAtEndOfMonth;
    property DueOnDayOfNextMonth: WordBool read Get_DueOnDayOfNextMonth write Set_DueOnDayOfNextMonth;
    property FCAnnualInterestRate: Double read Get_FCAnnualInterestRate write Set_FCAnnualInterestRate;
    property FCAppearsAs: WideString read Get_FCAppearsAs write Set_FCAppearsAs;
    property FCChargeInterest: WordBool read Get_FCChargeInterest write Set_FCChargeInterest;
    property FCDays: Smallint read Get_FCDays write Set_FCDays;
    property FCGLAccount: WideString read Get_FCGLAccount write Set_FCGLAccount;
    property FCInterestAbove: Double read Get_FCInterestAbove write Set_FCInterestAbove;
    property FCMinimum: Double read Get_FCMinimum write Set_FCMinimum;
    property FCOverdueLimit: Double read Get_FCOverdueLimit write Set_FCOverdueLimit;
    property GLSalesAccount: WideString read Get_GLSalesAccount write Set_GLSalesAccount;
    property NetDueDays: Smallint read Get_NetDueDays write Set_NetDueDays;
    property NextInvoiceNumber: WideString read Get_NextInvoiceNumber write Set_NextInvoiceNumber;
    property NextQuoteNumber: WideString read Get_NextQuoteNumber write Set_NextQuoteNumber;
    property NextSONumber: WideString read Get_NextSONumber write Set_NextSONumber;
    property Prepaid: WordBool read Get_Prepaid write Set_Prepaid;
    property TaxAccount: WideString read Get_TaxAccount write Set_TaxAccount;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDefaultCustomerDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDefaultCustomerData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDefaultCustomerDataProperties = class(TPersistent)
  private
    FServer:    TDefaultCustomerData;
    function    GetDefaultInterface: _DefaultCustomerData;
    constructor Create(AServer: TDefaultCustomerData);
  protected
    function Get_ActualLength: Integer;
    function Get_AgeByDueDate: WordBool;
    procedure Set_AgeByDueDate(Param1: WordBool);
    function Get_AgingDays(Index: Smallint): Smallint;
    procedure Set_AgingDays(Index: Smallint; Param2: Smallint);
    function Get_AgingHeading(Index: Smallint): WideString;
    procedure Set_AgingHeading(Index: Smallint; const Param2: WideString);
    function Get_ARAccount: WideString;
    procedure Set_ARAccount(const Param1: WideString);
    function Get_AssignDepositTicketIDs: WordBool;
    procedure Set_AssignDepositTicketIDs(Param1: WordBool);
    function Get_CashAccount: WideString;
    procedure Set_CashAccount(const Param1: WideString);
    function Get_ChargeFinanceCharges: WordBool;
    procedure Set_ChargeFinanceCharges(Param1: WordBool);
    function Get_COD: WordBool;
    procedure Set_COD(Param1: WordBool);
    function Get_CreditLimit: Double;
    procedure Set_CreditLimit(Param1: Double);
    function Get_CustomFieldEnabled(Index: Smallint): WordBool;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
    function Get_CustomFieldLabel(Index: Smallint): WideString;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
    function Get_DefaultPayMethod: WideString;
    procedure Set_DefaultPayMethod(const Param1: WideString);
    function Get_DiscountDays: Smallint;
    procedure Set_DiscountDays(Param1: Smallint);
    function Get_DiscountGLAccount: WideString;
    procedure Set_DiscountGLAccount(const Param1: WideString);
    function Get_DiscountPercent: Double;
    procedure Set_DiscountPercent(Param1: Double);
    function Get_DueAtEndOfMonth: WordBool;
    procedure Set_DueAtEndOfMonth(Param1: WordBool);
    function Get_DueOnDayOfNextMonth: WordBool;
    procedure Set_DueOnDayOfNextMonth(Param1: WordBool);
    function Get_FCAnnualInterestRate: Double;
    procedure Set_FCAnnualInterestRate(Param1: Double);
    function Get_FCAppearsAs: WideString;
    procedure Set_FCAppearsAs(const Param1: WideString);
    function Get_FCChargeInterest: WordBool;
    procedure Set_FCChargeInterest(Param1: WordBool);
    function Get_FCDays: Smallint;
    procedure Set_FCDays(Param1: Smallint);
    function Get_FCGLAccount: WideString;
    procedure Set_FCGLAccount(const Param1: WideString);
    function Get_FCInterestAbove: Double;
    procedure Set_FCInterestAbove(Param1: Double);
    function Get_FCMinimum: Double;
    procedure Set_FCMinimum(Param1: Double);
    function Get_FCOverdueLimit: Double;
    procedure Set_FCOverdueLimit(Param1: Double);
    function Get_GLSalesAccount: WideString;
    procedure Set_GLSalesAccount(const Param1: WideString);
    function Get_NetDueDays: Smallint;
    procedure Set_NetDueDays(Param1: Smallint);
    function Get_NextInvoiceNumber: WideString;
    procedure Set_NextInvoiceNumber(const Param1: WideString);
    function Get_NextQuoteNumber: WideString;
    procedure Set_NextQuoteNumber(const Param1: WideString);
    function Get_NextSONumber: WideString;
    procedure Set_NextSONumber(const Param1: WideString);
    function Get_NLabels: Smallint;
    function Get_PaymentMethod(Index: Smallint): WideString;
    procedure Set_PaymentMethod(Index: Smallint; const Param2: WideString);
    function Get_Prepaid: WordBool;
    procedure Set_Prepaid(Param1: WordBool);
    function Get_TaxAccount: WideString;
    procedure Set_TaxAccount(const Param1: WideString);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Smallint;
    procedure Set_Unused3(Param1: Smallint);
    function Get_Unused4: Byte;
    procedure Set_Unused4(Param1: Byte);
    function Get_Unused5(Index: Smallint): Smallint;
    procedure Set_Unused5(Index: Smallint; Param2: Smallint);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused10(Index: Smallint): Byte;
    procedure Set_Unused10(Index: Smallint; Param2: Byte);
    function Get_Unused11(Index: Smallint): Byte;
    procedure Set_Unused11(Index: Smallint; Param2: Byte);
  public
    property DefaultInterface: _DefaultCustomerData read GetDefaultInterface;
  published
    property AgeByDueDate: WordBool read Get_AgeByDueDate write Set_AgeByDueDate;
    property ARAccount: WideString read Get_ARAccount write Set_ARAccount;
    property AssignDepositTicketIDs: WordBool read Get_AssignDepositTicketIDs write Set_AssignDepositTicketIDs;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property ChargeFinanceCharges: WordBool read Get_ChargeFinanceCharges write Set_ChargeFinanceCharges;
    property COD: WordBool read Get_COD write Set_COD;
    property CreditLimit: Double read Get_CreditLimit write Set_CreditLimit;
    property DefaultPayMethod: WideString read Get_DefaultPayMethod write Set_DefaultPayMethod;
    property DiscountDays: Smallint read Get_DiscountDays write Set_DiscountDays;
    property DiscountGLAccount: WideString read Get_DiscountGLAccount write Set_DiscountGLAccount;
    property DiscountPercent: Double read Get_DiscountPercent write Set_DiscountPercent;
    property DueAtEndOfMonth: WordBool read Get_DueAtEndOfMonth write Set_DueAtEndOfMonth;
    property DueOnDayOfNextMonth: WordBool read Get_DueOnDayOfNextMonth write Set_DueOnDayOfNextMonth;
    property FCAnnualInterestRate: Double read Get_FCAnnualInterestRate write Set_FCAnnualInterestRate;
    property FCAppearsAs: WideString read Get_FCAppearsAs write Set_FCAppearsAs;
    property FCChargeInterest: WordBool read Get_FCChargeInterest write Set_FCChargeInterest;
    property FCDays: Smallint read Get_FCDays write Set_FCDays;
    property FCGLAccount: WideString read Get_FCGLAccount write Set_FCGLAccount;
    property FCInterestAbove: Double read Get_FCInterestAbove write Set_FCInterestAbove;
    property FCMinimum: Double read Get_FCMinimum write Set_FCMinimum;
    property FCOverdueLimit: Double read Get_FCOverdueLimit write Set_FCOverdueLimit;
    property GLSalesAccount: WideString read Get_GLSalesAccount write Set_GLSalesAccount;
    property NetDueDays: Smallint read Get_NetDueDays write Set_NetDueDays;
    property NextInvoiceNumber: WideString read Get_NextInvoiceNumber write Set_NextInvoiceNumber;
    property NextQuoteNumber: WideString read Get_NextQuoteNumber write Set_NextQuoteNumber;
    property NextSONumber: WideString read Get_NextSONumber write Set_NextSONumber;
    property Prepaid: WordBool read Get_Prepaid write Set_Prepaid;
    property TaxAccount: WideString read Get_TaxAccount write Set_TaxAccount;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoChart provides a Create and CreateRemote method to          
// create instances of the default interface _Chart exposed by              
// the CoClass Chart. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChart = class
    class function Create: _Chart;
    class function CreateRemote(const MachineName: string): _Chart;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TChart
// Help String      : 
// Default Interface: _Chart
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TChartProperties= class;
{$ENDIF}
  TChart = class(TOleServer)
  private
    FIntf:        _Chart;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TChartProperties;
    function      GetServerProperties: TChartProperties;
{$ENDIF}
    function      GetDefaultInterface: _Chart;
  protected
    procedure InitServerData; override;
    function Get_AccountDescription: WideString;
    procedure Set_AccountDescription(var Param1: WideString);
    function Get_AccountDescription2: WideString;
    procedure Set_AccountDescription2(const Param1: WideString);
    function Get_AccountID: WideString;
    procedure Set_AccountID(const Param1: WideString);
    function Get_AccountType: Smallint;
    procedure Set_AccountType(Param1: Smallint);
    function Get_AccountTypeDescription: WideString;
    function Get_Activity(Index: Smallint): Double;
    procedure Set_Activity(Index: Smallint; Param2: Double);
    function Get_Budget(Index: Smallint): Double;
    procedure Set_Budget(Index: Smallint; Param2: Double);
    function Get_Credit(Index: Smallint): Double;
    procedure Set_Credit(Index: Smallint; Param2: Double);
    function Get_Debit(Index: Smallint): Double;
    procedure Set_Debit(Index: Smallint; Param2: Double);
    function Get_eCheckID: Smallint;
    procedure Set_eCheckID(Param1: Smallint);
    function Get_GL1099Index: Smallint;
    procedure Set_GL1099Index(Param1: Smallint);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_Internal1: WideString;
    procedure Set_Internal1(const Param1: WideString);
    function Get_LastDepositTicket: WideString;
    procedure Set_LastDepositTicket(const Param1: WideString);
    function Get_NextRef: WideString;
    procedure Set_NextRef(const Param1: WideString);
    function Get_ReceiptNum: WideString;
    procedure Set_ReceiptNum(const Param1: WideString);
    function Get_Revised(Index: Smallint): Double;
    procedure Set_Revised(Index: Smallint; Param2: Double);
    function Get_TaxCode: WideString;
    procedure Set_TaxCode(const Param1: WideString);
    function Get_Unknown(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Chart);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(Index: Integer): Smallint;
    function GetForAccountID(const AccountID: WideString): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _Chart read GetDefaultInterface;
    property AccountTypeDescription: WideString read Get_AccountTypeDescription;
    property Activity[Index: Smallint]: Double read Get_Activity write Set_Activity;
    property Budget[Index: Smallint]: Double read Get_Budget write Set_Budget;
    property Credit[Index: Smallint]: Double read Get_Credit write Set_Credit;
    property Debit[Index: Smallint]: Double read Get_Debit write Set_Debit;
    property Revised[Index: Smallint]: Double read Get_Revised write Set_Revised;
    property Unknown[Index: Smallint]: Byte read Get_Unknown;
    property Unused6[Index: Smallint]: Byte write Set_Unused6;
    property AccountDescription: WideString read Get_AccountDescription write Set_AccountDescription;
    property AccountDescription2: WideString read Get_AccountDescription2 write Set_AccountDescription2;
    property AccountID: WideString read Get_AccountID write Set_AccountID;
    property AccountType: Smallint read Get_AccountType write Set_AccountType;
    property eCheckID: Smallint read Get_eCheckID write Set_eCheckID;
    property GL1099Index: Smallint read Get_GL1099Index write Set_GL1099Index;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property Internal1: WideString read Get_Internal1 write Set_Internal1;
    property LastDepositTicket: WideString read Get_LastDepositTicket write Set_LastDepositTicket;
    property NextRef: WideString read Get_NextRef write Set_NextRef;
    property ReceiptNum: WideString read Get_ReceiptNum write Set_ReceiptNum;
    property TaxCode: WideString read Get_TaxCode write Set_TaxCode;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TChartProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TChart
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TChartProperties = class(TPersistent)
  private
    FServer:    TChart;
    function    GetDefaultInterface: _Chart;
    constructor Create(AServer: TChart);
  protected
    function Get_AccountDescription: WideString;
    procedure Set_AccountDescription(var Param1: WideString);
    function Get_AccountDescription2: WideString;
    procedure Set_AccountDescription2(const Param1: WideString);
    function Get_AccountID: WideString;
    procedure Set_AccountID(const Param1: WideString);
    function Get_AccountType: Smallint;
    procedure Set_AccountType(Param1: Smallint);
    function Get_AccountTypeDescription: WideString;
    function Get_Activity(Index: Smallint): Double;
    procedure Set_Activity(Index: Smallint; Param2: Double);
    function Get_Budget(Index: Smallint): Double;
    procedure Set_Budget(Index: Smallint; Param2: Double);
    function Get_Credit(Index: Smallint): Double;
    procedure Set_Credit(Index: Smallint; Param2: Double);
    function Get_Debit(Index: Smallint): Double;
    procedure Set_Debit(Index: Smallint; Param2: Double);
    function Get_eCheckID: Smallint;
    procedure Set_eCheckID(Param1: Smallint);
    function Get_GL1099Index: Smallint;
    procedure Set_GL1099Index(Param1: Smallint);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_Internal1: WideString;
    procedure Set_Internal1(const Param1: WideString);
    function Get_LastDepositTicket: WideString;
    procedure Set_LastDepositTicket(const Param1: WideString);
    function Get_NextRef: WideString;
    procedure Set_NextRef(const Param1: WideString);
    function Get_ReceiptNum: WideString;
    procedure Set_ReceiptNum(const Param1: WideString);
    function Get_Revised(Index: Smallint): Double;
    procedure Set_Revised(Index: Smallint; Param2: Double);
    function Get_TaxCode: WideString;
    procedure Set_TaxCode(const Param1: WideString);
    function Get_Unknown(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
  public
    property DefaultInterface: _Chart read GetDefaultInterface;
  published
    property AccountDescription: WideString read Get_AccountDescription write Set_AccountDescription;
    property AccountDescription2: WideString read Get_AccountDescription2 write Set_AccountDescription2;
    property AccountID: WideString read Get_AccountID write Set_AccountID;
    property AccountType: Smallint read Get_AccountType write Set_AccountType;
    property eCheckID: Smallint read Get_eCheckID write Set_eCheckID;
    property GL1099Index: Smallint read Get_GL1099Index write Set_GL1099Index;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property Internal1: WideString read Get_Internal1 write Set_Internal1;
    property LastDepositTicket: WideString read Get_LastDepositTicket write Set_LastDepositTicket;
    property NextRef: WideString read Get_NextRef write Set_NextRef;
    property ReceiptNum: WideString read Get_ReceiptNum write Set_ReceiptNum;
    property TaxCode: WideString read Get_TaxCode write Set_TaxCode;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCustomer provides a Create and CreateRemote method to          
// create instances of the default interface _Customer exposed by              
// the CoClass Customer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomer = class
    class function Create: _Customer;
    class function CreateRemote(const MachineName: string): _Customer;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCustomer
// Help String      : 
// Default Interface: _Customer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCustomerProperties= class;
{$ENDIF}
  TCustomer = class(TOleServer)
  private
    FIntf:        _Customer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCustomerProperties;
    function      GetServerProperties: TCustomerProperties;
{$ENDIF}
    function      GetDefaultInterface: _Customer;
  protected
    procedure InitServerData; override;
    function Get_BillPresentment: WordBool;
    procedure Set_BillPresentment(Param1: WordBool);
    function Get_BillToAddress1: WideString;
    procedure Set_BillToAddress1(const Param1: WideString);
    function Get_BillToAddress2: WideString;
    procedure Set_BillToAddress2(const Param1: WideString);
    function Get_BillToCity: WideString;
    procedure Set_BillToCity(const Param1: WideString);
    function Get_BillToCountry: WideString;
    procedure Set_BillToCountry(const Param1: WideString);
    function Get_BillToName: WideString;
    procedure Set_BillToName(const Param1: WideString);
    function Get_BillToSalesTaxCode: WideString;
    procedure Set_BillToSalesTaxCode(const Param1: WideString);
    function Get_BillToState: WideString;
    procedure Set_BillToState(const Param1: WideString);
    function Get_BillToZipcode: WideString;
    procedure Set_BillToZipcode(const Param1: WideString);
    function Get_CardholderAddress1: WideString;
    procedure Set_CardholderAddress1(const Param1: WideString);
    function Get_CardholderAddress2: WideString;
    procedure Set_CardholderAddress2(const Param1: WideString);
    function Get_CardholderCity: WideString;
    procedure Set_CardholderCity(const Param1: WideString);
    function Get_CardholderCountry: WideString;
    procedure Set_CardholderCountry(const Param1: WideString);
    function Get_CardholderName: WideString;
    procedure Set_CardholderName(const Param1: WideString);
    function Get_CardholderState: WideString;
    procedure Set_CardholderState(const Param1: WideString);
    function Get_CardholderZipCode: WideString;
    procedure Set_CardholderZipCode(const Param1: WideString);
    function Get_CCExpirationDate: OleVariant;
    procedure Set_CCExpirationDate(Param1: OleVariant);
    function Get_CCNumber: WideString;
    procedure Set_CCNumber(const Param1: WideString);
    function Get_ChargeFinanceCharges: WordBool;
    procedure Set_ChargeFinanceCharges(Param1: WordBool);
    function Get_CODTerms: WordBool;
    procedure Set_CODTerms(Param1: WordBool);
    function Get_Contact: WideString;
    procedure Set_Contact(const Param1: WideString);
    function Get_CreditLimit: Double;
    procedure Set_CreditLimit(Param1: Double);
    function Get_CreditStatus: Integer;
    procedure Set_CreditStatus(Param1: Integer);
    function Get_CurrentBalance: Double;
    procedure Set_CurrentBalance(Param1: Double);
    function Get_CustomerID: WideString;
    procedure Set_CustomerID(const Param1: WideString);
    function Get_CustomerSinceDate: OleVariant;
    procedure Set_CustomerSinceDate(Param1: OleVariant);
    function Get_CustomerType: WideString;
    procedure Set_CustomerType(const Param1: WideString);
    function Get_CustomField(Index: Smallint): WideString;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString);
    function Get_DiscountDays: Smallint;
    procedure Set_DiscountDays(Param1: Smallint);
    function Get_DiscountPercent: Double;
    procedure Set_DiscountPercent(Param1: Double);
    function Get_DueAtEndOfMonth: WordBool;
    procedure Set_DueAtEndOfMonth(Param1: WordBool);
    function Get_DueOnDayOfNextMonth: WordBool;
    procedure Set_DueOnDayOfNextMonth(Param1: WordBool);
    function Get_Email: WideString;
    procedure Set_Email(const Param1: WideString);
    function Get_Fax: WideString;
    procedure Set_Fax(const Param1: WideString);
    function Get_FormDeliveryFlags: Integer;
    procedure Set_FormDeliveryFlags(Param1: Integer);
    function Get_GLSalesAccount: WideString;
    procedure Set_GLSalesAccount(const Param1: WideString);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_LastInvoiceAmount: Double;
    procedure Set_LastInvoiceAmount(Param1: Double);
    function Get_LastInvoiceDate: OleVariant;
    procedure Set_LastInvoiceDate(Param1: OleVariant);
    function Get_LastPaymentAmount: Double;
    procedure Set_LastPaymentAmount(Param1: Double);
    function Get_LastPaymentDate: OleVariant;
    procedure Set_LastPaymentDate(Param1: OleVariant);
    function Get_LastStatementDate: OleVariant;
    procedure Set_LastStatementDate(Param1: OleVariant);
    function Get_LastUpdateCounter: Integer;
    procedure Set_LastUpdateCounter(Param1: Integer);
    function Get_NetDueDays: Smallint;
    procedure Set_NetDueDays(Param1: Smallint);
    function Get_OpenPONumber: WideString;
    procedure Set_OpenPONumber(const Param1: WideString);
    function Get_OurAccount: WideString;
    procedure Set_OurAccount(const Param1: WideString);
    function Get_PaymentAccount: WideString;
    procedure Set_PaymentAccount(const Param1: WideString);
    function Get_PaymentDefaultData: Integer;
    procedure Set_PaymentDefaultData(Param1: Integer);
    function Get_PaymentMethod: WideString;
    procedure Set_PaymentMethod(const Param1: WideString);
    function Get_PrepaidTerms: WordBool;
    procedure Set_PrepaidTerms(Param1: WordBool);
    function Get_PricingLevel: Byte;
    procedure Set_PricingLevel(Param1: Byte);
    function Get_Prospect: WordBool;
    procedure Set_Prospect(Param1: WordBool);
    function Get_Receipts(Index: Smallint): Double;
    procedure Set_Receipts(Index: Smallint; Param2: Double);
    function Get_ResaleNumber: WideString;
    procedure Set_ResaleNumber(const Param1: WideString);
    function Get_Sales(Index: Smallint): Double;
    procedure Set_Sales(Index: Smallint; Param2: Double);
    function Get_SalesRepID: WideString;
    procedure Set_SalesRepID(const Param1: WideString);
    function Get_ShipToAddress1(Index: Smallint): WideString;
    procedure Set_ShipToAddress1(Index: Smallint; const Param2: WideString);
    function Get_ShipToAddress2(Index: Smallint): WideString;
    procedure Set_ShipToAddress2(Index: Smallint; const Param2: WideString);
    function Get_ShipToCity(Index: Smallint): WideString;
    procedure Set_ShipToCity(Index: Smallint; const Param2: WideString);
    function Get_ShipToCountry(Index: Smallint): WideString;
    procedure Set_ShipToCountry(Index: Smallint; const Param2: WideString);
    function Get_ShipToName(Index: Smallint): WideString;
    procedure Set_ShipToName(Index: Smallint; const Param2: WideString);
    function Get_ShipToSalesTaxCode(Index: Smallint): WideString;
    procedure Set_ShipToSalesTaxCode(Index: Smallint; const Param2: WideString);
    function Get_ShipToState(Index: Smallint): WideString;
    procedure Set_ShipToState(Index: Smallint; const Param2: WideString);
    function Get_ShipToZipCode(Index: Smallint): WideString;
    procedure Set_ShipToZipCode(Index: Smallint; const Param2: WideString);
    function Get_ShipVia: Byte;
    procedure Set_ShipVia(Param1: Byte);
    function Get_Telephone1: WideString;
    procedure Set_Telephone1(const Param1: WideString);
    function Get_Telephone2: WideString;
    procedure Set_Telephone2(const Param1: WideString);
    function Get_Unknown1(Index: Smallint): Byte;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte);
    function Get_Unused1: Byte;
    procedure Set_Unused1(Param1: Byte);
    function Get_Unknown2(Index: Smallint): Byte;
    procedure Set_Unknown2(Index: Smallint; Param2: Byte);
    function Get_Unknown3: Byte;
    procedure Set_Unknown3(Param1: Byte);
    function Get_Unknown4: Byte;
    procedure Set_Unknown4(Param1: Byte);
    function Get_Unused5: Smallint;
    procedure Set_Unused5(Param1: Smallint);
    function Get_UseReceiptWindowSettingsNot: Integer;
    procedure Set_UseReceiptWindowSettingsNot(Param1: Integer);
    function Get_UseStandardTerms: WordBool;
    procedure Set_UseStandardTerms(Param1: WordBool);
    function Get_Web: WideString;
    procedure Set_Web(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Customer);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function FindByPercent: Integer;
    function GetByPercent(Percent: Double): Smallint;
    function GetEqual(const CustomerID: WideString): Smallint;
    function GetFirst: Smallint;
    function GetForIndex(Index: Integer): Smallint;
    function GetGreaterThan(const CustomerID: WideString): Smallint;
    function GetGreaterThanOrEqual(const CustomerID: WideString): Smallint;
    function GetLast: Smallint;
    function GetLessThan(const CustomerID: WideString): Smallint;
    function GetLessThanOrEqual(const CustomerID: WideString): Smallint;
    function GetNext: Smallint;
    function GetPrevious: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _Customer read GetDefaultInterface;
    property CCExpirationDate: OleVariant read Get_CCExpirationDate write Set_CCExpirationDate;
    property CustomerSinceDate: OleVariant read Get_CustomerSinceDate write Set_CustomerSinceDate;
    property CustomField[Index: Smallint]: WideString read Get_CustomField write Set_CustomField;
    property LastInvoiceDate: OleVariant read Get_LastInvoiceDate write Set_LastInvoiceDate;
    property LastPaymentDate: OleVariant read Get_LastPaymentDate write Set_LastPaymentDate;
    property LastStatementDate: OleVariant read Get_LastStatementDate write Set_LastStatementDate;
    property Receipts[Index: Smallint]: Double read Get_Receipts write Set_Receipts;
    property Sales[Index: Smallint]: Double read Get_Sales write Set_Sales;
    property ShipToAddress1[Index: Smallint]: WideString read Get_ShipToAddress1 write Set_ShipToAddress1;
    property ShipToAddress2[Index: Smallint]: WideString read Get_ShipToAddress2 write Set_ShipToAddress2;
    property ShipToCity[Index: Smallint]: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry[Index: Smallint]: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName[Index: Smallint]: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToSalesTaxCode[Index: Smallint]: WideString read Get_ShipToSalesTaxCode write Set_ShipToSalesTaxCode;
    property ShipToState[Index: Smallint]: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode[Index: Smallint]: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property Unknown1[Index: Smallint]: Byte read Get_Unknown1 write Set_Unknown1;
    property Unknown2[Index: Smallint]: Byte read Get_Unknown2 write Set_Unknown2;
    property BillPresentment: WordBool read Get_BillPresentment write Set_BillPresentment;
    property BillToAddress1: WideString read Get_BillToAddress1 write Set_BillToAddress1;
    property BillToAddress2: WideString read Get_BillToAddress2 write Set_BillToAddress2;
    property BillToCity: WideString read Get_BillToCity write Set_BillToCity;
    property BillToCountry: WideString read Get_BillToCountry write Set_BillToCountry;
    property BillToName: WideString read Get_BillToName write Set_BillToName;
    property BillToSalesTaxCode: WideString read Get_BillToSalesTaxCode write Set_BillToSalesTaxCode;
    property BillToState: WideString read Get_BillToState write Set_BillToState;
    property BillToZipcode: WideString read Get_BillToZipcode write Set_BillToZipcode;
    property CardholderAddress1: WideString read Get_CardholderAddress1 write Set_CardholderAddress1;
    property CardholderAddress2: WideString read Get_CardholderAddress2 write Set_CardholderAddress2;
    property CardholderCity: WideString read Get_CardholderCity write Set_CardholderCity;
    property CardholderCountry: WideString read Get_CardholderCountry write Set_CardholderCountry;
    property CardholderName: WideString read Get_CardholderName write Set_CardholderName;
    property CardholderState: WideString read Get_CardholderState write Set_CardholderState;
    property CardholderZipCode: WideString read Get_CardholderZipCode write Set_CardholderZipCode;
    property CCNumber: WideString read Get_CCNumber write Set_CCNumber;
    property ChargeFinanceCharges: WordBool read Get_ChargeFinanceCharges write Set_ChargeFinanceCharges;
    property CODTerms: WordBool read Get_CODTerms write Set_CODTerms;
    property Contact: WideString read Get_Contact write Set_Contact;
    property CreditLimit: Double read Get_CreditLimit write Set_CreditLimit;
    property CreditStatus: Integer read Get_CreditStatus write Set_CreditStatus;
    property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
    property CustomerID: WideString read Get_CustomerID write Set_CustomerID;
    property CustomerType: WideString read Get_CustomerType write Set_CustomerType;
    property DiscountDays: Smallint read Get_DiscountDays write Set_DiscountDays;
    property DiscountPercent: Double read Get_DiscountPercent write Set_DiscountPercent;
    property DueAtEndOfMonth: WordBool read Get_DueAtEndOfMonth write Set_DueAtEndOfMonth;
    property DueOnDayOfNextMonth: WordBool read Get_DueOnDayOfNextMonth write Set_DueOnDayOfNextMonth;
    property Email: WideString read Get_Email write Set_Email;
    property Fax: WideString read Get_Fax write Set_Fax;
    property FormDeliveryFlags: Integer read Get_FormDeliveryFlags write Set_FormDeliveryFlags;
    property GLSalesAccount: WideString read Get_GLSalesAccount write Set_GLSalesAccount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property LastInvoiceAmount: Double read Get_LastInvoiceAmount write Set_LastInvoiceAmount;
    property LastPaymentAmount: Double read Get_LastPaymentAmount write Set_LastPaymentAmount;
    property LastUpdateCounter: Integer read Get_LastUpdateCounter write Set_LastUpdateCounter;
    property NetDueDays: Smallint read Get_NetDueDays write Set_NetDueDays;
    property OpenPONumber: WideString read Get_OpenPONumber write Set_OpenPONumber;
    property OurAccount: WideString read Get_OurAccount write Set_OurAccount;
    property PaymentAccount: WideString read Get_PaymentAccount write Set_PaymentAccount;
    property PaymentDefaultData: Integer read Get_PaymentDefaultData write Set_PaymentDefaultData;
    property PaymentMethod: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property PrepaidTerms: WordBool read Get_PrepaidTerms write Set_PrepaidTerms;
    property PricingLevel: Byte read Get_PricingLevel write Set_PricingLevel;
    property Prospect: WordBool read Get_Prospect write Set_Prospect;
    property ResaleNumber: WideString read Get_ResaleNumber write Set_ResaleNumber;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property ShipVia: Byte read Get_ShipVia write Set_ShipVia;
    property Telephone1: WideString read Get_Telephone1 write Set_Telephone1;
    property Telephone2: WideString read Get_Telephone2 write Set_Telephone2;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unknown3: Byte read Get_Unknown3 write Set_Unknown3;
    property Unknown4: Byte read Get_Unknown4 write Set_Unknown4;
    property Unused5: Smallint read Get_Unused5 write Set_Unused5;
    property UseReceiptWindowSettingsNot: Integer read Get_UseReceiptWindowSettingsNot write Set_UseReceiptWindowSettingsNot;
    property UseStandardTerms: WordBool read Get_UseStandardTerms write Set_UseStandardTerms;
    property Web: WideString read Get_Web write Set_Web;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCustomerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCustomer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCustomerProperties = class(TPersistent)
  private
    FServer:    TCustomer;
    function    GetDefaultInterface: _Customer;
    constructor Create(AServer: TCustomer);
  protected
    function Get_BillPresentment: WordBool;
    procedure Set_BillPresentment(Param1: WordBool);
    function Get_BillToAddress1: WideString;
    procedure Set_BillToAddress1(const Param1: WideString);
    function Get_BillToAddress2: WideString;
    procedure Set_BillToAddress2(const Param1: WideString);
    function Get_BillToCity: WideString;
    procedure Set_BillToCity(const Param1: WideString);
    function Get_BillToCountry: WideString;
    procedure Set_BillToCountry(const Param1: WideString);
    function Get_BillToName: WideString;
    procedure Set_BillToName(const Param1: WideString);
    function Get_BillToSalesTaxCode: WideString;
    procedure Set_BillToSalesTaxCode(const Param1: WideString);
    function Get_BillToState: WideString;
    procedure Set_BillToState(const Param1: WideString);
    function Get_BillToZipcode: WideString;
    procedure Set_BillToZipcode(const Param1: WideString);
    function Get_CardholderAddress1: WideString;
    procedure Set_CardholderAddress1(const Param1: WideString);
    function Get_CardholderAddress2: WideString;
    procedure Set_CardholderAddress2(const Param1: WideString);
    function Get_CardholderCity: WideString;
    procedure Set_CardholderCity(const Param1: WideString);
    function Get_CardholderCountry: WideString;
    procedure Set_CardholderCountry(const Param1: WideString);
    function Get_CardholderName: WideString;
    procedure Set_CardholderName(const Param1: WideString);
    function Get_CardholderState: WideString;
    procedure Set_CardholderState(const Param1: WideString);
    function Get_CardholderZipCode: WideString;
    procedure Set_CardholderZipCode(const Param1: WideString);
    function Get_CCExpirationDate: OleVariant;
    procedure Set_CCExpirationDate(Param1: OleVariant);
    function Get_CCNumber: WideString;
    procedure Set_CCNumber(const Param1: WideString);
    function Get_ChargeFinanceCharges: WordBool;
    procedure Set_ChargeFinanceCharges(Param1: WordBool);
    function Get_CODTerms: WordBool;
    procedure Set_CODTerms(Param1: WordBool);
    function Get_Contact: WideString;
    procedure Set_Contact(const Param1: WideString);
    function Get_CreditLimit: Double;
    procedure Set_CreditLimit(Param1: Double);
    function Get_CreditStatus: Integer;
    procedure Set_CreditStatus(Param1: Integer);
    function Get_CurrentBalance: Double;
    procedure Set_CurrentBalance(Param1: Double);
    function Get_CustomerID: WideString;
    procedure Set_CustomerID(const Param1: WideString);
    function Get_CustomerSinceDate: OleVariant;
    procedure Set_CustomerSinceDate(Param1: OleVariant);
    function Get_CustomerType: WideString;
    procedure Set_CustomerType(const Param1: WideString);
    function Get_CustomField(Index: Smallint): WideString;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString);
    function Get_DiscountDays: Smallint;
    procedure Set_DiscountDays(Param1: Smallint);
    function Get_DiscountPercent: Double;
    procedure Set_DiscountPercent(Param1: Double);
    function Get_DueAtEndOfMonth: WordBool;
    procedure Set_DueAtEndOfMonth(Param1: WordBool);
    function Get_DueOnDayOfNextMonth: WordBool;
    procedure Set_DueOnDayOfNextMonth(Param1: WordBool);
    function Get_Email: WideString;
    procedure Set_Email(const Param1: WideString);
    function Get_Fax: WideString;
    procedure Set_Fax(const Param1: WideString);
    function Get_FormDeliveryFlags: Integer;
    procedure Set_FormDeliveryFlags(Param1: Integer);
    function Get_GLSalesAccount: WideString;
    procedure Set_GLSalesAccount(const Param1: WideString);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_LastInvoiceAmount: Double;
    procedure Set_LastInvoiceAmount(Param1: Double);
    function Get_LastInvoiceDate: OleVariant;
    procedure Set_LastInvoiceDate(Param1: OleVariant);
    function Get_LastPaymentAmount: Double;
    procedure Set_LastPaymentAmount(Param1: Double);
    function Get_LastPaymentDate: OleVariant;
    procedure Set_LastPaymentDate(Param1: OleVariant);
    function Get_LastStatementDate: OleVariant;
    procedure Set_LastStatementDate(Param1: OleVariant);
    function Get_LastUpdateCounter: Integer;
    procedure Set_LastUpdateCounter(Param1: Integer);
    function Get_NetDueDays: Smallint;
    procedure Set_NetDueDays(Param1: Smallint);
    function Get_OpenPONumber: WideString;
    procedure Set_OpenPONumber(const Param1: WideString);
    function Get_OurAccount: WideString;
    procedure Set_OurAccount(const Param1: WideString);
    function Get_PaymentAccount: WideString;
    procedure Set_PaymentAccount(const Param1: WideString);
    function Get_PaymentDefaultData: Integer;
    procedure Set_PaymentDefaultData(Param1: Integer);
    function Get_PaymentMethod: WideString;
    procedure Set_PaymentMethod(const Param1: WideString);
    function Get_PrepaidTerms: WordBool;
    procedure Set_PrepaidTerms(Param1: WordBool);
    function Get_PricingLevel: Byte;
    procedure Set_PricingLevel(Param1: Byte);
    function Get_Prospect: WordBool;
    procedure Set_Prospect(Param1: WordBool);
    function Get_Receipts(Index: Smallint): Double;
    procedure Set_Receipts(Index: Smallint; Param2: Double);
    function Get_ResaleNumber: WideString;
    procedure Set_ResaleNumber(const Param1: WideString);
    function Get_Sales(Index: Smallint): Double;
    procedure Set_Sales(Index: Smallint; Param2: Double);
    function Get_SalesRepID: WideString;
    procedure Set_SalesRepID(const Param1: WideString);
    function Get_ShipToAddress1(Index: Smallint): WideString;
    procedure Set_ShipToAddress1(Index: Smallint; const Param2: WideString);
    function Get_ShipToAddress2(Index: Smallint): WideString;
    procedure Set_ShipToAddress2(Index: Smallint; const Param2: WideString);
    function Get_ShipToCity(Index: Smallint): WideString;
    procedure Set_ShipToCity(Index: Smallint; const Param2: WideString);
    function Get_ShipToCountry(Index: Smallint): WideString;
    procedure Set_ShipToCountry(Index: Smallint; const Param2: WideString);
    function Get_ShipToName(Index: Smallint): WideString;
    procedure Set_ShipToName(Index: Smallint; const Param2: WideString);
    function Get_ShipToSalesTaxCode(Index: Smallint): WideString;
    procedure Set_ShipToSalesTaxCode(Index: Smallint; const Param2: WideString);
    function Get_ShipToState(Index: Smallint): WideString;
    procedure Set_ShipToState(Index: Smallint; const Param2: WideString);
    function Get_ShipToZipCode(Index: Smallint): WideString;
    procedure Set_ShipToZipCode(Index: Smallint; const Param2: WideString);
    function Get_ShipVia: Byte;
    procedure Set_ShipVia(Param1: Byte);
    function Get_Telephone1: WideString;
    procedure Set_Telephone1(const Param1: WideString);
    function Get_Telephone2: WideString;
    procedure Set_Telephone2(const Param1: WideString);
    function Get_Unknown1(Index: Smallint): Byte;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte);
    function Get_Unused1: Byte;
    procedure Set_Unused1(Param1: Byte);
    function Get_Unknown2(Index: Smallint): Byte;
    procedure Set_Unknown2(Index: Smallint; Param2: Byte);
    function Get_Unknown3: Byte;
    procedure Set_Unknown3(Param1: Byte);
    function Get_Unknown4: Byte;
    procedure Set_Unknown4(Param1: Byte);
    function Get_Unused5: Smallint;
    procedure Set_Unused5(Param1: Smallint);
    function Get_UseReceiptWindowSettingsNot: Integer;
    procedure Set_UseReceiptWindowSettingsNot(Param1: Integer);
    function Get_UseStandardTerms: WordBool;
    procedure Set_UseStandardTerms(Param1: WordBool);
    function Get_Web: WideString;
    procedure Set_Web(const Param1: WideString);
  public
    property DefaultInterface: _Customer read GetDefaultInterface;
  published
    property BillPresentment: WordBool read Get_BillPresentment write Set_BillPresentment;
    property BillToAddress1: WideString read Get_BillToAddress1 write Set_BillToAddress1;
    property BillToAddress2: WideString read Get_BillToAddress2 write Set_BillToAddress2;
    property BillToCity: WideString read Get_BillToCity write Set_BillToCity;
    property BillToCountry: WideString read Get_BillToCountry write Set_BillToCountry;
    property BillToName: WideString read Get_BillToName write Set_BillToName;
    property BillToSalesTaxCode: WideString read Get_BillToSalesTaxCode write Set_BillToSalesTaxCode;
    property BillToState: WideString read Get_BillToState write Set_BillToState;
    property BillToZipcode: WideString read Get_BillToZipcode write Set_BillToZipcode;
    property CardholderAddress1: WideString read Get_CardholderAddress1 write Set_CardholderAddress1;
    property CardholderAddress2: WideString read Get_CardholderAddress2 write Set_CardholderAddress2;
    property CardholderCity: WideString read Get_CardholderCity write Set_CardholderCity;
    property CardholderCountry: WideString read Get_CardholderCountry write Set_CardholderCountry;
    property CardholderName: WideString read Get_CardholderName write Set_CardholderName;
    property CardholderState: WideString read Get_CardholderState write Set_CardholderState;
    property CardholderZipCode: WideString read Get_CardholderZipCode write Set_CardholderZipCode;
    property CCNumber: WideString read Get_CCNumber write Set_CCNumber;
    property ChargeFinanceCharges: WordBool read Get_ChargeFinanceCharges write Set_ChargeFinanceCharges;
    property CODTerms: WordBool read Get_CODTerms write Set_CODTerms;
    property Contact: WideString read Get_Contact write Set_Contact;
    property CreditLimit: Double read Get_CreditLimit write Set_CreditLimit;
    property CreditStatus: Integer read Get_CreditStatus write Set_CreditStatus;
    property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
    property CustomerID: WideString read Get_CustomerID write Set_CustomerID;
    property CustomerType: WideString read Get_CustomerType write Set_CustomerType;
    property DiscountDays: Smallint read Get_DiscountDays write Set_DiscountDays;
    property DiscountPercent: Double read Get_DiscountPercent write Set_DiscountPercent;
    property DueAtEndOfMonth: WordBool read Get_DueAtEndOfMonth write Set_DueAtEndOfMonth;
    property DueOnDayOfNextMonth: WordBool read Get_DueOnDayOfNextMonth write Set_DueOnDayOfNextMonth;
    property Email: WideString read Get_Email write Set_Email;
    property Fax: WideString read Get_Fax write Set_Fax;
    property FormDeliveryFlags: Integer read Get_FormDeliveryFlags write Set_FormDeliveryFlags;
    property GLSalesAccount: WideString read Get_GLSalesAccount write Set_GLSalesAccount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property LastInvoiceAmount: Double read Get_LastInvoiceAmount write Set_LastInvoiceAmount;
    property LastPaymentAmount: Double read Get_LastPaymentAmount write Set_LastPaymentAmount;
    property LastUpdateCounter: Integer read Get_LastUpdateCounter write Set_LastUpdateCounter;
    property NetDueDays: Smallint read Get_NetDueDays write Set_NetDueDays;
    property OpenPONumber: WideString read Get_OpenPONumber write Set_OpenPONumber;
    property OurAccount: WideString read Get_OurAccount write Set_OurAccount;
    property PaymentAccount: WideString read Get_PaymentAccount write Set_PaymentAccount;
    property PaymentDefaultData: Integer read Get_PaymentDefaultData write Set_PaymentDefaultData;
    property PaymentMethod: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property PrepaidTerms: WordBool read Get_PrepaidTerms write Set_PrepaidTerms;
    property PricingLevel: Byte read Get_PricingLevel write Set_PricingLevel;
    property Prospect: WordBool read Get_Prospect write Set_Prospect;
    property ResaleNumber: WideString read Get_ResaleNumber write Set_ResaleNumber;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property ShipVia: Byte read Get_ShipVia write Set_ShipVia;
    property Telephone1: WideString read Get_Telephone1 write Set_Telephone1;
    property Telephone2: WideString read Get_Telephone2 write Set_Telephone2;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unknown3: Byte read Get_Unknown3 write Set_Unknown3;
    property Unknown4: Byte read Get_Unknown4 write Set_Unknown4;
    property Unused5: Smallint read Get_Unused5 write Set_Unused5;
    property UseReceiptWindowSettingsNot: Integer read Get_UseReceiptWindowSettingsNot write Set_UseReceiptWindowSettingsNot;
    property UseStandardTerms: WordBool read Get_UseStandardTerms write Set_UseStandardTerms;
    property Web: WideString read Get_Web write Set_Web;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAlarm provides a Create and CreateRemote method to          
// create instances of the default interface _Alarm exposed by              
// the CoClass Alarm. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAlarm = class
    class function Create: _Alarm;
    class function CreateRemote(const MachineName: string): _Alarm;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAlarm
// Help String      : 
// Default Interface: _Alarm
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAlarmProperties= class;
{$ENDIF}
  TAlarm = class(TOleServer)
  private
    FIntf:        _Alarm;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAlarmProperties;
    function      GetServerProperties: TAlarmProperties;
{$ENDIF}
    function      GetDefaultInterface: _Alarm;
  protected
    procedure InitServerData; override;
    function Get_AlarmIndex: Integer;
    procedure Set_AlarmIndex(Param1: Integer);
    function Get_AlertIndex: Smallint;
    procedure Set_AlertIndex(Param1: Smallint);
    function Get_ApplyTo: Smallint;
    procedure Set_ApplyTo(Param1: Smallint);
    function Get_ApplyToDescription(Index: Smallint): WideString;
    function Get_FromDate: OleVariant;
    procedure Set_FromDate(Param1: OleVariant);
    function Get_ID: WideString;
    procedure Set_ID(const Param1: WideString);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_ToDate: OleVariant;
    procedure Set_ToDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unknown: Integer;
    procedure Set_Unknown(Param1: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Alarm);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetCustomer(Index: Integer): Smallint;
    function GetFirst: Smallint;
    function GetItem(Index: Integer): Smallint;
    function GetLast: Smallint;
    function GetNext: Smallint;
    function GetPrevious: Smallint;
    function GetVendor(Index: Integer): Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _Alarm read GetDefaultInterface;
    property ApplyToDescription[Index: Smallint]: WideString read Get_ApplyToDescription;
    property FromDate: OleVariant read Get_FromDate write Set_FromDate;
    property ToDate: OleVariant read Get_ToDate write Set_ToDate;
    property AlarmIndex: Integer read Get_AlarmIndex write Set_AlarmIndex;
    property AlertIndex: Smallint read Get_AlertIndex write Set_AlertIndex;
    property ApplyTo: Smallint read Get_ApplyTo write Set_ApplyTo;
    property ID: WideString read Get_ID write Set_ID;
    property Index: Integer read Get_Index write Set_Index;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property Period: Smallint read Get_Period write Set_Period;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unknown: Integer read Get_Unknown write Set_Unknown;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAlarmProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAlarm
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAlarmProperties = class(TPersistent)
  private
    FServer:    TAlarm;
    function    GetDefaultInterface: _Alarm;
    constructor Create(AServer: TAlarm);
  protected
    function Get_AlarmIndex: Integer;
    procedure Set_AlarmIndex(Param1: Integer);
    function Get_AlertIndex: Smallint;
    procedure Set_AlertIndex(Param1: Smallint);
    function Get_ApplyTo: Smallint;
    procedure Set_ApplyTo(Param1: Smallint);
    function Get_ApplyToDescription(Index: Smallint): WideString;
    function Get_FromDate: OleVariant;
    procedure Set_FromDate(Param1: OleVariant);
    function Get_ID: WideString;
    procedure Set_ID(const Param1: WideString);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_ToDate: OleVariant;
    procedure Set_ToDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unknown: Integer;
    procedure Set_Unknown(Param1: Integer);
  public
    property DefaultInterface: _Alarm read GetDefaultInterface;
  published
    property AlarmIndex: Integer read Get_AlarmIndex write Set_AlarmIndex;
    property AlertIndex: Smallint read Get_AlertIndex write Set_AlertIndex;
    property ApplyTo: Smallint read Get_ApplyTo write Set_ApplyTo;
    property ID: WideString read Get_ID write Set_ID;
    property Index: Integer read Get_Index write Set_Index;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property Period: Smallint read Get_Period write Set_Period;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unknown: Integer read Get_Unknown write Set_Unknown;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSalesTaxCode provides a Create and CreateRemote method to          
// create instances of the default interface _SalesTaxCode exposed by              
// the CoClass SalesTaxCode. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSalesTaxCode = class
    class function Create: _SalesTaxCode;
    class function CreateRemote(const MachineName: string): _SalesTaxCode;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSalesTaxCode
// Help String      : 
// Default Interface: _SalesTaxCode
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSalesTaxCodeProperties= class;
{$ENDIF}
  TSalesTaxCode = class(TOleServer)
  private
    FIntf:        _SalesTaxCode;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSalesTaxCodeProperties;
    function      GetServerProperties: TSalesTaxCodeProperties;
{$ENDIF}
    function      GetDefaultInterface: _SalesTaxCode;
  protected
    procedure InitServerData; override;
    function Get_Authority(Index: Smallint): WideString;
    procedure Set_Authority(Index: Smallint; const Param2: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_SalesTaxCode: WideString;
    procedure Set_SalesTaxCode(const Param1: WideString);
    function Get_TaxFreight: WordBool;
    procedure Set_TaxFreight(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SalesTaxCode);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(const ID: WideString): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _SalesTaxCode read GetDefaultInterface;
    property Authority[Index: Smallint]: WideString read Get_Authority write Set_Authority;
    property Description: WideString read Get_Description write Set_Description;
    property GUID: WideString read Get_GUID write Set_GUID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property TaxFreight: WordBool read Get_TaxFreight write Set_TaxFreight;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSalesTaxCodeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSalesTaxCode
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSalesTaxCodeProperties = class(TPersistent)
  private
    FServer:    TSalesTaxCode;
    function    GetDefaultInterface: _SalesTaxCode;
    constructor Create(AServer: TSalesTaxCode);
  protected
    function Get_Authority(Index: Smallint): WideString;
    procedure Set_Authority(Index: Smallint; const Param2: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_SalesTaxCode: WideString;
    procedure Set_SalesTaxCode(const Param1: WideString);
    function Get_TaxFreight: WordBool;
    procedure Set_TaxFreight(Param1: WordBool);
  public
    property DefaultInterface: _SalesTaxCode read GetDefaultInterface;
  published
    property Description: WideString read Get_Description write Set_Description;
    property GUID: WideString read Get_GUID write Set_GUID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property TaxFreight: WordBool read Get_TaxFreight write Set_TaxFreight;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoEmployee provides a Create and CreateRemote method to          
// create instances of the default interface _Employee exposed by              
// the CoClass Employee. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEmployee = class
    class function Create: _Employee;
    class function CreateRemote(const MachineName: string): _Employee;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEmployee
// Help String      : 
// Default Interface: _Employee
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TEmployeeProperties= class;
{$ENDIF}
  TEmployee = class(TOleServer)
  private
    FIntf:        _Employee;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TEmployeeProperties;
    function      GetServerProperties: TEmployeeProperties;
{$ENDIF}
    function      GetDefaultInterface: _Employee;
  protected
    procedure InitServerData; override;
    function Get_AcctDataGLAccount(Index: Smallint): WideString;
    procedure Set_AcctDataGLAccount(Index: Smallint; const Param2: WideString);
    function Get_AcctDataUseStandard(Index: Smallint): WordBool;
    procedure Set_AcctDataUseStandard(Index: Smallint; Param2: WordBool);
    function Get_AdditionalFederalWithholding: Double;
    procedure Set_AdditionalFederalWithholding(Param1: Double);
    function Get_AdditionalLocalWithholding: Double;
    procedure Set_AdditionalLocalWithholding(Param1: Double);
    function Get_AdditionalStateWithholding: Double;
    procedure Set_AdditionalStateWithholding(Param1: Double);
    function Get_Address1: WideString;
    procedure Set_Address1(const Param1: WideString);
    function Get_Address2: WideString;
    procedure Set_Address2(const Param1: WideString);
    function Get_City: WideString;
    procedure Set_City(const Param1: WideString);
    function Get_Country: WideString;
    procedure Set_Country(const Param1: WideString);
    function Get_CustomField(Index: Smallint): WideString;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString);
    function Get_DateHired: OleVariant;
    procedure Set_DateHired(Param1: OleVariant);
    function Get_DateLastRaise: OleVariant;
    procedure Set_DateLastRaise(Param1: OleVariant);
    function Get_DateTerminated: OleVariant;
    procedure Set_DateTerminated(Param1: OleVariant);
    function Get_Deferred: WordBool;
    procedure Set_Deferred(Param1: WordBool);
    function Get_EEAdjust(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_EEAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_EEAmount(Index: Smallint): Double;
    procedure Set_EEAmount(Index: Smallint; Param2: Double);
    function Get_EECalcName(Index: Smallint): WideString;
    procedure Set_EECalcName(Index: Smallint; const Param2: WideString);
    function Get_EECalcOn(Index: Smallint): WordBool;
    procedure Set_EECalcOn(Index: Smallint; Param2: WordBool);
    function Get_EEGLAccount(Index: Smallint): WideString;
    procedure Set_EEGLAccount(Index: Smallint; const Param2: WideString);
    function Get_EEUnused(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_EEUnused(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_EEUseCustom(Index: Smallint): WordBool;
    procedure Set_EEUseCustom(Index: Smallint; Param2: WordBool);
    function Get_Email: WideString;
    procedure Set_Email(const Param1: WideString);
    function Get_ERAdjust(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_ERAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_ERCalcName(Index: Smallint): WideString;
    procedure Set_ERCalcName(Index: Smallint; const Param2: WideString);
    function Get_ERCalcOn(Index: Smallint): WordBool;
    procedure Set_ERCalcOn(Index: Smallint; Param2: WordBool);
    function Get_ERExpenseAccount(Index: Smallint): WideString;
    procedure Set_ERExpenseAccount(Index: Smallint; const Param2: WideString);
    function Get_ERLiabilityAccount(Index: Smallint): WideString;
    procedure Set_ERLiabilityAccount(Index: Smallint; const Param2: WideString);
    function Get_ERUseCustom(Index: Smallint): WordBool;
    procedure Set_ERUseCustom(Index: Smallint; Param2: WordBool);
    function Get_IsEmployee: WordBool;
    procedure Set_IsEmployee(Param1: WordBool);
    function Get_EmployeeID: WideString;
    procedure Set_EmployeeID(const Param1: WideString);
    function Get_EmployeeFirstName: WideString;
    procedure Set_EmployeeFirstName(const Param1: WideString);
    function Get_EmployeeLastName: WideString;
    procedure Set_EmployeeLastName(const Param1: WideString);
    function Get_EmployeeMiddleInit: WideString;
    procedure Set_EmployeeMiddleInit(const Param1: WideString);
    function Get_EmployeeName: WideString;
    procedure Set_EmployeeName(const Param1: WideString);
    function Get_EmployeeType: WideString;
    procedure Set_EmployeeType(const Param1: WideString);
    function Get_eTimeBadgeNum: WideString;
    procedure Set_eTimeBadgeNum(const Param1: WideString);
    function Get_eTimeDept: WideString;
    procedure Set_eTimeDept(const Param1: WideString);
    function Get_eTimeEmpID: WideString;
    procedure Set_eTimeEmpID(const Param1: WideString);
    function Get_eTimeHomeTimeClock: WideString;
    procedure Set_eTimeHomeTimeClock(const Param1: WideString);
    function Get_eTimePayClass: WideString;
    procedure Set_eTimePayClass(const Param1: WideString);
    function Get_eTimeProfile: WideString;
    procedure Set_eTimeProfile(const Param1: WideString);
    function Get_Extra401k: Double;
    procedure Set_Extra401k(Param1: Double);
    function Get_ExtraSpecial1: Double;
    procedure Set_ExtraSpecial1(Param1: Double);
    function Get_ExtraSpecial2: Double;
    procedure Set_ExtraSpecial2(Param1: Double);
    function Get_FederalAllowances: Smallint;
    procedure Set_FederalAllowances(Param1: Smallint);
    function Get_FederalFilingStatus: Smallint;
    procedure Set_FederalFilingStatus(Param1: Smallint);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HourlyBillingRate: Double;
    procedure Set_HourlyBillingRate(Param1: Double);
    function Get_HoursPerPayPeriod: Double;
    procedure Set_HoursPerPayPeriod(Param1: Double);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_LocalAllowances: Smallint;
    procedure Set_LocalAllowances(Param1: Smallint);
    function Get_LocalFilingStatus: Smallint;
    procedure Set_LocalFilingStatus(Param1: Smallint);
    function Get_Name: WideString;
    procedure Set_Name(const Param1: WideString);
    function Get_PayFrequency: Byte;
    procedure Set_PayFrequency(Param1: Byte);
    function Get_PayMethod: Smallint;
    procedure Set_PayMethod(Param1: Smallint);
    function Get_PayRateAmount(Index: Smallint): Double;
    procedure Set_PayRateAmount(Index: Smallint; Param2: Double);
    function Get_PayrollEE(Quarter: Smallint; Index: Smallint): Double;
    procedure Set_PayrollEE(Quarter: Smallint; Index: Smallint; Param3: Double);
    function Get_PayrollER(Quarter: Smallint; Index: Smallint): Double;
    procedure Set_PayrollER(Quarter: Smallint; Index: Smallint; Param3: Double);
    function Get_PayrollHoursLevel(Quarter: Smallint; Index: Smallint): Double;
    procedure Set_PayrollHoursLevel(Quarter: Smallint; Index: Smallint; Param3: Double);
    function Get_PayrollPayLevel(Quarter: Smallint; Index: Smallint): Double;
    procedure Set_PayrollPayLevel(Quarter: Smallint; Index: Smallint; Param3: Double);
    function Get_PayrollUnused(Quarter: Smallint): Double;
    procedure Set_PayrollUnused(Quarter: Smallint; Param2: Double);
    function Get_PayrollWeeks(Quarter: Smallint): Smallint;
    procedure Set_PayrollWeeks(Quarter: Smallint; Param2: Smallint);
    function Get_PayType: Byte;
    procedure Set_PayType(Param1: Byte);
    function Get_Pension: WordBool;
    procedure Set_Pension(Param1: WordBool);
    function Get_PrevHoursLevel(Index: Smallint): Double;
    procedure Set_PrevHoursLevel(Index: Smallint; Param2: Double);
    function Get_PrevPayLevel(Index: Smallint): Double;
    procedure Set_PrevPayLevel(Index: Smallint; Param2: Double);
    function Get_PreviousYearsEE(Index: Smallint): Double;
    procedure Set_PreviousYearsEE(Index: Smallint; Param2: Double);
    function Get_PreviousYearsER(Index: Smallint): Double;
    procedure Set_PreviousYearsER(Index: Smallint; Param2: Double);
    function Get_PrevUnused: Double;
    procedure Set_PrevUnused(Param1: Double);
    function Get_PrevWeeks: Smallint;
    procedure Set_PrevWeeks(Param1: Smallint);
    function Get_SalesRep: WordBool;
    procedure Set_SalesRep(Param1: WordBool);
    function Get_SocialSecurityNumber: WideString;
    procedure Set_SocialSecurityNumber(const Param1: WideString);
    function Get_SpecialAllowance1: Smallint;
    procedure Set_SpecialAllowance1(Param1: Smallint);
    function Get_SpecialAllowance2: Smallint;
    procedure Set_SpecialAllowance2(Param1: Smallint);
    function Get_State: WideString;
    procedure Set_State(const Param1: WideString);
    function Get_StateAllowances: Smallint;
    procedure Set_StateAllowances(Param1: Smallint);
    function Get_StateFilingStatus: Smallint;
    procedure Set_StateFilingStatus(Param1: Smallint);
    function Get_Telephone: WideString;
    procedure Set_Telephone(const Param1: WideString);
    function Get_Unused0(Index: Smallint): Byte;
    procedure Set_Unused0(Index: Smallint; Param2: Byte);
    function Get_Unused1: Byte;
    procedure Set_Unused1(Param1: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Byte;
    procedure Set_Unused3(Param1: Byte);
    function Get_Unused4(Index: Smallint): Byte;
    procedure Set_Unused4(Index: Smallint; Param2: Byte);
    function Get_Unknown5: Byte;
    procedure Set_Unknown5(Param1: Byte);
    function Get_Unknown6: Byte;
    procedure Set_Unknown6(Param1: Byte);
    function Get_Unused7: Byte;
    procedure Set_Unused7(Param1: Byte);
    function Get_Unknown8(Index: Smallint): Byte;
    procedure Set_Unknown8(Index: Smallint; Param2: Byte);
    function Get_W2IDLocal: WideString;
    procedure Set_W2IDLocal(const Param1: WideString);
    function Get_W2IDState: WideString;
    procedure Set_W2IDState(const Param1: WideString);
    function Get_Zipcode: WideString;
    procedure Set_Zipcode(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Employee);
    procedure Disconnect; override;
    function CacheCharts(Flag: WordBool): Smallint;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(const EmployeeID: WideString): Smallint;
    function GetForIndex(Index: Integer): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _Employee read GetDefaultInterface;
    property AcctDataGLAccount[Index: Smallint]: WideString read Get_AcctDataGLAccount write Set_AcctDataGLAccount;
    property AcctDataUseStandard[Index: Smallint]: WordBool read Get_AcctDataUseStandard write Set_AcctDataUseStandard;
    property CustomField[Index: Smallint]: WideString read Get_CustomField write Set_CustomField;
    property DateHired: OleVariant read Get_DateHired write Set_DateHired;
    property DateLastRaise: OleVariant read Get_DateLastRaise write Set_DateLastRaise;
    property DateTerminated: OleVariant read Get_DateTerminated write Set_DateTerminated;
    property EEAdjust[Index1: Smallint; Index2: Smallint]: Byte read Get_EEAdjust write Set_EEAdjust;
    property EEAmount[Index: Smallint]: Double read Get_EEAmount write Set_EEAmount;
    property EECalcName[Index: Smallint]: WideString read Get_EECalcName write Set_EECalcName;
    property EECalcOn[Index: Smallint]: WordBool read Get_EECalcOn write Set_EECalcOn;
    property EEGLAccount[Index: Smallint]: WideString read Get_EEGLAccount write Set_EEGLAccount;
    property EEUnused[Index1: Smallint; Index2: Smallint]: Byte read Get_EEUnused write Set_EEUnused;
    property EEUseCustom[Index: Smallint]: WordBool read Get_EEUseCustom write Set_EEUseCustom;
    property ERAdjust[Index1: Smallint; Index2: Smallint]: Byte read Get_ERAdjust write Set_ERAdjust;
    property ERCalcName[Index: Smallint]: WideString read Get_ERCalcName write Set_ERCalcName;
    property ERCalcOn[Index: Smallint]: WordBool read Get_ERCalcOn write Set_ERCalcOn;
    property ERExpenseAccount[Index: Smallint]: WideString read Get_ERExpenseAccount write Set_ERExpenseAccount;
    property ERLiabilityAccount[Index: Smallint]: WideString read Get_ERLiabilityAccount write Set_ERLiabilityAccount;
    property ERUseCustom[Index: Smallint]: WordBool read Get_ERUseCustom write Set_ERUseCustom;
    property PayRateAmount[Index: Smallint]: Double read Get_PayRateAmount write Set_PayRateAmount;
    property PayrollEE[Quarter: Smallint; Index: Smallint]: Double read Get_PayrollEE write Set_PayrollEE;
    property PayrollER[Quarter: Smallint; Index: Smallint]: Double read Get_PayrollER write Set_PayrollER;
    property PayrollHoursLevel[Quarter: Smallint; Index: Smallint]: Double read Get_PayrollHoursLevel write Set_PayrollHoursLevel;
    property PayrollPayLevel[Quarter: Smallint; Index: Smallint]: Double read Get_PayrollPayLevel write Set_PayrollPayLevel;
    property PayrollUnused[Quarter: Smallint]: Double read Get_PayrollUnused write Set_PayrollUnused;
    property PayrollWeeks[Quarter: Smallint]: Smallint read Get_PayrollWeeks write Set_PayrollWeeks;
    property PrevHoursLevel[Index: Smallint]: Double read Get_PrevHoursLevel write Set_PrevHoursLevel;
    property PrevPayLevel[Index: Smallint]: Double read Get_PrevPayLevel write Set_PrevPayLevel;
    property PreviousYearsEE[Index: Smallint]: Double read Get_PreviousYearsEE write Set_PreviousYearsEE;
    property PreviousYearsER[Index: Smallint]: Double read Get_PreviousYearsER write Set_PreviousYearsER;
    property Unused0[Index: Smallint]: Byte read Get_Unused0 write Set_Unused0;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused4[Index: Smallint]: Byte read Get_Unused4 write Set_Unused4;
    property Unknown8[Index: Smallint]: Byte read Get_Unknown8 write Set_Unknown8;
    property AdditionalFederalWithholding: Double read Get_AdditionalFederalWithholding write Set_AdditionalFederalWithholding;
    property AdditionalLocalWithholding: Double read Get_AdditionalLocalWithholding write Set_AdditionalLocalWithholding;
    property AdditionalStateWithholding: Double read Get_AdditionalStateWithholding write Set_AdditionalStateWithholding;
    property Address1: WideString read Get_Address1 write Set_Address1;
    property Address2: WideString read Get_Address2 write Set_Address2;
    property City: WideString read Get_City write Set_City;
    property Country: WideString read Get_Country write Set_Country;
    property Deferred: WordBool read Get_Deferred write Set_Deferred;
    property Email: WideString read Get_Email write Set_Email;
    property IsEmployee: WordBool read Get_IsEmployee write Set_IsEmployee;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
    property EmployeeFirstName: WideString read Get_EmployeeFirstName write Set_EmployeeFirstName;
    property EmployeeLastName: WideString read Get_EmployeeLastName write Set_EmployeeLastName;
    property EmployeeMiddleInit: WideString read Get_EmployeeMiddleInit write Set_EmployeeMiddleInit;
    property EmployeeName: WideString read Get_EmployeeName write Set_EmployeeName;
    property EmployeeType: WideString read Get_EmployeeType write Set_EmployeeType;
    property eTimeBadgeNum: WideString read Get_eTimeBadgeNum write Set_eTimeBadgeNum;
    property eTimeDept: WideString read Get_eTimeDept write Set_eTimeDept;
    property eTimeEmpID: WideString read Get_eTimeEmpID write Set_eTimeEmpID;
    property eTimeHomeTimeClock: WideString read Get_eTimeHomeTimeClock write Set_eTimeHomeTimeClock;
    property eTimePayClass: WideString read Get_eTimePayClass write Set_eTimePayClass;
    property eTimeProfile: WideString read Get_eTimeProfile write Set_eTimeProfile;
    property Extra401k: Double read Get_Extra401k write Set_Extra401k;
    property ExtraSpecial1: Double read Get_ExtraSpecial1 write Set_ExtraSpecial1;
    property ExtraSpecial2: Double read Get_ExtraSpecial2 write Set_ExtraSpecial2;
    property FederalAllowances: Smallint read Get_FederalAllowances write Set_FederalAllowances;
    property FederalFilingStatus: Smallint read Get_FederalFilingStatus write Set_FederalFilingStatus;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HourlyBillingRate: Double read Get_HourlyBillingRate write Set_HourlyBillingRate;
    property HoursPerPayPeriod: Double read Get_HoursPerPayPeriod write Set_HoursPerPayPeriod;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property LocalAllowances: Smallint read Get_LocalAllowances write Set_LocalAllowances;
    property LocalFilingStatus: Smallint read Get_LocalFilingStatus write Set_LocalFilingStatus;
    property Name: WideString read Get_Name write Set_Name;
    property PayFrequency: Byte read Get_PayFrequency write Set_PayFrequency;
    property PayMethod: Smallint read Get_PayMethod write Set_PayMethod;
    property PayType: Byte read Get_PayType write Set_PayType;
    property Pension: WordBool read Get_Pension write Set_Pension;
    property PrevUnused: Double read Get_PrevUnused write Set_PrevUnused;
    property PrevWeeks: Smallint read Get_PrevWeeks write Set_PrevWeeks;
    property SalesRep: WordBool read Get_SalesRep write Set_SalesRep;
    property SocialSecurityNumber: WideString read Get_SocialSecurityNumber write Set_SocialSecurityNumber;
    property SpecialAllowance1: Smallint read Get_SpecialAllowance1 write Set_SpecialAllowance1;
    property SpecialAllowance2: Smallint read Get_SpecialAllowance2 write Set_SpecialAllowance2;
    property State: WideString read Get_State write Set_State;
    property StateAllowances: Smallint read Get_StateAllowances write Set_StateAllowances;
    property StateFilingStatus: Smallint read Get_StateFilingStatus write Set_StateFilingStatus;
    property Telephone: WideString read Get_Telephone write Set_Telephone;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unused3: Byte read Get_Unused3 write Set_Unused3;
    property Unknown5: Byte read Get_Unknown5 write Set_Unknown5;
    property Unknown6: Byte read Get_Unknown6 write Set_Unknown6;
    property Unused7: Byte read Get_Unused7 write Set_Unused7;
    property W2IDLocal: WideString read Get_W2IDLocal write Set_W2IDLocal;
    property W2IDState: WideString read Get_W2IDState write Set_W2IDState;
    property Zipcode: WideString read Get_Zipcode write Set_Zipcode;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TEmployeeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TEmployee
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TEmployeeProperties = class(TPersistent)
  private
    FServer:    TEmployee;
    function    GetDefaultInterface: _Employee;
    constructor Create(AServer: TEmployee);
  protected
    function Get_AcctDataGLAccount(Index: Smallint): WideString;
    procedure Set_AcctDataGLAccount(Index: Smallint; const Param2: WideString);
    function Get_AcctDataUseStandard(Index: Smallint): WordBool;
    procedure Set_AcctDataUseStandard(Index: Smallint; Param2: WordBool);
    function Get_AdditionalFederalWithholding: Double;
    procedure Set_AdditionalFederalWithholding(Param1: Double);
    function Get_AdditionalLocalWithholding: Double;
    procedure Set_AdditionalLocalWithholding(Param1: Double);
    function Get_AdditionalStateWithholding: Double;
    procedure Set_AdditionalStateWithholding(Param1: Double);
    function Get_Address1: WideString;
    procedure Set_Address1(const Param1: WideString);
    function Get_Address2: WideString;
    procedure Set_Address2(const Param1: WideString);
    function Get_City: WideString;
    procedure Set_City(const Param1: WideString);
    function Get_Country: WideString;
    procedure Set_Country(const Param1: WideString);
    function Get_CustomField(Index: Smallint): WideString;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString);
    function Get_DateHired: OleVariant;
    procedure Set_DateHired(Param1: OleVariant);
    function Get_DateLastRaise: OleVariant;
    procedure Set_DateLastRaise(Param1: OleVariant);
    function Get_DateTerminated: OleVariant;
    procedure Set_DateTerminated(Param1: OleVariant);
    function Get_Deferred: WordBool;
    procedure Set_Deferred(Param1: WordBool);
    function Get_EEAdjust(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_EEAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_EEAmount(Index: Smallint): Double;
    procedure Set_EEAmount(Index: Smallint; Param2: Double);
    function Get_EECalcName(Index: Smallint): WideString;
    procedure Set_EECalcName(Index: Smallint; const Param2: WideString);
    function Get_EECalcOn(Index: Smallint): WordBool;
    procedure Set_EECalcOn(Index: Smallint; Param2: WordBool);
    function Get_EEGLAccount(Index: Smallint): WideString;
    procedure Set_EEGLAccount(Index: Smallint; const Param2: WideString);
    function Get_EEUnused(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_EEUnused(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_EEUseCustom(Index: Smallint): WordBool;
    procedure Set_EEUseCustom(Index: Smallint; Param2: WordBool);
    function Get_Email: WideString;
    procedure Set_Email(const Param1: WideString);
    function Get_ERAdjust(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_ERAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_ERCalcName(Index: Smallint): WideString;
    procedure Set_ERCalcName(Index: Smallint; const Param2: WideString);
    function Get_ERCalcOn(Index: Smallint): WordBool;
    procedure Set_ERCalcOn(Index: Smallint; Param2: WordBool);
    function Get_ERExpenseAccount(Index: Smallint): WideString;
    procedure Set_ERExpenseAccount(Index: Smallint; const Param2: WideString);
    function Get_ERLiabilityAccount(Index: Smallint): WideString;
    procedure Set_ERLiabilityAccount(Index: Smallint; const Param2: WideString);
    function Get_ERUseCustom(Index: Smallint): WordBool;
    procedure Set_ERUseCustom(Index: Smallint; Param2: WordBool);
    function Get_IsEmployee: WordBool;
    procedure Set_IsEmployee(Param1: WordBool);
    function Get_EmployeeID: WideString;
    procedure Set_EmployeeID(const Param1: WideString);
    function Get_EmployeeFirstName: WideString;
    procedure Set_EmployeeFirstName(const Param1: WideString);
    function Get_EmployeeLastName: WideString;
    procedure Set_EmployeeLastName(const Param1: WideString);
    function Get_EmployeeMiddleInit: WideString;
    procedure Set_EmployeeMiddleInit(const Param1: WideString);
    function Get_EmployeeName: WideString;
    procedure Set_EmployeeName(const Param1: WideString);
    function Get_EmployeeType: WideString;
    procedure Set_EmployeeType(const Param1: WideString);
    function Get_eTimeBadgeNum: WideString;
    procedure Set_eTimeBadgeNum(const Param1: WideString);
    function Get_eTimeDept: WideString;
    procedure Set_eTimeDept(const Param1: WideString);
    function Get_eTimeEmpID: WideString;
    procedure Set_eTimeEmpID(const Param1: WideString);
    function Get_eTimeHomeTimeClock: WideString;
    procedure Set_eTimeHomeTimeClock(const Param1: WideString);
    function Get_eTimePayClass: WideString;
    procedure Set_eTimePayClass(const Param1: WideString);
    function Get_eTimeProfile: WideString;
    procedure Set_eTimeProfile(const Param1: WideString);
    function Get_Extra401k: Double;
    procedure Set_Extra401k(Param1: Double);
    function Get_ExtraSpecial1: Double;
    procedure Set_ExtraSpecial1(Param1: Double);
    function Get_ExtraSpecial2: Double;
    procedure Set_ExtraSpecial2(Param1: Double);
    function Get_FederalAllowances: Smallint;
    procedure Set_FederalAllowances(Param1: Smallint);
    function Get_FederalFilingStatus: Smallint;
    procedure Set_FederalFilingStatus(Param1: Smallint);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HourlyBillingRate: Double;
    procedure Set_HourlyBillingRate(Param1: Double);
    function Get_HoursPerPayPeriod: Double;
    procedure Set_HoursPerPayPeriod(Param1: Double);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_LocalAllowances: Smallint;
    procedure Set_LocalAllowances(Param1: Smallint);
    function Get_LocalFilingStatus: Smallint;
    procedure Set_LocalFilingStatus(Param1: Smallint);
    function Get_Name: WideString;
    procedure Set_Name(const Param1: WideString);
    function Get_PayFrequency: Byte;
    procedure Set_PayFrequency(Param1: Byte);
    function Get_PayMethod: Smallint;
    procedure Set_PayMethod(Param1: Smallint);
    function Get_PayRateAmount(Index: Smallint): Double;
    procedure Set_PayRateAmount(Index: Smallint; Param2: Double);
    function Get_PayrollEE(Quarter: Smallint; Index: Smallint): Double;
    procedure Set_PayrollEE(Quarter: Smallint; Index: Smallint; Param3: Double);
    function Get_PayrollER(Quarter: Smallint; Index: Smallint): Double;
    procedure Set_PayrollER(Quarter: Smallint; Index: Smallint; Param3: Double);
    function Get_PayrollHoursLevel(Quarter: Smallint; Index: Smallint): Double;
    procedure Set_PayrollHoursLevel(Quarter: Smallint; Index: Smallint; Param3: Double);
    function Get_PayrollPayLevel(Quarter: Smallint; Index: Smallint): Double;
    procedure Set_PayrollPayLevel(Quarter: Smallint; Index: Smallint; Param3: Double);
    function Get_PayrollUnused(Quarter: Smallint): Double;
    procedure Set_PayrollUnused(Quarter: Smallint; Param2: Double);
    function Get_PayrollWeeks(Quarter: Smallint): Smallint;
    procedure Set_PayrollWeeks(Quarter: Smallint; Param2: Smallint);
    function Get_PayType: Byte;
    procedure Set_PayType(Param1: Byte);
    function Get_Pension: WordBool;
    procedure Set_Pension(Param1: WordBool);
    function Get_PrevHoursLevel(Index: Smallint): Double;
    procedure Set_PrevHoursLevel(Index: Smallint; Param2: Double);
    function Get_PrevPayLevel(Index: Smallint): Double;
    procedure Set_PrevPayLevel(Index: Smallint; Param2: Double);
    function Get_PreviousYearsEE(Index: Smallint): Double;
    procedure Set_PreviousYearsEE(Index: Smallint; Param2: Double);
    function Get_PreviousYearsER(Index: Smallint): Double;
    procedure Set_PreviousYearsER(Index: Smallint; Param2: Double);
    function Get_PrevUnused: Double;
    procedure Set_PrevUnused(Param1: Double);
    function Get_PrevWeeks: Smallint;
    procedure Set_PrevWeeks(Param1: Smallint);
    function Get_SalesRep: WordBool;
    procedure Set_SalesRep(Param1: WordBool);
    function Get_SocialSecurityNumber: WideString;
    procedure Set_SocialSecurityNumber(const Param1: WideString);
    function Get_SpecialAllowance1: Smallint;
    procedure Set_SpecialAllowance1(Param1: Smallint);
    function Get_SpecialAllowance2: Smallint;
    procedure Set_SpecialAllowance2(Param1: Smallint);
    function Get_State: WideString;
    procedure Set_State(const Param1: WideString);
    function Get_StateAllowances: Smallint;
    procedure Set_StateAllowances(Param1: Smallint);
    function Get_StateFilingStatus: Smallint;
    procedure Set_StateFilingStatus(Param1: Smallint);
    function Get_Telephone: WideString;
    procedure Set_Telephone(const Param1: WideString);
    function Get_Unused0(Index: Smallint): Byte;
    procedure Set_Unused0(Index: Smallint; Param2: Byte);
    function Get_Unused1: Byte;
    procedure Set_Unused1(Param1: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Byte;
    procedure Set_Unused3(Param1: Byte);
    function Get_Unused4(Index: Smallint): Byte;
    procedure Set_Unused4(Index: Smallint; Param2: Byte);
    function Get_Unknown5: Byte;
    procedure Set_Unknown5(Param1: Byte);
    function Get_Unknown6: Byte;
    procedure Set_Unknown6(Param1: Byte);
    function Get_Unused7: Byte;
    procedure Set_Unused7(Param1: Byte);
    function Get_Unknown8(Index: Smallint): Byte;
    procedure Set_Unknown8(Index: Smallint; Param2: Byte);
    function Get_W2IDLocal: WideString;
    procedure Set_W2IDLocal(const Param1: WideString);
    function Get_W2IDState: WideString;
    procedure Set_W2IDState(const Param1: WideString);
    function Get_Zipcode: WideString;
    procedure Set_Zipcode(const Param1: WideString);
  public
    property DefaultInterface: _Employee read GetDefaultInterface;
  published
    property AdditionalFederalWithholding: Double read Get_AdditionalFederalWithholding write Set_AdditionalFederalWithholding;
    property AdditionalLocalWithholding: Double read Get_AdditionalLocalWithholding write Set_AdditionalLocalWithholding;
    property AdditionalStateWithholding: Double read Get_AdditionalStateWithholding write Set_AdditionalStateWithholding;
    property Address1: WideString read Get_Address1 write Set_Address1;
    property Address2: WideString read Get_Address2 write Set_Address2;
    property City: WideString read Get_City write Set_City;
    property Country: WideString read Get_Country write Set_Country;
    property Deferred: WordBool read Get_Deferred write Set_Deferred;
    property Email: WideString read Get_Email write Set_Email;
    property IsEmployee: WordBool read Get_IsEmployee write Set_IsEmployee;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
    property EmployeeFirstName: WideString read Get_EmployeeFirstName write Set_EmployeeFirstName;
    property EmployeeLastName: WideString read Get_EmployeeLastName write Set_EmployeeLastName;
    property EmployeeMiddleInit: WideString read Get_EmployeeMiddleInit write Set_EmployeeMiddleInit;
    property EmployeeName: WideString read Get_EmployeeName write Set_EmployeeName;
    property EmployeeType: WideString read Get_EmployeeType write Set_EmployeeType;
    property eTimeBadgeNum: WideString read Get_eTimeBadgeNum write Set_eTimeBadgeNum;
    property eTimeDept: WideString read Get_eTimeDept write Set_eTimeDept;
    property eTimeEmpID: WideString read Get_eTimeEmpID write Set_eTimeEmpID;
    property eTimeHomeTimeClock: WideString read Get_eTimeHomeTimeClock write Set_eTimeHomeTimeClock;
    property eTimePayClass: WideString read Get_eTimePayClass write Set_eTimePayClass;
    property eTimeProfile: WideString read Get_eTimeProfile write Set_eTimeProfile;
    property Extra401k: Double read Get_Extra401k write Set_Extra401k;
    property ExtraSpecial1: Double read Get_ExtraSpecial1 write Set_ExtraSpecial1;
    property ExtraSpecial2: Double read Get_ExtraSpecial2 write Set_ExtraSpecial2;
    property FederalAllowances: Smallint read Get_FederalAllowances write Set_FederalAllowances;
    property FederalFilingStatus: Smallint read Get_FederalFilingStatus write Set_FederalFilingStatus;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HourlyBillingRate: Double read Get_HourlyBillingRate write Set_HourlyBillingRate;
    property HoursPerPayPeriod: Double read Get_HoursPerPayPeriod write Set_HoursPerPayPeriod;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property LocalAllowances: Smallint read Get_LocalAllowances write Set_LocalAllowances;
    property LocalFilingStatus: Smallint read Get_LocalFilingStatus write Set_LocalFilingStatus;
    property Name: WideString read Get_Name write Set_Name;
    property PayFrequency: Byte read Get_PayFrequency write Set_PayFrequency;
    property PayMethod: Smallint read Get_PayMethod write Set_PayMethod;
    property PayType: Byte read Get_PayType write Set_PayType;
    property Pension: WordBool read Get_Pension write Set_Pension;
    property PrevUnused: Double read Get_PrevUnused write Set_PrevUnused;
    property PrevWeeks: Smallint read Get_PrevWeeks write Set_PrevWeeks;
    property SalesRep: WordBool read Get_SalesRep write Set_SalesRep;
    property SocialSecurityNumber: WideString read Get_SocialSecurityNumber write Set_SocialSecurityNumber;
    property SpecialAllowance1: Smallint read Get_SpecialAllowance1 write Set_SpecialAllowance1;
    property SpecialAllowance2: Smallint read Get_SpecialAllowance2 write Set_SpecialAllowance2;
    property State: WideString read Get_State write Set_State;
    property StateAllowances: Smallint read Get_StateAllowances write Set_StateAllowances;
    property StateFilingStatus: Smallint read Get_StateFilingStatus write Set_StateFilingStatus;
    property Telephone: WideString read Get_Telephone write Set_Telephone;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unused3: Byte read Get_Unused3 write Set_Unused3;
    property Unknown5: Byte read Get_Unknown5 write Set_Unknown5;
    property Unknown6: Byte read Get_Unknown6 write Set_Unknown6;
    property Unused7: Byte read Get_Unused7 write Set_Unused7;
    property W2IDLocal: WideString read Get_W2IDLocal write Set_W2IDLocal;
    property W2IDState: WideString read Get_W2IDState write Set_W2IDState;
    property Zipcode: WideString read Get_Zipcode write Set_Zipcode;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTaxAuthority provides a Create and CreateRemote method to          
// create instances of the default interface _TaxAuthority exposed by              
// the CoClass TaxAuthority. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTaxAuthority = class
    class function Create: _TaxAuthority;
    class function CreateRemote(const MachineName: string): _TaxAuthority;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTaxAuthority
// Help String      : 
// Default Interface: _TaxAuthority
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTaxAuthorityProperties= class;
{$ENDIF}
  TTaxAuthority = class(TOleServer)
  private
    FIntf:        _TaxAuthority;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTaxAuthorityProperties;
    function      GetServerProperties: TTaxAuthorityProperties;
{$ENDIF}
    function      GetDefaultInterface: _TaxAuthority;
  protected
    procedure InitServerData; override;
    function Get_Account: WideString;
    procedure Set_Account(const Param1: WideString);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_ID: WideString;
    procedure Set_ID(const Param1: WideString);
    function Get_Name: WideString;
    procedure Set_Name(const Param1: WideString);
    function Get_Rate: Double;
    procedure Set_Rate(Param1: Double);
    function Get_Rate2: Double;
    procedure Set_Rate2(Param1: Double);
    function Get_TaxBasis: Integer;
    procedure Set_TaxBasis(Param1: Integer);
    function Get_TaxChangeAt: Double;
    procedure Set_TaxChangeAt(Param1: Double);
    function Get_TaxUsesFormula: WordBool;
    procedure Set_TaxUsesFormula(Param1: WordBool);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TaxAuthority);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(const ID: WideString): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _TaxAuthority read GetDefaultInterface;
    property Account: WideString read Get_Account write Set_Account;
    property GUID: WideString read Get_GUID write Set_GUID;
    property ID: WideString read Get_ID write Set_ID;
    property Name: WideString read Get_Name write Set_Name;
    property Rate: Double read Get_Rate write Set_Rate;
    property Rate2: Double read Get_Rate2 write Set_Rate2;
    property TaxBasis: Integer read Get_TaxBasis write Set_TaxBasis;
    property TaxChangeAt: Double read Get_TaxChangeAt write Set_TaxChangeAt;
    property TaxUsesFormula: WordBool read Get_TaxUsesFormula write Set_TaxUsesFormula;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTaxAuthorityProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTaxAuthority
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTaxAuthorityProperties = class(TPersistent)
  private
    FServer:    TTaxAuthority;
    function    GetDefaultInterface: _TaxAuthority;
    constructor Create(AServer: TTaxAuthority);
  protected
    function Get_Account: WideString;
    procedure Set_Account(const Param1: WideString);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_ID: WideString;
    procedure Set_ID(const Param1: WideString);
    function Get_Name: WideString;
    procedure Set_Name(const Param1: WideString);
    function Get_Rate: Double;
    procedure Set_Rate(Param1: Double);
    function Get_Rate2: Double;
    procedure Set_Rate2(Param1: Double);
    function Get_TaxBasis: Integer;
    procedure Set_TaxBasis(Param1: Integer);
    function Get_TaxChangeAt: Double;
    procedure Set_TaxChangeAt(Param1: Double);
    function Get_TaxUsesFormula: WordBool;
    procedure Set_TaxUsesFormula(Param1: WordBool);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
  public
    property DefaultInterface: _TaxAuthority read GetDefaultInterface;
  published
    property Account: WideString read Get_Account write Set_Account;
    property GUID: WideString read Get_GUID write Set_GUID;
    property ID: WideString read Get_ID write Set_ID;
    property Name: WideString read Get_Name write Set_Name;
    property Rate: Double read Get_Rate write Set_Rate;
    property Rate2: Double read Get_Rate2 write Set_Rate2;
    property TaxBasis: Integer read Get_TaxBasis write Set_TaxBasis;
    property TaxChangeAt: Double read Get_TaxChangeAt write Set_TaxChangeAt;
    property TaxUsesFormula: WordBool read Get_TaxUsesFormula write Set_TaxUsesFormula;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoVendor provides a Create and CreateRemote method to          
// create instances of the default interface _Vendor exposed by              
// the CoClass Vendor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoVendor = class
    class function Create: _Vendor;
    class function CreateRemote(const MachineName: string): _Vendor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TVendor
// Help String      : 
// Default Interface: _Vendor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TVendorProperties= class;
{$ENDIF}
  TVendor = class(TOleServer)
  private
    FIntf:        _Vendor;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TVendorProperties;
    function      GetServerProperties: TVendorProperties;
{$ENDIF}
    function      GetDefaultInterface: _Vendor;
  protected
    procedure InitServerData; override;
    function Get_AccountNumber: WideString;
    procedure Set_AccountNumber(const Param1: WideString);
    function Get_Address1: WideString;
    procedure Set_Address1(const Param1: WideString);
    function Get_Address2: WideString;
    procedure Set_Address2(const Param1: WideString);
    function Get_City: WideString;
    procedure Set_City(const Param1: WideString);
    function Get_CODTerms: WordBool;
    procedure Set_CODTerms(Param1: WordBool);
    function Get_Contact: WideString;
    procedure Set_Contact(const Param1: WideString);
    function Get_Country: WideString;
    procedure Set_Country(const Param1: WideString);
    function Get_CreditLimit: Double;
    procedure Set_CreditLimit(Param1: Double);
    function Get_CurrentBalance: Double;
    procedure Set_CurrentBalance(Param1: Double);
    function Get_CustomField(Index: Smallint): WideString;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString);
    function Get_DiscountDays: Smallint;
    procedure Set_DiscountDays(Param1: Smallint);
    function Get_DiscountPercent: Double;
    procedure Set_DiscountPercent(Param1: Double);
    function Get_DueAtEndOfMonth: WordBool;
    procedure Set_DueAtEndOfMonth(Param1: WordBool);
    function Get_DueOnDayOfNextMonth: WordBool;
    procedure Set_DueOnDayOfNextMonth(Param1: WordBool);
    function Get_Email: WideString;
    procedure Set_Email(const Param1: WideString);
    function Get_EmployeeIndex: Integer;
    procedure Set_EmployeeIndex(Param1: Integer);
    function Get_Fax: WideString;
    procedure Set_Fax(const Param1: WideString);
    function Get_FormsDeliveryFlags: Integer;
    procedure Set_FormsDeliveryFlags(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_LastInvoiceAmount: Double;
    procedure Set_LastInvoiceAmount(Param1: Double);
    function Get_LastInvoiceDate: OleVariant;
    procedure Set_LastInvoiceDate(Param1: OleVariant);
    function Get_LastPaymentAmount: Double;
    procedure Set_LastPaymentAmount(Param1: Double);
    function Get_LastPaymentDate: OleVariant;
    procedure Set_LastPaymentDate(Param1: OleVariant);
    function Get_Name: WideString;
    procedure Set_Name(const Param1: WideString);
    function Get_NetDueDays: Smallint;
    procedure Set_NetDueDays(Param1: Smallint);
    function Get_Payments(Index: Smallint): Double;
    procedure Set_Payments(Index: Smallint; Param2: Double);
    function Get_PrepaidTerms: WordBool;
    procedure Set_PrepaidTerms(Param1: WordBool);
    function Get_PurchaseAccount: WideString;
    procedure Set_PurchaseAccount(const Param1: WideString);
    function Get_Purchases(Index: Smallint): Double;
    procedure Set_Purchases(Index: Smallint; Param2: Double);
    function Get_ShipVia: Smallint;
    procedure Set_ShipVia(Param1: Smallint);
    function Get_State: WideString;
    procedure Set_State(const Param1: WideString);
    function Get_TaxIDNumber: WideString;
    procedure Set_TaxIDNumber(const Param1: WideString);
    function Get_Telephone1: WideString;
    procedure Set_Telephone1(const Param1: WideString);
    function Get_Telephone2: WideString;
    procedure Set_Telephone2(const Param1: WideString);
    function Get_Type1099: Smallint;
    procedure Set_Type1099(Param1: Smallint);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3(Index: Smallint): Byte;
    procedure Set_Unused3(Index: Smallint; Param2: Byte);
    function Get_Unused4: Byte;
    procedure Set_Unused4(Param1: Byte);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_Unused6: Integer;
    procedure Set_Unused6(Param1: Integer);
    function Get_UseStandardTerms: WordBool;
    procedure Set_UseStandardTerms(Param1: WordBool);
    function Get_VendorID: WideString;
    procedure Set_VendorID(const Param1: WideString);
    function Get_VendorSinceDate: OleVariant;
    procedure Set_VendorSinceDate(Param1: OleVariant);
    function Get_VendorType: WideString;
    procedure Set_VendorType(const Param1: WideString);
    function Get_Web: WideString;
    procedure Set_Web(const Param1: WideString);
    function Get_Zipcode: WideString;
    procedure Set_Zipcode(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Vendor);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function FindByPercent: Integer;
    function GetByPercent(Percent: Double): Smallint;
    function GetEqual(const VendorID: WideString): Smallint;
    function GetFirst: Smallint;
    function GetForIndex(Index: Integer): Smallint;
    function GetGreaterThan(const VendorID: WideString): Smallint;
    function GetGreaterThanOrEqual(const VendorID: WideString): Smallint;
    function GetLast: Smallint;
    function GetLessThan(const VendorID: WideString): Smallint;
    function GetLessThanOrEqual(const VendorID: WideString): Smallint;
    function GetNext: Smallint;
    function GetPrevious: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _Vendor read GetDefaultInterface;
    property CustomField[Index: Smallint]: WideString read Get_CustomField write Set_CustomField;
    property LastInvoiceDate: OleVariant read Get_LastInvoiceDate write Set_LastInvoiceDate;
    property LastPaymentDate: OleVariant read Get_LastPaymentDate write Set_LastPaymentDate;
    property Payments[Index: Smallint]: Double read Get_Payments write Set_Payments;
    property Purchases[Index: Smallint]: Double read Get_Purchases write Set_Purchases;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3[Index: Smallint]: Byte read Get_Unused3 write Set_Unused3;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property VendorSinceDate: OleVariant read Get_VendorSinceDate write Set_VendorSinceDate;
    property AccountNumber: WideString read Get_AccountNumber write Set_AccountNumber;
    property Address1: WideString read Get_Address1 write Set_Address1;
    property Address2: WideString read Get_Address2 write Set_Address2;
    property City: WideString read Get_City write Set_City;
    property CODTerms: WordBool read Get_CODTerms write Set_CODTerms;
    property Contact: WideString read Get_Contact write Set_Contact;
    property Country: WideString read Get_Country write Set_Country;
    property CreditLimit: Double read Get_CreditLimit write Set_CreditLimit;
    property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
    property DiscountDays: Smallint read Get_DiscountDays write Set_DiscountDays;
    property DiscountPercent: Double read Get_DiscountPercent write Set_DiscountPercent;
    property DueAtEndOfMonth: WordBool read Get_DueAtEndOfMonth write Set_DueAtEndOfMonth;
    property DueOnDayOfNextMonth: WordBool read Get_DueOnDayOfNextMonth write Set_DueOnDayOfNextMonth;
    property Email: WideString read Get_Email write Set_Email;
    property EmployeeIndex: Integer read Get_EmployeeIndex write Set_EmployeeIndex;
    property Fax: WideString read Get_Fax write Set_Fax;
    property FormsDeliveryFlags: Integer read Get_FormsDeliveryFlags write Set_FormsDeliveryFlags;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property LastInvoiceAmount: Double read Get_LastInvoiceAmount write Set_LastInvoiceAmount;
    property LastPaymentAmount: Double read Get_LastPaymentAmount write Set_LastPaymentAmount;
    property Name: WideString read Get_Name write Set_Name;
    property NetDueDays: Smallint read Get_NetDueDays write Set_NetDueDays;
    property PrepaidTerms: WordBool read Get_PrepaidTerms write Set_PrepaidTerms;
    property PurchaseAccount: WideString read Get_PurchaseAccount write Set_PurchaseAccount;
    property ShipVia: Smallint read Get_ShipVia write Set_ShipVia;
    property State: WideString read Get_State write Set_State;
    property TaxIDNumber: WideString read Get_TaxIDNumber write Set_TaxIDNumber;
    property Telephone1: WideString read Get_Telephone1 write Set_Telephone1;
    property Telephone2: WideString read Get_Telephone2 write Set_Telephone2;
    property Type1099: Smallint read Get_Type1099 write Set_Type1099;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property Unused6: Integer read Get_Unused6 write Set_Unused6;
    property UseStandardTerms: WordBool read Get_UseStandardTerms write Set_UseStandardTerms;
    property VendorID: WideString read Get_VendorID write Set_VendorID;
    property VendorType: WideString read Get_VendorType write Set_VendorType;
    property Web: WideString read Get_Web write Set_Web;
    property Zipcode: WideString read Get_Zipcode write Set_Zipcode;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TVendorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TVendor
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TVendorProperties = class(TPersistent)
  private
    FServer:    TVendor;
    function    GetDefaultInterface: _Vendor;
    constructor Create(AServer: TVendor);
  protected
    function Get_AccountNumber: WideString;
    procedure Set_AccountNumber(const Param1: WideString);
    function Get_Address1: WideString;
    procedure Set_Address1(const Param1: WideString);
    function Get_Address2: WideString;
    procedure Set_Address2(const Param1: WideString);
    function Get_City: WideString;
    procedure Set_City(const Param1: WideString);
    function Get_CODTerms: WordBool;
    procedure Set_CODTerms(Param1: WordBool);
    function Get_Contact: WideString;
    procedure Set_Contact(const Param1: WideString);
    function Get_Country: WideString;
    procedure Set_Country(const Param1: WideString);
    function Get_CreditLimit: Double;
    procedure Set_CreditLimit(Param1: Double);
    function Get_CurrentBalance: Double;
    procedure Set_CurrentBalance(Param1: Double);
    function Get_CustomField(Index: Smallint): WideString;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString);
    function Get_DiscountDays: Smallint;
    procedure Set_DiscountDays(Param1: Smallint);
    function Get_DiscountPercent: Double;
    procedure Set_DiscountPercent(Param1: Double);
    function Get_DueAtEndOfMonth: WordBool;
    procedure Set_DueAtEndOfMonth(Param1: WordBool);
    function Get_DueOnDayOfNextMonth: WordBool;
    procedure Set_DueOnDayOfNextMonth(Param1: WordBool);
    function Get_Email: WideString;
    procedure Set_Email(const Param1: WideString);
    function Get_EmployeeIndex: Integer;
    procedure Set_EmployeeIndex(Param1: Integer);
    function Get_Fax: WideString;
    procedure Set_Fax(const Param1: WideString);
    function Get_FormsDeliveryFlags: Integer;
    procedure Set_FormsDeliveryFlags(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_LastInvoiceAmount: Double;
    procedure Set_LastInvoiceAmount(Param1: Double);
    function Get_LastInvoiceDate: OleVariant;
    procedure Set_LastInvoiceDate(Param1: OleVariant);
    function Get_LastPaymentAmount: Double;
    procedure Set_LastPaymentAmount(Param1: Double);
    function Get_LastPaymentDate: OleVariant;
    procedure Set_LastPaymentDate(Param1: OleVariant);
    function Get_Name: WideString;
    procedure Set_Name(const Param1: WideString);
    function Get_NetDueDays: Smallint;
    procedure Set_NetDueDays(Param1: Smallint);
    function Get_Payments(Index: Smallint): Double;
    procedure Set_Payments(Index: Smallint; Param2: Double);
    function Get_PrepaidTerms: WordBool;
    procedure Set_PrepaidTerms(Param1: WordBool);
    function Get_PurchaseAccount: WideString;
    procedure Set_PurchaseAccount(const Param1: WideString);
    function Get_Purchases(Index: Smallint): Double;
    procedure Set_Purchases(Index: Smallint; Param2: Double);
    function Get_ShipVia: Smallint;
    procedure Set_ShipVia(Param1: Smallint);
    function Get_State: WideString;
    procedure Set_State(const Param1: WideString);
    function Get_TaxIDNumber: WideString;
    procedure Set_TaxIDNumber(const Param1: WideString);
    function Get_Telephone1: WideString;
    procedure Set_Telephone1(const Param1: WideString);
    function Get_Telephone2: WideString;
    procedure Set_Telephone2(const Param1: WideString);
    function Get_Type1099: Smallint;
    procedure Set_Type1099(Param1: Smallint);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3(Index: Smallint): Byte;
    procedure Set_Unused3(Index: Smallint; Param2: Byte);
    function Get_Unused4: Byte;
    procedure Set_Unused4(Param1: Byte);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_Unused6: Integer;
    procedure Set_Unused6(Param1: Integer);
    function Get_UseStandardTerms: WordBool;
    procedure Set_UseStandardTerms(Param1: WordBool);
    function Get_VendorID: WideString;
    procedure Set_VendorID(const Param1: WideString);
    function Get_VendorSinceDate: OleVariant;
    procedure Set_VendorSinceDate(Param1: OleVariant);
    function Get_VendorType: WideString;
    procedure Set_VendorType(const Param1: WideString);
    function Get_Web: WideString;
    procedure Set_Web(const Param1: WideString);
    function Get_Zipcode: WideString;
    procedure Set_Zipcode(const Param1: WideString);
  public
    property DefaultInterface: _Vendor read GetDefaultInterface;
  published
    property AccountNumber: WideString read Get_AccountNumber write Set_AccountNumber;
    property Address1: WideString read Get_Address1 write Set_Address1;
    property Address2: WideString read Get_Address2 write Set_Address2;
    property City: WideString read Get_City write Set_City;
    property CODTerms: WordBool read Get_CODTerms write Set_CODTerms;
    property Contact: WideString read Get_Contact write Set_Contact;
    property Country: WideString read Get_Country write Set_Country;
    property CreditLimit: Double read Get_CreditLimit write Set_CreditLimit;
    property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
    property DiscountDays: Smallint read Get_DiscountDays write Set_DiscountDays;
    property DiscountPercent: Double read Get_DiscountPercent write Set_DiscountPercent;
    property DueAtEndOfMonth: WordBool read Get_DueAtEndOfMonth write Set_DueAtEndOfMonth;
    property DueOnDayOfNextMonth: WordBool read Get_DueOnDayOfNextMonth write Set_DueOnDayOfNextMonth;
    property Email: WideString read Get_Email write Set_Email;
    property EmployeeIndex: Integer read Get_EmployeeIndex write Set_EmployeeIndex;
    property Fax: WideString read Get_Fax write Set_Fax;
    property FormsDeliveryFlags: Integer read Get_FormsDeliveryFlags write Set_FormsDeliveryFlags;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property LastInvoiceAmount: Double read Get_LastInvoiceAmount write Set_LastInvoiceAmount;
    property LastPaymentAmount: Double read Get_LastPaymentAmount write Set_LastPaymentAmount;
    property Name: WideString read Get_Name write Set_Name;
    property NetDueDays: Smallint read Get_NetDueDays write Set_NetDueDays;
    property PrepaidTerms: WordBool read Get_PrepaidTerms write Set_PrepaidTerms;
    property PurchaseAccount: WideString read Get_PurchaseAccount write Set_PurchaseAccount;
    property ShipVia: Smallint read Get_ShipVia write Set_ShipVia;
    property State: WideString read Get_State write Set_State;
    property TaxIDNumber: WideString read Get_TaxIDNumber write Set_TaxIDNumber;
    property Telephone1: WideString read Get_Telephone1 write Set_Telephone1;
    property Telephone2: WideString read Get_Telephone2 write Set_Telephone2;
    property Type1099: Smallint read Get_Type1099 write Set_Type1099;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property Unused6: Integer read Get_Unused6 write Set_Unused6;
    property UseStandardTerms: WordBool read Get_UseStandardTerms write Set_UseStandardTerms;
    property VendorID: WideString read Get_VendorID write Set_VendorID;
    property VendorType: WideString read Get_VendorType write Set_VendorType;
    property Web: WideString read Get_Web write Set_Web;
    property Zipcode: WideString read Get_Zipcode write Set_Zipcode;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoLineItem provides a Create and CreateRemote method to          
// create instances of the default interface _LineItem exposed by              
// the CoClass LineItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLineItem = class
    class function Create: _LineItem;
    class function CreateRemote(const MachineName: string): _LineItem;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TLineItem
// Help String      : 
// Default Interface: _LineItem
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TLineItemProperties= class;
{$ENDIF}
  TLineItem = class(TOleServer)
  private
    FIntf:        _LineItem;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TLineItemProperties;
    function      GetServerProperties: TLineItemProperties;
{$ENDIF}
    function      GetDefaultInterface: _LineItem;
  protected
    procedure InitServerData; override;
    function Get_BuyerID: WideString;
    procedure Set_BuyerID(const Param1: WideString);
    function Get_ComponentIndex(Index: Smallint): Integer;
    procedure Set_ComponentIndex(Index: Smallint; Param2: Integer);
    function Get_ComponentQuantity(Index: Smallint): Double;
    procedure Set_ComponentQuantity(Index: Smallint; Param2: Double);
    function Get_Cost: Double;
    procedure Set_Cost(Param1: Double);
    function Get_CostingMethod: Byte;
    procedure Set_CostingMethod(Param1: Byte);
    function Get_CustomField(Index: Smallint): WideString;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString);
    function Get_DefaultForPurchasing: WordBool;
    procedure Set_DefaultForPurchasing(Param1: WordBool);
    function Get_DefaultForSales: WordBool;
    procedure Set_DefaultForSales(Param1: WordBool);
    function Get_DescriptionForPurchases: WideString;
    procedure Set_DescriptionForPurchases(const Param1: WideString);
    function Get_DescriptionForSales: WideString;
    procedure Set_DescriptionForSales(const Param1: WideString);
    function Get_GLCOGSSalaryAccount: WideString;
    procedure Set_GLCOGSSalaryAccount(const Param1: WideString);
    function Get_GLInventoryAccount: WideString;
    procedure Set_GLInventoryAccount(const Param1: WideString);
    function Get_GLSalesAccount: WideString;
    procedure Set_GLSalesAccount(const Param1: WideString);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_ItemClass: Smallint;
    procedure Set_ItemClass(Param1: Smallint);
    function Get_ItemDescription: WideString;
    procedure Set_ItemDescription(const Param1: WideString);
    function Get_ItemID: WideString;
    procedure Set_ItemID(const Param1: WideString);
    function Get_ItemNote: WideString;
    procedure Set_ItemNote(const Param1: WideString);
    function Get_ItemTaxType: Smallint;
    procedure Set_ItemTaxType(Param1: Smallint);
    function Get_ItemType: WideString;
    procedure Set_ItemType(const Param1: WideString);
    function Get_Location: WideString;
    procedure Set_Location(const Param1: WideString);
    function Get_MasterItemID: WideString;
    procedure Set_MasterItemID(const Param1: WideString);
    function Get_MasterItemIndex: Integer;
    procedure Set_MasterItemIndex(Param1: Integer);
    function Get_MinimumStock: Double;
    procedure Set_MinimumStock(Param1: Double);
    function Get_NotStockItem: WordBool;
    procedure Set_NotStockItem(Param1: WordBool);
    function Get_NPrimaryAttributes: Integer;
    procedure Set_NPrimaryAttributes(Param1: Integer);
    function Get_NSecondaryAttributes: Integer;
    procedure Set_NSecondaryAttributes(Param1: Integer);
    function Get_NumberOfComponents: Smallint;
    procedure Set_NumberOfComponents(Param1: Smallint);
    function Get_PriceLevel1Value(Index: Smallint): Double;
    procedure Set_PriceLevel1Value(Index: Smallint; Param2: Double);
    function Get_PriceLevelIndex(Index: Smallint): Smallint;
    procedure Set_PriceLevelIndex(Index: Smallint; Param2: Smallint);
    function Get_PriceLevelMethod(Index: Smallint): Smallint;
    procedure Set_PriceLevelMethod(Index: Smallint; Param2: Smallint);
    function Get_PriceLevelMethodAmount(Index: Smallint): Double;
    procedure Set_PriceLevelMethodAmount(Index: Smallint; Param2: Double);
    function Get_PriceLevelName(Index: Smallint): WideString;
    procedure Set_PriceLevelName(Index: Smallint; const Param2: WideString);
    function Get_PriceLevelPrice(Index: Smallint): Double;
    procedure Set_PriceLevelPrice(Index: Smallint; Param2: Double);
    function Get_PriceLevelRounding(Index: Smallint): Smallint;
    procedure Set_PriceLevelRounding(Index: Smallint; Param2: Smallint);
    function Get_PriceLevelSpecificCent(Index: Smallint): Double;
    procedure Set_PriceLevelSpecificCent(Index: Smallint; Param2: Double);
    function Get_PriceLevelUse(Index: Smallint): Smallint;
    procedure Set_PriceLevelUse(Index: Smallint; Param2: Smallint);
    function Get_PrimaryAttributeDesc(Index: Smallint): WideString;
    procedure Set_PrimaryAttributeDesc(Index: Smallint; const Param2: WideString);
    function Get_PrimaryAttributeID(Index: Smallint): WideString;
    procedure Set_PrimaryAttributeID(Index: Smallint; const Param2: WideString);
    function Get_PrimaryAttributeName: WideString;
    procedure Set_PrimaryAttributeName(const Param1: WideString);
    function Get_PrintComponents: WordBool;
    procedure Set_PrintComponents(Param1: WordBool);
    function Get_PurchasingGUID: WideString;
    procedure Set_PurchasingGUID(const Param1: WideString);
    function Get_PurchasingUPC_SCC: WideString;
    procedure Set_PurchasingUPC_SCC(const Param1: WideString);
    function Get_PurchasingWeight: Double;
    procedure Set_PurchasingWeight(Param1: Double);
    function Get_QtyDiscGUID: WideString;
    procedure Set_QtyDiscGUID(const Param1: WideString);
    function Get_ReorderQuantity: Double;
    procedure Set_ReorderQuantity(Param1: Double);
    function Get_Sales(Index: Smallint): Double;
    procedure Set_Sales(Index: Smallint; Param2: Double);
    function Get_SalesGUID: WideString;
    procedure Set_SalesGUID(const Param1: WideString);
    function Get_SalesPrice(Index: Smallint): Double;
    procedure Set_SalesPrice(Index: Smallint; Param2: Double);
    function Get_SalesUPC_SCC: WideString;
    procedure Set_SalesUPC_SCC(const Param1: WideString);
    function Get_SalesWeight: Double;
    procedure Set_SalesWeight(Param1: Double);
    function Get_SecondaryAttributeDesc(Index: Smallint): WideString;
    procedure Set_SecondaryAttributeDesc(Index: Smallint; const Param2: WideString);
    function Get_SecondaryAttributeID(Index: Smallint): WideString;
    procedure Set_SecondaryAttributeID(Index: Smallint; const Param2: WideString);
    function Get_SecondaryAttributeName: WideString;
    procedure Set_SecondaryAttributeName(const Param1: WideString);
    function Get_SubjectToCommission: WordBool;
    procedure Set_SubjectToCommission(Param1: WordBool);
    function Get_SubstockPrimaryAttributeDesc: WideString;
    procedure Set_SubstockPrimaryAttributeDesc(const Param1: WideString);
    function Get_SubstockPrimaryAttributeID: WideString;
    procedure Set_SubstockPrimaryAttributeID(const Param1: WideString);
    function Get_SubstockSecondaryAttributeDesc: WideString;
    procedure Set_SubstockSecondaryAttributeDesc(const Param1: WideString);
    function Get_SubstockSecondaryAttributeID: WideString;
    procedure Set_SubstockSecondaryAttributeID(const Param1: WideString);
    function Get_UnitOfMeasure: WideString;
    procedure Set_UnitOfMeasure(const Param1: WideString);
    function Get_UnitsSold(Index: Smallint): Double;
    procedure Set_UnitsSold(Index: Smallint; Param2: Double);
    function Get_Unused1: Byte;
    procedure Set_Unused1(Param1: Byte);
    function Get_UPC_SKU: WideString;
    procedure Set_UPC_SKU(const Param1: WideString);
    function Get_UseMultiPacks: WordBool;
    procedure Set_UseMultiPacks(Param1: WordBool);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
    function Get_Weight: Double;
    procedure Set_Weight(Param1: Double);
    function Get_WarrantyPeriod: Integer;
    procedure Set_WarrantyPeriod(Param1: Integer);
    function Get_WarrantySpan: Integer;
    procedure Set_WarrantySpan(Param1: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _LineItem);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function FindByPercent: Integer;
    function GetByPercent(Percent: Double): Smallint;
    function GetEqual(const ID: WideString): Smallint;
    function GetFirst: Smallint;
    function GetForIndex(Index: Integer): Smallint;
    function GetGreaterThan(const LineItemID: WideString): Smallint;
    function GetGreaterThanOrEqual(const LineItemID: WideString): Smallint;
    function GetLast: Smallint;
    function GetLessThan(const LineItemID: WideString): Smallint;
    function GetLessThanOrEqual(const LineItemID: WideString): Smallint;
    function GetNext: Smallint;
    function GetPrevious: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _LineItem read GetDefaultInterface;
    property ComponentIndex[Index: Smallint]: Integer read Get_ComponentIndex write Set_ComponentIndex;
    property ComponentQuantity[Index: Smallint]: Double read Get_ComponentQuantity write Set_ComponentQuantity;
    property CustomField[Index: Smallint]: WideString read Get_CustomField write Set_CustomField;
    property PriceLevel1Value[Index: Smallint]: Double read Get_PriceLevel1Value write Set_PriceLevel1Value;
    property PriceLevelIndex[Index: Smallint]: Smallint read Get_PriceLevelIndex write Set_PriceLevelIndex;
    property PriceLevelMethod[Index: Smallint]: Smallint read Get_PriceLevelMethod write Set_PriceLevelMethod;
    property PriceLevelMethodAmount[Index: Smallint]: Double read Get_PriceLevelMethodAmount write Set_PriceLevelMethodAmount;
    property PriceLevelName[Index: Smallint]: WideString read Get_PriceLevelName write Set_PriceLevelName;
    property PriceLevelPrice[Index: Smallint]: Double read Get_PriceLevelPrice write Set_PriceLevelPrice;
    property PriceLevelRounding[Index: Smallint]: Smallint read Get_PriceLevelRounding write Set_PriceLevelRounding;
    property PriceLevelSpecificCent[Index: Smallint]: Double read Get_PriceLevelSpecificCent write Set_PriceLevelSpecificCent;
    property PriceLevelUse[Index: Smallint]: Smallint read Get_PriceLevelUse write Set_PriceLevelUse;
    property PrimaryAttributeDesc[Index: Smallint]: WideString read Get_PrimaryAttributeDesc write Set_PrimaryAttributeDesc;
    property PrimaryAttributeID[Index: Smallint]: WideString read Get_PrimaryAttributeID write Set_PrimaryAttributeID;
    property Sales[Index: Smallint]: Double read Get_Sales write Set_Sales;
    property SalesPrice[Index: Smallint]: Double read Get_SalesPrice write Set_SalesPrice;
    property SecondaryAttributeDesc[Index: Smallint]: WideString read Get_SecondaryAttributeDesc write Set_SecondaryAttributeDesc;
    property SecondaryAttributeID[Index: Smallint]: WideString read Get_SecondaryAttributeID write Set_SecondaryAttributeID;
    property UnitsSold[Index: Smallint]: Double read Get_UnitsSold write Set_UnitsSold;
    property BuyerID: WideString read Get_BuyerID write Set_BuyerID;
    property Cost: Double read Get_Cost write Set_Cost;
    property CostingMethod: Byte read Get_CostingMethod write Set_CostingMethod;
    property DefaultForPurchasing: WordBool read Get_DefaultForPurchasing write Set_DefaultForPurchasing;
    property DefaultForSales: WordBool read Get_DefaultForSales write Set_DefaultForSales;
    property DescriptionForPurchases: WideString read Get_DescriptionForPurchases write Set_DescriptionForPurchases;
    property DescriptionForSales: WideString read Get_DescriptionForSales write Set_DescriptionForSales;
    property GLCOGSSalaryAccount: WideString read Get_GLCOGSSalaryAccount write Set_GLCOGSSalaryAccount;
    property GLInventoryAccount: WideString read Get_GLInventoryAccount write Set_GLInventoryAccount;
    property GLSalesAccount: WideString read Get_GLSalesAccount write Set_GLSalesAccount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property ItemClass: Smallint read Get_ItemClass write Set_ItemClass;
    property ItemDescription: WideString read Get_ItemDescription write Set_ItemDescription;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property ItemNote: WideString read Get_ItemNote write Set_ItemNote;
    property ItemTaxType: Smallint read Get_ItemTaxType write Set_ItemTaxType;
    property ItemType: WideString read Get_ItemType write Set_ItemType;
    property Location: WideString read Get_Location write Set_Location;
    property MasterItemID: WideString read Get_MasterItemID write Set_MasterItemID;
    property MasterItemIndex: Integer read Get_MasterItemIndex write Set_MasterItemIndex;
    property MinimumStock: Double read Get_MinimumStock write Set_MinimumStock;
    property NotStockItem: WordBool read Get_NotStockItem write Set_NotStockItem;
    property NPrimaryAttributes: Integer read Get_NPrimaryAttributes write Set_NPrimaryAttributes;
    property NSecondaryAttributes: Integer read Get_NSecondaryAttributes write Set_NSecondaryAttributes;
    property NumberOfComponents: Smallint read Get_NumberOfComponents write Set_NumberOfComponents;
    property PrimaryAttributeName: WideString read Get_PrimaryAttributeName write Set_PrimaryAttributeName;
    property PrintComponents: WordBool read Get_PrintComponents write Set_PrintComponents;
    property PurchasingGUID: WideString read Get_PurchasingGUID write Set_PurchasingGUID;
    property PurchasingUPC_SCC: WideString read Get_PurchasingUPC_SCC write Set_PurchasingUPC_SCC;
    property PurchasingWeight: Double read Get_PurchasingWeight write Set_PurchasingWeight;
    property QtyDiscGUID: WideString read Get_QtyDiscGUID write Set_QtyDiscGUID;
    property ReorderQuantity: Double read Get_ReorderQuantity write Set_ReorderQuantity;
    property SalesGUID: WideString read Get_SalesGUID write Set_SalesGUID;
    property SalesUPC_SCC: WideString read Get_SalesUPC_SCC write Set_SalesUPC_SCC;
    property SalesWeight: Double read Get_SalesWeight write Set_SalesWeight;
    property SecondaryAttributeName: WideString read Get_SecondaryAttributeName write Set_SecondaryAttributeName;
    property SubjectToCommission: WordBool read Get_SubjectToCommission write Set_SubjectToCommission;
    property SubstockPrimaryAttributeDesc: WideString read Get_SubstockPrimaryAttributeDesc write Set_SubstockPrimaryAttributeDesc;
    property SubstockPrimaryAttributeID: WideString read Get_SubstockPrimaryAttributeID write Set_SubstockPrimaryAttributeID;
    property SubstockSecondaryAttributeDesc: WideString read Get_SubstockSecondaryAttributeDesc write Set_SubstockSecondaryAttributeDesc;
    property SubstockSecondaryAttributeID: WideString read Get_SubstockSecondaryAttributeID write Set_SubstockSecondaryAttributeID;
    property UnitOfMeasure: WideString read Get_UnitOfMeasure write Set_UnitOfMeasure;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property UPC_SKU: WideString read Get_UPC_SKU write Set_UPC_SKU;
    property UseMultiPacks: WordBool read Get_UseMultiPacks write Set_UseMultiPacks;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property Weight: Double read Get_Weight write Set_Weight;
    property WarrantyPeriod: Integer read Get_WarrantyPeriod write Set_WarrantyPeriod;
    property WarrantySpan: Integer read Get_WarrantySpan write Set_WarrantySpan;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TLineItemProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TLineItem
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TLineItemProperties = class(TPersistent)
  private
    FServer:    TLineItem;
    function    GetDefaultInterface: _LineItem;
    constructor Create(AServer: TLineItem);
  protected
    function Get_BuyerID: WideString;
    procedure Set_BuyerID(const Param1: WideString);
    function Get_ComponentIndex(Index: Smallint): Integer;
    procedure Set_ComponentIndex(Index: Smallint; Param2: Integer);
    function Get_ComponentQuantity(Index: Smallint): Double;
    procedure Set_ComponentQuantity(Index: Smallint; Param2: Double);
    function Get_Cost: Double;
    procedure Set_Cost(Param1: Double);
    function Get_CostingMethod: Byte;
    procedure Set_CostingMethod(Param1: Byte);
    function Get_CustomField(Index: Smallint): WideString;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString);
    function Get_DefaultForPurchasing: WordBool;
    procedure Set_DefaultForPurchasing(Param1: WordBool);
    function Get_DefaultForSales: WordBool;
    procedure Set_DefaultForSales(Param1: WordBool);
    function Get_DescriptionForPurchases: WideString;
    procedure Set_DescriptionForPurchases(const Param1: WideString);
    function Get_DescriptionForSales: WideString;
    procedure Set_DescriptionForSales(const Param1: WideString);
    function Get_GLCOGSSalaryAccount: WideString;
    procedure Set_GLCOGSSalaryAccount(const Param1: WideString);
    function Get_GLInventoryAccount: WideString;
    procedure Set_GLInventoryAccount(const Param1: WideString);
    function Get_GLSalesAccount: WideString;
    procedure Set_GLSalesAccount(const Param1: WideString);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_ItemClass: Smallint;
    procedure Set_ItemClass(Param1: Smallint);
    function Get_ItemDescription: WideString;
    procedure Set_ItemDescription(const Param1: WideString);
    function Get_ItemID: WideString;
    procedure Set_ItemID(const Param1: WideString);
    function Get_ItemNote: WideString;
    procedure Set_ItemNote(const Param1: WideString);
    function Get_ItemTaxType: Smallint;
    procedure Set_ItemTaxType(Param1: Smallint);
    function Get_ItemType: WideString;
    procedure Set_ItemType(const Param1: WideString);
    function Get_Location: WideString;
    procedure Set_Location(const Param1: WideString);
    function Get_MasterItemID: WideString;
    procedure Set_MasterItemID(const Param1: WideString);
    function Get_MasterItemIndex: Integer;
    procedure Set_MasterItemIndex(Param1: Integer);
    function Get_MinimumStock: Double;
    procedure Set_MinimumStock(Param1: Double);
    function Get_NotStockItem: WordBool;
    procedure Set_NotStockItem(Param1: WordBool);
    function Get_NPrimaryAttributes: Integer;
    procedure Set_NPrimaryAttributes(Param1: Integer);
    function Get_NSecondaryAttributes: Integer;
    procedure Set_NSecondaryAttributes(Param1: Integer);
    function Get_NumberOfComponents: Smallint;
    procedure Set_NumberOfComponents(Param1: Smallint);
    function Get_PriceLevel1Value(Index: Smallint): Double;
    procedure Set_PriceLevel1Value(Index: Smallint; Param2: Double);
    function Get_PriceLevelIndex(Index: Smallint): Smallint;
    procedure Set_PriceLevelIndex(Index: Smallint; Param2: Smallint);
    function Get_PriceLevelMethod(Index: Smallint): Smallint;
    procedure Set_PriceLevelMethod(Index: Smallint; Param2: Smallint);
    function Get_PriceLevelMethodAmount(Index: Smallint): Double;
    procedure Set_PriceLevelMethodAmount(Index: Smallint; Param2: Double);
    function Get_PriceLevelName(Index: Smallint): WideString;
    procedure Set_PriceLevelName(Index: Smallint; const Param2: WideString);
    function Get_PriceLevelPrice(Index: Smallint): Double;
    procedure Set_PriceLevelPrice(Index: Smallint; Param2: Double);
    function Get_PriceLevelRounding(Index: Smallint): Smallint;
    procedure Set_PriceLevelRounding(Index: Smallint; Param2: Smallint);
    function Get_PriceLevelSpecificCent(Index: Smallint): Double;
    procedure Set_PriceLevelSpecificCent(Index: Smallint; Param2: Double);
    function Get_PriceLevelUse(Index: Smallint): Smallint;
    procedure Set_PriceLevelUse(Index: Smallint; Param2: Smallint);
    function Get_PrimaryAttributeDesc(Index: Smallint): WideString;
    procedure Set_PrimaryAttributeDesc(Index: Smallint; const Param2: WideString);
    function Get_PrimaryAttributeID(Index: Smallint): WideString;
    procedure Set_PrimaryAttributeID(Index: Smallint; const Param2: WideString);
    function Get_PrimaryAttributeName: WideString;
    procedure Set_PrimaryAttributeName(const Param1: WideString);
    function Get_PrintComponents: WordBool;
    procedure Set_PrintComponents(Param1: WordBool);
    function Get_PurchasingGUID: WideString;
    procedure Set_PurchasingGUID(const Param1: WideString);
    function Get_PurchasingUPC_SCC: WideString;
    procedure Set_PurchasingUPC_SCC(const Param1: WideString);
    function Get_PurchasingWeight: Double;
    procedure Set_PurchasingWeight(Param1: Double);
    function Get_QtyDiscGUID: WideString;
    procedure Set_QtyDiscGUID(const Param1: WideString);
    function Get_ReorderQuantity: Double;
    procedure Set_ReorderQuantity(Param1: Double);
    function Get_Sales(Index: Smallint): Double;
    procedure Set_Sales(Index: Smallint; Param2: Double);
    function Get_SalesGUID: WideString;
    procedure Set_SalesGUID(const Param1: WideString);
    function Get_SalesPrice(Index: Smallint): Double;
    procedure Set_SalesPrice(Index: Smallint; Param2: Double);
    function Get_SalesUPC_SCC: WideString;
    procedure Set_SalesUPC_SCC(const Param1: WideString);
    function Get_SalesWeight: Double;
    procedure Set_SalesWeight(Param1: Double);
    function Get_SecondaryAttributeDesc(Index: Smallint): WideString;
    procedure Set_SecondaryAttributeDesc(Index: Smallint; const Param2: WideString);
    function Get_SecondaryAttributeID(Index: Smallint): WideString;
    procedure Set_SecondaryAttributeID(Index: Smallint; const Param2: WideString);
    function Get_SecondaryAttributeName: WideString;
    procedure Set_SecondaryAttributeName(const Param1: WideString);
    function Get_SubjectToCommission: WordBool;
    procedure Set_SubjectToCommission(Param1: WordBool);
    function Get_SubstockPrimaryAttributeDesc: WideString;
    procedure Set_SubstockPrimaryAttributeDesc(const Param1: WideString);
    function Get_SubstockPrimaryAttributeID: WideString;
    procedure Set_SubstockPrimaryAttributeID(const Param1: WideString);
    function Get_SubstockSecondaryAttributeDesc: WideString;
    procedure Set_SubstockSecondaryAttributeDesc(const Param1: WideString);
    function Get_SubstockSecondaryAttributeID: WideString;
    procedure Set_SubstockSecondaryAttributeID(const Param1: WideString);
    function Get_UnitOfMeasure: WideString;
    procedure Set_UnitOfMeasure(const Param1: WideString);
    function Get_UnitsSold(Index: Smallint): Double;
    procedure Set_UnitsSold(Index: Smallint; Param2: Double);
    function Get_Unused1: Byte;
    procedure Set_Unused1(Param1: Byte);
    function Get_UPC_SKU: WideString;
    procedure Set_UPC_SKU(const Param1: WideString);
    function Get_UseMultiPacks: WordBool;
    procedure Set_UseMultiPacks(Param1: WordBool);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
    function Get_Weight: Double;
    procedure Set_Weight(Param1: Double);
    function Get_WarrantyPeriod: Integer;
    procedure Set_WarrantyPeriod(Param1: Integer);
    function Get_WarrantySpan: Integer;
    procedure Set_WarrantySpan(Param1: Integer);
  public
    property DefaultInterface: _LineItem read GetDefaultInterface;
  published
    property BuyerID: WideString read Get_BuyerID write Set_BuyerID;
    property Cost: Double read Get_Cost write Set_Cost;
    property CostingMethod: Byte read Get_CostingMethod write Set_CostingMethod;
    property DefaultForPurchasing: WordBool read Get_DefaultForPurchasing write Set_DefaultForPurchasing;
    property DefaultForSales: WordBool read Get_DefaultForSales write Set_DefaultForSales;
    property DescriptionForPurchases: WideString read Get_DescriptionForPurchases write Set_DescriptionForPurchases;
    property DescriptionForSales: WideString read Get_DescriptionForSales write Set_DescriptionForSales;
    property GLCOGSSalaryAccount: WideString read Get_GLCOGSSalaryAccount write Set_GLCOGSSalaryAccount;
    property GLInventoryAccount: WideString read Get_GLInventoryAccount write Set_GLInventoryAccount;
    property GLSalesAccount: WideString read Get_GLSalesAccount write Set_GLSalesAccount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property ItemClass: Smallint read Get_ItemClass write Set_ItemClass;
    property ItemDescription: WideString read Get_ItemDescription write Set_ItemDescription;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property ItemNote: WideString read Get_ItemNote write Set_ItemNote;
    property ItemTaxType: Smallint read Get_ItemTaxType write Set_ItemTaxType;
    property ItemType: WideString read Get_ItemType write Set_ItemType;
    property Location: WideString read Get_Location write Set_Location;
    property MasterItemID: WideString read Get_MasterItemID write Set_MasterItemID;
    property MasterItemIndex: Integer read Get_MasterItemIndex write Set_MasterItemIndex;
    property MinimumStock: Double read Get_MinimumStock write Set_MinimumStock;
    property NotStockItem: WordBool read Get_NotStockItem write Set_NotStockItem;
    property NPrimaryAttributes: Integer read Get_NPrimaryAttributes write Set_NPrimaryAttributes;
    property NSecondaryAttributes: Integer read Get_NSecondaryAttributes write Set_NSecondaryAttributes;
    property NumberOfComponents: Smallint read Get_NumberOfComponents write Set_NumberOfComponents;
    property PrimaryAttributeName: WideString read Get_PrimaryAttributeName write Set_PrimaryAttributeName;
    property PrintComponents: WordBool read Get_PrintComponents write Set_PrintComponents;
    property PurchasingGUID: WideString read Get_PurchasingGUID write Set_PurchasingGUID;
    property PurchasingUPC_SCC: WideString read Get_PurchasingUPC_SCC write Set_PurchasingUPC_SCC;
    property PurchasingWeight: Double read Get_PurchasingWeight write Set_PurchasingWeight;
    property QtyDiscGUID: WideString read Get_QtyDiscGUID write Set_QtyDiscGUID;
    property ReorderQuantity: Double read Get_ReorderQuantity write Set_ReorderQuantity;
    property SalesGUID: WideString read Get_SalesGUID write Set_SalesGUID;
    property SalesUPC_SCC: WideString read Get_SalesUPC_SCC write Set_SalesUPC_SCC;
    property SalesWeight: Double read Get_SalesWeight write Set_SalesWeight;
    property SecondaryAttributeName: WideString read Get_SecondaryAttributeName write Set_SecondaryAttributeName;
    property SubjectToCommission: WordBool read Get_SubjectToCommission write Set_SubjectToCommission;
    property SubstockPrimaryAttributeDesc: WideString read Get_SubstockPrimaryAttributeDesc write Set_SubstockPrimaryAttributeDesc;
    property SubstockPrimaryAttributeID: WideString read Get_SubstockPrimaryAttributeID write Set_SubstockPrimaryAttributeID;
    property SubstockSecondaryAttributeDesc: WideString read Get_SubstockSecondaryAttributeDesc write Set_SubstockSecondaryAttributeDesc;
    property SubstockSecondaryAttributeID: WideString read Get_SubstockSecondaryAttributeID write Set_SubstockSecondaryAttributeID;
    property UnitOfMeasure: WideString read Get_UnitOfMeasure write Set_UnitOfMeasure;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property UPC_SKU: WideString read Get_UPC_SKU write Set_UPC_SKU;
    property UseMultiPacks: WordBool read Get_UseMultiPacks write Set_UseMultiPacks;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property Weight: Double read Get_Weight write Set_Weight;
    property WarrantyPeriod: Integer read Get_WarrantyPeriod write Set_WarrantyPeriod;
    property WarrantySpan: Integer read Get_WarrantySpan write Set_WarrantySpan;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGeneralData provides a Create and CreateRemote method to          
// create instances of the default interface _GeneralData exposed by              
// the CoClass GeneralData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGeneralData = class
    class function Create: _GeneralData;
    class function CreateRemote(const MachineName: string): _GeneralData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGeneralData
// Help String      : 
// Default Interface: _GeneralData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGeneralDataProperties= class;
{$ENDIF}
  TGeneralData = class(TOleServer)
  private
    FIntf:        _GeneralData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGeneralDataProperties;
    function      GetServerProperties: TGeneralDataProperties;
{$ENDIF}
    function      GetDefaultInterface: _GeneralData;
  protected
    procedure InitServerData; override;
    function Get_BankRecAccount: WideString;
    procedure Set_BankRecAccount(const Param1: WideString);
    function Get_BatchEntryCount(Index: Smallint): Smallint;
    procedure Set_BatchEntryCount(Index: Smallint; Param2: Smallint);
    function Get_BatchFlag(Index: Smallint): Byte;
    procedure Set_BatchFlag(Index: Smallint; Param2: Byte);
    function Get_BBEquityAccount: WideString;
    procedure Set_BBEquityAccount(const Param1: WideString);
    function Get_CalendarYear: Smallint;
    procedure Set_CalendarYear(Param1: Smallint);
    function Get_CurrentPeriod: Smallint;
    function Get_DateLastPurge: OleVariant;
    procedure Set_DateLastPurge(Param1: OleVariant);
    function Get_LastActRecAccnt: WideString;
    procedure Set_LastActRecAccnt(const Param1: WideString);
    function Get_LastPostOrderNumber: Integer;
    procedure Set_LastPostOrderNumber(Param1: Integer);
    function Get_NumberOfPeriods: Smallint;
    procedure Set_NumberOfPeriods(Param1: Smallint);
    function Get_OldestPO: OleVariant;
    procedure Set_OldestPO(Param1: OleVariant);
    function Get_OldestQuote: OleVariant;
    procedure Set_OldestQuote(Param1: OleVariant);
    function Get_OldestUnpostedTrx: OleVariant;
    procedure Set_OldestUnpostedTrx(Param1: OleVariant);
    function Get_PeriodEndDate(Index: Smallint): OleVariant;
    procedure Set_PeriodEndDate(Index: Smallint; Param2: OleVariant);
    function Get_PeriodStartDate(Index: Smallint): OleVariant;
    procedure Set_PeriodStartDate(Index: Smallint; Param2: OleVariant);
    function Get_PriorPeriod: Smallint;
    procedure Set_PriorPeriod(Param1: Smallint);
    function Get_RoundingAccount: WideString;
    procedure Set_RoundingAccount(const Param1: WideString);
    function Get_Ten99UnprintedNextYear: WordBool;
    procedure Set_Ten99UnprintedNextYear(Param1: WordBool);
    function Get_Ten99UnprintedThisYear: WordBool;
    procedure Set_Ten99UnprintedThisYear(Param1: WordBool);
    function Get_UnidentifiedAccount1: WideString;
    procedure Set_UnidentifiedAccount1(const Param1: WideString);
    function Get_UnidentifiedAccount2: WideString;
    procedure Set_UnidentifiedAccount2(const Param1: WideString);
    function Get_UnidentifiedDate: OleVariant;
    procedure Set_UnidentifiedDate(Param1: OleVariant);
    function Get_UnpostedFlag: Byte;
    procedure Set_UnpostedFlag(Param1: Byte);
    function Get_UnusedDate1: OleVariant;
    procedure Set_UnusedDate1(Param1: OleVariant);
    function Get_UnusedDate2: OleVariant;
    procedure Set_UnusedDate2(Param1: OleVariant);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3(Index: Smallint): Byte;
    procedure Set_Unused3(Index: Smallint; Param2: Byte);
    function Get_Unused4: Byte;
    procedure Set_Unused4(Param1: Byte);
    function Get_Unknown5: Byte;
    procedure Set_Unknown5(Param1: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused7(Index: Smallint): Byte;
    procedure Set_Unused7(Index: Smallint; Param2: Byte);
    function Get_Unknown8: Byte;
    procedure Set_Unknown8(Param1: Byte);
    function Get_Unused9(Index: Smallint): Byte;
    procedure Set_Unused9(Index: Smallint; Param2: Byte);
    function Get_Unused10: Byte;
    procedure Set_Unused10(Param1: Byte);
    function Get_Unknown11(Index: Smallint): Byte;
    procedure Set_Unknown11(Index: Smallint; Param2: Byte);
    function Get_Unknown12(Index: Smallint): Byte;
    procedure Set_Unknown12(Index: Smallint; Param2: Byte);
    function Get_Unused13(Index: Smallint): Byte;
    procedure Set_Unused13(Index: Smallint; Param2: Byte);
    function Get_Unknown14(Index: Smallint): Byte;
    procedure Set_Unknown14(Index: Smallint; Param2: Byte);
    function Get_Unused15(Index: Smallint): Byte;
    procedure Set_Unused15(Index: Smallint; Param2: Byte);
    function Get_Unknown16(Index: Smallint): Byte;
    procedure Set_Unknown16(Index: Smallint; Param2: Byte);
    function Get_Unused17(Index: Smallint): Byte;
    procedure Set_Unused17(Index: Smallint; Param2: Byte);
    function Get_Unused18: Byte;
    procedure Set_Unused18(Param1: Byte);
    function Get_Unused19: Byte;
    procedure Set_Unused19(Param1: Byte);
    function Get_Version: WideString;
    function Get_W2UnprintedNextYear: WordBool;
    procedure Set_W2UnprintedNextYear(Param1: WordBool);
    function Get_W2UnprintedThisYear: WordBool;
    procedure Set_W2UnprintedThisYear(Param1: WordBool);
    function Get_YearlyGLPrintedNextYear: WordBool;
    procedure Set_YearlyGLPrintedNextYear(Param1: WordBool);
    function Get_YearlyGLPrintedThisYear: WordBool;
    procedure Set_YearlyGLPrintedThisYear(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _GeneralData);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Read: Smallint;
    function Update: Smallint;
    property DefaultInterface: _GeneralData read GetDefaultInterface;
    property BatchEntryCount[Index: Smallint]: Smallint read Get_BatchEntryCount write Set_BatchEntryCount;
    property BatchFlag[Index: Smallint]: Byte read Get_BatchFlag write Set_BatchFlag;
    property CurrentPeriod: Smallint read Get_CurrentPeriod;
    property DateLastPurge: OleVariant read Get_DateLastPurge write Set_DateLastPurge;
    property OldestPO: OleVariant read Get_OldestPO write Set_OldestPO;
    property OldestQuote: OleVariant read Get_OldestQuote write Set_OldestQuote;
    property OldestUnpostedTrx: OleVariant read Get_OldestUnpostedTrx write Set_OldestUnpostedTrx;
    property PeriodEndDate[Index: Smallint]: OleVariant read Get_PeriodEndDate write Set_PeriodEndDate;
    property PeriodStartDate[Index: Smallint]: OleVariant read Get_PeriodStartDate write Set_PeriodStartDate;
    property UnidentifiedDate: OleVariant read Get_UnidentifiedDate write Set_UnidentifiedDate;
    property UnusedDate1: OleVariant read Get_UnusedDate1 write Set_UnusedDate1;
    property UnusedDate2: OleVariant read Get_UnusedDate2 write Set_UnusedDate2;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3[Index: Smallint]: Byte read Get_Unused3 write Set_Unused3;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property Unused7[Index: Smallint]: Byte read Get_Unused7 write Set_Unused7;
    property Unused9[Index: Smallint]: Byte read Get_Unused9 write Set_Unused9;
    property Unknown11[Index: Smallint]: Byte read Get_Unknown11 write Set_Unknown11;
    property Unknown12[Index: Smallint]: Byte read Get_Unknown12 write Set_Unknown12;
    property Unused13[Index: Smallint]: Byte read Get_Unused13 write Set_Unused13;
    property Unknown14[Index: Smallint]: Byte read Get_Unknown14 write Set_Unknown14;
    property Unused15[Index: Smallint]: Byte read Get_Unused15 write Set_Unused15;
    property Unknown16[Index: Smallint]: Byte read Get_Unknown16 write Set_Unknown16;
    property Unused17[Index: Smallint]: Byte read Get_Unused17 write Set_Unused17;
    property Version: WideString read Get_Version;
    property BankRecAccount: WideString read Get_BankRecAccount write Set_BankRecAccount;
    property BBEquityAccount: WideString read Get_BBEquityAccount write Set_BBEquityAccount;
    property CalendarYear: Smallint read Get_CalendarYear write Set_CalendarYear;
    property LastActRecAccnt: WideString read Get_LastActRecAccnt write Set_LastActRecAccnt;
    property LastPostOrderNumber: Integer read Get_LastPostOrderNumber write Set_LastPostOrderNumber;
    property NumberOfPeriods: Smallint read Get_NumberOfPeriods write Set_NumberOfPeriods;
    property PriorPeriod: Smallint read Get_PriorPeriod write Set_PriorPeriod;
    property RoundingAccount: WideString read Get_RoundingAccount write Set_RoundingAccount;
    property Ten99UnprintedNextYear: WordBool read Get_Ten99UnprintedNextYear write Set_Ten99UnprintedNextYear;
    property Ten99UnprintedThisYear: WordBool read Get_Ten99UnprintedThisYear write Set_Ten99UnprintedThisYear;
    property UnidentifiedAccount1: WideString read Get_UnidentifiedAccount1 write Set_UnidentifiedAccount1;
    property UnidentifiedAccount2: WideString read Get_UnidentifiedAccount2 write Set_UnidentifiedAccount2;
    property UnpostedFlag: Byte read Get_UnpostedFlag write Set_UnpostedFlag;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property Unknown5: Byte read Get_Unknown5 write Set_Unknown5;
    property Unknown8: Byte read Get_Unknown8 write Set_Unknown8;
    property Unused10: Byte read Get_Unused10 write Set_Unused10;
    property Unused18: Byte read Get_Unused18 write Set_Unused18;
    property Unused19: Byte read Get_Unused19 write Set_Unused19;
    property W2UnprintedNextYear: WordBool read Get_W2UnprintedNextYear write Set_W2UnprintedNextYear;
    property W2UnprintedThisYear: WordBool read Get_W2UnprintedThisYear write Set_W2UnprintedThisYear;
    property YearlyGLPrintedNextYear: WordBool read Get_YearlyGLPrintedNextYear write Set_YearlyGLPrintedNextYear;
    property YearlyGLPrintedThisYear: WordBool read Get_YearlyGLPrintedThisYear write Set_YearlyGLPrintedThisYear;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGeneralDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGeneralData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGeneralDataProperties = class(TPersistent)
  private
    FServer:    TGeneralData;
    function    GetDefaultInterface: _GeneralData;
    constructor Create(AServer: TGeneralData);
  protected
    function Get_BankRecAccount: WideString;
    procedure Set_BankRecAccount(const Param1: WideString);
    function Get_BatchEntryCount(Index: Smallint): Smallint;
    procedure Set_BatchEntryCount(Index: Smallint; Param2: Smallint);
    function Get_BatchFlag(Index: Smallint): Byte;
    procedure Set_BatchFlag(Index: Smallint; Param2: Byte);
    function Get_BBEquityAccount: WideString;
    procedure Set_BBEquityAccount(const Param1: WideString);
    function Get_CalendarYear: Smallint;
    procedure Set_CalendarYear(Param1: Smallint);
    function Get_CurrentPeriod: Smallint;
    function Get_DateLastPurge: OleVariant;
    procedure Set_DateLastPurge(Param1: OleVariant);
    function Get_LastActRecAccnt: WideString;
    procedure Set_LastActRecAccnt(const Param1: WideString);
    function Get_LastPostOrderNumber: Integer;
    procedure Set_LastPostOrderNumber(Param1: Integer);
    function Get_NumberOfPeriods: Smallint;
    procedure Set_NumberOfPeriods(Param1: Smallint);
    function Get_OldestPO: OleVariant;
    procedure Set_OldestPO(Param1: OleVariant);
    function Get_OldestQuote: OleVariant;
    procedure Set_OldestQuote(Param1: OleVariant);
    function Get_OldestUnpostedTrx: OleVariant;
    procedure Set_OldestUnpostedTrx(Param1: OleVariant);
    function Get_PeriodEndDate(Index: Smallint): OleVariant;
    procedure Set_PeriodEndDate(Index: Smallint; Param2: OleVariant);
    function Get_PeriodStartDate(Index: Smallint): OleVariant;
    procedure Set_PeriodStartDate(Index: Smallint; Param2: OleVariant);
    function Get_PriorPeriod: Smallint;
    procedure Set_PriorPeriod(Param1: Smallint);
    function Get_RoundingAccount: WideString;
    procedure Set_RoundingAccount(const Param1: WideString);
    function Get_Ten99UnprintedNextYear: WordBool;
    procedure Set_Ten99UnprintedNextYear(Param1: WordBool);
    function Get_Ten99UnprintedThisYear: WordBool;
    procedure Set_Ten99UnprintedThisYear(Param1: WordBool);
    function Get_UnidentifiedAccount1: WideString;
    procedure Set_UnidentifiedAccount1(const Param1: WideString);
    function Get_UnidentifiedAccount2: WideString;
    procedure Set_UnidentifiedAccount2(const Param1: WideString);
    function Get_UnidentifiedDate: OleVariant;
    procedure Set_UnidentifiedDate(Param1: OleVariant);
    function Get_UnpostedFlag: Byte;
    procedure Set_UnpostedFlag(Param1: Byte);
    function Get_UnusedDate1: OleVariant;
    procedure Set_UnusedDate1(Param1: OleVariant);
    function Get_UnusedDate2: OleVariant;
    procedure Set_UnusedDate2(Param1: OleVariant);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3(Index: Smallint): Byte;
    procedure Set_Unused3(Index: Smallint; Param2: Byte);
    function Get_Unused4: Byte;
    procedure Set_Unused4(Param1: Byte);
    function Get_Unknown5: Byte;
    procedure Set_Unknown5(Param1: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused7(Index: Smallint): Byte;
    procedure Set_Unused7(Index: Smallint; Param2: Byte);
    function Get_Unknown8: Byte;
    procedure Set_Unknown8(Param1: Byte);
    function Get_Unused9(Index: Smallint): Byte;
    procedure Set_Unused9(Index: Smallint; Param2: Byte);
    function Get_Unused10: Byte;
    procedure Set_Unused10(Param1: Byte);
    function Get_Unknown11(Index: Smallint): Byte;
    procedure Set_Unknown11(Index: Smallint; Param2: Byte);
    function Get_Unknown12(Index: Smallint): Byte;
    procedure Set_Unknown12(Index: Smallint; Param2: Byte);
    function Get_Unused13(Index: Smallint): Byte;
    procedure Set_Unused13(Index: Smallint; Param2: Byte);
    function Get_Unknown14(Index: Smallint): Byte;
    procedure Set_Unknown14(Index: Smallint; Param2: Byte);
    function Get_Unused15(Index: Smallint): Byte;
    procedure Set_Unused15(Index: Smallint; Param2: Byte);
    function Get_Unknown16(Index: Smallint): Byte;
    procedure Set_Unknown16(Index: Smallint; Param2: Byte);
    function Get_Unused17(Index: Smallint): Byte;
    procedure Set_Unused17(Index: Smallint; Param2: Byte);
    function Get_Unused18: Byte;
    procedure Set_Unused18(Param1: Byte);
    function Get_Unused19: Byte;
    procedure Set_Unused19(Param1: Byte);
    function Get_Version: WideString;
    function Get_W2UnprintedNextYear: WordBool;
    procedure Set_W2UnprintedNextYear(Param1: WordBool);
    function Get_W2UnprintedThisYear: WordBool;
    procedure Set_W2UnprintedThisYear(Param1: WordBool);
    function Get_YearlyGLPrintedNextYear: WordBool;
    procedure Set_YearlyGLPrintedNextYear(Param1: WordBool);
    function Get_YearlyGLPrintedThisYear: WordBool;
    procedure Set_YearlyGLPrintedThisYear(Param1: WordBool);
  public
    property DefaultInterface: _GeneralData read GetDefaultInterface;
  published
    property BankRecAccount: WideString read Get_BankRecAccount write Set_BankRecAccount;
    property BBEquityAccount: WideString read Get_BBEquityAccount write Set_BBEquityAccount;
    property CalendarYear: Smallint read Get_CalendarYear write Set_CalendarYear;
    property LastActRecAccnt: WideString read Get_LastActRecAccnt write Set_LastActRecAccnt;
    property LastPostOrderNumber: Integer read Get_LastPostOrderNumber write Set_LastPostOrderNumber;
    property NumberOfPeriods: Smallint read Get_NumberOfPeriods write Set_NumberOfPeriods;
    property PriorPeriod: Smallint read Get_PriorPeriod write Set_PriorPeriod;
    property RoundingAccount: WideString read Get_RoundingAccount write Set_RoundingAccount;
    property Ten99UnprintedNextYear: WordBool read Get_Ten99UnprintedNextYear write Set_Ten99UnprintedNextYear;
    property Ten99UnprintedThisYear: WordBool read Get_Ten99UnprintedThisYear write Set_Ten99UnprintedThisYear;
    property UnidentifiedAccount1: WideString read Get_UnidentifiedAccount1 write Set_UnidentifiedAccount1;
    property UnidentifiedAccount2: WideString read Get_UnidentifiedAccount2 write Set_UnidentifiedAccount2;
    property UnpostedFlag: Byte read Get_UnpostedFlag write Set_UnpostedFlag;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property Unknown5: Byte read Get_Unknown5 write Set_Unknown5;
    property Unknown8: Byte read Get_Unknown8 write Set_Unknown8;
    property Unused10: Byte read Get_Unused10 write Set_Unused10;
    property Unused18: Byte read Get_Unused18 write Set_Unused18;
    property Unused19: Byte read Get_Unused19 write Set_Unused19;
    property W2UnprintedNextYear: WordBool read Get_W2UnprintedNextYear write Set_W2UnprintedNextYear;
    property W2UnprintedThisYear: WordBool read Get_W2UnprintedThisYear write Set_W2UnprintedThisYear;
    property YearlyGLPrintedNextYear: WordBool read Get_YearlyGLPrintedNextYear write Set_YearlyGLPrintedNextYear;
    property YearlyGLPrintedThisYear: WordBool read Get_YearlyGLPrintedThisYear write Set_YearlyGLPrintedThisYear;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSelectCustomer provides a Create and CreateRemote method to          
// create instances of the default interface _SelectCustomer exposed by              
// the CoClass SelectCustomer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectCustomer = class
    class function Create: _SelectCustomer;
    class function CreateRemote(const MachineName: string): _SelectCustomer;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSelectCustomer
// Help String      : 
// Default Interface: _SelectCustomer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSelectCustomerProperties= class;
{$ENDIF}
  TSelectCustomer = class(TOleServer)
  private
    FIntf:        _SelectCustomer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSelectCustomerProperties;
    function      GetServerProperties: TSelectCustomerProperties;
{$ENDIF}
    function      GetDefaultInterface: _SelectCustomer;
  protected
    procedure InitServerData; override;
    function Get_CustomerID: WideString;
    procedure Set_CustomerID(const Param1: WideString);
    procedure Set_ExcludeInactive(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SelectCustomer);
    procedure Disconnect; override;
    function ShowOpen: OleVariant;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
    property DefaultInterface: _SelectCustomer read GetDefaultInterface;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
    property CustomerID: WideString read Get_CustomerID write Set_CustomerID;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSelectCustomerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSelectCustomer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSelectCustomerProperties = class(TPersistent)
  private
    FServer:    TSelectCustomer;
    function    GetDefaultInterface: _SelectCustomer;
    constructor Create(AServer: TSelectCustomer);
  protected
    function Get_CustomerID: WideString;
    procedure Set_CustomerID(const Param1: WideString);
    procedure Set_ExcludeInactive(Param1: WordBool);
  public
    property DefaultInterface: _SelectCustomer read GetDefaultInterface;
  published
    property CustomerID: WideString read Get_CustomerID write Set_CustomerID;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSelectDate provides a Create and CreateRemote method to          
// create instances of the default interface _SelectDate exposed by              
// the CoClass SelectDate. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectDate = class
    class function Create: _SelectDate;
    class function CreateRemote(const MachineName: string): _SelectDate;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSelectDate
// Help String      : 
// Default Interface: _SelectDate
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSelectDateProperties= class;
{$ENDIF}
  TSelectDate = class(TOleServer)
  private
    FIntf:        _SelectDate;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSelectDateProperties;
    function      GetServerProperties: TSelectDateProperties;
{$ENDIF}
    function      GetDefaultInterface: _SelectDate;
  protected
    procedure InitServerData; override;
    function Get_SelectedDate: OleVariant;
    procedure Set_SelectedDate(Param1: OleVariant);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SelectDate);
    procedure Disconnect; override;
    function ShowOpen: OleVariant;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
    property DefaultInterface: _SelectDate read GetDefaultInterface;
    property SelectedDate: OleVariant read Get_SelectedDate write Set_SelectedDate;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSelectDateProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSelectDate
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSelectDateProperties = class(TPersistent)
  private
    FServer:    TSelectDate;
    function    GetDefaultInterface: _SelectDate;
    constructor Create(AServer: TSelectDate);
  protected
    function Get_SelectedDate: OleVariant;
    procedure Set_SelectedDate(Param1: OleVariant);
  public
    property DefaultInterface: _SelectDate read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSelectSalesTaxCode provides a Create and CreateRemote method to          
// create instances of the default interface _SelectSalesTaxCode exposed by              
// the CoClass SelectSalesTaxCode. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectSalesTaxCode = class
    class function Create: _SelectSalesTaxCode;
    class function CreateRemote(const MachineName: string): _SelectSalesTaxCode;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSelectSalesTaxCode
// Help String      : 
// Default Interface: _SelectSalesTaxCode
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSelectSalesTaxCodeProperties= class;
{$ENDIF}
  TSelectSalesTaxCode = class(TOleServer)
  private
    FIntf:        _SelectSalesTaxCode;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSelectSalesTaxCodeProperties;
    function      GetServerProperties: TSelectSalesTaxCodeProperties;
{$ENDIF}
    function      GetDefaultInterface: _SelectSalesTaxCode;
  protected
    procedure InitServerData; override;
    function Get_SalesTaxCode: WideString;
    procedure Set_SalesTaxCode(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SelectSalesTaxCode);
    procedure Disconnect; override;
    function ShowOpen: OleVariant;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
    property DefaultInterface: _SelectSalesTaxCode read GetDefaultInterface;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSelectSalesTaxCodeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSelectSalesTaxCode
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSelectSalesTaxCodeProperties = class(TPersistent)
  private
    FServer:    TSelectSalesTaxCode;
    function    GetDefaultInterface: _SelectSalesTaxCode;
    constructor Create(AServer: TSelectSalesTaxCode);
  protected
    function Get_SalesTaxCode: WideString;
    procedure Set_SalesTaxCode(const Param1: WideString);
  public
    property DefaultInterface: _SelectSalesTaxCode read GetDefaultInterface;
  published
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDefaultShipMethod provides a Create and CreateRemote method to          
// create instances of the default interface _DefaultShipMethod exposed by              
// the CoClass DefaultShipMethod. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDefaultShipMethod = class
    class function Create: _DefaultShipMethod;
    class function CreateRemote(const MachineName: string): _DefaultShipMethod;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDefaultShipMethod
// Help String      : 
// Default Interface: _DefaultShipMethod
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDefaultShipMethodProperties= class;
{$ENDIF}
  TDefaultShipMethod = class(TOleServer)
  private
    FIntf:        _DefaultShipMethod;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDefaultShipMethodProperties;
    function      GetServerProperties: TDefaultShipMethodProperties;
{$ENDIF}
    function      GetDefaultInterface: _DefaultShipMethod;
  protected
    procedure InitServerData; override;
    function Get_Description(Index: Smallint): WideString;
    procedure Set_Description(Index: Smallint; const Param2: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DefaultShipMethod);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Read: Smallint;
    function Update: Smallint;
    property DefaultInterface: _DefaultShipMethod read GetDefaultInterface;
    property Description[Index: Smallint]: WideString read Get_Description write Set_Description;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDefaultShipMethodProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDefaultShipMethod
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDefaultShipMethodProperties = class(TPersistent)
  private
    FServer:    TDefaultShipMethod;
    function    GetDefaultInterface: _DefaultShipMethod;
    constructor Create(AServer: TDefaultShipMethod);
  protected
    function Get_Description(Index: Smallint): WideString;
    procedure Set_Description(Index: Smallint; const Param2: WideString);
  public
    property DefaultInterface: _DefaultShipMethod read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSelectSalesRep provides a Create and CreateRemote method to          
// create instances of the default interface _SelectSalesRep exposed by              
// the CoClass SelectSalesRep. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectSalesRep = class
    class function Create: _SelectSalesRep;
    class function CreateRemote(const MachineName: string): _SelectSalesRep;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSelectSalesRep
// Help String      : 
// Default Interface: _SelectSalesRep
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSelectSalesRepProperties= class;
{$ENDIF}
  TSelectSalesRep = class(TOleServer)
  private
    FIntf:        _SelectSalesRep;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSelectSalesRepProperties;
    function      GetServerProperties: TSelectSalesRepProperties;
{$ENDIF}
    function      GetDefaultInterface: _SelectSalesRep;
  protected
    procedure InitServerData; override;
    function Get_EmployeeID: WideString;
    procedure Set_EmployeeID(const Param1: WideString);
    procedure Set_ExcludeInactive(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SelectSalesRep);
    procedure Disconnect; override;
    function ShowOpen: OleVariant;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
    property DefaultInterface: _SelectSalesRep read GetDefaultInterface;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSelectSalesRepProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSelectSalesRep
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSelectSalesRepProperties = class(TPersistent)
  private
    FServer:    TSelectSalesRep;
    function    GetDefaultInterface: _SelectSalesRep;
    constructor Create(AServer: TSelectSalesRep);
  protected
    function Get_EmployeeID: WideString;
    procedure Set_EmployeeID(const Param1: WideString);
    procedure Set_ExcludeInactive(Param1: WordBool);
  public
    property DefaultInterface: _SelectSalesRep read GetDefaultInterface;
  published
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSelectAccount provides a Create and CreateRemote method to          
// create instances of the default interface _SelectAccount exposed by              
// the CoClass SelectAccount. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectAccount = class
    class function Create: _SelectAccount;
    class function CreateRemote(const MachineName: string): _SelectAccount;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSelectAccount
// Help String      : 
// Default Interface: _SelectAccount
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSelectAccountProperties= class;
{$ENDIF}
  TSelectAccount = class(TOleServer)
  private
    FIntf:        _SelectAccount;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSelectAccountProperties;
    function      GetServerProperties: TSelectAccountProperties;
{$ENDIF}
    function      GetDefaultInterface: _SelectAccount;
  protected
    procedure InitServerData; override;
    function Get_AccountID: WideString;
    procedure Set_AccountID(const Param1: WideString);
    procedure Set_ExcludeInactive(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SelectAccount);
    procedure Disconnect; override;
    function ShowOpen: OleVariant;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
    property DefaultInterface: _SelectAccount read GetDefaultInterface;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
    property AccountID: WideString read Get_AccountID write Set_AccountID;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSelectAccountProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSelectAccount
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSelectAccountProperties = class(TPersistent)
  private
    FServer:    TSelectAccount;
    function    GetDefaultInterface: _SelectAccount;
    constructor Create(AServer: TSelectAccount);
  protected
    function Get_AccountID: WideString;
    procedure Set_AccountID(const Param1: WideString);
    procedure Set_ExcludeInactive(Param1: WordBool);
  public
    property DefaultInterface: _SelectAccount read GetDefaultInterface;
  published
    property AccountID: WideString read Get_AccountID write Set_AccountID;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSalesJournal provides a Create and CreateRemote method to          
// create instances of the default interface _SalesJournal exposed by              
// the CoClass SalesJournal. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSalesJournal = class
    class function Create: _SalesJournal;
    class function CreateRemote(const MachineName: string): _SalesJournal;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSalesJournal
// Help String      : 
// Default Interface: _SalesJournal
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSalesJournalProperties= class;
{$ENDIF}
  TSalesJournal = class(TOleServer)
  private
    FIntf:        _SalesJournal;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSalesJournalProperties;
    function      GetServerProperties: TSalesJournalProperties;
{$ENDIF}
    function      GetDefaultInterface: _SalesJournal;
  protected
    procedure InitServerData; override;
    function Get_AmountReceived: Double;
    procedure Set_AmountReceived(Param1: Double);
    function Get_ARAccount: WideString;
    procedure Set_ARAccount(const Param1: WideString);
    function Get_ARAmount: Double;
    procedure Set_ARAmount(Param1: Double);
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_CloseSalesOrder: WordBool;
    procedure Set_CloseSalesOrder(Param1: WordBool);
    function Get_CustomerIndex: Integer;
    procedure Set_CustomerIndex(Param1: Integer);
    function Get_CustomerName: WideString;
    procedure Set_CustomerName(const Param1: WideString);
    function Get_CustomerPO: WideString;
    procedure Set_CustomerPO(const Param1: WideString);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DateDue: OleVariant;
    procedure Set_DateDue(Param1: OleVariant);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailApplyToSO(Index: Smallint): WordBool;
    procedure Set_DetailApplyToSO(Index: Smallint; Param2: WordBool);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
    procedure Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailCostOfSalesAmount(Index: Smallint): Double;
    procedure Set_DetailCostOfSalesAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
    function Get_DetailCustomerIndex(Index: Smallint): Integer;
    procedure Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailDisplayedLine(Index: Smallint): Smallint;
    procedure Set_DetailDisplayedLine(Index: Smallint; Param2: Smallint);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailFreightFlag(Index: Smallint): WordBool;
    procedure Set_DetailFreightFlag(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailInventoryAccount(Index: Smallint): WideString;
    procedure Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailInvoiceNRecord(Index: Smallint): Integer;
    procedure Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
    function Get_DetailInvoicePaid(Index: Smallint): WideString;
    procedure Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailSalesTaxAuthority(Index: Smallint): WideString;
    procedure Set_DetailSalesTaxAuthority(Index: Smallint; const Param2: WideString);
    function Get_DetailSOLine(Index: Smallint): Smallint;
    procedure Set_DetailSOLine(Index: Smallint; Param2: Smallint);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTaxType(Index: Smallint): Smallint;
    procedure Set_DetailTaxType(Index: Smallint; Param2: Smallint);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUMGUID(Index: Smallint): WideString;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnused1(Index: Smallint): Byte;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Byte);
    function Get_DiscountAmount: Double;
    procedure Set_DiscountAmount(Param1: Double);
    function Get_DiscountDate: OleVariant;
    procedure Set_DiscountDate(Param1: OleVariant);
    function Get_DropShip: WordBool;
    procedure Set_DropShip(Param1: WordBool);
    function Get_DropShipCustomerIndex: Integer;
    procedure Set_DropShipCustomerIndex(Param1: Integer);
    function Get_DropShipInvNo: WideString;
    procedure Set_DropShipInvNo(const Param1: WideString);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HasPartner: WordBool;
    procedure Set_HasPartner(Param1: WordBool);
    function Get_InternalNote: WideString;
    procedure Set_InternalNote(const Param1: WideString);
    function Get_InvoiceNumber: WideString;
    procedure Set_InvoiceNumber(const Param1: WideString);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_JrnlTypeEx: Integer;
    procedure Set_JrnlTypeEx(Param1: Integer);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NextInvoiceNumber: WideString;
    procedure Set_NextInvoiceNumber(const Param1: WideString);
    function Get_NextQuoteNumber: WideString;
    procedure Set_NextSONumber(const Param1: WideString);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_NotePrintsAfterItems: WordBool;
    procedure Set_NotePrintsAfterItems(Param1: WordBool);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_NumOrderLines: Smallint;
    procedure Set_NumOrderLines(Param1: Smallint);
    function Get_PaymentDate: OleVariant;
    procedure Set_PaymentDate(Param1: OleVariant);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_Prepayment: WordBool;
    procedure Set_Prepayment(Param1: WordBool);
    function Get_PrintBeforeInvoiceReference: WordBool;
    procedure Set_PrintBeforeInvoiceReference(Param1: WordBool);
    function Get_Quote: WordBool;
    procedure Set_Quote(Param1: WordBool);
    function Get_QuoteGoodThruDate: OleVariant;
    procedure Set_QuoteGoodThruDate(Param1: OleVariant);
    function Get_QuoteNumber: WideString;
    procedure Set_QuoteNumber(const Param1: WideString);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_RecurrenceIndex: Integer;
    procedure Set_RecurrenceIndex(Param1: Integer);
    function Get_RecurrenceRate: Smallint;
    procedure Set_RecurrenceRate(Param1: Smallint);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_ReturnAuthorization: WideString;
    procedure Set_ReturnAuthorization(const Param1: WideString);
    function Get_SalesRepID: WideString;
    procedure Set_SalesRepID(const Param1: WideString);
    function Get_SalesTaxCode: WideString;
    procedure Set_SalesTaxCode(const Param1: WideString);
    function Get_ShipDate: OleVariant;
    procedure Set_ShipDate(Param1: OleVariant);
    function Get_ShipToAddr1: WideString;
    procedure Set_ShipToAddr1(const Param1: WideString);
    function Get_ShipToAddr2: WideString;
    procedure Set_ShipToAddr2(const Param1: WideString);
    function Get_ShipToCity: WideString;
    procedure Set_ShipToCity(const Param1: WideString);
    function Get_ShipToCountry: WideString;
    procedure Set_ShipToCountry(const Param1: WideString);
    function Get_ShipToName: WideString;
    procedure Set_ShipToName(const Param1: WideString);
    function Get_ShipToState: WideString;
    procedure Set_ShipToState(const Param1: WideString);
    function Get_ShipToZipCode: WideString;
    procedure Set_ShipToZipCode(const Param1: WideString);
    function Get_ShipVia: WideString;
    procedure Set_ShipVia(const Param1: WideString);
    function Get_SONo: WideString;
    procedure Set_SONo(const Param1: WideString);
    function Get_StatementNote: WideString;
    procedure Set_StatementNote(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_Terms: WideString;
    procedure Set_Terms(const Param1: WideString);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_TrxVoidedBy: Integer;
    procedure Set_TrxVoidedBy(Param1: Integer);
    function Get_Unused1: Byte;
    procedure Set_Unused1(Param1: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3(Index: Smallint): Byte;
    procedure Set_Unused3(Index: Smallint; Param2: Byte);
    function Get_Unused4: Byte;
    procedure Set_Unused4(Param1: Byte);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SalesJournal);
    procedure Disconnect; override;
    function ClearRecord: Smallint;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetEqual(NRecord: Integer): Smallint;
    function GetForInvoice(const Invoice: WideString): Smallint;
    function IncrementBatchCount: Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function ReadFirst(Period: Smallint): Smallint;
    function ReadFirstForCustomer(Index: Integer): Smallint;
    function ReadNext: Smallint;
    function ReadNextByCustomer: Smallint;
    function Update: Smallint;
    property DefaultInterface: _SalesJournal read GetDefaultInterface;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DateDue: OleVariant read Get_DateDue write Set_DateDue;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailApplyToSO[Index: Smallint]: WordBool read Get_DetailApplyToSO write Set_DetailApplyToSO;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCostOfSalesAccount[Index: Smallint]: WideString read Get_DetailCostOfSalesAccount write Set_DetailCostOfSalesAccount;
    property DetailCostOfSalesAmount[Index: Smallint]: Double read Get_DetailCostOfSalesAmount write Set_DetailCostOfSalesAmount;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool read Get_DetailCostOfSalesTrx write Set_DetailCostOfSalesTrx;
    property DetailCustomerIndex[Index: Smallint]: Integer read Get_DetailCustomerIndex write Set_DetailCustomerIndex;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailDisplayedLine[Index: Smallint]: Smallint read Get_DetailDisplayedLine write Set_DetailDisplayedLine;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailFreightFlag[Index: Smallint]: WordBool read Get_DetailFreightFlag write Set_DetailFreightFlag;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailInventoryAccount[Index: Smallint]: WideString read Get_DetailInventoryAccount write Set_DetailInventoryAccount;
    property DetailInvoiceNRecord[Index: Smallint]: Integer read Get_DetailInvoiceNRecord write Set_DetailInvoiceNRecord;
    property DetailInvoicePaid[Index: Smallint]: WideString read Get_DetailInvoicePaid write Set_DetailInvoicePaid;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailSalesTaxAuthority[Index: Smallint]: WideString read Get_DetailSalesTaxAuthority write Set_DetailSalesTaxAuthority;
    property DetailSOLine[Index: Smallint]: Smallint read Get_DetailSOLine write Set_DetailSOLine;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTaxType[Index: Smallint]: Smallint read Get_DetailTaxType write Set_DetailTaxType;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUMGUID[Index: Smallint]: WideString read Get_DetailUMGUID write Set_DetailUMGUID;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnused1[Index: Smallint]: Byte read Get_DetailUnused1 write Set_DetailUnused1;
    property DiscountDate: OleVariant read Get_DiscountDate write Set_DiscountDate;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property NextQuoteNumber: WideString read Get_NextQuoteNumber;
    property NextSONumber: WideString write Set_NextSONumber;
    property PaymentDate: OleVariant read Get_PaymentDate write Set_PaymentDate;
    property QuoteGoodThruDate: OleVariant read Get_QuoteGoodThruDate write Set_QuoteGoodThruDate;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property ShipDate: OleVariant read Get_ShipDate write Set_ShipDate;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused3[Index: Smallint]: Byte read Get_Unused3 write Set_Unused3;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property AmountReceived: Double read Get_AmountReceived write Set_AmountReceived;
    property ARAccount: WideString read Get_ARAccount write Set_ARAccount;
    property ARAmount: Double read Get_ARAmount write Set_ARAmount;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CloseSalesOrder: WordBool read Get_CloseSalesOrder write Set_CloseSalesOrder;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property CustomerPO: WideString read Get_CustomerPO write Set_CustomerPO;
    property DiscountAmount: Double read Get_DiscountAmount write Set_DiscountAmount;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property DropShipInvNo: WideString read Get_DropShipInvNo write Set_DropShipInvNo;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasPartner: WordBool read Get_HasPartner write Set_HasPartner;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property InvoiceNumber: WideString read Get_InvoiceNumber write Set_InvoiceNumber;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property JrnlTypeEx: Integer read Get_JrnlTypeEx write Set_JrnlTypeEx;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NextInvoiceNumber: WideString read Get_NextInvoiceNumber write Set_NextInvoiceNumber;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumOrderLines: Smallint read Get_NumOrderLines write Set_NumOrderLines;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property PrintBeforeInvoiceReference: WordBool read Get_PrintBeforeInvoiceReference write Set_PrintBeforeInvoiceReference;
    property Quote: WordBool read Get_Quote write Set_Quote;
    property QuoteNumber: WideString read Get_QuoteNumber write Set_QuoteNumber;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property ReturnAuthorization: WideString read Get_ReturnAuthorization write Set_ReturnAuthorization;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property ShipToAddr1: WideString read Get_ShipToAddr1 write Set_ShipToAddr1;
    property ShipToAddr2: WideString read Get_ShipToAddr2 write Set_ShipToAddr2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property SONo: WideString read Get_SONo write Set_SONo;
    property StatementNote: WideString read Get_StatementNote write Set_StatementNote;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property TrxVoidedBy: Integer read Get_TrxVoidedBy write Set_TrxVoidedBy;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSalesJournalProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSalesJournal
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSalesJournalProperties = class(TPersistent)
  private
    FServer:    TSalesJournal;
    function    GetDefaultInterface: _SalesJournal;
    constructor Create(AServer: TSalesJournal);
  protected
    function Get_AmountReceived: Double;
    procedure Set_AmountReceived(Param1: Double);
    function Get_ARAccount: WideString;
    procedure Set_ARAccount(const Param1: WideString);
    function Get_ARAmount: Double;
    procedure Set_ARAmount(Param1: Double);
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_CloseSalesOrder: WordBool;
    procedure Set_CloseSalesOrder(Param1: WordBool);
    function Get_CustomerIndex: Integer;
    procedure Set_CustomerIndex(Param1: Integer);
    function Get_CustomerName: WideString;
    procedure Set_CustomerName(const Param1: WideString);
    function Get_CustomerPO: WideString;
    procedure Set_CustomerPO(const Param1: WideString);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DateDue: OleVariant;
    procedure Set_DateDue(Param1: OleVariant);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailApplyToSO(Index: Smallint): WordBool;
    procedure Set_DetailApplyToSO(Index: Smallint; Param2: WordBool);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
    procedure Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailCostOfSalesAmount(Index: Smallint): Double;
    procedure Set_DetailCostOfSalesAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
    function Get_DetailCustomerIndex(Index: Smallint): Integer;
    procedure Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailDisplayedLine(Index: Smallint): Smallint;
    procedure Set_DetailDisplayedLine(Index: Smallint; Param2: Smallint);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailFreightFlag(Index: Smallint): WordBool;
    procedure Set_DetailFreightFlag(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailInventoryAccount(Index: Smallint): WideString;
    procedure Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailInvoiceNRecord(Index: Smallint): Integer;
    procedure Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
    function Get_DetailInvoicePaid(Index: Smallint): WideString;
    procedure Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailSalesTaxAuthority(Index: Smallint): WideString;
    procedure Set_DetailSalesTaxAuthority(Index: Smallint; const Param2: WideString);
    function Get_DetailSOLine(Index: Smallint): Smallint;
    procedure Set_DetailSOLine(Index: Smallint; Param2: Smallint);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTaxType(Index: Smallint): Smallint;
    procedure Set_DetailTaxType(Index: Smallint; Param2: Smallint);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUMGUID(Index: Smallint): WideString;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnused1(Index: Smallint): Byte;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Byte);
    function Get_DiscountAmount: Double;
    procedure Set_DiscountAmount(Param1: Double);
    function Get_DiscountDate: OleVariant;
    procedure Set_DiscountDate(Param1: OleVariant);
    function Get_DropShip: WordBool;
    procedure Set_DropShip(Param1: WordBool);
    function Get_DropShipCustomerIndex: Integer;
    procedure Set_DropShipCustomerIndex(Param1: Integer);
    function Get_DropShipInvNo: WideString;
    procedure Set_DropShipInvNo(const Param1: WideString);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HasPartner: WordBool;
    procedure Set_HasPartner(Param1: WordBool);
    function Get_InternalNote: WideString;
    procedure Set_InternalNote(const Param1: WideString);
    function Get_InvoiceNumber: WideString;
    procedure Set_InvoiceNumber(const Param1: WideString);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_JrnlTypeEx: Integer;
    procedure Set_JrnlTypeEx(Param1: Integer);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NextInvoiceNumber: WideString;
    procedure Set_NextInvoiceNumber(const Param1: WideString);
    function Get_NextQuoteNumber: WideString;
    procedure Set_NextSONumber(const Param1: WideString);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_NotePrintsAfterItems: WordBool;
    procedure Set_NotePrintsAfterItems(Param1: WordBool);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_NumOrderLines: Smallint;
    procedure Set_NumOrderLines(Param1: Smallint);
    function Get_PaymentDate: OleVariant;
    procedure Set_PaymentDate(Param1: OleVariant);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_Prepayment: WordBool;
    procedure Set_Prepayment(Param1: WordBool);
    function Get_PrintBeforeInvoiceReference: WordBool;
    procedure Set_PrintBeforeInvoiceReference(Param1: WordBool);
    function Get_Quote: WordBool;
    procedure Set_Quote(Param1: WordBool);
    function Get_QuoteGoodThruDate: OleVariant;
    procedure Set_QuoteGoodThruDate(Param1: OleVariant);
    function Get_QuoteNumber: WideString;
    procedure Set_QuoteNumber(const Param1: WideString);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_RecurrenceIndex: Integer;
    procedure Set_RecurrenceIndex(Param1: Integer);
    function Get_RecurrenceRate: Smallint;
    procedure Set_RecurrenceRate(Param1: Smallint);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_ReturnAuthorization: WideString;
    procedure Set_ReturnAuthorization(const Param1: WideString);
    function Get_SalesRepID: WideString;
    procedure Set_SalesRepID(const Param1: WideString);
    function Get_SalesTaxCode: WideString;
    procedure Set_SalesTaxCode(const Param1: WideString);
    function Get_ShipDate: OleVariant;
    procedure Set_ShipDate(Param1: OleVariant);
    function Get_ShipToAddr1: WideString;
    procedure Set_ShipToAddr1(const Param1: WideString);
    function Get_ShipToAddr2: WideString;
    procedure Set_ShipToAddr2(const Param1: WideString);
    function Get_ShipToCity: WideString;
    procedure Set_ShipToCity(const Param1: WideString);
    function Get_ShipToCountry: WideString;
    procedure Set_ShipToCountry(const Param1: WideString);
    function Get_ShipToName: WideString;
    procedure Set_ShipToName(const Param1: WideString);
    function Get_ShipToState: WideString;
    procedure Set_ShipToState(const Param1: WideString);
    function Get_ShipToZipCode: WideString;
    procedure Set_ShipToZipCode(const Param1: WideString);
    function Get_ShipVia: WideString;
    procedure Set_ShipVia(const Param1: WideString);
    function Get_SONo: WideString;
    procedure Set_SONo(const Param1: WideString);
    function Get_StatementNote: WideString;
    procedure Set_StatementNote(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_Terms: WideString;
    procedure Set_Terms(const Param1: WideString);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_TrxVoidedBy: Integer;
    procedure Set_TrxVoidedBy(Param1: Integer);
    function Get_Unused1: Byte;
    procedure Set_Unused1(Param1: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3(Index: Smallint): Byte;
    procedure Set_Unused3(Index: Smallint; Param2: Byte);
    function Get_Unused4: Byte;
    procedure Set_Unused4(Param1: Byte);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
  public
    property DefaultInterface: _SalesJournal read GetDefaultInterface;
  published
    property AmountReceived: Double read Get_AmountReceived write Set_AmountReceived;
    property ARAccount: WideString read Get_ARAccount write Set_ARAccount;
    property ARAmount: Double read Get_ARAmount write Set_ARAmount;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CloseSalesOrder: WordBool read Get_CloseSalesOrder write Set_CloseSalesOrder;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property CustomerPO: WideString read Get_CustomerPO write Set_CustomerPO;
    property DiscountAmount: Double read Get_DiscountAmount write Set_DiscountAmount;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property DropShipInvNo: WideString read Get_DropShipInvNo write Set_DropShipInvNo;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasPartner: WordBool read Get_HasPartner write Set_HasPartner;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property InvoiceNumber: WideString read Get_InvoiceNumber write Set_InvoiceNumber;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property JrnlTypeEx: Integer read Get_JrnlTypeEx write Set_JrnlTypeEx;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NextInvoiceNumber: WideString read Get_NextInvoiceNumber write Set_NextInvoiceNumber;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumOrderLines: Smallint read Get_NumOrderLines write Set_NumOrderLines;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property PrintBeforeInvoiceReference: WordBool read Get_PrintBeforeInvoiceReference write Set_PrintBeforeInvoiceReference;
    property Quote: WordBool read Get_Quote write Set_Quote;
    property QuoteNumber: WideString read Get_QuoteNumber write Set_QuoteNumber;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property ReturnAuthorization: WideString read Get_ReturnAuthorization write Set_ReturnAuthorization;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property ShipToAddr1: WideString read Get_ShipToAddr1 write Set_ShipToAddr1;
    property ShipToAddr2: WideString read Get_ShipToAddr2 write Set_ShipToAddr2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property SONo: WideString read Get_SONo write Set_SONo;
    property StatementNote: WideString read Get_StatementNote write Set_StatementNote;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property TrxVoidedBy: Integer read Get_TrxVoidedBy write Set_TrxVoidedBy;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoJournal provides a Create and CreateRemote method to          
// create instances of the default interface _Journal exposed by              
// the CoClass Journal. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJournal = class
    class function Create: _Journal;
    class function CreateRemote(const MachineName: string): _Journal;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TJournal
// Help String      : 
// Default Interface: _Journal
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TJournalProperties= class;
{$ENDIF}
  TJournal = class(TOleServer)
  private
    FIntf:        _Journal;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TJournalProperties;
    function      GetServerProperties: TJournalProperties;
{$ENDIF}
    function      GetDefaultInterface: _Journal;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Journal);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete(NRecord: Integer): Smallint;
    function CustomerInJournals(CustomerIndex: Integer): WordBool;
    property DefaultInterface: _Journal read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TJournalProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TJournal
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TJournalProperties = class(TPersistent)
  private
    FServer:    TJournal;
    function    GetDefaultInterface: _Journal;
    constructor Create(AServer: TJournal);
  protected
  public
    property DefaultInterface: _Journal read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAlert provides a Create and CreateRemote method to          
// create instances of the default interface _Alert exposed by              
// the CoClass Alert. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAlert = class
    class function Create: _Alert;
    class function CreateRemote(const MachineName: string): _Alert;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAlert
// Help String      : 
// Default Interface: _Alert
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAlertProperties= class;
{$ENDIF}
  TAlert = class(TOleServer)
  private
    FIntf:        _Alert;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAlertProperties;
    function      GetServerProperties: TAlertProperties;
{$ENDIF}
    function      GetDefaultInterface: _Alert;
  protected
    procedure InitServerData; override;
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_ApplyTo: Smallint;
    procedure Set_ApplyTo(Param1: Smallint);
    function Get_ApplyToDescription(Index: Smallint): WideString;
    function Get_Condition: Smallint;
    procedure Set_Condition(Param1: Smallint);
    function Get_ConditionDescription(Index: Smallint): WideString;
    function Get_Email: WordBool;
    procedure Set_Email(Param1: WordBool);
    function Get_EmailBCC: WideString;
    procedure Set_EmailBCC(const Param1: WideString);
    function Get_EmailCC: WideString;
    procedure Set_EmailCC(const Param1: WideString);
    function Get_EmailNote: WordBool;
    procedure Set_EmailNote(Param1: WordBool);
    function Get_EmailTo: WideString;
    procedure Set_EmailTo(const Param1: WideString);
    function Get_FromID: WideString;
    procedure Set_FromID(const Param1: WideString);
    function Get_Index: Smallint;
    procedure Set_Index(Param1: Smallint);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_StandardMessage: WordBool;
    procedure Set_StandardMessage(Param1: WordBool);
    function Get_Subject: WideString;
    procedure Set_Subject(const Param1: WideString);
    function Get_ToID: WideString;
    procedure Set_ToID(const Param1: WideString);
    function Get_TypeIndex: Smallint;
    procedure Set_TypeIndex(Param1: Smallint);
    function Get_TypeDescription(Index: Smallint): WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Alert);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetEqual(Index: Smallint): Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _Alert read GetDefaultInterface;
    property ApplyToDescription[Index: Smallint]: WideString read Get_ApplyToDescription;
    property ConditionDescription[Index: Smallint]: WideString read Get_ConditionDescription;
    property TypeDescription[Index: Smallint]: WideString read Get_TypeDescription;
    property Amount: Double read Get_Amount write Set_Amount;
    property ApplyTo: Smallint read Get_ApplyTo write Set_ApplyTo;
    property Condition: Smallint read Get_Condition write Set_Condition;
    property Email: WordBool read Get_Email write Set_Email;
    property EmailBCC: WideString read Get_EmailBCC write Set_EmailBCC;
    property EmailCC: WideString read Get_EmailCC write Set_EmailCC;
    property EmailNote: WordBool read Get_EmailNote write Set_EmailNote;
    property EmailTo: WideString read Get_EmailTo write Set_EmailTo;
    property FromID: WideString read Get_FromID write Set_FromID;
    property Index: Smallint read Get_Index write Set_Index;
    property Note: WideString read Get_Note write Set_Note;
    property StandardMessage: WordBool read Get_StandardMessage write Set_StandardMessage;
    property Subject: WideString read Get_Subject write Set_Subject;
    property ToID: WideString read Get_ToID write Set_ToID;
    property TypeIndex: Smallint read Get_TypeIndex write Set_TypeIndex;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAlertProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAlert
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAlertProperties = class(TPersistent)
  private
    FServer:    TAlert;
    function    GetDefaultInterface: _Alert;
    constructor Create(AServer: TAlert);
  protected
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_ApplyTo: Smallint;
    procedure Set_ApplyTo(Param1: Smallint);
    function Get_ApplyToDescription(Index: Smallint): WideString;
    function Get_Condition: Smallint;
    procedure Set_Condition(Param1: Smallint);
    function Get_ConditionDescription(Index: Smallint): WideString;
    function Get_Email: WordBool;
    procedure Set_Email(Param1: WordBool);
    function Get_EmailBCC: WideString;
    procedure Set_EmailBCC(const Param1: WideString);
    function Get_EmailCC: WideString;
    procedure Set_EmailCC(const Param1: WideString);
    function Get_EmailNote: WordBool;
    procedure Set_EmailNote(Param1: WordBool);
    function Get_EmailTo: WideString;
    procedure Set_EmailTo(const Param1: WideString);
    function Get_FromID: WideString;
    procedure Set_FromID(const Param1: WideString);
    function Get_Index: Smallint;
    procedure Set_Index(Param1: Smallint);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_StandardMessage: WordBool;
    procedure Set_StandardMessage(Param1: WordBool);
    function Get_Subject: WideString;
    procedure Set_Subject(const Param1: WideString);
    function Get_ToID: WideString;
    procedure Set_ToID(const Param1: WideString);
    function Get_TypeIndex: Smallint;
    procedure Set_TypeIndex(Param1: Smallint);
    function Get_TypeDescription(Index: Smallint): WideString;
  public
    property DefaultInterface: _Alert read GetDefaultInterface;
  published
    property Amount: Double read Get_Amount write Set_Amount;
    property ApplyTo: Smallint read Get_ApplyTo write Set_ApplyTo;
    property Condition: Smallint read Get_Condition write Set_Condition;
    property Email: WordBool read Get_Email write Set_Email;
    property EmailBCC: WideString read Get_EmailBCC write Set_EmailBCC;
    property EmailCC: WideString read Get_EmailCC write Set_EmailCC;
    property EmailNote: WordBool read Get_EmailNote write Set_EmailNote;
    property EmailTo: WideString read Get_EmailTo write Set_EmailTo;
    property FromID: WideString read Get_FromID write Set_FromID;
    property Index: Smallint read Get_Index write Set_Index;
    property Note: WideString read Get_Note write Set_Note;
    property StandardMessage: WordBool read Get_StandardMessage write Set_StandardMessage;
    property Subject: WideString read Get_Subject write Set_Subject;
    property ToID: WideString read Get_ToID write Set_ToID;
    property TypeIndex: Smallint read Get_TypeIndex write Set_TypeIndex;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoEventlog provides a Create and CreateRemote method to          
// create instances of the default interface _Eventlog exposed by              
// the CoClass Eventlog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEventlog = class
    class function Create: _Eventlog;
    class function CreateRemote(const MachineName: string): _Eventlog;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEventlog
// Help String      : 
// Default Interface: _Eventlog
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TEventlogProperties= class;
{$ENDIF}
  TEventlog = class(TOleServer)
  private
    FIntf:        _Eventlog;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TEventlogProperties;
    function      GetServerProperties: TEventlogProperties;
{$ENDIF}
    function      GetDefaultInterface: _Eventlog;
  protected
    procedure InitServerData; override;
    function Get_BeforeAfter: WordBool;
    procedure Set_BeforeAfter(Param1: WordBool);
    function Get_Completed: WordBool;
    procedure Set_Completed(Param1: WordBool);
    function Get_CompletionDate: OleVariant;
    procedure Set_CompletionDate(Param1: OleVariant);
    function Get_Days: Smallint;
    procedure Set_Days(Param1: Smallint);
    function Get_Display: WordBool;
    procedure Set_Display(Param1: WordBool);
    function Get_EventCategory: Smallint;
    procedure Set_EventCategory(Param1: Smallint);
    function Get_EventDate: OleVariant;
    procedure Set_EventDate(Param1: OleVariant);
    function Get_EventSource: WideString;
    procedure Set_EventSource(const Param1: WideString);
    function Get_EventType: Smallint;
    procedure Set_EventType(Param1: Smallint);
    function Get_ID: WideString;
    procedure Set_ID(const Param1: WideString);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_LineNumber: Smallint;
    procedure Set_LineNumber(Param1: Smallint);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unused2: Byte;
    procedure Set_Unused2(Param1: Byte);
    function Get_Unused3: Byte;
    procedure Set_Unused3(Param1: Byte);
    function Get_Unused4: Smallint;
    procedure Set_Unused4(Param1: Smallint);
    function Get_Unknown5: Integer;
    procedure Set_Unknown5(Param1: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Eventlog);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _Eventlog read GetDefaultInterface;
    property CompletionDate: OleVariant read Get_CompletionDate write Set_CompletionDate;
    property EventDate: OleVariant read Get_EventDate write Set_EventDate;
    property BeforeAfter: WordBool read Get_BeforeAfter write Set_BeforeAfter;
    property Completed: WordBool read Get_Completed write Set_Completed;
    property Days: Smallint read Get_Days write Set_Days;
    property Display: WordBool read Get_Display write Set_Display;
    property EventCategory: Smallint read Get_EventCategory write Set_EventCategory;
    property EventSource: WideString read Get_EventSource write Set_EventSource;
    property EventType: Smallint read Get_EventType write Set_EventType;
    property ID: WideString read Get_ID write Set_ID;
    property Index: Integer read Get_Index write Set_Index;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property LineNumber: Smallint read Get_LineNumber write Set_LineNumber;
    property Note: WideString read Get_Note write Set_Note;
    property Period: Smallint read Get_Period write Set_Period;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused2: Byte read Get_Unused2 write Set_Unused2;
    property Unused3: Byte read Get_Unused3 write Set_Unused3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unknown5: Integer read Get_Unknown5 write Set_Unknown5;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TEventlogProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TEventlog
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TEventlogProperties = class(TPersistent)
  private
    FServer:    TEventlog;
    function    GetDefaultInterface: _Eventlog;
    constructor Create(AServer: TEventlog);
  protected
    function Get_BeforeAfter: WordBool;
    procedure Set_BeforeAfter(Param1: WordBool);
    function Get_Completed: WordBool;
    procedure Set_Completed(Param1: WordBool);
    function Get_CompletionDate: OleVariant;
    procedure Set_CompletionDate(Param1: OleVariant);
    function Get_Days: Smallint;
    procedure Set_Days(Param1: Smallint);
    function Get_Display: WordBool;
    procedure Set_Display(Param1: WordBool);
    function Get_EventCategory: Smallint;
    procedure Set_EventCategory(Param1: Smallint);
    function Get_EventDate: OleVariant;
    procedure Set_EventDate(Param1: OleVariant);
    function Get_EventSource: WideString;
    procedure Set_EventSource(const Param1: WideString);
    function Get_EventType: Smallint;
    procedure Set_EventType(Param1: Smallint);
    function Get_ID: WideString;
    procedure Set_ID(const Param1: WideString);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_LineNumber: Smallint;
    procedure Set_LineNumber(Param1: Smallint);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unused2: Byte;
    procedure Set_Unused2(Param1: Byte);
    function Get_Unused3: Byte;
    procedure Set_Unused3(Param1: Byte);
    function Get_Unused4: Smallint;
    procedure Set_Unused4(Param1: Smallint);
    function Get_Unknown5: Integer;
    procedure Set_Unknown5(Param1: Integer);
  public
    property DefaultInterface: _Eventlog read GetDefaultInterface;
  published
    property BeforeAfter: WordBool read Get_BeforeAfter write Set_BeforeAfter;
    property Completed: WordBool read Get_Completed write Set_Completed;
    property Days: Smallint read Get_Days write Set_Days;
    property Display: WordBool read Get_Display write Set_Display;
    property EventCategory: Smallint read Get_EventCategory write Set_EventCategory;
    property EventSource: WideString read Get_EventSource write Set_EventSource;
    property EventType: Smallint read Get_EventType write Set_EventType;
    property ID: WideString read Get_ID write Set_ID;
    property Index: Integer read Get_Index write Set_Index;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property LineNumber: Smallint read Get_LineNumber write Set_LineNumber;
    property Note: WideString read Get_Note write Set_Note;
    property Period: Smallint read Get_Period write Set_Period;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused2: Byte read Get_Unused2 write Set_Unused2;
    property Unused3: Byte read Get_Unused3 write Set_Unused3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unknown5: Integer read Get_Unknown5 write Set_Unknown5;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAuditTrail provides a Create and CreateRemote method to          
// create instances of the default interface _AuditTrail exposed by              
// the CoClass AuditTrail. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAuditTrail = class
    class function Create: _AuditTrail;
    class function CreateRemote(const MachineName: string): _AuditTrail;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAuditTrail
// Help String      : 
// Default Interface: _AuditTrail
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAuditTrailProperties= class;
{$ENDIF}
  TAuditTrail = class(TOleServer)
  private
    FIntf:        _AuditTrail;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAuditTrailProperties;
    function      GetServerProperties: TAuditTrailProperties;
{$ENDIF}
    function      GetDefaultInterface: _AuditTrail;
  protected
    procedure InitServerData; override;
    function Get_ActionCode: Smallint;
    procedure Set_ActionCode(Param1: Smallint);
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_EntryDate: TDateTime;
    procedure Set_EntryDate(Param1: TDateTime);
    function Get_EntryTime: TDateTime;
    procedure Set_EntryTime(Param1: TDateTime);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TransactionID: WideString;
    procedure Set_TransactionID(const Param1: WideString);
    function Get_TransactionReference: WideString;
    procedure Set_TransactionReference(const Param1: WideString);
    function Get_TransactionType: Smallint;
    procedure Set_TransactionType(Param1: Smallint);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_Unknown1: Smallint;
    procedure Set_Unknown1(Param1: Smallint);
    function Get_UserID: WideString;
    procedure Set_UserID(const Param1: WideString);
    function Get_WindowName: WideString;
    procedure Set_WindowName(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _AuditTrail);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetFirst: Smallint;
    function GetLast: Smallint;
    function GetNext: Smallint;
    function GetPrevious: Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _AuditTrail read GetDefaultInterface;
    property ActionCode: Smallint read Get_ActionCode write Set_ActionCode;
    property Amount: Double read Get_Amount write Set_Amount;
    property EntryDate: TDateTime read Get_EntryDate write Set_EntryDate;
    property EntryTime: TDateTime read Get_EntryTime write Set_EntryTime;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TransactionID: WideString read Get_TransactionID write Set_TransactionID;
    property TransactionReference: WideString read Get_TransactionReference write Set_TransactionReference;
    property TransactionType: Smallint read Get_TransactionType write Set_TransactionType;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property UserID: WideString read Get_UserID write Set_UserID;
    property WindowName: WideString read Get_WindowName write Set_WindowName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAuditTrailProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAuditTrail
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAuditTrailProperties = class(TPersistent)
  private
    FServer:    TAuditTrail;
    function    GetDefaultInterface: _AuditTrail;
    constructor Create(AServer: TAuditTrail);
  protected
    function Get_ActionCode: Smallint;
    procedure Set_ActionCode(Param1: Smallint);
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_EntryDate: TDateTime;
    procedure Set_EntryDate(Param1: TDateTime);
    function Get_EntryTime: TDateTime;
    procedure Set_EntryTime(Param1: TDateTime);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TransactionID: WideString;
    procedure Set_TransactionID(const Param1: WideString);
    function Get_TransactionReference: WideString;
    procedure Set_TransactionReference(const Param1: WideString);
    function Get_TransactionType: Smallint;
    procedure Set_TransactionType(Param1: Smallint);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_Unknown1: Smallint;
    procedure Set_Unknown1(Param1: Smallint);
    function Get_UserID: WideString;
    procedure Set_UserID(const Param1: WideString);
    function Get_WindowName: WideString;
    procedure Set_WindowName(const Param1: WideString);
  public
    property DefaultInterface: _AuditTrail read GetDefaultInterface;
  published
    property ActionCode: Smallint read Get_ActionCode write Set_ActionCode;
    property Amount: Double read Get_Amount write Set_Amount;
    property EntryDate: TDateTime read Get_EntryDate write Set_EntryDate;
    property EntryTime: TDateTime read Get_EntryTime write Set_EntryTime;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TransactionID: WideString read Get_TransactionID write Set_TransactionID;
    property TransactionReference: WideString read Get_TransactionReference write Set_TransactionReference;
    property TransactionType: Smallint read Get_TransactionType write Set_TransactionType;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property UserID: WideString read Get_UserID write Set_UserID;
    property WindowName: WideString read Get_WindowName write Set_WindowName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCost provides a Create and CreateRemote method to          
// create instances of the default interface _Cost exposed by              
// the CoClass Cost. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCost = class
    class function Create: _Cost;
    class function CreateRemote(const MachineName: string): _Cost;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCost
// Help String      : 
// Default Interface: _Cost
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCostProperties= class;
{$ENDIF}
  TCost = class(TOleServer)
  private
    FIntf:        _Cost;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCostProperties;
    function      GetServerProperties: TCostProperties;
{$ENDIF}
    function      GetDefaultInterface: _Cost;
  protected
    procedure InitServerData; override;
    function Get_CostID: WideString;
    procedure Set_CostID(const Param1: WideString);
    function Get_CostType: WideString;
    procedure Set_CostType(const Param1: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_Unknown1(Index: Smallint): Byte;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte);
    function Get_Unknown2: WordBool;
    procedure Set_Unknown2(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Cost);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(const ID: WideString): Smallint;
    function GetForIndex(Index: Integer): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _Cost read GetDefaultInterface;
    property Unknown1[Index: Smallint]: Byte read Get_Unknown1 write Set_Unknown1;
    property CostID: WideString read Get_CostID write Set_CostID;
    property CostType: WideString read Get_CostType write Set_CostType;
    property Description: WideString read Get_Description write Set_Description;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property Unknown2: WordBool read Get_Unknown2 write Set_Unknown2;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCostProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCost
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCostProperties = class(TPersistent)
  private
    FServer:    TCost;
    function    GetDefaultInterface: _Cost;
    constructor Create(AServer: TCost);
  protected
    function Get_CostID: WideString;
    procedure Set_CostID(const Param1: WideString);
    function Get_CostType: WideString;
    procedure Set_CostType(const Param1: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_Unknown1(Index: Smallint): Byte;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte);
    function Get_Unknown2: WordBool;
    procedure Set_Unknown2(Param1: WordBool);
  public
    property DefaultInterface: _Cost read GetDefaultInterface;
  published
    property CostID: WideString read Get_CostID write Set_CostID;
    property CostType: WideString read Get_CostType write Set_CostType;
    property Description: WideString read Get_Description write Set_Description;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property Unknown2: WordBool read Get_Unknown2 write Set_Unknown2;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAssemblyAdjustmentJournal provides a Create and CreateRemote method to          
// create instances of the default interface _AssemblyAdjustmentJournal exposed by              
// the CoClass AssemblyAdjustmentJournal. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAssemblyAdjustmentJournal = class
    class function Create: _AssemblyAdjustmentJournal;
    class function CreateRemote(const MachineName: string): _AssemblyAdjustmentJournal;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAssemblyAdjustmentJournal
// Help String      : 
// Default Interface: _AssemblyAdjustmentJournal
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAssemblyAdjustmentJournalProperties= class;
{$ENDIF}
  TAssemblyAdjustmentJournal = class(TOleServer)
  private
    FIntf:        _AssemblyAdjustmentJournal;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAssemblyAdjustmentJournalProperties;
    function      GetServerProperties: TAssemblyAdjustmentJournalProperties;
{$ENDIF}
    function      GetDefaultInterface: _AssemblyAdjustmentJournal;
  protected
    procedure InitServerData; override;
    function Get_AmountAdjusted: Double;
    procedure Set_AmountAdjusted(Param1: Double);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailComponentItemIndex(Index: Smallint): Integer;
    procedure Set_DetailComponentItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_InventoryAccount: WideString;
    procedure Set_InventoryAccount(const Param1: WideString);
    function Get_ItemIndex: Integer;
    procedure Set_ItemIndex(Param1: Integer);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_QuantityBuilt: Double;
    procedure Set_QuantityBuilt(Param1: Double);
    function Get_ReasonForBuild: WideString;
    procedure Set_ReasonForBuild(const Param1: WideString);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_SuperRecordNumber: Byte;
    procedure Set_SuperRecordNumber(Param1: Byte);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unknown3: Smallint;
    procedure Set_Unknown3(Param1: Smallint);
    function Get_Unused4: Smallint;
    procedure Set_Unused4(Param1: Smallint);
    function Get_Unknown5: Smallint;
    procedure Set_Unknown5(Param1: Smallint);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _AssemblyAdjustmentJournal);
    procedure Disconnect; override;
    function ClearRecord: Smallint;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetEqual(NRecord: Integer): Smallint;
    function IncrementBatchCount: Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function ReadFirst(Period: Smallint): Smallint;
    function ReadNext: Smallint;
    function Update: Smallint;
    property DefaultInterface: _AssemblyAdjustmentJournal read GetDefaultInterface;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailComponentItemIndex[Index: Smallint]: Integer read Get_DetailComponentItemIndex write Set_DetailComponentItemIndex;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool read Get_DetailCostOfSalesTrx write Set_DetailCostOfSalesTrx;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property AmountAdjusted: Double read Get_AmountAdjusted write Set_AmountAdjusted;
    property Description: WideString read Get_Description write Set_Description;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InventoryAccount: WideString read Get_InventoryAccount write Set_InventoryAccount;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property QuantityBuilt: Double read Get_QuantityBuilt write Set_QuantityBuilt;
    property ReasonForBuild: WideString read Get_ReasonForBuild write Set_ReasonForBuild;
    property Reference: WideString read Get_Reference write Set_Reference;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property SuperRecordNumber: Byte read Get_SuperRecordNumber write Set_SuperRecordNumber;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unknown3: Smallint read Get_Unknown3 write Set_Unknown3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unknown5: Smallint read Get_Unknown5 write Set_Unknown5;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAssemblyAdjustmentJournalProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAssemblyAdjustmentJournal
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAssemblyAdjustmentJournalProperties = class(TPersistent)
  private
    FServer:    TAssemblyAdjustmentJournal;
    function    GetDefaultInterface: _AssemblyAdjustmentJournal;
    constructor Create(AServer: TAssemblyAdjustmentJournal);
  protected
    function Get_AmountAdjusted: Double;
    procedure Set_AmountAdjusted(Param1: Double);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailComponentItemIndex(Index: Smallint): Integer;
    procedure Set_DetailComponentItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_InventoryAccount: WideString;
    procedure Set_InventoryAccount(const Param1: WideString);
    function Get_ItemIndex: Integer;
    procedure Set_ItemIndex(Param1: Integer);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_QuantityBuilt: Double;
    procedure Set_QuantityBuilt(Param1: Double);
    function Get_ReasonForBuild: WideString;
    procedure Set_ReasonForBuild(const Param1: WideString);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_SuperRecordNumber: Byte;
    procedure Set_SuperRecordNumber(Param1: Byte);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unknown3: Smallint;
    procedure Set_Unknown3(Param1: Smallint);
    function Get_Unused4: Smallint;
    procedure Set_Unused4(Param1: Smallint);
    function Get_Unknown5: Smallint;
    procedure Set_Unknown5(Param1: Smallint);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
  public
    property DefaultInterface: _AssemblyAdjustmentJournal read GetDefaultInterface;
  published
    property AmountAdjusted: Double read Get_AmountAdjusted write Set_AmountAdjusted;
    property Description: WideString read Get_Description write Set_Description;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InventoryAccount: WideString read Get_InventoryAccount write Set_InventoryAccount;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property QuantityBuilt: Double read Get_QuantityBuilt write Set_QuantityBuilt;
    property ReasonForBuild: WideString read Get_ReasonForBuild write Set_ReasonForBuild;
    property Reference: WideString read Get_Reference write Set_Reference;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property SuperRecordNumber: Byte read Get_SuperRecordNumber write Set_SuperRecordNumber;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unknown3: Smallint read Get_Unknown3 write Set_Unknown3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unknown5: Smallint read Get_Unknown5 write Set_Unknown5;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFAAsset provides a Create and CreateRemote method to          
// create instances of the default interface _FAAsset exposed by              
// the CoClass FAAsset. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFAAsset = class
    class function Create: _FAAsset;
    class function CreateRemote(const MachineName: string): _FAAsset;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFAAsset
// Help String      : 
// Default Interface: _FAAsset
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFAAssetProperties= class;
{$ENDIF}
  TFAAsset = class(TOleServer)
  private
    FIntf:        _FAAsset;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFAAssetProperties;
    function      GetServerProperties: TFAAssetProperties;
{$ENDIF}
    function      GetDefaultInterface: _FAAsset;
  protected
    procedure InitServerData; override;
    function Get_Acquired: TDateTime;
    procedure Set_Acquired(Param1: TDateTime);
    function Get_AssetID: Integer;
    procedure Set_AssetID(Param1: Integer);
    function Get_Class_: WideString;
    procedure Set_Class_(const Param1: WideString);
    function Get_Department: WideString;
    procedure Set_Department(const Param1: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_GLAssetAccount: WideString;
    procedure Set_GLAssetAccount(const Param1: WideString);
    function Get_GLAccumulatedDepreciationAccount: WideString;
    procedure Set_GLAccumulatedDepreciationAccount(const Param1: WideString);
    function Get_GLDepreciationExpenseAccount: WideString;
    procedure Set_GLDepreciationExpenseAccount(const Param1: WideString);
    function Get_LastAssetID: Integer;
    function Get_Listed: WordBool;
    procedure Set_Listed(Param1: WordBool);
    function Get_Location: WideString;
    procedure Set_Location(const Param1: WideString);
    function Get_NewFlag: WordBool;
    procedure Set_NewFlag(Param1: WordBool);
    function Get_SerialNumber: WideString;
    procedure Set_SerialNumber(const Param1: WideString);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Smallint;
    procedure Set_Unused3(Param1: Smallint);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _FAAsset);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(ID: Integer): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _FAAsset read GetDefaultInterface;
    property LastAssetID: Integer read Get_LastAssetID;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Acquired: TDateTime read Get_Acquired write Set_Acquired;
    property AssetID: Integer read Get_AssetID write Set_AssetID;
    property Class_: WideString read Get_Class_ write Set_Class_;
    property Department: WideString read Get_Department write Set_Department;
    property Description: WideString read Get_Description write Set_Description;
    property GLAssetAccount: WideString read Get_GLAssetAccount write Set_GLAssetAccount;
    property GLAccumulatedDepreciationAccount: WideString read Get_GLAccumulatedDepreciationAccount write Set_GLAccumulatedDepreciationAccount;
    property GLDepreciationExpenseAccount: WideString read Get_GLDepreciationExpenseAccount write Set_GLDepreciationExpenseAccount;
    property Listed: WordBool read Get_Listed write Set_Listed;
    property Location: WideString read Get_Location write Set_Location;
    property NewFlag: WordBool read Get_NewFlag write Set_NewFlag;
    property SerialNumber: WideString read Get_SerialNumber write Set_SerialNumber;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFAAssetProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFAAsset
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFAAssetProperties = class(TPersistent)
  private
    FServer:    TFAAsset;
    function    GetDefaultInterface: _FAAsset;
    constructor Create(AServer: TFAAsset);
  protected
    function Get_Acquired: TDateTime;
    procedure Set_Acquired(Param1: TDateTime);
    function Get_AssetID: Integer;
    procedure Set_AssetID(Param1: Integer);
    function Get_Class_: WideString;
    procedure Set_Class_(const Param1: WideString);
    function Get_Department: WideString;
    procedure Set_Department(const Param1: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_GLAssetAccount: WideString;
    procedure Set_GLAssetAccount(const Param1: WideString);
    function Get_GLAccumulatedDepreciationAccount: WideString;
    procedure Set_GLAccumulatedDepreciationAccount(const Param1: WideString);
    function Get_GLDepreciationExpenseAccount: WideString;
    procedure Set_GLDepreciationExpenseAccount(const Param1: WideString);
    function Get_LastAssetID: Integer;
    function Get_Listed: WordBool;
    procedure Set_Listed(Param1: WordBool);
    function Get_Location: WideString;
    procedure Set_Location(const Param1: WideString);
    function Get_NewFlag: WordBool;
    procedure Set_NewFlag(Param1: WordBool);
    function Get_SerialNumber: WideString;
    procedure Set_SerialNumber(const Param1: WideString);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Smallint;
    procedure Set_Unused3(Param1: Smallint);
  public
    property DefaultInterface: _FAAsset read GetDefaultInterface;
  published
    property Acquired: TDateTime read Get_Acquired write Set_Acquired;
    property AssetID: Integer read Get_AssetID write Set_AssetID;
    property Class_: WideString read Get_Class_ write Set_Class_;
    property Department: WideString read Get_Department write Set_Department;
    property Description: WideString read Get_Description write Set_Description;
    property GLAssetAccount: WideString read Get_GLAssetAccount write Set_GLAssetAccount;
    property GLAccumulatedDepreciationAccount: WideString read Get_GLAccumulatedDepreciationAccount write Set_GLAccumulatedDepreciationAccount;
    property GLDepreciationExpenseAccount: WideString read Get_GLDepreciationExpenseAccount write Set_GLDepreciationExpenseAccount;
    property Listed: WordBool read Get_Listed write Set_Listed;
    property Location: WideString read Get_Location write Set_Location;
    property NewFlag: WordBool read Get_NewFlag write Set_NewFlag;
    property SerialNumber: WideString read Get_SerialNumber write Set_SerialNumber;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFABook provides a Create and CreateRemote method to          
// create instances of the default interface _FABook exposed by              
// the CoClass FABook. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFABook = class
    class function Create: _FABook;
    class function CreateRemote(const MachineName: string): _FABook;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFABook
// Help String      : 
// Default Interface: _FABook
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFABookProperties= class;
{$ENDIF}
  TFABook = class(TOleServer)
  private
    FIntf:        _FABook;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFABookProperties;
    function      GetServerProperties: TFABookProperties;
{$ENDIF}
    function      GetDefaultInterface: _FABook;
  protected
    procedure InitServerData; override;
    function Get_AnnualDepreciation: Double;
    procedure Set_AnnualDepreciation(Param1: Double);
    function Get_AssetID: Integer;
    procedure Set_AssetID(Param1: Integer);
    function Get_BookCode: Smallint;
    procedure Set_BookCode(Param1: Smallint);
    function Get_Cost: Double;
    procedure Set_Cost(Param1: Double);
    function Get_DateAsOf: OleVariant;
    procedure Set_DateAsOf(Param1: OleVariant);
    function Get_DateAsOfHistory: OleVariant;
    procedure Set_DateAsOfHistory(Param1: OleVariant);
    function Get_DateInService: TDateTime;
    procedure Set_DateInService(Param1: TDateTime);
    function Get_DecliningBalancePercent: Smallint;
    procedure Set_DecliningBalancePercent(Param1: Smallint);
    function Get_FullUse: WordBool;
    procedure Set_FullUse(Param1: WordBool);
    function Get_ITCAmount: Double;
    procedure Set_ITCAmount(Param1: Double);
    function Get_ITCCode: WideString;
    procedure Set_ITCCode(const Param1: WideString);
    function Get_LastDepreciationRun: Double;
    procedure Set_LastDepreciationRun(Param1: Double);
    function Get_Life: Double;
    procedure Set_Life(Param1: Double);
    function Get_LifeToDateDepreciation: Double;
    procedure Set_LifeToDateDepreciation(Param1: Double);
    function Get_LifeToDateDepreciationHistory: Double;
    procedure Set_LifeToDateDepreciationHistory(Param1: Double);
    function Get_Method: WideString;
    procedure Set_Method(const Param1: WideString);
    function Get_MidQuarterConvention: WordBool;
    procedure Set_MidQuarterConvention(Param1: WordBool);
    function Get_ReducedBasis: Smallint;
    procedure Set_ReducedBasis(Param1: Smallint);
    function Get_Salvage: Double;
    procedure Set_Salvage(Param1: Double);
    function Get_Section179: Double;
    procedure Set_Section179(Param1: Double);
    function Get_Unused1: Double;
    procedure Set_Unused1(Param1: Double);
    function Get_Unknown2: Double;
    procedure Set_Unknown2(Param1: Double);
    function Get_YearToDateDepreciation: Double;
    procedure Set_YearToDateDepreciation(Param1: Double);
    function Get_YearToDateDepreciationHistory: Double;
    procedure Set_YearToDateDepreciationHistory(Param1: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _FABook);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(ID: Integer): Smallint;
    function GetNext: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _FABook read GetDefaultInterface;
    property DateAsOf: OleVariant read Get_DateAsOf write Set_DateAsOf;
    property DateAsOfHistory: OleVariant read Get_DateAsOfHistory write Set_DateAsOfHistory;
    property AnnualDepreciation: Double read Get_AnnualDepreciation write Set_AnnualDepreciation;
    property AssetID: Integer read Get_AssetID write Set_AssetID;
    property BookCode: Smallint read Get_BookCode write Set_BookCode;
    property Cost: Double read Get_Cost write Set_Cost;
    property DateInService: TDateTime read Get_DateInService write Set_DateInService;
    property DecliningBalancePercent: Smallint read Get_DecliningBalancePercent write Set_DecliningBalancePercent;
    property FullUse: WordBool read Get_FullUse write Set_FullUse;
    property ITCAmount: Double read Get_ITCAmount write Set_ITCAmount;
    property ITCCode: WideString read Get_ITCCode write Set_ITCCode;
    property LastDepreciationRun: Double read Get_LastDepreciationRun write Set_LastDepreciationRun;
    property Life: Double read Get_Life write Set_Life;
    property LifeToDateDepreciation: Double read Get_LifeToDateDepreciation write Set_LifeToDateDepreciation;
    property LifeToDateDepreciationHistory: Double read Get_LifeToDateDepreciationHistory write Set_LifeToDateDepreciationHistory;
    property Method: WideString read Get_Method write Set_Method;
    property MidQuarterConvention: WordBool read Get_MidQuarterConvention write Set_MidQuarterConvention;
    property ReducedBasis: Smallint read Get_ReducedBasis write Set_ReducedBasis;
    property Salvage: Double read Get_Salvage write Set_Salvage;
    property Section179: Double read Get_Section179 write Set_Section179;
    property Unused1: Double read Get_Unused1 write Set_Unused1;
    property Unknown2: Double read Get_Unknown2 write Set_Unknown2;
    property YearToDateDepreciation: Double read Get_YearToDateDepreciation write Set_YearToDateDepreciation;
    property YearToDateDepreciationHistory: Double read Get_YearToDateDepreciationHistory write Set_YearToDateDepreciationHistory;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFABookProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFABook
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFABookProperties = class(TPersistent)
  private
    FServer:    TFABook;
    function    GetDefaultInterface: _FABook;
    constructor Create(AServer: TFABook);
  protected
    function Get_AnnualDepreciation: Double;
    procedure Set_AnnualDepreciation(Param1: Double);
    function Get_AssetID: Integer;
    procedure Set_AssetID(Param1: Integer);
    function Get_BookCode: Smallint;
    procedure Set_BookCode(Param1: Smallint);
    function Get_Cost: Double;
    procedure Set_Cost(Param1: Double);
    function Get_DateAsOf: OleVariant;
    procedure Set_DateAsOf(Param1: OleVariant);
    function Get_DateAsOfHistory: OleVariant;
    procedure Set_DateAsOfHistory(Param1: OleVariant);
    function Get_DateInService: TDateTime;
    procedure Set_DateInService(Param1: TDateTime);
    function Get_DecliningBalancePercent: Smallint;
    procedure Set_DecliningBalancePercent(Param1: Smallint);
    function Get_FullUse: WordBool;
    procedure Set_FullUse(Param1: WordBool);
    function Get_ITCAmount: Double;
    procedure Set_ITCAmount(Param1: Double);
    function Get_ITCCode: WideString;
    procedure Set_ITCCode(const Param1: WideString);
    function Get_LastDepreciationRun: Double;
    procedure Set_LastDepreciationRun(Param1: Double);
    function Get_Life: Double;
    procedure Set_Life(Param1: Double);
    function Get_LifeToDateDepreciation: Double;
    procedure Set_LifeToDateDepreciation(Param1: Double);
    function Get_LifeToDateDepreciationHistory: Double;
    procedure Set_LifeToDateDepreciationHistory(Param1: Double);
    function Get_Method: WideString;
    procedure Set_Method(const Param1: WideString);
    function Get_MidQuarterConvention: WordBool;
    procedure Set_MidQuarterConvention(Param1: WordBool);
    function Get_ReducedBasis: Smallint;
    procedure Set_ReducedBasis(Param1: Smallint);
    function Get_Salvage: Double;
    procedure Set_Salvage(Param1: Double);
    function Get_Section179: Double;
    procedure Set_Section179(Param1: Double);
    function Get_Unused1: Double;
    procedure Set_Unused1(Param1: Double);
    function Get_Unknown2: Double;
    procedure Set_Unknown2(Param1: Double);
    function Get_YearToDateDepreciation: Double;
    procedure Set_YearToDateDepreciation(Param1: Double);
    function Get_YearToDateDepreciationHistory: Double;
    procedure Set_YearToDateDepreciationHistory(Param1: Double);
  public
    property DefaultInterface: _FABook read GetDefaultInterface;
  published
    property AnnualDepreciation: Double read Get_AnnualDepreciation write Set_AnnualDepreciation;
    property AssetID: Integer read Get_AssetID write Set_AssetID;
    property BookCode: Smallint read Get_BookCode write Set_BookCode;
    property Cost: Double read Get_Cost write Set_Cost;
    property DateInService: TDateTime read Get_DateInService write Set_DateInService;
    property DecliningBalancePercent: Smallint read Get_DecliningBalancePercent write Set_DecliningBalancePercent;
    property FullUse: WordBool read Get_FullUse write Set_FullUse;
    property ITCAmount: Double read Get_ITCAmount write Set_ITCAmount;
    property ITCCode: WideString read Get_ITCCode write Set_ITCCode;
    property LastDepreciationRun: Double read Get_LastDepreciationRun write Set_LastDepreciationRun;
    property Life: Double read Get_Life write Set_Life;
    property LifeToDateDepreciation: Double read Get_LifeToDateDepreciation write Set_LifeToDateDepreciation;
    property LifeToDateDepreciationHistory: Double read Get_LifeToDateDepreciationHistory write Set_LifeToDateDepreciationHistory;
    property Method: WideString read Get_Method write Set_Method;
    property MidQuarterConvention: WordBool read Get_MidQuarterConvention write Set_MidQuarterConvention;
    property ReducedBasis: Smallint read Get_ReducedBasis write Set_ReducedBasis;
    property Salvage: Double read Get_Salvage write Set_Salvage;
    property Section179: Double read Get_Section179 write Set_Section179;
    property Unused1: Double read Get_Unused1 write Set_Unused1;
    property Unknown2: Double read Get_Unknown2 write Set_Unknown2;
    property YearToDateDepreciation: Double read Get_YearToDateDepreciation write Set_YearToDateDepreciation;
    property YearToDateDepreciationHistory: Double read Get_YearToDateDepreciationHistory write Set_YearToDateDepreciationHistory;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFABusUse provides a Create and CreateRemote method to          
// create instances of the default interface _FABusUse exposed by              
// the CoClass FABusUse. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFABusUse = class
    class function Create: _FABusUse;
    class function CreateRemote(const MachineName: string): _FABusUse;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFABusUse
// Help String      : 
// Default Interface: _FABusUse
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFABusUseProperties= class;
{$ENDIF}
  TFABusUse = class(TOleServer)
  private
    FIntf:        _FABusUse;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFABusUseProperties;
    function      GetServerProperties: TFABusUseProperties;
{$ENDIF}
    function      GetDefaultInterface: _FABusUse;
  protected
    procedure InitServerData; override;
    function Get_AssetID: Integer;
    procedure Set_AssetID(Param1: Integer);
    function Get_BookCode: Smallint;
    procedure Set_BookCode(Param1: Smallint);
    function Get_Date1: OleVariant;
    procedure Set_Date1(Param1: OleVariant);
    function Get_Date2: OleVariant;
    procedure Set_Date2(Param1: OleVariant);
    function Get_Date3: OleVariant;
    procedure Set_Date3(Param1: OleVariant);
    function Get_Date4: OleVariant;
    procedure Set_Date4(Param1: OleVariant);
    function Get_Date5: OleVariant;
    procedure Set_Date5(Param1: OleVariant);
    function Get_Percent1: Smallint;
    procedure Set_Percent1(Param1: Smallint);
    function Get_Percent2: Smallint;
    procedure Set_Percent2(Param1: Smallint);
    function Get_Percent3: Smallint;
    procedure Set_Percent3(Param1: Smallint);
    function Get_Percent4: Smallint;
    procedure Set_Percent4(Param1: Smallint);
    function Get_Percent5: Smallint;
    procedure Set_Percent5(Param1: Smallint);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _FABusUse);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(ID: Integer): Smallint;
    function GetNext: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _FABusUse read GetDefaultInterface;
    property Date1: OleVariant read Get_Date1 write Set_Date1;
    property Date2: OleVariant read Get_Date2 write Set_Date2;
    property Date3: OleVariant read Get_Date3 write Set_Date3;
    property Date4: OleVariant read Get_Date4 write Set_Date4;
    property Date5: OleVariant read Get_Date5 write Set_Date5;
    property AssetID: Integer read Get_AssetID write Set_AssetID;
    property BookCode: Smallint read Get_BookCode write Set_BookCode;
    property Percent1: Smallint read Get_Percent1 write Set_Percent1;
    property Percent2: Smallint read Get_Percent2 write Set_Percent2;
    property Percent3: Smallint read Get_Percent3 write Set_Percent3;
    property Percent4: Smallint read Get_Percent4 write Set_Percent4;
    property Percent5: Smallint read Get_Percent5 write Set_Percent5;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFABusUseProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFABusUse
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFABusUseProperties = class(TPersistent)
  private
    FServer:    TFABusUse;
    function    GetDefaultInterface: _FABusUse;
    constructor Create(AServer: TFABusUse);
  protected
    function Get_AssetID: Integer;
    procedure Set_AssetID(Param1: Integer);
    function Get_BookCode: Smallint;
    procedure Set_BookCode(Param1: Smallint);
    function Get_Date1: OleVariant;
    procedure Set_Date1(Param1: OleVariant);
    function Get_Date2: OleVariant;
    procedure Set_Date2(Param1: OleVariant);
    function Get_Date3: OleVariant;
    procedure Set_Date3(Param1: OleVariant);
    function Get_Date4: OleVariant;
    procedure Set_Date4(Param1: OleVariant);
    function Get_Date5: OleVariant;
    procedure Set_Date5(Param1: OleVariant);
    function Get_Percent1: Smallint;
    procedure Set_Percent1(Param1: Smallint);
    function Get_Percent2: Smallint;
    procedure Set_Percent2(Param1: Smallint);
    function Get_Percent3: Smallint;
    procedure Set_Percent3(Param1: Smallint);
    function Get_Percent4: Smallint;
    procedure Set_Percent4(Param1: Smallint);
    function Get_Percent5: Smallint;
    procedure Set_Percent5(Param1: Smallint);
  public
    property DefaultInterface: _FABusUse read GetDefaultInterface;
  published
    property AssetID: Integer read Get_AssetID write Set_AssetID;
    property BookCode: Smallint read Get_BookCode write Set_BookCode;
    property Percent1: Smallint read Get_Percent1 write Set_Percent1;
    property Percent2: Smallint read Get_Percent2 write Set_Percent2;
    property Percent3: Smallint read Get_Percent3 write Set_Percent3;
    property Percent4: Smallint read Get_Percent4 write Set_Percent4;
    property Percent5: Smallint read Get_Percent5 write Set_Percent5;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFAClass provides a Create and CreateRemote method to          
// create instances of the default interface _FAClass exposed by              
// the CoClass FAClass. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFAClass = class
    class function Create: _FAClass;
    class function CreateRemote(const MachineName: string): _FAClass;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFAClass
// Help String      : 
// Default Interface: _FAClass
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFAClassProperties= class;
{$ENDIF}
  TFAClass = class(TOleServer)
  private
    FIntf:        _FAClass;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFAClassProperties;
    function      GetServerProperties: TFAClassProperties;
{$ENDIF}
    function      GetDefaultInterface: _FAClass;
  protected
    procedure InitServerData; override;
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_Life1: WideString;
    procedure Set_Life1(const Param1: WideString);
    function Get_Life2: WideString;
    procedure Set_Life2(const Param1: WideString);
    function Get_Method1: WideString;
    procedure Set_Method1(const Param1: WideString);
    function Get_Method2: WideString;
    procedure Set_Method2(const Param1: WideString);
    function Get_Method3: WideString;
    procedure Set_Method3(const Param1: WideString);
    function Get_Method4: WideString;
    procedure Set_Method4(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _FAClass);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(const Value: WideString): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _FAClass read GetDefaultInterface;
    property Description: WideString read Get_Description write Set_Description;
    property Life1: WideString read Get_Life1 write Set_Life1;
    property Life2: WideString read Get_Life2 write Set_Life2;
    property Method1: WideString read Get_Method1 write Set_Method1;
    property Method2: WideString read Get_Method2 write Set_Method2;
    property Method3: WideString read Get_Method3 write Set_Method3;
    property Method4: WideString read Get_Method4 write Set_Method4;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFAClassProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFAClass
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFAClassProperties = class(TPersistent)
  private
    FServer:    TFAClass;
    function    GetDefaultInterface: _FAClass;
    constructor Create(AServer: TFAClass);
  protected
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_Life1: WideString;
    procedure Set_Life1(const Param1: WideString);
    function Get_Life2: WideString;
    procedure Set_Life2(const Param1: WideString);
    function Get_Method1: WideString;
    procedure Set_Method1(const Param1: WideString);
    function Get_Method2: WideString;
    procedure Set_Method2(const Param1: WideString);
    function Get_Method3: WideString;
    procedure Set_Method3(const Param1: WideString);
    function Get_Method4: WideString;
    procedure Set_Method4(const Param1: WideString);
  public
    property DefaultInterface: _FAClass read GetDefaultInterface;
  published
    property Description: WideString read Get_Description write Set_Description;
    property Life1: WideString read Get_Life1 write Set_Life1;
    property Life2: WideString read Get_Life2 write Set_Life2;
    property Method1: WideString read Get_Method1 write Set_Method1;
    property Method2: WideString read Get_Method2 write Set_Method2;
    property Method3: WideString read Get_Method3 write Set_Method3;
    property Method4: WideString read Get_Method4 write Set_Method4;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFAComp provides a Create and CreateRemote method to          
// create instances of the default interface _FAComp exposed by              
// the CoClass FAComp. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFAComp = class
    class function Create: _FAComp;
    class function CreateRemote(const MachineName: string): _FAComp;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFAComp
// Help String      : 
// Default Interface: _FAComp
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFACompProperties= class;
{$ENDIF}
  TFAComp = class(TOleServer)
  private
    FIntf:        _FAComp;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFACompProperties;
    function      GetServerProperties: TFACompProperties;
{$ENDIF}
    function      GetDefaultInterface: _FAComp;
  protected
    procedure InitServerData; override;
    function Get_ACEBook: WordBool;
    procedure Set_ACEBook(Param1: WordBool);
    function Get_AMTBook: WordBool;
    procedure Set_AMTBook(Param1: WordBool);
    function Get_CompanyName: WideString;
    procedure Set_CompanyName(const Param1: WideString);
    function Get_ConversionDate: OleVariant;
    procedure Set_ConversionDate(Param1: OleVariant);
    function Get_Date1: OleVariant;
    procedure Set_Date1(Param1: OleVariant);
    function Get_Date2: OleVariant;
    procedure Set_Date2(Param1: OleVariant);
    function Get_Date3: OleVariant;
    procedure Set_Date3(Param1: OleVariant);
    function Get_FederalIDNumber: WideString;
    procedure Set_FederalIDNumber(const Param1: WideString);
    function Get_FederalTaxBook: WordBool;
    procedure Set_FederalTaxBook(Param1: WordBool);
    function Get_FinancialBook: WordBool;
    procedure Set_FinancialBook(Param1: WordBool);
    function Get_FormOfBusiness: WideString;
    procedure Set_FormOfBusiness(const Param1: WideString);
    function Get_MonthFiscalYearEnds: Smallint;
    procedure Set_MonthFiscalYearEnds(Param1: Smallint);
    function Get_OtherBook: WordBool;
    procedure Set_OtherBook(Param1: WordBool);
    function Get_ShortTaxYearsFrom1: OleVariant;
    procedure Set_ShortTaxYearsFrom1(Param1: OleVariant);
    function Get_ShortTaxYearsFrom2: OleVariant;
    procedure Set_ShortTaxYearsFrom2(Param1: OleVariant);
    function Get_ShortTaxYearsFrom3: OleVariant;
    procedure Set_ShortTaxYearsFrom3(Param1: OleVariant);
    function Get_ShortTaxYearsFrom4: OleVariant;
    procedure Set_ShortTaxYearsFrom4(Param1: OleVariant);
    function Get_ShortTaxYearsTo1: OleVariant;
    procedure Set_ShortTaxYearsTo1(Param1: OleVariant);
    function Get_ShortTaxYearsTo2: OleVariant;
    procedure Set_ShortTaxYearsTo2(Param1: OleVariant);
    function Get_ShortTaxYearsTo3: OleVariant;
    procedure Set_ShortTaxYearsTo3(Param1: OleVariant);
    function Get_ShortTaxYearsTo4: OleVariant;
    procedure Set_ShortTaxYearsTo4(Param1: OleVariant);
    function Get_StateTaxBook: WordBool;
    procedure Set_StateTaxBook(Param1: WordBool);
    function Get_UnknownBook: WordBool;
    procedure Set_UnknownBook(Param1: WordBool);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unknown2: Smallint;
    procedure Set_Unknown2(Param1: Smallint);
    function Get_Unused3: Integer;
    procedure Set_Unused3(Param1: Integer);
    function Get_Unused4: Integer;
    procedure Set_Unused4(Param1: Integer);
    function Get_Unused5: Integer;
    procedure Set_Unused5(Param1: Integer);
    function Get_Unused6: Integer;
    procedure Set_Unused6(Param1: Integer);
    function Get_Unused7: Integer;
    procedure Set_Unused7(Param1: Integer);
    function Get_Unused8: Integer;
    procedure Set_Unused8(Param1: Integer);
    function Get_Unused9: Integer;
    procedure Set_Unused9(Param1: Integer);
    function Get_Unused10: Integer;
    procedure Set_Unused10(Param1: Integer);
    function Get_Unused11: Integer;
    procedure Set_Unused11(Param1: Integer);
    function Get_Unused12: Integer;
    procedure Set_Unused12(Param1: Integer);
    function Get_Unknown13: OleVariant;
    procedure Set_Unknown13(Param1: OleVariant);
    function Get_Unknown14: OleVariant;
    procedure Set_Unknown14(Param1: OleVariant);
    function Get_Unused15: Smallint;
    procedure Set_Unused15(Param1: Smallint);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _FAComp);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function Update: Smallint;
    property DefaultInterface: _FAComp read GetDefaultInterface;
    property ConversionDate: OleVariant read Get_ConversionDate write Set_ConversionDate;
    property Date1: OleVariant read Get_Date1 write Set_Date1;
    property Date2: OleVariant read Get_Date2 write Set_Date2;
    property Date3: OleVariant read Get_Date3 write Set_Date3;
    property ShortTaxYearsFrom1: OleVariant read Get_ShortTaxYearsFrom1 write Set_ShortTaxYearsFrom1;
    property ShortTaxYearsFrom2: OleVariant read Get_ShortTaxYearsFrom2 write Set_ShortTaxYearsFrom2;
    property ShortTaxYearsFrom3: OleVariant read Get_ShortTaxYearsFrom3 write Set_ShortTaxYearsFrom3;
    property ShortTaxYearsFrom4: OleVariant read Get_ShortTaxYearsFrom4 write Set_ShortTaxYearsFrom4;
    property ShortTaxYearsTo1: OleVariant read Get_ShortTaxYearsTo1 write Set_ShortTaxYearsTo1;
    property ShortTaxYearsTo2: OleVariant read Get_ShortTaxYearsTo2 write Set_ShortTaxYearsTo2;
    property ShortTaxYearsTo3: OleVariant read Get_ShortTaxYearsTo3 write Set_ShortTaxYearsTo3;
    property ShortTaxYearsTo4: OleVariant read Get_ShortTaxYearsTo4 write Set_ShortTaxYearsTo4;
    property Unknown13: OleVariant read Get_Unknown13 write Set_Unknown13;
    property Unknown14: OleVariant read Get_Unknown14 write Set_Unknown14;
    property ACEBook: WordBool read Get_ACEBook write Set_ACEBook;
    property AMTBook: WordBool read Get_AMTBook write Set_AMTBook;
    property CompanyName: WideString read Get_CompanyName write Set_CompanyName;
    property FederalIDNumber: WideString read Get_FederalIDNumber write Set_FederalIDNumber;
    property FederalTaxBook: WordBool read Get_FederalTaxBook write Set_FederalTaxBook;
    property FinancialBook: WordBool read Get_FinancialBook write Set_FinancialBook;
    property FormOfBusiness: WideString read Get_FormOfBusiness write Set_FormOfBusiness;
    property MonthFiscalYearEnds: Smallint read Get_MonthFiscalYearEnds write Set_MonthFiscalYearEnds;
    property OtherBook: WordBool read Get_OtherBook write Set_OtherBook;
    property StateTaxBook: WordBool read Get_StateTaxBook write Set_StateTaxBook;
    property UnknownBook: WordBool read Get_UnknownBook write Set_UnknownBook;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unused3: Integer read Get_Unused3 write Set_Unused3;
    property Unused4: Integer read Get_Unused4 write Set_Unused4;
    property Unused5: Integer read Get_Unused5 write Set_Unused5;
    property Unused6: Integer read Get_Unused6 write Set_Unused6;
    property Unused7: Integer read Get_Unused7 write Set_Unused7;
    property Unused8: Integer read Get_Unused8 write Set_Unused8;
    property Unused9: Integer read Get_Unused9 write Set_Unused9;
    property Unused10: Integer read Get_Unused10 write Set_Unused10;
    property Unused11: Integer read Get_Unused11 write Set_Unused11;
    property Unused12: Integer read Get_Unused12 write Set_Unused12;
    property Unused15: Smallint read Get_Unused15 write Set_Unused15;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFACompProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFAComp
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFACompProperties = class(TPersistent)
  private
    FServer:    TFAComp;
    function    GetDefaultInterface: _FAComp;
    constructor Create(AServer: TFAComp);
  protected
    function Get_ACEBook: WordBool;
    procedure Set_ACEBook(Param1: WordBool);
    function Get_AMTBook: WordBool;
    procedure Set_AMTBook(Param1: WordBool);
    function Get_CompanyName: WideString;
    procedure Set_CompanyName(const Param1: WideString);
    function Get_ConversionDate: OleVariant;
    procedure Set_ConversionDate(Param1: OleVariant);
    function Get_Date1: OleVariant;
    procedure Set_Date1(Param1: OleVariant);
    function Get_Date2: OleVariant;
    procedure Set_Date2(Param1: OleVariant);
    function Get_Date3: OleVariant;
    procedure Set_Date3(Param1: OleVariant);
    function Get_FederalIDNumber: WideString;
    procedure Set_FederalIDNumber(const Param1: WideString);
    function Get_FederalTaxBook: WordBool;
    procedure Set_FederalTaxBook(Param1: WordBool);
    function Get_FinancialBook: WordBool;
    procedure Set_FinancialBook(Param1: WordBool);
    function Get_FormOfBusiness: WideString;
    procedure Set_FormOfBusiness(const Param1: WideString);
    function Get_MonthFiscalYearEnds: Smallint;
    procedure Set_MonthFiscalYearEnds(Param1: Smallint);
    function Get_OtherBook: WordBool;
    procedure Set_OtherBook(Param1: WordBool);
    function Get_ShortTaxYearsFrom1: OleVariant;
    procedure Set_ShortTaxYearsFrom1(Param1: OleVariant);
    function Get_ShortTaxYearsFrom2: OleVariant;
    procedure Set_ShortTaxYearsFrom2(Param1: OleVariant);
    function Get_ShortTaxYearsFrom3: OleVariant;
    procedure Set_ShortTaxYearsFrom3(Param1: OleVariant);
    function Get_ShortTaxYearsFrom4: OleVariant;
    procedure Set_ShortTaxYearsFrom4(Param1: OleVariant);
    function Get_ShortTaxYearsTo1: OleVariant;
    procedure Set_ShortTaxYearsTo1(Param1: OleVariant);
    function Get_ShortTaxYearsTo2: OleVariant;
    procedure Set_ShortTaxYearsTo2(Param1: OleVariant);
    function Get_ShortTaxYearsTo3: OleVariant;
    procedure Set_ShortTaxYearsTo3(Param1: OleVariant);
    function Get_ShortTaxYearsTo4: OleVariant;
    procedure Set_ShortTaxYearsTo4(Param1: OleVariant);
    function Get_StateTaxBook: WordBool;
    procedure Set_StateTaxBook(Param1: WordBool);
    function Get_UnknownBook: WordBool;
    procedure Set_UnknownBook(Param1: WordBool);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unknown2: Smallint;
    procedure Set_Unknown2(Param1: Smallint);
    function Get_Unused3: Integer;
    procedure Set_Unused3(Param1: Integer);
    function Get_Unused4: Integer;
    procedure Set_Unused4(Param1: Integer);
    function Get_Unused5: Integer;
    procedure Set_Unused5(Param1: Integer);
    function Get_Unused6: Integer;
    procedure Set_Unused6(Param1: Integer);
    function Get_Unused7: Integer;
    procedure Set_Unused7(Param1: Integer);
    function Get_Unused8: Integer;
    procedure Set_Unused8(Param1: Integer);
    function Get_Unused9: Integer;
    procedure Set_Unused9(Param1: Integer);
    function Get_Unused10: Integer;
    procedure Set_Unused10(Param1: Integer);
    function Get_Unused11: Integer;
    procedure Set_Unused11(Param1: Integer);
    function Get_Unused12: Integer;
    procedure Set_Unused12(Param1: Integer);
    function Get_Unknown13: OleVariant;
    procedure Set_Unknown13(Param1: OleVariant);
    function Get_Unknown14: OleVariant;
    procedure Set_Unknown14(Param1: OleVariant);
    function Get_Unused15: Smallint;
    procedure Set_Unused15(Param1: Smallint);
  public
    property DefaultInterface: _FAComp read GetDefaultInterface;
  published
    property ACEBook: WordBool read Get_ACEBook write Set_ACEBook;
    property AMTBook: WordBool read Get_AMTBook write Set_AMTBook;
    property CompanyName: WideString read Get_CompanyName write Set_CompanyName;
    property FederalIDNumber: WideString read Get_FederalIDNumber write Set_FederalIDNumber;
    property FederalTaxBook: WordBool read Get_FederalTaxBook write Set_FederalTaxBook;
    property FinancialBook: WordBool read Get_FinancialBook write Set_FinancialBook;
    property FormOfBusiness: WideString read Get_FormOfBusiness write Set_FormOfBusiness;
    property MonthFiscalYearEnds: Smallint read Get_MonthFiscalYearEnds write Set_MonthFiscalYearEnds;
    property OtherBook: WordBool read Get_OtherBook write Set_OtherBook;
    property StateTaxBook: WordBool read Get_StateTaxBook write Set_StateTaxBook;
    property UnknownBook: WordBool read Get_UnknownBook write Set_UnknownBook;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unused3: Integer read Get_Unused3 write Set_Unused3;
    property Unused4: Integer read Get_Unused4 write Set_Unused4;
    property Unused5: Integer read Get_Unused5 write Set_Unused5;
    property Unused6: Integer read Get_Unused6 write Set_Unused6;
    property Unused7: Integer read Get_Unused7 write Set_Unused7;
    property Unused8: Integer read Get_Unused8 write Set_Unused8;
    property Unused9: Integer read Get_Unused9 write Set_Unused9;
    property Unused10: Integer read Get_Unused10 write Set_Unused10;
    property Unused11: Integer read Get_Unused11 write Set_Unused11;
    property Unused12: Integer read Get_Unused12 write Set_Unused12;
    property Unused15: Smallint read Get_Unused15 write Set_Unused15;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFAPost provides a Create and CreateRemote method to          
// create instances of the default interface _FAPost exposed by              
// the CoClass FAPost. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFAPost = class
    class function Create: _FAPost;
    class function CreateRemote(const MachineName: string): _FAPost;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFAPost
// Help String      : 
// Default Interface: _FAPost
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFAPostProperties= class;
{$ENDIF}
  TFAPost = class(TOleServer)
  private
    FIntf:        _FAPost;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFAPostProperties;
    function      GetServerProperties: TFAPostProperties;
{$ENDIF}
    function      GetDefaultInterface: _FAPost;
  protected
    procedure InitServerData; override;
    function Get_Account: WideString;
    procedure Set_Account(const Param1: WideString);
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_Batch: WideString;
    procedure Set_Batch(const Param1: WideString);
    function Get_DatePosted: TDateTime;
    procedure Set_DatePosted(Param1: TDateTime);
    function Get_Day: Smallint;
    procedure Set_Day(Param1: Smallint);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_Month: Smallint;
    procedure Set_Month(Param1: Smallint);
    function Get_Year: Smallint;
    procedure Set_Year(Param1: Smallint);
    function Get_Unknown: Integer;
    procedure Set_Unknown(Param1: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _FAPost);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(Value: OleVariant): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _FAPost read GetDefaultInterface;
    property Account: WideString read Get_Account write Set_Account;
    property Amount: Double read Get_Amount write Set_Amount;
    property Batch: WideString read Get_Batch write Set_Batch;
    property DatePosted: TDateTime read Get_DatePosted write Set_DatePosted;
    property Day: Smallint read Get_Day write Set_Day;
    property Description: WideString read Get_Description write Set_Description;
    property Month: Smallint read Get_Month write Set_Month;
    property Year: Smallint read Get_Year write Set_Year;
    property Unknown: Integer read Get_Unknown write Set_Unknown;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFAPostProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFAPost
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFAPostProperties = class(TPersistent)
  private
    FServer:    TFAPost;
    function    GetDefaultInterface: _FAPost;
    constructor Create(AServer: TFAPost);
  protected
    function Get_Account: WideString;
    procedure Set_Account(const Param1: WideString);
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_Batch: WideString;
    procedure Set_Batch(const Param1: WideString);
    function Get_DatePosted: TDateTime;
    procedure Set_DatePosted(Param1: TDateTime);
    function Get_Day: Smallint;
    procedure Set_Day(Param1: Smallint);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_Month: Smallint;
    procedure Set_Month(Param1: Smallint);
    function Get_Year: Smallint;
    procedure Set_Year(Param1: Smallint);
    function Get_Unknown: Integer;
    procedure Set_Unknown(Param1: Integer);
  public
    property DefaultInterface: _FAPost read GetDefaultInterface;
  published
    property Account: WideString read Get_Account write Set_Account;
    property Amount: Double read Get_Amount write Set_Amount;
    property Batch: WideString read Get_Batch write Set_Batch;
    property DatePosted: TDateTime read Get_DatePosted write Set_DatePosted;
    property Day: Smallint read Get_Day write Set_Day;
    property Description: WideString read Get_Description write Set_Description;
    property Month: Smallint read Get_Month write Set_Month;
    property Year: Smallint read Get_Year write Set_Year;
    property Unknown: Integer read Get_Unknown write Set_Unknown;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFAPrePst provides a Create and CreateRemote method to          
// create instances of the default interface _FAPrePst exposed by              
// the CoClass FAPrePst. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFAPrePst = class
    class function Create: _FAPrePst;
    class function CreateRemote(const MachineName: string): _FAPrePst;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFAPrePst
// Help String      : 
// Default Interface: _FAPrePst
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFAPrePstProperties= class;
{$ENDIF}
  TFAPrePst = class(TOleServer)
  private
    FIntf:        _FAPrePst;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFAPrePstProperties;
    function      GetServerProperties: TFAPrePstProperties;
{$ENDIF}
    function      GetDefaultInterface: _FAPrePst;
  protected
    procedure InitServerData; override;
    function Get_Account: WideString;
    procedure Set_Account(const Param1: WideString);
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_EntryDate: OleVariant;
    procedure Set_EntryDate(Param1: OleVariant);
    function Get_Index: WideString;
    procedure Set_Index(const Param1: WideString);
    function Get_Unused: WideString;
    procedure Set_Unused(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _FAPrePst);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _FAPrePst read GetDefaultInterface;
    property EntryDate: OleVariant read Get_EntryDate write Set_EntryDate;
    property Account: WideString read Get_Account write Set_Account;
    property Amount: Double read Get_Amount write Set_Amount;
    property Index: WideString read Get_Index write Set_Index;
    property Unused: WideString read Get_Unused write Set_Unused;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFAPrePstProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFAPrePst
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFAPrePstProperties = class(TPersistent)
  private
    FServer:    TFAPrePst;
    function    GetDefaultInterface: _FAPrePst;
    constructor Create(AServer: TFAPrePst);
  protected
    function Get_Account: WideString;
    procedure Set_Account(const Param1: WideString);
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_EntryDate: OleVariant;
    procedure Set_EntryDate(Param1: OleVariant);
    function Get_Index: WideString;
    procedure Set_Index(const Param1: WideString);
    function Get_Unused: WideString;
    procedure Set_Unused(const Param1: WideString);
  public
    property DefaultInterface: _FAPrePst read GetDefaultInterface;
  published
    property Account: WideString read Get_Account write Set_Account;
    property Amount: Double read Get_Amount write Set_Amount;
    property Index: WideString read Get_Index write Set_Index;
    property Unused: WideString read Get_Unused write Set_Unused;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDefaultStatementData provides a Create and CreateRemote method to          
// create instances of the default interface _DefaultStatementData exposed by              
// the CoClass DefaultStatementData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDefaultStatementData = class
    class function Create: _DefaultStatementData;
    class function CreateRemote(const MachineName: string): _DefaultStatementData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDefaultStatementData
// Help String      : 
// Default Interface: _DefaultStatementData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDefaultStatementDataProperties= class;
{$ENDIF}
  TDefaultStatementData = class(TOleServer)
  private
    FIntf:        _DefaultStatementData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDefaultStatementDataProperties;
    function      GetServerProperties: TDefaultStatementDataProperties;
{$ENDIF}
    function      GetDefaultInterface: _DefaultStatementData;
  protected
    procedure InitServerData; override;
    function Get_ActualLength: Integer;
    function Get_DunningDays(Index: Smallint): Smallint;
    procedure Set_DunningDays(Index: Smallint; Param2: Smallint);
    function Get_DunningMessage(Index: Smallint): WideString;
    procedure Set_DunningMessage(Index: Smallint; const Param2: WideString);
    function Get_FCWarningMessage: WideString;
    procedure Set_FCWarningMessage(const Param1: WideString);
    function Get_PrintAddress: WordBool;
    procedure Set_PrintAddress(Param1: WordBool);
    function Get_PrintAnyActivity: WordBool;
    procedure Set_PrintAnyActivity(Param1: WordBool);
    function Get_PrintBalancesAtLeast: WordBool;
    procedure Set_PrintBalancesAtLeast(Param1: WordBool);
    function Get_PrintFCWarning: WordBool;
    procedure Set_PrintFCWarning(Param1: WordBool);
    function Get_PrintInvoicesAtLeast: WordBool;
    procedure Set_PrintInvoicesAtLeast(Param1: WordBool);
    function Get_PrintMinimumBalance: Double;
    procedure Set_PrintMinimumBalance(Param1: Double);
    function Get_PrintNegativeBalance: WordBool;
    procedure Set_PrintNegativeBalance(Param1: WordBool);
    function Get_PrintNegativeBalanceChar: WideString;
    procedure Set_PrintNegativeBalanceChar(const Param1: WideString);
    function Get_PrintOverdueDays: Smallint;
    procedure Set_PrintOverdueDays(Param1: Smallint);
    function Get_PrintZeroBalance: WordBool;
    procedure Set_PrintZeroBalance(Param1: WordBool);
    function Get_PrintZeroBalanceChar: WideString;
    procedure Set_PrintZeroBalanceChar(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DefaultStatementData);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Read: Smallint;
    function Update: Smallint;
    property DefaultInterface: _DefaultStatementData read GetDefaultInterface;
    property ActualLength: Integer read Get_ActualLength;
    property DunningDays[Index: Smallint]: Smallint read Get_DunningDays write Set_DunningDays;
    property DunningMessage[Index: Smallint]: WideString read Get_DunningMessage write Set_DunningMessage;
    property FCWarningMessage: WideString read Get_FCWarningMessage write Set_FCWarningMessage;
    property PrintAddress: WordBool read Get_PrintAddress write Set_PrintAddress;
    property PrintAnyActivity: WordBool read Get_PrintAnyActivity write Set_PrintAnyActivity;
    property PrintBalancesAtLeast: WordBool read Get_PrintBalancesAtLeast write Set_PrintBalancesAtLeast;
    property PrintFCWarning: WordBool read Get_PrintFCWarning write Set_PrintFCWarning;
    property PrintInvoicesAtLeast: WordBool read Get_PrintInvoicesAtLeast write Set_PrintInvoicesAtLeast;
    property PrintMinimumBalance: Double read Get_PrintMinimumBalance write Set_PrintMinimumBalance;
    property PrintNegativeBalance: WordBool read Get_PrintNegativeBalance write Set_PrintNegativeBalance;
    property PrintNegativeBalanceChar: WideString read Get_PrintNegativeBalanceChar write Set_PrintNegativeBalanceChar;
    property PrintOverdueDays: Smallint read Get_PrintOverdueDays write Set_PrintOverdueDays;
    property PrintZeroBalance: WordBool read Get_PrintZeroBalance write Set_PrintZeroBalance;
    property PrintZeroBalanceChar: WideString read Get_PrintZeroBalanceChar write Set_PrintZeroBalanceChar;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDefaultStatementDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDefaultStatementData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDefaultStatementDataProperties = class(TPersistent)
  private
    FServer:    TDefaultStatementData;
    function    GetDefaultInterface: _DefaultStatementData;
    constructor Create(AServer: TDefaultStatementData);
  protected
    function Get_ActualLength: Integer;
    function Get_DunningDays(Index: Smallint): Smallint;
    procedure Set_DunningDays(Index: Smallint; Param2: Smallint);
    function Get_DunningMessage(Index: Smallint): WideString;
    procedure Set_DunningMessage(Index: Smallint; const Param2: WideString);
    function Get_FCWarningMessage: WideString;
    procedure Set_FCWarningMessage(const Param1: WideString);
    function Get_PrintAddress: WordBool;
    procedure Set_PrintAddress(Param1: WordBool);
    function Get_PrintAnyActivity: WordBool;
    procedure Set_PrintAnyActivity(Param1: WordBool);
    function Get_PrintBalancesAtLeast: WordBool;
    procedure Set_PrintBalancesAtLeast(Param1: WordBool);
    function Get_PrintFCWarning: WordBool;
    procedure Set_PrintFCWarning(Param1: WordBool);
    function Get_PrintInvoicesAtLeast: WordBool;
    procedure Set_PrintInvoicesAtLeast(Param1: WordBool);
    function Get_PrintMinimumBalance: Double;
    procedure Set_PrintMinimumBalance(Param1: Double);
    function Get_PrintNegativeBalance: WordBool;
    procedure Set_PrintNegativeBalance(Param1: WordBool);
    function Get_PrintNegativeBalanceChar: WideString;
    procedure Set_PrintNegativeBalanceChar(const Param1: WideString);
    function Get_PrintOverdueDays: Smallint;
    procedure Set_PrintOverdueDays(Param1: Smallint);
    function Get_PrintZeroBalance: WordBool;
    procedure Set_PrintZeroBalance(Param1: WordBool);
    function Get_PrintZeroBalanceChar: WideString;
    procedure Set_PrintZeroBalanceChar(const Param1: WideString);
  public
    property DefaultInterface: _DefaultStatementData read GetDefaultInterface;
  published
    property FCWarningMessage: WideString read Get_FCWarningMessage write Set_FCWarningMessage;
    property PrintAddress: WordBool read Get_PrintAddress write Set_PrintAddress;
    property PrintAnyActivity: WordBool read Get_PrintAnyActivity write Set_PrintAnyActivity;
    property PrintBalancesAtLeast: WordBool read Get_PrintBalancesAtLeast write Set_PrintBalancesAtLeast;
    property PrintFCWarning: WordBool read Get_PrintFCWarning write Set_PrintFCWarning;
    property PrintInvoicesAtLeast: WordBool read Get_PrintInvoicesAtLeast write Set_PrintInvoicesAtLeast;
    property PrintMinimumBalance: Double read Get_PrintMinimumBalance write Set_PrintMinimumBalance;
    property PrintNegativeBalance: WordBool read Get_PrintNegativeBalance write Set_PrintNegativeBalance;
    property PrintNegativeBalanceChar: WideString read Get_PrintNegativeBalanceChar write Set_PrintNegativeBalanceChar;
    property PrintOverdueDays: Smallint read Get_PrintOverdueDays write Set_PrintOverdueDays;
    property PrintZeroBalance: WordBool read Get_PrintZeroBalance write Set_PrintZeroBalance;
    property PrintZeroBalanceChar: WideString read Get_PrintZeroBalanceChar write Set_PrintZeroBalanceChar;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDefaultTaxTypes provides a Create and CreateRemote method to          
// create instances of the default interface _DefaultTaxTypes exposed by              
// the CoClass DefaultTaxTypes. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDefaultTaxTypes = class
    class function Create: _DefaultTaxTypes;
    class function CreateRemote(const MachineName: string): _DefaultTaxTypes;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDefaultTaxTypes
// Help String      : 
// Default Interface: _DefaultTaxTypes
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDefaultTaxTypesProperties= class;
{$ENDIF}
  TDefaultTaxTypes = class(TOleServer)
  private
    FIntf:        _DefaultTaxTypes;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDefaultTaxTypesProperties;
    function      GetServerProperties: TDefaultTaxTypesProperties;
{$ENDIF}
    function      GetDefaultInterface: _DefaultTaxTypes;
  protected
    procedure InitServerData; override;
    function Get_Description(Index: Smallint): WideString;
    procedure Set_Description(Index: Smallint; const Param2: WideString);
    function Get_Taxable(Index: Smallint): WordBool;
    procedure Set_Taxable(Index: Smallint; Param2: WordBool);
    function Get_Unknown(Index: Smallint): Byte;
    procedure Set_Unknown(Index: Smallint; Param2: Byte);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DefaultTaxTypes);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Read: Smallint;
    function Update: Smallint;
    property DefaultInterface: _DefaultTaxTypes read GetDefaultInterface;
    property Description[Index: Smallint]: WideString read Get_Description write Set_Description;
    property Taxable[Index: Smallint]: WordBool read Get_Taxable write Set_Taxable;
    property Unknown[Index: Smallint]: Byte read Get_Unknown write Set_Unknown;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDefaultTaxTypesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDefaultTaxTypes
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDefaultTaxTypesProperties = class(TPersistent)
  private
    FServer:    TDefaultTaxTypes;
    function    GetDefaultInterface: _DefaultTaxTypes;
    constructor Create(AServer: TDefaultTaxTypes);
  protected
    function Get_Description(Index: Smallint): WideString;
    procedure Set_Description(Index: Smallint; const Param2: WideString);
    function Get_Taxable(Index: Smallint): WordBool;
    procedure Set_Taxable(Index: Smallint; Param2: WordBool);
    function Get_Unknown(Index: Smallint): Byte;
    procedure Set_Unknown(Index: Smallint; Param2: Byte);
  public
    property DefaultInterface: _DefaultTaxTypes read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDefaultVendorData provides a Create and CreateRemote method to          
// create instances of the default interface _DefaultVendorData exposed by              
// the CoClass DefaultVendorData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDefaultVendorData = class
    class function Create: _DefaultVendorData;
    class function CreateRemote(const MachineName: string): _DefaultVendorData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDefaultVendorData
// Help String      : 
// Default Interface: _DefaultVendorData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDefaultVendorDataProperties= class;
{$ENDIF}
  TDefaultVendorData = class(TOleServer)
  private
    FIntf:        _DefaultVendorData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDefaultVendorDataProperties;
    function      GetServerProperties: TDefaultVendorDataProperties;
{$ENDIF}
    function      GetDefaultInterface: _DefaultVendorData;
  protected
    procedure InitServerData; override;
    function Get_ActualLength: Integer;
    function Get_AgeByDueDate: WordBool;
    procedure Set_AgeByDueDate(Param1: WordBool);
    function Get_AgingDays(Index: Smallint): Smallint;
    procedure Set_AgingDays(Index: Smallint; Param2: Smallint);
    function Get_AgingHeading(Index: Smallint): WideString;
    procedure Set_AgingHeading(Index: Smallint; const Param2: WideString);
    function Get_APAccount: WideString;
    procedure Set_APAccount(const Param1: WideString);
    function Get_CashAccount: WideString;
    procedure Set_CashAccount(const Param1: WideString);
    function Get_COD: WordBool;
    procedure Set_COD(Param1: WordBool);
    function Get_CreditLimit: Double;
    procedure Set_CreditLimit(Param1: Double);
    function Get_CustomFieldEnabled(Index: Smallint): WordBool;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
    function Get_CustomFieldLabel(Index: Smallint): WideString;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
    function Get_DiscountDays: Smallint;
    procedure Set_DiscountDays(Param1: Smallint);
    function Get_DiscountPercent: Double;
    procedure Set_DiscountPercent(Param1: Double);
    function Get_DiscountGLAccount: WideString;
    procedure Set_DiscountGLAccount(const Param1: WideString);
    function Get_DueAtEndOfMonth: WordBool;
    procedure Set_DueAtEndOfMonth(Param1: WordBool);
    function Get_DueOnDayOfNextMonth: WordBool;
    procedure Set_DueOnDayOfNextMonth(Param1: WordBool);
    function Get_LastPONumber: WideString;
    procedure Set_LastPONumber(const Param1: WideString);
    function Get_NetDueDays: Smallint;
    procedure Set_NetDueDays(Param1: Smallint);
    function Get_NLabels: Smallint;
    function Get_Prepaid: WordBool;
    procedure Set_Prepaid(Param1: WordBool);
    function Get_PurchaseAccount: WideString;
    procedure Set_PurchaseAccount(const Param1: WideString);
    function Get_Unknown1(Index: Smallint): Byte;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Byte;
    procedure Set_Unused3(Param1: Byte);
    function Get_Unused4(Index: Smallint): Byte;
    procedure Set_Unused4(Index: Smallint; Param2: Byte);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_WriteCheckCashAccount: WideString;
    procedure Set_WriteCheckCashAccount(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DefaultVendorData);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Read: Smallint;
    function Update: Smallint;
    property DefaultInterface: _DefaultVendorData read GetDefaultInterface;
    property ActualLength: Integer read Get_ActualLength;
    property AgingDays[Index: Smallint]: Smallint read Get_AgingDays write Set_AgingDays;
    property AgingHeading[Index: Smallint]: WideString read Get_AgingHeading write Set_AgingHeading;
    property CustomFieldEnabled[Index: Smallint]: WordBool read Get_CustomFieldEnabled write Set_CustomFieldEnabled;
    property CustomFieldLabel[Index: Smallint]: WideString read Get_CustomFieldLabel write Set_CustomFieldLabel;
    property NLabels: Smallint read Get_NLabels;
    property Unknown1[Index: Smallint]: Byte read Get_Unknown1 write Set_Unknown1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused4[Index: Smallint]: Byte read Get_Unused4 write Set_Unused4;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property AgeByDueDate: WordBool read Get_AgeByDueDate write Set_AgeByDueDate;
    property APAccount: WideString read Get_APAccount write Set_APAccount;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property COD: WordBool read Get_COD write Set_COD;
    property CreditLimit: Double read Get_CreditLimit write Set_CreditLimit;
    property DiscountDays: Smallint read Get_DiscountDays write Set_DiscountDays;
    property DiscountPercent: Double read Get_DiscountPercent write Set_DiscountPercent;
    property DiscountGLAccount: WideString read Get_DiscountGLAccount write Set_DiscountGLAccount;
    property DueAtEndOfMonth: WordBool read Get_DueAtEndOfMonth write Set_DueAtEndOfMonth;
    property DueOnDayOfNextMonth: WordBool read Get_DueOnDayOfNextMonth write Set_DueOnDayOfNextMonth;
    property LastPONumber: WideString read Get_LastPONumber write Set_LastPONumber;
    property NetDueDays: Smallint read Get_NetDueDays write Set_NetDueDays;
    property Prepaid: WordBool read Get_Prepaid write Set_Prepaid;
    property PurchaseAccount: WideString read Get_PurchaseAccount write Set_PurchaseAccount;
    property Unused3: Byte read Get_Unused3 write Set_Unused3;
    property WriteCheckCashAccount: WideString read Get_WriteCheckCashAccount write Set_WriteCheckCashAccount;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDefaultVendorDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDefaultVendorData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDefaultVendorDataProperties = class(TPersistent)
  private
    FServer:    TDefaultVendorData;
    function    GetDefaultInterface: _DefaultVendorData;
    constructor Create(AServer: TDefaultVendorData);
  protected
    function Get_ActualLength: Integer;
    function Get_AgeByDueDate: WordBool;
    procedure Set_AgeByDueDate(Param1: WordBool);
    function Get_AgingDays(Index: Smallint): Smallint;
    procedure Set_AgingDays(Index: Smallint; Param2: Smallint);
    function Get_AgingHeading(Index: Smallint): WideString;
    procedure Set_AgingHeading(Index: Smallint; const Param2: WideString);
    function Get_APAccount: WideString;
    procedure Set_APAccount(const Param1: WideString);
    function Get_CashAccount: WideString;
    procedure Set_CashAccount(const Param1: WideString);
    function Get_COD: WordBool;
    procedure Set_COD(Param1: WordBool);
    function Get_CreditLimit: Double;
    procedure Set_CreditLimit(Param1: Double);
    function Get_CustomFieldEnabled(Index: Smallint): WordBool;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
    function Get_CustomFieldLabel(Index: Smallint): WideString;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
    function Get_DiscountDays: Smallint;
    procedure Set_DiscountDays(Param1: Smallint);
    function Get_DiscountPercent: Double;
    procedure Set_DiscountPercent(Param1: Double);
    function Get_DiscountGLAccount: WideString;
    procedure Set_DiscountGLAccount(const Param1: WideString);
    function Get_DueAtEndOfMonth: WordBool;
    procedure Set_DueAtEndOfMonth(Param1: WordBool);
    function Get_DueOnDayOfNextMonth: WordBool;
    procedure Set_DueOnDayOfNextMonth(Param1: WordBool);
    function Get_LastPONumber: WideString;
    procedure Set_LastPONumber(const Param1: WideString);
    function Get_NetDueDays: Smallint;
    procedure Set_NetDueDays(Param1: Smallint);
    function Get_NLabels: Smallint;
    function Get_Prepaid: WordBool;
    procedure Set_Prepaid(Param1: WordBool);
    function Get_PurchaseAccount: WideString;
    procedure Set_PurchaseAccount(const Param1: WideString);
    function Get_Unknown1(Index: Smallint): Byte;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Byte;
    procedure Set_Unused3(Param1: Byte);
    function Get_Unused4(Index: Smallint): Byte;
    procedure Set_Unused4(Index: Smallint; Param2: Byte);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_WriteCheckCashAccount: WideString;
    procedure Set_WriteCheckCashAccount(const Param1: WideString);
  public
    property DefaultInterface: _DefaultVendorData read GetDefaultInterface;
  published
    property AgeByDueDate: WordBool read Get_AgeByDueDate write Set_AgeByDueDate;
    property APAccount: WideString read Get_APAccount write Set_APAccount;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property COD: WordBool read Get_COD write Set_COD;
    property CreditLimit: Double read Get_CreditLimit write Set_CreditLimit;
    property DiscountDays: Smallint read Get_DiscountDays write Set_DiscountDays;
    property DiscountPercent: Double read Get_DiscountPercent write Set_DiscountPercent;
    property DiscountGLAccount: WideString read Get_DiscountGLAccount write Set_DiscountGLAccount;
    property DueAtEndOfMonth: WordBool read Get_DueAtEndOfMonth write Set_DueAtEndOfMonth;
    property DueOnDayOfNextMonth: WordBool read Get_DueOnDayOfNextMonth write Set_DueOnDayOfNextMonth;
    property LastPONumber: WideString read Get_LastPONumber write Set_LastPONumber;
    property NetDueDays: Smallint read Get_NetDueDays write Set_NetDueDays;
    property Prepaid: WordBool read Get_Prepaid write Set_Prepaid;
    property PurchaseAccount: WideString read Get_PurchaseAccount write Set_PurchaseAccount;
    property Unused3: Byte read Get_Unused3 write Set_Unused3;
    property WriteCheckCashAccount: WideString read Get_WriteCheckCashAccount write Set_WriteCheckCashAccount;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDefaultInventoryData provides a Create and CreateRemote method to          
// create instances of the default interface _DefaultInventoryData exposed by              
// the CoClass DefaultInventoryData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDefaultInventoryData = class
    class function Create: _DefaultInventoryData;
    class function CreateRemote(const MachineName: string): _DefaultInventoryData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDefaultInventoryData
// Help String      : 
// Default Interface: _DefaultInventoryData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDefaultInventoryDataProperties= class;
{$ENDIF}
  TDefaultInventoryData = class(TOleServer)
  private
    FIntf:        _DefaultInventoryData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDefaultInventoryDataProperties;
    function      GetServerProperties: TDefaultInventoryDataProperties;
{$ENDIF}
    function      GetDefaultInterface: _DefaultInventoryData;
  protected
    procedure InitServerData; override;
    function Get_CustomFieldEnabled(Index: Smallint): WordBool;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
    function Get_CustomFieldLabel(Index: Smallint): WideString;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
    function Get_GLFreightAccount: WideString;
    procedure Set_GLFreightAccount(const Param1: WideString);
    function Get_NLabels: Smallint;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DefaultInventoryData);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Read: Smallint;
    function Update: Smallint;
    property DefaultInterface: _DefaultInventoryData read GetDefaultInterface;
    property CustomFieldEnabled[Index: Smallint]: WordBool read Get_CustomFieldEnabled write Set_CustomFieldEnabled;
    property CustomFieldLabel[Index: Smallint]: WideString read Get_CustomFieldLabel write Set_CustomFieldLabel;
    property NLabels: Smallint read Get_NLabels;
    property GLFreightAccount: WideString read Get_GLFreightAccount write Set_GLFreightAccount;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDefaultInventoryDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDefaultInventoryData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDefaultInventoryDataProperties = class(TPersistent)
  private
    FServer:    TDefaultInventoryData;
    function    GetDefaultInterface: _DefaultInventoryData;
    constructor Create(AServer: TDefaultInventoryData);
  protected
    function Get_CustomFieldEnabled(Index: Smallint): WordBool;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
    function Get_CustomFieldLabel(Index: Smallint): WideString;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
    function Get_GLFreightAccount: WideString;
    procedure Set_GLFreightAccount(const Param1: WideString);
    function Get_NLabels: Smallint;
  public
    property DefaultInterface: _DefaultInventoryData read GetDefaultInterface;
  published
    property GLFreightAccount: WideString read Get_GLFreightAccount write Set_GLFreightAccount;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDefaultGLAccounts provides a Create and CreateRemote method to          
// create instances of the default interface _DefaultGLAccounts exposed by              
// the CoClass DefaultGLAccounts. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDefaultGLAccounts = class
    class function Create: _DefaultGLAccounts;
    class function CreateRemote(const MachineName: string): _DefaultGLAccounts;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDefaultGLAccounts
// Help String      : 
// Default Interface: _DefaultGLAccounts
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDefaultGLAccountsProperties= class;
{$ENDIF}
  TDefaultGLAccounts = class(TOleServer)
  private
    FIntf:        _DefaultGLAccounts;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDefaultGLAccountsProperties;
    function      GetServerProperties: TDefaultGLAccountsProperties;
{$ENDIF}
    function      GetDefaultInterface: _DefaultGLAccounts;
  protected
    procedure InitServerData; override;
    function Get_Costing(Index: Smallint): Smallint;
    procedure Set_Costing(Index: Smallint; Param2: Smallint);
    function Get_GLCostOfSales(Index: Smallint): WideString;
    procedure Set_GLCostOfSales(Index: Smallint; const Param2: WideString);
    function Get_GLInventoryWage(Index: Smallint): WideString;
    procedure Set_GLInventoryWage(Index: Smallint; const Param2: WideString);
    function Get_GLSales(Index: Smallint): WideString;
    procedure Set_GLSales(Index: Smallint; const Param2: WideString);
    function Get_ItemClassIndex(Index: Smallint): Smallint;
    procedure Set_ItemClassIndex(Index: Smallint; Param2: Smallint);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DefaultGLAccounts);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Read: Smallint;
    function Update: Smallint;
    property DefaultInterface: _DefaultGLAccounts read GetDefaultInterface;
    property Costing[Index: Smallint]: Smallint read Get_Costing write Set_Costing;
    property GLCostOfSales[Index: Smallint]: WideString read Get_GLCostOfSales write Set_GLCostOfSales;
    property GLInventoryWage[Index: Smallint]: WideString read Get_GLInventoryWage write Set_GLInventoryWage;
    property GLSales[Index: Smallint]: WideString read Get_GLSales write Set_GLSales;
    property ItemClassIndex[Index: Smallint]: Smallint read Get_ItemClassIndex write Set_ItemClassIndex;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDefaultGLAccountsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDefaultGLAccounts
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDefaultGLAccountsProperties = class(TPersistent)
  private
    FServer:    TDefaultGLAccounts;
    function    GetDefaultInterface: _DefaultGLAccounts;
    constructor Create(AServer: TDefaultGLAccounts);
  protected
    function Get_Costing(Index: Smallint): Smallint;
    procedure Set_Costing(Index: Smallint; Param2: Smallint);
    function Get_GLCostOfSales(Index: Smallint): WideString;
    procedure Set_GLCostOfSales(Index: Smallint; const Param2: WideString);
    function Get_GLInventoryWage(Index: Smallint): WideString;
    procedure Set_GLInventoryWage(Index: Smallint; const Param2: WideString);
    function Get_GLSales(Index: Smallint): WideString;
    procedure Set_GLSales(Index: Smallint; const Param2: WideString);
    function Get_ItemClassIndex(Index: Smallint): Smallint;
    procedure Set_ItemClassIndex(Index: Smallint; Param2: Smallint);
  public
    property DefaultInterface: _DefaultGLAccounts read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDefaultJobData provides a Create and CreateRemote method to          
// create instances of the default interface _DefaultJobData exposed by              
// the CoClass DefaultJobData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDefaultJobData = class
    class function Create: _DefaultJobData;
    class function CreateRemote(const MachineName: string): _DefaultJobData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDefaultJobData
// Help String      : 
// Default Interface: _DefaultJobData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDefaultJobDataProperties= class;
{$ENDIF}
  TDefaultJobData = class(TOleServer)
  private
    FIntf:        _DefaultJobData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDefaultJobDataProperties;
    function      GetServerProperties: TDefaultJobDataProperties;
{$ENDIF}
    function      GetDefaultInterface: _DefaultJobData;
  protected
    procedure InitServerData; override;
    function Get_CustomFieldEnabled(Index: Smallint): WordBool;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
    function Get_CustomFieldLabel(Index: Smallint): WideString;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
    function Get_NLabels: Smallint;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DefaultJobData);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Read: Smallint;
    function Update: Smallint;
    property DefaultInterface: _DefaultJobData read GetDefaultInterface;
    property CustomFieldEnabled[Index: Smallint]: WordBool read Get_CustomFieldEnabled write Set_CustomFieldEnabled;
    property CustomFieldLabel[Index: Smallint]: WideString read Get_CustomFieldLabel write Set_CustomFieldLabel;
    property NLabels: Smallint read Get_NLabels;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDefaultJobDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDefaultJobData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDefaultJobDataProperties = class(TPersistent)
  private
    FServer:    TDefaultJobData;
    function    GetDefaultInterface: _DefaultJobData;
    constructor Create(AServer: TDefaultJobData);
  protected
    function Get_CustomFieldEnabled(Index: Smallint): WordBool;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
    function Get_CustomFieldLabel(Index: Smallint): WideString;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
    function Get_NLabels: Smallint;
  public
    property DefaultInterface: _DefaultJobData read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDefaultEmployeeData provides a Create and CreateRemote method to          
// create instances of the default interface _DefaultEmployeeData exposed by              
// the CoClass DefaultEmployeeData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDefaultEmployeeData = class
    class function Create: _DefaultEmployeeData;
    class function CreateRemote(const MachineName: string): _DefaultEmployeeData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDefaultEmployeeData
// Help String      : 
// Default Interface: _DefaultEmployeeData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDefaultEmployeeDataProperties= class;
{$ENDIF}
  TDefaultEmployeeData = class(TOleServer)
  private
    FIntf:        _DefaultEmployeeData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDefaultEmployeeDataProperties;
    function      GetServerProperties: TDefaultEmployeeDataProperties;
{$ENDIF}
    function      GetDefaultInterface: _DefaultEmployeeData;
  protected
    procedure InitServerData; override;
    function Get_CustomFieldEnabled(Index: Smallint): WordBool;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
    function Get_CustomFieldLabel(Index: Smallint): WideString;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
    function Get_DisplayLastNameFirst: WordBool;
    procedure Set_DisplayLastNameFirst(Param1: WordBool);
    function Get_EEAdjust(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_EEAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_EEAmount(Index: Smallint): Double;
    procedure Set_EEAmount(Index: Smallint; Param2: Double);
    function Get_EECalc(Index: Smallint): WordBool;
    procedure Set_EECalc(Index: Smallint; Param2: WordBool);
    function Get_EECalcName(Index: Smallint): WideString;
    procedure Set_EECalcName(Index: Smallint; const Param2: WideString);
    function Get_EEDescription(Index: Smallint): WideString;
    procedure Set_EEDescription(Index: Smallint; const Param2: WideString);
    function Get_EEDisability: Smallint;
    procedure Set_EEDisability(Param1: Smallint);
    function Get_EEStateUnemployment: Smallint;
    procedure Set_EEStateUnemployment(Param1: Smallint);
    function Get_EETrainingTax: Smallint;
    procedure Set_EETrainingTax(Param1: Smallint);
    function Get_EEGLAccount(Index: Smallint): WideString;
    procedure Set_EEGLAccount(Index: Smallint; const Param2: WideString);
    function Get_EEMemo(Index: Smallint): WordBool;
    procedure Set_EEMemo(Index: Smallint; Param2: WordBool);
    function Get_EERun(Index: Smallint): WordBool;
    procedure Set_EERun(Index: Smallint; Param2: WordBool);
    function Get_ERAdjust(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_ERAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_ERCalc(Index: Smallint): WordBool;
    procedure Set_ERCalc(Index: Smallint; Param2: WordBool);
    function Get_ERCalcName(Index: Smallint): WideString;
    procedure Set_ERCalcName(Index: Smallint; const Param2: WideString);
    function Get_ERDescription(Index: Smallint): WideString;
    procedure Set_ERDescription(Index: Smallint; const Param2: WideString);
    function Get_ERExpenseAccount(Index: Smallint): WideString;
    procedure Set_ERExpenseAccount(Index: Smallint; const Param2: WideString);
    function Get_ERLiabilityAccount(Index: Smallint): WideString;
    procedure Set_ERLiabilityAccount(Index: Smallint; const Param2: WideString);
    function Get_FUTA_ER: Smallint;
    procedure Set_FUTA_ER(Param1: Smallint);
    function Get_HoursDescription(Index: Smallint): WideString;
    procedure Set_HoursDescription(Index: Smallint; const Param2: WideString);
    function Get_HoursGLAccount(Index: Smallint): WideString;
    procedure Set_HoursGLAccount(Index: Smallint; const Param2: WideString);
    function Get_Locality: WideString;
    procedure Set_Locality(const Param1: WideString);
    function Get_NLabels: Smallint;
    function Get_PayrollCashAccount: WideString;
    procedure Set_PayrollCashAccount(const Param1: WideString);
    function Get_SalaryDescription(Index: Smallint): WideString;
    procedure Set_SalaryDescription(Index: Smallint; const Param2: WideString);
    function Get_SalaryGLAccount(Index: Smallint): WideString;
    procedure Set_SalaryGLAccount(Index: Smallint; const Param2: WideString);
    function Get_SDI: Smallint;
    procedure Set_SDI(Param1: Smallint);
    function Get_State: WideString;
    procedure Set_State(const Param1: WideString);
    function Get_StateSpecialA: Smallint;
    procedure Set_StateSpecialA(Param1: Smallint);
    function Get_StateSpecialB: Smallint;
    procedure Set_StateSpecialB(Param1: Smallint);
    function Get_StateTrainingTax: Smallint;
    procedure Set_StateTrainingTax(Param1: Smallint);
    function Get_SUI_ER: Smallint;
    procedure Set_SUI_ER(Param1: Smallint);
    function Get_Unknown1: Smallint;
    procedure Set_Unknown1(Param1: Smallint);
    function Get_Unknown2: Smallint;
    procedure Set_Unknown2(Param1: Smallint);
    function Get_Unknown3(Index: Smallint): Byte;
    procedure Set_Unknown3(Index: Smallint; Param2: Byte);
    function Get_W2Field2: Smallint;
    procedure Set_W2Field2(Param1: Smallint);
    function Get_W2Field4: Smallint;
    procedure Set_W2Field4(Param1: Smallint);
    function Get_W2Field6: Smallint;
    procedure Set_W2Field6(Param1: Smallint);
    function Get_W2Field7: Smallint;
    procedure Set_W2Field7(Param1: Smallint);
    function Get_W2Field8: Smallint;
    procedure Set_W2Field8(Param1: Smallint);
    function Get_W2Field9: Smallint;
    procedure Set_W2Field9(Param1: Smallint);
    function Get_W2Field10: Smallint;
    procedure Set_W2Field10(Param1: Smallint);
    function Get_W2Field11: Smallint;
    procedure Set_W2Field11(Param1: Smallint);
    function Get_W2Field12: Smallint;
    procedure Set_W2Field12(Param1: Smallint);
    function Get_W2Field13C1: WideString;
    procedure Set_W2Field13C1(const Param1: WideString);
    function Get_W2Field13C2: WideString;
    procedure Set_W2Field13C2(const Param1: WideString);
    function Get_W2Field13C3: WideString;
    procedure Set_W2Field13C3(const Param1: WideString);
    function Get_W2Field13C4: WideString;
    procedure Set_W2Field13C4(const Param1: WideString);
    function Get_W2Field13F1: Smallint;
    procedure Set_W2Field13F1(Param1: Smallint);
    function Get_W2Field13F2: Smallint;
    procedure Set_W2Field13F2(Param1: Smallint);
    function Get_W2Field13F3: Smallint;
    procedure Set_W2Field13F3(Param1: Smallint);
    function Get_W2Field13F4: Smallint;
    procedure Set_W2Field13F4(Param1: Smallint);
    function Get_W2Field14: Smallint;
    procedure Set_W2Field14(Param1: Smallint);
    function Get_W2Field14B: Smallint;
    procedure Set_W2Field14B(Param1: Smallint);
    function Get_W2Field18: Smallint;
    procedure Set_W2Field18(Param1: Smallint);
    function Get_W2Field21: Smallint;
    procedure Set_W2Field21(Param1: Smallint);
    function Get_W2Text: WideString;
    procedure Set_W2Text(const Param1: WideString);
    function Get_W2Text2: WideString;
    procedure Set_W2Text2(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DefaultEmployeeData);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Read: Smallint;
    function Update: Smallint;
    property DefaultInterface: _DefaultEmployeeData read GetDefaultInterface;
    property CustomFieldEnabled[Index: Smallint]: WordBool read Get_CustomFieldEnabled write Set_CustomFieldEnabled;
    property CustomFieldLabel[Index: Smallint]: WideString read Get_CustomFieldLabel write Set_CustomFieldLabel;
    property EEAdjust[Index1: Smallint; Index2: Smallint]: Byte read Get_EEAdjust write Set_EEAdjust;
    property EEAmount[Index: Smallint]: Double read Get_EEAmount write Set_EEAmount;
    property EECalc[Index: Smallint]: WordBool read Get_EECalc write Set_EECalc;
    property EECalcName[Index: Smallint]: WideString read Get_EECalcName write Set_EECalcName;
    property EEDescription[Index: Smallint]: WideString read Get_EEDescription write Set_EEDescription;
    property EEGLAccount[Index: Smallint]: WideString read Get_EEGLAccount write Set_EEGLAccount;
    property EEMemo[Index: Smallint]: WordBool read Get_EEMemo write Set_EEMemo;
    property EERun[Index: Smallint]: WordBool read Get_EERun write Set_EERun;
    property ERAdjust[Index1: Smallint; Index2: Smallint]: Byte read Get_ERAdjust write Set_ERAdjust;
    property ERCalc[Index: Smallint]: WordBool read Get_ERCalc write Set_ERCalc;
    property ERCalcName[Index: Smallint]: WideString read Get_ERCalcName write Set_ERCalcName;
    property ERDescription[Index: Smallint]: WideString read Get_ERDescription write Set_ERDescription;
    property ERExpenseAccount[Index: Smallint]: WideString read Get_ERExpenseAccount write Set_ERExpenseAccount;
    property ERLiabilityAccount[Index: Smallint]: WideString read Get_ERLiabilityAccount write Set_ERLiabilityAccount;
    property HoursDescription[Index: Smallint]: WideString read Get_HoursDescription write Set_HoursDescription;
    property HoursGLAccount[Index: Smallint]: WideString read Get_HoursGLAccount write Set_HoursGLAccount;
    property NLabels: Smallint read Get_NLabels;
    property SalaryDescription[Index: Smallint]: WideString read Get_SalaryDescription write Set_SalaryDescription;
    property SalaryGLAccount[Index: Smallint]: WideString read Get_SalaryGLAccount write Set_SalaryGLAccount;
    property Unknown3[Index: Smallint]: Byte read Get_Unknown3 write Set_Unknown3;
    property DisplayLastNameFirst: WordBool read Get_DisplayLastNameFirst write Set_DisplayLastNameFirst;
    property EEDisability: Smallint read Get_EEDisability write Set_EEDisability;
    property EEStateUnemployment: Smallint read Get_EEStateUnemployment write Set_EEStateUnemployment;
    property EETrainingTax: Smallint read Get_EETrainingTax write Set_EETrainingTax;
    property FUTA_ER: Smallint read Get_FUTA_ER write Set_FUTA_ER;
    property Locality: WideString read Get_Locality write Set_Locality;
    property PayrollCashAccount: WideString read Get_PayrollCashAccount write Set_PayrollCashAccount;
    property SDI: Smallint read Get_SDI write Set_SDI;
    property State: WideString read Get_State write Set_State;
    property StateSpecialA: Smallint read Get_StateSpecialA write Set_StateSpecialA;
    property StateSpecialB: Smallint read Get_StateSpecialB write Set_StateSpecialB;
    property StateTrainingTax: Smallint read Get_StateTrainingTax write Set_StateTrainingTax;
    property SUI_ER: Smallint read Get_SUI_ER write Set_SUI_ER;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property W2Field2: Smallint read Get_W2Field2 write Set_W2Field2;
    property W2Field4: Smallint read Get_W2Field4 write Set_W2Field4;
    property W2Field6: Smallint read Get_W2Field6 write Set_W2Field6;
    property W2Field7: Smallint read Get_W2Field7 write Set_W2Field7;
    property W2Field8: Smallint read Get_W2Field8 write Set_W2Field8;
    property W2Field9: Smallint read Get_W2Field9 write Set_W2Field9;
    property W2Field10: Smallint read Get_W2Field10 write Set_W2Field10;
    property W2Field11: Smallint read Get_W2Field11 write Set_W2Field11;
    property W2Field12: Smallint read Get_W2Field12 write Set_W2Field12;
    property W2Field13C1: WideString read Get_W2Field13C1 write Set_W2Field13C1;
    property W2Field13C2: WideString read Get_W2Field13C2 write Set_W2Field13C2;
    property W2Field13C3: WideString read Get_W2Field13C3 write Set_W2Field13C3;
    property W2Field13C4: WideString read Get_W2Field13C4 write Set_W2Field13C4;
    property W2Field13F1: Smallint read Get_W2Field13F1 write Set_W2Field13F1;
    property W2Field13F2: Smallint read Get_W2Field13F2 write Set_W2Field13F2;
    property W2Field13F3: Smallint read Get_W2Field13F3 write Set_W2Field13F3;
    property W2Field13F4: Smallint read Get_W2Field13F4 write Set_W2Field13F4;
    property W2Field14: Smallint read Get_W2Field14 write Set_W2Field14;
    property W2Field14B: Smallint read Get_W2Field14B write Set_W2Field14B;
    property W2Field18: Smallint read Get_W2Field18 write Set_W2Field18;
    property W2Field21: Smallint read Get_W2Field21 write Set_W2Field21;
    property W2Text: WideString read Get_W2Text write Set_W2Text;
    property W2Text2: WideString read Get_W2Text2 write Set_W2Text2;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDefaultEmployeeDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDefaultEmployeeData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDefaultEmployeeDataProperties = class(TPersistent)
  private
    FServer:    TDefaultEmployeeData;
    function    GetDefaultInterface: _DefaultEmployeeData;
    constructor Create(AServer: TDefaultEmployeeData);
  protected
    function Get_CustomFieldEnabled(Index: Smallint): WordBool;
    procedure Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
    function Get_CustomFieldLabel(Index: Smallint): WideString;
    procedure Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
    function Get_DisplayLastNameFirst: WordBool;
    procedure Set_DisplayLastNameFirst(Param1: WordBool);
    function Get_EEAdjust(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_EEAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_EEAmount(Index: Smallint): Double;
    procedure Set_EEAmount(Index: Smallint; Param2: Double);
    function Get_EECalc(Index: Smallint): WordBool;
    procedure Set_EECalc(Index: Smallint; Param2: WordBool);
    function Get_EECalcName(Index: Smallint): WideString;
    procedure Set_EECalcName(Index: Smallint; const Param2: WideString);
    function Get_EEDescription(Index: Smallint): WideString;
    procedure Set_EEDescription(Index: Smallint; const Param2: WideString);
    function Get_EEDisability: Smallint;
    procedure Set_EEDisability(Param1: Smallint);
    function Get_EEStateUnemployment: Smallint;
    procedure Set_EEStateUnemployment(Param1: Smallint);
    function Get_EETrainingTax: Smallint;
    procedure Set_EETrainingTax(Param1: Smallint);
    function Get_EEGLAccount(Index: Smallint): WideString;
    procedure Set_EEGLAccount(Index: Smallint; const Param2: WideString);
    function Get_EEMemo(Index: Smallint): WordBool;
    procedure Set_EEMemo(Index: Smallint; Param2: WordBool);
    function Get_EERun(Index: Smallint): WordBool;
    procedure Set_EERun(Index: Smallint; Param2: WordBool);
    function Get_ERAdjust(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_ERAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_ERCalc(Index: Smallint): WordBool;
    procedure Set_ERCalc(Index: Smallint; Param2: WordBool);
    function Get_ERCalcName(Index: Smallint): WideString;
    procedure Set_ERCalcName(Index: Smallint; const Param2: WideString);
    function Get_ERDescription(Index: Smallint): WideString;
    procedure Set_ERDescription(Index: Smallint; const Param2: WideString);
    function Get_ERExpenseAccount(Index: Smallint): WideString;
    procedure Set_ERExpenseAccount(Index: Smallint; const Param2: WideString);
    function Get_ERLiabilityAccount(Index: Smallint): WideString;
    procedure Set_ERLiabilityAccount(Index: Smallint; const Param2: WideString);
    function Get_FUTA_ER: Smallint;
    procedure Set_FUTA_ER(Param1: Smallint);
    function Get_HoursDescription(Index: Smallint): WideString;
    procedure Set_HoursDescription(Index: Smallint; const Param2: WideString);
    function Get_HoursGLAccount(Index: Smallint): WideString;
    procedure Set_HoursGLAccount(Index: Smallint; const Param2: WideString);
    function Get_Locality: WideString;
    procedure Set_Locality(const Param1: WideString);
    function Get_NLabels: Smallint;
    function Get_PayrollCashAccount: WideString;
    procedure Set_PayrollCashAccount(const Param1: WideString);
    function Get_SalaryDescription(Index: Smallint): WideString;
    procedure Set_SalaryDescription(Index: Smallint; const Param2: WideString);
    function Get_SalaryGLAccount(Index: Smallint): WideString;
    procedure Set_SalaryGLAccount(Index: Smallint; const Param2: WideString);
    function Get_SDI: Smallint;
    procedure Set_SDI(Param1: Smallint);
    function Get_State: WideString;
    procedure Set_State(const Param1: WideString);
    function Get_StateSpecialA: Smallint;
    procedure Set_StateSpecialA(Param1: Smallint);
    function Get_StateSpecialB: Smallint;
    procedure Set_StateSpecialB(Param1: Smallint);
    function Get_StateTrainingTax: Smallint;
    procedure Set_StateTrainingTax(Param1: Smallint);
    function Get_SUI_ER: Smallint;
    procedure Set_SUI_ER(Param1: Smallint);
    function Get_Unknown1: Smallint;
    procedure Set_Unknown1(Param1: Smallint);
    function Get_Unknown2: Smallint;
    procedure Set_Unknown2(Param1: Smallint);
    function Get_Unknown3(Index: Smallint): Byte;
    procedure Set_Unknown3(Index: Smallint; Param2: Byte);
    function Get_W2Field2: Smallint;
    procedure Set_W2Field2(Param1: Smallint);
    function Get_W2Field4: Smallint;
    procedure Set_W2Field4(Param1: Smallint);
    function Get_W2Field6: Smallint;
    procedure Set_W2Field6(Param1: Smallint);
    function Get_W2Field7: Smallint;
    procedure Set_W2Field7(Param1: Smallint);
    function Get_W2Field8: Smallint;
    procedure Set_W2Field8(Param1: Smallint);
    function Get_W2Field9: Smallint;
    procedure Set_W2Field9(Param1: Smallint);
    function Get_W2Field10: Smallint;
    procedure Set_W2Field10(Param1: Smallint);
    function Get_W2Field11: Smallint;
    procedure Set_W2Field11(Param1: Smallint);
    function Get_W2Field12: Smallint;
    procedure Set_W2Field12(Param1: Smallint);
    function Get_W2Field13C1: WideString;
    procedure Set_W2Field13C1(const Param1: WideString);
    function Get_W2Field13C2: WideString;
    procedure Set_W2Field13C2(const Param1: WideString);
    function Get_W2Field13C3: WideString;
    procedure Set_W2Field13C3(const Param1: WideString);
    function Get_W2Field13C4: WideString;
    procedure Set_W2Field13C4(const Param1: WideString);
    function Get_W2Field13F1: Smallint;
    procedure Set_W2Field13F1(Param1: Smallint);
    function Get_W2Field13F2: Smallint;
    procedure Set_W2Field13F2(Param1: Smallint);
    function Get_W2Field13F3: Smallint;
    procedure Set_W2Field13F3(Param1: Smallint);
    function Get_W2Field13F4: Smallint;
    procedure Set_W2Field13F4(Param1: Smallint);
    function Get_W2Field14: Smallint;
    procedure Set_W2Field14(Param1: Smallint);
    function Get_W2Field14B: Smallint;
    procedure Set_W2Field14B(Param1: Smallint);
    function Get_W2Field18: Smallint;
    procedure Set_W2Field18(Param1: Smallint);
    function Get_W2Field21: Smallint;
    procedure Set_W2Field21(Param1: Smallint);
    function Get_W2Text: WideString;
    procedure Set_W2Text(const Param1: WideString);
    function Get_W2Text2: WideString;
    procedure Set_W2Text2(const Param1: WideString);
  public
    property DefaultInterface: _DefaultEmployeeData read GetDefaultInterface;
  published
    property DisplayLastNameFirst: WordBool read Get_DisplayLastNameFirst write Set_DisplayLastNameFirst;
    property EEDisability: Smallint read Get_EEDisability write Set_EEDisability;
    property EEStateUnemployment: Smallint read Get_EEStateUnemployment write Set_EEStateUnemployment;
    property EETrainingTax: Smallint read Get_EETrainingTax write Set_EETrainingTax;
    property FUTA_ER: Smallint read Get_FUTA_ER write Set_FUTA_ER;
    property Locality: WideString read Get_Locality write Set_Locality;
    property PayrollCashAccount: WideString read Get_PayrollCashAccount write Set_PayrollCashAccount;
    property SDI: Smallint read Get_SDI write Set_SDI;
    property State: WideString read Get_State write Set_State;
    property StateSpecialA: Smallint read Get_StateSpecialA write Set_StateSpecialA;
    property StateSpecialB: Smallint read Get_StateSpecialB write Set_StateSpecialB;
    property StateTrainingTax: Smallint read Get_StateTrainingTax write Set_StateTrainingTax;
    property SUI_ER: Smallint read Get_SUI_ER write Set_SUI_ER;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property W2Field2: Smallint read Get_W2Field2 write Set_W2Field2;
    property W2Field4: Smallint read Get_W2Field4 write Set_W2Field4;
    property W2Field6: Smallint read Get_W2Field6 write Set_W2Field6;
    property W2Field7: Smallint read Get_W2Field7 write Set_W2Field7;
    property W2Field8: Smallint read Get_W2Field8 write Set_W2Field8;
    property W2Field9: Smallint read Get_W2Field9 write Set_W2Field9;
    property W2Field10: Smallint read Get_W2Field10 write Set_W2Field10;
    property W2Field11: Smallint read Get_W2Field11 write Set_W2Field11;
    property W2Field12: Smallint read Get_W2Field12 write Set_W2Field12;
    property W2Field13C1: WideString read Get_W2Field13C1 write Set_W2Field13C1;
    property W2Field13C2: WideString read Get_W2Field13C2 write Set_W2Field13C2;
    property W2Field13C3: WideString read Get_W2Field13C3 write Set_W2Field13C3;
    property W2Field13C4: WideString read Get_W2Field13C4 write Set_W2Field13C4;
    property W2Field13F1: Smallint read Get_W2Field13F1 write Set_W2Field13F1;
    property W2Field13F2: Smallint read Get_W2Field13F2 write Set_W2Field13F2;
    property W2Field13F3: Smallint read Get_W2Field13F3 write Set_W2Field13F3;
    property W2Field13F4: Smallint read Get_W2Field13F4 write Set_W2Field13F4;
    property W2Field14: Smallint read Get_W2Field14 write Set_W2Field14;
    property W2Field14B: Smallint read Get_W2Field14B write Set_W2Field14B;
    property W2Field18: Smallint read Get_W2Field18 write Set_W2Field18;
    property W2Field21: Smallint read Get_W2Field21 write Set_W2Field21;
    property W2Text: WideString read Get_W2Text write Set_W2Text;
    property W2Text2: WideString read Get_W2Text2 write Set_W2Text2;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoeCheckData provides a Create and CreateRemote method to          
// create instances of the default interface _eCheckData exposed by              
// the CoClass eCheckData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoeCheckData = class
    class function Create: _eCheckData;
    class function CreateRemote(const MachineName: string): _eCheckData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TeCheckData
// Help String      : 
// Default Interface: _eCheckData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TeCheckDataProperties= class;
{$ENDIF}
  TeCheckData = class(TOleServer)
  private
    FIntf:        _eCheckData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TeCheckDataProperties;
    function      GetServerProperties: TeCheckDataProperties;
{$ENDIF}
    function      GetDefaultInterface: _eCheckData;
  protected
    procedure InitServerData; override;
    function Get_MasterBusinessID: Integer;
    procedure Set_MasterBusinessID(Param1: Integer);
    function Get_SecurityCode: WideString;
    procedure Set_SecurityCode(const Param1: WideString);
    function Get_TransmissionPhone: WideString;
    procedure Set_TransmissionPhone(const Param1: WideString);
    function Get_Unknown(Index: Smallint): Byte;
    procedure Set_Unknown(Index: Smallint; Param2: Byte);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _eCheckData);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Read: Smallint;
    function Update: Smallint;
    property DefaultInterface: _eCheckData read GetDefaultInterface;
    property Unknown[Index: Smallint]: Byte read Get_Unknown write Set_Unknown;
    property MasterBusinessID: Integer read Get_MasterBusinessID write Set_MasterBusinessID;
    property SecurityCode: WideString read Get_SecurityCode write Set_SecurityCode;
    property TransmissionPhone: WideString read Get_TransmissionPhone write Set_TransmissionPhone;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TeCheckDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TeCheckData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TeCheckDataProperties = class(TPersistent)
  private
    FServer:    TeCheckData;
    function    GetDefaultInterface: _eCheckData;
    constructor Create(AServer: TeCheckData);
  protected
    function Get_MasterBusinessID: Integer;
    procedure Set_MasterBusinessID(Param1: Integer);
    function Get_SecurityCode: WideString;
    procedure Set_SecurityCode(const Param1: WideString);
    function Get_TransmissionPhone: WideString;
    procedure Set_TransmissionPhone(const Param1: WideString);
    function Get_Unknown(Index: Smallint): Byte;
    procedure Set_Unknown(Index: Smallint; Param2: Byte);
  public
    property DefaultInterface: _eCheckData read GetDefaultInterface;
  published
    property MasterBusinessID: Integer read Get_MasterBusinessID write Set_MasterBusinessID;
    property SecurityCode: WideString read Get_SecurityCode write Set_SecurityCode;
    property TransmissionPhone: WideString read Get_TransmissionPhone write Set_TransmissionPhone;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGroupData provides a Create and CreateRemote method to          
// create instances of the default interface _GroupData exposed by              
// the CoClass GroupData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGroupData = class
    class function Create: _GroupData;
    class function CreateRemote(const MachineName: string): _GroupData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGroupData
// Help String      : 
// Default Interface: _GroupData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGroupDataProperties= class;
{$ENDIF}
  TGroupData = class(TOleServer)
  private
    FIntf:        _GroupData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGroupDataProperties;
    function      GetServerProperties: TGroupDataProperties;
{$ENDIF}
    function      GetDefaultInterface: _GroupData;
  protected
    procedure InitServerData; override;
    function Get_Flag(Index: Smallint): Byte;
    procedure Set_Flag(Index: Smallint; Param2: Byte);
    function Get_IDA(Index: Smallint): Smallint;
    procedure Set_IDA(Index: Smallint; Param2: Smallint);
    function Get_IDB(Index: Smallint): Smallint;
    procedure Set_IDB(Index: Smallint; Param2: Smallint);
    function Get_Index: Smallint;
    procedure Set_Index(Param1: Smallint);
    function Get_LongDescription: WideString;
    procedure Set_LongDescription(const Param1: WideString);
    function Get_ShortDescription: WideString;
    procedure Set_ShortDescription(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _GroupData);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(Index: Smallint): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _GroupData read GetDefaultInterface;
    property Flag[Index: Smallint]: Byte read Get_Flag write Set_Flag;
    property IDA[Index: Smallint]: Smallint read Get_IDA write Set_IDA;
    property IDB[Index: Smallint]: Smallint read Get_IDB write Set_IDB;
    property Index: Smallint read Get_Index write Set_Index;
    property LongDescription: WideString read Get_LongDescription write Set_LongDescription;
    property ShortDescription: WideString read Get_ShortDescription write Set_ShortDescription;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGroupDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGroupData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGroupDataProperties = class(TPersistent)
  private
    FServer:    TGroupData;
    function    GetDefaultInterface: _GroupData;
    constructor Create(AServer: TGroupData);
  protected
    function Get_Flag(Index: Smallint): Byte;
    procedure Set_Flag(Index: Smallint; Param2: Byte);
    function Get_IDA(Index: Smallint): Smallint;
    procedure Set_IDA(Index: Smallint; Param2: Smallint);
    function Get_IDB(Index: Smallint): Smallint;
    procedure Set_IDB(Index: Smallint; Param2: Smallint);
    function Get_Index: Smallint;
    procedure Set_Index(Param1: Smallint);
    function Get_LongDescription: WideString;
    procedure Set_LongDescription(const Param1: WideString);
    function Get_ShortDescription: WideString;
    procedure Set_ShortDescription(const Param1: WideString);
  public
    property DefaultInterface: _GroupData read GetDefaultInterface;
  published
    property Index: Smallint read Get_Index write Set_Index;
    property LongDescription: WideString read Get_LongDescription write Set_LongDescription;
    property ShortDescription: WideString read Get_ShortDescription write Set_ShortDescription;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoInventoryChain provides a Create and CreateRemote method to          
// create instances of the default interface _InventoryChain exposed by              
// the CoClass InventoryChain. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoInventoryChain = class
    class function Create: _InventoryChain;
    class function CreateRemote(const MachineName: string): _InventoryChain;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TInventoryChain
// Help String      : 
// Default Interface: _InventoryChain
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TInventoryChainProperties= class;
{$ENDIF}
  TInventoryChain = class(TOleServer)
  private
    FIntf:        _InventoryChain;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TInventoryChainProperties;
    function      GetServerProperties: TInventoryChainProperties;
{$ENDIF}
    function      GetDefaultInterface: _InventoryChain;
  protected
    procedure InitServerData; override;
    function Get_Index1: Integer;
    procedure Set_Index1(Param1: Integer);
    function Get_Index2: Smallint;
    procedure Set_Index2(Param1: Smallint);
    function Get_Index3: Integer;
    procedure Set_Index3(Param1: Integer);
    function Get_Index4: Smallint;
    procedure Set_Index4(Param1: Smallint);
    function Get_Value: Double;
    procedure Set_Value(Param1: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _InventoryChain);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _InventoryChain read GetDefaultInterface;
    property Index1: Integer read Get_Index1 write Set_Index1;
    property Index2: Smallint read Get_Index2 write Set_Index2;
    property Index3: Integer read Get_Index3 write Set_Index3;
    property Index4: Smallint read Get_Index4 write Set_Index4;
    property Value: Double read Get_Value write Set_Value;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TInventoryChainProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TInventoryChain
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TInventoryChainProperties = class(TPersistent)
  private
    FServer:    TInventoryChain;
    function    GetDefaultInterface: _InventoryChain;
    constructor Create(AServer: TInventoryChain);
  protected
    function Get_Index1: Integer;
    procedure Set_Index1(Param1: Integer);
    function Get_Index2: Smallint;
    procedure Set_Index2(Param1: Smallint);
    function Get_Index3: Integer;
    procedure Set_Index3(Param1: Integer);
    function Get_Index4: Smallint;
    procedure Set_Index4(Param1: Smallint);
    function Get_Value: Double;
    procedure Set_Value(Param1: Double);
  public
    property DefaultInterface: _InventoryChain read GetDefaultInterface;
  published
    property Index1: Integer read Get_Index1 write Set_Index1;
    property Index2: Smallint read Get_Index2 write Set_Index2;
    property Index3: Integer read Get_Index3 write Set_Index3;
    property Index4: Smallint read Get_Index4 write Set_Index4;
    property Value: Double read Get_Value write Set_Value;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoInventoryComponent provides a Create and CreateRemote method to          
// create instances of the default interface _InventoryComponent exposed by              
// the CoClass InventoryComponent. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoInventoryComponent = class
    class function Create: _InventoryComponent;
    class function CreateRemote(const MachineName: string): _InventoryComponent;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TInventoryComponent
// Help String      : 
// Default Interface: _InventoryComponent
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TInventoryComponentProperties= class;
{$ENDIF}
  TInventoryComponent = class(TOleServer)
  private
    FIntf:        _InventoryComponent;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TInventoryComponentProperties;
    function      GetServerProperties: TInventoryComponentProperties;
{$ENDIF}
    function      GetDefaultInterface: _InventoryComponent;
  protected
    procedure InitServerData; override;
    function Get_ComponentID: WideString;
    procedure Set_ComponentID(const Param1: WideString);
    function Get_ItemID: WideString;
    procedure Set_ItemID(const Param1: WideString);
    function Get_Quantity: Double;
    procedure Set_Quantity(Param1: Double);
    function Get_Unknown: Smallint;
    procedure Set_Unknown(Param1: Smallint);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _InventoryComponent);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _InventoryComponent read GetDefaultInterface;
    property ComponentID: WideString read Get_ComponentID write Set_ComponentID;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property Quantity: Double read Get_Quantity write Set_Quantity;
    property Unknown: Smallint read Get_Unknown write Set_Unknown;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TInventoryComponentProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TInventoryComponent
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TInventoryComponentProperties = class(TPersistent)
  private
    FServer:    TInventoryComponent;
    function    GetDefaultInterface: _InventoryComponent;
    constructor Create(AServer: TInventoryComponent);
  protected
    function Get_ComponentID: WideString;
    procedure Set_ComponentID(const Param1: WideString);
    function Get_ItemID: WideString;
    procedure Set_ItemID(const Param1: WideString);
    function Get_Quantity: Double;
    procedure Set_Quantity(Param1: Double);
    function Get_Unknown: Smallint;
    procedure Set_Unknown(Param1: Smallint);
  public
    property DefaultInterface: _InventoryComponent read GetDefaultInterface;
  published
    property ComponentID: WideString read Get_ComponentID write Set_ComponentID;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property Quantity: Double read Get_Quantity write Set_Quantity;
    property Unknown: Smallint read Get_Unknown write Set_Unknown;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoInventoryCost provides a Create and CreateRemote method to          
// create instances of the default interface _InventoryCost exposed by              
// the CoClass InventoryCost. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoInventoryCost = class
    class function Create: _InventoryCost;
    class function CreateRemote(const MachineName: string): _InventoryCost;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TInventoryCost
// Help String      : 
// Default Interface: _InventoryCost
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TInventoryCostProperties= class;
{$ENDIF}
  TInventoryCost = class(TOleServer)
  private
    FIntf:        _InventoryCost;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TInventoryCostProperties;
    function      GetServerProperties: TInventoryCostProperties;
{$ENDIF}
    function      GetDefaultInterface: _InventoryCost;
  protected
    procedure InitServerData; override;
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_Code: Byte;
    procedure Set_Code(Param1: Byte);
    function Get_Cost1: Double;
    procedure Set_Cost1(Param1: Double);
    function Get_Cost2: Double;
    procedure Set_Cost2(Param1: Double);
    function Get_EntryDate: OleVariant;
    procedure Set_EntryDate(Param1: OleVariant);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_InventoryAccountIndex: Integer;
    procedure Set_InventoryAccountIndex(Param1: Integer);
    function Get_Number: Integer;
    procedure Set_Number(Param1: Integer);
    function Get_Quantity1: Double;
    procedure Set_Quantity1(Param1: Double);
    function Get_Quantity2: Double;
    procedure Set_Quantity2(Param1: Double);
    function Get_QuantitySold: Double;
    procedure Set_QuantitySold(Param1: Double);
    function Get_RecordCode: Smallint;
    procedure Set_RecordCode(Param1: Smallint);
    function Get_RecordType: Smallint;
    procedure Set_RecordType(Param1: Smallint);
    function Get_SaleFlag: WordBool;
    procedure Set_SaleFlag(Param1: WordBool);
    function Get_SalesAccountIndex: Integer;
    procedure Set_SalesAccountIndex(Param1: Integer);
    function Get_Unused: Byte;
    procedure Set_Unused(Param1: Byte);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _InventoryCost);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function GetEqual(NRecord: Integer; Line: Smallint): Smallint;
    function GetFirst(Index: Integer): Smallint;
    function GetNext: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function Insert: Smallint;
    function QuantityOnHand(Index: Integer): Double;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _InventoryCost read GetDefaultInterface;
    property EntryDate: OleVariant read Get_EntryDate write Set_EntryDate;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property Code: Byte read Get_Code write Set_Code;
    property Cost1: Double read Get_Cost1 write Set_Cost1;
    property Cost2: Double read Get_Cost2 write Set_Cost2;
    property Index: Integer read Get_Index write Set_Index;
    property InventoryAccountIndex: Integer read Get_InventoryAccountIndex write Set_InventoryAccountIndex;
    property Number: Integer read Get_Number write Set_Number;
    property Quantity1: Double read Get_Quantity1 write Set_Quantity1;
    property Quantity2: Double read Get_Quantity2 write Set_Quantity2;
    property QuantitySold: Double read Get_QuantitySold write Set_QuantitySold;
    property RecordCode: Smallint read Get_RecordCode write Set_RecordCode;
    property RecordType: Smallint read Get_RecordType write Set_RecordType;
    property SaleFlag: WordBool read Get_SaleFlag write Set_SaleFlag;
    property SalesAccountIndex: Integer read Get_SalesAccountIndex write Set_SalesAccountIndex;
    property Unused: Byte read Get_Unused write Set_Unused;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TInventoryCostProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TInventoryCost
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TInventoryCostProperties = class(TPersistent)
  private
    FServer:    TInventoryCost;
    function    GetDefaultInterface: _InventoryCost;
    constructor Create(AServer: TInventoryCost);
  protected
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_Code: Byte;
    procedure Set_Code(Param1: Byte);
    function Get_Cost1: Double;
    procedure Set_Cost1(Param1: Double);
    function Get_Cost2: Double;
    procedure Set_Cost2(Param1: Double);
    function Get_EntryDate: OleVariant;
    procedure Set_EntryDate(Param1: OleVariant);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_InventoryAccountIndex: Integer;
    procedure Set_InventoryAccountIndex(Param1: Integer);
    function Get_Number: Integer;
    procedure Set_Number(Param1: Integer);
    function Get_Quantity1: Double;
    procedure Set_Quantity1(Param1: Double);
    function Get_Quantity2: Double;
    procedure Set_Quantity2(Param1: Double);
    function Get_QuantitySold: Double;
    procedure Set_QuantitySold(Param1: Double);
    function Get_RecordCode: Smallint;
    procedure Set_RecordCode(Param1: Smallint);
    function Get_RecordType: Smallint;
    procedure Set_RecordType(Param1: Smallint);
    function Get_SaleFlag: WordBool;
    procedure Set_SaleFlag(Param1: WordBool);
    function Get_SalesAccountIndex: Integer;
    procedure Set_SalesAccountIndex(Param1: Integer);
    function Get_Unused: Byte;
    procedure Set_Unused(Param1: Byte);
  public
    property DefaultInterface: _InventoryCost read GetDefaultInterface;
  published
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property Code: Byte read Get_Code write Set_Code;
    property Cost1: Double read Get_Cost1 write Set_Cost1;
    property Cost2: Double read Get_Cost2 write Set_Cost2;
    property Index: Integer read Get_Index write Set_Index;
    property InventoryAccountIndex: Integer read Get_InventoryAccountIndex write Set_InventoryAccountIndex;
    property Number: Integer read Get_Number write Set_Number;
    property Quantity1: Double read Get_Quantity1 write Set_Quantity1;
    property Quantity2: Double read Get_Quantity2 write Set_Quantity2;
    property QuantitySold: Double read Get_QuantitySold write Set_QuantitySold;
    property RecordCode: Smallint read Get_RecordCode write Set_RecordCode;
    property RecordType: Smallint read Get_RecordType write Set_RecordType;
    property SaleFlag: WordBool read Get_SaleFlag write Set_SaleFlag;
    property SalesAccountIndex: Integer read Get_SalesAccountIndex write Set_SalesAccountIndex;
    property Unused: Byte read Get_Unused write Set_Unused;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoENums provides a Create and CreateRemote method to          
// create instances of the default interface _ENums exposed by              
// the CoClass ENums. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoENums = class
    class function Create: _ENums;
    class function CreateRemote(const MachineName: string): _ENums;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TENums
// Help String      : 
// Default Interface: _ENums
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TENumsProperties= class;
{$ENDIF}
  TENums = class(TOleServer)
  private
    FIntf:        _ENums;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TENumsProperties;
    function      GetServerProperties: TENumsProperties;
{$ENDIF}
    function      GetDefaultInterface: _ENums;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _ENums);
    procedure Disconnect; override;
    property DefaultInterface: _ENums read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TENumsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TENums
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TENumsProperties = class(TPersistent)
  private
    FServer:    TENums;
    function    GetDefaultInterface: _ENums;
    constructor Create(AServer: TENums);
  protected
  public
    property DefaultInterface: _ENums read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoJobData provides a Create and CreateRemote method to          
// create instances of the default interface _JobData exposed by              
// the CoClass JobData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJobData = class
    class function Create: _JobData;
    class function CreateRemote(const MachineName: string): _JobData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TJobData
// Help String      : 
// Default Interface: _JobData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TJobDataProperties= class;
{$ENDIF}
  TJobData = class(TOleServer)
  private
    FIntf:        _JobData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TJobDataProperties;
    function      GetServerProperties: TJobDataProperties;
{$ENDIF}
    function      GetDefaultInterface: _JobData;
  protected
    procedure InitServerData; override;
    function Get_CustomerIndex: Integer;
    procedure Set_CustomerIndex(Param1: Integer);
    function Get_CustomField(Index: Smallint): WideString;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString);
    function Get_EndDate: OleVariant;
    procedure Set_EndDate(Param1: OleVariant);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_JobDescription: WideString;
    procedure Set_JobDescription(const Param1: WideString);
    function Get_JobID: WideString;
    procedure Set_JobID(const Param1: WideString);
    function Get_JobNote: WideString;
    procedure Set_JobNote(const Param1: WideString);
    function Get_JobType: WideString;
    procedure Set_JobType(const Param1: WideString);
    function Get_PercentComplete: Smallint;
    procedure Set_PercentComplete(Param1: Smallint);
    function Get_PONumber: WideString;
    procedure Set_PONumber(const Param1: WideString);
    function Get_StartDate: OleVariant;
    procedure Set_StartDate(Param1: OleVariant);
    function Get_Supervisor: WideString;
    procedure Set_Supervisor(const Param1: WideString);
    function Get_UsePhases: WordBool;
    procedure Set_UsePhases(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _JobData);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(const JobID: WideString): Smallint;
    function GetForIndex(Index: Integer): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _JobData read GetDefaultInterface;
    property CustomField[Index: Smallint]: WideString read Get_CustomField write Set_CustomField;
    property EndDate: OleVariant read Get_EndDate write Set_EndDate;
    property StartDate: OleVariant read Get_StartDate write Set_StartDate;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property JobDescription: WideString read Get_JobDescription write Set_JobDescription;
    property JobID: WideString read Get_JobID write Set_JobID;
    property JobNote: WideString read Get_JobNote write Set_JobNote;
    property JobType: WideString read Get_JobType write Set_JobType;
    property PercentComplete: Smallint read Get_PercentComplete write Set_PercentComplete;
    property PONumber: WideString read Get_PONumber write Set_PONumber;
    property Supervisor: WideString read Get_Supervisor write Set_Supervisor;
    property UsePhases: WordBool read Get_UsePhases write Set_UsePhases;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TJobDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TJobData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TJobDataProperties = class(TPersistent)
  private
    FServer:    TJobData;
    function    GetDefaultInterface: _JobData;
    constructor Create(AServer: TJobData);
  protected
    function Get_CustomerIndex: Integer;
    procedure Set_CustomerIndex(Param1: Integer);
    function Get_CustomField(Index: Smallint): WideString;
    procedure Set_CustomField(Index: Smallint; const Param2: WideString);
    function Get_EndDate: OleVariant;
    procedure Set_EndDate(Param1: OleVariant);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_JobDescription: WideString;
    procedure Set_JobDescription(const Param1: WideString);
    function Get_JobID: WideString;
    procedure Set_JobID(const Param1: WideString);
    function Get_JobNote: WideString;
    procedure Set_JobNote(const Param1: WideString);
    function Get_JobType: WideString;
    procedure Set_JobType(const Param1: WideString);
    function Get_PercentComplete: Smallint;
    procedure Set_PercentComplete(Param1: Smallint);
    function Get_PONumber: WideString;
    procedure Set_PONumber(const Param1: WideString);
    function Get_StartDate: OleVariant;
    procedure Set_StartDate(Param1: OleVariant);
    function Get_Supervisor: WideString;
    procedure Set_Supervisor(const Param1: WideString);
    function Get_UsePhases: WordBool;
    procedure Set_UsePhases(Param1: WordBool);
  public
    property DefaultInterface: _JobData read GetDefaultInterface;
  published
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property JobDescription: WideString read Get_JobDescription write Set_JobDescription;
    property JobID: WideString read Get_JobID write Set_JobID;
    property JobNote: WideString read Get_JobNote write Set_JobNote;
    property JobType: WideString read Get_JobType write Set_JobType;
    property PercentComplete: Smallint read Get_PercentComplete write Set_PercentComplete;
    property PONumber: WideString read Get_PONumber write Set_PONumber;
    property Supervisor: WideString read Get_Supervisor write Set_Supervisor;
    property UsePhases: WordBool read Get_UsePhases write Set_UsePhases;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoJobEstimate provides a Create and CreateRemote method to          
// create instances of the default interface _JobEstimate exposed by              
// the CoClass JobEstimate. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJobEstimate = class
    class function Create: _JobEstimate;
    class function CreateRemote(const MachineName: string): _JobEstimate;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TJobEstimate
// Help String      : 
// Default Interface: _JobEstimate
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TJobEstimateProperties= class;
{$ENDIF}
  TJobEstimate = class(TOleServer)
  private
    FIntf:        _JobEstimate;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TJobEstimateProperties;
    function      GetServerProperties: TJobEstimateProperties;
{$ENDIF}
    function      GetDefaultInterface: _JobEstimate;
  protected
    procedure InitServerData; override;
    function Get_CostIndex: Integer;
    procedure Set_CostIndex(Param1: Integer);
    function Get_Expenses: Double;
    procedure Set_Expenses(Param1: Double);
    function Get_JobIndex: Integer;
    procedure Set_JobIndex(Param1: Integer);
    function Get_NumberOfUnits: Double;
    procedure Set_NumberOfUnits(Param1: Double);
    function Get_PhaseIndex: Integer;
    procedure Set_PhaseIndex(Param1: Integer);
    function Get_Revenues: Double;
    procedure Set_Revenues(Param1: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _JobEstimate);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(JobIndex: Integer; PhaseIndex: Integer; CostIndex: Integer): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _JobEstimate read GetDefaultInterface;
    property CostIndex: Integer read Get_CostIndex write Set_CostIndex;
    property Expenses: Double read Get_Expenses write Set_Expenses;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property NumberOfUnits: Double read Get_NumberOfUnits write Set_NumberOfUnits;
    property PhaseIndex: Integer read Get_PhaseIndex write Set_PhaseIndex;
    property Revenues: Double read Get_Revenues write Set_Revenues;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TJobEstimateProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TJobEstimate
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TJobEstimateProperties = class(TPersistent)
  private
    FServer:    TJobEstimate;
    function    GetDefaultInterface: _JobEstimate;
    constructor Create(AServer: TJobEstimate);
  protected
    function Get_CostIndex: Integer;
    procedure Set_CostIndex(Param1: Integer);
    function Get_Expenses: Double;
    procedure Set_Expenses(Param1: Double);
    function Get_JobIndex: Integer;
    procedure Set_JobIndex(Param1: Integer);
    function Get_NumberOfUnits: Double;
    procedure Set_NumberOfUnits(Param1: Double);
    function Get_PhaseIndex: Integer;
    procedure Set_PhaseIndex(Param1: Integer);
    function Get_Revenues: Double;
    procedure Set_Revenues(Param1: Double);
  public
    property DefaultInterface: _JobEstimate read GetDefaultInterface;
  published
    property CostIndex: Integer read Get_CostIndex write Set_CostIndex;
    property Expenses: Double read Get_Expenses write Set_Expenses;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property NumberOfUnits: Double read Get_NumberOfUnits write Set_NumberOfUnits;
    property PhaseIndex: Integer read Get_PhaseIndex write Set_PhaseIndex;
    property Revenues: Double read Get_Revenues write Set_Revenues;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoJobTag provides a Create and CreateRemote method to          
// create instances of the default interface _JobTag exposed by              
// the CoClass JobTag. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJobTag = class
    class function Create: _JobTag;
    class function CreateRemote(const MachineName: string): _JobTag;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TJobTag
// Help String      : 
// Default Interface: _JobTag
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TJobTagProperties= class;
{$ENDIF}
  TJobTag = class(TOleServer)
  private
    FIntf:        _JobTag;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TJobTagProperties;
    function      GetServerProperties: TJobTagProperties;
{$ENDIF}
    function      GetDefaultInterface: _JobTag;
  protected
    procedure InitServerData; override;
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_ComponentIndex: Integer;
    procedure Set_ComponentIndex(Param1: Integer);
    function Get_CostIndex: Integer;
    procedure Set_CostIndex(Param1: Integer);
    function Get_EntryDate: OleVariant;
    procedure Set_EntryDate(Param1: OleVariant);
    function Get_GLAccountID: WideString;
    procedure Set_GLAccountID(const Param1: WideString);
    function Get_JobIndex: Integer;
    procedure Set_JobIndex(Param1: Integer);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_PhaseIndex: Integer;
    procedure Set_PhaseIndex(Param1: Integer);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_StockItem: WordBool;
    procedure Set_StockItem(Param1: WordBool);
    function Get_LineNumber: Smallint;
    procedure Set_LineNumber(Param1: Smallint);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _JobTag);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetFirst(JobIndex: Integer; PhaseIndex: Integer; CostIndex: Integer; 
                      JobDate: OleVariant): Smallint;
    function GetNext: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _JobTag read GetDefaultInterface;
    property EntryDate: OleVariant read Get_EntryDate write Set_EntryDate;
    property Amount: Double read Get_Amount write Set_Amount;
    property ComponentIndex: Integer read Get_ComponentIndex write Set_ComponentIndex;
    property CostIndex: Integer read Get_CostIndex write Set_CostIndex;
    property GLAccountID: WideString read Get_GLAccountID write Set_GLAccountID;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property Period: Smallint read Get_Period write Set_Period;
    property PhaseIndex: Integer read Get_PhaseIndex write Set_PhaseIndex;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property StockItem: WordBool read Get_StockItem write Set_StockItem;
    property LineNumber: Smallint read Get_LineNumber write Set_LineNumber;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TJobTagProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TJobTag
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TJobTagProperties = class(TPersistent)
  private
    FServer:    TJobTag;
    function    GetDefaultInterface: _JobTag;
    constructor Create(AServer: TJobTag);
  protected
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_ComponentIndex: Integer;
    procedure Set_ComponentIndex(Param1: Integer);
    function Get_CostIndex: Integer;
    procedure Set_CostIndex(Param1: Integer);
    function Get_EntryDate: OleVariant;
    procedure Set_EntryDate(Param1: OleVariant);
    function Get_GLAccountID: WideString;
    procedure Set_GLAccountID(const Param1: WideString);
    function Get_JobIndex: Integer;
    procedure Set_JobIndex(Param1: Integer);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_PhaseIndex: Integer;
    procedure Set_PhaseIndex(Param1: Integer);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_StockItem: WordBool;
    procedure Set_StockItem(Param1: WordBool);
    function Get_LineNumber: Smallint;
    procedure Set_LineNumber(Param1: Smallint);
  public
    property DefaultInterface: _JobTag read GetDefaultInterface;
  published
    property Amount: Double read Get_Amount write Set_Amount;
    property ComponentIndex: Integer read Get_ComponentIndex write Set_ComponentIndex;
    property CostIndex: Integer read Get_CostIndex write Set_CostIndex;
    property GLAccountID: WideString read Get_GLAccountID write Set_GLAccountID;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property Period: Smallint read Get_Period write Set_Period;
    property PhaseIndex: Integer read Get_PhaseIndex write Set_PhaseIndex;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property StockItem: WordBool read Get_StockItem write Set_StockItem;
    property LineNumber: Smallint read Get_LineNumber write Set_LineNumber;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCashDisbursementJournal provides a Create and CreateRemote method to          
// create instances of the default interface _CashDisbursementJournal exposed by              
// the CoClass CashDisbursementJournal. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCashDisbursementJournal = class
    class function Create: _CashDisbursementJournal;
    class function CreateRemote(const MachineName: string): _CashDisbursementJournal;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCashDisbursementJournal
// Help String      : 
// Default Interface: _CashDisbursementJournal
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCashDisbursementJournalProperties= class;
{$ENDIF}
  TCashDisbursementJournal = class(TOleServer)
  private
    FIntf:        _CashDisbursementJournal;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCashDisbursementJournalProperties;
    function      GetServerProperties: TCashDisbursementJournalProperties;
{$ENDIF}
    function      GetDefaultInterface: _CashDisbursementJournal;
  protected
    procedure InitServerData; override;
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_CashAccount: WideString;
    procedure Set_CashAccount(const Param1: WideString);
    function Get_CashAmount: Double;
    procedure Set_CashAmount(Param1: Double);
    function Get_CheckAddr1: WideString;
    procedure Set_CheckAddr1(const Param1: WideString);
    function Get_CheckAddr2: WideString;
    procedure Set_CheckAddr2(const Param1: WideString);
    function Get_CheckCity: WideString;
    procedure Set_CheckCity(const Param1: WideString);
    function Get_CheckCountry: WideString;
    procedure Set_CheckCountry(const Param1: WideString);
    function Get_CheckName: WideString;
    procedure Set_CheckName(const Param1: WideString);
    function Get_CheckNumber: WideString;
    procedure Set_CheckNumber(const Param1: WideString);
    function Get_CheckState: WideString;
    procedure Set_CheckState(const Param1: WideString);
    function Get_CheckZipcode: WideString;
    procedure Set_CheckZipcode(const Param1: WideString);
    function Get_CustomerIndex: Integer;
    procedure Set_CustomerIndex(Param1: Integer);
    function Get_CustomerPayment: WordBool;
    procedure Set_CustomerPayment(Param1: WordBool);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
    procedure Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
    function Get_DetailCustomerIndex(Index: Smallint): Integer;
    procedure Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDateCleared(Index: Smallint): OleVariant;
    procedure Set_DetailDateCleared(Index: Smallint; Param2: OleVariant);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailDiscountAmount(Index: Smallint): Double;
    procedure Set_DetailDiscountAmount(Index: Smallint; Param2: Double);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailFlag2(Index: Smallint): WordBool;
    procedure Set_DetailFlag2(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailInventoryAccount(Index: Smallint): WideString;
    procedure Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailInventoryAmount(Index: Smallint): Double;
    procedure Set_DetailInventoryAmount(Index: Smallint; Param2: Double);
    function Get_DetailInvoiceNRecord(Index: Smallint): Integer;
    procedure Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
    function Get_DetailInvoicePaid(Index: Smallint): WideString;
    procedure Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTaxType(Index: Smallint): Smallint;
    procedure Set_DetailTaxType(Index: Smallint; Param2: Smallint);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnknownBoolean(Index: Smallint): WordBool;
    procedure Set_DetailUnknownBoolean(Index: Smallint; Param2: WordBool);
    function Get_DetailUnused1(Index: Smallint): Byte;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Byte);
    function Get_DetailVendorIndex(Index: Smallint): Integer;
    procedure Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
    function Get_DiscountAccount: WideString;
    procedure Set_DiscountAccount(const Param1: WideString);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_JrnlTypeEx: Integer;
    procedure Set_JrnlTypeEx(Param1: Integer);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_Memo: WideString;
    procedure Set_Memo(const Param1: WideString);
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_PaymentMethod: WideString;
    procedure Set_PaymentMethod(const Param1: WideString);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_Prepayment: WordBool;
    procedure Set_Prepayment(Param1: WordBool);
    function Get_PrintCheck: WordBool;
    procedure Set_PrintCheck(Param1: WordBool);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_RecurrenceIndex: Integer;
    procedure Set_RecurrenceIndex(Param1: Integer);
    function Get_RecurrenceRate: Smallint;
    procedure Set_RecurrenceRate(Param1: Smallint);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TotalPaidOnInvoice: Double;
    procedure Set_TotalPaidOnInvoice(Param1: Double);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unknown2: Smallint;
    procedure Set_Unknown2(Param1: Smallint);
    function Get_Unused3: Smallint;
    procedure Set_Unused3(Param1: Smallint);
    function Get_Unknown4: Smallint;
    procedure Set_Unknown4(Param1: Smallint);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused7(Index: Smallint): Byte;
    procedure Set_Unused7(Index: Smallint; Param2: Byte);
    function Get_Unused8: Byte;
    procedure Set_Unused8(Param1: Byte);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
    function Get_VendorName: WideString;
    procedure Set_VendorName(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _CashDisbursementJournal);
    procedure Disconnect; override;
    function ClearRecord: Smallint;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetEqual(NRecord: Integer): Smallint;
    function IncrementBatchCount: Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function ReadFirst(Period: Smallint): Smallint;
    function ReadFirstForVendor(Index: Integer): Smallint;
    function ReadNext: Smallint;
    function ReadNextByVendor: Smallint;
    function Update: Smallint;
    property DefaultInterface: _CashDisbursementJournal read GetDefaultInterface;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCostOfSalesAccount[Index: Smallint]: WideString read Get_DetailCostOfSalesAccount write Set_DetailCostOfSalesAccount;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool read Get_DetailCostOfSalesTrx write Set_DetailCostOfSalesTrx;
    property DetailCustomerIndex[Index: Smallint]: Integer read Get_DetailCustomerIndex write Set_DetailCustomerIndex;
    property DetailDateCleared[Index: Smallint]: OleVariant read Get_DetailDateCleared write Set_DetailDateCleared;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailDiscountAmount[Index: Smallint]: Double read Get_DetailDiscountAmount write Set_DetailDiscountAmount;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailFlag2[Index: Smallint]: WordBool read Get_DetailFlag2 write Set_DetailFlag2;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailInventoryAccount[Index: Smallint]: WideString read Get_DetailInventoryAccount write Set_DetailInventoryAccount;
    property DetailInventoryAmount[Index: Smallint]: Double read Get_DetailInventoryAmount write Set_DetailInventoryAmount;
    property DetailInvoiceNRecord[Index: Smallint]: Integer read Get_DetailInvoiceNRecord write Set_DetailInvoiceNRecord;
    property DetailInvoicePaid[Index: Smallint]: WideString read Get_DetailInvoicePaid write Set_DetailInvoicePaid;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTaxType[Index: Smallint]: Smallint read Get_DetailTaxType write Set_DetailTaxType;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnknownBoolean[Index: Smallint]: WordBool read Get_DetailUnknownBoolean write Set_DetailUnknownBoolean;
    property DetailUnused1[Index: Smallint]: Byte read Get_DetailUnused1 write Set_DetailUnused1;
    property DetailVendorIndex[Index: Smallint]: Integer read Get_DetailVendorIndex write Set_DetailVendorIndex;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property Unused7[Index: Smallint]: Byte read Get_Unused7 write Set_Unused7;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property CashAmount: Double read Get_CashAmount write Set_CashAmount;
    property CheckAddr1: WideString read Get_CheckAddr1 write Set_CheckAddr1;
    property CheckAddr2: WideString read Get_CheckAddr2 write Set_CheckAddr2;
    property CheckCity: WideString read Get_CheckCity write Set_CheckCity;
    property CheckCountry: WideString read Get_CheckCountry write Set_CheckCountry;
    property CheckName: WideString read Get_CheckName write Set_CheckName;
    property CheckNumber: WideString read Get_CheckNumber write Set_CheckNumber;
    property CheckState: WideString read Get_CheckState write Set_CheckState;
    property CheckZipcode: WideString read Get_CheckZipcode write Set_CheckZipcode;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property CustomerPayment: WordBool read Get_CustomerPayment write Set_CustomerPayment;
    property DiscountAccount: WideString read Get_DiscountAccount write Set_DiscountAccount;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property JrnlTypeEx: Integer read Get_JrnlTypeEx write Set_JrnlTypeEx;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property Memo: WideString read Get_Memo write Set_Memo;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property PaymentMethod: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property PrintCheck: WordBool read Get_PrintCheck write Set_PrintCheck;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TotalPaidOnInvoice: Double read Get_TotalPaidOnInvoice write Set_TotalPaidOnInvoice;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
    property Unknown4: Smallint read Get_Unknown4 write Set_Unknown4;
    property Unused8: Byte read Get_Unused8 write Set_Unused8;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property VendorName: WideString read Get_VendorName write Set_VendorName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCashDisbursementJournalProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCashDisbursementJournal
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCashDisbursementJournalProperties = class(TPersistent)
  private
    FServer:    TCashDisbursementJournal;
    function    GetDefaultInterface: _CashDisbursementJournal;
    constructor Create(AServer: TCashDisbursementJournal);
  protected
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_CashAccount: WideString;
    procedure Set_CashAccount(const Param1: WideString);
    function Get_CashAmount: Double;
    procedure Set_CashAmount(Param1: Double);
    function Get_CheckAddr1: WideString;
    procedure Set_CheckAddr1(const Param1: WideString);
    function Get_CheckAddr2: WideString;
    procedure Set_CheckAddr2(const Param1: WideString);
    function Get_CheckCity: WideString;
    procedure Set_CheckCity(const Param1: WideString);
    function Get_CheckCountry: WideString;
    procedure Set_CheckCountry(const Param1: WideString);
    function Get_CheckName: WideString;
    procedure Set_CheckName(const Param1: WideString);
    function Get_CheckNumber: WideString;
    procedure Set_CheckNumber(const Param1: WideString);
    function Get_CheckState: WideString;
    procedure Set_CheckState(const Param1: WideString);
    function Get_CheckZipcode: WideString;
    procedure Set_CheckZipcode(const Param1: WideString);
    function Get_CustomerIndex: Integer;
    procedure Set_CustomerIndex(Param1: Integer);
    function Get_CustomerPayment: WordBool;
    procedure Set_CustomerPayment(Param1: WordBool);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
    procedure Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
    function Get_DetailCustomerIndex(Index: Smallint): Integer;
    procedure Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDateCleared(Index: Smallint): OleVariant;
    procedure Set_DetailDateCleared(Index: Smallint; Param2: OleVariant);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailDiscountAmount(Index: Smallint): Double;
    procedure Set_DetailDiscountAmount(Index: Smallint; Param2: Double);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailFlag2(Index: Smallint): WordBool;
    procedure Set_DetailFlag2(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailInventoryAccount(Index: Smallint): WideString;
    procedure Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailInventoryAmount(Index: Smallint): Double;
    procedure Set_DetailInventoryAmount(Index: Smallint; Param2: Double);
    function Get_DetailInvoiceNRecord(Index: Smallint): Integer;
    procedure Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
    function Get_DetailInvoicePaid(Index: Smallint): WideString;
    procedure Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTaxType(Index: Smallint): Smallint;
    procedure Set_DetailTaxType(Index: Smallint; Param2: Smallint);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnknownBoolean(Index: Smallint): WordBool;
    procedure Set_DetailUnknownBoolean(Index: Smallint; Param2: WordBool);
    function Get_DetailUnused1(Index: Smallint): Byte;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Byte);
    function Get_DetailVendorIndex(Index: Smallint): Integer;
    procedure Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
    function Get_DiscountAccount: WideString;
    procedure Set_DiscountAccount(const Param1: WideString);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_JrnlTypeEx: Integer;
    procedure Set_JrnlTypeEx(Param1: Integer);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_Memo: WideString;
    procedure Set_Memo(const Param1: WideString);
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_PaymentMethod: WideString;
    procedure Set_PaymentMethod(const Param1: WideString);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_Prepayment: WordBool;
    procedure Set_Prepayment(Param1: WordBool);
    function Get_PrintCheck: WordBool;
    procedure Set_PrintCheck(Param1: WordBool);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_RecurrenceIndex: Integer;
    procedure Set_RecurrenceIndex(Param1: Integer);
    function Get_RecurrenceRate: Smallint;
    procedure Set_RecurrenceRate(Param1: Smallint);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TotalPaidOnInvoice: Double;
    procedure Set_TotalPaidOnInvoice(Param1: Double);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unknown2: Smallint;
    procedure Set_Unknown2(Param1: Smallint);
    function Get_Unused3: Smallint;
    procedure Set_Unused3(Param1: Smallint);
    function Get_Unknown4: Smallint;
    procedure Set_Unknown4(Param1: Smallint);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused7(Index: Smallint): Byte;
    procedure Set_Unused7(Index: Smallint; Param2: Byte);
    function Get_Unused8: Byte;
    procedure Set_Unused8(Param1: Byte);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
    function Get_VendorName: WideString;
    procedure Set_VendorName(const Param1: WideString);
  public
    property DefaultInterface: _CashDisbursementJournal read GetDefaultInterface;
  published
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property CashAmount: Double read Get_CashAmount write Set_CashAmount;
    property CheckAddr1: WideString read Get_CheckAddr1 write Set_CheckAddr1;
    property CheckAddr2: WideString read Get_CheckAddr2 write Set_CheckAddr2;
    property CheckCity: WideString read Get_CheckCity write Set_CheckCity;
    property CheckCountry: WideString read Get_CheckCountry write Set_CheckCountry;
    property CheckName: WideString read Get_CheckName write Set_CheckName;
    property CheckNumber: WideString read Get_CheckNumber write Set_CheckNumber;
    property CheckState: WideString read Get_CheckState write Set_CheckState;
    property CheckZipcode: WideString read Get_CheckZipcode write Set_CheckZipcode;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property CustomerPayment: WordBool read Get_CustomerPayment write Set_CustomerPayment;
    property DiscountAccount: WideString read Get_DiscountAccount write Set_DiscountAccount;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property JrnlTypeEx: Integer read Get_JrnlTypeEx write Set_JrnlTypeEx;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property Memo: WideString read Get_Memo write Set_Memo;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property PaymentMethod: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property PrintCheck: WordBool read Get_PrintCheck write Set_PrintCheck;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TotalPaidOnInvoice: Double read Get_TotalPaidOnInvoice write Set_TotalPaidOnInvoice;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
    property Unknown4: Smallint read Get_Unknown4 write Set_Unknown4;
    property Unused8: Byte read Get_Unused8 write Set_Unused8;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property VendorName: WideString read Get_VendorName write Set_VendorName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCashReceiptJournal provides a Create and CreateRemote method to          
// create instances of the default interface _CashReceiptJournal exposed by              
// the CoClass CashReceiptJournal. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCashReceiptJournal = class
    class function Create: _CashReceiptJournal;
    class function CreateRemote(const MachineName: string): _CashReceiptJournal;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCashReceiptJournal
// Help String      : 
// Default Interface: _CashReceiptJournal
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCashReceiptJournalProperties= class;
{$ENDIF}
  TCashReceiptJournal = class(TOleServer)
  private
    FIntf:        _CashReceiptJournal;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCashReceiptJournalProperties;
    function      GetServerProperties: TCashReceiptJournalProperties;
{$ENDIF}
    function      GetDefaultInterface: _CashReceiptJournal;
  protected
    procedure InitServerData; override;
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_CashAccount: WideString;
    procedure Set_CashAccount(const Param1: WideString);
    function Get_CashAmount: Double;
    procedure Set_CashAmount(Param1: Double);
    function Get_CCAddress1: WideString;
    procedure Set_CCAddress1(const Param1: WideString);
    function Get_CCAddress2: WideString;
    procedure Set_CCAddress2(const Param1: WideString);
    function Get_CCAuthorization: WideString;
    procedure Set_CCAuthorization(const Param1: WideString);
    function Get_CCCity: WideString;
    procedure Set_CCCity(const Param1: WideString);
    function Get_CCComment: WideString;
    procedure Set_CCComment(const Param1: WideString);
    function Get_CCCountry: WideString;
    procedure Set_CCCountry(const Param1: WideString);
    function Get_CCEncryptedCard: WideString;
    procedure Set_CCEncryptedCard(const Param1: WideString);
    function Get_CCExpirationDate: OleVariant;
    procedure Set_CCExpirationDate(Param1: OleVariant);
    function Get_CCFlag: Byte;
    procedure Set_CCFlag(Param1: Byte);
    function Get_CCName: WideString;
    procedure Set_CCName(const Param1: WideString);
    function Get_CCNumber: WideString;
    procedure Set_CCNumber(const Param1: WideString);
    function Get_CCState: WideString;
    procedure Set_CCState(const Param1: WideString);
    function Get_CCUnknown(Index: Smallint): Byte;
    procedure Set_CCUnknown(Index: Smallint; Param2: Byte);
    function Get_CCZipcode: WideString;
    procedure Set_CCZipcode(const Param1: WideString);
    function Get_CheckAddr1: WideString;
    procedure Set_CheckAddr1(const Param1: WideString);
    function Get_CheckAddr2: WideString;
    procedure Set_CheckAddr2(const Param1: WideString);
    function Get_CheckCity: WideString;
    procedure Set_CheckCity(const Param1: WideString);
    function Get_CheckCountry: WideString;
    procedure Set_CheckCountry(const Param1: WideString);
    function Get_CheckName: WideString;
    procedure Set_CheckName(const Param1: WideString);
    function Get_CheckState: WideString;
    procedure Set_CheckState(const Param1: WideString);
    function Get_CheckZipcode: WideString;
    procedure Set_CheckZipcode(const Param1: WideString);
    function Get_CustomerIndex: Integer;
    procedure Set_CustomerIndex(Param1: Integer);
    function Get_CustomerName: WideString;
    procedure Set_CustomerName(const Param1: WideString);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DepositDate: OleVariant;
    procedure Set_DepositDate(Param1: OleVariant);
    function Get_DepositTicketID: WideString;
    procedure Set_DepositTicketID(const Param1: WideString);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
    procedure Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailCostOfSalesAmount(Index: Smallint): Double;
    procedure Set_DetailCostOfSalesAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
    function Get_DetailCustomerIndex(Index: Smallint): Integer;
    procedure Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDateCleared(Index: Smallint): OleVariant;
    procedure Set_DetailDateCleared(Index: Smallint; Param2: OleVariant);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailDiscountAmount(Index: Smallint): Double;
    procedure Set_DetailDiscountAmount(Index: Smallint; Param2: Double);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailInventoryAccount(Index: Smallint): WideString;
    procedure Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailInvoiceNRecord(Index: Smallint): Integer;
    procedure Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
    function Get_DetailInvoicePaid(Index: Smallint): WideString;
    procedure Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailSalesTaxAuthority(Index: Smallint): WideString;
    procedure Set_DetailSalesTaxAuthority(Index: Smallint; const Param2: WideString);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTaxType(Index: Smallint): Smallint;
    procedure Set_DetailTaxType(Index: Smallint; Param2: Smallint);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnused1(Index: Smallint): Byte;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Byte);
    function Get_DetailVendorIndex(Index: Smallint): Integer;
    procedure Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
    function Get_DiscountAccount: WideString;
    procedure Set_DiscountAccount(const Param1: WideString);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_InvoicesPaid: Double;
    procedure Set_InvoicesPaid(Param1: Double);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_PaymentMethod: WideString;
    procedure Set_PaymentMethod(const Param1: WideString);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_Prepayment: WordBool;
    procedure Set_Prepayment(Param1: WordBool);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_ReceiptNum: WideString;
    procedure Set_ReceiptNum(const Param1: WideString);
    function Get_RecurrenceIndex: Integer;
    procedure Set_RecurrenceIndex(Param1: Integer);
    function Get_RecurrenceRate: Smallint;
    procedure Set_RecurrenceRate(Param1: Smallint);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_SalesRepID: WideString;
    procedure Set_SalesRepID(const Param1: WideString);
    function Get_SalesTaxCode: WideString;
    procedure Set_SalesTaxCode(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Byte;
    procedure Set_Unused1(Param1: Byte);
    function Get_Unknown2: Smallint;
    procedure Set_Unknown2(Param1: Smallint);
    function Get_Unused3: Smallint;
    procedure Set_Unused3(Param1: Smallint);
    function Get_Unknown4: Smallint;
    procedure Set_Unknown4(Param1: Smallint);
    function Get_Unused5: Byte;
    procedure Set_Unused5(Param1: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused7(Index: Smallint): Byte;
    procedure Set_Unused7(Index: Smallint; Param2: Byte);
    function Get_Unused8: Byte;
    procedure Set_Unused8(Param1: Byte);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
    function Get_VendorReceipt: WordBool;
    procedure Set_VendorReceipt(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _CashReceiptJournal);
    procedure Disconnect; override;
    function ClearRecord: Smallint;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetEqual(NRecord: Integer): Smallint;
    function GetForKey(Subindex1: Byte; TrxNumber: Smallint; Period: Smallint; JournalID: Smallint; 
                       Subindex2: Smallint): OleVariant;
    function GetForKeyL(Subindex1: Byte; TrxNumber: Integer; Period: Smallint; JournalID: Smallint; 
                        Subindex2: Smallint): OleVariant;
    function IncrementBatchCount: Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function ReadFirst(Period: Smallint): Smallint;
    function ReadFirstForCustomer(Index: Integer): Smallint;
    function ReadNext: Smallint;
    function ReadNextByCustomer: Smallint;
    function Update: Smallint;
    property DefaultInterface: _CashReceiptJournal read GetDefaultInterface;
    property CCExpirationDate: OleVariant read Get_CCExpirationDate write Set_CCExpirationDate;
    property CCUnknown[Index: Smallint]: Byte read Get_CCUnknown write Set_CCUnknown;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DepositDate: OleVariant read Get_DepositDate write Set_DepositDate;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCostOfSalesAccount[Index: Smallint]: WideString read Get_DetailCostOfSalesAccount write Set_DetailCostOfSalesAccount;
    property DetailCostOfSalesAmount[Index: Smallint]: Double read Get_DetailCostOfSalesAmount write Set_DetailCostOfSalesAmount;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool read Get_DetailCostOfSalesTrx write Set_DetailCostOfSalesTrx;
    property DetailCustomerIndex[Index: Smallint]: Integer read Get_DetailCustomerIndex write Set_DetailCustomerIndex;
    property DetailDateCleared[Index: Smallint]: OleVariant read Get_DetailDateCleared write Set_DetailDateCleared;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailDiscountAmount[Index: Smallint]: Double read Get_DetailDiscountAmount write Set_DetailDiscountAmount;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailInventoryAccount[Index: Smallint]: WideString read Get_DetailInventoryAccount write Set_DetailInventoryAccount;
    property DetailInvoiceNRecord[Index: Smallint]: Integer read Get_DetailInvoiceNRecord write Set_DetailInvoiceNRecord;
    property DetailInvoicePaid[Index: Smallint]: WideString read Get_DetailInvoicePaid write Set_DetailInvoicePaid;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailSalesTaxAuthority[Index: Smallint]: WideString read Get_DetailSalesTaxAuthority write Set_DetailSalesTaxAuthority;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTaxType[Index: Smallint]: Smallint read Get_DetailTaxType write Set_DetailTaxType;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnused1[Index: Smallint]: Byte read Get_DetailUnused1 write Set_DetailUnused1;
    property DetailVendorIndex[Index: Smallint]: Integer read Get_DetailVendorIndex write Set_DetailVendorIndex;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property Unused7[Index: Smallint]: Byte read Get_Unused7 write Set_Unused7;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property CashAmount: Double read Get_CashAmount write Set_CashAmount;
    property CCAddress1: WideString read Get_CCAddress1 write Set_CCAddress1;
    property CCAddress2: WideString read Get_CCAddress2 write Set_CCAddress2;
    property CCAuthorization: WideString read Get_CCAuthorization write Set_CCAuthorization;
    property CCCity: WideString read Get_CCCity write Set_CCCity;
    property CCComment: WideString read Get_CCComment write Set_CCComment;
    property CCCountry: WideString read Get_CCCountry write Set_CCCountry;
    property CCEncryptedCard: WideString read Get_CCEncryptedCard write Set_CCEncryptedCard;
    property CCFlag: Byte read Get_CCFlag write Set_CCFlag;
    property CCName: WideString read Get_CCName write Set_CCName;
    property CCNumber: WideString read Get_CCNumber write Set_CCNumber;
    property CCState: WideString read Get_CCState write Set_CCState;
    property CCZipcode: WideString read Get_CCZipcode write Set_CCZipcode;
    property CheckAddr1: WideString read Get_CheckAddr1 write Set_CheckAddr1;
    property CheckAddr2: WideString read Get_CheckAddr2 write Set_CheckAddr2;
    property CheckCity: WideString read Get_CheckCity write Set_CheckCity;
    property CheckCountry: WideString read Get_CheckCountry write Set_CheckCountry;
    property CheckName: WideString read Get_CheckName write Set_CheckName;
    property CheckState: WideString read Get_CheckState write Set_CheckState;
    property CheckZipcode: WideString read Get_CheckZipcode write Set_CheckZipcode;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property DepositTicketID: WideString read Get_DepositTicketID write Set_DepositTicketID;
    property DiscountAccount: WideString read Get_DiscountAccount write Set_DiscountAccount;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InvoicesPaid: Double read Get_InvoicesPaid write Set_InvoicesPaid;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property PaymentMethod: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property ReceiptNum: WideString read Get_ReceiptNum write Set_ReceiptNum;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property Reference: WideString read Get_Reference write Set_Reference;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
    property Unknown4: Smallint read Get_Unknown4 write Set_Unknown4;
    property Unused5: Byte read Get_Unused5 write Set_Unused5;
    property Unused8: Byte read Get_Unused8 write Set_Unused8;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property VendorReceipt: WordBool read Get_VendorReceipt write Set_VendorReceipt;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCashReceiptJournalProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCashReceiptJournal
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCashReceiptJournalProperties = class(TPersistent)
  private
    FServer:    TCashReceiptJournal;
    function    GetDefaultInterface: _CashReceiptJournal;
    constructor Create(AServer: TCashReceiptJournal);
  protected
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_CashAccount: WideString;
    procedure Set_CashAccount(const Param1: WideString);
    function Get_CashAmount: Double;
    procedure Set_CashAmount(Param1: Double);
    function Get_CCAddress1: WideString;
    procedure Set_CCAddress1(const Param1: WideString);
    function Get_CCAddress2: WideString;
    procedure Set_CCAddress2(const Param1: WideString);
    function Get_CCAuthorization: WideString;
    procedure Set_CCAuthorization(const Param1: WideString);
    function Get_CCCity: WideString;
    procedure Set_CCCity(const Param1: WideString);
    function Get_CCComment: WideString;
    procedure Set_CCComment(const Param1: WideString);
    function Get_CCCountry: WideString;
    procedure Set_CCCountry(const Param1: WideString);
    function Get_CCEncryptedCard: WideString;
    procedure Set_CCEncryptedCard(const Param1: WideString);
    function Get_CCExpirationDate: OleVariant;
    procedure Set_CCExpirationDate(Param1: OleVariant);
    function Get_CCFlag: Byte;
    procedure Set_CCFlag(Param1: Byte);
    function Get_CCName: WideString;
    procedure Set_CCName(const Param1: WideString);
    function Get_CCNumber: WideString;
    procedure Set_CCNumber(const Param1: WideString);
    function Get_CCState: WideString;
    procedure Set_CCState(const Param1: WideString);
    function Get_CCUnknown(Index: Smallint): Byte;
    procedure Set_CCUnknown(Index: Smallint; Param2: Byte);
    function Get_CCZipcode: WideString;
    procedure Set_CCZipcode(const Param1: WideString);
    function Get_CheckAddr1: WideString;
    procedure Set_CheckAddr1(const Param1: WideString);
    function Get_CheckAddr2: WideString;
    procedure Set_CheckAddr2(const Param1: WideString);
    function Get_CheckCity: WideString;
    procedure Set_CheckCity(const Param1: WideString);
    function Get_CheckCountry: WideString;
    procedure Set_CheckCountry(const Param1: WideString);
    function Get_CheckName: WideString;
    procedure Set_CheckName(const Param1: WideString);
    function Get_CheckState: WideString;
    procedure Set_CheckState(const Param1: WideString);
    function Get_CheckZipcode: WideString;
    procedure Set_CheckZipcode(const Param1: WideString);
    function Get_CustomerIndex: Integer;
    procedure Set_CustomerIndex(Param1: Integer);
    function Get_CustomerName: WideString;
    procedure Set_CustomerName(const Param1: WideString);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DepositDate: OleVariant;
    procedure Set_DepositDate(Param1: OleVariant);
    function Get_DepositTicketID: WideString;
    procedure Set_DepositTicketID(const Param1: WideString);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
    procedure Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailCostOfSalesAmount(Index: Smallint): Double;
    procedure Set_DetailCostOfSalesAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
    function Get_DetailCustomerIndex(Index: Smallint): Integer;
    procedure Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDateCleared(Index: Smallint): OleVariant;
    procedure Set_DetailDateCleared(Index: Smallint; Param2: OleVariant);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailDiscountAmount(Index: Smallint): Double;
    procedure Set_DetailDiscountAmount(Index: Smallint; Param2: Double);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailInventoryAccount(Index: Smallint): WideString;
    procedure Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailInvoiceNRecord(Index: Smallint): Integer;
    procedure Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
    function Get_DetailInvoicePaid(Index: Smallint): WideString;
    procedure Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailSalesTaxAuthority(Index: Smallint): WideString;
    procedure Set_DetailSalesTaxAuthority(Index: Smallint; const Param2: WideString);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTaxType(Index: Smallint): Smallint;
    procedure Set_DetailTaxType(Index: Smallint; Param2: Smallint);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnused1(Index: Smallint): Byte;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Byte);
    function Get_DetailVendorIndex(Index: Smallint): Integer;
    procedure Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
    function Get_DiscountAccount: WideString;
    procedure Set_DiscountAccount(const Param1: WideString);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_InvoicesPaid: Double;
    procedure Set_InvoicesPaid(Param1: Double);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_PaymentMethod: WideString;
    procedure Set_PaymentMethod(const Param1: WideString);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_Prepayment: WordBool;
    procedure Set_Prepayment(Param1: WordBool);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_ReceiptNum: WideString;
    procedure Set_ReceiptNum(const Param1: WideString);
    function Get_RecurrenceIndex: Integer;
    procedure Set_RecurrenceIndex(Param1: Integer);
    function Get_RecurrenceRate: Smallint;
    procedure Set_RecurrenceRate(Param1: Smallint);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_SalesRepID: WideString;
    procedure Set_SalesRepID(const Param1: WideString);
    function Get_SalesTaxCode: WideString;
    procedure Set_SalesTaxCode(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Byte;
    procedure Set_Unused1(Param1: Byte);
    function Get_Unknown2: Smallint;
    procedure Set_Unknown2(Param1: Smallint);
    function Get_Unused3: Smallint;
    procedure Set_Unused3(Param1: Smallint);
    function Get_Unknown4: Smallint;
    procedure Set_Unknown4(Param1: Smallint);
    function Get_Unused5: Byte;
    procedure Set_Unused5(Param1: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused7(Index: Smallint): Byte;
    procedure Set_Unused7(Index: Smallint; Param2: Byte);
    function Get_Unused8: Byte;
    procedure Set_Unused8(Param1: Byte);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
    function Get_VendorReceipt: WordBool;
    procedure Set_VendorReceipt(Param1: WordBool);
  public
    property DefaultInterface: _CashReceiptJournal read GetDefaultInterface;
  published
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property CashAmount: Double read Get_CashAmount write Set_CashAmount;
    property CCAddress1: WideString read Get_CCAddress1 write Set_CCAddress1;
    property CCAddress2: WideString read Get_CCAddress2 write Set_CCAddress2;
    property CCAuthorization: WideString read Get_CCAuthorization write Set_CCAuthorization;
    property CCCity: WideString read Get_CCCity write Set_CCCity;
    property CCComment: WideString read Get_CCComment write Set_CCComment;
    property CCCountry: WideString read Get_CCCountry write Set_CCCountry;
    property CCEncryptedCard: WideString read Get_CCEncryptedCard write Set_CCEncryptedCard;
    property CCFlag: Byte read Get_CCFlag write Set_CCFlag;
    property CCName: WideString read Get_CCName write Set_CCName;
    property CCNumber: WideString read Get_CCNumber write Set_CCNumber;
    property CCState: WideString read Get_CCState write Set_CCState;
    property CCZipcode: WideString read Get_CCZipcode write Set_CCZipcode;
    property CheckAddr1: WideString read Get_CheckAddr1 write Set_CheckAddr1;
    property CheckAddr2: WideString read Get_CheckAddr2 write Set_CheckAddr2;
    property CheckCity: WideString read Get_CheckCity write Set_CheckCity;
    property CheckCountry: WideString read Get_CheckCountry write Set_CheckCountry;
    property CheckName: WideString read Get_CheckName write Set_CheckName;
    property CheckState: WideString read Get_CheckState write Set_CheckState;
    property CheckZipcode: WideString read Get_CheckZipcode write Set_CheckZipcode;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property DepositTicketID: WideString read Get_DepositTicketID write Set_DepositTicketID;
    property DiscountAccount: WideString read Get_DiscountAccount write Set_DiscountAccount;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InvoicesPaid: Double read Get_InvoicesPaid write Set_InvoicesPaid;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property PaymentMethod: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property ReceiptNum: WideString read Get_ReceiptNum write Set_ReceiptNum;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property Reference: WideString read Get_Reference write Set_Reference;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Byte read Get_Unused1 write Set_Unused1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
    property Unknown4: Smallint read Get_Unknown4 write Set_Unknown4;
    property Unused5: Byte read Get_Unused5 write Set_Unused5;
    property Unused8: Byte read Get_Unused8 write Set_Unused8;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property VendorReceipt: WordBool read Get_VendorReceipt write Set_VendorReceipt;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGeneralJournal provides a Create and CreateRemote method to          
// create instances of the default interface _GeneralJournal exposed by              
// the CoClass GeneralJournal. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGeneralJournal = class
    class function Create: _GeneralJournal;
    class function CreateRemote(const MachineName: string): _GeneralJournal;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGeneralJournal
// Help String      : 
// Default Interface: _GeneralJournal
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGeneralJournalProperties= class;
{$ENDIF}
  TGeneralJournal = class(TOleServer)
  private
    FIntf:        _GeneralJournal;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGeneralJournalProperties;
    function      GetServerProperties: TGeneralJournalProperties;
{$ENDIF}
    function      GetDefaultInterface: _GeneralJournal;
  protected
    procedure InitServerData; override;
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDateCleared(Index: Smallint): OleVariant;
    procedure Set_DetailDateCleared(Index: Smallint; Param2: OleVariant);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailFlag2(Index: Smallint): WordBool;
    procedure Set_DetailFlag2(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailPosted(Index: Smallint): WordBool;
    procedure Set_DetailPosted(Index: Smallint; Param2: WordBool);
    function Get_DetailReversed(Index: Smallint): WordBool;
    procedure Set_DetailReversed(Index: Smallint; Param2: WordBool);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HasPartner: WordBool;
    procedure Set_HasPartner(Param1: WordBool);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MainAmount: Double;
    procedure Set_MainAmount(Param1: Double);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_PrimaryID: WideString;
    procedure Set_PrimaryID(const Param1: WideString);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_RecurrenceIndex: Integer;
    procedure Set_RecurrenceIndex(Param1: Integer);
    function Get_RecurrenceRate: Smallint;
    procedure Set_RecurrenceRate(Param1: Smallint);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_Reversed: WordBool;
    procedure Set_Reversed(Param1: WordBool);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unknown3: Smallint;
    procedure Set_Unknown3(Param1: Smallint);
    function Get_Unused4: Smallint;
    procedure Set_Unused4(Param1: Smallint);
    function Get_Unknown5: Smallint;
    procedure Set_Unknown5(Param1: Smallint);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused7: Double;
    procedure Set_Unused7(Param1: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _GeneralJournal);
    procedure Disconnect; override;
    function ClearRecord: Smallint;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetEqual(NRecord: Integer): Smallint;
    function IncrementBatchCount: Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function ReadFirst(Period: Smallint): OleVariant;
    function ReadNext: Smallint;
    function Update: Smallint;
    property DefaultInterface: _GeneralJournal read GetDefaultInterface;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailDateCleared[Index: Smallint]: OleVariant read Get_DetailDateCleared write Set_DetailDateCleared;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailFlag2[Index: Smallint]: WordBool read Get_DetailFlag2 write Set_DetailFlag2;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailPosted[Index: Smallint]: WordBool read Get_DetailPosted write Set_DetailPosted;
    property DetailReversed[Index: Smallint]: WordBool read Get_DetailReversed write Set_DetailReversed;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property Description: WideString read Get_Description write Set_Description;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasPartner: WordBool read Get_HasPartner write Set_HasPartner;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property MainAmount: Double read Get_MainAmount write Set_MainAmount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property PrimaryID: WideString read Get_PrimaryID write Set_PrimaryID;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property Reference: WideString read Get_Reference write Set_Reference;
    property Reversed: WordBool read Get_Reversed write Set_Reversed;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unknown3: Smallint read Get_Unknown3 write Set_Unknown3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unknown5: Smallint read Get_Unknown5 write Set_Unknown5;
    property Unused7: Double read Get_Unused7 write Set_Unused7;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGeneralJournalProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGeneralJournal
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGeneralJournalProperties = class(TPersistent)
  private
    FServer:    TGeneralJournal;
    function    GetDefaultInterface: _GeneralJournal;
    constructor Create(AServer: TGeneralJournal);
  protected
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDateCleared(Index: Smallint): OleVariant;
    procedure Set_DetailDateCleared(Index: Smallint; Param2: OleVariant);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailFlag2(Index: Smallint): WordBool;
    procedure Set_DetailFlag2(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailPosted(Index: Smallint): WordBool;
    procedure Set_DetailPosted(Index: Smallint; Param2: WordBool);
    function Get_DetailReversed(Index: Smallint): WordBool;
    procedure Set_DetailReversed(Index: Smallint; Param2: WordBool);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HasPartner: WordBool;
    procedure Set_HasPartner(Param1: WordBool);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MainAmount: Double;
    procedure Set_MainAmount(Param1: Double);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_PrimaryID: WideString;
    procedure Set_PrimaryID(const Param1: WideString);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_RecurrenceIndex: Integer;
    procedure Set_RecurrenceIndex(Param1: Integer);
    function Get_RecurrenceRate: Smallint;
    procedure Set_RecurrenceRate(Param1: Smallint);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_Reversed: WordBool;
    procedure Set_Reversed(Param1: WordBool);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unknown3: Smallint;
    procedure Set_Unknown3(Param1: Smallint);
    function Get_Unused4: Smallint;
    procedure Set_Unused4(Param1: Smallint);
    function Get_Unknown5: Smallint;
    procedure Set_Unknown5(Param1: Smallint);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused7: Double;
    procedure Set_Unused7(Param1: Double);
  public
    property DefaultInterface: _GeneralJournal read GetDefaultInterface;
  published
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property Description: WideString read Get_Description write Set_Description;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasPartner: WordBool read Get_HasPartner write Set_HasPartner;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property MainAmount: Double read Get_MainAmount write Set_MainAmount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property PrimaryID: WideString read Get_PrimaryID write Set_PrimaryID;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property Reference: WideString read Get_Reference write Set_Reference;
    property Reversed: WordBool read Get_Reversed write Set_Reversed;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unknown3: Smallint read Get_Unknown3 write Set_Unknown3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unknown5: Smallint read Get_Unknown5 write Set_Unknown5;
    property Unused7: Double read Get_Unused7 write Set_Unused7;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoInventoryAdjustmentJournal provides a Create and CreateRemote method to          
// create instances of the default interface _InventoryAdjustmentJournal exposed by              
// the CoClass InventoryAdjustmentJournal. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoInventoryAdjustmentJournal = class
    class function Create: _InventoryAdjustmentJournal;
    class function CreateRemote(const MachineName: string): _InventoryAdjustmentJournal;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TInventoryAdjustmentJournal
// Help String      : 
// Default Interface: _InventoryAdjustmentJournal
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TInventoryAdjustmentJournalProperties= class;
{$ENDIF}
  TInventoryAdjustmentJournal = class(TOleServer)
  private
    FIntf:        _InventoryAdjustmentJournal;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TInventoryAdjustmentJournalProperties;
    function      GetServerProperties: TInventoryAdjustmentJournalProperties;
{$ENDIF}
    function      GetDefaultInterface: _InventoryAdjustmentJournal;
  protected
    procedure InitServerData; override;
    function Get_AmountAdjusted: Double;
    procedure Set_AmountAdjusted(Param1: Double);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailReasonToAdjust(Index: Smallint): WideString;
    procedure Set_DetailReasonToAdjust(Index: Smallint; const Param2: WideString);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUnitCost(Index: Smallint): Double;
    procedure Set_DetailUnitCost(Index: Smallint; Param2: Double);
    function Get_DetailUnused7(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_DetailUnused7(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_InventoryAccount: WideString;
    procedure Set_InventoryAccount(const Param1: WideString);
    function Get_ItemIndex: Integer;
    procedure Set_ItemIndex(Param1: Integer);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unknown3: Smallint;
    procedure Set_Unknown3(Param1: Smallint);
    function Get_Unused4: Smallint;
    procedure Set_Unused4(Param1: Smallint);
    function Get_Unknown5: Smallint;
    procedure Set_Unknown5(Param1: Smallint);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _InventoryAdjustmentJournal);
    procedure Disconnect; override;
    function ClearRecord: Smallint;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetEqual(NRecord: Integer): Smallint;
    function IncrementBatchCount: Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function ReadFirst(Period: Smallint): Smallint;
    function ReadNext: Smallint;
    function Update: Smallint;
    property DefaultInterface: _InventoryAdjustmentJournal read GetDefaultInterface;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool read Get_DetailCostOfSalesTrx write Set_DetailCostOfSalesTrx;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailReasonToAdjust[Index: Smallint]: WideString read Get_DetailReasonToAdjust write Set_DetailReasonToAdjust;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUnitCost[Index: Smallint]: Double read Get_DetailUnitCost write Set_DetailUnitCost;
    property DetailUnused7[Index1: Smallint; Index2: Smallint]: Byte read Get_DetailUnused7 write Set_DetailUnused7;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property AmountAdjusted: Double read Get_AmountAdjusted write Set_AmountAdjusted;
    property Description: WideString read Get_Description write Set_Description;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InventoryAccount: WideString read Get_InventoryAccount write Set_InventoryAccount;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Reference: WideString read Get_Reference write Set_Reference;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unknown3: Smallint read Get_Unknown3 write Set_Unknown3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unknown5: Smallint read Get_Unknown5 write Set_Unknown5;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TInventoryAdjustmentJournalProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TInventoryAdjustmentJournal
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TInventoryAdjustmentJournalProperties = class(TPersistent)
  private
    FServer:    TInventoryAdjustmentJournal;
    function    GetDefaultInterface: _InventoryAdjustmentJournal;
    constructor Create(AServer: TInventoryAdjustmentJournal);
  protected
    function Get_AmountAdjusted: Double;
    procedure Set_AmountAdjusted(Param1: Double);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailReasonToAdjust(Index: Smallint): WideString;
    procedure Set_DetailReasonToAdjust(Index: Smallint; const Param2: WideString);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUnitCost(Index: Smallint): Double;
    procedure Set_DetailUnitCost(Index: Smallint; Param2: Double);
    function Get_DetailUnused7(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_DetailUnused7(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_InventoryAccount: WideString;
    procedure Set_InventoryAccount(const Param1: WideString);
    function Get_ItemIndex: Integer;
    procedure Set_ItemIndex(Param1: Integer);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unknown3: Smallint;
    procedure Set_Unknown3(Param1: Smallint);
    function Get_Unused4: Smallint;
    procedure Set_Unused4(Param1: Smallint);
    function Get_Unknown5: Smallint;
    procedure Set_Unknown5(Param1: Smallint);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
  public
    property DefaultInterface: _InventoryAdjustmentJournal read GetDefaultInterface;
  published
    property AmountAdjusted: Double read Get_AmountAdjusted write Set_AmountAdjusted;
    property Description: WideString read Get_Description write Set_Description;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InventoryAccount: WideString read Get_InventoryAccount write Set_InventoryAccount;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Reference: WideString read Get_Reference write Set_Reference;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unknown3: Smallint read Get_Unknown3 write Set_Unknown3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unknown5: Smallint read Get_Unknown5 write Set_Unknown5;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoPayrollJournal provides a Create and CreateRemote method to          
// create instances of the default interface _PayrollJournal exposed by              
// the CoClass PayrollJournal. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPayrollJournal = class
    class function Create: _PayrollJournal;
    class function CreateRemote(const MachineName: string): _PayrollJournal;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPayrollJournal
// Help String      : 
// Default Interface: _PayrollJournal
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TPayrollJournalProperties= class;
{$ENDIF}
  TPayrollJournal = class(TOleServer)
  private
    FIntf:        _PayrollJournal;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TPayrollJournalProperties;
    function      GetServerProperties: TPayrollJournalProperties;
{$ENDIF}
    function      GetDefaultInterface: _PayrollJournal;
  protected
    procedure InitServerData; override;
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_CashAccount: WideString;
    procedure Set_CashAccount(const Param1: WideString);
    function Get_CashAmount: Double;
    procedure Set_CashAmount(Param1: Double);
    function Get_CheckNumber: WideString;
    procedure Set_CheckNumber(const Param1: WideString);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_EmployeeID: WideString;
    procedure Set_EmployeeID(const Param1: WideString);
    function Get_EmployeeName: WideString;
    procedure Set_EmployeeName(const Param1: WideString);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HoursSalaryAmount(Index: Smallint): Double;
    procedure Set_HoursSalaryAmount(Index: Smallint; Param2: Double);
    function Get_JobAccount(Index: Smallint): WideString;
    procedure Set_JobAccount(Index: Smallint; const Param2: WideString);
    function Get_JobAmount(Index: Smallint): Double;
    procedure Set_JobAmount(Index: Smallint; Param2: Double);
    function Get_JobCostIndex(Index: Smallint): Integer;
    procedure Set_JobCostIndex(Index: Smallint; Param2: Integer);
    function Get_JobEmployeeID(Index: Smallint): WideString;
    procedure Set_JobEmployeeID(Index: Smallint; const Param2: WideString);
    function Get_JobFieldNumber(Index: Smallint): Smallint;
    procedure Set_JobFieldNumber(Index: Smallint; Param2: Smallint);
    function Get_JobFlag1(Index: Smallint): WordBool;
    procedure Set_JobFlag1(Index: Smallint; Param2: WordBool);
    function Get_JobGUID(Index: Smallint): WideString;
    procedure Set_JobGUID(Index: Smallint; const Param2: WideString);
    function Get_JobFlag2(Index: Smallint): WordBool;
    procedure Set_JobFlag2(Index: Smallint; Param2: WordBool);
    function Get_JobHours(Index: Smallint): Double;
    procedure Set_JobHours(Index: Smallint; Param2: Double);
    function Get_JobJobIndex(Index: Smallint): Integer;
    procedure Set_JobJobIndex(Index: Smallint; Param2: Integer);
    function Get_JobLevel(Index: Smallint): Smallint;
    procedure Set_JobLevel(Index: Smallint; Param2: Smallint);
    function Get_JobLineNo(Index: Smallint): Smallint;
    procedure Set_JobLineNo(Index: Smallint; Param2: Smallint);
    function Get_JobPhaseIndex(Index: Smallint): Integer;
    procedure Set_JobPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_JobTrxType(Index: Smallint): Integer;
    procedure Set_JobTrxType(Index: Smallint; Param2: Integer);
    function Get_JobUnknown(Index: Smallint): Byte;
    procedure Set_JobUnknown(Index: Smallint; Param2: Byte);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NLaborDistributions: Smallint;
    procedure Set_NLaborDistributions(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_PayAccount(Index: Smallint): WideString;
    procedure Set_PayAccount(Index: Smallint; const Param2: WideString);
    function Get_PayAmount(Index: Smallint): Double;
    procedure Set_PayAmount(Index: Smallint; Param2: Double);
    function Get_PayDateCleared(Index: Smallint): OleVariant;
    procedure Set_PayDateCleared(Index: Smallint; Param2: OleVariant);
    function Get_PayDescription(Index: Smallint): WideString;
    procedure Set_PayDescription(Index: Smallint; const Param2: WideString);
    function Get_PayEmployeeID(Index: Smallint): WideString;
    procedure Set_PayEmployeeID(Index: Smallint; const Param2: WideString);
    function Get_PayFieldNumber(Index: Smallint): Smallint;
    procedure Set_PayFieldNumber(Index: Smallint; Param2: Smallint);
    function Get_PayFlag1(Index: Smallint): WordBool;
    procedure Set_PayFlag1(Index: Smallint; Param2: WordBool);
    function Get_PayFlag2(Index: Smallint): WordBool;
    procedure Set_PayFlag2(Index: Smallint; Param2: WordBool);
    function Get_PayGUID(Index: Smallint): WideString;
    procedure Set_PayGUID(Index: Smallint; const Param2: WideString);
    function Get_PayLineNo(Index: Smallint): Smallint;
    procedure Set_PayLineNo(Index: Smallint; Param2: Smallint);
    function Get_PayMemoAmount(Index: Smallint): Double;
    procedure Set_PayMemoAmount(Index: Smallint; Param2: Double);
    function Get_PayNField(Index: Smallint): Smallint;
    procedure Set_PayNField(Index: Smallint; Param2: Smallint);
    function Get_PayPeriodEnd: OleVariant;
    procedure Set_PayPeriodEnd(Param1: OleVariant);
    function Get_PayQuantity(Index: Smallint): Double;
    procedure Set_PayQuantity(Index: Smallint; Param2: Double);
    function Get_PayTrxType(Index: Smallint): Integer;
    procedure Set_PayTrxType(Index: Smallint; Param2: Integer);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxIsReadOnly: Smallint;
    procedure Set_TrxIsReadOnly(Param1: Smallint);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Double;
    procedure Set_Unused3(Param1: Double);
    function Get_WeeksInPayPeriod: Smallint;
    procedure Set_WeeksInPayPeriod(Param1: Smallint);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _PayrollJournal);
    procedure Disconnect; override;
    function ClearRecord: Smallint;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetEqual(NRecord: Integer): Smallint;
    function IncrementBatchCount: Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function ReadFirst(Period: Smallint): Smallint;
    function ReadNext: Smallint;
    function Update: Smallint;
    property DefaultInterface: _PayrollJournal read GetDefaultInterface;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property HoursSalaryAmount[Index: Smallint]: Double read Get_HoursSalaryAmount write Set_HoursSalaryAmount;
    property JobAccount[Index: Smallint]: WideString read Get_JobAccount write Set_JobAccount;
    property JobAmount[Index: Smallint]: Double read Get_JobAmount write Set_JobAmount;
    property JobCostIndex[Index: Smallint]: Integer read Get_JobCostIndex write Set_JobCostIndex;
    property JobEmployeeID[Index: Smallint]: WideString read Get_JobEmployeeID write Set_JobEmployeeID;
    property JobFieldNumber[Index: Smallint]: Smallint read Get_JobFieldNumber write Set_JobFieldNumber;
    property JobFlag1[Index: Smallint]: WordBool read Get_JobFlag1 write Set_JobFlag1;
    property JobGUID[Index: Smallint]: WideString read Get_JobGUID write Set_JobGUID;
    property JobFlag2[Index: Smallint]: WordBool read Get_JobFlag2 write Set_JobFlag2;
    property JobHours[Index: Smallint]: Double read Get_JobHours write Set_JobHours;
    property JobJobIndex[Index: Smallint]: Integer read Get_JobJobIndex write Set_JobJobIndex;
    property JobLevel[Index: Smallint]: Smallint read Get_JobLevel write Set_JobLevel;
    property JobLineNo[Index: Smallint]: Smallint read Get_JobLineNo write Set_JobLineNo;
    property JobPhaseIndex[Index: Smallint]: Integer read Get_JobPhaseIndex write Set_JobPhaseIndex;
    property JobTrxType[Index: Smallint]: Integer read Get_JobTrxType write Set_JobTrxType;
    property JobUnknown[Index: Smallint]: Byte read Get_JobUnknown write Set_JobUnknown;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property PayAccount[Index: Smallint]: WideString read Get_PayAccount write Set_PayAccount;
    property PayAmount[Index: Smallint]: Double read Get_PayAmount write Set_PayAmount;
    property PayDateCleared[Index: Smallint]: OleVariant read Get_PayDateCleared write Set_PayDateCleared;
    property PayDescription[Index: Smallint]: WideString read Get_PayDescription write Set_PayDescription;
    property PayEmployeeID[Index: Smallint]: WideString read Get_PayEmployeeID write Set_PayEmployeeID;
    property PayFieldNumber[Index: Smallint]: Smallint read Get_PayFieldNumber write Set_PayFieldNumber;
    property PayFlag1[Index: Smallint]: WordBool read Get_PayFlag1 write Set_PayFlag1;
    property PayFlag2[Index: Smallint]: WordBool read Get_PayFlag2 write Set_PayFlag2;
    property PayGUID[Index: Smallint]: WideString read Get_PayGUID write Set_PayGUID;
    property PayLineNo[Index: Smallint]: Smallint read Get_PayLineNo write Set_PayLineNo;
    property PayMemoAmount[Index: Smallint]: Double read Get_PayMemoAmount write Set_PayMemoAmount;
    property PayNField[Index: Smallint]: Smallint read Get_PayNField write Set_PayNField;
    property PayPeriodEnd: OleVariant read Get_PayPeriodEnd write Set_PayPeriodEnd;
    property PayQuantity[Index: Smallint]: Double read Get_PayQuantity write Set_PayQuantity;
    property PayTrxType[Index: Smallint]: Integer read Get_PayTrxType write Set_PayTrxType;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property CashAmount: Double read Get_CashAmount write Set_CashAmount;
    property CheckNumber: WideString read Get_CheckNumber write Set_CheckNumber;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
    property EmployeeName: WideString read Get_EmployeeName write Set_EmployeeName;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NLaborDistributions: Smallint read Get_NLaborDistributions write Set_NLaborDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxIsReadOnly: Smallint read Get_TrxIsReadOnly write Set_TrxIsReadOnly;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused3: Double read Get_Unused3 write Set_Unused3;
    property WeeksInPayPeriod: Smallint read Get_WeeksInPayPeriod write Set_WeeksInPayPeriod;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TPayrollJournalProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TPayrollJournal
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TPayrollJournalProperties = class(TPersistent)
  private
    FServer:    TPayrollJournal;
    function    GetDefaultInterface: _PayrollJournal;
    constructor Create(AServer: TPayrollJournal);
  protected
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_CashAccount: WideString;
    procedure Set_CashAccount(const Param1: WideString);
    function Get_CashAmount: Double;
    procedure Set_CashAmount(Param1: Double);
    function Get_CheckNumber: WideString;
    procedure Set_CheckNumber(const Param1: WideString);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_EmployeeID: WideString;
    procedure Set_EmployeeID(const Param1: WideString);
    function Get_EmployeeName: WideString;
    procedure Set_EmployeeName(const Param1: WideString);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HoursSalaryAmount(Index: Smallint): Double;
    procedure Set_HoursSalaryAmount(Index: Smallint; Param2: Double);
    function Get_JobAccount(Index: Smallint): WideString;
    procedure Set_JobAccount(Index: Smallint; const Param2: WideString);
    function Get_JobAmount(Index: Smallint): Double;
    procedure Set_JobAmount(Index: Smallint; Param2: Double);
    function Get_JobCostIndex(Index: Smallint): Integer;
    procedure Set_JobCostIndex(Index: Smallint; Param2: Integer);
    function Get_JobEmployeeID(Index: Smallint): WideString;
    procedure Set_JobEmployeeID(Index: Smallint; const Param2: WideString);
    function Get_JobFieldNumber(Index: Smallint): Smallint;
    procedure Set_JobFieldNumber(Index: Smallint; Param2: Smallint);
    function Get_JobFlag1(Index: Smallint): WordBool;
    procedure Set_JobFlag1(Index: Smallint; Param2: WordBool);
    function Get_JobGUID(Index: Smallint): WideString;
    procedure Set_JobGUID(Index: Smallint; const Param2: WideString);
    function Get_JobFlag2(Index: Smallint): WordBool;
    procedure Set_JobFlag2(Index: Smallint; Param2: WordBool);
    function Get_JobHours(Index: Smallint): Double;
    procedure Set_JobHours(Index: Smallint; Param2: Double);
    function Get_JobJobIndex(Index: Smallint): Integer;
    procedure Set_JobJobIndex(Index: Smallint; Param2: Integer);
    function Get_JobLevel(Index: Smallint): Smallint;
    procedure Set_JobLevel(Index: Smallint; Param2: Smallint);
    function Get_JobLineNo(Index: Smallint): Smallint;
    procedure Set_JobLineNo(Index: Smallint; Param2: Smallint);
    function Get_JobPhaseIndex(Index: Smallint): Integer;
    procedure Set_JobPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_JobTrxType(Index: Smallint): Integer;
    procedure Set_JobTrxType(Index: Smallint; Param2: Integer);
    function Get_JobUnknown(Index: Smallint): Byte;
    procedure Set_JobUnknown(Index: Smallint; Param2: Byte);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NLaborDistributions: Smallint;
    procedure Set_NLaborDistributions(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_PayAccount(Index: Smallint): WideString;
    procedure Set_PayAccount(Index: Smallint; const Param2: WideString);
    function Get_PayAmount(Index: Smallint): Double;
    procedure Set_PayAmount(Index: Smallint; Param2: Double);
    function Get_PayDateCleared(Index: Smallint): OleVariant;
    procedure Set_PayDateCleared(Index: Smallint; Param2: OleVariant);
    function Get_PayDescription(Index: Smallint): WideString;
    procedure Set_PayDescription(Index: Smallint; const Param2: WideString);
    function Get_PayEmployeeID(Index: Smallint): WideString;
    procedure Set_PayEmployeeID(Index: Smallint; const Param2: WideString);
    function Get_PayFieldNumber(Index: Smallint): Smallint;
    procedure Set_PayFieldNumber(Index: Smallint; Param2: Smallint);
    function Get_PayFlag1(Index: Smallint): WordBool;
    procedure Set_PayFlag1(Index: Smallint; Param2: WordBool);
    function Get_PayFlag2(Index: Smallint): WordBool;
    procedure Set_PayFlag2(Index: Smallint; Param2: WordBool);
    function Get_PayGUID(Index: Smallint): WideString;
    procedure Set_PayGUID(Index: Smallint; const Param2: WideString);
    function Get_PayLineNo(Index: Smallint): Smallint;
    procedure Set_PayLineNo(Index: Smallint; Param2: Smallint);
    function Get_PayMemoAmount(Index: Smallint): Double;
    procedure Set_PayMemoAmount(Index: Smallint; Param2: Double);
    function Get_PayNField(Index: Smallint): Smallint;
    procedure Set_PayNField(Index: Smallint; Param2: Smallint);
    function Get_PayPeriodEnd: OleVariant;
    procedure Set_PayPeriodEnd(Param1: OleVariant);
    function Get_PayQuantity(Index: Smallint): Double;
    procedure Set_PayQuantity(Index: Smallint; Param2: Double);
    function Get_PayTrxType(Index: Smallint): Integer;
    procedure Set_PayTrxType(Index: Smallint; Param2: Integer);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxIsReadOnly: Smallint;
    procedure Set_TrxIsReadOnly(Param1: Smallint);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Double;
    procedure Set_Unused3(Param1: Double);
    function Get_WeeksInPayPeriod: Smallint;
    procedure Set_WeeksInPayPeriod(Param1: Smallint);
  public
    property DefaultInterface: _PayrollJournal read GetDefaultInterface;
  published
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CashAccount: WideString read Get_CashAccount write Set_CashAccount;
    property CashAmount: Double read Get_CashAmount write Set_CashAmount;
    property CheckNumber: WideString read Get_CheckNumber write Set_CheckNumber;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
    property EmployeeName: WideString read Get_EmployeeName write Set_EmployeeName;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NLaborDistributions: Smallint read Get_NLaborDistributions write Set_NLaborDistributions;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property TrxIsReadOnly: Smallint read Get_TrxIsReadOnly write Set_TrxIsReadOnly;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused3: Double read Get_Unused3 write Set_Unused3;
    property WeeksInPayPeriod: Smallint read Get_WeeksInPayPeriod write Set_WeeksInPayPeriod;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoPurchaseJournal provides a Create and CreateRemote method to          
// create instances of the default interface _PurchaseJournal exposed by              
// the CoClass PurchaseJournal. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPurchaseJournal = class
    class function Create: _PurchaseJournal;
    class function CreateRemote(const MachineName: string): _PurchaseJournal;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPurchaseJournal
// Help String      : 
// Default Interface: _PurchaseJournal
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TPurchaseJournalProperties= class;
{$ENDIF}
  TPurchaseJournal = class(TOleServer)
  private
    FIntf:        _PurchaseJournal;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TPurchaseJournalProperties;
    function      GetServerProperties: TPurchaseJournalProperties;
{$ENDIF}
    function      GetDefaultInterface: _PurchaseJournal;
  protected
    procedure InitServerData; override;
    function Get_AmountPaid: Double;
    procedure Set_AmountPaid(Param1: Double);
    function Get_APAccount: WideString;
    procedure Set_APAccount(const Param1: WideString);
    function Get_APAmount: Double;
    procedure Set_APAmount(Param1: Double);
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DateDue: OleVariant;
    procedure Set_DateDue(Param1: OleVariant);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailApplyToPO(Index: Smallint): WordBool;
    procedure Set_DetailApplyToPO(Index: Smallint; Param2: WordBool);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
    procedure Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailDisplayedLine(Index: Smallint): Smallint;
    procedure Set_DetailDisplayedLine(Index: Smallint; Param2: Smallint);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailFlag2(Index: Smallint): WordBool;
    procedure Set_DetailFlag2(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailInventoryAccount(Index: Smallint): WideString;
    procedure Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailInvoiceNRecord(Index: Smallint): Integer;
    procedure Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
    function Get_DetailInvoicePaid(Index: Smallint): WideString;
    procedure Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailPOLine(Index: Smallint): Smallint;
    procedure Set_DetailPOLine(Index: Smallint; Param2: Smallint);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUMGUID(Index: Smallint): WideString;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnknown(Index: Smallint): Byte;
    procedure Set_DetailUnknown(Index: Smallint; Param2: Byte);
    function Get_DetailUnused1(Index: Smallint): Smallint;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Smallint);
    function Get_DetailUnused2(Index: Smallint): Smallint;
    procedure Set_DetailUnused2(Index: Smallint; Param2: Smallint);
    function Get_DetailUnused3(Index: Smallint): Byte;
    procedure Set_DetailUnused3(Index: Smallint; Param2: Byte);
    function Get_DetailUnused4(Index: Smallint): Double;
    procedure Set_DetailUnused4(Index: Smallint; Param2: Double);
    function Get_DetailVendorIndex(Index: Smallint): Integer;
    procedure Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
    function Get_DiscountAmount: Double;
    procedure Set_DiscountAmount(Param1: Double);
    function Get_DiscountDate: OleVariant;
    procedure Set_DiscountDate(Param1: OleVariant);
    function Get_DropShip: WordBool;
    procedure Set_DropShip(Param1: WordBool);
    function Get_DropShipCustomerIndex: Integer;
    procedure Set_DropShipCustomerIndex(Param1: Integer);
    function Get_DropShipInvNo: WideString;
    procedure Set_DropShipInvNo(const Param1: WideString);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HasPartner: WordBool;
    procedure Set_HasPartner(Param1: WordBool);
    function Get_InternalNote: WideString;
    procedure Set_InternalNote(const Param1: WideString);
    function Get_InvoiceNumber: WideString;
    procedure Set_InvoiceNumber(const Param1: WideString);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_JrnlTypeEx: Integer;
    procedure Set_JrnlTypeEx(Param1: Integer);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_NotePrintsAfterItems: WordBool;
    procedure Set_NotePrintsAfterItems(Param1: WordBool);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_NumOrderLines: Smallint;
    procedure Set_NumOrderLines(Param1: Smallint);
    function Get_PaymentDate: OleVariant;
    procedure Set_PaymentDate(Param1: OleVariant);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_PO: WordBool;
    procedure Set_PO(Param1: WordBool);
    function Get_POGoodThruDate: OleVariant;
    procedure Set_POGoodThruDate(Param1: OleVariant);
    function Get_PONo: WideString;
    procedure Set_PONo(const Param1: WideString);
    function Get_PONumber: WideString;
    procedure Set_PONumber(const Param1: WideString);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_Prepayment: WordBool;
    procedure Set_Prepayment(Param1: WordBool);
    function Get_PrintCheck: WordBool;
    procedure Set_PrintCheck(Param1: WordBool);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_RecurrenceIndex: Integer;
    procedure Set_RecurrenceIndex(Param1: Integer);
    function Get_RecurrenceRate: Smallint;
    procedure Set_RecurrenceRate(Param1: Smallint);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_ShipToAddr1: WideString;
    procedure Set_ShipToAddr1(const Param1: WideString);
    function Get_ShipToAddr2: WideString;
    procedure Set_ShipToAddr2(const Param1: WideString);
    function Get_ShipToCity: WideString;
    procedure Set_ShipToCity(const Param1: WideString);
    function Get_ShipToCountry: WideString;
    procedure Set_ShipToCountry(const Param1: WideString);
    function Get_ShipToName: WideString;
    procedure Set_ShipToName(const Param1: WideString);
    function Get_ShipToState: WideString;
    procedure Set_ShipToState(const Param1: WideString);
    function Get_ShipToZipCode: WideString;
    procedure Set_ShipToZipCode(const Param1: WideString);
    function Get_ShipVia: WideString;
    procedure Set_ShipVia(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_Terms: WideString;
    procedure Set_Terms(const Param1: WideString);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Double;
    procedure Set_Unused3(Param1: Double);
    function Get_Unused4: Byte;
    procedure Set_Unused4(Param1: Byte);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
    function Get_VendorName: WideString;
    procedure Set_VendorName(const Param1: WideString);
    function Get_WaitingOnBill: WordBool;
    procedure Set_WaitingOnBill(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _PurchaseJournal);
    procedure Disconnect; override;
    function ClearRecord: Smallint;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetEqual(NRecord: Integer): Smallint;
    function IncrementBatchCount: Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function ReadFirst(Period: Smallint): Smallint;
    function ReadFirstForVendor(Index: Integer): Smallint;
    function ReadNext: Smallint;
    function ReadNextByVendor: Smallint;
    function Update: Smallint;
    property DefaultInterface: _PurchaseJournal read GetDefaultInterface;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DateDue: OleVariant read Get_DateDue write Set_DateDue;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailApplyToPO[Index: Smallint]: WordBool read Get_DetailApplyToPO write Set_DetailApplyToPO;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCostOfSalesAccount[Index: Smallint]: WideString read Get_DetailCostOfSalesAccount write Set_DetailCostOfSalesAccount;
    property DetailCostOfSalesTrx[Index: Smallint]: WordBool read Get_DetailCostOfSalesTrx write Set_DetailCostOfSalesTrx;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailDisplayedLine[Index: Smallint]: Smallint read Get_DetailDisplayedLine write Set_DetailDisplayedLine;
    property DetailFlag1[Index: Smallint]: WordBool read Get_DetailFlag1 write Set_DetailFlag1;
    property DetailFlag2[Index: Smallint]: WordBool read Get_DetailFlag2 write Set_DetailFlag2;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailInventoryAccount[Index: Smallint]: WideString read Get_DetailInventoryAccount write Set_DetailInventoryAccount;
    property DetailInvoiceNRecord[Index: Smallint]: Integer read Get_DetailInvoiceNRecord write Set_DetailInvoiceNRecord;
    property DetailInvoicePaid[Index: Smallint]: WideString read Get_DetailInvoicePaid write Set_DetailInvoicePaid;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailPOLine[Index: Smallint]: Smallint read Get_DetailPOLine write Set_DetailPOLine;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUMGUID[Index: Smallint]: WideString read Get_DetailUMGUID write Set_DetailUMGUID;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnknown[Index: Smallint]: Byte read Get_DetailUnknown write Set_DetailUnknown;
    property DetailUnused1[Index: Smallint]: Smallint read Get_DetailUnused1 write Set_DetailUnused1;
    property DetailUnused2[Index: Smallint]: Smallint read Get_DetailUnused2 write Set_DetailUnused2;
    property DetailUnused3[Index: Smallint]: Byte read Get_DetailUnused3 write Set_DetailUnused3;
    property DetailUnused4[Index: Smallint]: Double read Get_DetailUnused4 write Set_DetailUnused4;
    property DetailVendorIndex[Index: Smallint]: Integer read Get_DetailVendorIndex write Set_DetailVendorIndex;
    property DiscountDate: OleVariant read Get_DiscountDate write Set_DiscountDate;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property PaymentDate: OleVariant read Get_PaymentDate write Set_PaymentDate;
    property POGoodThruDate: OleVariant read Get_POGoodThruDate write Set_POGoodThruDate;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property AmountPaid: Double read Get_AmountPaid write Set_AmountPaid;
    property APAccount: WideString read Get_APAccount write Set_APAccount;
    property APAmount: Double read Get_APAmount write Set_APAmount;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property DiscountAmount: Double read Get_DiscountAmount write Set_DiscountAmount;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property DropShipInvNo: WideString read Get_DropShipInvNo write Set_DropShipInvNo;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasPartner: WordBool read Get_HasPartner write Set_HasPartner;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property InvoiceNumber: WideString read Get_InvoiceNumber write Set_InvoiceNumber;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property JrnlTypeEx: Integer read Get_JrnlTypeEx write Set_JrnlTypeEx;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumOrderLines: Smallint read Get_NumOrderLines write Set_NumOrderLines;
    property Period: Smallint read Get_Period write Set_Period;
    property PO: WordBool read Get_PO write Set_PO;
    property PONo: WideString read Get_PONo write Set_PONo;
    property PONumber: WideString read Get_PONumber write Set_PONumber;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property PrintCheck: WordBool read Get_PrintCheck write Set_PrintCheck;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property ShipToAddr1: WideString read Get_ShipToAddr1 write Set_ShipToAddr1;
    property ShipToAddr2: WideString read Get_ShipToAddr2 write Set_ShipToAddr2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused3: Double read Get_Unused3 write Set_Unused3;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property VendorName: WideString read Get_VendorName write Set_VendorName;
    property WaitingOnBill: WordBool read Get_WaitingOnBill write Set_WaitingOnBill;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TPurchaseJournalProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TPurchaseJournal
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TPurchaseJournalProperties = class(TPersistent)
  private
    FServer:    TPurchaseJournal;
    function    GetDefaultInterface: _PurchaseJournal;
    constructor Create(AServer: TPurchaseJournal);
  protected
    function Get_AmountPaid: Double;
    procedure Set_AmountPaid(Param1: Double);
    function Get_APAccount: WideString;
    procedure Set_APAccount(const Param1: WideString);
    function Get_APAmount: Double;
    procedure Set_APAmount(Param1: Double);
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DateDue: OleVariant;
    procedure Set_DateDue(Param1: OleVariant);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailApplyToPO(Index: Smallint): WordBool;
    procedure Set_DetailApplyToPO(Index: Smallint; Param2: WordBool);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
    procedure Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
    procedure Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailDisplayedLine(Index: Smallint): Smallint;
    procedure Set_DetailDisplayedLine(Index: Smallint; Param2: Smallint);
    function Get_DetailFlag1(Index: Smallint): WordBool;
    procedure Set_DetailFlag1(Index: Smallint; Param2: WordBool);
    function Get_DetailFlag2(Index: Smallint): WordBool;
    procedure Set_DetailFlag2(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailInventoryAccount(Index: Smallint): WideString;
    procedure Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailInvoiceNRecord(Index: Smallint): Integer;
    procedure Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
    function Get_DetailInvoicePaid(Index: Smallint): WideString;
    procedure Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailPOLine(Index: Smallint): Smallint;
    procedure Set_DetailPOLine(Index: Smallint; Param2: Smallint);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUMGUID(Index: Smallint): WideString;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnknown(Index: Smallint): Byte;
    procedure Set_DetailUnknown(Index: Smallint; Param2: Byte);
    function Get_DetailUnused1(Index: Smallint): Smallint;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Smallint);
    function Get_DetailUnused2(Index: Smallint): Smallint;
    procedure Set_DetailUnused2(Index: Smallint; Param2: Smallint);
    function Get_DetailUnused3(Index: Smallint): Byte;
    procedure Set_DetailUnused3(Index: Smallint; Param2: Byte);
    function Get_DetailUnused4(Index: Smallint): Double;
    procedure Set_DetailUnused4(Index: Smallint; Param2: Double);
    function Get_DetailVendorIndex(Index: Smallint): Integer;
    procedure Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
    function Get_DiscountAmount: Double;
    procedure Set_DiscountAmount(Param1: Double);
    function Get_DiscountDate: OleVariant;
    procedure Set_DiscountDate(Param1: OleVariant);
    function Get_DropShip: WordBool;
    procedure Set_DropShip(Param1: WordBool);
    function Get_DropShipCustomerIndex: Integer;
    procedure Set_DropShipCustomerIndex(Param1: Integer);
    function Get_DropShipInvNo: WideString;
    procedure Set_DropShipInvNo(const Param1: WideString);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HasPartner: WordBool;
    procedure Set_HasPartner(Param1: WordBool);
    function Get_InternalNote: WideString;
    procedure Set_InternalNote(const Param1: WideString);
    function Get_InvoiceNumber: WideString;
    procedure Set_InvoiceNumber(const Param1: WideString);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_JrnlTypeEx: Integer;
    procedure Set_JrnlTypeEx(Param1: Integer);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_NotePrintsAfterItems: WordBool;
    procedure Set_NotePrintsAfterItems(Param1: WordBool);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_NumOrderLines: Smallint;
    procedure Set_NumOrderLines(Param1: Smallint);
    function Get_PaymentDate: OleVariant;
    procedure Set_PaymentDate(Param1: OleVariant);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_PO: WordBool;
    procedure Set_PO(Param1: WordBool);
    function Get_POGoodThruDate: OleVariant;
    procedure Set_POGoodThruDate(Param1: OleVariant);
    function Get_PONo: WideString;
    procedure Set_PONo(const Param1: WideString);
    function Get_PONumber: WideString;
    procedure Set_PONumber(const Param1: WideString);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_Prepayment: WordBool;
    procedure Set_Prepayment(Param1: WordBool);
    function Get_PrintCheck: WordBool;
    procedure Set_PrintCheck(Param1: WordBool);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_RecurrenceIndex: Integer;
    procedure Set_RecurrenceIndex(Param1: Integer);
    function Get_RecurrenceRate: Smallint;
    procedure Set_RecurrenceRate(Param1: Smallint);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_ShipToAddr1: WideString;
    procedure Set_ShipToAddr1(const Param1: WideString);
    function Get_ShipToAddr2: WideString;
    procedure Set_ShipToAddr2(const Param1: WideString);
    function Get_ShipToCity: WideString;
    procedure Set_ShipToCity(const Param1: WideString);
    function Get_ShipToCountry: WideString;
    procedure Set_ShipToCountry(const Param1: WideString);
    function Get_ShipToName: WideString;
    procedure Set_ShipToName(const Param1: WideString);
    function Get_ShipToState: WideString;
    procedure Set_ShipToState(const Param1: WideString);
    function Get_ShipToZipCode: WideString;
    procedure Set_ShipToZipCode(const Param1: WideString);
    function Get_ShipVia: WideString;
    procedure Set_ShipVia(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_Terms: WideString;
    procedure Set_Terms(const Param1: WideString);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Double;
    procedure Set_Unused3(Param1: Double);
    function Get_Unused4: Byte;
    procedure Set_Unused4(Param1: Byte);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
    function Get_VendorName: WideString;
    procedure Set_VendorName(const Param1: WideString);
    function Get_WaitingOnBill: WordBool;
    procedure Set_WaitingOnBill(Param1: WordBool);
  public
    property DefaultInterface: _PurchaseJournal read GetDefaultInterface;
  published
    property AmountPaid: Double read Get_AmountPaid write Set_AmountPaid;
    property APAccount: WideString read Get_APAccount write Set_APAccount;
    property APAmount: Double read Get_APAmount write Set_APAmount;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property DiscountAmount: Double read Get_DiscountAmount write Set_DiscountAmount;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property DropShipInvNo: WideString read Get_DropShipInvNo write Set_DropShipInvNo;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasPartner: WordBool read Get_HasPartner write Set_HasPartner;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property InvoiceNumber: WideString read Get_InvoiceNumber write Set_InvoiceNumber;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property JrnlTypeEx: Integer read Get_JrnlTypeEx write Set_JrnlTypeEx;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumOrderLines: Smallint read Get_NumOrderLines write Set_NumOrderLines;
    property Period: Smallint read Get_Period write Set_Period;
    property PO: WordBool read Get_PO write Set_PO;
    property PONo: WideString read Get_PONo write Set_PONo;
    property PONumber: WideString read Get_PONumber write Set_PONumber;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property PrintCheck: WordBool read Get_PrintCheck write Set_PrintCheck;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property ShipToAddr1: WideString read Get_ShipToAddr1 write Set_ShipToAddr1;
    property ShipToAddr2: WideString read Get_ShipToAddr2 write Set_ShipToAddr2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused3: Double read Get_Unused3 write Set_Unused3;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property VendorName: WideString read Get_VendorName write Set_VendorName;
    property WaitingOnBill: WordBool read Get_WaitingOnBill write Set_WaitingOnBill;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoPurchaseOrderJournal provides a Create and CreateRemote method to          
// create instances of the default interface _PurchaseOrderJournal exposed by              
// the CoClass PurchaseOrderJournal. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPurchaseOrderJournal = class
    class function Create: _PurchaseOrderJournal;
    class function CreateRemote(const MachineName: string): _PurchaseOrderJournal;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPurchaseOrderJournal
// Help String      : 
// Default Interface: _PurchaseOrderJournal
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TPurchaseOrderJournalProperties= class;
{$ENDIF}
  TPurchaseOrderJournal = class(TOleServer)
  private
    FIntf:        _PurchaseOrderJournal;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TPurchaseOrderJournalProperties;
    function      GetServerProperties: TPurchaseOrderJournalProperties;
{$ENDIF}
    function      GetDefaultInterface: _PurchaseOrderJournal;
  protected
    procedure InitServerData; override;
    function Get_AmountPaid: Double;
    procedure Set_AmountPaid(Param1: Double);
    function Get_APAccount: WideString;
    procedure Set_APAccount(const Param1: WideString);
    function Get_APAmount: Double;
    procedure Set_APAmount(Param1: Double);
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_ClosePurchaseOrder: WordBool;
    procedure Set_ClosePurchaseOrder(Param1: WordBool);
    function Get_CustomerInvoiceNumber: WideString;
    procedure Set_CustomerInvoiceNumber(const Param1: WideString);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DateDue: OleVariant;
    procedure Set_DateDue(Param1: OleVariant);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailExtension(Index: Smallint): Double;
    procedure Set_DetailExtension(Index: Smallint; Param2: Double);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailPOLine(Index: Smallint): Byte;
    procedure Set_DetailPOLine(Index: Smallint; Param2: Byte);
    function Get_DetailPOLine2(Index: Smallint): Smallint;
    procedure Set_DetailPOLine2(Index: Smallint; Param2: Smallint);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailReceivedAmount(Index: Smallint): Double;
    procedure Set_DetailReceivedAmount(Index: Smallint; Param2: Double);
    function Get_DetailReceivedQuantity(Index: Smallint): Double;
    procedure Set_DetailReceivedQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantityOrdered(Index: Smallint): Double;
    procedure Set_DetailStockingQuantityOrdered(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantityShipped(Index: Smallint): Double;
    procedure Set_DetailStockingQuantityShipped(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUMGUID(Index: Smallint): WideString;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnused(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_DetailUnused(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_DetailVendorIndex(Index: Smallint): Integer;
    procedure Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
    function Get_DiscountAmount: Double;
    procedure Set_DiscountAmount(Param1: Double);
    function Get_DiscountDate: OleVariant;
    procedure Set_DiscountDate(Param1: OleVariant);
    function Get_DropShip: WordBool;
    procedure Set_DropShip(Param1: WordBool);
    function Get_DropShipCustomerIndex: Integer;
    procedure Set_DropShipCustomerIndex(Param1: Integer);
    function Get_DropShipInvoiceNumber: WideString;
    procedure Set_DropShipInvoiceNumber(const Param1: WideString);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_InternalNote: WideString;
    procedure Set_InternalNote(const Param1: WideString);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_LastPONumber: WideString;
    procedure Set_LastPONumber(const Param1: WideString);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_NotePrintsAfterItems: WordBool;
    procedure Set_NotePrintsAfterItems(Param1: WordBool);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_NumPOLines: Byte;
    procedure Set_NumPOLines(Param1: Byte);
    function Get_NumPOLines2: Smallint;
    procedure Set_NumPOLines2(Param1: Smallint);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_POGoodThruDate: OleVariant;
    procedure Set_POGoodThruDate(Param1: OleVariant);
    function Get_PONumber: WideString;
    procedure Set_PONumber(const Param1: WideString);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_Prepayment: WordBool;
    procedure Set_Prepayment(Param1: WordBool);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_ShipToAddr1: WideString;
    procedure Set_ShipToAddr1(const Param1: WideString);
    function Get_ShipToAddr2: WideString;
    procedure Set_ShipToAddr2(const Param1: WideString);
    function Get_ShipToCity: WideString;
    procedure Set_ShipToCity(const Param1: WideString);
    function Get_ShipToCountry: WideString;
    procedure Set_ShipToCountry(const Param1: WideString);
    function Get_ShipToName: WideString;
    procedure Set_ShipToName(const Param1: WideString);
    function Get_ShipToState: WideString;
    procedure Set_ShipToState(const Param1: WideString);
    function Get_ShipToZipCode: WideString;
    procedure Set_ShipToZipCode(const Param1: WideString);
    function Get_ShipVia: WideString;
    procedure Set_ShipVia(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_Terms: WideString;
    procedure Set_Terms(const Param1: WideString);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Double;
    procedure Set_Unused3(Param1: Double);
    function Get_Unused4: Byte;
    procedure Set_Unused4(Param1: Byte);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused7: Double;
    procedure Set_Unused7(Param1: Double);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
    function Get_VendorName: WideString;
    procedure Set_VendorName(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _PurchaseOrderJournal);
    procedure Disconnect; override;
    function ClearRecord: Smallint;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetEqual(NRecord: Integer): Smallint;
    function IncrementBatchCount: Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function ReadFirst(Period: Smallint): Smallint;
    function ReadFirstForVendor(Index: Integer): Smallint;
    function ReadNext: Smallint;
    function ReadNextByVendor: Smallint;
    function Update: Smallint;
    property DefaultInterface: _PurchaseOrderJournal read GetDefaultInterface;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DateDue: OleVariant read Get_DateDue write Set_DateDue;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailExtension[Index: Smallint]: Double read Get_DetailExtension write Set_DetailExtension;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailPOLine[Index: Smallint]: Byte read Get_DetailPOLine write Set_DetailPOLine;
    property DetailPOLine2[Index: Smallint]: Smallint read Get_DetailPOLine2 write Set_DetailPOLine2;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailReceivedAmount[Index: Smallint]: Double read Get_DetailReceivedAmount write Set_DetailReceivedAmount;
    property DetailReceivedQuantity[Index: Smallint]: Double read Get_DetailReceivedQuantity write Set_DetailReceivedQuantity;
    property DetailStockingQuantityOrdered[Index: Smallint]: Double read Get_DetailStockingQuantityOrdered write Set_DetailStockingQuantityOrdered;
    property DetailStockingQuantityShipped[Index: Smallint]: Double read Get_DetailStockingQuantityShipped write Set_DetailStockingQuantityShipped;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailUMGUID[Index: Smallint]: WideString read Get_DetailUMGUID write Set_DetailUMGUID;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnused[Index1: Smallint; Index2: Smallint]: Byte read Get_DetailUnused write Set_DetailUnused;
    property DetailVendorIndex[Index: Smallint]: Integer read Get_DetailVendorIndex write Set_DetailVendorIndex;
    property DiscountDate: OleVariant read Get_DiscountDate write Set_DiscountDate;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property POGoodThruDate: OleVariant read Get_POGoodThruDate write Set_POGoodThruDate;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused5[Index: Smallint]: Byte read Get_Unused5 write Set_Unused5;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property AmountPaid: Double read Get_AmountPaid write Set_AmountPaid;
    property APAccount: WideString read Get_APAccount write Set_APAccount;
    property APAmount: Double read Get_APAmount write Set_APAmount;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property ClosePurchaseOrder: WordBool read Get_ClosePurchaseOrder write Set_ClosePurchaseOrder;
    property CustomerInvoiceNumber: WideString read Get_CustomerInvoiceNumber write Set_CustomerInvoiceNumber;
    property DiscountAmount: Double read Get_DiscountAmount write Set_DiscountAmount;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property DropShipInvoiceNumber: WideString read Get_DropShipInvoiceNumber write Set_DropShipInvoiceNumber;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property LastPONumber: WideString read Get_LastPONumber write Set_LastPONumber;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumPOLines: Byte read Get_NumPOLines write Set_NumPOLines;
    property NumPOLines2: Smallint read Get_NumPOLines2 write Set_NumPOLines2;
    property Period: Smallint read Get_Period write Set_Period;
    property PONumber: WideString read Get_PONumber write Set_PONumber;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property ShipToAddr1: WideString read Get_ShipToAddr1 write Set_ShipToAddr1;
    property ShipToAddr2: WideString read Get_ShipToAddr2 write Set_ShipToAddr2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused3: Double read Get_Unused3 write Set_Unused3;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property Unused7: Double read Get_Unused7 write Set_Unused7;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property VendorName: WideString read Get_VendorName write Set_VendorName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TPurchaseOrderJournalProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TPurchaseOrderJournal
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TPurchaseOrderJournalProperties = class(TPersistent)
  private
    FServer:    TPurchaseOrderJournal;
    function    GetDefaultInterface: _PurchaseOrderJournal;
    constructor Create(AServer: TPurchaseOrderJournal);
  protected
    function Get_AmountPaid: Double;
    procedure Set_AmountPaid(Param1: Double);
    function Get_APAccount: WideString;
    procedure Set_APAccount(const Param1: WideString);
    function Get_APAmount: Double;
    procedure Set_APAmount(Param1: Double);
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_ClosePurchaseOrder: WordBool;
    procedure Set_ClosePurchaseOrder(Param1: WordBool);
    function Get_CustomerInvoiceNumber: WideString;
    procedure Set_CustomerInvoiceNumber(const Param1: WideString);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DateDue: OleVariant;
    procedure Set_DateDue(Param1: OleVariant);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailExtension(Index: Smallint): Double;
    procedure Set_DetailExtension(Index: Smallint; Param2: Double);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailPOLine(Index: Smallint): Byte;
    procedure Set_DetailPOLine(Index: Smallint; Param2: Byte);
    function Get_DetailPOLine2(Index: Smallint): Smallint;
    procedure Set_DetailPOLine2(Index: Smallint; Param2: Smallint);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailReceivedAmount(Index: Smallint): Double;
    procedure Set_DetailReceivedAmount(Index: Smallint; Param2: Double);
    function Get_DetailReceivedQuantity(Index: Smallint): Double;
    procedure Set_DetailReceivedQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantityOrdered(Index: Smallint): Double;
    procedure Set_DetailStockingQuantityOrdered(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantityShipped(Index: Smallint): Double;
    procedure Set_DetailStockingQuantityShipped(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUMGUID(Index: Smallint): WideString;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnused(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_DetailUnused(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_DetailVendorIndex(Index: Smallint): Integer;
    procedure Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
    function Get_DiscountAmount: Double;
    procedure Set_DiscountAmount(Param1: Double);
    function Get_DiscountDate: OleVariant;
    procedure Set_DiscountDate(Param1: OleVariant);
    function Get_DropShip: WordBool;
    procedure Set_DropShip(Param1: WordBool);
    function Get_DropShipCustomerIndex: Integer;
    procedure Set_DropShipCustomerIndex(Param1: Integer);
    function Get_DropShipInvoiceNumber: WideString;
    procedure Set_DropShipInvoiceNumber(const Param1: WideString);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_InternalNote: WideString;
    procedure Set_InternalNote(const Param1: WideString);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_LastPONumber: WideString;
    procedure Set_LastPONumber(const Param1: WideString);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_NotePrintsAfterItems: WordBool;
    procedure Set_NotePrintsAfterItems(Param1: WordBool);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_NumPOLines: Byte;
    procedure Set_NumPOLines(Param1: Byte);
    function Get_NumPOLines2: Smallint;
    procedure Set_NumPOLines2(Param1: Smallint);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_POGoodThruDate: OleVariant;
    procedure Set_POGoodThruDate(Param1: OleVariant);
    function Get_PONumber: WideString;
    procedure Set_PONumber(const Param1: WideString);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_Prepayment: WordBool;
    procedure Set_Prepayment(Param1: WordBool);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_ShipToAddr1: WideString;
    procedure Set_ShipToAddr1(const Param1: WideString);
    function Get_ShipToAddr2: WideString;
    procedure Set_ShipToAddr2(const Param1: WideString);
    function Get_ShipToCity: WideString;
    procedure Set_ShipToCity(const Param1: WideString);
    function Get_ShipToCountry: WideString;
    procedure Set_ShipToCountry(const Param1: WideString);
    function Get_ShipToName: WideString;
    procedure Set_ShipToName(const Param1: WideString);
    function Get_ShipToState: WideString;
    procedure Set_ShipToState(const Param1: WideString);
    function Get_ShipToZipCode: WideString;
    procedure Set_ShipToZipCode(const Param1: WideString);
    function Get_ShipVia: WideString;
    procedure Set_ShipVia(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_Terms: WideString;
    procedure Set_Terms(const Param1: WideString);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Double;
    procedure Set_Unused3(Param1: Double);
    function Get_Unused4: Byte;
    procedure Set_Unused4(Param1: Byte);
    function Get_Unused5(Index: Smallint): Byte;
    procedure Set_Unused5(Index: Smallint; Param2: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused7: Double;
    procedure Set_Unused7(Param1: Double);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
    function Get_VendorName: WideString;
    procedure Set_VendorName(const Param1: WideString);
  public
    property DefaultInterface: _PurchaseOrderJournal read GetDefaultInterface;
  published
    property AmountPaid: Double read Get_AmountPaid write Set_AmountPaid;
    property APAccount: WideString read Get_APAccount write Set_APAccount;
    property APAmount: Double read Get_APAmount write Set_APAmount;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property ClosePurchaseOrder: WordBool read Get_ClosePurchaseOrder write Set_ClosePurchaseOrder;
    property CustomerInvoiceNumber: WideString read Get_CustomerInvoiceNumber write Set_CustomerInvoiceNumber;
    property DiscountAmount: Double read Get_DiscountAmount write Set_DiscountAmount;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property DropShipInvoiceNumber: WideString read Get_DropShipInvoiceNumber write Set_DropShipInvoiceNumber;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property LastPONumber: WideString read Get_LastPONumber write Set_LastPONumber;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumPOLines: Byte read Get_NumPOLines write Set_NumPOLines;
    property NumPOLines2: Smallint read Get_NumPOLines2 write Set_NumPOLines2;
    property Period: Smallint read Get_Period write Set_Period;
    property PONumber: WideString read Get_PONumber write Set_PONumber;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property ShipToAddr1: WideString read Get_ShipToAddr1 write Set_ShipToAddr1;
    property ShipToAddr2: WideString read Get_ShipToAddr2 write Set_ShipToAddr2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused3: Double read Get_Unused3 write Set_Unused3;
    property Unused4: Byte read Get_Unused4 write Set_Unused4;
    property Unused7: Double read Get_Unused7 write Set_Unused7;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
    property VendorName: WideString read Get_VendorName write Set_VendorName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSalesOrderJournal provides a Create and CreateRemote method to          
// create instances of the default interface _SalesOrderJournal exposed by              
// the CoClass SalesOrderJournal. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSalesOrderJournal = class
    class function Create: _SalesOrderJournal;
    class function CreateRemote(const MachineName: string): _SalesOrderJournal;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSalesOrderJournal
// Help String      : 
// Default Interface: _SalesOrderJournal
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSalesOrderJournalProperties= class;
{$ENDIF}
  TSalesOrderJournal = class(TOleServer)
  private
    FIntf:        _SalesOrderJournal;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSalesOrderJournalProperties;
    function      GetServerProperties: TSalesOrderJournalProperties;
{$ENDIF}
    function      GetDefaultInterface: _SalesOrderJournal;
  protected
    procedure InitServerData; override;
    function Get_ARAccount: WideString;
    procedure Set_ARAccount(const Param1: WideString);
    function Get_ARAmount: Double;
    procedure Set_ARAmount(Param1: Double);
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_CloseSalesOrder: WordBool;
    procedure Set_CloseSalesOrder(Param1: WordBool);
    function Get_CustomerIndex: Integer;
    procedure Set_CustomerIndex(Param1: Integer);
    function Get_CustomerName: WideString;
    procedure Set_CustomerName(const Param1: WideString);
    function Get_CustomerPO: WideString;
    procedure Set_CustomerPO(const Param1: WideString);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DateDue: OleVariant;
    procedure Set_DateDue(Param1: OleVariant);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCustomerIndex(Index: Smallint): Integer;
    procedure Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailExtension(Index: Smallint): Double;
    procedure Set_DetailExtension(Index: Smallint; Param2: Double);
    function Get_DetailFreightFlag(Index: Smallint): WordBool;
    procedure Set_DetailFreightFlag(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailSalesTaxAuthority(Index: Smallint): WideString;
    procedure Set_DetailSalesTaxAuthority(Index: Smallint; const Param2: WideString);
    function Get_DetailShippedAmount(Index: Smallint): Double;
    procedure Set_DetailShippedAmount(Index: Smallint; Param2: Double);
    function Get_DetailShippedQuantity(Index: Smallint): Double;
    procedure Set_DetailShippedQuantity(Index: Smallint; Param2: Double);
    function Get_DetailSOLine(Index: Smallint): Byte;
    procedure Set_DetailSOLine(Index: Smallint; Param2: Byte);
    function Get_DetailSOLine2(Index: Smallint): Smallint;
    procedure Set_DetailSOLine2(Index: Smallint; Param2: Smallint);
    function Get_DetailStockingQuantityOrdered(Index: Smallint): Double;
    procedure Set_DetailStockingQuantityOrdered(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantityShipped(Index: Smallint): Double;
    procedure Set_DetailStockingQuantityShipped(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTaxFlag(Index: Smallint): WordBool;
    procedure Set_DetailTaxFlag(Index: Smallint; Param2: WordBool);
    function Get_DetailTaxType(Index: Smallint): Smallint;
    procedure Set_DetailTaxType(Index: Smallint; Param2: Smallint);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUMGUID(Index: Smallint): WideString;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnused1(Index: Smallint): Byte;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Byte);
    function Get_DetailUnknown2(Index: Smallint): Byte;
    procedure Set_DetailUnknown2(Index: Smallint; Param2: Byte);
    function Get_DetailUnused3(Index: Smallint): Byte;
    procedure Set_DetailUnused3(Index: Smallint; Param2: Byte);
    function Get_DiscountDate: OleVariant;
    procedure Set_DiscountDate(Param1: OleVariant);
    function Get_DropShip: WordBool;
    procedure Set_DropShip(Param1: WordBool);
    function Get_DropShipCustomerIndex: Integer;
    procedure Set_DropShipCustomerIndex(Param1: Integer);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_InternalNote: WideString;
    procedure Set_InternalNote(const Param1: WideString);
    function Get_InvoiceNumber: WideString;
    procedure Set_InvoiceNumber(const Param1: WideString);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NextSONumber: WideString;
    procedure Set_NextSONumber(const Param1: WideString);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_NotePrintsAfterItems: WordBool;
    procedure Set_NotePrintsAfterItems(Param1: WordBool);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_NumSOLines: Byte;
    procedure Set_NumSOLines(Param1: Byte);
    function Get_NumSOLines2: Smallint;
    procedure Set_NumSOLines2(Param1: Smallint);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_PrintBeforeInvoiceReference: WordBool;
    procedure Set_PrintBeforeInvoiceReference(Param1: WordBool);
    function Get_QuoteGoodThruDate: OleVariant;
    procedure Set_QuoteGoodThruDate(Param1: OleVariant);
    function Get_QuoteNumber: WideString;
    procedure Set_QuoteNumber(const Param1: WideString);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_SalesRepID: WideString;
    procedure Set_SalesRepID(const Param1: WideString);
    function Get_SalesTaxCode: WideString;
    procedure Set_SalesTaxCode(const Param1: WideString);
    function Get_ShipByDate: OleVariant;
    procedure Set_ShipByDate(Param1: OleVariant);
    function Get_ShipToAddr1: WideString;
    procedure Set_ShipToAddr1(const Param1: WideString);
    function Get_ShipToAddr2: WideString;
    procedure Set_ShipToAddr2(const Param1: WideString);
    function Get_ShipToCity: WideString;
    procedure Set_ShipToCity(const Param1: WideString);
    function Get_ShipToCountry: WideString;
    procedure Set_ShipToCountry(const Param1: WideString);
    function Get_ShipToName: WideString;
    procedure Set_ShipToName(const Param1: WideString);
    function Get_ShipToState: WideString;
    procedure Set_ShipToState(const Param1: WideString);
    function Get_ShipToZipCode: WideString;
    procedure Set_ShipToZipCode(const Param1: WideString);
    function Get_ShipVia: WideString;
    procedure Set_ShipVia(const Param1: WideString);
    function Get_StatementNote: WideString;
    procedure Set_StatementNote(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_Terms: WideString;
    procedure Set_Terms(const Param1: WideString);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Double;
    procedure Set_Unused3(Param1: Double);
    function Get_Unused4: Integer;
    procedure Set_Unused4(Param1: Integer);
    function Get_Unused5: Byte;
    procedure Set_Unused5(Param1: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused7(Index: Smallint): Byte;
    procedure Set_Unused7(Index: Smallint; Param2: Byte);
    function Get_Unused8: Double;
    procedure Set_Unused8(Param1: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SalesOrderJournal);
    procedure Disconnect; override;
    function ClearRecord: Smallint;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetEqual(NRecord: Integer): Smallint;
    function IncrementBatchCount: Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function ReadFirst(Period: Smallint): Smallint;
    function ReadFirstForCustomer(Index: Integer): Smallint;
    function ReadNext: Smallint;
    function ReadNextByCustomer: Smallint;
    function Update: Smallint;
    property DefaultInterface: _SalesOrderJournal read GetDefaultInterface;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DateDue: OleVariant read Get_DateDue write Set_DateDue;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailCustomerIndex[Index: Smallint]: Integer read Get_DetailCustomerIndex write Set_DetailCustomerIndex;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailExtension[Index: Smallint]: Double read Get_DetailExtension write Set_DetailExtension;
    property DetailFreightFlag[Index: Smallint]: WordBool read Get_DetailFreightFlag write Set_DetailFreightFlag;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailGUID[Index: Smallint]: WideString read Get_DetailGUID write Set_DetailGUID;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailLineNo[Index: Smallint]: Smallint read Get_DetailLineNo write Set_DetailLineNo;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailSalesTaxAuthority[Index: Smallint]: WideString read Get_DetailSalesTaxAuthority write Set_DetailSalesTaxAuthority;
    property DetailShippedAmount[Index: Smallint]: Double read Get_DetailShippedAmount write Set_DetailShippedAmount;
    property DetailShippedQuantity[Index: Smallint]: Double read Get_DetailShippedQuantity write Set_DetailShippedQuantity;
    property DetailSOLine[Index: Smallint]: Byte read Get_DetailSOLine write Set_DetailSOLine;
    property DetailSOLine2[Index: Smallint]: Smallint read Get_DetailSOLine2 write Set_DetailSOLine2;
    property DetailStockingQuantityOrdered[Index: Smallint]: Double read Get_DetailStockingQuantityOrdered write Set_DetailStockingQuantityOrdered;
    property DetailStockingQuantityShipped[Index: Smallint]: Double read Get_DetailStockingQuantityShipped write Set_DetailStockingQuantityShipped;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTaxFlag[Index: Smallint]: WordBool read Get_DetailTaxFlag write Set_DetailTaxFlag;
    property DetailTaxType[Index: Smallint]: Smallint read Get_DetailTaxType write Set_DetailTaxType;
    property DetailTrxType[Index: Smallint]: Integer read Get_DetailTrxType write Set_DetailTrxType;
    property DetailUMGUID[Index: Smallint]: WideString read Get_DetailUMGUID write Set_DetailUMGUID;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnused1[Index: Smallint]: Byte read Get_DetailUnused1 write Set_DetailUnused1;
    property DetailUnknown2[Index: Smallint]: Byte read Get_DetailUnknown2 write Set_DetailUnknown2;
    property DetailUnused3[Index: Smallint]: Byte read Get_DetailUnused3 write Set_DetailUnused3;
    property DiscountDate: OleVariant read Get_DiscountDate write Set_DiscountDate;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumber[Period: Smallint]: Smallint read Get_MaxTrxNumber;
    property MaxTrxNumberL[Period: Smallint]: Integer read Get_MaxTrxNumberL;
    property QuoteGoodThruDate: OleVariant read Get_QuoteGoodThruDate write Set_QuoteGoodThruDate;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property ShipByDate: OleVariant read Get_ShipByDate write Set_ShipByDate;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property Unused2[Index: Smallint]: Byte read Get_Unused2 write Set_Unused2;
    property Unused6[Index: Smallint]: Byte read Get_Unused6 write Set_Unused6;
    property Unused7[Index: Smallint]: Byte read Get_Unused7 write Set_Unused7;
    property ARAccount: WideString read Get_ARAccount write Set_ARAccount;
    property ARAmount: Double read Get_ARAmount write Set_ARAmount;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CloseSalesOrder: WordBool read Get_CloseSalesOrder write Set_CloseSalesOrder;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property CustomerPO: WideString read Get_CustomerPO write Set_CustomerPO;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property InvoiceNumber: WideString read Get_InvoiceNumber write Set_InvoiceNumber;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NextSONumber: WideString read Get_NextSONumber write Set_NextSONumber;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumSOLines: Byte read Get_NumSOLines write Set_NumSOLines;
    property NumSOLines2: Smallint read Get_NumSOLines2 write Set_NumSOLines2;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property PrintBeforeInvoiceReference: WordBool read Get_PrintBeforeInvoiceReference write Set_PrintBeforeInvoiceReference;
    property QuoteNumber: WideString read Get_QuoteNumber write Set_QuoteNumber;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property ShipToAddr1: WideString read Get_ShipToAddr1 write Set_ShipToAddr1;
    property ShipToAddr2: WideString read Get_ShipToAddr2 write Set_ShipToAddr2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property StatementNote: WideString read Get_StatementNote write Set_StatementNote;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused3: Double read Get_Unused3 write Set_Unused3;
    property Unused4: Integer read Get_Unused4 write Set_Unused4;
    property Unused5: Byte read Get_Unused5 write Set_Unused5;
    property Unused8: Double read Get_Unused8 write Set_Unused8;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSalesOrderJournalProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSalesOrderJournal
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSalesOrderJournalProperties = class(TPersistent)
  private
    FServer:    TSalesOrderJournal;
    function    GetDefaultInterface: _SalesOrderJournal;
    constructor Create(AServer: TSalesOrderJournal);
  protected
    function Get_ARAccount: WideString;
    procedure Set_ARAccount(const Param1: WideString);
    function Get_ARAmount: Double;
    procedure Set_ARAmount(Param1: Double);
    function Get_BeginningBalanceFlag: WordBool;
    procedure Set_BeginningBalanceFlag(Param1: WordBool);
    function Get_CloseSalesOrder: WordBool;
    procedure Set_CloseSalesOrder(Param1: WordBool);
    function Get_CustomerIndex: Integer;
    procedure Set_CustomerIndex(Param1: Integer);
    function Get_CustomerName: WideString;
    procedure Set_CustomerName(const Param1: WideString);
    function Get_CustomerPO: WideString;
    procedure Set_CustomerPO(const Param1: WideString);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DateDue: OleVariant;
    procedure Set_DateDue(Param1: OleVariant);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailCustomerIndex(Index: Smallint): Integer;
    procedure Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailExtension(Index: Smallint): Double;
    procedure Set_DetailExtension(Index: Smallint; Param2: Double);
    function Get_DetailFreightFlag(Index: Smallint): WordBool;
    procedure Set_DetailFreightFlag(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailGUID(Index: Smallint): WideString;
    procedure Set_DetailGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailLineNo(Index: Smallint): Smallint;
    procedure Set_DetailLineNo(Index: Smallint; Param2: Smallint);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailSalesTaxAuthority(Index: Smallint): WideString;
    procedure Set_DetailSalesTaxAuthority(Index: Smallint; const Param2: WideString);
    function Get_DetailShippedAmount(Index: Smallint): Double;
    procedure Set_DetailShippedAmount(Index: Smallint; Param2: Double);
    function Get_DetailShippedQuantity(Index: Smallint): Double;
    procedure Set_DetailShippedQuantity(Index: Smallint; Param2: Double);
    function Get_DetailSOLine(Index: Smallint): Byte;
    procedure Set_DetailSOLine(Index: Smallint; Param2: Byte);
    function Get_DetailSOLine2(Index: Smallint): Smallint;
    procedure Set_DetailSOLine2(Index: Smallint; Param2: Smallint);
    function Get_DetailStockingQuantityOrdered(Index: Smallint): Double;
    procedure Set_DetailStockingQuantityOrdered(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantityShipped(Index: Smallint): Double;
    procedure Set_DetailStockingQuantityShipped(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTaxFlag(Index: Smallint): WordBool;
    procedure Set_DetailTaxFlag(Index: Smallint; Param2: WordBool);
    function Get_DetailTaxType(Index: Smallint): Smallint;
    procedure Set_DetailTaxType(Index: Smallint; Param2: Smallint);
    function Get_DetailTrxType(Index: Smallint): Integer;
    procedure Set_DetailTrxType(Index: Smallint; Param2: Integer);
    function Get_DetailUMGUID(Index: Smallint): WideString;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnused1(Index: Smallint): Byte;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Byte);
    function Get_DetailUnknown2(Index: Smallint): Byte;
    procedure Set_DetailUnknown2(Index: Smallint; Param2: Byte);
    function Get_DetailUnused3(Index: Smallint): Byte;
    procedure Set_DetailUnused3(Index: Smallint; Param2: Byte);
    function Get_DiscountDate: OleVariant;
    procedure Set_DiscountDate(Param1: OleVariant);
    function Get_DropShip: WordBool;
    procedure Set_DropShip(Param1: WordBool);
    function Get_DropShipCustomerIndex: Integer;
    procedure Set_DropShipCustomerIndex(Param1: Integer);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_InternalNote: WideString;
    procedure Set_InternalNote(const Param1: WideString);
    function Get_InvoiceNumber: WideString;
    procedure Set_InvoiceNumber(const Param1: WideString);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumber(Period: Smallint): Smallint;
    function Get_MaxTrxNumberL(Period: Smallint): Integer;
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_NextSONumber: WideString;
    procedure Set_NextSONumber(const Param1: WideString);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_NotePrintsAfterItems: WordBool;
    procedure Set_NotePrintsAfterItems(Param1: WordBool);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_NumSOLines: Byte;
    procedure Set_NumSOLines(Param1: Byte);
    function Get_NumSOLines2: Smallint;
    procedure Set_NumSOLines2(Param1: Smallint);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_PrintBeforeInvoiceReference: WordBool;
    procedure Set_PrintBeforeInvoiceReference(Param1: WordBool);
    function Get_QuoteGoodThruDate: OleVariant;
    procedure Set_QuoteGoodThruDate(Param1: OleVariant);
    function Get_QuoteNumber: WideString;
    procedure Set_QuoteNumber(const Param1: WideString);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_SalesRepID: WideString;
    procedure Set_SalesRepID(const Param1: WideString);
    function Get_SalesTaxCode: WideString;
    procedure Set_SalesTaxCode(const Param1: WideString);
    function Get_ShipByDate: OleVariant;
    procedure Set_ShipByDate(Param1: OleVariant);
    function Get_ShipToAddr1: WideString;
    procedure Set_ShipToAddr1(const Param1: WideString);
    function Get_ShipToAddr2: WideString;
    procedure Set_ShipToAddr2(const Param1: WideString);
    function Get_ShipToCity: WideString;
    procedure Set_ShipToCity(const Param1: WideString);
    function Get_ShipToCountry: WideString;
    procedure Set_ShipToCountry(const Param1: WideString);
    function Get_ShipToName: WideString;
    procedure Set_ShipToName(const Param1: WideString);
    function Get_ShipToState: WideString;
    procedure Set_ShipToState(const Param1: WideString);
    function Get_ShipToZipCode: WideString;
    procedure Set_ShipToZipCode(const Param1: WideString);
    function Get_ShipVia: WideString;
    procedure Set_ShipVia(const Param1: WideString);
    function Get_StatementNote: WideString;
    procedure Set_StatementNote(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_Terms: WideString;
    procedure Set_Terms(const Param1: WideString);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_Unused1: Smallint;
    procedure Set_Unused1(Param1: Smallint);
    function Get_Unused2(Index: Smallint): Byte;
    procedure Set_Unused2(Index: Smallint; Param2: Byte);
    function Get_Unused3: Double;
    procedure Set_Unused3(Param1: Double);
    function Get_Unused4: Integer;
    procedure Set_Unused4(Param1: Integer);
    function Get_Unused5: Byte;
    procedure Set_Unused5(Param1: Byte);
    function Get_Unused6(Index: Smallint): Byte;
    procedure Set_Unused6(Index: Smallint; Param2: Byte);
    function Get_Unused7(Index: Smallint): Byte;
    procedure Set_Unused7(Index: Smallint; Param2: Byte);
    function Get_Unused8: Double;
    procedure Set_Unused8(Param1: Double);
  public
    property DefaultInterface: _SalesOrderJournal read GetDefaultInterface;
  published
    property ARAccount: WideString read Get_ARAccount write Set_ARAccount;
    property ARAmount: Double read Get_ARAmount write Set_ARAmount;
    property BeginningBalanceFlag: WordBool read Get_BeginningBalanceFlag write Set_BeginningBalanceFlag;
    property CloseSalesOrder: WordBool read Get_CloseSalesOrder write Set_CloseSalesOrder;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property CustomerName: WideString read Get_CustomerName write Set_CustomerName;
    property CustomerPO: WideString read Get_CustomerPO write Set_CustomerPO;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property InvoiceNumber: WideString read Get_InvoiceNumber write Set_InvoiceNumber;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property NextSONumber: WideString read Get_NextSONumber write Set_NextSONumber;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumSOLines: Byte read Get_NumSOLines write Set_NumSOLines;
    property NumSOLines2: Smallint read Get_NumSOLines2 write Set_NumSOLines2;
    property Period: Smallint read Get_Period write Set_Period;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property PrintBeforeInvoiceReference: WordBool read Get_PrintBeforeInvoiceReference write Set_PrintBeforeInvoiceReference;
    property QuoteNumber: WideString read Get_QuoteNumber write Set_QuoteNumber;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property ShipToAddr1: WideString read Get_ShipToAddr1 write Set_ShipToAddr1;
    property ShipToAddr2: WideString read Get_ShipToAddr2 write Set_ShipToAddr2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property StatementNote: WideString read Get_StatementNote write Set_StatementNote;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property Unused1: Smallint read Get_Unused1 write Set_Unused1;
    property Unused3: Double read Get_Unused3 write Set_Unused3;
    property Unused4: Integer read Get_Unused4 write Set_Unused4;
    property Unused5: Byte read Get_Unused5 write Set_Unused5;
    property Unused8: Double read Get_Unused8 write Set_Unused8;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoPhase provides a Create and CreateRemote method to          
// create instances of the default interface _Phase exposed by              
// the CoClass Phase. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPhase = class
    class function Create: _Phase;
    class function CreateRemote(const MachineName: string): _Phase;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPhase
// Help String      : 
// Default Interface: _Phase
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TPhaseProperties= class;
{$ENDIF}
  TPhase = class(TOleServer)
  private
    FIntf:        _Phase;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TPhaseProperties;
    function      GetServerProperties: TPhaseProperties;
{$ENDIF}
    function      GetDefaultInterface: _Phase;
  protected
    procedure InitServerData; override;
    function Get_CostType: WideString;
    procedure Set_CostType(const Param1: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_PhaseID: WideString;
    procedure Set_PhaseID(const Param1: WideString);
    function Get_UseCostCodes: WordBool;
    procedure Set_UseCostCodes(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Phase);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(const ID: WideString): Smallint;
    function GetForIndex(Index: Integer): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _Phase read GetDefaultInterface;
    property CostType: WideString read Get_CostType write Set_CostType;
    property Description: WideString read Get_Description write Set_Description;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property PhaseID: WideString read Get_PhaseID write Set_PhaseID;
    property UseCostCodes: WordBool read Get_UseCostCodes write Set_UseCostCodes;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TPhaseProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TPhase
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TPhaseProperties = class(TPersistent)
  private
    FServer:    TPhase;
    function    GetDefaultInterface: _Phase;
    constructor Create(AServer: TPhase);
  protected
    function Get_CostType: WideString;
    procedure Set_CostType(const Param1: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_PhaseID: WideString;
    procedure Set_PhaseID(const Param1: WideString);
    function Get_UseCostCodes: WordBool;
    procedure Set_UseCostCodes(Param1: WordBool);
  public
    property DefaultInterface: _Phase read GetDefaultInterface;
  published
    property CostType: WideString read Get_CostType write Set_CostType;
    property Description: WideString read Get_Description write Set_Description;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Index: Integer read Get_Index write Set_Index;
    property PhaseID: WideString read Get_PhaseID write Set_PhaseID;
    property UseCostCodes: WordBool read Get_UseCostCodes write Set_UseCostCodes;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoReceiptTag provides a Create and CreateRemote method to          
// create instances of the default interface _ReceiptTag exposed by              
// the CoClass ReceiptTag. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReceiptTag = class
    class function Create: _ReceiptTag;
    class function CreateRemote(const MachineName: string): _ReceiptTag;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TReceiptTag
// Help String      : 
// Default Interface: _ReceiptTag
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TReceiptTagProperties= class;
{$ENDIF}
  TReceiptTag = class(TOleServer)
  private
    FIntf:        _ReceiptTag;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TReceiptTagProperties;
    function      GetServerProperties: TReceiptTagProperties;
{$ENDIF}
    function      GetDefaultInterface: _ReceiptTag;
  protected
    procedure InitServerData; override;
    function Get_JournalIDA: Smallint;
    procedure Set_JournalIDA(Param1: Smallint);
    function Get_JournalIDB: Smallint;
    procedure Set_JournalIDB(Param1: Smallint);
    function Get_KeyA: Double;
    procedure Set_KeyA(Param1: Double);
    function Get_KeyB: Double;
    procedure Set_KeyB(Param1: Double);
    function Get_NRecordA: Integer;
    procedure Set_NRecordA(Param1: Integer);
    function Get_NRecordB: Integer;
    procedure Set_NRecordB(Param1: Integer);
    function Get_PeriodA: Smallint;
    procedure Set_PeriodA(Param1: Smallint);
    function Get_PeriodB: Smallint;
    procedure Set_PeriodB(Param1: Smallint);
    function Get_Subindex1A: Byte;
    procedure Set_Subindex1A(Param1: Byte);
    function Get_Subindex1B: Byte;
    procedure Set_Subindex1B(Param1: Byte);
    function Get_Subindex2A: Byte;
    procedure Set_Subindex2A(Param1: Byte);
    function Get_Subindex2B: Byte;
    procedure Set_Subindex2B(Param1: Byte);
    function Get_TrxNumberA: Smallint;
    procedure Set_TrxNumberA(Param1: Smallint);
    function Get_TrxNumberB: Smallint;
    procedure Set_TrxNumberB(Param1: Smallint);
    function Get_TrxNumberLA: Integer;
    procedure Set_TrxNumberLA(Param1: Integer);
    function Get_TrxNumberLB: Integer;
    procedure Set_TrxNumberLB(Param1: Integer);
    function Get_UnknownDate: OleVariant;
    procedure Set_UnknownDate(Param1: OleVariant);
    function Get_Unknown1: Smallint;
    procedure Set_Unknown1(Param1: Smallint);
    function Get_Unknown2: Double;
    procedure Set_Unknown2(Param1: Double);
    function Get_Unknown3: Byte;
    procedure Set_Unknown3(Param1: Byte);
    function Get_Unknown4: Byte;
    procedure Set_Unknown4(Param1: Byte);
    function Get_Unknown5: Byte;
    procedure Set_Unknown5(Param1: Byte);
    function Get_Unknown6: Byte;
    procedure Set_Unknown6(Param1: Byte);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _ReceiptTag);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _ReceiptTag read GetDefaultInterface;
    property UnknownDate: OleVariant read Get_UnknownDate write Set_UnknownDate;
    property JournalIDA: Smallint read Get_JournalIDA write Set_JournalIDA;
    property JournalIDB: Smallint read Get_JournalIDB write Set_JournalIDB;
    property KeyA: Double read Get_KeyA write Set_KeyA;
    property KeyB: Double read Get_KeyB write Set_KeyB;
    property NRecordA: Integer read Get_NRecordA write Set_NRecordA;
    property NRecordB: Integer read Get_NRecordB write Set_NRecordB;
    property PeriodA: Smallint read Get_PeriodA write Set_PeriodA;
    property PeriodB: Smallint read Get_PeriodB write Set_PeriodB;
    property Subindex1A: Byte read Get_Subindex1A write Set_Subindex1A;
    property Subindex1B: Byte read Get_Subindex1B write Set_Subindex1B;
    property Subindex2A: Byte read Get_Subindex2A write Set_Subindex2A;
    property Subindex2B: Byte read Get_Subindex2B write Set_Subindex2B;
    property TrxNumberA: Smallint read Get_TrxNumberA write Set_TrxNumberA;
    property TrxNumberB: Smallint read Get_TrxNumberB write Set_TrxNumberB;
    property TrxNumberLA: Integer read Get_TrxNumberLA write Set_TrxNumberLA;
    property TrxNumberLB: Integer read Get_TrxNumberLB write Set_TrxNumberLB;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Double read Get_Unknown2 write Set_Unknown2;
    property Unknown3: Byte read Get_Unknown3 write Set_Unknown3;
    property Unknown4: Byte read Get_Unknown4 write Set_Unknown4;
    property Unknown5: Byte read Get_Unknown5 write Set_Unknown5;
    property Unknown6: Byte read Get_Unknown6 write Set_Unknown6;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TReceiptTagProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TReceiptTag
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TReceiptTagProperties = class(TPersistent)
  private
    FServer:    TReceiptTag;
    function    GetDefaultInterface: _ReceiptTag;
    constructor Create(AServer: TReceiptTag);
  protected
    function Get_JournalIDA: Smallint;
    procedure Set_JournalIDA(Param1: Smallint);
    function Get_JournalIDB: Smallint;
    procedure Set_JournalIDB(Param1: Smallint);
    function Get_KeyA: Double;
    procedure Set_KeyA(Param1: Double);
    function Get_KeyB: Double;
    procedure Set_KeyB(Param1: Double);
    function Get_NRecordA: Integer;
    procedure Set_NRecordA(Param1: Integer);
    function Get_NRecordB: Integer;
    procedure Set_NRecordB(Param1: Integer);
    function Get_PeriodA: Smallint;
    procedure Set_PeriodA(Param1: Smallint);
    function Get_PeriodB: Smallint;
    procedure Set_PeriodB(Param1: Smallint);
    function Get_Subindex1A: Byte;
    procedure Set_Subindex1A(Param1: Byte);
    function Get_Subindex1B: Byte;
    procedure Set_Subindex1B(Param1: Byte);
    function Get_Subindex2A: Byte;
    procedure Set_Subindex2A(Param1: Byte);
    function Get_Subindex2B: Byte;
    procedure Set_Subindex2B(Param1: Byte);
    function Get_TrxNumberA: Smallint;
    procedure Set_TrxNumberA(Param1: Smallint);
    function Get_TrxNumberB: Smallint;
    procedure Set_TrxNumberB(Param1: Smallint);
    function Get_TrxNumberLA: Integer;
    procedure Set_TrxNumberLA(Param1: Integer);
    function Get_TrxNumberLB: Integer;
    procedure Set_TrxNumberLB(Param1: Integer);
    function Get_UnknownDate: OleVariant;
    procedure Set_UnknownDate(Param1: OleVariant);
    function Get_Unknown1: Smallint;
    procedure Set_Unknown1(Param1: Smallint);
    function Get_Unknown2: Double;
    procedure Set_Unknown2(Param1: Double);
    function Get_Unknown3: Byte;
    procedure Set_Unknown3(Param1: Byte);
    function Get_Unknown4: Byte;
    procedure Set_Unknown4(Param1: Byte);
    function Get_Unknown5: Byte;
    procedure Set_Unknown5(Param1: Byte);
    function Get_Unknown6: Byte;
    procedure Set_Unknown6(Param1: Byte);
  public
    property DefaultInterface: _ReceiptTag read GetDefaultInterface;
  published
    property JournalIDA: Smallint read Get_JournalIDA write Set_JournalIDA;
    property JournalIDB: Smallint read Get_JournalIDB write Set_JournalIDB;
    property KeyA: Double read Get_KeyA write Set_KeyA;
    property KeyB: Double read Get_KeyB write Set_KeyB;
    property NRecordA: Integer read Get_NRecordA write Set_NRecordA;
    property NRecordB: Integer read Get_NRecordB write Set_NRecordB;
    property PeriodA: Smallint read Get_PeriodA write Set_PeriodA;
    property PeriodB: Smallint read Get_PeriodB write Set_PeriodB;
    property Subindex1A: Byte read Get_Subindex1A write Set_Subindex1A;
    property Subindex1B: Byte read Get_Subindex1B write Set_Subindex1B;
    property Subindex2A: Byte read Get_Subindex2A write Set_Subindex2A;
    property Subindex2B: Byte read Get_Subindex2B write Set_Subindex2B;
    property TrxNumberA: Smallint read Get_TrxNumberA write Set_TrxNumberA;
    property TrxNumberB: Smallint read Get_TrxNumberB write Set_TrxNumberB;
    property TrxNumberLA: Integer read Get_TrxNumberLA write Set_TrxNumberLA;
    property TrxNumberLB: Integer read Get_TrxNumberLB write Set_TrxNumberLB;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Double read Get_Unknown2 write Set_Unknown2;
    property Unknown3: Byte read Get_Unknown3 write Set_Unknown3;
    property Unknown4: Byte read Get_Unknown4 write Set_Unknown4;
    property Unknown5: Byte read Get_Unknown5 write Set_Unknown5;
    property Unknown6: Byte read Get_Unknown6 write Set_Unknown6;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMemorizedTransactions provides a Create and CreateRemote method to          
// create instances of the default interface _MemorizedTransactions exposed by              
// the CoClass MemorizedTransactions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMemorizedTransactions = class
    class function Create: _MemorizedTransactions;
    class function CreateRemote(const MachineName: string): _MemorizedTransactions;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMemorizedTransactions
// Help String      : 
// Default Interface: _MemorizedTransactions
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMemorizedTransactionsProperties= class;
{$ENDIF}
  TMemorizedTransactions = class(TOleServer)
  private
    FIntf:        _MemorizedTransactions;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMemorizedTransactionsProperties;
    function      GetServerProperties: TMemorizedTransactionsProperties;
{$ENDIF}
    function      GetDefaultInterface: _MemorizedTransactions;
  protected
    procedure InitServerData; override;
    function Get_Account: WideString;
    procedure Set_Account(const Param1: WideString);
    function Get_AddrAddr1: WideString;
    procedure Set_AddrAddr1(const Param1: WideString);
    function Get_AddrAddr2: WideString;
    procedure Set_AddrAddr2(const Param1: WideString);
    function Get_AddrCity: WideString;
    procedure Set_AddrCity(const Param1: WideString);
    function Get_AddrCountry: WideString;
    procedure Set_AddrCountry(const Param1: WideString);
    function Get_AddressPresent: WordBool;
    procedure Set_AddressPresent(Param1: WordBool);
    function Get_AddrName: WideString;
    procedure Set_AddrName(const Param1: WideString);
    function Get_AddrState: WideString;
    procedure Set_AddrState(const Param1: WideString);
    function Get_AddrZipCode: WideString;
    procedure Set_AddrZipCode(const Param1: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailFreightFlag(Index: Smallint): WordBool;
    procedure Set_DetailFreightFlag(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTaxCode(Index: Smallint): Smallint;
    procedure Set_DetailTaxCode(Index: Smallint; Param2: Smallint);
    function Get_DetailUMGUID(Index: Smallint): WideString;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnused1(Index: Smallint): Smallint;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Smallint);
    function Get_DetailUnused2(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_DetailUnused2(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_DetailUnused3(Index: Smallint): Smallint;
    procedure Set_DetailUnused3(Index: Smallint; Param2: Smallint);
    function Get_DetailUnused4(Index: Smallint): Byte;
    procedure Set_DetailUnused4(Index: Smallint; Param2: Byte);
    function Get_DetailUnused5(Index: Smallint): Byte;
    procedure Set_DetailUnused5(Index: Smallint; Param2: Byte);
    function Get_DetailUnused6(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_DetailUnused6(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_DropShip: WordBool;
    procedure Set_DropShip(Param1: WordBool);
    function Get_DropShipCustomerIndex: Integer;
    procedure Set_DropShipCustomerIndex(Param1: Integer);
    function Get_ID: WideString;
    procedure Set_ID(const Param1: WideString);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_Memo: WideString;
    procedure Set_Memo(const Param1: WideString);
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_RecordType: Smallint;
    procedure Set_RecordType(Param1: Smallint);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_ReverseTransaction: WordBool;
    procedure Set_ReverseTransaction(Param1: WordBool);
    function Get_ShipToIndex: Smallint;
    procedure Set_ShipToIndex(Param1: Smallint);
    function Get_TotalAmount: Double;
    procedure Set_TotalAmount(Param1: Double);
    function Get_TransactionID: WideString;
    procedure Set_TransactionID(const Param1: WideString);
    function Get_Unknown1: Smallint;
    procedure Set_Unknown1(Param1: Smallint);
    function Get_Unknown2: Smallint;
    procedure Set_Unknown2(Param1: Smallint);
    function Get_Unused3(Index: Smallint): Byte;
    procedure Set_Unused3(Index: Smallint; Param2: Byte);
    function Get_Unused4: Smallint;
    procedure Set_Unused4(Param1: Smallint);
    function Get_Unused5: Byte;
    procedure Set_Unused5(Param1: Byte);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _MemorizedTransactions);
    procedure Disconnect; override;
    function ClearRecord: Smallint;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _MemorizedTransactions read GetDefaultInterface;
    property DetailAmount[Index: Smallint]: Double read Get_DetailAmount write Set_DetailAmount;
    property DetailCostIndex[Index: Smallint]: Integer read Get_DetailCostIndex write Set_DetailCostIndex;
    property DetailDescription[Index: Smallint]: WideString read Get_DetailDescription write Set_DetailDescription;
    property DetailFreightFlag[Index: Smallint]: WordBool read Get_DetailFreightFlag write Set_DetailFreightFlag;
    property DetailGLAccount[Index: Smallint]: WideString read Get_DetailGLAccount write Set_DetailGLAccount;
    property DetailItemIndex[Index: Smallint]: Integer read Get_DetailItemIndex write Set_DetailItemIndex;
    property DetailJobIndex[Index: Smallint]: Integer read Get_DetailJobIndex write Set_DetailJobIndex;
    property DetailPhaseIndex[Index: Smallint]: Integer read Get_DetailPhaseIndex write Set_DetailPhaseIndex;
    property DetailQuantity[Index: Smallint]: Double read Get_DetailQuantity write Set_DetailQuantity;
    property DetailStockingQuantity[Index: Smallint]: Double read Get_DetailStockingQuantity write Set_DetailStockingQuantity;
    property DetailStockingUnitPrice[Index: Smallint]: Double read Get_DetailStockingUnitPrice write Set_DetailStockingUnitPrice;
    property DetailTaxCode[Index: Smallint]: Smallint read Get_DetailTaxCode write Set_DetailTaxCode;
    property DetailUMGUID[Index: Smallint]: WideString read Get_DetailUMGUID write Set_DetailUMGUID;
    property DetailUnitPrice[Index: Smallint]: Double read Get_DetailUnitPrice write Set_DetailUnitPrice;
    property DetailUnused1[Index: Smallint]: Smallint read Get_DetailUnused1 write Set_DetailUnused1;
    property DetailUnused2[Index1: Smallint; Index2: Smallint]: Byte read Get_DetailUnused2 write Set_DetailUnused2;
    property DetailUnused3[Index: Smallint]: Smallint read Get_DetailUnused3 write Set_DetailUnused3;
    property DetailUnused4[Index: Smallint]: Byte read Get_DetailUnused4 write Set_DetailUnused4;
    property DetailUnused5[Index: Smallint]: Byte read Get_DetailUnused5 write Set_DetailUnused5;
    property DetailUnused6[Index1: Smallint; Index2: Smallint]: Byte read Get_DetailUnused6 write Set_DetailUnused6;
    property Unused3[Index: Smallint]: Byte read Get_Unused3 write Set_Unused3;
    property Account: WideString read Get_Account write Set_Account;
    property AddrAddr1: WideString read Get_AddrAddr1 write Set_AddrAddr1;
    property AddrAddr2: WideString read Get_AddrAddr2 write Set_AddrAddr2;
    property AddrCity: WideString read Get_AddrCity write Set_AddrCity;
    property AddrCountry: WideString read Get_AddrCountry write Set_AddrCountry;
    property AddressPresent: WordBool read Get_AddressPresent write Set_AddressPresent;
    property AddrName: WideString read Get_AddrName write Set_AddrName;
    property AddrState: WideString read Get_AddrState write Set_AddrState;
    property AddrZipCode: WideString read Get_AddrZipCode write Set_AddrZipCode;
    property Description: WideString read Get_Description write Set_Description;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property ID: WideString read Get_ID write Set_ID;
    property Index: Integer read Get_Index write Set_Index;
    property Memo: WideString read Get_Memo write Set_Memo;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property RecordType: Smallint read Get_RecordType write Set_RecordType;
    property Reference: WideString read Get_Reference write Set_Reference;
    property ReverseTransaction: WordBool read Get_ReverseTransaction write Set_ReverseTransaction;
    property ShipToIndex: Smallint read Get_ShipToIndex write Set_ShipToIndex;
    property TotalAmount: Double read Get_TotalAmount write Set_TotalAmount;
    property TransactionID: WideString read Get_TransactionID write Set_TransactionID;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unused5: Byte read Get_Unused5 write Set_Unused5;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMemorizedTransactionsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMemorizedTransactions
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMemorizedTransactionsProperties = class(TPersistent)
  private
    FServer:    TMemorizedTransactions;
    function    GetDefaultInterface: _MemorizedTransactions;
    constructor Create(AServer: TMemorizedTransactions);
  protected
    function Get_Account: WideString;
    procedure Set_Account(const Param1: WideString);
    function Get_AddrAddr1: WideString;
    procedure Set_AddrAddr1(const Param1: WideString);
    function Get_AddrAddr2: WideString;
    procedure Set_AddrAddr2(const Param1: WideString);
    function Get_AddrCity: WideString;
    procedure Set_AddrCity(const Param1: WideString);
    function Get_AddrCountry: WideString;
    procedure Set_AddrCountry(const Param1: WideString);
    function Get_AddressPresent: WordBool;
    procedure Set_AddressPresent(Param1: WordBool);
    function Get_AddrName: WideString;
    procedure Set_AddrName(const Param1: WideString);
    function Get_AddrState: WideString;
    procedure Set_AddrState(const Param1: WideString);
    function Get_AddrZipCode: WideString;
    procedure Set_AddrZipCode(const Param1: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_DetailAmount(Index: Smallint): Double;
    procedure Set_DetailAmount(Index: Smallint; Param2: Double);
    function Get_DetailCostIndex(Index: Smallint): Integer;
    procedure Set_DetailCostIndex(Index: Smallint; Param2: Integer);
    function Get_DetailDescription(Index: Smallint): WideString;
    procedure Set_DetailDescription(Index: Smallint; const Param2: WideString);
    function Get_DetailFreightFlag(Index: Smallint): WordBool;
    procedure Set_DetailFreightFlag(Index: Smallint; Param2: WordBool);
    function Get_DetailGLAccount(Index: Smallint): WideString;
    procedure Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
    function Get_DetailItemIndex(Index: Smallint): Integer;
    procedure Set_DetailItemIndex(Index: Smallint; Param2: Integer);
    function Get_DetailJobIndex(Index: Smallint): Integer;
    procedure Set_DetailJobIndex(Index: Smallint; Param2: Integer);
    function Get_DetailPhaseIndex(Index: Smallint): Integer;
    procedure Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
    function Get_DetailQuantity(Index: Smallint): Double;
    procedure Set_DetailQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingQuantity(Index: Smallint): Double;
    procedure Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
    function Get_DetailStockingUnitPrice(Index: Smallint): Double;
    procedure Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailTaxCode(Index: Smallint): Smallint;
    procedure Set_DetailTaxCode(Index: Smallint; Param2: Smallint);
    function Get_DetailUMGUID(Index: Smallint): WideString;
    procedure Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
    function Get_DetailUnitPrice(Index: Smallint): Double;
    procedure Set_DetailUnitPrice(Index: Smallint; Param2: Double);
    function Get_DetailUnused1(Index: Smallint): Smallint;
    procedure Set_DetailUnused1(Index: Smallint; Param2: Smallint);
    function Get_DetailUnused2(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_DetailUnused2(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_DetailUnused3(Index: Smallint): Smallint;
    procedure Set_DetailUnused3(Index: Smallint; Param2: Smallint);
    function Get_DetailUnused4(Index: Smallint): Byte;
    procedure Set_DetailUnused4(Index: Smallint; Param2: Byte);
    function Get_DetailUnused5(Index: Smallint): Byte;
    procedure Set_DetailUnused5(Index: Smallint; Param2: Byte);
    function Get_DetailUnused6(Index1: Smallint; Index2: Smallint): Byte;
    procedure Set_DetailUnused6(Index1: Smallint; Index2: Smallint; Param3: Byte);
    function Get_DropShip: WordBool;
    procedure Set_DropShip(Param1: WordBool);
    function Get_DropShipCustomerIndex: Integer;
    procedure Set_DropShipCustomerIndex(Param1: Integer);
    function Get_ID: WideString;
    procedure Set_ID(const Param1: WideString);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_Memo: WideString;
    procedure Set_Memo(const Param1: WideString);
    function Get_NDistributions: Smallint;
    procedure Set_NDistributions(Param1: Smallint);
    function Get_RecordType: Smallint;
    procedure Set_RecordType(Param1: Smallint);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_ReverseTransaction: WordBool;
    procedure Set_ReverseTransaction(Param1: WordBool);
    function Get_ShipToIndex: Smallint;
    procedure Set_ShipToIndex(Param1: Smallint);
    function Get_TotalAmount: Double;
    procedure Set_TotalAmount(Param1: Double);
    function Get_TransactionID: WideString;
    procedure Set_TransactionID(const Param1: WideString);
    function Get_Unknown1: Smallint;
    procedure Set_Unknown1(Param1: Smallint);
    function Get_Unknown2: Smallint;
    procedure Set_Unknown2(Param1: Smallint);
    function Get_Unused3(Index: Smallint): Byte;
    procedure Set_Unused3(Index: Smallint; Param2: Byte);
    function Get_Unused4: Smallint;
    procedure Set_Unused4(Param1: Smallint);
    function Get_Unused5: Byte;
    procedure Set_Unused5(Param1: Byte);
  public
    property DefaultInterface: _MemorizedTransactions read GetDefaultInterface;
  published
    property Account: WideString read Get_Account write Set_Account;
    property AddrAddr1: WideString read Get_AddrAddr1 write Set_AddrAddr1;
    property AddrAddr2: WideString read Get_AddrAddr2 write Set_AddrAddr2;
    property AddrCity: WideString read Get_AddrCity write Set_AddrCity;
    property AddrCountry: WideString read Get_AddrCountry write Set_AddrCountry;
    property AddressPresent: WordBool read Get_AddressPresent write Set_AddressPresent;
    property AddrName: WideString read Get_AddrName write Set_AddrName;
    property AddrState: WideString read Get_AddrState write Set_AddrState;
    property AddrZipCode: WideString read Get_AddrZipCode write Set_AddrZipCode;
    property Description: WideString read Get_Description write Set_Description;
    property DropShip: WordBool read Get_DropShip write Set_DropShip;
    property DropShipCustomerIndex: Integer read Get_DropShipCustomerIndex write Set_DropShipCustomerIndex;
    property ID: WideString read Get_ID write Set_ID;
    property Index: Integer read Get_Index write Set_Index;
    property Memo: WideString read Get_Memo write Set_Memo;
    property NDistributions: Smallint read Get_NDistributions write Set_NDistributions;
    property RecordType: Smallint read Get_RecordType write Set_RecordType;
    property Reference: WideString read Get_Reference write Set_Reference;
    property ReverseTransaction: WordBool read Get_ReverseTransaction write Set_ReverseTransaction;
    property ShipToIndex: Smallint read Get_ShipToIndex write Set_ShipToIndex;
    property TotalAmount: Double read Get_TotalAmount write Set_TotalAmount;
    property TransactionID: WideString read Get_TransactionID write Set_TransactionID;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unused5: Byte read Get_Unused5 write Set_Unused5;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTaxTable provides a Create and CreateRemote method to          
// create instances of the default interface _TaxTable exposed by              
// the CoClass TaxTable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTaxTable = class
    class function Create: _TaxTable;
    class function CreateRemote(const MachineName: string): _TaxTable;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTaxTable
// Help String      : 
// Default Interface: _TaxTable
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTaxTableProperties= class;
{$ENDIF}
  TTaxTable = class(TOleServer)
  private
    FIntf:        _TaxTable;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTaxTableProperties;
    function      GetServerProperties: TTaxTableProperties;
{$ENDIF}
    function      GetDefaultInterface: _TaxTable;
  protected
    procedure InitServerData; override;
    function Get_Appears: WordBool;
    procedure Set_Appears(Param1: WordBool);
    function Get_CodeID: WideString;
    procedure Set_CodeID(const Param1: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_FilingStatus: Smallint;
    procedure Set_FilingStatus(Param1: Smallint);
    function Get_Formula: WideString;
    procedure Set_Formula(const Param1: WideString);
    function Get_Government: Smallint;
    procedure Set_Government(Param1: Smallint);
    function Get_GrossMoreThan(Index: Smallint): Double;
    procedure Set_GrossMoreThan(Index: Smallint; Param2: Double);
    function Get_LocalName: WideString;
    procedure Set_LocalName(const Param1: WideString);
    function Get_Plus(Index: Smallint): Double;
    procedure Set_Plus(Index: Smallint; Param2: Double);
    function Get_StateName: WideString;
    procedure Set_StateName(const Param1: WideString);
    function Get_V9Flag(Index: Smallint): Byte;
    procedure Set_V9Flag(Index: Smallint; Param2: Byte);
    function Get_Withhold(Index: Smallint): Double;
    procedure Set_Withhold(Index: Smallint; Param2: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TaxTable);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(const ID: WideString): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _TaxTable read GetDefaultInterface;
    property GrossMoreThan[Index: Smallint]: Double read Get_GrossMoreThan write Set_GrossMoreThan;
    property Plus[Index: Smallint]: Double read Get_Plus write Set_Plus;
    property V9Flag[Index: Smallint]: Byte read Get_V9Flag write Set_V9Flag;
    property Withhold[Index: Smallint]: Double read Get_Withhold write Set_Withhold;
    property Appears: WordBool read Get_Appears write Set_Appears;
    property CodeID: WideString read Get_CodeID write Set_CodeID;
    property Description: WideString read Get_Description write Set_Description;
    property FilingStatus: Smallint read Get_FilingStatus write Set_FilingStatus;
    property Formula: WideString read Get_Formula write Set_Formula;
    property Government: Smallint read Get_Government write Set_Government;
    property LocalName: WideString read Get_LocalName write Set_LocalName;
    property StateName: WideString read Get_StateName write Set_StateName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTaxTableProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTaxTable
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTaxTableProperties = class(TPersistent)
  private
    FServer:    TTaxTable;
    function    GetDefaultInterface: _TaxTable;
    constructor Create(AServer: TTaxTable);
  protected
    function Get_Appears: WordBool;
    procedure Set_Appears(Param1: WordBool);
    function Get_CodeID: WideString;
    procedure Set_CodeID(const Param1: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_FilingStatus: Smallint;
    procedure Set_FilingStatus(Param1: Smallint);
    function Get_Formula: WideString;
    procedure Set_Formula(const Param1: WideString);
    function Get_Government: Smallint;
    procedure Set_Government(Param1: Smallint);
    function Get_GrossMoreThan(Index: Smallint): Double;
    procedure Set_GrossMoreThan(Index: Smallint; Param2: Double);
    function Get_LocalName: WideString;
    procedure Set_LocalName(const Param1: WideString);
    function Get_Plus(Index: Smallint): Double;
    procedure Set_Plus(Index: Smallint; Param2: Double);
    function Get_StateName: WideString;
    procedure Set_StateName(const Param1: WideString);
    function Get_V9Flag(Index: Smallint): Byte;
    procedure Set_V9Flag(Index: Smallint; Param2: Byte);
    function Get_Withhold(Index: Smallint): Double;
    procedure Set_Withhold(Index: Smallint; Param2: Double);
  public
    property DefaultInterface: _TaxTable read GetDefaultInterface;
  published
    property Appears: WordBool read Get_Appears write Set_Appears;
    property CodeID: WideString read Get_CodeID write Set_CodeID;
    property Description: WideString read Get_Description write Set_Description;
    property FilingStatus: Smallint read Get_FilingStatus write Set_FilingStatus;
    property Formula: WideString read Get_Formula write Set_Formula;
    property Government: Smallint read Get_Government write Set_Government;
    property LocalName: WideString read Get_LocalName write Set_LocalName;
    property StateName: WideString read Get_StateName write Set_StateName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTicket provides a Create and CreateRemote method to          
// create instances of the default interface _Ticket exposed by              
// the CoClass Ticket. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTicket = class
    class function Create: _Ticket;
    class function CreateRemote(const MachineName: string): _Ticket;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTicket
// Help String      : 
// Default Interface: _Ticket
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTicketProperties= class;
{$ENDIF}
  TTicket = class(TOleServer)
  private
    FIntf:        _Ticket;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTicketProperties;
    function      GetServerProperties: TTicketProperties;
{$ENDIF}
    function      GetDefaultInterface: _Ticket;
  protected
    procedure InitServerData; override;
    function Get_ARUsed: WordBool;
    procedure Set_ARUsed(Param1: WordBool);
    function Get_BillingAmount: Double;
    procedure Set_BillingAmount(Param1: Double);
    function Get_BillingRate: Double;
    procedure Set_BillingRate(Param1: Double);
    function Get_BillingStatus: Smallint;
    procedure Set_BillingStatus(Param1: Smallint);
    function Get_BillingType: Smallint;
    procedure Set_BillingType(Param1: Smallint);
    function Get_BillingUnit: Double;
    procedure Set_BillingUnit(Param1: Double);
    function Get_BreakHours: Smallint;
    procedure Set_BreakHours(Param1: Smallint);
    function Get_BreakMinutes: Smallint;
    procedure Set_BreakMinutes(Param1: Smallint);
    function Get_BreakSeconds: Smallint;
    procedure Set_BreakSeconds(Param1: Smallint);
    function Get_CompletedForID: WideString;
    procedure Set_CompletedForID(const Param1: WideString);
    function Get_CostID: WideString;
    procedure Set_CostID(const Param1: WideString);
    function Get_CustJobAdmin: Smallint;
    procedure Set_CustJobAdmin(Param1: Smallint);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_DurationHours: Smallint;
    procedure Set_DurationHours(Param1: Smallint);
    function Get_DurationMinutes: Smallint;
    procedure Set_DurationMinutes(Param1: Smallint);
    function Get_DurationSeconds: Smallint;
    procedure Set_DurationSeconds(Param1: Smallint);
    function Get_ItemClass: Smallint;
    procedure Set_ItemClass(Param1: Smallint);
    function Get_ItemIndex: Integer;
    procedure Set_ItemIndex(Param1: Integer);
    function Get_LastTicketNumber: WideString;
    function Get_Memo: WideString;
    procedure Set_Memo(const Param1: WideString);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_PayLevel: Smallint;
    procedure Set_PayLevel(Param1: Smallint);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_PhaseID: WideString;
    procedure Set_PhaseID(const Param1: WideString);
    function Get_PRUsed: WordBool;
    procedure Set_PRUsed(Param1: WordBool);
    function Get_RecordedByID: WideString;
    procedure Set_RecordedByID(const Param1: WideString);
    function Get_Reimburse: WordBool;
    procedure Set_Reimburse(Param1: WordBool);
    function Get_StartHours: Smallint;
    procedure Set_StartHours(Param1: Smallint);
    function Get_StartMinutes: Smallint;
    procedure Set_StartMinutes(Param1: Smallint);
    function Get_StartSeconds: Smallint;
    procedure Set_StartSeconds(Param1: Smallint);
    function Get_StartPM: Smallint;
    procedure Set_StartPM(Param1: Smallint);
    function Get_StopHours: Smallint;
    procedure Set_StopHours(Param1: Smallint);
    function Get_StopMinutes: Smallint;
    procedure Set_StopMinutes(Param1: Smallint);
    function Get_StopSeconds: Smallint;
    procedure Set_StopSeconds(Param1: Smallint);
    function Get_StopPM: Smallint;
    procedure Set_StopPM(Param1: Smallint);
    function Get_TicketDate: OleVariant;
    procedure Set_TicketDate(Param1: OleVariant);
    function Get_TicketNumber: WideString;
    procedure Set_TicketNumber(const Param1: WideString);
    function Get_TimedDuration: WordBool;
    procedure Set_TimedDuration(Param1: WordBool);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unused2: Smallint;
    procedure Set_Unused2(Param1: Smallint);
    function Get_Unused3: Smallint;
    procedure Set_Unused3(Param1: Smallint);
    function Get_Unused4: Smallint;
    procedure Set_Unused4(Param1: Smallint);
    function Get_Unused5: Smallint;
    procedure Set_Unused5(Param1: Smallint);
    function Get_Unknown6: Byte;
    procedure Set_Unknown6(Param1: Byte);
    function Get_Unused7: Smallint;
    procedure Set_Unused7(Param1: Smallint);
    function Get_VendorFlag: WordBool;
    procedure Set_VendorFlag(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Ticket);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(const TicketNumber: WideString): Smallint;
    function GetFirst: Smallint;
    function GetGreaterThan(const TicketNumber: WideString): Smallint;
    function GetGreaterThanOrEqual(const TicketNumber: WideString): Smallint;
    function GetLast: Smallint;
    function GetLessThan(const TicketNumber: WideString): Smallint;
    function GetLessThanOrEqual(const TicketNumber: WideString): Smallint;
    function GetNext: Smallint;
    function GetPrevious: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _Ticket read GetDefaultInterface;
    property LastTicketNumber: WideString read Get_LastTicketNumber;
    property TicketDate: OleVariant read Get_TicketDate write Set_TicketDate;
    property Unused1[Index: Smallint]: Byte read Get_Unused1 write Set_Unused1;
    property ARUsed: WordBool read Get_ARUsed write Set_ARUsed;
    property BillingAmount: Double read Get_BillingAmount write Set_BillingAmount;
    property BillingRate: Double read Get_BillingRate write Set_BillingRate;
    property BillingStatus: Smallint read Get_BillingStatus write Set_BillingStatus;
    property BillingType: Smallint read Get_BillingType write Set_BillingType;
    property BillingUnit: Double read Get_BillingUnit write Set_BillingUnit;
    property BreakHours: Smallint read Get_BreakHours write Set_BreakHours;
    property BreakMinutes: Smallint read Get_BreakMinutes write Set_BreakMinutes;
    property BreakSeconds: Smallint read Get_BreakSeconds write Set_BreakSeconds;
    property CompletedForID: WideString read Get_CompletedForID write Set_CompletedForID;
    property CostID: WideString read Get_CostID write Set_CostID;
    property CustJobAdmin: Smallint read Get_CustJobAdmin write Set_CustJobAdmin;
    property Description: WideString read Get_Description write Set_Description;
    property DurationHours: Smallint read Get_DurationHours write Set_DurationHours;
    property DurationMinutes: Smallint read Get_DurationMinutes write Set_DurationMinutes;
    property DurationSeconds: Smallint read Get_DurationSeconds write Set_DurationSeconds;
    property ItemClass: Smallint read Get_ItemClass write Set_ItemClass;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property Memo: WideString read Get_Memo write Set_Memo;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property PayLevel: Smallint read Get_PayLevel write Set_PayLevel;
    property Period: Smallint read Get_Period write Set_Period;
    property PhaseID: WideString read Get_PhaseID write Set_PhaseID;
    property PRUsed: WordBool read Get_PRUsed write Set_PRUsed;
    property RecordedByID: WideString read Get_RecordedByID write Set_RecordedByID;
    property Reimburse: WordBool read Get_Reimburse write Set_Reimburse;
    property StartHours: Smallint read Get_StartHours write Set_StartHours;
    property StartMinutes: Smallint read Get_StartMinutes write Set_StartMinutes;
    property StartSeconds: Smallint read Get_StartSeconds write Set_StartSeconds;
    property StartPM: Smallint read Get_StartPM write Set_StartPM;
    property StopHours: Smallint read Get_StopHours write Set_StopHours;
    property StopMinutes: Smallint read Get_StopMinutes write Set_StopMinutes;
    property StopSeconds: Smallint read Get_StopSeconds write Set_StopSeconds;
    property StopPM: Smallint read Get_StopPM write Set_StopPM;
    property TicketNumber: WideString read Get_TicketNumber write Set_TicketNumber;
    property TimedDuration: WordBool read Get_TimedDuration write Set_TimedDuration;
    property Unused2: Smallint read Get_Unused2 write Set_Unused2;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unused5: Smallint read Get_Unused5 write Set_Unused5;
    property Unknown6: Byte read Get_Unknown6 write Set_Unknown6;
    property Unused7: Smallint read Get_Unused7 write Set_Unused7;
    property VendorFlag: WordBool read Get_VendorFlag write Set_VendorFlag;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTicketProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTicket
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTicketProperties = class(TPersistent)
  private
    FServer:    TTicket;
    function    GetDefaultInterface: _Ticket;
    constructor Create(AServer: TTicket);
  protected
    function Get_ARUsed: WordBool;
    procedure Set_ARUsed(Param1: WordBool);
    function Get_BillingAmount: Double;
    procedure Set_BillingAmount(Param1: Double);
    function Get_BillingRate: Double;
    procedure Set_BillingRate(Param1: Double);
    function Get_BillingStatus: Smallint;
    procedure Set_BillingStatus(Param1: Smallint);
    function Get_BillingType: Smallint;
    procedure Set_BillingType(Param1: Smallint);
    function Get_BillingUnit: Double;
    procedure Set_BillingUnit(Param1: Double);
    function Get_BreakHours: Smallint;
    procedure Set_BreakHours(Param1: Smallint);
    function Get_BreakMinutes: Smallint;
    procedure Set_BreakMinutes(Param1: Smallint);
    function Get_BreakSeconds: Smallint;
    procedure Set_BreakSeconds(Param1: Smallint);
    function Get_CompletedForID: WideString;
    procedure Set_CompletedForID(const Param1: WideString);
    function Get_CostID: WideString;
    procedure Set_CostID(const Param1: WideString);
    function Get_CustJobAdmin: Smallint;
    procedure Set_CustJobAdmin(Param1: Smallint);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_DurationHours: Smallint;
    procedure Set_DurationHours(Param1: Smallint);
    function Get_DurationMinutes: Smallint;
    procedure Set_DurationMinutes(Param1: Smallint);
    function Get_DurationSeconds: Smallint;
    procedure Set_DurationSeconds(Param1: Smallint);
    function Get_ItemClass: Smallint;
    procedure Set_ItemClass(Param1: Smallint);
    function Get_ItemIndex: Integer;
    procedure Set_ItemIndex(Param1: Integer);
    function Get_LastTicketNumber: WideString;
    function Get_Memo: WideString;
    procedure Set_Memo(const Param1: WideString);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_PayLevel: Smallint;
    procedure Set_PayLevel(Param1: Smallint);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_PhaseID: WideString;
    procedure Set_PhaseID(const Param1: WideString);
    function Get_PRUsed: WordBool;
    procedure Set_PRUsed(Param1: WordBool);
    function Get_RecordedByID: WideString;
    procedure Set_RecordedByID(const Param1: WideString);
    function Get_Reimburse: WordBool;
    procedure Set_Reimburse(Param1: WordBool);
    function Get_StartHours: Smallint;
    procedure Set_StartHours(Param1: Smallint);
    function Get_StartMinutes: Smallint;
    procedure Set_StartMinutes(Param1: Smallint);
    function Get_StartSeconds: Smallint;
    procedure Set_StartSeconds(Param1: Smallint);
    function Get_StartPM: Smallint;
    procedure Set_StartPM(Param1: Smallint);
    function Get_StopHours: Smallint;
    procedure Set_StopHours(Param1: Smallint);
    function Get_StopMinutes: Smallint;
    procedure Set_StopMinutes(Param1: Smallint);
    function Get_StopSeconds: Smallint;
    procedure Set_StopSeconds(Param1: Smallint);
    function Get_StopPM: Smallint;
    procedure Set_StopPM(Param1: Smallint);
    function Get_TicketDate: OleVariant;
    procedure Set_TicketDate(Param1: OleVariant);
    function Get_TicketNumber: WideString;
    procedure Set_TicketNumber(const Param1: WideString);
    function Get_TimedDuration: WordBool;
    procedure Set_TimedDuration(Param1: WordBool);
    function Get_Unused1(Index: Smallint): Byte;
    procedure Set_Unused1(Index: Smallint; Param2: Byte);
    function Get_Unused2: Smallint;
    procedure Set_Unused2(Param1: Smallint);
    function Get_Unused3: Smallint;
    procedure Set_Unused3(Param1: Smallint);
    function Get_Unused4: Smallint;
    procedure Set_Unused4(Param1: Smallint);
    function Get_Unused5: Smallint;
    procedure Set_Unused5(Param1: Smallint);
    function Get_Unknown6: Byte;
    procedure Set_Unknown6(Param1: Byte);
    function Get_Unused7: Smallint;
    procedure Set_Unused7(Param1: Smallint);
    function Get_VendorFlag: WordBool;
    procedure Set_VendorFlag(Param1: WordBool);
  public
    property DefaultInterface: _Ticket read GetDefaultInterface;
  published
    property ARUsed: WordBool read Get_ARUsed write Set_ARUsed;
    property BillingAmount: Double read Get_BillingAmount write Set_BillingAmount;
    property BillingRate: Double read Get_BillingRate write Set_BillingRate;
    property BillingStatus: Smallint read Get_BillingStatus write Set_BillingStatus;
    property BillingType: Smallint read Get_BillingType write Set_BillingType;
    property BillingUnit: Double read Get_BillingUnit write Set_BillingUnit;
    property BreakHours: Smallint read Get_BreakHours write Set_BreakHours;
    property BreakMinutes: Smallint read Get_BreakMinutes write Set_BreakMinutes;
    property BreakSeconds: Smallint read Get_BreakSeconds write Set_BreakSeconds;
    property CompletedForID: WideString read Get_CompletedForID write Set_CompletedForID;
    property CostID: WideString read Get_CostID write Set_CostID;
    property CustJobAdmin: Smallint read Get_CustJobAdmin write Set_CustJobAdmin;
    property Description: WideString read Get_Description write Set_Description;
    property DurationHours: Smallint read Get_DurationHours write Set_DurationHours;
    property DurationMinutes: Smallint read Get_DurationMinutes write Set_DurationMinutes;
    property DurationSeconds: Smallint read Get_DurationSeconds write Set_DurationSeconds;
    property ItemClass: Smallint read Get_ItemClass write Set_ItemClass;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property Memo: WideString read Get_Memo write Set_Memo;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property PayLevel: Smallint read Get_PayLevel write Set_PayLevel;
    property Period: Smallint read Get_Period write Set_Period;
    property PhaseID: WideString read Get_PhaseID write Set_PhaseID;
    property PRUsed: WordBool read Get_PRUsed write Set_PRUsed;
    property RecordedByID: WideString read Get_RecordedByID write Set_RecordedByID;
    property Reimburse: WordBool read Get_Reimburse write Set_Reimburse;
    property StartHours: Smallint read Get_StartHours write Set_StartHours;
    property StartMinutes: Smallint read Get_StartMinutes write Set_StartMinutes;
    property StartSeconds: Smallint read Get_StartSeconds write Set_StartSeconds;
    property StartPM: Smallint read Get_StartPM write Set_StartPM;
    property StopHours: Smallint read Get_StopHours write Set_StopHours;
    property StopMinutes: Smallint read Get_StopMinutes write Set_StopMinutes;
    property StopSeconds: Smallint read Get_StopSeconds write Set_StopSeconds;
    property StopPM: Smallint read Get_StopPM write Set_StopPM;
    property TicketNumber: WideString read Get_TicketNumber write Set_TicketNumber;
    property TimedDuration: WordBool read Get_TimedDuration write Set_TimedDuration;
    property Unused2: Smallint read Get_Unused2 write Set_Unused2;
    property Unused3: Smallint read Get_Unused3 write Set_Unused3;
    property Unused4: Smallint read Get_Unused4 write Set_Unused4;
    property Unused5: Smallint read Get_Unused5 write Set_Unused5;
    property Unknown6: Byte read Get_Unknown6 write Set_Unknown6;
    property Unused7: Smallint read Get_Unused7 write Set_Unused7;
    property VendorFlag: WordBool read Get_VendorFlag write Set_VendorFlag;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoUser provides a Create and CreateRemote method to          
// create instances of the default interface _User exposed by              
// the CoClass User. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUser = class
    class function Create: _User;
    class function CreateRemote(const MachineName: string): _User;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUser
// Help String      : 
// Default Interface: _User
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TUserProperties= class;
{$ENDIF}
  TUser = class(TOleServer)
  private
    FIntf:        _User;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TUserProperties;
    function      GetServerProperties: TUserProperties;
{$ENDIF}
    function      GetDefaultInterface: _User;
  protected
    procedure InitServerData; override;
    function Get_AccessToMaintainUsers: WordBool;
    procedure Set_AccessToMaintainUsers(Param1: WordBool);
    function Get_CreditCardAccess: Smallint;
    procedure Set_CreditCardAccess(Param1: Smallint);
    function Get_CrystalAccess: Smallint;
    procedure Set_CrystalAccess(Param1: Smallint);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Password: WideString;
    procedure Set_Password(const Param1: WideString);
    function Get_GeneralLedger_Maint_Budgets: Smallint;
    procedure Set_GeneralLedger_Maint_Budgets(Param1: Smallint);
    function Get_GeneralLedger_Maint_ChartOfAccounts: Smallint;
    procedure Set_GeneralLedger_Maint_ChartOfAccounts(Param1: Smallint);
    function Get_GeneralLedger_Maint_ChartOfAccountsBB: Smallint;
    procedure Set_GeneralLedger_Maint_ChartOfAccountsBB(Param1: Smallint);
    function Get_GeneralLedger_Reports_AccountReconcil: Smallint;
    procedure Set_GeneralLedger_Reports_AccountReconcil(Param1: Smallint);
    function Get_GeneralLedger_Reports_FinancialStatement: Smallint;
    procedure Set_GeneralLedger_Reports_FinancialStatement(Param1: Smallint);
    function Get_GeneralLedger_Reports_MasterLists: Smallint;
    procedure Set_GeneralLedger_Reports_MasterLists(Param1: Smallint);
    function Get_GeneralLedger_Reports_TransactionLists: Smallint;
    procedure Set_GeneralLedger_Reports_TransactionLists(Param1: Smallint);
    function Get_GeneralLedger_Tasks_GeneralJournal: Smallint;
    procedure Set_GeneralLedger_Tasks_GeneralJournal(Param1: Smallint);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inventory_Maint_InventoryItems: Smallint;
    procedure Set_Inventory_Maint_InventoryItems(Param1: Smallint);
    function Get_Inventory_Maint_InventoryItemsBB: Smallint;
    procedure Set_Inventory_Maint_InventoryItemsBB(Param1: Smallint);
    function Get_Inventory_Maint_MultipleItemPrices: Smallint;
    procedure Set_Inventory_Maint_MultipleItemPrices(Param1: Smallint);
    function Get_Inventory_Maint_Revisions: Smallint;
    procedure Set_Inventory_Maint_Revisions(Param1: Smallint);
    function Get_Inventory_Maint_UnitMeasures: Smallint;
    procedure Set_Inventory_Maint_UnitMeasures(Param1: Smallint);
    function Get_Inventory_Reports_Forms: Smallint;
    procedure Set_Inventory_Reports_Forms(Param1: Smallint);
    function Get_Inventory_Reports_MasterLists: Smallint;
    procedure Set_Inventory_Reports_MasterLists(Param1: Smallint);
    function Get_Inventory_Reports_OtherReports: Smallint;
    procedure Set_Inventory_Reports_OtherReports(Param1: Smallint);
    function Get_Inventory_Reports_TransactionLists: Smallint;
    procedure Set_Inventory_Reports_TransactionLists(Param1: Smallint);
    function Get_Inventory_Tasks_Inventory: Smallint;
    procedure Set_Inventory_Tasks_Inventory(Param1: Smallint);
    function Get_Inventory_Tasks_WorkTickets: Smallint;
    procedure Set_Inventory_Tasks_WorkTickets(Param1: Smallint);
    function Get_Payroll_Maint_EmployeesSalesReps: Smallint;
    procedure Set_Payroll_Maint_EmployeesSalesReps(Param1: Smallint);
    function Get_Payroll_Maint_EmployeesSalesRepsBB: Smallint;
    procedure Set_Payroll_Maint_EmployeesSalesRepsBB(Param1: Smallint);
    function Get_Payroll_Maint_PayrollTaxTables: Smallint;
    procedure Set_Payroll_Maint_PayrollTaxTables(Param1: Smallint);
    function Get_Payroll_Reports_Forms: Smallint;
    procedure Set_Payroll_Reports_Forms(Param1: Smallint);
    function Get_Payroll_Reports_MasterLists: Smallint;
    procedure Set_Payroll_Reports_MasterLists(Param1: Smallint);
    function Get_Payroll_Reports_MailMerge: Smallint;
    procedure Set_Payroll_Reports_MailMerge(Param1: Smallint);
    function Get_Payroll_Reports_OtherReports: Smallint;
    procedure Set_Payroll_Reports_OtherReports(Param1: Smallint);
    function Get_Payroll_Reports_TransactionLists: Smallint;
    procedure Set_Payroll_Reports_TransactionLists(Param1: Smallint);
    function Get_Payroll_Tasks_PayrollEntry: Smallint;
    procedure Set_Payroll_Tasks_PayrollEntry(Param1: Smallint);
    function Get_Payroll_Tasks_VoidPRChecks: Smallint;
    procedure Set_Payroll_Tasks_VoidPRChecks(Param1: Smallint);
    function Get_Purchases_Maint_Vendors: Smallint;
    procedure Set_Purchases_Maint_Vendors(Param1: Smallint);
    function Get_Purchases_Maint_VendorsBB: Smallint;
    procedure Set_Purchases_Maint_VendorsBB(Param1: Smallint);
    function Get_Purchases_Reports_Forms: Smallint;
    procedure Set_Purchases_Reports_Forms(Param1: Smallint);
    function Get_Purchases_Reports_MasterLists: Smallint;
    procedure Set_Purchases_Reports_MasterLists(Param1: Smallint);
    function Get_Purchases_Reports_MailMerge: Smallint;
    procedure Set_Purchases_Reports_MailMerge(Param1: Smallint);
    function Get_Purchases_Reports_OtherReports: Smallint;
    procedure Set_Purchases_Reports_OtherReports(Param1: Smallint);
    function Get_Purchases_Reports_TransactionLists: Smallint;
    procedure Set_Purchases_Reports_TransactionLists(Param1: Smallint);
    function Get_Purchases_Tasks_Payments: Smallint;
    procedure Set_Purchases_Tasks_Payments(Param1: Smallint);
    function Get_Purchases_Tasks_PurchaseOrders: Smallint;
    procedure Set_Purchases_Tasks_PurchaseOrders(Param1: Smallint);
    function Get_Purchases_Tasks_PurchasesInventory: Smallint;
    procedure Set_Purchases_Tasks_PurchasesInventory(Param1: Smallint);
    function Get_Purchases_Tasks_VendorCreditMemos: Smallint;
    procedure Set_Purchases_Tasks_VendorCreditMemos(Param1: Smallint);
    function Get_Purchases_Tasks_VoidChecks: Smallint;
    procedure Set_Purchases_Tasks_VoidChecks(Param1: Smallint);
    function Get_Sales_Maint_CustomerPaymentDefaults: Smallint;
    procedure Set_Sales_Maint_CustomerPaymentDefaults(Param1: Smallint);
    function Get_Sales_Maint_Customers: Smallint;
    procedure Set_Sales_Maint_Customers(Param1: Smallint);
    function Get_Sales_Maint_CustomersProspectsBB: Smallint;
    procedure Set_Sales_Maint_CustomersProspectsBB(Param1: Smallint);
    function Get_Sales_Reports_Forms: Smallint;
    procedure Set_Sales_Reports_Forms(Param1: Smallint);
    function Get_Sales_Reports_MailMerge: Smallint;
    procedure Set_Sales_Reports_MailMerge(Param1: Smallint);
    function Get_Sales_Reports_MasterLists: Smallint;
    procedure Set_Sales_Reports_MasterLists(Param1: Smallint);
    function Get_Sales_Reports_OtherReports: Smallint;
    procedure Set_Sales_Reports_OtherReports(Param1: Smallint);
    function Get_Sales_Reports_TransactionLists: Smallint;
    procedure Set_Sales_Reports_TransactionLists(Param1: Smallint);
    function Get_Sales_Tasks_CreditMemos: Smallint;
    procedure Set_Sales_Tasks_CreditMemos(Param1: Smallint);
    function Get_Sales_Tasks_Quotes: Smallint;
    procedure Set_Sales_Tasks_Quotes(Param1: Smallint);
    function Get_Sales_Tasks_Receipts: Smallint;
    procedure Set_Sales_Tasks_Receipts(Param1: Smallint);
    function Get_Sales_Tasks_SalesInvoicing: Smallint;
    procedure Set_Sales_Tasks_SalesInvoicing(Param1: Smallint);
    function Get_Sales_Tasks_SalesOrders: Smallint;
    procedure Set_Sales_Tasks_SalesOrders(Param1: Smallint);
    function Get_Sales_Tasks_Shipment: Smallint;
    procedure Set_Sales_Tasks_Shipment(Param1: Smallint);
    function Get_Sales_Tasks_ShipmentRegistrationWizard: Smallint;
    procedure Set_Sales_Tasks_ShipmentRegistrationWizard(Param1: Smallint);
    function Get_System_Analysis_CashManager: Smallint;
    procedure Set_System_Analysis_CashManager(Param1: Smallint);
    function Get_System_Analysis_CollectionManager: Smallint;
    procedure Set_System_Analysis_CollectionManager(Param1: Smallint);
    function Get_System_Analysis_FinancialManager: Smallint;
    procedure Set_System_Analysis_FinancialManager(Param1: Smallint);
    function Get_System_Analysis_PaymentManager: Smallint;
    procedure Set_System_Analysis_PaymentManager(Param1: Smallint);
    function Get_System_File_ArchiveCompany: Smallint;
    procedure Set_System_File_ArchiveCompany(Param1: Smallint);
    function Get_System_File_Backup: Smallint;
    procedure Set_System_File_Backup(Param1: Smallint);
    function Get_System_File_ImportExport: Smallint;
    procedure Set_System_File_ImportExport(Param1: Smallint);
    function Get_System_File_IntegrityCheck: Smallint;
    procedure Set_System_File_IntegrityCheck(Param1: Smallint);
    function Get_System_File_NewCompany: Smallint;
    procedure Set_System_File_NewCompany(Param1: Smallint);
    function Get_System_File_OnlineBackup: Smallint;
    procedure Set_System_File_OnlineBackup(Param1: Smallint);
    function Get_System_File_ReconsolidateCompany: Smallint;
    procedure Set_System_File_ReconsolidateCompany(Param1: Smallint);
    function Get_System_File_Restore: Smallint;
    procedure Set_System_File_Restore(Param1: Smallint);
    function Get_System_Modem: Smallint;
    procedure Set_System_Modem(Param1: Smallint);
    function Get_System_Maint_CompanyInformation: Smallint;
    procedure Set_System_Maint_CompanyInformation(Param1: Smallint);
    function Get_System_Maint_ElectronicPayments: Smallint;
    procedure Set_System_Maint_ElectronicPayments(Param1: Smallint);
    function Get_System_Maint_Jobs: Smallint;
    procedure Set_System_Maint_Jobs(Param1: Smallint);
    function Get_System_Options_ActionItemsEventLog: Smallint;
    procedure Set_System_Options_ActionItemsEventLog(Param1: Smallint);
    function Get_System_Options_ChangeSystemDate: Smallint;
    procedure Set_System_Options_ChangeSystemDate(Param1: Smallint);
    function Get_System_Reports_AccountReconcil: Smallint;
    procedure Set_System_Reports_AccountReconcil(Param1: Smallint);
    function Get_System_Reports_AuditTrail: Smallint;
    procedure Set_System_Reports_AuditTrail(Param1: Smallint);
    function Get_System_Reports_ElectronicBillPayment: Smallint;
    procedure Set_System_Reports_ElectronicBillPayment(Param1: Smallint);
    function Get_System_Reports_Jobs: Smallint;
    procedure Set_System_Reports_Jobs(Param1: Smallint);
    function Get_System_Reports_ReportGroups: Smallint;
    procedure Set_System_Reports_ReportGroups(Param1: Smallint);
    function Get_System_Reports_TimeExpense: Smallint;
    procedure Set_System_Reports_TimeExpense(Param1: Smallint);
    function Get_System_Tasks_AccountReconciliation: Smallint;
    procedure Set_System_Tasks_AccountReconciliation(Param1: Smallint);
    function Get_System_Tasks_ActionItems: Smallint;
    procedure Set_System_Tasks_ActionItems(Param1: Smallint);
    function Get_System_Tasks_ChangeAccountingPeriod: Smallint;
    procedure Set_System_Tasks_ChangeAccountingPeriod(Param1: Smallint);
    function Get_System_Tasks_CloseFiscalYear: Smallint;
    procedure Set_System_Tasks_CloseFiscalYear(Param1: Smallint);
    function Get_System_Tasks_ClosePayrollYear: Smallint;
    procedure Set_System_Tasks_ClosePayrollYear(Param1: Smallint);
    function Get_System_Tasks_ElectronicBillPayment: Smallint;
    procedure Set_System_Tasks_ElectronicBillPayment(Param1: Smallint);
    function Get_System_Tasks_FindTransactions: Smallint;
    procedure Set_System_Tasks_FindTransactions(Param1: Smallint);
    function Get_System_Tasks_LinkToOtherApps: Smallint;
    procedure Set_System_Tasks_LinkToOtherApps(Param1: Smallint);
    function Get_System_Tasks_Post: Smallint;
    procedure Set_System_Tasks_Post(Param1: Smallint);
    function Get_System_Tasks_Purge: Smallint;
    procedure Set_System_Tasks_Purge(Param1: Smallint);
    function Get_System_Tasks_TimeAndExpenseTickets: Smallint;
    procedure Set_System_Tasks_TimeAndExpenseTickets(Param1: Smallint);
    function Get_System_Tasks_TransactionsInPriorPeriods: Smallint;
    procedure Set_System_Tasks_TransactionsInPriorPeriods(Param1: Smallint);
    function Get_System_Tasks_Unpost: Smallint;
    procedure Set_System_Tasks_Unpost(Param1: Smallint);
    function Get_Unknown1: Smallint;
    procedure Set_Unknown1(Param1: Smallint);
    function Get_Unknown2: Smallint;
    procedure Set_Unknown2(Param1: Smallint);
    function Get_Unknown3(Index: Smallint): Byte;
    procedure Set_Unknown3(Index: Smallint; Param2: Byte);
    function Get_Unknown4: Smallint;
    procedure Set_Unknown4(Param1: Smallint);
    function Get_UserName: WideString;
    procedure Set_UserName(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _User);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(const ID: WideString): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _User read GetDefaultInterface;
    property Unknown3[Index: Smallint]: Byte read Get_Unknown3 write Set_Unknown3;
    property AccessToMaintainUsers: WordBool read Get_AccessToMaintainUsers write Set_AccessToMaintainUsers;
    property CreditCardAccess: Smallint read Get_CreditCardAccess write Set_CreditCardAccess;
    property CrystalAccess: Smallint read Get_CrystalAccess write Set_CrystalAccess;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Password: WideString read Get_Password write Set_Password;
    property GeneralLedger_Maint_Budgets: Smallint read Get_GeneralLedger_Maint_Budgets write Set_GeneralLedger_Maint_Budgets;
    property GeneralLedger_Maint_ChartOfAccounts: Smallint read Get_GeneralLedger_Maint_ChartOfAccounts write Set_GeneralLedger_Maint_ChartOfAccounts;
    property GeneralLedger_Maint_ChartOfAccountsBB: Smallint read Get_GeneralLedger_Maint_ChartOfAccountsBB write Set_GeneralLedger_Maint_ChartOfAccountsBB;
    property GeneralLedger_Reports_AccountReconcil: Smallint read Get_GeneralLedger_Reports_AccountReconcil write Set_GeneralLedger_Reports_AccountReconcil;
    property GeneralLedger_Reports_FinancialStatement: Smallint read Get_GeneralLedger_Reports_FinancialStatement write Set_GeneralLedger_Reports_FinancialStatement;
    property GeneralLedger_Reports_MasterLists: Smallint read Get_GeneralLedger_Reports_MasterLists write Set_GeneralLedger_Reports_MasterLists;
    property GeneralLedger_Reports_TransactionLists: Smallint read Get_GeneralLedger_Reports_TransactionLists write Set_GeneralLedger_Reports_TransactionLists;
    property GeneralLedger_Tasks_GeneralJournal: Smallint read Get_GeneralLedger_Tasks_GeneralJournal write Set_GeneralLedger_Tasks_GeneralJournal;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inventory_Maint_InventoryItems: Smallint read Get_Inventory_Maint_InventoryItems write Set_Inventory_Maint_InventoryItems;
    property Inventory_Maint_InventoryItemsBB: Smallint read Get_Inventory_Maint_InventoryItemsBB write Set_Inventory_Maint_InventoryItemsBB;
    property Inventory_Maint_MultipleItemPrices: Smallint read Get_Inventory_Maint_MultipleItemPrices write Set_Inventory_Maint_MultipleItemPrices;
    property Inventory_Maint_Revisions: Smallint read Get_Inventory_Maint_Revisions write Set_Inventory_Maint_Revisions;
    property Inventory_Maint_UnitMeasures: Smallint read Get_Inventory_Maint_UnitMeasures write Set_Inventory_Maint_UnitMeasures;
    property Inventory_Reports_Forms: Smallint read Get_Inventory_Reports_Forms write Set_Inventory_Reports_Forms;
    property Inventory_Reports_MasterLists: Smallint read Get_Inventory_Reports_MasterLists write Set_Inventory_Reports_MasterLists;
    property Inventory_Reports_OtherReports: Smallint read Get_Inventory_Reports_OtherReports write Set_Inventory_Reports_OtherReports;
    property Inventory_Reports_TransactionLists: Smallint read Get_Inventory_Reports_TransactionLists write Set_Inventory_Reports_TransactionLists;
    property Inventory_Tasks_Inventory: Smallint read Get_Inventory_Tasks_Inventory write Set_Inventory_Tasks_Inventory;
    property Inventory_Tasks_WorkTickets: Smallint read Get_Inventory_Tasks_WorkTickets write Set_Inventory_Tasks_WorkTickets;
    property Payroll_Maint_EmployeesSalesReps: Smallint read Get_Payroll_Maint_EmployeesSalesReps write Set_Payroll_Maint_EmployeesSalesReps;
    property Payroll_Maint_EmployeesSalesRepsBB: Smallint read Get_Payroll_Maint_EmployeesSalesRepsBB write Set_Payroll_Maint_EmployeesSalesRepsBB;
    property Payroll_Maint_PayrollTaxTables: Smallint read Get_Payroll_Maint_PayrollTaxTables write Set_Payroll_Maint_PayrollTaxTables;
    property Payroll_Reports_Forms: Smallint read Get_Payroll_Reports_Forms write Set_Payroll_Reports_Forms;
    property Payroll_Reports_MasterLists: Smallint read Get_Payroll_Reports_MasterLists write Set_Payroll_Reports_MasterLists;
    property Payroll_Reports_MailMerge: Smallint read Get_Payroll_Reports_MailMerge write Set_Payroll_Reports_MailMerge;
    property Payroll_Reports_OtherReports: Smallint read Get_Payroll_Reports_OtherReports write Set_Payroll_Reports_OtherReports;
    property Payroll_Reports_TransactionLists: Smallint read Get_Payroll_Reports_TransactionLists write Set_Payroll_Reports_TransactionLists;
    property Payroll_Tasks_PayrollEntry: Smallint read Get_Payroll_Tasks_PayrollEntry write Set_Payroll_Tasks_PayrollEntry;
    property Payroll_Tasks_VoidPRChecks: Smallint read Get_Payroll_Tasks_VoidPRChecks write Set_Payroll_Tasks_VoidPRChecks;
    property Purchases_Maint_Vendors: Smallint read Get_Purchases_Maint_Vendors write Set_Purchases_Maint_Vendors;
    property Purchases_Maint_VendorsBB: Smallint read Get_Purchases_Maint_VendorsBB write Set_Purchases_Maint_VendorsBB;
    property Purchases_Reports_Forms: Smallint read Get_Purchases_Reports_Forms write Set_Purchases_Reports_Forms;
    property Purchases_Reports_MasterLists: Smallint read Get_Purchases_Reports_MasterLists write Set_Purchases_Reports_MasterLists;
    property Purchases_Reports_MailMerge: Smallint read Get_Purchases_Reports_MailMerge write Set_Purchases_Reports_MailMerge;
    property Purchases_Reports_OtherReports: Smallint read Get_Purchases_Reports_OtherReports write Set_Purchases_Reports_OtherReports;
    property Purchases_Reports_TransactionLists: Smallint read Get_Purchases_Reports_TransactionLists write Set_Purchases_Reports_TransactionLists;
    property Purchases_Tasks_Payments: Smallint read Get_Purchases_Tasks_Payments write Set_Purchases_Tasks_Payments;
    property Purchases_Tasks_PurchaseOrders: Smallint read Get_Purchases_Tasks_PurchaseOrders write Set_Purchases_Tasks_PurchaseOrders;
    property Purchases_Tasks_PurchasesInventory: Smallint read Get_Purchases_Tasks_PurchasesInventory write Set_Purchases_Tasks_PurchasesInventory;
    property Purchases_Tasks_VendorCreditMemos: Smallint read Get_Purchases_Tasks_VendorCreditMemos write Set_Purchases_Tasks_VendorCreditMemos;
    property Purchases_Tasks_VoidChecks: Smallint read Get_Purchases_Tasks_VoidChecks write Set_Purchases_Tasks_VoidChecks;
    property Sales_Maint_CustomerPaymentDefaults: Smallint read Get_Sales_Maint_CustomerPaymentDefaults write Set_Sales_Maint_CustomerPaymentDefaults;
    property Sales_Maint_Customers: Smallint read Get_Sales_Maint_Customers write Set_Sales_Maint_Customers;
    property Sales_Maint_CustomersProspectsBB: Smallint read Get_Sales_Maint_CustomersProspectsBB write Set_Sales_Maint_CustomersProspectsBB;
    property Sales_Reports_Forms: Smallint read Get_Sales_Reports_Forms write Set_Sales_Reports_Forms;
    property Sales_Reports_MailMerge: Smallint read Get_Sales_Reports_MailMerge write Set_Sales_Reports_MailMerge;
    property Sales_Reports_MasterLists: Smallint read Get_Sales_Reports_MasterLists write Set_Sales_Reports_MasterLists;
    property Sales_Reports_OtherReports: Smallint read Get_Sales_Reports_OtherReports write Set_Sales_Reports_OtherReports;
    property Sales_Reports_TransactionLists: Smallint read Get_Sales_Reports_TransactionLists write Set_Sales_Reports_TransactionLists;
    property Sales_Tasks_CreditMemos: Smallint read Get_Sales_Tasks_CreditMemos write Set_Sales_Tasks_CreditMemos;
    property Sales_Tasks_Quotes: Smallint read Get_Sales_Tasks_Quotes write Set_Sales_Tasks_Quotes;
    property Sales_Tasks_Receipts: Smallint read Get_Sales_Tasks_Receipts write Set_Sales_Tasks_Receipts;
    property Sales_Tasks_SalesInvoicing: Smallint read Get_Sales_Tasks_SalesInvoicing write Set_Sales_Tasks_SalesInvoicing;
    property Sales_Tasks_SalesOrders: Smallint read Get_Sales_Tasks_SalesOrders write Set_Sales_Tasks_SalesOrders;
    property Sales_Tasks_Shipment: Smallint read Get_Sales_Tasks_Shipment write Set_Sales_Tasks_Shipment;
    property Sales_Tasks_ShipmentRegistrationWizard: Smallint read Get_Sales_Tasks_ShipmentRegistrationWizard write Set_Sales_Tasks_ShipmentRegistrationWizard;
    property System_Analysis_CashManager: Smallint read Get_System_Analysis_CashManager write Set_System_Analysis_CashManager;
    property System_Analysis_CollectionManager: Smallint read Get_System_Analysis_CollectionManager write Set_System_Analysis_CollectionManager;
    property System_Analysis_FinancialManager: Smallint read Get_System_Analysis_FinancialManager write Set_System_Analysis_FinancialManager;
    property System_Analysis_PaymentManager: Smallint read Get_System_Analysis_PaymentManager write Set_System_Analysis_PaymentManager;
    property System_File_ArchiveCompany: Smallint read Get_System_File_ArchiveCompany write Set_System_File_ArchiveCompany;
    property System_File_Backup: Smallint read Get_System_File_Backup write Set_System_File_Backup;
    property System_File_ImportExport: Smallint read Get_System_File_ImportExport write Set_System_File_ImportExport;
    property System_File_IntegrityCheck: Smallint read Get_System_File_IntegrityCheck write Set_System_File_IntegrityCheck;
    property System_File_NewCompany: Smallint read Get_System_File_NewCompany write Set_System_File_NewCompany;
    property System_File_OnlineBackup: Smallint read Get_System_File_OnlineBackup write Set_System_File_OnlineBackup;
    property System_File_ReconsolidateCompany: Smallint read Get_System_File_ReconsolidateCompany write Set_System_File_ReconsolidateCompany;
    property System_File_Restore: Smallint read Get_System_File_Restore write Set_System_File_Restore;
    property System_Modem: Smallint read Get_System_Modem write Set_System_Modem;
    property System_Maint_CompanyInformation: Smallint read Get_System_Maint_CompanyInformation write Set_System_Maint_CompanyInformation;
    property System_Maint_ElectronicPayments: Smallint read Get_System_Maint_ElectronicPayments write Set_System_Maint_ElectronicPayments;
    property System_Maint_Jobs: Smallint read Get_System_Maint_Jobs write Set_System_Maint_Jobs;
    property System_Options_ActionItemsEventLog: Smallint read Get_System_Options_ActionItemsEventLog write Set_System_Options_ActionItemsEventLog;
    property System_Options_ChangeSystemDate: Smallint read Get_System_Options_ChangeSystemDate write Set_System_Options_ChangeSystemDate;
    property System_Reports_AccountReconcil: Smallint read Get_System_Reports_AccountReconcil write Set_System_Reports_AccountReconcil;
    property System_Reports_AuditTrail: Smallint read Get_System_Reports_AuditTrail write Set_System_Reports_AuditTrail;
    property System_Reports_ElectronicBillPayment: Smallint read Get_System_Reports_ElectronicBillPayment write Set_System_Reports_ElectronicBillPayment;
    property System_Reports_Jobs: Smallint read Get_System_Reports_Jobs write Set_System_Reports_Jobs;
    property System_Reports_ReportGroups: Smallint read Get_System_Reports_ReportGroups write Set_System_Reports_ReportGroups;
    property System_Reports_TimeExpense: Smallint read Get_System_Reports_TimeExpense write Set_System_Reports_TimeExpense;
    property System_Tasks_AccountReconciliation: Smallint read Get_System_Tasks_AccountReconciliation write Set_System_Tasks_AccountReconciliation;
    property System_Tasks_ActionItems: Smallint read Get_System_Tasks_ActionItems write Set_System_Tasks_ActionItems;
    property System_Tasks_ChangeAccountingPeriod: Smallint read Get_System_Tasks_ChangeAccountingPeriod write Set_System_Tasks_ChangeAccountingPeriod;
    property System_Tasks_CloseFiscalYear: Smallint read Get_System_Tasks_CloseFiscalYear write Set_System_Tasks_CloseFiscalYear;
    property System_Tasks_ClosePayrollYear: Smallint read Get_System_Tasks_ClosePayrollYear write Set_System_Tasks_ClosePayrollYear;
    property System_Tasks_ElectronicBillPayment: Smallint read Get_System_Tasks_ElectronicBillPayment write Set_System_Tasks_ElectronicBillPayment;
    property System_Tasks_FindTransactions: Smallint read Get_System_Tasks_FindTransactions write Set_System_Tasks_FindTransactions;
    property System_Tasks_LinkToOtherApps: Smallint read Get_System_Tasks_LinkToOtherApps write Set_System_Tasks_LinkToOtherApps;
    property System_Tasks_Post: Smallint read Get_System_Tasks_Post write Set_System_Tasks_Post;
    property System_Tasks_Purge: Smallint read Get_System_Tasks_Purge write Set_System_Tasks_Purge;
    property System_Tasks_TimeAndExpenseTickets: Smallint read Get_System_Tasks_TimeAndExpenseTickets write Set_System_Tasks_TimeAndExpenseTickets;
    property System_Tasks_TransactionsInPriorPeriods: Smallint read Get_System_Tasks_TransactionsInPriorPeriods write Set_System_Tasks_TransactionsInPriorPeriods;
    property System_Tasks_Unpost: Smallint read Get_System_Tasks_Unpost write Set_System_Tasks_Unpost;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unknown4: Smallint read Get_Unknown4 write Set_Unknown4;
    property UserName: WideString read Get_UserName write Set_UserName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TUserProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TUser
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TUserProperties = class(TPersistent)
  private
    FServer:    TUser;
    function    GetDefaultInterface: _User;
    constructor Create(AServer: TUser);
  protected
    function Get_AccessToMaintainUsers: WordBool;
    procedure Set_AccessToMaintainUsers(Param1: WordBool);
    function Get_CreditCardAccess: Smallint;
    procedure Set_CreditCardAccess(Param1: Smallint);
    function Get_CrystalAccess: Smallint;
    procedure Set_CrystalAccess(Param1: Smallint);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_Password: WideString;
    procedure Set_Password(const Param1: WideString);
    function Get_GeneralLedger_Maint_Budgets: Smallint;
    procedure Set_GeneralLedger_Maint_Budgets(Param1: Smallint);
    function Get_GeneralLedger_Maint_ChartOfAccounts: Smallint;
    procedure Set_GeneralLedger_Maint_ChartOfAccounts(Param1: Smallint);
    function Get_GeneralLedger_Maint_ChartOfAccountsBB: Smallint;
    procedure Set_GeneralLedger_Maint_ChartOfAccountsBB(Param1: Smallint);
    function Get_GeneralLedger_Reports_AccountReconcil: Smallint;
    procedure Set_GeneralLedger_Reports_AccountReconcil(Param1: Smallint);
    function Get_GeneralLedger_Reports_FinancialStatement: Smallint;
    procedure Set_GeneralLedger_Reports_FinancialStatement(Param1: Smallint);
    function Get_GeneralLedger_Reports_MasterLists: Smallint;
    procedure Set_GeneralLedger_Reports_MasterLists(Param1: Smallint);
    function Get_GeneralLedger_Reports_TransactionLists: Smallint;
    procedure Set_GeneralLedger_Reports_TransactionLists(Param1: Smallint);
    function Get_GeneralLedger_Tasks_GeneralJournal: Smallint;
    procedure Set_GeneralLedger_Tasks_GeneralJournal(Param1: Smallint);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inventory_Maint_InventoryItems: Smallint;
    procedure Set_Inventory_Maint_InventoryItems(Param1: Smallint);
    function Get_Inventory_Maint_InventoryItemsBB: Smallint;
    procedure Set_Inventory_Maint_InventoryItemsBB(Param1: Smallint);
    function Get_Inventory_Maint_MultipleItemPrices: Smallint;
    procedure Set_Inventory_Maint_MultipleItemPrices(Param1: Smallint);
    function Get_Inventory_Maint_Revisions: Smallint;
    procedure Set_Inventory_Maint_Revisions(Param1: Smallint);
    function Get_Inventory_Maint_UnitMeasures: Smallint;
    procedure Set_Inventory_Maint_UnitMeasures(Param1: Smallint);
    function Get_Inventory_Reports_Forms: Smallint;
    procedure Set_Inventory_Reports_Forms(Param1: Smallint);
    function Get_Inventory_Reports_MasterLists: Smallint;
    procedure Set_Inventory_Reports_MasterLists(Param1: Smallint);
    function Get_Inventory_Reports_OtherReports: Smallint;
    procedure Set_Inventory_Reports_OtherReports(Param1: Smallint);
    function Get_Inventory_Reports_TransactionLists: Smallint;
    procedure Set_Inventory_Reports_TransactionLists(Param1: Smallint);
    function Get_Inventory_Tasks_Inventory: Smallint;
    procedure Set_Inventory_Tasks_Inventory(Param1: Smallint);
    function Get_Inventory_Tasks_WorkTickets: Smallint;
    procedure Set_Inventory_Tasks_WorkTickets(Param1: Smallint);
    function Get_Payroll_Maint_EmployeesSalesReps: Smallint;
    procedure Set_Payroll_Maint_EmployeesSalesReps(Param1: Smallint);
    function Get_Payroll_Maint_EmployeesSalesRepsBB: Smallint;
    procedure Set_Payroll_Maint_EmployeesSalesRepsBB(Param1: Smallint);
    function Get_Payroll_Maint_PayrollTaxTables: Smallint;
    procedure Set_Payroll_Maint_PayrollTaxTables(Param1: Smallint);
    function Get_Payroll_Reports_Forms: Smallint;
    procedure Set_Payroll_Reports_Forms(Param1: Smallint);
    function Get_Payroll_Reports_MasterLists: Smallint;
    procedure Set_Payroll_Reports_MasterLists(Param1: Smallint);
    function Get_Payroll_Reports_MailMerge: Smallint;
    procedure Set_Payroll_Reports_MailMerge(Param1: Smallint);
    function Get_Payroll_Reports_OtherReports: Smallint;
    procedure Set_Payroll_Reports_OtherReports(Param1: Smallint);
    function Get_Payroll_Reports_TransactionLists: Smallint;
    procedure Set_Payroll_Reports_TransactionLists(Param1: Smallint);
    function Get_Payroll_Tasks_PayrollEntry: Smallint;
    procedure Set_Payroll_Tasks_PayrollEntry(Param1: Smallint);
    function Get_Payroll_Tasks_VoidPRChecks: Smallint;
    procedure Set_Payroll_Tasks_VoidPRChecks(Param1: Smallint);
    function Get_Purchases_Maint_Vendors: Smallint;
    procedure Set_Purchases_Maint_Vendors(Param1: Smallint);
    function Get_Purchases_Maint_VendorsBB: Smallint;
    procedure Set_Purchases_Maint_VendorsBB(Param1: Smallint);
    function Get_Purchases_Reports_Forms: Smallint;
    procedure Set_Purchases_Reports_Forms(Param1: Smallint);
    function Get_Purchases_Reports_MasterLists: Smallint;
    procedure Set_Purchases_Reports_MasterLists(Param1: Smallint);
    function Get_Purchases_Reports_MailMerge: Smallint;
    procedure Set_Purchases_Reports_MailMerge(Param1: Smallint);
    function Get_Purchases_Reports_OtherReports: Smallint;
    procedure Set_Purchases_Reports_OtherReports(Param1: Smallint);
    function Get_Purchases_Reports_TransactionLists: Smallint;
    procedure Set_Purchases_Reports_TransactionLists(Param1: Smallint);
    function Get_Purchases_Tasks_Payments: Smallint;
    procedure Set_Purchases_Tasks_Payments(Param1: Smallint);
    function Get_Purchases_Tasks_PurchaseOrders: Smallint;
    procedure Set_Purchases_Tasks_PurchaseOrders(Param1: Smallint);
    function Get_Purchases_Tasks_PurchasesInventory: Smallint;
    procedure Set_Purchases_Tasks_PurchasesInventory(Param1: Smallint);
    function Get_Purchases_Tasks_VendorCreditMemos: Smallint;
    procedure Set_Purchases_Tasks_VendorCreditMemos(Param1: Smallint);
    function Get_Purchases_Tasks_VoidChecks: Smallint;
    procedure Set_Purchases_Tasks_VoidChecks(Param1: Smallint);
    function Get_Sales_Maint_CustomerPaymentDefaults: Smallint;
    procedure Set_Sales_Maint_CustomerPaymentDefaults(Param1: Smallint);
    function Get_Sales_Maint_Customers: Smallint;
    procedure Set_Sales_Maint_Customers(Param1: Smallint);
    function Get_Sales_Maint_CustomersProspectsBB: Smallint;
    procedure Set_Sales_Maint_CustomersProspectsBB(Param1: Smallint);
    function Get_Sales_Reports_Forms: Smallint;
    procedure Set_Sales_Reports_Forms(Param1: Smallint);
    function Get_Sales_Reports_MailMerge: Smallint;
    procedure Set_Sales_Reports_MailMerge(Param1: Smallint);
    function Get_Sales_Reports_MasterLists: Smallint;
    procedure Set_Sales_Reports_MasterLists(Param1: Smallint);
    function Get_Sales_Reports_OtherReports: Smallint;
    procedure Set_Sales_Reports_OtherReports(Param1: Smallint);
    function Get_Sales_Reports_TransactionLists: Smallint;
    procedure Set_Sales_Reports_TransactionLists(Param1: Smallint);
    function Get_Sales_Tasks_CreditMemos: Smallint;
    procedure Set_Sales_Tasks_CreditMemos(Param1: Smallint);
    function Get_Sales_Tasks_Quotes: Smallint;
    procedure Set_Sales_Tasks_Quotes(Param1: Smallint);
    function Get_Sales_Tasks_Receipts: Smallint;
    procedure Set_Sales_Tasks_Receipts(Param1: Smallint);
    function Get_Sales_Tasks_SalesInvoicing: Smallint;
    procedure Set_Sales_Tasks_SalesInvoicing(Param1: Smallint);
    function Get_Sales_Tasks_SalesOrders: Smallint;
    procedure Set_Sales_Tasks_SalesOrders(Param1: Smallint);
    function Get_Sales_Tasks_Shipment: Smallint;
    procedure Set_Sales_Tasks_Shipment(Param1: Smallint);
    function Get_Sales_Tasks_ShipmentRegistrationWizard: Smallint;
    procedure Set_Sales_Tasks_ShipmentRegistrationWizard(Param1: Smallint);
    function Get_System_Analysis_CashManager: Smallint;
    procedure Set_System_Analysis_CashManager(Param1: Smallint);
    function Get_System_Analysis_CollectionManager: Smallint;
    procedure Set_System_Analysis_CollectionManager(Param1: Smallint);
    function Get_System_Analysis_FinancialManager: Smallint;
    procedure Set_System_Analysis_FinancialManager(Param1: Smallint);
    function Get_System_Analysis_PaymentManager: Smallint;
    procedure Set_System_Analysis_PaymentManager(Param1: Smallint);
    function Get_System_File_ArchiveCompany: Smallint;
    procedure Set_System_File_ArchiveCompany(Param1: Smallint);
    function Get_System_File_Backup: Smallint;
    procedure Set_System_File_Backup(Param1: Smallint);
    function Get_System_File_ImportExport: Smallint;
    procedure Set_System_File_ImportExport(Param1: Smallint);
    function Get_System_File_IntegrityCheck: Smallint;
    procedure Set_System_File_IntegrityCheck(Param1: Smallint);
    function Get_System_File_NewCompany: Smallint;
    procedure Set_System_File_NewCompany(Param1: Smallint);
    function Get_System_File_OnlineBackup: Smallint;
    procedure Set_System_File_OnlineBackup(Param1: Smallint);
    function Get_System_File_ReconsolidateCompany: Smallint;
    procedure Set_System_File_ReconsolidateCompany(Param1: Smallint);
    function Get_System_File_Restore: Smallint;
    procedure Set_System_File_Restore(Param1: Smallint);
    function Get_System_Modem: Smallint;
    procedure Set_System_Modem(Param1: Smallint);
    function Get_System_Maint_CompanyInformation: Smallint;
    procedure Set_System_Maint_CompanyInformation(Param1: Smallint);
    function Get_System_Maint_ElectronicPayments: Smallint;
    procedure Set_System_Maint_ElectronicPayments(Param1: Smallint);
    function Get_System_Maint_Jobs: Smallint;
    procedure Set_System_Maint_Jobs(Param1: Smallint);
    function Get_System_Options_ActionItemsEventLog: Smallint;
    procedure Set_System_Options_ActionItemsEventLog(Param1: Smallint);
    function Get_System_Options_ChangeSystemDate: Smallint;
    procedure Set_System_Options_ChangeSystemDate(Param1: Smallint);
    function Get_System_Reports_AccountReconcil: Smallint;
    procedure Set_System_Reports_AccountReconcil(Param1: Smallint);
    function Get_System_Reports_AuditTrail: Smallint;
    procedure Set_System_Reports_AuditTrail(Param1: Smallint);
    function Get_System_Reports_ElectronicBillPayment: Smallint;
    procedure Set_System_Reports_ElectronicBillPayment(Param1: Smallint);
    function Get_System_Reports_Jobs: Smallint;
    procedure Set_System_Reports_Jobs(Param1: Smallint);
    function Get_System_Reports_ReportGroups: Smallint;
    procedure Set_System_Reports_ReportGroups(Param1: Smallint);
    function Get_System_Reports_TimeExpense: Smallint;
    procedure Set_System_Reports_TimeExpense(Param1: Smallint);
    function Get_System_Tasks_AccountReconciliation: Smallint;
    procedure Set_System_Tasks_AccountReconciliation(Param1: Smallint);
    function Get_System_Tasks_ActionItems: Smallint;
    procedure Set_System_Tasks_ActionItems(Param1: Smallint);
    function Get_System_Tasks_ChangeAccountingPeriod: Smallint;
    procedure Set_System_Tasks_ChangeAccountingPeriod(Param1: Smallint);
    function Get_System_Tasks_CloseFiscalYear: Smallint;
    procedure Set_System_Tasks_CloseFiscalYear(Param1: Smallint);
    function Get_System_Tasks_ClosePayrollYear: Smallint;
    procedure Set_System_Tasks_ClosePayrollYear(Param1: Smallint);
    function Get_System_Tasks_ElectronicBillPayment: Smallint;
    procedure Set_System_Tasks_ElectronicBillPayment(Param1: Smallint);
    function Get_System_Tasks_FindTransactions: Smallint;
    procedure Set_System_Tasks_FindTransactions(Param1: Smallint);
    function Get_System_Tasks_LinkToOtherApps: Smallint;
    procedure Set_System_Tasks_LinkToOtherApps(Param1: Smallint);
    function Get_System_Tasks_Post: Smallint;
    procedure Set_System_Tasks_Post(Param1: Smallint);
    function Get_System_Tasks_Purge: Smallint;
    procedure Set_System_Tasks_Purge(Param1: Smallint);
    function Get_System_Tasks_TimeAndExpenseTickets: Smallint;
    procedure Set_System_Tasks_TimeAndExpenseTickets(Param1: Smallint);
    function Get_System_Tasks_TransactionsInPriorPeriods: Smallint;
    procedure Set_System_Tasks_TransactionsInPriorPeriods(Param1: Smallint);
    function Get_System_Tasks_Unpost: Smallint;
    procedure Set_System_Tasks_Unpost(Param1: Smallint);
    function Get_Unknown1: Smallint;
    procedure Set_Unknown1(Param1: Smallint);
    function Get_Unknown2: Smallint;
    procedure Set_Unknown2(Param1: Smallint);
    function Get_Unknown3(Index: Smallint): Byte;
    procedure Set_Unknown3(Index: Smallint; Param2: Byte);
    function Get_Unknown4: Smallint;
    procedure Set_Unknown4(Param1: Smallint);
    function Get_UserName: WideString;
    procedure Set_UserName(const Param1: WideString);
  public
    property DefaultInterface: _User read GetDefaultInterface;
  published
    property AccessToMaintainUsers: WordBool read Get_AccessToMaintainUsers write Set_AccessToMaintainUsers;
    property CreditCardAccess: Smallint read Get_CreditCardAccess write Set_CreditCardAccess;
    property CrystalAccess: Smallint read Get_CrystalAccess write Set_CrystalAccess;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property Password: WideString read Get_Password write Set_Password;
    property GeneralLedger_Maint_Budgets: Smallint read Get_GeneralLedger_Maint_Budgets write Set_GeneralLedger_Maint_Budgets;
    property GeneralLedger_Maint_ChartOfAccounts: Smallint read Get_GeneralLedger_Maint_ChartOfAccounts write Set_GeneralLedger_Maint_ChartOfAccounts;
    property GeneralLedger_Maint_ChartOfAccountsBB: Smallint read Get_GeneralLedger_Maint_ChartOfAccountsBB write Set_GeneralLedger_Maint_ChartOfAccountsBB;
    property GeneralLedger_Reports_AccountReconcil: Smallint read Get_GeneralLedger_Reports_AccountReconcil write Set_GeneralLedger_Reports_AccountReconcil;
    property GeneralLedger_Reports_FinancialStatement: Smallint read Get_GeneralLedger_Reports_FinancialStatement write Set_GeneralLedger_Reports_FinancialStatement;
    property GeneralLedger_Reports_MasterLists: Smallint read Get_GeneralLedger_Reports_MasterLists write Set_GeneralLedger_Reports_MasterLists;
    property GeneralLedger_Reports_TransactionLists: Smallint read Get_GeneralLedger_Reports_TransactionLists write Set_GeneralLedger_Reports_TransactionLists;
    property GeneralLedger_Tasks_GeneralJournal: Smallint read Get_GeneralLedger_Tasks_GeneralJournal write Set_GeneralLedger_Tasks_GeneralJournal;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inventory_Maint_InventoryItems: Smallint read Get_Inventory_Maint_InventoryItems write Set_Inventory_Maint_InventoryItems;
    property Inventory_Maint_InventoryItemsBB: Smallint read Get_Inventory_Maint_InventoryItemsBB write Set_Inventory_Maint_InventoryItemsBB;
    property Inventory_Maint_MultipleItemPrices: Smallint read Get_Inventory_Maint_MultipleItemPrices write Set_Inventory_Maint_MultipleItemPrices;
    property Inventory_Maint_Revisions: Smallint read Get_Inventory_Maint_Revisions write Set_Inventory_Maint_Revisions;
    property Inventory_Maint_UnitMeasures: Smallint read Get_Inventory_Maint_UnitMeasures write Set_Inventory_Maint_UnitMeasures;
    property Inventory_Reports_Forms: Smallint read Get_Inventory_Reports_Forms write Set_Inventory_Reports_Forms;
    property Inventory_Reports_MasterLists: Smallint read Get_Inventory_Reports_MasterLists write Set_Inventory_Reports_MasterLists;
    property Inventory_Reports_OtherReports: Smallint read Get_Inventory_Reports_OtherReports write Set_Inventory_Reports_OtherReports;
    property Inventory_Reports_TransactionLists: Smallint read Get_Inventory_Reports_TransactionLists write Set_Inventory_Reports_TransactionLists;
    property Inventory_Tasks_Inventory: Smallint read Get_Inventory_Tasks_Inventory write Set_Inventory_Tasks_Inventory;
    property Inventory_Tasks_WorkTickets: Smallint read Get_Inventory_Tasks_WorkTickets write Set_Inventory_Tasks_WorkTickets;
    property Payroll_Maint_EmployeesSalesReps: Smallint read Get_Payroll_Maint_EmployeesSalesReps write Set_Payroll_Maint_EmployeesSalesReps;
    property Payroll_Maint_EmployeesSalesRepsBB: Smallint read Get_Payroll_Maint_EmployeesSalesRepsBB write Set_Payroll_Maint_EmployeesSalesRepsBB;
    property Payroll_Maint_PayrollTaxTables: Smallint read Get_Payroll_Maint_PayrollTaxTables write Set_Payroll_Maint_PayrollTaxTables;
    property Payroll_Reports_Forms: Smallint read Get_Payroll_Reports_Forms write Set_Payroll_Reports_Forms;
    property Payroll_Reports_MasterLists: Smallint read Get_Payroll_Reports_MasterLists write Set_Payroll_Reports_MasterLists;
    property Payroll_Reports_MailMerge: Smallint read Get_Payroll_Reports_MailMerge write Set_Payroll_Reports_MailMerge;
    property Payroll_Reports_OtherReports: Smallint read Get_Payroll_Reports_OtherReports write Set_Payroll_Reports_OtherReports;
    property Payroll_Reports_TransactionLists: Smallint read Get_Payroll_Reports_TransactionLists write Set_Payroll_Reports_TransactionLists;
    property Payroll_Tasks_PayrollEntry: Smallint read Get_Payroll_Tasks_PayrollEntry write Set_Payroll_Tasks_PayrollEntry;
    property Payroll_Tasks_VoidPRChecks: Smallint read Get_Payroll_Tasks_VoidPRChecks write Set_Payroll_Tasks_VoidPRChecks;
    property Purchases_Maint_Vendors: Smallint read Get_Purchases_Maint_Vendors write Set_Purchases_Maint_Vendors;
    property Purchases_Maint_VendorsBB: Smallint read Get_Purchases_Maint_VendorsBB write Set_Purchases_Maint_VendorsBB;
    property Purchases_Reports_Forms: Smallint read Get_Purchases_Reports_Forms write Set_Purchases_Reports_Forms;
    property Purchases_Reports_MasterLists: Smallint read Get_Purchases_Reports_MasterLists write Set_Purchases_Reports_MasterLists;
    property Purchases_Reports_MailMerge: Smallint read Get_Purchases_Reports_MailMerge write Set_Purchases_Reports_MailMerge;
    property Purchases_Reports_OtherReports: Smallint read Get_Purchases_Reports_OtherReports write Set_Purchases_Reports_OtherReports;
    property Purchases_Reports_TransactionLists: Smallint read Get_Purchases_Reports_TransactionLists write Set_Purchases_Reports_TransactionLists;
    property Purchases_Tasks_Payments: Smallint read Get_Purchases_Tasks_Payments write Set_Purchases_Tasks_Payments;
    property Purchases_Tasks_PurchaseOrders: Smallint read Get_Purchases_Tasks_PurchaseOrders write Set_Purchases_Tasks_PurchaseOrders;
    property Purchases_Tasks_PurchasesInventory: Smallint read Get_Purchases_Tasks_PurchasesInventory write Set_Purchases_Tasks_PurchasesInventory;
    property Purchases_Tasks_VendorCreditMemos: Smallint read Get_Purchases_Tasks_VendorCreditMemos write Set_Purchases_Tasks_VendorCreditMemos;
    property Purchases_Tasks_VoidChecks: Smallint read Get_Purchases_Tasks_VoidChecks write Set_Purchases_Tasks_VoidChecks;
    property Sales_Maint_CustomerPaymentDefaults: Smallint read Get_Sales_Maint_CustomerPaymentDefaults write Set_Sales_Maint_CustomerPaymentDefaults;
    property Sales_Maint_Customers: Smallint read Get_Sales_Maint_Customers write Set_Sales_Maint_Customers;
    property Sales_Maint_CustomersProspectsBB: Smallint read Get_Sales_Maint_CustomersProspectsBB write Set_Sales_Maint_CustomersProspectsBB;
    property Sales_Reports_Forms: Smallint read Get_Sales_Reports_Forms write Set_Sales_Reports_Forms;
    property Sales_Reports_MailMerge: Smallint read Get_Sales_Reports_MailMerge write Set_Sales_Reports_MailMerge;
    property Sales_Reports_MasterLists: Smallint read Get_Sales_Reports_MasterLists write Set_Sales_Reports_MasterLists;
    property Sales_Reports_OtherReports: Smallint read Get_Sales_Reports_OtherReports write Set_Sales_Reports_OtherReports;
    property Sales_Reports_TransactionLists: Smallint read Get_Sales_Reports_TransactionLists write Set_Sales_Reports_TransactionLists;
    property Sales_Tasks_CreditMemos: Smallint read Get_Sales_Tasks_CreditMemos write Set_Sales_Tasks_CreditMemos;
    property Sales_Tasks_Quotes: Smallint read Get_Sales_Tasks_Quotes write Set_Sales_Tasks_Quotes;
    property Sales_Tasks_Receipts: Smallint read Get_Sales_Tasks_Receipts write Set_Sales_Tasks_Receipts;
    property Sales_Tasks_SalesInvoicing: Smallint read Get_Sales_Tasks_SalesInvoicing write Set_Sales_Tasks_SalesInvoicing;
    property Sales_Tasks_SalesOrders: Smallint read Get_Sales_Tasks_SalesOrders write Set_Sales_Tasks_SalesOrders;
    property Sales_Tasks_Shipment: Smallint read Get_Sales_Tasks_Shipment write Set_Sales_Tasks_Shipment;
    property Sales_Tasks_ShipmentRegistrationWizard: Smallint read Get_Sales_Tasks_ShipmentRegistrationWizard write Set_Sales_Tasks_ShipmentRegistrationWizard;
    property System_Analysis_CashManager: Smallint read Get_System_Analysis_CashManager write Set_System_Analysis_CashManager;
    property System_Analysis_CollectionManager: Smallint read Get_System_Analysis_CollectionManager write Set_System_Analysis_CollectionManager;
    property System_Analysis_FinancialManager: Smallint read Get_System_Analysis_FinancialManager write Set_System_Analysis_FinancialManager;
    property System_Analysis_PaymentManager: Smallint read Get_System_Analysis_PaymentManager write Set_System_Analysis_PaymentManager;
    property System_File_ArchiveCompany: Smallint read Get_System_File_ArchiveCompany write Set_System_File_ArchiveCompany;
    property System_File_Backup: Smallint read Get_System_File_Backup write Set_System_File_Backup;
    property System_File_ImportExport: Smallint read Get_System_File_ImportExport write Set_System_File_ImportExport;
    property System_File_IntegrityCheck: Smallint read Get_System_File_IntegrityCheck write Set_System_File_IntegrityCheck;
    property System_File_NewCompany: Smallint read Get_System_File_NewCompany write Set_System_File_NewCompany;
    property System_File_OnlineBackup: Smallint read Get_System_File_OnlineBackup write Set_System_File_OnlineBackup;
    property System_File_ReconsolidateCompany: Smallint read Get_System_File_ReconsolidateCompany write Set_System_File_ReconsolidateCompany;
    property System_File_Restore: Smallint read Get_System_File_Restore write Set_System_File_Restore;
    property System_Modem: Smallint read Get_System_Modem write Set_System_Modem;
    property System_Maint_CompanyInformation: Smallint read Get_System_Maint_CompanyInformation write Set_System_Maint_CompanyInformation;
    property System_Maint_ElectronicPayments: Smallint read Get_System_Maint_ElectronicPayments write Set_System_Maint_ElectronicPayments;
    property System_Maint_Jobs: Smallint read Get_System_Maint_Jobs write Set_System_Maint_Jobs;
    property System_Options_ActionItemsEventLog: Smallint read Get_System_Options_ActionItemsEventLog write Set_System_Options_ActionItemsEventLog;
    property System_Options_ChangeSystemDate: Smallint read Get_System_Options_ChangeSystemDate write Set_System_Options_ChangeSystemDate;
    property System_Reports_AccountReconcil: Smallint read Get_System_Reports_AccountReconcil write Set_System_Reports_AccountReconcil;
    property System_Reports_AuditTrail: Smallint read Get_System_Reports_AuditTrail write Set_System_Reports_AuditTrail;
    property System_Reports_ElectronicBillPayment: Smallint read Get_System_Reports_ElectronicBillPayment write Set_System_Reports_ElectronicBillPayment;
    property System_Reports_Jobs: Smallint read Get_System_Reports_Jobs write Set_System_Reports_Jobs;
    property System_Reports_ReportGroups: Smallint read Get_System_Reports_ReportGroups write Set_System_Reports_ReportGroups;
    property System_Reports_TimeExpense: Smallint read Get_System_Reports_TimeExpense write Set_System_Reports_TimeExpense;
    property System_Tasks_AccountReconciliation: Smallint read Get_System_Tasks_AccountReconciliation write Set_System_Tasks_AccountReconciliation;
    property System_Tasks_ActionItems: Smallint read Get_System_Tasks_ActionItems write Set_System_Tasks_ActionItems;
    property System_Tasks_ChangeAccountingPeriod: Smallint read Get_System_Tasks_ChangeAccountingPeriod write Set_System_Tasks_ChangeAccountingPeriod;
    property System_Tasks_CloseFiscalYear: Smallint read Get_System_Tasks_CloseFiscalYear write Set_System_Tasks_CloseFiscalYear;
    property System_Tasks_ClosePayrollYear: Smallint read Get_System_Tasks_ClosePayrollYear write Set_System_Tasks_ClosePayrollYear;
    property System_Tasks_ElectronicBillPayment: Smallint read Get_System_Tasks_ElectronicBillPayment write Set_System_Tasks_ElectronicBillPayment;
    property System_Tasks_FindTransactions: Smallint read Get_System_Tasks_FindTransactions write Set_System_Tasks_FindTransactions;
    property System_Tasks_LinkToOtherApps: Smallint read Get_System_Tasks_LinkToOtherApps write Set_System_Tasks_LinkToOtherApps;
    property System_Tasks_Post: Smallint read Get_System_Tasks_Post write Set_System_Tasks_Post;
    property System_Tasks_Purge: Smallint read Get_System_Tasks_Purge write Set_System_Tasks_Purge;
    property System_Tasks_TimeAndExpenseTickets: Smallint read Get_System_Tasks_TimeAndExpenseTickets write Set_System_Tasks_TimeAndExpenseTickets;
    property System_Tasks_TransactionsInPriorPeriods: Smallint read Get_System_Tasks_TransactionsInPriorPeriods write Set_System_Tasks_TransactionsInPriorPeriods;
    property System_Tasks_Unpost: Smallint read Get_System_Tasks_Unpost write Set_System_Tasks_Unpost;
    property Unknown1: Smallint read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Smallint read Get_Unknown2 write Set_Unknown2;
    property Unknown4: Smallint read Get_Unknown4 write Set_Unknown4;
    property UserName: WideString read Get_UserName write Set_UserName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSortJob provides a Create and CreateRemote method to          
// create instances of the default interface _SortJob exposed by              
// the CoClass SortJob. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSortJob = class
    class function Create: _SortJob;
    class function CreateRemote(const MachineName: string): _SortJob;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSortJob
// Help String      : 
// Default Interface: _SortJob
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSortJobProperties= class;
{$ENDIF}
  TSortJob = class(TOleServer)
  private
    FIntf:        _SortJob;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSortJobProperties;
    function      GetServerProperties: TSortJobProperties;
{$ENDIF}
    function      GetDefaultInterface: _SortJob;
  protected
    procedure InitServerData; override;
    function Get_Account: WideString;
    procedure Set_Account(const Param1: WideString);
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_AmountType: Smallint;
    procedure Set_AmountType(Param1: Smallint);
    function Get_CostDescription: WideString;
    procedure Set_CostDescription(const Param1: WideString);
    function Get_CostIndex: Integer;
    procedure Set_CostIndex(Param1: Integer);
    function Get_CostOfSalesTrx: Byte;
    procedure Set_CostOfSalesTrx(Param1: Byte);
    function Get_ID: WideString;
    procedure Set_ID(const Param1: WideString);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_Invoice: WideString;
    procedure Set_Invoice(const Param1: WideString);
    function Get_ItemIndex: Integer;
    procedure Set_ItemIndex(Param1: Integer);
    function Get_JobDescription: WideString;
    procedure Set_JobDescription(const Param1: WideString);
    function Get_JobIndex: Integer;
    procedure Set_JobIndex(Param1: Integer);
    function Get_JournalCode: Byte;
    procedure Set_JournalCode(Param1: Byte);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Line: Smallint;
    procedure Set_Line(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_PhaseDescription: WideString;
    procedure Set_PhaseDescription(const Param1: WideString);
    function Get_PhaseIndex: Integer;
    procedure Set_PhaseIndex(Param1: Integer);
    function Get_Posted: Byte;
    procedure Set_Posted(Param1: Byte);
    function Get_Quote: Byte;
    procedure Set_Quote(Param1: Byte);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_Unknown1: Integer;
    procedure Set_Unknown1(Param1: Integer);
    function Get_Unknown2: Byte;
    procedure Set_Unknown2(Param1: Byte);
    function Get_Unknown3: Byte;
    procedure Set_Unknown3(Param1: Byte);
    function Get_Unknown4: Smallint;
    procedure Set_Unknown4(Param1: Smallint);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SortJob);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _SortJob read GetDefaultInterface;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property Account: WideString read Get_Account write Set_Account;
    property Amount: Double read Get_Amount write Set_Amount;
    property AmountType: Smallint read Get_AmountType write Set_AmountType;
    property CostDescription: WideString read Get_CostDescription write Set_CostDescription;
    property CostIndex: Integer read Get_CostIndex write Set_CostIndex;
    property CostOfSalesTrx: Byte read Get_CostOfSalesTrx write Set_CostOfSalesTrx;
    property ID: WideString read Get_ID write Set_ID;
    property Index: Integer read Get_Index write Set_Index;
    property Invoice: WideString read Get_Invoice write Set_Invoice;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property JobDescription: WideString read Get_JobDescription write Set_JobDescription;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property JournalCode: Byte read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Line: Smallint read Get_Line write Set_Line;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property PhaseDescription: WideString read Get_PhaseDescription write Set_PhaseDescription;
    property PhaseIndex: Integer read Get_PhaseIndex write Set_PhaseIndex;
    property Posted: Byte read Get_Posted write Set_Posted;
    property Quote: Byte read Get_Quote write Set_Quote;
    property Reference: WideString read Get_Reference write Set_Reference;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Unknown1: Integer read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Byte read Get_Unknown2 write Set_Unknown2;
    property Unknown3: Byte read Get_Unknown3 write Set_Unknown3;
    property Unknown4: Smallint read Get_Unknown4 write Set_Unknown4;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSortJobProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSortJob
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSortJobProperties = class(TPersistent)
  private
    FServer:    TSortJob;
    function    GetDefaultInterface: _SortJob;
    constructor Create(AServer: TSortJob);
  protected
    function Get_Account: WideString;
    procedure Set_Account(const Param1: WideString);
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_AmountType: Smallint;
    procedure Set_AmountType(Param1: Smallint);
    function Get_CostDescription: WideString;
    procedure Set_CostDescription(const Param1: WideString);
    function Get_CostIndex: Integer;
    procedure Set_CostIndex(Param1: Integer);
    function Get_CostOfSalesTrx: Byte;
    procedure Set_CostOfSalesTrx(Param1: Byte);
    function Get_ID: WideString;
    procedure Set_ID(const Param1: WideString);
    function Get_Index: Integer;
    procedure Set_Index(Param1: Integer);
    function Get_Invoice: WideString;
    procedure Set_Invoice(const Param1: WideString);
    function Get_ItemIndex: Integer;
    procedure Set_ItemIndex(Param1: Integer);
    function Get_JobDescription: WideString;
    procedure Set_JobDescription(const Param1: WideString);
    function Get_JobIndex: Integer;
    procedure Set_JobIndex(Param1: Integer);
    function Get_JournalCode: Byte;
    procedure Set_JournalCode(Param1: Byte);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_Line: Smallint;
    procedure Set_Line(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_PhaseDescription: WideString;
    procedure Set_PhaseDescription(const Param1: WideString);
    function Get_PhaseIndex: Integer;
    procedure Set_PhaseIndex(Param1: Integer);
    function Get_Posted: Byte;
    procedure Set_Posted(Param1: Byte);
    function Get_Quote: Byte;
    procedure Set_Quote(Param1: Byte);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_Unknown1: Integer;
    procedure Set_Unknown1(Param1: Integer);
    function Get_Unknown2: Byte;
    procedure Set_Unknown2(Param1: Byte);
    function Get_Unknown3: Byte;
    procedure Set_Unknown3(Param1: Byte);
    function Get_Unknown4: Smallint;
    procedure Set_Unknown4(Param1: Smallint);
  public
    property DefaultInterface: _SortJob read GetDefaultInterface;
  published
    property Account: WideString read Get_Account write Set_Account;
    property Amount: Double read Get_Amount write Set_Amount;
    property AmountType: Smallint read Get_AmountType write Set_AmountType;
    property CostDescription: WideString read Get_CostDescription write Set_CostDescription;
    property CostIndex: Integer read Get_CostIndex write Set_CostIndex;
    property CostOfSalesTrx: Byte read Get_CostOfSalesTrx write Set_CostOfSalesTrx;
    property ID: WideString read Get_ID write Set_ID;
    property Index: Integer read Get_Index write Set_Index;
    property Invoice: WideString read Get_Invoice write Set_Invoice;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property JobDescription: WideString read Get_JobDescription write Set_JobDescription;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property JournalCode: Byte read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property Line: Smallint read Get_Line write Set_Line;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property PhaseDescription: WideString read Get_PhaseDescription write Set_PhaseDescription;
    property PhaseIndex: Integer read Get_PhaseIndex write Set_PhaseIndex;
    property Posted: Byte read Get_Posted write Set_Posted;
    property Quote: Byte read Get_Quote write Set_Quote;
    property Reference: WideString read Get_Reference write Set_Reference;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property Unknown1: Integer read Get_Unknown1 write Set_Unknown1;
    property Unknown2: Byte read Get_Unknown2 write Set_Unknown2;
    property Unknown3: Byte read Get_Unknown3 write Set_Unknown3;
    property Unknown4: Smallint read Get_Unknown4 write Set_Unknown4;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSelectVendor provides a Create and CreateRemote method to          
// create instances of the default interface _SelectVendor exposed by              
// the CoClass SelectVendor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectVendor = class
    class function Create: _SelectVendor;
    class function CreateRemote(const MachineName: string): _SelectVendor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSelectVendor
// Help String      : 
// Default Interface: _SelectVendor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSelectVendorProperties= class;
{$ENDIF}
  TSelectVendor = class(TOleServer)
  private
    FIntf:        _SelectVendor;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSelectVendorProperties;
    function      GetServerProperties: TSelectVendorProperties;
{$ENDIF}
    function      GetDefaultInterface: _SelectVendor;
  protected
    procedure InitServerData; override;
    function Get_VendorID: WideString;
    procedure Set_VendorID(const Param1: WideString);
    procedure Set_ExcludeInactive(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SelectVendor);
    procedure Disconnect; override;
    function ShowOpen: OleVariant;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
    property DefaultInterface: _SelectVendor read GetDefaultInterface;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
    property VendorID: WideString read Get_VendorID write Set_VendorID;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSelectVendorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSelectVendor
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSelectVendorProperties = class(TPersistent)
  private
    FServer:    TSelectVendor;
    function    GetDefaultInterface: _SelectVendor;
    constructor Create(AServer: TSelectVendor);
  protected
    function Get_VendorID: WideString;
    procedure Set_VendorID(const Param1: WideString);
    procedure Set_ExcludeInactive(Param1: WordBool);
  public
    property DefaultInterface: _SelectVendor read GetDefaultInterface;
  published
    property VendorID: WideString read Get_VendorID write Set_VendorID;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSelectLineItem provides a Create and CreateRemote method to          
// create instances of the default interface _SelectLineItem exposed by              
// the CoClass SelectLineItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectLineItem = class
    class function Create: _SelectLineItem;
    class function CreateRemote(const MachineName: string): _SelectLineItem;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSelectLineItem
// Help String      : 
// Default Interface: _SelectLineItem
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSelectLineItemProperties= class;
{$ENDIF}
  TSelectLineItem = class(TOleServer)
  private
    FIntf:        _SelectLineItem;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSelectLineItemProperties;
    function      GetServerProperties: TSelectLineItemProperties;
{$ENDIF}
    function      GetDefaultInterface: _SelectLineItem;
  protected
    procedure InitServerData; override;
    function Get_ItemID: WideString;
    procedure Set_ItemID(const Param1: WideString);
    procedure Set_ExcludeInactive(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SelectLineItem);
    procedure Disconnect; override;
    function ShowOpen: OleVariant;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
    property DefaultInterface: _SelectLineItem read GetDefaultInterface;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSelectLineItemProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSelectLineItem
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSelectLineItemProperties = class(TPersistent)
  private
    FServer:    TSelectLineItem;
    function    GetDefaultInterface: _SelectLineItem;
    constructor Create(AServer: TSelectLineItem);
  protected
    function Get_ItemID: WideString;
    procedure Set_ItemID(const Param1: WideString);
    procedure Set_ExcludeInactive(Param1: WordBool);
  public
    property DefaultInterface: _SelectLineItem read GetDefaultInterface;
  published
    property ItemID: WideString read Get_ItemID write Set_ItemID;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSelectEmployee provides a Create and CreateRemote method to          
// create instances of the default interface _SelectEmployee exposed by              
// the CoClass SelectEmployee. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectEmployee = class
    class function Create: _SelectEmployee;
    class function CreateRemote(const MachineName: string): _SelectEmployee;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSelectEmployee
// Help String      : 
// Default Interface: _SelectEmployee
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSelectEmployeeProperties= class;
{$ENDIF}
  TSelectEmployee = class(TOleServer)
  private
    FIntf:        _SelectEmployee;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSelectEmployeeProperties;
    function      GetServerProperties: TSelectEmployeeProperties;
{$ENDIF}
    function      GetDefaultInterface: _SelectEmployee;
  protected
    procedure InitServerData; override;
    function Get_EmployeeID: WideString;
    procedure Set_EmployeeID(const Param1: WideString);
    procedure Set_ExcludeInactive(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SelectEmployee);
    procedure Disconnect; override;
    function ShowOpen: OleVariant;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
    property DefaultInterface: _SelectEmployee read GetDefaultInterface;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSelectEmployeeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSelectEmployee
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSelectEmployeeProperties = class(TPersistent)
  private
    FServer:    TSelectEmployee;
    function    GetDefaultInterface: _SelectEmployee;
    constructor Create(AServer: TSelectEmployee);
  protected
    function Get_EmployeeID: WideString;
    procedure Set_EmployeeID(const Param1: WideString);
    procedure Set_ExcludeInactive(Param1: WordBool);
  public
    property DefaultInterface: _SelectEmployee read GetDefaultInterface;
  published
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoJrnlHdr provides a Create and CreateRemote method to          
// create instances of the default interface _JrnlHdr exposed by              
// the CoClass JrnlHdr. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJrnlHdr = class
    class function Create: _JrnlHdr;
    class function CreateRemote(const MachineName: string): _JrnlHdr;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TJrnlHdr
// Help String      : 
// Default Interface: _JrnlHdr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TJrnlHdrProperties= class;
{$ENDIF}
  TJrnlHdr = class(TOleServer)
  private
    FIntf:        _JrnlHdr;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TJrnlHdrProperties;
    function      GetServerProperties: TJrnlHdrProperties;
{$ENDIF}
    function      GetDefaultInterface: _JrnlHdr;
  protected
    procedure InitServerData; override;
    function Get_ActualLength: Integer;
    function Get_Address1: WideString;
    procedure Set_Address1(const Param1: WideString);
    function Get_Address2: WideString;
    procedure Set_Address2(const Param1: WideString);
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_AmountPaid: Double;
    procedure Set_AmountPaid(Param1: Double);
    function Get_AppName: WideString;
    procedure Set_AppName(const Param1: WideString);
    function Get_BeginningBalance: WordBool;
    procedure Set_BeginningBalance(Param1: WordBool);
    function Get_CCAddress1: WideString;
    procedure Set_CCAddress1(const Param1: WideString);
    function Get_CCAddress2: WideString;
    procedure Set_CCAddress2(const Param1: WideString);
    function Get_CCAuthorization: WideString;
    procedure Set_CCAuthorization(const Param1: WideString);
    function Get_CCCity: WideString;
    procedure Set_CCCity(const Param1: WideString);
    function Get_CCComment: WideString;
    procedure Set_CCComment(const Param1: WideString);
    function Get_CCCountry: WideString;
    procedure Set_CCCountry(const Param1: WideString);
    function Get_CCEncryptedCard: WideString;
    procedure Set_CCEncryptedCard(const Param1: WideString);
    function Get_CCExpirationDate: OleVariant;
    procedure Set_CCExpirationDate(Param1: OleVariant);
    function Get_CCFlag: Byte;
    procedure Set_CCFlag(Param1: Byte);
    function Get_CCName: WideString;
    procedure Set_CCName(const Param1: WideString);
    function Get_CCNumber: WideString;
    procedure Set_CCNumber(const Param1: WideString);
    function Get_CCState: WideString;
    procedure Set_CCState(const Param1: WideString);
    function Get_CCZipcode: WideString;
    procedure Set_CCZipcode(const Param1: WideString);
    function Get_City: WideString;
    procedure Set_City(const Param1: WideString);
    function Get_CloseOrder: WordBool;
    procedure Set_CloseOrder(Param1: WordBool);
    function Get_Country: WideString;
    procedure Set_Country(const Param1: WideString);
    function Get_CustomerSONo: WideString;
    procedure Set_CustomerSONo(const Param1: WideString);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DateDue: OleVariant;
    procedure Set_DateDue(Param1: OleVariant);
    function Get_DepositDate: OleVariant;
    procedure Set_DepositDate(Param1: OleVariant);
    function Get_DepositTicketID: WideString;
    procedure Set_DepositTicketID(const Param1: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_DiscountAmount: Double;
    procedure Set_DiscountAmount(Param1: Double);
    function Get_DiscountDate: OleVariant;
    procedure Set_DiscountDate(Param1: OleVariant);
    function Get_DropShip: Byte;
    procedure Set_DropShip(Param1: Byte);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GoodThruDate: OleVariant;
    procedure Set_GoodThruDate(Param1: OleVariant);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HasPartner: WordBool;
    procedure Set_HasPartner(Param1: WordBool);
    function Get_IDNumber: Integer;
    procedure Set_IDNumber(Param1: Integer);
    function Get_IDText: WideString;
    procedure Set_IDText(const Param1: WideString);
    function Get_InternalNote: WideString;
    procedure Set_InternalNote(const Param1: WideString);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_JrnlTypeEx: Integer;
    procedure Set_JrnlTypeEx(Param1: Integer);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumberL(Period: Smallint; var JournalCode: Smallint): Integer;
    function Get_Memo: WideString;
    procedure Set_Memo(const Param1: WideString);
    function Get_Name: WideString;
    procedure Set_Name(const Param1: WideString);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_NotePrintsAfterItems: WordBool;
    procedure Set_NotePrintsAfterItems(Param1: WordBool);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_NumOrderLines: Smallint;
    procedure Set_NumOrderLines(Param1: Smallint);
    function Get_OrderNumber: WideString;
    procedure Set_OrderNumber(const Param1: WideString);
    function Get_OtherIndex: Integer;
    procedure Set_OtherIndex(Param1: Integer);
    function Get_OtherReceipt: WordBool;
    procedure Set_OtherReceipt(Param1: WordBool);
    function Get_PaidOnInvoice: Double;
    procedure Set_PaidOnInvoice(Param1: Double);
    function Get_PaymentDate: OleVariant;
    procedure Set_PaymentDate(Param1: OleVariant);
    function Get_PayLevel(Index: Smallint): Double;
    procedure Set_PayLevel(Index: Smallint; Param2: Double);
    function Get_PaymentMethod: WideString;
    procedure Set_PaymentMethod(const Param1: WideString);
    function Get_PayPeriodEnd: OleVariant;
    procedure Set_PayPeriodEnd(Param1: OleVariant);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_PONumber: WideString;
    procedure Set_PONumber(const Param1: WideString);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_Prepayment: WordBool;
    procedure Set_Prepayment(Param1: WordBool);
    function Get_PrintBeforeInvoiceReference: WordBool;
    procedure Set_PrintBeforeInvoiceReference(Param1: WordBool);
    function Get_PrintCheck: WordBool;
    procedure Set_PrintCheck(Param1: WordBool);
    function Get_PurchaseOrderNumber: WideString;
    procedure Set_PurchaseOrderNumber(const Param1: WideString);
    function Get_QuoteNumber: WideString;
    procedure Set_QuoteNumber(const Param1: WideString);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_ReceiptNum: WideString;
    procedure Set_ReceiptNum(const Param1: WideString);
    function Get_RecordByte(Index: Integer): Byte;
    function Get_RecurrenceIndex: Integer;
    procedure Set_RecurrenceIndex(Param1: Integer);
    function Get_RecurrenceRate: Smallint;
    procedure Set_RecurrenceRate(Param1: Smallint);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_ReturnAuthorization: WideString;
    procedure Set_ReturnAuthorization(const Param1: WideString);
    function Get_Reversed: WordBool;
    procedure Set_Reversed(Param1: WordBool);
    function Get_SalesRepID: WideString;
    procedure Set_SalesRepID(const Param1: WideString);
    function Get_SalesTaxCode: WideString;
    procedure Set_SalesTaxCode(const Param1: WideString);
    function Get_ShipByDate: OleVariant;
    procedure Set_ShipByDate(Param1: OleVariant);
    function Get_ShipDate: OleVariant;
    procedure Set_ShipDate(Param1: OleVariant);
    function Get_ShipIndex: Integer;
    procedure Set_ShipIndex(Param1: Integer);
    function Get_ShipToAddress1: WideString;
    procedure Set_ShipToAddress1(const Param1: WideString);
    function Get_ShipToAddress2: WideString;
    procedure Set_ShipToAddress2(const Param1: WideString);
    function Get_ShipToCity: WideString;
    procedure Set_ShipToCity(const Param1: WideString);
    function Get_ShipToCountry: WideString;
    procedure Set_ShipToCountry(const Param1: WideString);
    function Get_ShipToName: WideString;
    procedure Set_ShipToName(const Param1: WideString);
    function Get_ShipToState: WideString;
    procedure Set_ShipToState(const Param1: WideString);
    function Get_ShipToZipCode: WideString;
    procedure Set_ShipToZipCode(const Param1: WideString);
    function Get_ShipVia: WideString;
    procedure Set_ShipVia(const Param1: WideString);
    function Get_State: WideString;
    procedure Set_State(const Param1: WideString);
    function Get_StatementNote: WideString;
    procedure Set_StatementNote(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_SuperRecordNumber: Integer;
    procedure Set_SuperRecordNumber(Param1: Integer);
    function Get_Terms: WideString;
    procedure Set_Terms(const Param1: WideString);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxIsReadOnly: Smallint;
    procedure Set_TrxIsReadOnly(Param1: Smallint);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_TrxVoidedBy: Integer;
    procedure Set_TrxVoidedBy(Param1: Integer);
    function Get_Unknown1(Index: Smallint): Byte;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte);
    function Get_UnusedInteger3: Smallint;
    procedure Set_UnusedInteger3(Param1: Smallint);
    function Get_UnusedByte10: Byte;
    procedure Set_UnusedByte10(Param1: Byte);
    function Get_UnknownLong11: Integer;
    procedure Set_UnknownLong11(Param1: Integer);
    function Get_UnknownLong12: Integer;
    procedure Set_UnknownLong12(Param1: Integer);
    function Get_Unknown13(Index: Smallint): Byte;
    procedure Set_Unknown13(Index: Smallint; Param2: Byte);
    function Get_Unknown14(Index: Smallint): Byte;
    procedure Set_Unknown14(Index: Smallint; Param2: Byte);
    function Get_Unknown15(Index: Smallint): Byte;
    procedure Set_Unknown15(Index: Smallint; Param2: Byte);
    function Get_Unknown16(Index: Smallint): Byte;
    procedure Set_Unknown16(Index: Smallint; Param2: Byte);
    function Get_Unknown17: Byte;
    procedure Set_Unknown17(Param1: Byte);
    function Get_UPSShipmentRecNum: Integer;
    procedure Set_UPSShipmentRecNum(Param1: Integer);
    function Get_WaitingOnBill: WordBool;
    procedure Set_WaitingOnBill(Param1: WordBool);
    function Get_WeeksInPayPeriod: Smallint;
    procedure Set_WeeksInPayPeriod(Param1: Smallint);
    function Get_Zipcode: WideString;
    procedure Set_Zipcode(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _JrnlHdr);
    procedure Disconnect; override;
    function ClearRecord: Smallint;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetEqual(NRecord: Integer): Smallint;
    function GetForKeyL(Subindex1: Byte; TrxNumber: Integer; Period: Smallint; JournalID: Smallint; 
                        Subindex2: Smallint): OleVariant;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function ReadBytes: Smallint;
    function ReadFirst(JrnlCode: Smallint; Period: Smallint): Smallint;
    function ReadFirstForIDIndex(JrnlCode: Smallint; Index: Integer): Smallint;
    function ReadFirstForInvoice(const Invoice: WideString): Smallint;
    function ReadNext: Smallint;
    function ReadNextForIDIndex: Smallint;
    function ReadNextForInvoice: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _JrnlHdr read GetDefaultInterface;
    property ActualLength: Integer read Get_ActualLength;
    property CCExpirationDate: OleVariant read Get_CCExpirationDate write Set_CCExpirationDate;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property DateDue: OleVariant read Get_DateDue write Set_DateDue;
    property DepositDate: OleVariant read Get_DepositDate write Set_DepositDate;
    property DiscountDate: OleVariant read Get_DiscountDate write Set_DiscountDate;
    property GoodThruDate: OleVariant read Get_GoodThruDate write Set_GoodThruDate;
    property MaxNRecord: Integer read Get_MaxNRecord;
    property MaxTrxNumberL[Period: Smallint; var JournalCode: Smallint]: Integer read Get_MaxTrxNumberL;
    property PaymentDate: OleVariant read Get_PaymentDate write Set_PaymentDate;
    property PayLevel[Index: Smallint]: Double read Get_PayLevel write Set_PayLevel;
    property PayPeriodEnd: OleVariant read Get_PayPeriodEnd write Set_PayPeriodEnd;
    property ReceiptDate: OleVariant read Get_ReceiptDate write Set_ReceiptDate;
    property RecordByte[Index: Integer]: Byte read Get_RecordByte;
    property ShipByDate: OleVariant read Get_ShipByDate write Set_ShipByDate;
    property ShipDate: OleVariant read Get_ShipDate write Set_ShipDate;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property Unknown1[Index: Smallint]: Byte read Get_Unknown1 write Set_Unknown1;
    property Unknown13[Index: Smallint]: Byte read Get_Unknown13 write Set_Unknown13;
    property Unknown14[Index: Smallint]: Byte read Get_Unknown14 write Set_Unknown14;
    property Unknown15[Index: Smallint]: Byte read Get_Unknown15 write Set_Unknown15;
    property Unknown16[Index: Smallint]: Byte read Get_Unknown16 write Set_Unknown16;
    property Address1: WideString read Get_Address1 write Set_Address1;
    property Address2: WideString read Get_Address2 write Set_Address2;
    property Amount: Double read Get_Amount write Set_Amount;
    property AmountPaid: Double read Get_AmountPaid write Set_AmountPaid;
    property AppName: WideString read Get_AppName write Set_AppName;
    property BeginningBalance: WordBool read Get_BeginningBalance write Set_BeginningBalance;
    property CCAddress1: WideString read Get_CCAddress1 write Set_CCAddress1;
    property CCAddress2: WideString read Get_CCAddress2 write Set_CCAddress2;
    property CCAuthorization: WideString read Get_CCAuthorization write Set_CCAuthorization;
    property CCCity: WideString read Get_CCCity write Set_CCCity;
    property CCComment: WideString read Get_CCComment write Set_CCComment;
    property CCCountry: WideString read Get_CCCountry write Set_CCCountry;
    property CCEncryptedCard: WideString read Get_CCEncryptedCard write Set_CCEncryptedCard;
    property CCFlag: Byte read Get_CCFlag write Set_CCFlag;
    property CCName: WideString read Get_CCName write Set_CCName;
    property CCNumber: WideString read Get_CCNumber write Set_CCNumber;
    property CCState: WideString read Get_CCState write Set_CCState;
    property CCZipcode: WideString read Get_CCZipcode write Set_CCZipcode;
    property City: WideString read Get_City write Set_City;
    property CloseOrder: WordBool read Get_CloseOrder write Set_CloseOrder;
    property Country: WideString read Get_Country write Set_Country;
    property CustomerSONo: WideString read Get_CustomerSONo write Set_CustomerSONo;
    property DepositTicketID: WideString read Get_DepositTicketID write Set_DepositTicketID;
    property Description: WideString read Get_Description write Set_Description;
    property DiscountAmount: Double read Get_DiscountAmount write Set_DiscountAmount;
    property DropShip: Byte read Get_DropShip write Set_DropShip;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasPartner: WordBool read Get_HasPartner write Set_HasPartner;
    property IDNumber: Integer read Get_IDNumber write Set_IDNumber;
    property IDText: WideString read Get_IDText write Set_IDText;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property JrnlTypeEx: Integer read Get_JrnlTypeEx write Set_JrnlTypeEx;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property Memo: WideString read Get_Memo write Set_Memo;
    property Name: WideString read Get_Name write Set_Name;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumOrderLines: Smallint read Get_NumOrderLines write Set_NumOrderLines;
    property OrderNumber: WideString read Get_OrderNumber write Set_OrderNumber;
    property OtherIndex: Integer read Get_OtherIndex write Set_OtherIndex;
    property OtherReceipt: WordBool read Get_OtherReceipt write Set_OtherReceipt;
    property PaidOnInvoice: Double read Get_PaidOnInvoice write Set_PaidOnInvoice;
    property PaymentMethod: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property Period: Smallint read Get_Period write Set_Period;
    property PONumber: WideString read Get_PONumber write Set_PONumber;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property PrintBeforeInvoiceReference: WordBool read Get_PrintBeforeInvoiceReference write Set_PrintBeforeInvoiceReference;
    property PrintCheck: WordBool read Get_PrintCheck write Set_PrintCheck;
    property PurchaseOrderNumber: WideString read Get_PurchaseOrderNumber write Set_PurchaseOrderNumber;
    property QuoteNumber: WideString read Get_QuoteNumber write Set_QuoteNumber;
    property ReceiptNum: WideString read Get_ReceiptNum write Set_ReceiptNum;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property Reference: WideString read Get_Reference write Set_Reference;
    property ReturnAuthorization: WideString read Get_ReturnAuthorization write Set_ReturnAuthorization;
    property Reversed: WordBool read Get_Reversed write Set_Reversed;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property ShipIndex: Integer read Get_ShipIndex write Set_ShipIndex;
    property ShipToAddress1: WideString read Get_ShipToAddress1 write Set_ShipToAddress1;
    property ShipToAddress2: WideString read Get_ShipToAddress2 write Set_ShipToAddress2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property State: WideString read Get_State write Set_State;
    property StatementNote: WideString read Get_StatementNote write Set_StatementNote;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property SuperRecordNumber: Integer read Get_SuperRecordNumber write Set_SuperRecordNumber;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxIsReadOnly: Smallint read Get_TrxIsReadOnly write Set_TrxIsReadOnly;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property TrxVoidedBy: Integer read Get_TrxVoidedBy write Set_TrxVoidedBy;
    property UnusedInteger3: Smallint read Get_UnusedInteger3 write Set_UnusedInteger3;
    property UnusedByte10: Byte read Get_UnusedByte10 write Set_UnusedByte10;
    property UnknownLong11: Integer read Get_UnknownLong11 write Set_UnknownLong11;
    property UnknownLong12: Integer read Get_UnknownLong12 write Set_UnknownLong12;
    property Unknown17: Byte read Get_Unknown17 write Set_Unknown17;
    property UPSShipmentRecNum: Integer read Get_UPSShipmentRecNum write Set_UPSShipmentRecNum;
    property WaitingOnBill: WordBool read Get_WaitingOnBill write Set_WaitingOnBill;
    property WeeksInPayPeriod: Smallint read Get_WeeksInPayPeriod write Set_WeeksInPayPeriod;
    property Zipcode: WideString read Get_Zipcode write Set_Zipcode;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TJrnlHdrProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TJrnlHdr
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TJrnlHdrProperties = class(TPersistent)
  private
    FServer:    TJrnlHdr;
    function    GetDefaultInterface: _JrnlHdr;
    constructor Create(AServer: TJrnlHdr);
  protected
    function Get_ActualLength: Integer;
    function Get_Address1: WideString;
    procedure Set_Address1(const Param1: WideString);
    function Get_Address2: WideString;
    procedure Set_Address2(const Param1: WideString);
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_AmountPaid: Double;
    procedure Set_AmountPaid(Param1: Double);
    function Get_AppName: WideString;
    procedure Set_AppName(const Param1: WideString);
    function Get_BeginningBalance: WordBool;
    procedure Set_BeginningBalance(Param1: WordBool);
    function Get_CCAddress1: WideString;
    procedure Set_CCAddress1(const Param1: WideString);
    function Get_CCAddress2: WideString;
    procedure Set_CCAddress2(const Param1: WideString);
    function Get_CCAuthorization: WideString;
    procedure Set_CCAuthorization(const Param1: WideString);
    function Get_CCCity: WideString;
    procedure Set_CCCity(const Param1: WideString);
    function Get_CCComment: WideString;
    procedure Set_CCComment(const Param1: WideString);
    function Get_CCCountry: WideString;
    procedure Set_CCCountry(const Param1: WideString);
    function Get_CCEncryptedCard: WideString;
    procedure Set_CCEncryptedCard(const Param1: WideString);
    function Get_CCExpirationDate: OleVariant;
    procedure Set_CCExpirationDate(Param1: OleVariant);
    function Get_CCFlag: Byte;
    procedure Set_CCFlag(Param1: Byte);
    function Get_CCName: WideString;
    procedure Set_CCName(const Param1: WideString);
    function Get_CCNumber: WideString;
    procedure Set_CCNumber(const Param1: WideString);
    function Get_CCState: WideString;
    procedure Set_CCState(const Param1: WideString);
    function Get_CCZipcode: WideString;
    procedure Set_CCZipcode(const Param1: WideString);
    function Get_City: WideString;
    procedure Set_City(const Param1: WideString);
    function Get_CloseOrder: WordBool;
    procedure Set_CloseOrder(Param1: WordBool);
    function Get_Country: WideString;
    procedure Set_Country(const Param1: WideString);
    function Get_CustomerSONo: WideString;
    procedure Set_CustomerSONo(const Param1: WideString);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_DateDue: OleVariant;
    procedure Set_DateDue(Param1: OleVariant);
    function Get_DepositDate: OleVariant;
    procedure Set_DepositDate(Param1: OleVariant);
    function Get_DepositTicketID: WideString;
    procedure Set_DepositTicketID(const Param1: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_DiscountAmount: Double;
    procedure Set_DiscountAmount(Param1: Double);
    function Get_DiscountDate: OleVariant;
    procedure Set_DiscountDate(Param1: OleVariant);
    function Get_DropShip: Byte;
    procedure Set_DropShip(Param1: Byte);
    function Get_EditCount: Integer;
    procedure Set_EditCount(Param1: Integer);
    function Get_GoodThruDate: OleVariant;
    procedure Set_GoodThruDate(Param1: OleVariant);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HasPartner: WordBool;
    procedure Set_HasPartner(Param1: WordBool);
    function Get_IDNumber: Integer;
    procedure Set_IDNumber(Param1: Integer);
    function Get_IDText: WideString;
    procedure Set_IDText(const Param1: WideString);
    function Get_InternalNote: WideString;
    procedure Set_InternalNote(const Param1: WideString);
    function Get_JournalCode: WideString;
    procedure Set_JournalCode(const Param1: WideString);
    function Get_JournalID: Smallint;
    procedure Set_JournalID(Param1: Smallint);
    function Get_JrnlTypeEx: Integer;
    procedure Set_JrnlTypeEx(Param1: Integer);
    function Get_Key: Double;
    procedure Set_Key(Param1: Double);
    function Get_MainAccount: WideString;
    procedure Set_MainAccount(const Param1: WideString);
    function Get_MaxNRecord: Integer;
    function Get_MaxTrxNumberL(Period: Smallint; var JournalCode: Smallint): Integer;
    function Get_Memo: WideString;
    procedure Set_Memo(const Param1: WideString);
    function Get_Name: WideString;
    procedure Set_Name(const Param1: WideString);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_NotePrintsAfterItems: WordBool;
    procedure Set_NotePrintsAfterItems(Param1: WordBool);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_NumOrderLines: Smallint;
    procedure Set_NumOrderLines(Param1: Smallint);
    function Get_OrderNumber: WideString;
    procedure Set_OrderNumber(const Param1: WideString);
    function Get_OtherIndex: Integer;
    procedure Set_OtherIndex(Param1: Integer);
    function Get_OtherReceipt: WordBool;
    procedure Set_OtherReceipt(Param1: WordBool);
    function Get_PaidOnInvoice: Double;
    procedure Set_PaidOnInvoice(Param1: Double);
    function Get_PaymentDate: OleVariant;
    procedure Set_PaymentDate(Param1: OleVariant);
    function Get_PayLevel(Index: Smallint): Double;
    procedure Set_PayLevel(Index: Smallint; Param2: Double);
    function Get_PaymentMethod: WideString;
    procedure Set_PaymentMethod(const Param1: WideString);
    function Get_PayPeriodEnd: OleVariant;
    procedure Set_PayPeriodEnd(Param1: OleVariant);
    function Get_Period: Smallint;
    procedure Set_Period(Param1: Smallint);
    function Get_PONumber: WideString;
    procedure Set_PONumber(const Param1: WideString);
    function Get_Posted: WordBool;
    procedure Set_Posted(Param1: WordBool);
    function Get_Prepayment: WordBool;
    procedure Set_Prepayment(Param1: WordBool);
    function Get_PrintBeforeInvoiceReference: WordBool;
    procedure Set_PrintBeforeInvoiceReference(Param1: WordBool);
    function Get_PrintCheck: WordBool;
    procedure Set_PrintCheck(Param1: WordBool);
    function Get_PurchaseOrderNumber: WideString;
    procedure Set_PurchaseOrderNumber(const Param1: WideString);
    function Get_QuoteNumber: WideString;
    procedure Set_QuoteNumber(const Param1: WideString);
    function Get_ReceiptDate: OleVariant;
    procedure Set_ReceiptDate(Param1: OleVariant);
    function Get_ReceiptNum: WideString;
    procedure Set_ReceiptNum(const Param1: WideString);
    function Get_RecordByte(Index: Integer): Byte;
    function Get_RecurrenceIndex: Integer;
    procedure Set_RecurrenceIndex(Param1: Integer);
    function Get_RecurrenceRate: Smallint;
    procedure Set_RecurrenceRate(Param1: Smallint);
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_Reference: WideString;
    procedure Set_Reference(const Param1: WideString);
    function Get_ReturnAuthorization: WideString;
    procedure Set_ReturnAuthorization(const Param1: WideString);
    function Get_Reversed: WordBool;
    procedure Set_Reversed(Param1: WordBool);
    function Get_SalesRepID: WideString;
    procedure Set_SalesRepID(const Param1: WideString);
    function Get_SalesTaxCode: WideString;
    procedure Set_SalesTaxCode(const Param1: WideString);
    function Get_ShipByDate: OleVariant;
    procedure Set_ShipByDate(Param1: OleVariant);
    function Get_ShipDate: OleVariant;
    procedure Set_ShipDate(Param1: OleVariant);
    function Get_ShipIndex: Integer;
    procedure Set_ShipIndex(Param1: Integer);
    function Get_ShipToAddress1: WideString;
    procedure Set_ShipToAddress1(const Param1: WideString);
    function Get_ShipToAddress2: WideString;
    procedure Set_ShipToAddress2(const Param1: WideString);
    function Get_ShipToCity: WideString;
    procedure Set_ShipToCity(const Param1: WideString);
    function Get_ShipToCountry: WideString;
    procedure Set_ShipToCountry(const Param1: WideString);
    function Get_ShipToName: WideString;
    procedure Set_ShipToName(const Param1: WideString);
    function Get_ShipToState: WideString;
    procedure Set_ShipToState(const Param1: WideString);
    function Get_ShipToZipCode: WideString;
    procedure Set_ShipToZipCode(const Param1: WideString);
    function Get_ShipVia: WideString;
    procedure Set_ShipVia(const Param1: WideString);
    function Get_State: WideString;
    procedure Set_State(const Param1: WideString);
    function Get_StatementNote: WideString;
    procedure Set_StatementNote(const Param1: WideString);
    function Get_Subindex1: Byte;
    procedure Set_Subindex1(Param1: Byte);
    function Get_Subindex2: Byte;
    procedure Set_Subindex2(Param1: Byte);
    function Get_SuperRecordNumber: Integer;
    procedure Set_SuperRecordNumber(Param1: Integer);
    function Get_Terms: WideString;
    procedure Set_Terms(const Param1: WideString);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxIsReadOnly: Smallint;
    procedure Set_TrxIsReadOnly(Param1: Smallint);
    function Get_TrxNumber: Smallint;
    procedure Set_TrxNumber(Param1: Smallint);
    function Get_TrxNumberL: Integer;
    procedure Set_TrxNumberL(Param1: Integer);
    function Get_TrxVoidedBy: Integer;
    procedure Set_TrxVoidedBy(Param1: Integer);
    function Get_Unknown1(Index: Smallint): Byte;
    procedure Set_Unknown1(Index: Smallint; Param2: Byte);
    function Get_UnusedInteger3: Smallint;
    procedure Set_UnusedInteger3(Param1: Smallint);
    function Get_UnusedByte10: Byte;
    procedure Set_UnusedByte10(Param1: Byte);
    function Get_UnknownLong11: Integer;
    procedure Set_UnknownLong11(Param1: Integer);
    function Get_UnknownLong12: Integer;
    procedure Set_UnknownLong12(Param1: Integer);
    function Get_Unknown13(Index: Smallint): Byte;
    procedure Set_Unknown13(Index: Smallint; Param2: Byte);
    function Get_Unknown14(Index: Smallint): Byte;
    procedure Set_Unknown14(Index: Smallint; Param2: Byte);
    function Get_Unknown15(Index: Smallint): Byte;
    procedure Set_Unknown15(Index: Smallint; Param2: Byte);
    function Get_Unknown16(Index: Smallint): Byte;
    procedure Set_Unknown16(Index: Smallint; Param2: Byte);
    function Get_Unknown17: Byte;
    procedure Set_Unknown17(Param1: Byte);
    function Get_UPSShipmentRecNum: Integer;
    procedure Set_UPSShipmentRecNum(Param1: Integer);
    function Get_WaitingOnBill: WordBool;
    procedure Set_WaitingOnBill(Param1: WordBool);
    function Get_WeeksInPayPeriod: Smallint;
    procedure Set_WeeksInPayPeriod(Param1: Smallint);
    function Get_Zipcode: WideString;
    procedure Set_Zipcode(const Param1: WideString);
  public
    property DefaultInterface: _JrnlHdr read GetDefaultInterface;
  published
    property Address1: WideString read Get_Address1 write Set_Address1;
    property Address2: WideString read Get_Address2 write Set_Address2;
    property Amount: Double read Get_Amount write Set_Amount;
    property AmountPaid: Double read Get_AmountPaid write Set_AmountPaid;
    property AppName: WideString read Get_AppName write Set_AppName;
    property BeginningBalance: WordBool read Get_BeginningBalance write Set_BeginningBalance;
    property CCAddress1: WideString read Get_CCAddress1 write Set_CCAddress1;
    property CCAddress2: WideString read Get_CCAddress2 write Set_CCAddress2;
    property CCAuthorization: WideString read Get_CCAuthorization write Set_CCAuthorization;
    property CCCity: WideString read Get_CCCity write Set_CCCity;
    property CCComment: WideString read Get_CCComment write Set_CCComment;
    property CCCountry: WideString read Get_CCCountry write Set_CCCountry;
    property CCEncryptedCard: WideString read Get_CCEncryptedCard write Set_CCEncryptedCard;
    property CCFlag: Byte read Get_CCFlag write Set_CCFlag;
    property CCName: WideString read Get_CCName write Set_CCName;
    property CCNumber: WideString read Get_CCNumber write Set_CCNumber;
    property CCState: WideString read Get_CCState write Set_CCState;
    property CCZipcode: WideString read Get_CCZipcode write Set_CCZipcode;
    property City: WideString read Get_City write Set_City;
    property CloseOrder: WordBool read Get_CloseOrder write Set_CloseOrder;
    property Country: WideString read Get_Country write Set_Country;
    property CustomerSONo: WideString read Get_CustomerSONo write Set_CustomerSONo;
    property DepositTicketID: WideString read Get_DepositTicketID write Set_DepositTicketID;
    property Description: WideString read Get_Description write Set_Description;
    property DiscountAmount: Double read Get_DiscountAmount write Set_DiscountAmount;
    property DropShip: Byte read Get_DropShip write Set_DropShip;
    property EditCount: Integer read Get_EditCount write Set_EditCount;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasPartner: WordBool read Get_HasPartner write Set_HasPartner;
    property IDNumber: Integer read Get_IDNumber write Set_IDNumber;
    property IDText: WideString read Get_IDText write Set_IDText;
    property InternalNote: WideString read Get_InternalNote write Set_InternalNote;
    property JournalCode: WideString read Get_JournalCode write Set_JournalCode;
    property JournalID: Smallint read Get_JournalID write Set_JournalID;
    property JrnlTypeEx: Integer read Get_JrnlTypeEx write Set_JrnlTypeEx;
    property Key: Double read Get_Key write Set_Key;
    property MainAccount: WideString read Get_MainAccount write Set_MainAccount;
    property Memo: WideString read Get_Memo write Set_Memo;
    property Name: WideString read Get_Name write Set_Name;
    property Note: WideString read Get_Note write Set_Note;
    property NotePrintsAfterItems: WordBool read Get_NotePrintsAfterItems write Set_NotePrintsAfterItems;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property NumOrderLines: Smallint read Get_NumOrderLines write Set_NumOrderLines;
    property OrderNumber: WideString read Get_OrderNumber write Set_OrderNumber;
    property OtherIndex: Integer read Get_OtherIndex write Set_OtherIndex;
    property OtherReceipt: WordBool read Get_OtherReceipt write Set_OtherReceipt;
    property PaidOnInvoice: Double read Get_PaidOnInvoice write Set_PaidOnInvoice;
    property PaymentMethod: WideString read Get_PaymentMethod write Set_PaymentMethod;
    property Period: Smallint read Get_Period write Set_Period;
    property PONumber: WideString read Get_PONumber write Set_PONumber;
    property Posted: WordBool read Get_Posted write Set_Posted;
    property Prepayment: WordBool read Get_Prepayment write Set_Prepayment;
    property PrintBeforeInvoiceReference: WordBool read Get_PrintBeforeInvoiceReference write Set_PrintBeforeInvoiceReference;
    property PrintCheck: WordBool read Get_PrintCheck write Set_PrintCheck;
    property PurchaseOrderNumber: WideString read Get_PurchaseOrderNumber write Set_PurchaseOrderNumber;
    property QuoteNumber: WideString read Get_QuoteNumber write Set_QuoteNumber;
    property ReceiptNum: WideString read Get_ReceiptNum write Set_ReceiptNum;
    property RecurrenceIndex: Integer read Get_RecurrenceIndex write Set_RecurrenceIndex;
    property RecurrenceRate: Smallint read Get_RecurrenceRate write Set_RecurrenceRate;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property Reference: WideString read Get_Reference write Set_Reference;
    property ReturnAuthorization: WideString read Get_ReturnAuthorization write Set_ReturnAuthorization;
    property Reversed: WordBool read Get_Reversed write Set_Reversed;
    property SalesRepID: WideString read Get_SalesRepID write Set_SalesRepID;
    property SalesTaxCode: WideString read Get_SalesTaxCode write Set_SalesTaxCode;
    property ShipIndex: Integer read Get_ShipIndex write Set_ShipIndex;
    property ShipToAddress1: WideString read Get_ShipToAddress1 write Set_ShipToAddress1;
    property ShipToAddress2: WideString read Get_ShipToAddress2 write Set_ShipToAddress2;
    property ShipToCity: WideString read Get_ShipToCity write Set_ShipToCity;
    property ShipToCountry: WideString read Get_ShipToCountry write Set_ShipToCountry;
    property ShipToName: WideString read Get_ShipToName write Set_ShipToName;
    property ShipToState: WideString read Get_ShipToState write Set_ShipToState;
    property ShipToZipCode: WideString read Get_ShipToZipCode write Set_ShipToZipCode;
    property ShipVia: WideString read Get_ShipVia write Set_ShipVia;
    property State: WideString read Get_State write Set_State;
    property StatementNote: WideString read Get_StatementNote write Set_StatementNote;
    property Subindex1: Byte read Get_Subindex1 write Set_Subindex1;
    property Subindex2: Byte read Get_Subindex2 write Set_Subindex2;
    property SuperRecordNumber: Integer read Get_SuperRecordNumber write Set_SuperRecordNumber;
    property Terms: WideString read Get_Terms write Set_Terms;
    property TrxIsReadOnly: Smallint read Get_TrxIsReadOnly write Set_TrxIsReadOnly;
    property TrxNumber: Smallint read Get_TrxNumber write Set_TrxNumber;
    property TrxNumberL: Integer read Get_TrxNumberL write Set_TrxNumberL;
    property TrxVoidedBy: Integer read Get_TrxVoidedBy write Set_TrxVoidedBy;
    property UnusedInteger3: Smallint read Get_UnusedInteger3 write Set_UnusedInteger3;
    property UnusedByte10: Byte read Get_UnusedByte10 write Set_UnusedByte10;
    property UnknownLong11: Integer read Get_UnknownLong11 write Set_UnknownLong11;
    property UnknownLong12: Integer read Get_UnknownLong12 write Set_UnknownLong12;
    property Unknown17: Byte read Get_Unknown17 write Set_Unknown17;
    property UPSShipmentRecNum: Integer read Get_UPSShipmentRecNum write Set_UPSShipmentRecNum;
    property WaitingOnBill: WordBool read Get_WaitingOnBill write Set_WaitingOnBill;
    property WeeksInPayPeriod: Smallint read Get_WeeksInPayPeriod write Set_WeeksInPayPeriod;
    property Zipcode: WideString read Get_Zipcode write Set_Zipcode;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoJrnlRow provides a Create and CreateRemote method to          
// create instances of the default interface _JrnlRow exposed by              
// the CoClass JrnlRow. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJrnlRow = class
    class function Create: _JrnlRow;
    class function CreateRemote(const MachineName: string): _JrnlRow;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TJrnlRow
// Help String      : 
// Default Interface: _JrnlRow
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TJrnlRowProperties= class;
{$ENDIF}
  TJrnlRow = class(TOleServer)
  private
    FIntf:        _JrnlRow;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TJrnlRowProperties;
    function      GetServerProperties: TJrnlRowProperties;
{$ENDIF}
    function      GetDefaultInterface: _JrnlRow;
  protected
    procedure InitServerData; override;
    function Get_AccountID: WideString;
    procedure Set_AccountID(const Param1: WideString);
    function Get_AccountIndex: Integer;
    procedure Set_AccountIndex(Param1: Integer);
    function Get_ActualLength: Integer;
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_AmountShipped: Double;
    procedure Set_AmountShipped(Param1: Double);
    function Get_CloseOrder: WordBool;
    procedure Set_CloseOrder(Param1: WordBool);
    function Get_CostID: WideString;
    procedure Set_CostID(const Param1: WideString);
    function Get_CostOfSalesTrx: WordBool;
    procedure Set_CostOfSalesTrx(Param1: WordBool);
    function Get_CustomerIndex: Integer;
    procedure Set_CustomerIndex(Param1: Integer);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_EmployeeID: WideString;
    procedure Set_EmployeeID(const Param1: WideString);
    function Get_Extension: Double;
    procedure Set_Extension(Param1: Double);
    function Get_Flag1: WordBool;
    procedure Set_Flag1(Param1: WordBool);
    function Get_Flag2: WordBool;
    procedure Set_Flag2(Param1: WordBool);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HasSerialNumbers: WordBool;
    procedure Set_HasSerialNumbers(Param1: WordBool);
    function Get_InvoiceNumber: WideString;
    procedure Set_InvoiceNumber(const Param1: WideString);
    function Get_ItemIndex: Integer;
    procedure Set_ItemIndex(Param1: Integer);
    function Get_JobIndex: Integer;
    procedure Set_JobIndex(Param1: Integer);
    function Get_JournalID: Integer;
    procedure Set_JournalID(Param1: Integer);
    function Get_LineNo: Smallint;
    procedure Set_LineNo(Param1: Smallint);
    function Get_LinkToOtherTrxIndex: Smallint;
    procedure Set_LinkToOtherTrxIndex(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_OrderLine: Smallint;
    procedure Set_OrderLine(Param1: Smallint);
    function Get_OtherNRecord: Integer;
    procedure Set_OtherNRecord(Param1: Integer);
    function Get_PayrollItemIndex: Smallint;
    procedure Set_PayrollItemIndex(Param1: Smallint);
    function Get_PhaseID: WideString;
    procedure Set_PhaseID(const Param1: WideString);
    function Get_POCreated: WordBool;
    procedure Set_POCreated(Param1: WordBool);
    function Get_Quantity: Double;
    procedure Set_Quantity(Param1: Double);
    function Get_QuantityOrdered: Double;
    procedure Set_QuantityOrdered(Param1: Double);
    function Get_QuantityShipped: Double;
    procedure Set_QuantityShipped(Param1: Double);
    function Get_RecordByte(Index: Integer): Byte;
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_StockingQuantityOrdered: Double;
    procedure Set_StockingQuantityOrdered(Param1: Double);
    function Get_StockingQuantityShipped: Double;
    procedure Set_StockingQuantityShipped(Param1: Double);
    function Get_StockingQuantity: Double;
    procedure Set_StockingQuantity(Param1: Double);
    function Get_StockingUnitPrice: Double;
    procedure Set_StockingUnitPrice(Param1: Double);
    function Get_TaxCode: WideString;
    procedure Set_TaxCode(const Param1: WideString);
    function Get_TaxType: Smallint;
    procedure Set_TaxType(Param1: Smallint);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxType: Integer;
    procedure Set_TrxType(Param1: Integer);
    function Get_UMGUID: WideString;
    procedure Set_UMGUID(const Param1: WideString);
    function Get_UnitPrice: Double;
    procedure Set_UnitPrice(Param1: Double);
    function Get_UnusedInteger2: Smallint;
    procedure Set_UnusedInteger2(Param1: Smallint);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _JrnlRow);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function Delete: Smallint;
    function GetFirst(NRecord: Integer): Smallint;
    function GetFirstForJob(JobIndex: Integer; const PhaseID: WideString; const CostID: WideString; 
                            TrxDate: OleVariant): Smallint;
    function GetNext: Smallint;
    function GetNextByJob: Smallint;
    function Insert: Smallint;
    function OpenFile: Smallint;
    function ReadBytes: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _JrnlRow read GetDefaultInterface;
    property ActualLength: Integer read Get_ActualLength;
    property DateCleared: OleVariant read Get_DateCleared write Set_DateCleared;
    property RecordByte[Index: Integer]: Byte read Get_RecordByte;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property AccountID: WideString read Get_AccountID write Set_AccountID;
    property AccountIndex: Integer read Get_AccountIndex write Set_AccountIndex;
    property Amount: Double read Get_Amount write Set_Amount;
    property AmountShipped: Double read Get_AmountShipped write Set_AmountShipped;
    property CloseOrder: WordBool read Get_CloseOrder write Set_CloseOrder;
    property CostID: WideString read Get_CostID write Set_CostID;
    property CostOfSalesTrx: WordBool read Get_CostOfSalesTrx write Set_CostOfSalesTrx;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property Description: WideString read Get_Description write Set_Description;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
    property Extension: Double read Get_Extension write Set_Extension;
    property Flag1: WordBool read Get_Flag1 write Set_Flag1;
    property Flag2: WordBool read Get_Flag2 write Set_Flag2;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasSerialNumbers: WordBool read Get_HasSerialNumbers write Set_HasSerialNumbers;
    property InvoiceNumber: WideString read Get_InvoiceNumber write Set_InvoiceNumber;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property JournalID: Integer read Get_JournalID write Set_JournalID;
    property LineNo: Smallint read Get_LineNo write Set_LineNo;
    property LinkToOtherTrxIndex: Smallint read Get_LinkToOtherTrxIndex write Set_LinkToOtherTrxIndex;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property OrderLine: Smallint read Get_OrderLine write Set_OrderLine;
    property OtherNRecord: Integer read Get_OtherNRecord write Set_OtherNRecord;
    property PayrollItemIndex: Smallint read Get_PayrollItemIndex write Set_PayrollItemIndex;
    property PhaseID: WideString read Get_PhaseID write Set_PhaseID;
    property POCreated: WordBool read Get_POCreated write Set_POCreated;
    property Quantity: Double read Get_Quantity write Set_Quantity;
    property QuantityOrdered: Double read Get_QuantityOrdered write Set_QuantityOrdered;
    property QuantityShipped: Double read Get_QuantityShipped write Set_QuantityShipped;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property StockingQuantityOrdered: Double read Get_StockingQuantityOrdered write Set_StockingQuantityOrdered;
    property StockingQuantityShipped: Double read Get_StockingQuantityShipped write Set_StockingQuantityShipped;
    property StockingQuantity: Double read Get_StockingQuantity write Set_StockingQuantity;
    property StockingUnitPrice: Double read Get_StockingUnitPrice write Set_StockingUnitPrice;
    property TaxCode: WideString read Get_TaxCode write Set_TaxCode;
    property TaxType: Smallint read Get_TaxType write Set_TaxType;
    property TrxType: Integer read Get_TrxType write Set_TrxType;
    property UMGUID: WideString read Get_UMGUID write Set_UMGUID;
    property UnitPrice: Double read Get_UnitPrice write Set_UnitPrice;
    property UnusedInteger2: Smallint read Get_UnusedInteger2 write Set_UnusedInteger2;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TJrnlRowProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TJrnlRow
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TJrnlRowProperties = class(TPersistent)
  private
    FServer:    TJrnlRow;
    function    GetDefaultInterface: _JrnlRow;
    constructor Create(AServer: TJrnlRow);
  protected
    function Get_AccountID: WideString;
    procedure Set_AccountID(const Param1: WideString);
    function Get_AccountIndex: Integer;
    procedure Set_AccountIndex(Param1: Integer);
    function Get_ActualLength: Integer;
    function Get_Amount: Double;
    procedure Set_Amount(Param1: Double);
    function Get_AmountShipped: Double;
    procedure Set_AmountShipped(Param1: Double);
    function Get_CloseOrder: WordBool;
    procedure Set_CloseOrder(Param1: WordBool);
    function Get_CostID: WideString;
    procedure Set_CostID(const Param1: WideString);
    function Get_CostOfSalesTrx: WordBool;
    procedure Set_CostOfSalesTrx(Param1: WordBool);
    function Get_CustomerIndex: Integer;
    procedure Set_CustomerIndex(Param1: Integer);
    function Get_DateCleared: OleVariant;
    procedure Set_DateCleared(Param1: OleVariant);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_EmployeeID: WideString;
    procedure Set_EmployeeID(const Param1: WideString);
    function Get_Extension: Double;
    procedure Set_Extension(Param1: Double);
    function Get_Flag1: WordBool;
    procedure Set_Flag1(Param1: WordBool);
    function Get_Flag2: WordBool;
    procedure Set_Flag2(Param1: WordBool);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_HasSerialNumbers: WordBool;
    procedure Set_HasSerialNumbers(Param1: WordBool);
    function Get_InvoiceNumber: WideString;
    procedure Set_InvoiceNumber(const Param1: WideString);
    function Get_ItemIndex: Integer;
    procedure Set_ItemIndex(Param1: Integer);
    function Get_JobIndex: Integer;
    procedure Set_JobIndex(Param1: Integer);
    function Get_JournalID: Integer;
    procedure Set_JournalID(Param1: Integer);
    function Get_LineNo: Smallint;
    procedure Set_LineNo(Param1: Smallint);
    function Get_LinkToOtherTrxIndex: Smallint;
    procedure Set_LinkToOtherTrxIndex(Param1: Smallint);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_OrderLine: Smallint;
    procedure Set_OrderLine(Param1: Smallint);
    function Get_OtherNRecord: Integer;
    procedure Set_OtherNRecord(Param1: Integer);
    function Get_PayrollItemIndex: Smallint;
    procedure Set_PayrollItemIndex(Param1: Smallint);
    function Get_PhaseID: WideString;
    procedure Set_PhaseID(const Param1: WideString);
    function Get_POCreated: WordBool;
    procedure Set_POCreated(Param1: WordBool);
    function Get_Quantity: Double;
    procedure Set_Quantity(Param1: Double);
    function Get_QuantityOrdered: Double;
    procedure Set_QuantityOrdered(Param1: Double);
    function Get_QuantityShipped: Double;
    procedure Set_QuantityShipped(Param1: Double);
    function Get_RecordByte(Index: Integer): Byte;
    function Get_ReimbursableExpense: WordBool;
    procedure Set_ReimbursableExpense(Param1: WordBool);
    function Get_StockingQuantityOrdered: Double;
    procedure Set_StockingQuantityOrdered(Param1: Double);
    function Get_StockingQuantityShipped: Double;
    procedure Set_StockingQuantityShipped(Param1: Double);
    function Get_StockingQuantity: Double;
    procedure Set_StockingQuantity(Param1: Double);
    function Get_StockingUnitPrice: Double;
    procedure Set_StockingUnitPrice(Param1: Double);
    function Get_TaxCode: WideString;
    procedure Set_TaxCode(const Param1: WideString);
    function Get_TaxType: Smallint;
    procedure Set_TaxType(Param1: Smallint);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
    function Get_TrxType: Integer;
    procedure Set_TrxType(Param1: Integer);
    function Get_UMGUID: WideString;
    procedure Set_UMGUID(const Param1: WideString);
    function Get_UnitPrice: Double;
    procedure Set_UnitPrice(Param1: Double);
    function Get_UnusedInteger2: Smallint;
    procedure Set_UnusedInteger2(Param1: Smallint);
    function Get_VendorIndex: Integer;
    procedure Set_VendorIndex(Param1: Integer);
  public
    property DefaultInterface: _JrnlRow read GetDefaultInterface;
  published
    property AccountID: WideString read Get_AccountID write Set_AccountID;
    property AccountIndex: Integer read Get_AccountIndex write Set_AccountIndex;
    property Amount: Double read Get_Amount write Set_Amount;
    property AmountShipped: Double read Get_AmountShipped write Set_AmountShipped;
    property CloseOrder: WordBool read Get_CloseOrder write Set_CloseOrder;
    property CostID: WideString read Get_CostID write Set_CostID;
    property CostOfSalesTrx: WordBool read Get_CostOfSalesTrx write Set_CostOfSalesTrx;
    property CustomerIndex: Integer read Get_CustomerIndex write Set_CustomerIndex;
    property Description: WideString read Get_Description write Set_Description;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
    property Extension: Double read Get_Extension write Set_Extension;
    property Flag1: WordBool read Get_Flag1 write Set_Flag1;
    property Flag2: WordBool read Get_Flag2 write Set_Flag2;
    property GUID: WideString read Get_GUID write Set_GUID;
    property HasSerialNumbers: WordBool read Get_HasSerialNumbers write Set_HasSerialNumbers;
    property InvoiceNumber: WideString read Get_InvoiceNumber write Set_InvoiceNumber;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property JournalID: Integer read Get_JournalID write Set_JournalID;
    property LineNo: Smallint read Get_LineNo write Set_LineNo;
    property LinkToOtherTrxIndex: Smallint read Get_LinkToOtherTrxIndex write Set_LinkToOtherTrxIndex;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property OrderLine: Smallint read Get_OrderLine write Set_OrderLine;
    property OtherNRecord: Integer read Get_OtherNRecord write Set_OtherNRecord;
    property PayrollItemIndex: Smallint read Get_PayrollItemIndex write Set_PayrollItemIndex;
    property PhaseID: WideString read Get_PhaseID write Set_PhaseID;
    property POCreated: WordBool read Get_POCreated write Set_POCreated;
    property Quantity: Double read Get_Quantity write Set_Quantity;
    property QuantityOrdered: Double read Get_QuantityOrdered write Set_QuantityOrdered;
    property QuantityShipped: Double read Get_QuantityShipped write Set_QuantityShipped;
    property ReimbursableExpense: WordBool read Get_ReimbursableExpense write Set_ReimbursableExpense;
    property StockingQuantityOrdered: Double read Get_StockingQuantityOrdered write Set_StockingQuantityOrdered;
    property StockingQuantityShipped: Double read Get_StockingQuantityShipped write Set_StockingQuantityShipped;
    property StockingQuantity: Double read Get_StockingQuantity write Set_StockingQuantity;
    property StockingUnitPrice: Double read Get_StockingUnitPrice write Set_StockingUnitPrice;
    property TaxCode: WideString read Get_TaxCode write Set_TaxCode;
    property TaxType: Smallint read Get_TaxType write Set_TaxType;
    property TrxType: Integer read Get_TrxType write Set_TrxType;
    property UMGUID: WideString read Get_UMGUID write Set_UMGUID;
    property UnitPrice: Double read Get_UnitPrice write Set_UnitPrice;
    property UnusedInteger2: Smallint read Get_UnusedInteger2 write Set_UnusedInteger2;
    property VendorIndex: Integer read Get_VendorIndex write Set_VendorIndex;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDefaultPriceLevels provides a Create and CreateRemote method to          
// create instances of the default interface _DefaultPriceLevels exposed by              
// the CoClass DefaultPriceLevels. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDefaultPriceLevels = class
    class function Create: _DefaultPriceLevels;
    class function CreateRemote(const MachineName: string): _DefaultPriceLevels;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDefaultPriceLevels
// Help String      : 
// Default Interface: _DefaultPriceLevels
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDefaultPriceLevelsProperties= class;
{$ENDIF}
  TDefaultPriceLevels = class(TOleServer)
  private
    FIntf:        _DefaultPriceLevels;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDefaultPriceLevelsProperties;
    function      GetServerProperties: TDefaultPriceLevelsProperties;
{$ENDIF}
    function      GetDefaultInterface: _DefaultPriceLevels;
  protected
    procedure InitServerData; override;
    function Get_Amount(Index: Smallint): Double;
    procedure Set_Amount(Index: Smallint; Param2: Double);
    function Get_Enabled(Index: Smallint): Smallint;
    procedure Set_Enabled(Index: Smallint; Param2: Smallint);
    function Get_Level(Index: Smallint): Smallint;
    procedure Set_Level(Index: Smallint; Param2: Smallint);
    function Get_Method(Index: Smallint): Smallint;
    procedure Set_Method(Index: Smallint; Param2: Smallint);
    function Get_Name(Index: Smallint): WideString;
    procedure Set_Name(Index: Smallint; const Param2: WideString);
    function Get_RoundBy(Index: Smallint): Double;
    procedure Set_RoundBy(Index: Smallint; Param2: Double);
    function Get_Rounding(Index: Smallint): Smallint;
    procedure Set_Rounding(Index: Smallint; Param2: Smallint);
    function Get_Use(Index: Smallint): Smallint;
    procedure Set_Use(Index: Smallint; Param2: Smallint);
    function Get_Unused1(Index: Smallint): Double;
    procedure Set_Unused1(Index: Smallint; Param2: Double);
    function Get_Unused2(Index: Smallint): Double;
    procedure Set_Unused2(Index: Smallint; Param2: Double);
    function Get_Unused3(Index: Smallint): Smallint;
    procedure Set_Unused3(Index: Smallint; Param2: Smallint);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DefaultPriceLevels);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Read: Smallint;
    function Update: Smallint;
    property DefaultInterface: _DefaultPriceLevels read GetDefaultInterface;
    property Amount[Index: Smallint]: Double read Get_Amount write Set_Amount;
    property Enabled[Index: Smallint]: Smallint read Get_Enabled write Set_Enabled;
    property Level[Index: Smallint]: Smallint read Get_Level write Set_Level;
    property Method[Index: Smallint]: Smallint read Get_Method write Set_Method;
    property Name[Index: Smallint]: WideString read Get_Name write Set_Name;
    property RoundBy[Index: Smallint]: Double read Get_RoundBy write Set_RoundBy;
    property Rounding[Index: Smallint]: Smallint read Get_Rounding write Set_Rounding;
    property Use[Index: Smallint]: Smallint read Get_Use write Set_Use;
    property Unused1[Index: Smallint]: Double read Get_Unused1 write Set_Unused1;
    property Unused2[Index: Smallint]: Double read Get_Unused2 write Set_Unused2;
    property Unused3[Index: Smallint]: Smallint read Get_Unused3 write Set_Unused3;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDefaultPriceLevelsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDefaultPriceLevels
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDefaultPriceLevelsProperties = class(TPersistent)
  private
    FServer:    TDefaultPriceLevels;
    function    GetDefaultInterface: _DefaultPriceLevels;
    constructor Create(AServer: TDefaultPriceLevels);
  protected
    function Get_Amount(Index: Smallint): Double;
    procedure Set_Amount(Index: Smallint; Param2: Double);
    function Get_Enabled(Index: Smallint): Smallint;
    procedure Set_Enabled(Index: Smallint; Param2: Smallint);
    function Get_Level(Index: Smallint): Smallint;
    procedure Set_Level(Index: Smallint; Param2: Smallint);
    function Get_Method(Index: Smallint): Smallint;
    procedure Set_Method(Index: Smallint; Param2: Smallint);
    function Get_Name(Index: Smallint): WideString;
    procedure Set_Name(Index: Smallint; const Param2: WideString);
    function Get_RoundBy(Index: Smallint): Double;
    procedure Set_RoundBy(Index: Smallint; Param2: Double);
    function Get_Rounding(Index: Smallint): Smallint;
    procedure Set_Rounding(Index: Smallint; Param2: Smallint);
    function Get_Use(Index: Smallint): Smallint;
    procedure Set_Use(Index: Smallint; Param2: Smallint);
    function Get_Unused1(Index: Smallint): Double;
    procedure Set_Unused1(Index: Smallint; Param2: Double);
    function Get_Unused2(Index: Smallint): Double;
    procedure Set_Unused2(Index: Smallint; Param2: Double);
    function Get_Unused3(Index: Smallint): Smallint;
    procedure Set_Unused3(Index: Smallint; Param2: Smallint);
  public
    property DefaultInterface: _DefaultPriceLevels read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRaiseHistory provides a Create and CreateRemote method to          
// create instances of the default interface _RaiseHistory exposed by              
// the CoClass RaiseHistory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRaiseHistory = class
    class function Create: _RaiseHistory;
    class function CreateRemote(const MachineName: string): _RaiseHistory;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRaiseHistory
// Help String      : 
// Default Interface: _RaiseHistory
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRaiseHistoryProperties= class;
{$ENDIF}
  TRaiseHistory = class(TOleServer)
  private
    FIntf:        _RaiseHistory;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRaiseHistoryProperties;
    function      GetServerProperties: TRaiseHistoryProperties;
{$ENDIF}
    function      GetDefaultInterface: _RaiseHistory;
  protected
    procedure InitServerData; override;
    function Get_BaseAmount: Double;
    procedure Set_BaseAmount(Param1: Double);
    function Get_DateLastRaise: OleVariant;
    procedure Set_DateLastRaise(Param1: OleVariant);
    function Get_EmployeeIndex: Integer;
    procedure Set_EmployeeIndex(Param1: Integer);
    function Get_NewAmount: Double;
    procedure Set_NewAmount(Param1: Double);
    function Get_RaiseNote: WideString;
    procedure Set_RaiseNote(const Param1: WideString);
    function Get_RaiseAmount: Double;
    procedure Set_RaiseAmount(Param1: Double);
    function Get_RaisePercent: Double;
    procedure Set_RaisePercent(Param1: Double);
    function Get_Rate: Smallint;
    procedure Set_Rate(Param1: Smallint);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _RaiseHistory);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _RaiseHistory read GetDefaultInterface;
    property DateLastRaise: OleVariant read Get_DateLastRaise write Set_DateLastRaise;
    property BaseAmount: Double read Get_BaseAmount write Set_BaseAmount;
    property EmployeeIndex: Integer read Get_EmployeeIndex write Set_EmployeeIndex;
    property NewAmount: Double read Get_NewAmount write Set_NewAmount;
    property RaiseNote: WideString read Get_RaiseNote write Set_RaiseNote;
    property RaiseAmount: Double read Get_RaiseAmount write Set_RaiseAmount;
    property RaisePercent: Double read Get_RaisePercent write Set_RaisePercent;
    property Rate: Smallint read Get_Rate write Set_Rate;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRaiseHistoryProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRaiseHistory
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRaiseHistoryProperties = class(TPersistent)
  private
    FServer:    TRaiseHistory;
    function    GetDefaultInterface: _RaiseHistory;
    constructor Create(AServer: TRaiseHistory);
  protected
    function Get_BaseAmount: Double;
    procedure Set_BaseAmount(Param1: Double);
    function Get_DateLastRaise: OleVariant;
    procedure Set_DateLastRaise(Param1: OleVariant);
    function Get_EmployeeIndex: Integer;
    procedure Set_EmployeeIndex(Param1: Integer);
    function Get_NewAmount: Double;
    procedure Set_NewAmount(Param1: Double);
    function Get_RaiseNote: WideString;
    procedure Set_RaiseNote(const Param1: WideString);
    function Get_RaiseAmount: Double;
    procedure Set_RaiseAmount(Param1: Double);
    function Get_RaisePercent: Double;
    procedure Set_RaisePercent(Param1: Double);
    function Get_Rate: Smallint;
    procedure Set_Rate(Param1: Smallint);
  public
    property DefaultInterface: _RaiseHistory read GetDefaultInterface;
  published
    property BaseAmount: Double read Get_BaseAmount write Set_BaseAmount;
    property EmployeeIndex: Integer read Get_EmployeeIndex write Set_EmployeeIndex;
    property NewAmount: Double read Get_NewAmount write Set_NewAmount;
    property RaiseNote: WideString read Get_RaiseNote write Set_RaiseNote;
    property RaiseAmount: Double read Get_RaiseAmount write Set_RaiseAmount;
    property RaisePercent: Double read Get_RaisePercent write Set_RaisePercent;
    property Rate: Smallint read Get_Rate write Set_Rate;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBOMHistory provides a Create and CreateRemote method to          
// create instances of the default interface _BOMHistory exposed by              
// the CoClass BOMHistory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBOMHistory = class
    class function Create: _BOMHistory;
    class function CreateRemote(const MachineName: string): _BOMHistory;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBOMHistory
// Help String      : 
// Default Interface: _BOMHistory
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBOMHistoryProperties= class;
{$ENDIF}
  TBOMHistory = class(TOleServer)
  private
    FIntf:        _BOMHistory;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBOMHistoryProperties;
    function      GetServerProperties: TBOMHistoryProperties;
{$ENDIF}
    function      GetDefaultInterface: _BOMHistory;
  protected
    procedure InitServerData; override;
    function Get_AssemblyRecordNo: Integer;
    procedure Set_AssemblyRecordNo(Param1: Integer);
    function Get_ComponentQtyRequired(Index: Smallint): Double;
    procedure Set_ComponentQtyRequired(Index: Smallint; Param2: Double);
    function Get_ComponentRecordNumber(Index: Smallint): Integer;
    procedure Set_ComponentRecordNumber(Index: Smallint; Param2: Integer);
    function Get_EffectiveDate: OleVariant;
    procedure Set_EffectiveDate(Param1: OleVariant);
    function Get_LastUpdateCounter: Integer;
    procedure Set_LastUpdateCounter(Param1: Integer);
    function Get_NoComponents: Integer;
    procedure Set_NoComponents(Param1: Integer);
    function Get_RecordNumber: Integer;
    procedure Set_RecordNumber(Param1: Integer);
    function Get_RevisionNote: WideString;
    procedure Set_RevisionNote(const Param1: WideString);
    function Get_RevisionNumber: Integer;
    procedure Set_RevisionNumber(Param1: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _BOMHistory);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(RecordNumber: Integer): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _BOMHistory read GetDefaultInterface;
    property ComponentQtyRequired[Index: Smallint]: Double read Get_ComponentQtyRequired write Set_ComponentQtyRequired;
    property ComponentRecordNumber[Index: Smallint]: Integer read Get_ComponentRecordNumber write Set_ComponentRecordNumber;
    property EffectiveDate: OleVariant read Get_EffectiveDate write Set_EffectiveDate;
    property AssemblyRecordNo: Integer read Get_AssemblyRecordNo write Set_AssemblyRecordNo;
    property LastUpdateCounter: Integer read Get_LastUpdateCounter write Set_LastUpdateCounter;
    property NoComponents: Integer read Get_NoComponents write Set_NoComponents;
    property RecordNumber: Integer read Get_RecordNumber write Set_RecordNumber;
    property RevisionNote: WideString read Get_RevisionNote write Set_RevisionNote;
    property RevisionNumber: Integer read Get_RevisionNumber write Set_RevisionNumber;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBOMHistoryProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBOMHistory
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBOMHistoryProperties = class(TPersistent)
  private
    FServer:    TBOMHistory;
    function    GetDefaultInterface: _BOMHistory;
    constructor Create(AServer: TBOMHistory);
  protected
    function Get_AssemblyRecordNo: Integer;
    procedure Set_AssemblyRecordNo(Param1: Integer);
    function Get_ComponentQtyRequired(Index: Smallint): Double;
    procedure Set_ComponentQtyRequired(Index: Smallint; Param2: Double);
    function Get_ComponentRecordNumber(Index: Smallint): Integer;
    procedure Set_ComponentRecordNumber(Index: Smallint; Param2: Integer);
    function Get_EffectiveDate: OleVariant;
    procedure Set_EffectiveDate(Param1: OleVariant);
    function Get_LastUpdateCounter: Integer;
    procedure Set_LastUpdateCounter(Param1: Integer);
    function Get_NoComponents: Integer;
    procedure Set_NoComponents(Param1: Integer);
    function Get_RecordNumber: Integer;
    procedure Set_RecordNumber(Param1: Integer);
    function Get_RevisionNote: WideString;
    procedure Set_RevisionNote(const Param1: WideString);
    function Get_RevisionNumber: Integer;
    procedure Set_RevisionNumber(Param1: Integer);
  public
    property DefaultInterface: _BOMHistory read GetDefaultInterface;
  published
    property AssemblyRecordNo: Integer read Get_AssemblyRecordNo write Set_AssemblyRecordNo;
    property LastUpdateCounter: Integer read Get_LastUpdateCounter write Set_LastUpdateCounter;
    property NoComponents: Integer read Get_NoComponents write Set_NoComponents;
    property RecordNumber: Integer read Get_RecordNumber write Set_RecordNumber;
    property RevisionNote: WideString read Get_RevisionNote write Set_RevisionNote;
    property RevisionNumber: Integer read Get_RevisionNumber write Set_RevisionNumber;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBOMItems provides a Create and CreateRemote method to          
// create instances of the default interface _BOMItems exposed by              
// the CoClass BOMItems. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBOMItems = class
    class function Create: _BOMItems;
    class function CreateRemote(const MachineName: string): _BOMItems;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBOMItems
// Help String      : 
// Default Interface: _BOMItems
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBOMItemsProperties= class;
{$ENDIF}
  TBOMItems = class(TOleServer)
  private
    FIntf:        _BOMItems;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBOMItemsProperties;
    function      GetServerProperties: TBOMItemsProperties;
{$ENDIF}
    function      GetDefaultInterface: _BOMItems;
  protected
    procedure InitServerData; override;
    function Get_AssemblyRecordNo: Integer;
    procedure Set_AssemblyRecordNo(Param1: Integer);
    function Get_ComponentNumber: Integer;
    procedure Set_ComponentNumber(Param1: Integer);
    function Get_ComponentRecordNo: Integer;
    procedure Set_ComponentRecordNo(Param1: Integer);
    function Get_EffectiveDate: OleVariant;
    procedure Set_EffectiveDate(Param1: OleVariant);
    function Get_QtyRequired: Double;
    procedure Set_QtyRequired(Param1: Double);
    function Get_RecordNumber: Integer;
    procedure Set_RecordNumber(Param1: Integer);
    function Get_RevisionNumber: Integer;
    procedure Set_RevisionNumber(Param1: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _BOMItems);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(RecordNumber: Integer): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _BOMItems read GetDefaultInterface;
    property EffectiveDate: OleVariant read Get_EffectiveDate write Set_EffectiveDate;
    property AssemblyRecordNo: Integer read Get_AssemblyRecordNo write Set_AssemblyRecordNo;
    property ComponentNumber: Integer read Get_ComponentNumber write Set_ComponentNumber;
    property ComponentRecordNo: Integer read Get_ComponentRecordNo write Set_ComponentRecordNo;
    property QtyRequired: Double read Get_QtyRequired write Set_QtyRequired;
    property RecordNumber: Integer read Get_RecordNumber write Set_RecordNumber;
    property RevisionNumber: Integer read Get_RevisionNumber write Set_RevisionNumber;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBOMItemsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBOMItems
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBOMItemsProperties = class(TPersistent)
  private
    FServer:    TBOMItems;
    function    GetDefaultInterface: _BOMItems;
    constructor Create(AServer: TBOMItems);
  protected
    function Get_AssemblyRecordNo: Integer;
    procedure Set_AssemblyRecordNo(Param1: Integer);
    function Get_ComponentNumber: Integer;
    procedure Set_ComponentNumber(Param1: Integer);
    function Get_ComponentRecordNo: Integer;
    procedure Set_ComponentRecordNo(Param1: Integer);
    function Get_EffectiveDate: OleVariant;
    procedure Set_EffectiveDate(Param1: OleVariant);
    function Get_QtyRequired: Double;
    procedure Set_QtyRequired(Param1: Double);
    function Get_RecordNumber: Integer;
    procedure Set_RecordNumber(Param1: Integer);
    function Get_RevisionNumber: Integer;
    procedure Set_RevisionNumber(Param1: Integer);
  public
    property DefaultInterface: _BOMItems read GetDefaultInterface;
  published
    property AssemblyRecordNo: Integer read Get_AssemblyRecordNo write Set_AssemblyRecordNo;
    property ComponentNumber: Integer read Get_ComponentNumber write Set_ComponentNumber;
    property ComponentRecordNo: Integer read Get_ComponentRecordNo write Set_ComponentRecordNo;
    property QtyRequired: Double read Get_QtyRequired write Set_QtyRequired;
    property RecordNumber: Integer read Get_RecordNumber write Set_RecordNumber;
    property RevisionNumber: Integer read Get_RevisionNumber write Set_RevisionNumber;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoQuantityDiscount provides a Create and CreateRemote method to          
// create instances of the default interface _QuantityDiscount exposed by              
// the CoClass QuantityDiscount. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoQuantityDiscount = class
    class function Create: _QuantityDiscount;
    class function CreateRemote(const MachineName: string): _QuantityDiscount;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TQuantityDiscount
// Help String      : 
// Default Interface: _QuantityDiscount
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TQuantityDiscountProperties= class;
{$ENDIF}
  TQuantityDiscount = class(TOleServer)
  private
    FIntf:        _QuantityDiscount;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TQuantityDiscountProperties;
    function      GetServerProperties: TQuantityDiscountProperties;
{$ENDIF}
    function      GetDefaultInterface: _QuantityDiscount;
  protected
    procedure InitServerData; override;
    function Get_CalcMethod: Smallint;
    procedure Set_CalcMethod(Param1: Smallint);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_Discount(Index: Smallint): Double;
    procedure Set_Discount(Index: Smallint; Param2: Double);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_MinQuantity(Index: Smallint): Double;
    procedure Set_MinQuantity(Index: Smallint; Param2: Double);
    function Get_PriceLevelSelected(Index: Smallint): WordBool;
    procedure Set_PriceLevelSelected(Index: Smallint; Param2: WordBool);
    function Get_RecordNumber: WideString;
    procedure Set_RecordNumber(const Param1: WideString);
    function Get_RoundingCents: Double;
    procedure Set_RoundingCents(Param1: Double);
    function Get_RoundingMethod: Smallint;
    procedure Set_RoundingMethod(Param1: Smallint);
    function Get_Unused1: Integer;
    procedure Set_Unused1(Param1: Integer);
    function Get_QuantitySpecified(Index: Smallint): WordBool;
    procedure Set_QuantitySpecified(Index: Smallint; Param2: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _QuantityDiscount);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(const RecordNumber: WideString): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _QuantityDiscount read GetDefaultInterface;
    property Discount[Index: Smallint]: Double read Get_Discount write Set_Discount;
    property MinQuantity[Index: Smallint]: Double read Get_MinQuantity write Set_MinQuantity;
    property PriceLevelSelected[Index: Smallint]: WordBool read Get_PriceLevelSelected write Set_PriceLevelSelected;
    property QuantitySpecified[Index: Smallint]: WordBool read Get_QuantitySpecified write Set_QuantitySpecified;
    property CalcMethod: Smallint read Get_CalcMethod write Set_CalcMethod;
    property Description: WideString read Get_Description write Set_Description;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property RecordNumber: WideString read Get_RecordNumber write Set_RecordNumber;
    property RoundingCents: Double read Get_RoundingCents write Set_RoundingCents;
    property RoundingMethod: Smallint read Get_RoundingMethod write Set_RoundingMethod;
    property Unused1: Integer read Get_Unused1 write Set_Unused1;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TQuantityDiscountProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TQuantityDiscount
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TQuantityDiscountProperties = class(TPersistent)
  private
    FServer:    TQuantityDiscount;
    function    GetDefaultInterface: _QuantityDiscount;
    constructor Create(AServer: TQuantityDiscount);
  protected
    function Get_CalcMethod: Smallint;
    procedure Set_CalcMethod(Param1: Smallint);
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_Discount(Index: Smallint): Double;
    procedure Set_Discount(Index: Smallint; Param2: Double);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_MinQuantity(Index: Smallint): Double;
    procedure Set_MinQuantity(Index: Smallint; Param2: Double);
    function Get_PriceLevelSelected(Index: Smallint): WordBool;
    procedure Set_PriceLevelSelected(Index: Smallint; Param2: WordBool);
    function Get_RecordNumber: WideString;
    procedure Set_RecordNumber(const Param1: WideString);
    function Get_RoundingCents: Double;
    procedure Set_RoundingCents(Param1: Double);
    function Get_RoundingMethod: Smallint;
    procedure Set_RoundingMethod(Param1: Smallint);
    function Get_Unused1: Integer;
    procedure Set_Unused1(Param1: Integer);
    function Get_QuantitySpecified(Index: Smallint): WordBool;
    procedure Set_QuantitySpecified(Index: Smallint; Param2: WordBool);
  public
    property DefaultInterface: _QuantityDiscount read GetDefaultInterface;
  published
    property CalcMethod: Smallint read Get_CalcMethod write Set_CalcMethod;
    property Description: WideString read Get_Description write Set_Description;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property RecordNumber: WideString read Get_RecordNumber write Set_RecordNumber;
    property RoundingCents: Double read Get_RoundingCents write Set_RoundingCents;
    property RoundingMethod: Smallint read Get_RoundingMethod write Set_RoundingMethod;
    property Unused1: Integer read Get_Unused1 write Set_Unused1;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoUnitMeasure provides a Create and CreateRemote method to          
// create instances of the default interface _UnitMeasure exposed by              
// the CoClass UnitMeasure. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUnitMeasure = class
    class function Create: _UnitMeasure;
    class function CreateRemote(const MachineName: string): _UnitMeasure;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUnitMeasure
// Help String      : 
// Default Interface: _UnitMeasure
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TUnitMeasureProperties= class;
{$ENDIF}
  TUnitMeasure = class(TOleServer)
  private
    FIntf:        _UnitMeasure;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TUnitMeasureProperties;
    function      GetServerProperties: TUnitMeasureProperties;
{$ENDIF}
    function      GetDefaultInterface: _UnitMeasure;
  protected
    procedure InitServerData; override;
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_ID: WideString;
    procedure Set_ID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_NoStockingUnits: Double;
    procedure Set_NoStockingUnits(Param1: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UnitMeasure);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(const ID: WideString): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _UnitMeasure read GetDefaultInterface;
    property Description: WideString read Get_Description write Set_Description;
    property GUID: WideString read Get_GUID write Set_GUID;
    property ID: WideString read Get_ID write Set_ID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property NoStockingUnits: Double read Get_NoStockingUnits write Set_NoStockingUnits;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TUnitMeasureProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TUnitMeasure
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TUnitMeasureProperties = class(TPersistent)
  private
    FServer:    TUnitMeasure;
    function    GetDefaultInterface: _UnitMeasure;
    constructor Create(AServer: TUnitMeasure);
  protected
    function Get_Description: WideString;
    procedure Set_Description(const Param1: WideString);
    function Get_GUID: WideString;
    procedure Set_GUID(const Param1: WideString);
    function Get_ID: WideString;
    procedure Set_ID(const Param1: WideString);
    function Get_Inactive: WordBool;
    procedure Set_Inactive(Param1: WordBool);
    function Get_NoStockingUnits: Double;
    procedure Set_NoStockingUnits(Param1: Double);
  public
    property DefaultInterface: _UnitMeasure read GetDefaultInterface;
  published
    property Description: WideString read Get_Description write Set_Description;
    property GUID: WideString read Get_GUID write Set_GUID;
    property ID: WideString read Get_ID write Set_ID;
    property Inactive: WordBool read Get_Inactive write Set_Inactive;
    property NoStockingUnits: Double read Get_NoStockingUnits write Set_NoStockingUnits;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoWorkTicket provides a Create and CreateRemote method to          
// create instances of the default interface _WorkTicket exposed by              
// the CoClass WorkTicket. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWorkTicket = class
    class function Create: _WorkTicket;
    class function CreateRemote(const MachineName: string): _WorkTicket;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TWorkTicket
// Help String      : 
// Default Interface: _WorkTicket
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TWorkTicketProperties= class;
{$ENDIF}
  TWorkTicket = class(TOleServer)
  private
    FIntf:        _WorkTicket;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TWorkTicketProperties;
    function      GetServerProperties: TWorkTicketProperties;
{$ENDIF}
    function      GetDefaultInterface: _WorkTicket;
  protected
    procedure InitServerData; override;
    function Get_AssemblyRevNo: Integer;
    procedure Set_AssemblyRevNo(Param1: Integer);
    function Get_Closed: WordBool;
    procedure Set_Closed(Param1: WordBool);
    function Get_ComponentActualHours(Index: Smallint): Double;
    procedure Set_ComponentActualHours(Index: Smallint; Param2: Double);
    function Get_ComponentFinished(Index: Smallint): WordBool;
    procedure Set_ComponentFinished(Index: Smallint; Param2: WordBool);
    function Get_ComponentPOCreated(Index: Smallint): WordBool;
    procedure Set_ComponentPOCreated(Index: Smallint; Param2: WordBool);
    function Get_ComponentIndex(Index: Smallint): Integer;
    procedure Set_ComponentIndex(Index: Smallint; Param2: Integer);
    function Get_ComponentQuantityRequired(Index: Smallint): Double;
    procedure Set_ComponentQuantityRequired(Index: Smallint; Param2: Double);
    function Get_DateComplete: OleVariant;
    procedure Set_DateComplete(Param1: OleVariant);
    function Get_DateNeededBy: OleVariant;
    procedure Set_DateNeededBy(Param1: OleVariant);
    function Get_DateStarted: OleVariant;
    procedure Set_DateStarted(Param1: OleVariant);
    function Get_EmployeeIndex: Integer;
    procedure Set_EmployeeIndex(Param1: Integer);
    function Get_Internal1: Integer;
    procedure Set_Internal1(Param1: Integer);
    function Get_Internal2: Integer;
    procedure Set_Internal2(Param1: Integer);
    function Get_Internal3: Integer;
    procedure Set_Internal3(Param1: Integer);
    function Get_ItemIndex: Integer;
    procedure Set_ItemIndex(Param1: Integer);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_NComponents: Integer;
    procedure Set_NComponents(Param1: Integer);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_Number: WideString;
    procedure Set_Number(const Param1: WideString);
    function Get_QtyToBuild: Double;
    procedure Set_QtyToBuild(Param1: Double);
    function Get_RecordNumber: Integer;
    procedure Set_RecordNumber(Param1: Integer);
    function Get_TotalEstHours: Double;
    procedure Set_TotalEstHours(Param1: Double);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _WorkTicket);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function GetEqual(RecordNumber: Integer): Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _WorkTicket read GetDefaultInterface;
    property ComponentActualHours[Index: Smallint]: Double read Get_ComponentActualHours write Set_ComponentActualHours;
    property ComponentFinished[Index: Smallint]: WordBool read Get_ComponentFinished write Set_ComponentFinished;
    property ComponentPOCreated[Index: Smallint]: WordBool read Get_ComponentPOCreated write Set_ComponentPOCreated;
    property ComponentIndex[Index: Smallint]: Integer read Get_ComponentIndex write Set_ComponentIndex;
    property ComponentQuantityRequired[Index: Smallint]: Double read Get_ComponentQuantityRequired write Set_ComponentQuantityRequired;
    property DateComplete: OleVariant read Get_DateComplete write Set_DateComplete;
    property DateNeededBy: OleVariant read Get_DateNeededBy write Set_DateNeededBy;
    property DateStarted: OleVariant read Get_DateStarted write Set_DateStarted;
    property TrxDate: OleVariant read Get_TrxDate write Set_TrxDate;
    property AssemblyRevNo: Integer read Get_AssemblyRevNo write Set_AssemblyRevNo;
    property Closed: WordBool read Get_Closed write Set_Closed;
    property EmployeeIndex: Integer read Get_EmployeeIndex write Set_EmployeeIndex;
    property Internal1: Integer read Get_Internal1 write Set_Internal1;
    property Internal2: Integer read Get_Internal2 write Set_Internal2;
    property Internal3: Integer read Get_Internal3 write Set_Internal3;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property Note: WideString read Get_Note write Set_Note;
    property NComponents: Integer read Get_NComponents write Set_NComponents;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Number: WideString read Get_Number write Set_Number;
    property QtyToBuild: Double read Get_QtyToBuild write Set_QtyToBuild;
    property RecordNumber: Integer read Get_RecordNumber write Set_RecordNumber;
    property TotalEstHours: Double read Get_TotalEstHours write Set_TotalEstHours;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TWorkTicketProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TWorkTicket
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TWorkTicketProperties = class(TPersistent)
  private
    FServer:    TWorkTicket;
    function    GetDefaultInterface: _WorkTicket;
    constructor Create(AServer: TWorkTicket);
  protected
    function Get_AssemblyRevNo: Integer;
    procedure Set_AssemblyRevNo(Param1: Integer);
    function Get_Closed: WordBool;
    procedure Set_Closed(Param1: WordBool);
    function Get_ComponentActualHours(Index: Smallint): Double;
    procedure Set_ComponentActualHours(Index: Smallint; Param2: Double);
    function Get_ComponentFinished(Index: Smallint): WordBool;
    procedure Set_ComponentFinished(Index: Smallint; Param2: WordBool);
    function Get_ComponentPOCreated(Index: Smallint): WordBool;
    procedure Set_ComponentPOCreated(Index: Smallint; Param2: WordBool);
    function Get_ComponentIndex(Index: Smallint): Integer;
    procedure Set_ComponentIndex(Index: Smallint; Param2: Integer);
    function Get_ComponentQuantityRequired(Index: Smallint): Double;
    procedure Set_ComponentQuantityRequired(Index: Smallint; Param2: Double);
    function Get_DateComplete: OleVariant;
    procedure Set_DateComplete(Param1: OleVariant);
    function Get_DateNeededBy: OleVariant;
    procedure Set_DateNeededBy(Param1: OleVariant);
    function Get_DateStarted: OleVariant;
    procedure Set_DateStarted(Param1: OleVariant);
    function Get_EmployeeIndex: Integer;
    procedure Set_EmployeeIndex(Param1: Integer);
    function Get_Internal1: Integer;
    procedure Set_Internal1(Param1: Integer);
    function Get_Internal2: Integer;
    procedure Set_Internal2(Param1: Integer);
    function Get_Internal3: Integer;
    procedure Set_Internal3(Param1: Integer);
    function Get_ItemIndex: Integer;
    procedure Set_ItemIndex(Param1: Integer);
    function Get_Note: WideString;
    procedure Set_Note(const Param1: WideString);
    function Get_NComponents: Integer;
    procedure Set_NComponents(Param1: Integer);
    function Get_NRecord: Integer;
    procedure Set_NRecord(Param1: Integer);
    function Get_Number: WideString;
    procedure Set_Number(const Param1: WideString);
    function Get_QtyToBuild: Double;
    procedure Set_QtyToBuild(Param1: Double);
    function Get_RecordNumber: Integer;
    procedure Set_RecordNumber(Param1: Integer);
    function Get_TotalEstHours: Double;
    procedure Set_TotalEstHours(Param1: Double);
    function Get_TrxDate: OleVariant;
    procedure Set_TrxDate(Param1: OleVariant);
  public
    property DefaultInterface: _WorkTicket read GetDefaultInterface;
  published
    property AssemblyRevNo: Integer read Get_AssemblyRevNo write Set_AssemblyRevNo;
    property Closed: WordBool read Get_Closed write Set_Closed;
    property EmployeeIndex: Integer read Get_EmployeeIndex write Set_EmployeeIndex;
    property Internal1: Integer read Get_Internal1 write Set_Internal1;
    property Internal2: Integer read Get_Internal2 write Set_Internal2;
    property Internal3: Integer read Get_Internal3 write Set_Internal3;
    property ItemIndex: Integer read Get_ItemIndex write Set_ItemIndex;
    property Note: WideString read Get_Note write Set_Note;
    property NComponents: Integer read Get_NComponents write Set_NComponents;
    property NRecord: Integer read Get_NRecord write Set_NRecord;
    property Number: WideString read Get_Number write Set_Number;
    property QtyToBuild: Double read Get_QtyToBuild write Set_QtyToBuild;
    property RecordNumber: Integer read Get_RecordNumber write Set_RecordNumber;
    property TotalEstHours: Double read Get_TotalEstHours write Set_TotalEstHours;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSelectJob provides a Create and CreateRemote method to          
// create instances of the default interface _SelectJob exposed by              
// the CoClass SelectJob. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectJob = class
    class function Create: _SelectJob;
    class function CreateRemote(const MachineName: string): _SelectJob;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSelectJob
// Help String      : 
// Default Interface: _SelectJob
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSelectJobProperties= class;
{$ENDIF}
  TSelectJob = class(TOleServer)
  private
    FIntf:        _SelectJob;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSelectJobProperties;
    function      GetServerProperties: TSelectJobProperties;
{$ENDIF}
    function      GetDefaultInterface: _SelectJob;
  protected
    procedure InitServerData; override;
    function Get_CostIndex: Integer;
    procedure Set_CostIndex(Param1: Integer);
    procedure Set_ExcludeInactive(Param1: WordBool);
    function Get_JobIndex: Integer;
    procedure Set_JobIndex(Param1: Integer);
    function Get_PhaseIndex: Integer;
    procedure Set_PhaseIndex(Param1: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SelectJob);
    procedure Disconnect; override;
    function ShowOpen: OleVariant;
    function Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
    property DefaultInterface: _SelectJob read GetDefaultInterface;
    property ExcludeInactive: WordBool write Set_ExcludeInactive;
    property CostIndex: Integer read Get_CostIndex write Set_CostIndex;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property PhaseIndex: Integer read Get_PhaseIndex write Set_PhaseIndex;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSelectJobProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSelectJob
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSelectJobProperties = class(TPersistent)
  private
    FServer:    TSelectJob;
    function    GetDefaultInterface: _SelectJob;
    constructor Create(AServer: TSelectJob);
  protected
    function Get_CostIndex: Integer;
    procedure Set_CostIndex(Param1: Integer);
    procedure Set_ExcludeInactive(Param1: WordBool);
    function Get_JobIndex: Integer;
    procedure Set_JobIndex(Param1: Integer);
    function Get_PhaseIndex: Integer;
    procedure Set_PhaseIndex(Param1: Integer);
  public
    property DefaultInterface: _SelectJob read GetDefaultInterface;
  published
    property CostIndex: Integer read Get_CostIndex write Set_CostIndex;
    property JobIndex: Integer read Get_JobIndex write Set_JobIndex;
    property PhaseIndex: Integer read Get_PhaseIndex write Set_PhaseIndex;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoJrnlSNo provides a Create and CreateRemote method to          
// create instances of the default interface _JrnlSNo exposed by              
// the CoClass JrnlSNo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJrnlSNo = class
    class function Create: _JrnlSNo;
    class function CreateRemote(const MachineName: string): _JrnlSNo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TJrnlSNo
// Help String      : 
// Default Interface: _JrnlSNo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TJrnlSNoProperties= class;
{$ENDIF}
  TJrnlSNo = class(TOleServer)
  private
    FIntf:        _JrnlSNo;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TJrnlSNoProperties;
    function      GetServerProperties: TJrnlSNoProperties;
{$ENDIF}
    function      GetDefaultInterface: _JrnlSNo;
  protected
    procedure InitServerData; override;
    function Get_ItemRecordNumber: Integer;
    procedure Set_ItemRecordNumber(Param1: Integer);
    function Get_JrnlPostOrder: Integer;
    procedure Set_JrnlPostOrder(Param1: Integer);
    function Get_JrnlRowIndex: Integer;
    procedure Set_JrnlRowIndex(Param1: Integer);
    function Get_SerialNumber: WideString;
    procedure Set_SerialNumber(const Param1: WideString);
    function Get_SerialRecordNumber: Integer;
    procedure Set_SerialRecordNumber(Param1: Integer);
    function Get_TransactionClass: Integer;
    procedure Set_TransactionClass(Param1: Integer);
    function Get_TransactionCost: Double;
    procedure Set_TransactionCost(Param1: Double);
    function Get_TransactionDate: OleVariant;
    procedure Set_TransactionDate(Param1: OleVariant);
    function Get_WorkTktReferenceNo: Integer;
    procedure Set_WorkTktReferenceNo(Param1: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _JrnlSNo);
    procedure Disconnect; override;
    function CloseFile: Smallint;
    function OpenFile: Smallint;
    function Delete: Smallint;
    function Insert: Smallint;
    function RecordCount: Integer;
    function StepFirst: Smallint;
    function StepLast: Smallint;
    function StepNext: Smallint;
    function StepPrevious: Smallint;
    function Update: Smallint;
    property DefaultInterface: _JrnlSNo read GetDefaultInterface;
    property TransactionDate: OleVariant read Get_TransactionDate write Set_TransactionDate;
    property ItemRecordNumber: Integer read Get_ItemRecordNumber write Set_ItemRecordNumber;
    property JrnlPostOrder: Integer read Get_JrnlPostOrder write Set_JrnlPostOrder;
    property JrnlRowIndex: Integer read Get_JrnlRowIndex write Set_JrnlRowIndex;
    property SerialNumber: WideString read Get_SerialNumber write Set_SerialNumber;
    property SerialRecordNumber: Integer read Get_SerialRecordNumber write Set_SerialRecordNumber;
    property TransactionClass: Integer read Get_TransactionClass write Set_TransactionClass;
    property TransactionCost: Double read Get_TransactionCost write Set_TransactionCost;
    property WorkTktReferenceNo: Integer read Get_WorkTktReferenceNo write Set_WorkTktReferenceNo;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TJrnlSNoProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TJrnlSNo
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TJrnlSNoProperties = class(TPersistent)
  private
    FServer:    TJrnlSNo;
    function    GetDefaultInterface: _JrnlSNo;
    constructor Create(AServer: TJrnlSNo);
  protected
    function Get_ItemRecordNumber: Integer;
    procedure Set_ItemRecordNumber(Param1: Integer);
    function Get_JrnlPostOrder: Integer;
    procedure Set_JrnlPostOrder(Param1: Integer);
    function Get_JrnlRowIndex: Integer;
    procedure Set_JrnlRowIndex(Param1: Integer);
    function Get_SerialNumber: WideString;
    procedure Set_SerialNumber(const Param1: WideString);
    function Get_SerialRecordNumber: Integer;
    procedure Set_SerialRecordNumber(Param1: Integer);
    function Get_TransactionClass: Integer;
    procedure Set_TransactionClass(Param1: Integer);
    function Get_TransactionCost: Double;
    procedure Set_TransactionCost(Param1: Double);
    function Get_TransactionDate: OleVariant;
    procedure Set_TransactionDate(Param1: OleVariant);
    function Get_WorkTktReferenceNo: Integer;
    procedure Set_WorkTktReferenceNo(Param1: Integer);
  public
    property DefaultInterface: _JrnlSNo read GetDefaultInterface;
  published
    property ItemRecordNumber: Integer read Get_ItemRecordNumber write Set_ItemRecordNumber;
    property JrnlPostOrder: Integer read Get_JrnlPostOrder write Set_JrnlPostOrder;
    property JrnlRowIndex: Integer read Get_JrnlRowIndex write Set_JrnlRowIndex;
    property SerialNumber: WideString read Get_SerialNumber write Set_SerialNumber;
    property SerialRecordNumber: Integer read Get_SerialRecordNumber write Set_SerialRecordNumber;
    property TransactionClass: Integer read Get_TransactionClass write Set_TransactionClass;
    property TransactionCost: Double read Get_TransactionCost write Set_TransactionCost;
    property WorkTktReferenceNo: Integer read Get_WorkTktReferenceNo write Set_WorkTktReferenceNo;
  end;
{$ENDIF}


procedure Register;

resourcestring
  dtlServerPage = 'ActiveX';

  dtlOcxPage = 'ActiveX';

implementation

uses ComObj;

class function CoCompanyInformation.Create: _CompanyInformation;
begin
  Result := CreateComObject(CLASS_CompanyInformation) as _CompanyInformation;
end;

class function CoCompanyInformation.CreateRemote(const MachineName: string): _CompanyInformation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CompanyInformation) as _CompanyInformation;
end;

procedure TCompanyInformation.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3A826A61-14E4-4440-9665-97D95130BE6F}';
    IntfIID:   '{9EFE1904-D8EE-412F-A444-553E9A7336A9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCompanyInformation.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _CompanyInformation;
  end;
end;

procedure TCompanyInformation.ConnectTo(svrIntf: _CompanyInformation);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCompanyInformation.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCompanyInformation.GetDefaultInterface: _CompanyInformation;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCompanyInformation.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCompanyInformationProperties.Create(Self);
{$ENDIF}
end;

destructor TCompanyInformation.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCompanyInformation.GetServerProperties: TCompanyInformationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCompanyInformation.Get_ActualLength: Integer;
begin
    Result := DefaultInterface.ActualLength;
end;

function TCompanyInformation.Get_AddrCountry: WideString;
begin
    Result := DefaultInterface.AddrCountry;
end;

procedure TCompanyInformation.Set_AddrCountry(const Param1: WideString);
begin
  DefaultInterface.Set_AddrCountry(Param1);
end;

function TCompanyInformation.Get_AddrLine1: WideString;
begin
    Result := DefaultInterface.AddrLine1;
end;

procedure TCompanyInformation.Set_AddrLine1(const Param1: WideString);
begin
  DefaultInterface.Set_AddrLine1(Param1);
end;

function TCompanyInformation.Get_AddrLine2: WideString;
begin
    Result := DefaultInterface.AddrLine2;
end;

procedure TCompanyInformation.Set_AddrLine2(const Param1: WideString);
begin
  DefaultInterface.Set_AddrLine2(Param1);
end;

function TCompanyInformation.Get_AddrCity: WideString;
begin
    Result := DefaultInterface.AddrCity;
end;

procedure TCompanyInformation.Set_AddrCity(const Param1: WideString);
begin
  DefaultInterface.Set_AddrCity(Param1);
end;

function TCompanyInformation.Get_AddrPostalCode: WideString;
begin
    Result := DefaultInterface.AddrPostalCode;
end;

procedure TCompanyInformation.Set_AddrPostalCode(const Param1: WideString);
begin
  DefaultInterface.Set_AddrPostalCode(Param1);
end;

function TCompanyInformation.Get_AddrState: WideString;
begin
    Result := DefaultInterface.AddrState;
end;

procedure TCompanyInformation.Set_AddrState(const Param1: WideString);
begin
  DefaultInterface.Set_AddrState(Param1);
end;

function TCompanyInformation.Get_ArchiveDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ArchiveDate;
end;

procedure TCompanyInformation.Set_ArchiveDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ArchiveDate(Param1);
end;

function TCompanyInformation.Get_ArchiveDescription: WideString;
begin
    Result := DefaultInterface.ArchiveDescription;
end;

procedure TCompanyInformation.Set_ArchiveDescription(const Param1: WideString);
begin
  DefaultInterface.Set_ArchiveDescription(Param1);
end;

function TCompanyInformation.Get_BusinessType: WideString;
begin
    Result := DefaultInterface.BusinessType;
end;

function TCompanyInformation.Get_BusinessTypeCode: Byte;
begin
    Result := DefaultInterface.BusinessTypeCode;
end;

procedure TCompanyInformation.Set_BusinessTypeCode(Param1: Byte);
begin
  DefaultInterface.Set_BusinessTypeCode(Param1);
end;

function TCompanyInformation.Get_CashBasis: WordBool;
begin
    Result := DefaultInterface.CashBasis;
end;

procedure TCompanyInformation.Set_CashBasis(Param1: WordBool);
begin
  DefaultInterface.Set_CashBasis(Param1);
end;

function TCompanyInformation.Get_CompanyName: WideString;
begin
    Result := DefaultInterface.CompanyName;
end;

procedure TCompanyInformation.Set_CompanyName(const Param1: WideString);
begin
  DefaultInterface.Set_CompanyName(Param1);
end;

function TCompanyInformation.Get_CompanySpecial1a: Integer;
begin
    Result := DefaultInterface.CompanySpecial1a;
end;

procedure TCompanyInformation.Set_CompanySpecial1a(Param1: Integer);
begin
  DefaultInterface.Set_CompanySpecial1a(Param1);
end;

function TCompanyInformation.Get_CompanySpecial1b: Integer;
begin
    Result := DefaultInterface.CompanySpecial1b;
end;

procedure TCompanyInformation.Set_CompanySpecial1b(Param1: Integer);
begin
  DefaultInterface.Set_CompanySpecial1b(Param1);
end;

function TCompanyInformation.Get_CompanySpecial1c: Integer;
begin
    Result := DefaultInterface.CompanySpecial1c;
end;

procedure TCompanyInformation.Set_CompanySpecial1c(Param1: Integer);
begin
  DefaultInterface.Set_CompanySpecial1c(Param1);
end;

function TCompanyInformation.Get_CompanySpecial1d: Integer;
begin
    Result := DefaultInterface.CompanySpecial1d;
end;

procedure TCompanyInformation.Set_CompanySpecial1d(Param1: Integer);
begin
  DefaultInterface.Set_CompanySpecial1d(Param1);
end;

function TCompanyInformation.Get_Email: WideString;
begin
    Result := DefaultInterface.Email;
end;

procedure TCompanyInformation.Set_Email(const Param1: WideString);
begin
  DefaultInterface.Set_Email(Param1);
end;

function TCompanyInformation.Get_ETACompanyID: WideString;
begin
    Result := DefaultInterface.ETACompanyID;
end;

procedure TCompanyInformation.Set_ETACompanyID(const Param1: WideString);
begin
  DefaultInterface.Set_ETACompanyID(Param1);
end;

function TCompanyInformation.Get_ETAFlag: WordBool;
begin
    Result := DefaultInterface.ETAFlag;
end;

procedure TCompanyInformation.Set_ETAFlag(Param1: WordBool);
begin
  DefaultInterface.Set_ETAFlag(Param1);
end;

function TCompanyInformation.Get_ETAUnknown: WideString;
begin
    Result := DefaultInterface.ETAUnknown;
end;

procedure TCompanyInformation.Set_ETAUnknown(const Param1: WideString);
begin
  DefaultInterface.Set_ETAUnknown(Param1);
end;

function TCompanyInformation.Get_eTimeIndex: WideString;
begin
    Result := DefaultInterface.eTimeIndex;
end;

procedure TCompanyInformation.Set_eTimeIndex(const Param1: WideString);
begin
  DefaultInterface.Set_eTimeIndex(Param1);
end;

function TCompanyInformation.Get_Fax: WideString;
begin
    Result := DefaultInterface.Fax;
end;

procedure TCompanyInformation.Set_Fax(const Param1: WideString);
begin
  DefaultInterface.Set_Fax(Param1);
end;

function TCompanyInformation.Get_FEIN: WideString;
begin
    Result := DefaultInterface.FEIN;
end;

procedure TCompanyInformation.Set_FEIN(const Param1: WideString);
begin
  DefaultInterface.Set_FEIN(Param1);
end;

function TCompanyInformation.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

function TCompanyInformation.Get_LastAccessTestDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastAccessTestDate;
end;

procedure TCompanyInformation.Set_LastAccessTestDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastAccessTestDate(Param1);
end;

function TCompanyInformation.Get_LastArchiveDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastArchiveDate;
end;

procedure TCompanyInformation.Set_LastArchiveDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastArchiveDate(Param1);
end;

function TCompanyInformation.Get_RealTime: WordBool;
begin
    Result := DefaultInterface.RealTime;
end;

procedure TCompanyInformation.Set_RealTime(Param1: WordBool);
begin
  DefaultInterface.Set_RealTime(Param1);
end;

function TCompanyInformation.Get_SEIN: WideString;
begin
    Result := DefaultInterface.SEIN;
end;

procedure TCompanyInformation.Set_SEIN(const Param1: WideString);
begin
  DefaultInterface.Set_SEIN(Param1);
end;

function TCompanyInformation.Get_SetupFlag(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.SetupFlag[Index];
end;

procedure TCompanyInformation.Set_SetupFlag(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.SetupFlag[Index] := Param2;
end;

function TCompanyInformation.Get_StructureLength: Integer;
begin
    Result := DefaultInterface.StructureLength;
end;

function TCompanyInformation.Get_SUIN: WideString;
begin
    Result := DefaultInterface.SUIN;
end;

procedure TCompanyInformation.Set_SUIN(const Param1: WideString);
begin
  DefaultInterface.Set_SUIN(Param1);
end;

function TCompanyInformation.Get_Telephone: WideString;
begin
    Result := DefaultInterface.Telephone;
end;

procedure TCompanyInformation.Set_Telephone(const Param1: WideString);
begin
  DefaultInterface.Set_Telephone(Param1);
end;

function TCompanyInformation.Get_Unused1: Byte;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TCompanyInformation.Set_Unused1(Param1: Byte);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TCompanyInformation.Get_Unused2: Byte;
begin
    Result := DefaultInterface.Unused2;
end;

procedure TCompanyInformation.Set_Unused2(Param1: Byte);
begin
  DefaultInterface.Set_Unused2(Param1);
end;

function TCompanyInformation.Get_Unused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused3[Index];
end;

procedure TCompanyInformation.Set_Unused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused3[Index] := Param2;
end;

function TCompanyInformation.Get_Unused4(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused4[Index];
end;

procedure TCompanyInformation.Set_Unused4(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused4[Index] := Param2;
end;

function TCompanyInformation.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TCompanyInformation.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TCompanyInformation.Get_Unknown1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown1[Index];
end;

procedure TCompanyInformation.Set_Unknown1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown1[Index] := Param2;
end;

function TCompanyInformation.Get_Unused11(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused11[Index];
end;

procedure TCompanyInformation.Set_Unused11(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused11[Index] := Param2;
end;

procedure TCompanyInformation.Set_UseAuditTrail(Param1: WordBool);
begin
  DefaultInterface.Set_UseAuditTrail(Param1);
end;

function TCompanyInformation.Get_UseAuditTrail: WordBool;
begin
    Result := DefaultInterface.UseAuditTrail;
end;

function TCompanyInformation.Get_Version: Double;
begin
    Result := DefaultInterface.Version;
end;

function TCompanyInformation.Get_WebSite: WideString;
begin
    Result := DefaultInterface.WebSite;
end;

procedure TCompanyInformation.Set_WebSite(const Param1: WideString);
begin
  DefaultInterface.Set_WebSite(Param1);
end;

function TCompanyInformation.CloseFile: OleVariant;
begin
  Result := DefaultInterface.CloseFile;
end;

function TCompanyInformation.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TCompanyInformation.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TCompanyInformation.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCompanyInformationProperties.Create(AServer: TCompanyInformation);
begin
  inherited Create;
  FServer := AServer;
end;

function TCompanyInformationProperties.GetDefaultInterface: _CompanyInformation;
begin
  Result := FServer.DefaultInterface;
end;

function TCompanyInformationProperties.Get_ActualLength: Integer;
begin
    Result := DefaultInterface.ActualLength;
end;

function TCompanyInformationProperties.Get_AddrCountry: WideString;
begin
    Result := DefaultInterface.AddrCountry;
end;

procedure TCompanyInformationProperties.Set_AddrCountry(const Param1: WideString);
begin
  DefaultInterface.Set_AddrCountry(Param1);
end;

function TCompanyInformationProperties.Get_AddrLine1: WideString;
begin
    Result := DefaultInterface.AddrLine1;
end;

procedure TCompanyInformationProperties.Set_AddrLine1(const Param1: WideString);
begin
  DefaultInterface.Set_AddrLine1(Param1);
end;

function TCompanyInformationProperties.Get_AddrLine2: WideString;
begin
    Result := DefaultInterface.AddrLine2;
end;

procedure TCompanyInformationProperties.Set_AddrLine2(const Param1: WideString);
begin
  DefaultInterface.Set_AddrLine2(Param1);
end;

function TCompanyInformationProperties.Get_AddrCity: WideString;
begin
    Result := DefaultInterface.AddrCity;
end;

procedure TCompanyInformationProperties.Set_AddrCity(const Param1: WideString);
begin
  DefaultInterface.Set_AddrCity(Param1);
end;

function TCompanyInformationProperties.Get_AddrPostalCode: WideString;
begin
    Result := DefaultInterface.AddrPostalCode;
end;

procedure TCompanyInformationProperties.Set_AddrPostalCode(const Param1: WideString);
begin
  DefaultInterface.Set_AddrPostalCode(Param1);
end;

function TCompanyInformationProperties.Get_AddrState: WideString;
begin
    Result := DefaultInterface.AddrState;
end;

procedure TCompanyInformationProperties.Set_AddrState(const Param1: WideString);
begin
  DefaultInterface.Set_AddrState(Param1);
end;

function TCompanyInformationProperties.Get_ArchiveDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ArchiveDate;
end;

procedure TCompanyInformationProperties.Set_ArchiveDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ArchiveDate(Param1);
end;

function TCompanyInformationProperties.Get_ArchiveDescription: WideString;
begin
    Result := DefaultInterface.ArchiveDescription;
end;

procedure TCompanyInformationProperties.Set_ArchiveDescription(const Param1: WideString);
begin
  DefaultInterface.Set_ArchiveDescription(Param1);
end;

function TCompanyInformationProperties.Get_BusinessType: WideString;
begin
    Result := DefaultInterface.BusinessType;
end;

function TCompanyInformationProperties.Get_BusinessTypeCode: Byte;
begin
    Result := DefaultInterface.BusinessTypeCode;
end;

procedure TCompanyInformationProperties.Set_BusinessTypeCode(Param1: Byte);
begin
  DefaultInterface.Set_BusinessTypeCode(Param1);
end;

function TCompanyInformationProperties.Get_CashBasis: WordBool;
begin
    Result := DefaultInterface.CashBasis;
end;

procedure TCompanyInformationProperties.Set_CashBasis(Param1: WordBool);
begin
  DefaultInterface.Set_CashBasis(Param1);
end;

function TCompanyInformationProperties.Get_CompanyName: WideString;
begin
    Result := DefaultInterface.CompanyName;
end;

procedure TCompanyInformationProperties.Set_CompanyName(const Param1: WideString);
begin
  DefaultInterface.Set_CompanyName(Param1);
end;

function TCompanyInformationProperties.Get_CompanySpecial1a: Integer;
begin
    Result := DefaultInterface.CompanySpecial1a;
end;

procedure TCompanyInformationProperties.Set_CompanySpecial1a(Param1: Integer);
begin
  DefaultInterface.Set_CompanySpecial1a(Param1);
end;

function TCompanyInformationProperties.Get_CompanySpecial1b: Integer;
begin
    Result := DefaultInterface.CompanySpecial1b;
end;

procedure TCompanyInformationProperties.Set_CompanySpecial1b(Param1: Integer);
begin
  DefaultInterface.Set_CompanySpecial1b(Param1);
end;

function TCompanyInformationProperties.Get_CompanySpecial1c: Integer;
begin
    Result := DefaultInterface.CompanySpecial1c;
end;

procedure TCompanyInformationProperties.Set_CompanySpecial1c(Param1: Integer);
begin
  DefaultInterface.Set_CompanySpecial1c(Param1);
end;

function TCompanyInformationProperties.Get_CompanySpecial1d: Integer;
begin
    Result := DefaultInterface.CompanySpecial1d;
end;

procedure TCompanyInformationProperties.Set_CompanySpecial1d(Param1: Integer);
begin
  DefaultInterface.Set_CompanySpecial1d(Param1);
end;

function TCompanyInformationProperties.Get_Email: WideString;
begin
    Result := DefaultInterface.Email;
end;

procedure TCompanyInformationProperties.Set_Email(const Param1: WideString);
begin
  DefaultInterface.Set_Email(Param1);
end;

function TCompanyInformationProperties.Get_ETACompanyID: WideString;
begin
    Result := DefaultInterface.ETACompanyID;
end;

procedure TCompanyInformationProperties.Set_ETACompanyID(const Param1: WideString);
begin
  DefaultInterface.Set_ETACompanyID(Param1);
end;

function TCompanyInformationProperties.Get_ETAFlag: WordBool;
begin
    Result := DefaultInterface.ETAFlag;
end;

procedure TCompanyInformationProperties.Set_ETAFlag(Param1: WordBool);
begin
  DefaultInterface.Set_ETAFlag(Param1);
end;

function TCompanyInformationProperties.Get_ETAUnknown: WideString;
begin
    Result := DefaultInterface.ETAUnknown;
end;

procedure TCompanyInformationProperties.Set_ETAUnknown(const Param1: WideString);
begin
  DefaultInterface.Set_ETAUnknown(Param1);
end;

function TCompanyInformationProperties.Get_eTimeIndex: WideString;
begin
    Result := DefaultInterface.eTimeIndex;
end;

procedure TCompanyInformationProperties.Set_eTimeIndex(const Param1: WideString);
begin
  DefaultInterface.Set_eTimeIndex(Param1);
end;

function TCompanyInformationProperties.Get_Fax: WideString;
begin
    Result := DefaultInterface.Fax;
end;

procedure TCompanyInformationProperties.Set_Fax(const Param1: WideString);
begin
  DefaultInterface.Set_Fax(Param1);
end;

function TCompanyInformationProperties.Get_FEIN: WideString;
begin
    Result := DefaultInterface.FEIN;
end;

procedure TCompanyInformationProperties.Set_FEIN(const Param1: WideString);
begin
  DefaultInterface.Set_FEIN(Param1);
end;

function TCompanyInformationProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

function TCompanyInformationProperties.Get_LastAccessTestDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastAccessTestDate;
end;

procedure TCompanyInformationProperties.Set_LastAccessTestDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastAccessTestDate(Param1);
end;

function TCompanyInformationProperties.Get_LastArchiveDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastArchiveDate;
end;

procedure TCompanyInformationProperties.Set_LastArchiveDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastArchiveDate(Param1);
end;

function TCompanyInformationProperties.Get_RealTime: WordBool;
begin
    Result := DefaultInterface.RealTime;
end;

procedure TCompanyInformationProperties.Set_RealTime(Param1: WordBool);
begin
  DefaultInterface.Set_RealTime(Param1);
end;

function TCompanyInformationProperties.Get_SEIN: WideString;
begin
    Result := DefaultInterface.SEIN;
end;

procedure TCompanyInformationProperties.Set_SEIN(const Param1: WideString);
begin
  DefaultInterface.Set_SEIN(Param1);
end;

function TCompanyInformationProperties.Get_SetupFlag(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.SetupFlag[Index];
end;

procedure TCompanyInformationProperties.Set_SetupFlag(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.SetupFlag[Index] := Param2;
end;

function TCompanyInformationProperties.Get_StructureLength: Integer;
begin
    Result := DefaultInterface.StructureLength;
end;

function TCompanyInformationProperties.Get_SUIN: WideString;
begin
    Result := DefaultInterface.SUIN;
end;

procedure TCompanyInformationProperties.Set_SUIN(const Param1: WideString);
begin
  DefaultInterface.Set_SUIN(Param1);
end;

function TCompanyInformationProperties.Get_Telephone: WideString;
begin
    Result := DefaultInterface.Telephone;
end;

procedure TCompanyInformationProperties.Set_Telephone(const Param1: WideString);
begin
  DefaultInterface.Set_Telephone(Param1);
end;

function TCompanyInformationProperties.Get_Unused1: Byte;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TCompanyInformationProperties.Set_Unused1(Param1: Byte);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TCompanyInformationProperties.Get_Unused2: Byte;
begin
    Result := DefaultInterface.Unused2;
end;

procedure TCompanyInformationProperties.Set_Unused2(Param1: Byte);
begin
  DefaultInterface.Set_Unused2(Param1);
end;

function TCompanyInformationProperties.Get_Unused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused3[Index];
end;

procedure TCompanyInformationProperties.Set_Unused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused3[Index] := Param2;
end;

function TCompanyInformationProperties.Get_Unused4(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused4[Index];
end;

procedure TCompanyInformationProperties.Set_Unused4(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused4[Index] := Param2;
end;

function TCompanyInformationProperties.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TCompanyInformationProperties.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TCompanyInformationProperties.Get_Unknown1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown1[Index];
end;

procedure TCompanyInformationProperties.Set_Unknown1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown1[Index] := Param2;
end;

function TCompanyInformationProperties.Get_Unused11(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused11[Index];
end;

procedure TCompanyInformationProperties.Set_Unused11(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused11[Index] := Param2;
end;

procedure TCompanyInformationProperties.Set_UseAuditTrail(Param1: WordBool);
begin
  DefaultInterface.Set_UseAuditTrail(Param1);
end;

function TCompanyInformationProperties.Get_UseAuditTrail: WordBool;
begin
    Result := DefaultInterface.UseAuditTrail;
end;

function TCompanyInformationProperties.Get_Version: Double;
begin
    Result := DefaultInterface.Version;
end;

function TCompanyInformationProperties.Get_WebSite: WideString;
begin
    Result := DefaultInterface.WebSite;
end;

procedure TCompanyInformationProperties.Set_WebSite(const Param1: WideString);
begin
  DefaultInterface.Set_WebSite(Param1);
end;

{$ENDIF}

class function CoBtrieve.Create: _Btrieve;
begin
  Result := CreateComObject(CLASS_Btrieve) as _Btrieve;
end;

class function CoBtrieve.CreateRemote(const MachineName: string): _Btrieve;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Btrieve) as _Btrieve;
end;

procedure TBtrieve.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{07A753A0-84E4-4B1B-A730-7D3B204CF8E1}';
    IntfIID:   '{125FEDEE-FF79-41B1-B34D-D567AC13C7FF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBtrieve.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Btrieve;
  end;
end;

procedure TBtrieve.ConnectTo(svrIntf: _Btrieve);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TBtrieve.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TBtrieve.GetDefaultInterface: _Btrieve;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBtrieve.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBtrieveProperties.Create(Self);
{$ENDIF}
end;

destructor TBtrieve.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBtrieve.GetServerProperties: TBtrieveProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TBtrieve.Get_ClientVersion: WideString;
begin
    Result := DefaultInterface.ClientVersion;
end;

function TBtrieve.Get_CompanyPath: WideString;
begin
    Result := DefaultInterface.CompanyPath;
end;

procedure TBtrieve.Set_CompanyPath(const Param1: WideString);
begin
  DefaultInterface.Set_CompanyPath(Param1);
end;

function TBtrieve.Get_ConnectCount: Integer;
begin
    Result := DefaultInterface.ConnectCount;
end;

function TBtrieve.Get_ErrorNumber: Integer;
begin
    Result := DefaultInterface.ErrorNumber;
end;

function TBtrieve.Get_ErrorText: WideString;
begin
    Result := DefaultInterface.ErrorText;
end;

function TBtrieve.Get_PawComVersion: WideString;
begin
    Result := DefaultInterface.PawComVersion;
end;

function TBtrieve.Get_RequestorVersion: WideString;
begin
    Result := DefaultInterface.RequestorVersion;
end;

function TBtrieve.Get_ServerVersion: WideString;
begin
    Result := DefaultInterface.ServerVersion;
end;

function TBtrieve.Connect1(const Path: WideString): Smallint;
begin
  Result := DefaultInterface.Connect(Path);
end;

function TBtrieve.Disconnect1: Smallint;
begin
  Result := DefaultInterface.Disconnect;
end;

function TBtrieve.Reset: Smallint;
begin
  Result := DefaultInterface.Reset;
end;

function TBtrieve.ErrorMessage(ErrorNumber: Smallint): OleVariant;
begin
  Result := DefaultInterface.ErrorMessage(ErrorNumber);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBtrieveProperties.Create(AServer: TBtrieve);
begin
  inherited Create;
  FServer := AServer;
end;

function TBtrieveProperties.GetDefaultInterface: _Btrieve;
begin
  Result := FServer.DefaultInterface;
end;

function TBtrieveProperties.Get_ClientVersion: WideString;
begin
    Result := DefaultInterface.ClientVersion;
end;

function TBtrieveProperties.Get_CompanyPath: WideString;
begin
    Result := DefaultInterface.CompanyPath;
end;

procedure TBtrieveProperties.Set_CompanyPath(const Param1: WideString);
begin
  DefaultInterface.Set_CompanyPath(Param1);
end;

function TBtrieveProperties.Get_ConnectCount: Integer;
begin
    Result := DefaultInterface.ConnectCount;
end;

function TBtrieveProperties.Get_ErrorNumber: Integer;
begin
    Result := DefaultInterface.ErrorNumber;
end;

function TBtrieveProperties.Get_ErrorText: WideString;
begin
    Result := DefaultInterface.ErrorText;
end;

function TBtrieveProperties.Get_PawComVersion: WideString;
begin
    Result := DefaultInterface.PawComVersion;
end;

function TBtrieveProperties.Get_RequestorVersion: WideString;
begin
    Result := DefaultInterface.RequestorVersion;
end;

function TBtrieveProperties.Get_ServerVersion: WideString;
begin
    Result := DefaultInterface.ServerVersion;
end;

{$ENDIF}

class function CoSelectCompany.Create: _SelectCompany;
begin
  Result := CreateComObject(CLASS_SelectCompany) as _SelectCompany;
end;

class function CoSelectCompany.CreateRemote(const MachineName: string): _SelectCompany;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectCompany) as _SelectCompany;
end;

procedure TSelectCompany.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{35863104-74D5-4320-8435-20FABD20CFDF}';
    IntfIID:   '{5C1F096E-B6AD-447E-B159-F15AD0ECD9AA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSelectCompany.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SelectCompany;
  end;
end;

procedure TSelectCompany.ConnectTo(svrIntf: _SelectCompany);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSelectCompany.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSelectCompany.GetDefaultInterface: _SelectCompany;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSelectCompany.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSelectCompanyProperties.Create(Self);
{$ENDIF}
end;

destructor TSelectCompany.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSelectCompany.GetServerProperties: TSelectCompanyProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSelectCompany.Get_CompanyName: WideString;
begin
    Result := DefaultInterface.CompanyName;
end;

function TSelectCompany.Get_CompanyPath: WideString;
begin
    Result := DefaultInterface.CompanyPath;
end;

procedure TSelectCompany.Set_CompanyPath(const Param1: WideString);
begin
  DefaultInterface.Set_CompanyPath(Param1);
end;

procedure TSelectCompany.Set_Icon(const Param1: WideString);
begin
  DefaultInterface.Set_Icon(Param1);
end;

procedure TSelectCompany.Set_IniPath(const Param1: WideString);
begin
  DefaultInterface.Set_IniPath(Param1);
end;

function TSelectCompany.ShowOpen: OleVariant;
begin
  Result := DefaultInterface.ShowOpen;
end;

function TSelectCompany.Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
begin
  Result := DefaultInterface.Location(hwnd, left, top);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSelectCompanyProperties.Create(AServer: TSelectCompany);
begin
  inherited Create;
  FServer := AServer;
end;

function TSelectCompanyProperties.GetDefaultInterface: _SelectCompany;
begin
  Result := FServer.DefaultInterface;
end;

function TSelectCompanyProperties.Get_CompanyName: WideString;
begin
    Result := DefaultInterface.CompanyName;
end;

function TSelectCompanyProperties.Get_CompanyPath: WideString;
begin
    Result := DefaultInterface.CompanyPath;
end;

procedure TSelectCompanyProperties.Set_CompanyPath(const Param1: WideString);
begin
  DefaultInterface.Set_CompanyPath(Param1);
end;

procedure TSelectCompanyProperties.Set_Icon(const Param1: WideString);
begin
  DefaultInterface.Set_Icon(Param1);
end;

procedure TSelectCompanyProperties.Set_IniPath(const Param1: WideString);
begin
  DefaultInterface.Set_IniPath(Param1);
end;

{$ENDIF}

class function CoPeachw.Create: _Peachw;
begin
  Result := CreateComObject(CLASS_Peachw) as _Peachw;
end;

class function CoPeachw.CreateRemote(const MachineName: string): _Peachw;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Peachw) as _Peachw;
end;

procedure TPeachw.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CFEA016C-68DD-443D-AE54-FE685255D225}';
    IntfIID:   '{21537F5C-F7EA-4661-81FF-5370202ACC5F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPeachw.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Peachw;
  end;
end;

procedure TPeachw.ConnectTo(svrIntf: _Peachw);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPeachw.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPeachw.GetDefaultInterface: _Peachw;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TPeachw.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TPeachwProperties.Create(Self);
{$ENDIF}
end;

destructor TPeachw.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TPeachw.GetServerProperties: TPeachwProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TPeachw.Get_Datapath: WideString;
begin
    Result := DefaultInterface.Datapath;
end;

function TPeachw.Get_ProgramPath: WideString;
begin
    Result := DefaultInterface.ProgramPath;
end;

function TPeachw.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TPeachwProperties.Create(AServer: TPeachw);
begin
  inherited Create;
  FServer := AServer;
end;

function TPeachwProperties.GetDefaultInterface: _Peachw;
begin
  Result := FServer.DefaultInterface;
end;

function TPeachwProperties.Get_Datapath: WideString;
begin
    Result := DefaultInterface.Datapath;
end;

function TPeachwProperties.Get_ProgramPath: WideString;
begin
    Result := DefaultInterface.ProgramPath;
end;

function TPeachwProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

{$ENDIF}

class function CoDefaultCustomerData.Create: _DefaultCustomerData;
begin
  Result := CreateComObject(CLASS_DefaultCustomerData) as _DefaultCustomerData;
end;

class function CoDefaultCustomerData.CreateRemote(const MachineName: string): _DefaultCustomerData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DefaultCustomerData) as _DefaultCustomerData;
end;

procedure TDefaultCustomerData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{678BC0D6-B784-4F1F-B687-608A1CFF12E4}';
    IntfIID:   '{154AF93B-D692-4FA6-8693-3EC812E22250}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDefaultCustomerData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DefaultCustomerData;
  end;
end;

procedure TDefaultCustomerData.ConnectTo(svrIntf: _DefaultCustomerData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDefaultCustomerData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDefaultCustomerData.GetDefaultInterface: _DefaultCustomerData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDefaultCustomerData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDefaultCustomerDataProperties.Create(Self);
{$ENDIF}
end;

destructor TDefaultCustomerData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDefaultCustomerData.GetServerProperties: TDefaultCustomerDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDefaultCustomerData.Get_ActualLength: Integer;
begin
    Result := DefaultInterface.ActualLength;
end;

function TDefaultCustomerData.Get_AgeByDueDate: WordBool;
begin
    Result := DefaultInterface.AgeByDueDate;
end;

procedure TDefaultCustomerData.Set_AgeByDueDate(Param1: WordBool);
begin
  DefaultInterface.Set_AgeByDueDate(Param1);
end;

function TDefaultCustomerData.Get_AgingDays(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.AgingDays[Index];
end;

procedure TDefaultCustomerData.Set_AgingDays(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.AgingDays[Index] := Param2;
end;

function TDefaultCustomerData.Get_AgingHeading(Index: Smallint): WideString;
begin
    Result := DefaultInterface.AgingHeading[Index];
end;

procedure TDefaultCustomerData.Set_AgingHeading(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_AgingHeading(Index,Param2);
end;

function TDefaultCustomerData.Get_ARAccount: WideString;
begin
    Result := DefaultInterface.ARAccount;
end;

procedure TDefaultCustomerData.Set_ARAccount(const Param1: WideString);
begin
  DefaultInterface.Set_ARAccount(Param1);
end;

function TDefaultCustomerData.Get_AssignDepositTicketIDs: WordBool;
begin
    Result := DefaultInterface.AssignDepositTicketIDs;
end;

procedure TDefaultCustomerData.Set_AssignDepositTicketIDs(Param1: WordBool);
begin
  DefaultInterface.Set_AssignDepositTicketIDs(Param1);
end;

function TDefaultCustomerData.Get_CashAccount: WideString;
begin
    Result := DefaultInterface.CashAccount;
end;

procedure TDefaultCustomerData.Set_CashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_CashAccount(Param1);
end;

function TDefaultCustomerData.Get_ChargeFinanceCharges: WordBool;
begin
    Result := DefaultInterface.ChargeFinanceCharges;
end;

procedure TDefaultCustomerData.Set_ChargeFinanceCharges(Param1: WordBool);
begin
  DefaultInterface.Set_ChargeFinanceCharges(Param1);
end;

function TDefaultCustomerData.Get_COD: WordBool;
begin
    Result := DefaultInterface.COD;
end;

procedure TDefaultCustomerData.Set_COD(Param1: WordBool);
begin
  DefaultInterface.Set_COD(Param1);
end;

function TDefaultCustomerData.Get_CreditLimit: Double;
begin
    Result := DefaultInterface.CreditLimit;
end;

procedure TDefaultCustomerData.Set_CreditLimit(Param1: Double);
begin
  DefaultInterface.Set_CreditLimit(Param1);
end;

function TDefaultCustomerData.Get_CustomFieldEnabled(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.CustomFieldEnabled[Index];
end;

procedure TDefaultCustomerData.Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.CustomFieldEnabled[Index] := Param2;
end;

function TDefaultCustomerData.Get_CustomFieldLabel(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomFieldLabel[Index];
end;

procedure TDefaultCustomerData.Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomFieldLabel(Index,Param2);
end;

function TDefaultCustomerData.Get_DefaultPayMethod: WideString;
begin
    Result := DefaultInterface.DefaultPayMethod;
end;

procedure TDefaultCustomerData.Set_DefaultPayMethod(const Param1: WideString);
begin
  DefaultInterface.Set_DefaultPayMethod(Param1);
end;

function TDefaultCustomerData.Get_DiscountDays: Smallint;
begin
    Result := DefaultInterface.DiscountDays;
end;

procedure TDefaultCustomerData.Set_DiscountDays(Param1: Smallint);
begin
  DefaultInterface.Set_DiscountDays(Param1);
end;

function TDefaultCustomerData.Get_DiscountGLAccount: WideString;
begin
    Result := DefaultInterface.DiscountGLAccount;
end;

procedure TDefaultCustomerData.Set_DiscountGLAccount(const Param1: WideString);
begin
  DefaultInterface.Set_DiscountGLAccount(Param1);
end;

function TDefaultCustomerData.Get_DiscountPercent: Double;
begin
    Result := DefaultInterface.DiscountPercent;
end;

procedure TDefaultCustomerData.Set_DiscountPercent(Param1: Double);
begin
  DefaultInterface.Set_DiscountPercent(Param1);
end;

function TDefaultCustomerData.Get_DueAtEndOfMonth: WordBool;
begin
    Result := DefaultInterface.DueAtEndOfMonth;
end;

procedure TDefaultCustomerData.Set_DueAtEndOfMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueAtEndOfMonth(Param1);
end;

function TDefaultCustomerData.Get_DueOnDayOfNextMonth: WordBool;
begin
    Result := DefaultInterface.DueOnDayOfNextMonth;
end;

procedure TDefaultCustomerData.Set_DueOnDayOfNextMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueOnDayOfNextMonth(Param1);
end;

function TDefaultCustomerData.Get_FCAnnualInterestRate: Double;
begin
    Result := DefaultInterface.FCAnnualInterestRate;
end;

procedure TDefaultCustomerData.Set_FCAnnualInterestRate(Param1: Double);
begin
  DefaultInterface.Set_FCAnnualInterestRate(Param1);
end;

function TDefaultCustomerData.Get_FCAppearsAs: WideString;
begin
    Result := DefaultInterface.FCAppearsAs;
end;

procedure TDefaultCustomerData.Set_FCAppearsAs(const Param1: WideString);
begin
  DefaultInterface.Set_FCAppearsAs(Param1);
end;

function TDefaultCustomerData.Get_FCChargeInterest: WordBool;
begin
    Result := DefaultInterface.FCChargeInterest;
end;

procedure TDefaultCustomerData.Set_FCChargeInterest(Param1: WordBool);
begin
  DefaultInterface.Set_FCChargeInterest(Param1);
end;

function TDefaultCustomerData.Get_FCDays: Smallint;
begin
    Result := DefaultInterface.FCDays;
end;

procedure TDefaultCustomerData.Set_FCDays(Param1: Smallint);
begin
  DefaultInterface.Set_FCDays(Param1);
end;

function TDefaultCustomerData.Get_FCGLAccount: WideString;
begin
    Result := DefaultInterface.FCGLAccount;
end;

procedure TDefaultCustomerData.Set_FCGLAccount(const Param1: WideString);
begin
  DefaultInterface.Set_FCGLAccount(Param1);
end;

function TDefaultCustomerData.Get_FCInterestAbove: Double;
begin
    Result := DefaultInterface.FCInterestAbove;
end;

procedure TDefaultCustomerData.Set_FCInterestAbove(Param1: Double);
begin
  DefaultInterface.Set_FCInterestAbove(Param1);
end;

function TDefaultCustomerData.Get_FCMinimum: Double;
begin
    Result := DefaultInterface.FCMinimum;
end;

procedure TDefaultCustomerData.Set_FCMinimum(Param1: Double);
begin
  DefaultInterface.Set_FCMinimum(Param1);
end;

function TDefaultCustomerData.Get_FCOverdueLimit: Double;
begin
    Result := DefaultInterface.FCOverdueLimit;
end;

procedure TDefaultCustomerData.Set_FCOverdueLimit(Param1: Double);
begin
  DefaultInterface.Set_FCOverdueLimit(Param1);
end;

function TDefaultCustomerData.Get_GLSalesAccount: WideString;
begin
    Result := DefaultInterface.GLSalesAccount;
end;

procedure TDefaultCustomerData.Set_GLSalesAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLSalesAccount(Param1);
end;

function TDefaultCustomerData.Get_NetDueDays: Smallint;
begin
    Result := DefaultInterface.NetDueDays;
end;

procedure TDefaultCustomerData.Set_NetDueDays(Param1: Smallint);
begin
  DefaultInterface.Set_NetDueDays(Param1);
end;

function TDefaultCustomerData.Get_NextInvoiceNumber: WideString;
begin
    Result := DefaultInterface.NextInvoiceNumber;
end;

procedure TDefaultCustomerData.Set_NextInvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_NextInvoiceNumber(Param1);
end;

function TDefaultCustomerData.Get_NextQuoteNumber: WideString;
begin
    Result := DefaultInterface.NextQuoteNumber;
end;

procedure TDefaultCustomerData.Set_NextQuoteNumber(const Param1: WideString);
begin
  DefaultInterface.Set_NextQuoteNumber(Param1);
end;

function TDefaultCustomerData.Get_NextSONumber: WideString;
begin
    Result := DefaultInterface.NextSONumber;
end;

procedure TDefaultCustomerData.Set_NextSONumber(const Param1: WideString);
begin
  DefaultInterface.Set_NextSONumber(Param1);
end;

function TDefaultCustomerData.Get_NLabels: Smallint;
begin
    Result := DefaultInterface.NLabels;
end;

function TDefaultCustomerData.Get_PaymentMethod(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PaymentMethod[Index];
end;

procedure TDefaultCustomerData.Set_PaymentMethod(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PaymentMethod(Index,Param2);
end;

function TDefaultCustomerData.Get_Prepaid: WordBool;
begin
    Result := DefaultInterface.Prepaid;
end;

procedure TDefaultCustomerData.Set_Prepaid(Param1: WordBool);
begin
  DefaultInterface.Set_Prepaid(Param1);
end;

function TDefaultCustomerData.Get_TaxAccount: WideString;
begin
    Result := DefaultInterface.TaxAccount;
end;

procedure TDefaultCustomerData.Set_TaxAccount(const Param1: WideString);
begin
  DefaultInterface.Set_TaxAccount(Param1);
end;

function TDefaultCustomerData.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TDefaultCustomerData.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TDefaultCustomerData.Get_Unused3: Smallint;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TDefaultCustomerData.Set_Unused3(Param1: Smallint);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TDefaultCustomerData.Get_Unused4: Byte;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TDefaultCustomerData.Set_Unused4(Param1: Byte);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TDefaultCustomerData.Get_Unused5(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TDefaultCustomerData.Set_Unused5(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TDefaultCustomerData.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TDefaultCustomerData.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TDefaultCustomerData.Get_Unused10(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused10[Index];
end;

procedure TDefaultCustomerData.Set_Unused10(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused10[Index] := Param2;
end;

function TDefaultCustomerData.Get_Unused11(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused11[Index];
end;

procedure TDefaultCustomerData.Set_Unused11(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused11[Index] := Param2;
end;

function TDefaultCustomerData.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TDefaultCustomerData.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TDefaultCustomerData.Read: Smallint;
begin
  Result := DefaultInterface.Read;
end;

function TDefaultCustomerData.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDefaultCustomerDataProperties.Create(AServer: TDefaultCustomerData);
begin
  inherited Create;
  FServer := AServer;
end;

function TDefaultCustomerDataProperties.GetDefaultInterface: _DefaultCustomerData;
begin
  Result := FServer.DefaultInterface;
end;

function TDefaultCustomerDataProperties.Get_ActualLength: Integer;
begin
    Result := DefaultInterface.ActualLength;
end;

function TDefaultCustomerDataProperties.Get_AgeByDueDate: WordBool;
begin
    Result := DefaultInterface.AgeByDueDate;
end;

procedure TDefaultCustomerDataProperties.Set_AgeByDueDate(Param1: WordBool);
begin
  DefaultInterface.Set_AgeByDueDate(Param1);
end;

function TDefaultCustomerDataProperties.Get_AgingDays(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.AgingDays[Index];
end;

procedure TDefaultCustomerDataProperties.Set_AgingDays(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.AgingDays[Index] := Param2;
end;

function TDefaultCustomerDataProperties.Get_AgingHeading(Index: Smallint): WideString;
begin
    Result := DefaultInterface.AgingHeading[Index];
end;

procedure TDefaultCustomerDataProperties.Set_AgingHeading(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_AgingHeading(Index,Param2);
end;

function TDefaultCustomerDataProperties.Get_ARAccount: WideString;
begin
    Result := DefaultInterface.ARAccount;
end;

procedure TDefaultCustomerDataProperties.Set_ARAccount(const Param1: WideString);
begin
  DefaultInterface.Set_ARAccount(Param1);
end;

function TDefaultCustomerDataProperties.Get_AssignDepositTicketIDs: WordBool;
begin
    Result := DefaultInterface.AssignDepositTicketIDs;
end;

procedure TDefaultCustomerDataProperties.Set_AssignDepositTicketIDs(Param1: WordBool);
begin
  DefaultInterface.Set_AssignDepositTicketIDs(Param1);
end;

function TDefaultCustomerDataProperties.Get_CashAccount: WideString;
begin
    Result := DefaultInterface.CashAccount;
end;

procedure TDefaultCustomerDataProperties.Set_CashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_CashAccount(Param1);
end;

function TDefaultCustomerDataProperties.Get_ChargeFinanceCharges: WordBool;
begin
    Result := DefaultInterface.ChargeFinanceCharges;
end;

procedure TDefaultCustomerDataProperties.Set_ChargeFinanceCharges(Param1: WordBool);
begin
  DefaultInterface.Set_ChargeFinanceCharges(Param1);
end;

function TDefaultCustomerDataProperties.Get_COD: WordBool;
begin
    Result := DefaultInterface.COD;
end;

procedure TDefaultCustomerDataProperties.Set_COD(Param1: WordBool);
begin
  DefaultInterface.Set_COD(Param1);
end;

function TDefaultCustomerDataProperties.Get_CreditLimit: Double;
begin
    Result := DefaultInterface.CreditLimit;
end;

procedure TDefaultCustomerDataProperties.Set_CreditLimit(Param1: Double);
begin
  DefaultInterface.Set_CreditLimit(Param1);
end;

function TDefaultCustomerDataProperties.Get_CustomFieldEnabled(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.CustomFieldEnabled[Index];
end;

procedure TDefaultCustomerDataProperties.Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.CustomFieldEnabled[Index] := Param2;
end;

function TDefaultCustomerDataProperties.Get_CustomFieldLabel(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomFieldLabel[Index];
end;

procedure TDefaultCustomerDataProperties.Set_CustomFieldLabel(Index: Smallint; 
                                                              const Param2: WideString);
begin
  DefaultInterface.Set_CustomFieldLabel(Index,Param2);
end;

function TDefaultCustomerDataProperties.Get_DefaultPayMethod: WideString;
begin
    Result := DefaultInterface.DefaultPayMethod;
end;

procedure TDefaultCustomerDataProperties.Set_DefaultPayMethod(const Param1: WideString);
begin
  DefaultInterface.Set_DefaultPayMethod(Param1);
end;

function TDefaultCustomerDataProperties.Get_DiscountDays: Smallint;
begin
    Result := DefaultInterface.DiscountDays;
end;

procedure TDefaultCustomerDataProperties.Set_DiscountDays(Param1: Smallint);
begin
  DefaultInterface.Set_DiscountDays(Param1);
end;

function TDefaultCustomerDataProperties.Get_DiscountGLAccount: WideString;
begin
    Result := DefaultInterface.DiscountGLAccount;
end;

procedure TDefaultCustomerDataProperties.Set_DiscountGLAccount(const Param1: WideString);
begin
  DefaultInterface.Set_DiscountGLAccount(Param1);
end;

function TDefaultCustomerDataProperties.Get_DiscountPercent: Double;
begin
    Result := DefaultInterface.DiscountPercent;
end;

procedure TDefaultCustomerDataProperties.Set_DiscountPercent(Param1: Double);
begin
  DefaultInterface.Set_DiscountPercent(Param1);
end;

function TDefaultCustomerDataProperties.Get_DueAtEndOfMonth: WordBool;
begin
    Result := DefaultInterface.DueAtEndOfMonth;
end;

procedure TDefaultCustomerDataProperties.Set_DueAtEndOfMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueAtEndOfMonth(Param1);
end;

function TDefaultCustomerDataProperties.Get_DueOnDayOfNextMonth: WordBool;
begin
    Result := DefaultInterface.DueOnDayOfNextMonth;
end;

procedure TDefaultCustomerDataProperties.Set_DueOnDayOfNextMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueOnDayOfNextMonth(Param1);
end;

function TDefaultCustomerDataProperties.Get_FCAnnualInterestRate: Double;
begin
    Result := DefaultInterface.FCAnnualInterestRate;
end;

procedure TDefaultCustomerDataProperties.Set_FCAnnualInterestRate(Param1: Double);
begin
  DefaultInterface.Set_FCAnnualInterestRate(Param1);
end;

function TDefaultCustomerDataProperties.Get_FCAppearsAs: WideString;
begin
    Result := DefaultInterface.FCAppearsAs;
end;

procedure TDefaultCustomerDataProperties.Set_FCAppearsAs(const Param1: WideString);
begin
  DefaultInterface.Set_FCAppearsAs(Param1);
end;

function TDefaultCustomerDataProperties.Get_FCChargeInterest: WordBool;
begin
    Result := DefaultInterface.FCChargeInterest;
end;

procedure TDefaultCustomerDataProperties.Set_FCChargeInterest(Param1: WordBool);
begin
  DefaultInterface.Set_FCChargeInterest(Param1);
end;

function TDefaultCustomerDataProperties.Get_FCDays: Smallint;
begin
    Result := DefaultInterface.FCDays;
end;

procedure TDefaultCustomerDataProperties.Set_FCDays(Param1: Smallint);
begin
  DefaultInterface.Set_FCDays(Param1);
end;

function TDefaultCustomerDataProperties.Get_FCGLAccount: WideString;
begin
    Result := DefaultInterface.FCGLAccount;
end;

procedure TDefaultCustomerDataProperties.Set_FCGLAccount(const Param1: WideString);
begin
  DefaultInterface.Set_FCGLAccount(Param1);
end;

function TDefaultCustomerDataProperties.Get_FCInterestAbove: Double;
begin
    Result := DefaultInterface.FCInterestAbove;
end;

procedure TDefaultCustomerDataProperties.Set_FCInterestAbove(Param1: Double);
begin
  DefaultInterface.Set_FCInterestAbove(Param1);
end;

function TDefaultCustomerDataProperties.Get_FCMinimum: Double;
begin
    Result := DefaultInterface.FCMinimum;
end;

procedure TDefaultCustomerDataProperties.Set_FCMinimum(Param1: Double);
begin
  DefaultInterface.Set_FCMinimum(Param1);
end;

function TDefaultCustomerDataProperties.Get_FCOverdueLimit: Double;
begin
    Result := DefaultInterface.FCOverdueLimit;
end;

procedure TDefaultCustomerDataProperties.Set_FCOverdueLimit(Param1: Double);
begin
  DefaultInterface.Set_FCOverdueLimit(Param1);
end;

function TDefaultCustomerDataProperties.Get_GLSalesAccount: WideString;
begin
    Result := DefaultInterface.GLSalesAccount;
end;

procedure TDefaultCustomerDataProperties.Set_GLSalesAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLSalesAccount(Param1);
end;

function TDefaultCustomerDataProperties.Get_NetDueDays: Smallint;
begin
    Result := DefaultInterface.NetDueDays;
end;

procedure TDefaultCustomerDataProperties.Set_NetDueDays(Param1: Smallint);
begin
  DefaultInterface.Set_NetDueDays(Param1);
end;

function TDefaultCustomerDataProperties.Get_NextInvoiceNumber: WideString;
begin
    Result := DefaultInterface.NextInvoiceNumber;
end;

procedure TDefaultCustomerDataProperties.Set_NextInvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_NextInvoiceNumber(Param1);
end;

function TDefaultCustomerDataProperties.Get_NextQuoteNumber: WideString;
begin
    Result := DefaultInterface.NextQuoteNumber;
end;

procedure TDefaultCustomerDataProperties.Set_NextQuoteNumber(const Param1: WideString);
begin
  DefaultInterface.Set_NextQuoteNumber(Param1);
end;

function TDefaultCustomerDataProperties.Get_NextSONumber: WideString;
begin
    Result := DefaultInterface.NextSONumber;
end;

procedure TDefaultCustomerDataProperties.Set_NextSONumber(const Param1: WideString);
begin
  DefaultInterface.Set_NextSONumber(Param1);
end;

function TDefaultCustomerDataProperties.Get_NLabels: Smallint;
begin
    Result := DefaultInterface.NLabels;
end;

function TDefaultCustomerDataProperties.Get_PaymentMethod(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PaymentMethod[Index];
end;

procedure TDefaultCustomerDataProperties.Set_PaymentMethod(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PaymentMethod(Index,Param2);
end;

function TDefaultCustomerDataProperties.Get_Prepaid: WordBool;
begin
    Result := DefaultInterface.Prepaid;
end;

procedure TDefaultCustomerDataProperties.Set_Prepaid(Param1: WordBool);
begin
  DefaultInterface.Set_Prepaid(Param1);
end;

function TDefaultCustomerDataProperties.Get_TaxAccount: WideString;
begin
    Result := DefaultInterface.TaxAccount;
end;

procedure TDefaultCustomerDataProperties.Set_TaxAccount(const Param1: WideString);
begin
  DefaultInterface.Set_TaxAccount(Param1);
end;

function TDefaultCustomerDataProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TDefaultCustomerDataProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TDefaultCustomerDataProperties.Get_Unused3: Smallint;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TDefaultCustomerDataProperties.Set_Unused3(Param1: Smallint);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TDefaultCustomerDataProperties.Get_Unused4: Byte;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TDefaultCustomerDataProperties.Set_Unused4(Param1: Byte);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TDefaultCustomerDataProperties.Get_Unused5(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TDefaultCustomerDataProperties.Set_Unused5(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TDefaultCustomerDataProperties.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TDefaultCustomerDataProperties.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TDefaultCustomerDataProperties.Get_Unused10(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused10[Index];
end;

procedure TDefaultCustomerDataProperties.Set_Unused10(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused10[Index] := Param2;
end;

function TDefaultCustomerDataProperties.Get_Unused11(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused11[Index];
end;

procedure TDefaultCustomerDataProperties.Set_Unused11(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused11[Index] := Param2;
end;

{$ENDIF}

class function CoChart.Create: _Chart;
begin
  Result := CreateComObject(CLASS_Chart) as _Chart;
end;

class function CoChart.CreateRemote(const MachineName: string): _Chart;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Chart) as _Chart;
end;

procedure TChart.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F48B46B7-63D8-43C5-8BEB-C883A9975AC6}';
    IntfIID:   '{7FD6888B-863F-4726-99FF-F9FD67CB7956}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TChart.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Chart;
  end;
end;

procedure TChart.ConnectTo(svrIntf: _Chart);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TChart.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TChart.GetDefaultInterface: _Chart;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TChart.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TChartProperties.Create(Self);
{$ENDIF}
end;

destructor TChart.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TChart.GetServerProperties: TChartProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TChart.Get_AccountDescription: WideString;
begin
    Result := DefaultInterface.AccountDescription;
end;

procedure TChart.Set_AccountDescription(var Param1: WideString);
begin
  DefaultInterface.Set_AccountDescription(Param1);
end;

function TChart.Get_AccountDescription2: WideString;
begin
    Result := DefaultInterface.AccountDescription2;
end;

procedure TChart.Set_AccountDescription2(const Param1: WideString);
begin
  DefaultInterface.Set_AccountDescription2(Param1);
end;

function TChart.Get_AccountID: WideString;
begin
    Result := DefaultInterface.AccountID;
end;

procedure TChart.Set_AccountID(const Param1: WideString);
begin
  DefaultInterface.Set_AccountID(Param1);
end;

function TChart.Get_AccountType: Smallint;
begin
    Result := DefaultInterface.AccountType;
end;

procedure TChart.Set_AccountType(Param1: Smallint);
begin
  DefaultInterface.Set_AccountType(Param1);
end;

function TChart.Get_AccountTypeDescription: WideString;
begin
    Result := DefaultInterface.AccountTypeDescription;
end;

function TChart.Get_Activity(Index: Smallint): Double;
begin
    Result := DefaultInterface.Activity[Index];
end;

procedure TChart.Set_Activity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Activity[Index] := Param2;
end;

function TChart.Get_Budget(Index: Smallint): Double;
begin
    Result := DefaultInterface.Budget[Index];
end;

procedure TChart.Set_Budget(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Budget[Index] := Param2;
end;

function TChart.Get_Credit(Index: Smallint): Double;
begin
    Result := DefaultInterface.Credit[Index];
end;

procedure TChart.Set_Credit(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Credit[Index] := Param2;
end;

function TChart.Get_Debit(Index: Smallint): Double;
begin
    Result := DefaultInterface.Debit[Index];
end;

procedure TChart.Set_Debit(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Debit[Index] := Param2;
end;

function TChart.Get_eCheckID: Smallint;
begin
    Result := DefaultInterface.eCheckID;
end;

procedure TChart.Set_eCheckID(Param1: Smallint);
begin
  DefaultInterface.Set_eCheckID(Param1);
end;

function TChart.Get_GL1099Index: Smallint;
begin
    Result := DefaultInterface.GL1099Index;
end;

procedure TChart.Set_GL1099Index(Param1: Smallint);
begin
  DefaultInterface.Set_GL1099Index(Param1);
end;

function TChart.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TChart.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TChart.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TChart.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TChart.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TChart.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TChart.Get_Internal1: WideString;
begin
    Result := DefaultInterface.Internal1;
end;

procedure TChart.Set_Internal1(const Param1: WideString);
begin
  DefaultInterface.Set_Internal1(Param1);
end;

function TChart.Get_LastDepositTicket: WideString;
begin
    Result := DefaultInterface.LastDepositTicket;
end;

procedure TChart.Set_LastDepositTicket(const Param1: WideString);
begin
  DefaultInterface.Set_LastDepositTicket(Param1);
end;

function TChart.Get_NextRef: WideString;
begin
    Result := DefaultInterface.NextRef;
end;

procedure TChart.Set_NextRef(const Param1: WideString);
begin
  DefaultInterface.Set_NextRef(Param1);
end;

function TChart.Get_ReceiptNum: WideString;
begin
    Result := DefaultInterface.ReceiptNum;
end;

procedure TChart.Set_ReceiptNum(const Param1: WideString);
begin
  DefaultInterface.Set_ReceiptNum(Param1);
end;

function TChart.Get_Revised(Index: Smallint): Double;
begin
    Result := DefaultInterface.Revised[Index];
end;

procedure TChart.Set_Revised(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Revised[Index] := Param2;
end;

function TChart.Get_TaxCode: WideString;
begin
    Result := DefaultInterface.TaxCode;
end;

procedure TChart.Set_TaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_TaxCode(Param1);
end;

function TChart.Get_Unknown(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown[Index];
end;

procedure TChart.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TChart.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TChart.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TChart.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TChart.GetEqual(Index: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(Index);
end;

function TChart.GetForAccountID(const AccountID: WideString): Smallint;
begin
  Result := DefaultInterface.GetForAccountID(AccountID);
end;

function TChart.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TChart.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TChart.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TChart.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TChart.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TChart.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TChart.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TChartProperties.Create(AServer: TChart);
begin
  inherited Create;
  FServer := AServer;
end;

function TChartProperties.GetDefaultInterface: _Chart;
begin
  Result := FServer.DefaultInterface;
end;

function TChartProperties.Get_AccountDescription: WideString;
begin
    Result := DefaultInterface.AccountDescription;
end;

procedure TChartProperties.Set_AccountDescription(var Param1: WideString);
begin
  DefaultInterface.Set_AccountDescription(Param1);
end;

function TChartProperties.Get_AccountDescription2: WideString;
begin
    Result := DefaultInterface.AccountDescription2;
end;

procedure TChartProperties.Set_AccountDescription2(const Param1: WideString);
begin
  DefaultInterface.Set_AccountDescription2(Param1);
end;

function TChartProperties.Get_AccountID: WideString;
begin
    Result := DefaultInterface.AccountID;
end;

procedure TChartProperties.Set_AccountID(const Param1: WideString);
begin
  DefaultInterface.Set_AccountID(Param1);
end;

function TChartProperties.Get_AccountType: Smallint;
begin
    Result := DefaultInterface.AccountType;
end;

procedure TChartProperties.Set_AccountType(Param1: Smallint);
begin
  DefaultInterface.Set_AccountType(Param1);
end;

function TChartProperties.Get_AccountTypeDescription: WideString;
begin
    Result := DefaultInterface.AccountTypeDescription;
end;

function TChartProperties.Get_Activity(Index: Smallint): Double;
begin
    Result := DefaultInterface.Activity[Index];
end;

procedure TChartProperties.Set_Activity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Activity[Index] := Param2;
end;

function TChartProperties.Get_Budget(Index: Smallint): Double;
begin
    Result := DefaultInterface.Budget[Index];
end;

procedure TChartProperties.Set_Budget(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Budget[Index] := Param2;
end;

function TChartProperties.Get_Credit(Index: Smallint): Double;
begin
    Result := DefaultInterface.Credit[Index];
end;

procedure TChartProperties.Set_Credit(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Credit[Index] := Param2;
end;

function TChartProperties.Get_Debit(Index: Smallint): Double;
begin
    Result := DefaultInterface.Debit[Index];
end;

procedure TChartProperties.Set_Debit(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Debit[Index] := Param2;
end;

function TChartProperties.Get_eCheckID: Smallint;
begin
    Result := DefaultInterface.eCheckID;
end;

procedure TChartProperties.Set_eCheckID(Param1: Smallint);
begin
  DefaultInterface.Set_eCheckID(Param1);
end;

function TChartProperties.Get_GL1099Index: Smallint;
begin
    Result := DefaultInterface.GL1099Index;
end;

procedure TChartProperties.Set_GL1099Index(Param1: Smallint);
begin
  DefaultInterface.Set_GL1099Index(Param1);
end;

function TChartProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TChartProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TChartProperties.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TChartProperties.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TChartProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TChartProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TChartProperties.Get_Internal1: WideString;
begin
    Result := DefaultInterface.Internal1;
end;

procedure TChartProperties.Set_Internal1(const Param1: WideString);
begin
  DefaultInterface.Set_Internal1(Param1);
end;

function TChartProperties.Get_LastDepositTicket: WideString;
begin
    Result := DefaultInterface.LastDepositTicket;
end;

procedure TChartProperties.Set_LastDepositTicket(const Param1: WideString);
begin
  DefaultInterface.Set_LastDepositTicket(Param1);
end;

function TChartProperties.Get_NextRef: WideString;
begin
    Result := DefaultInterface.NextRef;
end;

procedure TChartProperties.Set_NextRef(const Param1: WideString);
begin
  DefaultInterface.Set_NextRef(Param1);
end;

function TChartProperties.Get_ReceiptNum: WideString;
begin
    Result := DefaultInterface.ReceiptNum;
end;

procedure TChartProperties.Set_ReceiptNum(const Param1: WideString);
begin
  DefaultInterface.Set_ReceiptNum(Param1);
end;

function TChartProperties.Get_Revised(Index: Smallint): Double;
begin
    Result := DefaultInterface.Revised[Index];
end;

procedure TChartProperties.Set_Revised(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Revised[Index] := Param2;
end;

function TChartProperties.Get_TaxCode: WideString;
begin
    Result := DefaultInterface.TaxCode;
end;

procedure TChartProperties.Set_TaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_TaxCode(Param1);
end;

function TChartProperties.Get_Unknown(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown[Index];
end;

procedure TChartProperties.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

{$ENDIF}

class function CoCustomer.Create: _Customer;
begin
  Result := CreateComObject(CLASS_Customer) as _Customer;
end;

class function CoCustomer.CreateRemote(const MachineName: string): _Customer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Customer) as _Customer;
end;

procedure TCustomer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3BBEE809-6D9D-483E-9AE4-47B44F0F45BC}';
    IntfIID:   '{34AFE43F-CBD3-4340-BEBB-E200DAB272AB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCustomer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Customer;
  end;
end;

procedure TCustomer.ConnectTo(svrIntf: _Customer);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCustomer.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCustomer.GetDefaultInterface: _Customer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCustomer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCustomerProperties.Create(Self);
{$ENDIF}
end;

destructor TCustomer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCustomer.GetServerProperties: TCustomerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCustomer.Get_BillPresentment: WordBool;
begin
    Result := DefaultInterface.BillPresentment;
end;

procedure TCustomer.Set_BillPresentment(Param1: WordBool);
begin
  DefaultInterface.Set_BillPresentment(Param1);
end;

function TCustomer.Get_BillToAddress1: WideString;
begin
    Result := DefaultInterface.BillToAddress1;
end;

procedure TCustomer.Set_BillToAddress1(const Param1: WideString);
begin
  DefaultInterface.Set_BillToAddress1(Param1);
end;

function TCustomer.Get_BillToAddress2: WideString;
begin
    Result := DefaultInterface.BillToAddress2;
end;

procedure TCustomer.Set_BillToAddress2(const Param1: WideString);
begin
  DefaultInterface.Set_BillToAddress2(Param1);
end;

function TCustomer.Get_BillToCity: WideString;
begin
    Result := DefaultInterface.BillToCity;
end;

procedure TCustomer.Set_BillToCity(const Param1: WideString);
begin
  DefaultInterface.Set_BillToCity(Param1);
end;

function TCustomer.Get_BillToCountry: WideString;
begin
    Result := DefaultInterface.BillToCountry;
end;

procedure TCustomer.Set_BillToCountry(const Param1: WideString);
begin
  DefaultInterface.Set_BillToCountry(Param1);
end;

function TCustomer.Get_BillToName: WideString;
begin
    Result := DefaultInterface.BillToName;
end;

procedure TCustomer.Set_BillToName(const Param1: WideString);
begin
  DefaultInterface.Set_BillToName(Param1);
end;

function TCustomer.Get_BillToSalesTaxCode: WideString;
begin
    Result := DefaultInterface.BillToSalesTaxCode;
end;

procedure TCustomer.Set_BillToSalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_BillToSalesTaxCode(Param1);
end;

function TCustomer.Get_BillToState: WideString;
begin
    Result := DefaultInterface.BillToState;
end;

procedure TCustomer.Set_BillToState(const Param1: WideString);
begin
  DefaultInterface.Set_BillToState(Param1);
end;

function TCustomer.Get_BillToZipcode: WideString;
begin
    Result := DefaultInterface.BillToZipcode;
end;

procedure TCustomer.Set_BillToZipcode(const Param1: WideString);
begin
  DefaultInterface.Set_BillToZipcode(Param1);
end;

function TCustomer.Get_CardholderAddress1: WideString;
begin
    Result := DefaultInterface.CardholderAddress1;
end;

procedure TCustomer.Set_CardholderAddress1(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderAddress1(Param1);
end;

function TCustomer.Get_CardholderAddress2: WideString;
begin
    Result := DefaultInterface.CardholderAddress2;
end;

procedure TCustomer.Set_CardholderAddress2(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderAddress2(Param1);
end;

function TCustomer.Get_CardholderCity: WideString;
begin
    Result := DefaultInterface.CardholderCity;
end;

procedure TCustomer.Set_CardholderCity(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderCity(Param1);
end;

function TCustomer.Get_CardholderCountry: WideString;
begin
    Result := DefaultInterface.CardholderCountry;
end;

procedure TCustomer.Set_CardholderCountry(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderCountry(Param1);
end;

function TCustomer.Get_CardholderName: WideString;
begin
    Result := DefaultInterface.CardholderName;
end;

procedure TCustomer.Set_CardholderName(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderName(Param1);
end;

function TCustomer.Get_CardholderState: WideString;
begin
    Result := DefaultInterface.CardholderState;
end;

procedure TCustomer.Set_CardholderState(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderState(Param1);
end;

function TCustomer.Get_CardholderZipCode: WideString;
begin
    Result := DefaultInterface.CardholderZipCode;
end;

procedure TCustomer.Set_CardholderZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderZipCode(Param1);
end;

function TCustomer.Get_CCExpirationDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.CCExpirationDate;
end;

procedure TCustomer.Set_CCExpirationDate(Param1: OleVariant);
begin
  DefaultInterface.Set_CCExpirationDate(Param1);
end;

function TCustomer.Get_CCNumber: WideString;
begin
    Result := DefaultInterface.CCNumber;
end;

procedure TCustomer.Set_CCNumber(const Param1: WideString);
begin
  DefaultInterface.Set_CCNumber(Param1);
end;

function TCustomer.Get_ChargeFinanceCharges: WordBool;
begin
    Result := DefaultInterface.ChargeFinanceCharges;
end;

procedure TCustomer.Set_ChargeFinanceCharges(Param1: WordBool);
begin
  DefaultInterface.Set_ChargeFinanceCharges(Param1);
end;

function TCustomer.Get_CODTerms: WordBool;
begin
    Result := DefaultInterface.CODTerms;
end;

procedure TCustomer.Set_CODTerms(Param1: WordBool);
begin
  DefaultInterface.Set_CODTerms(Param1);
end;

function TCustomer.Get_Contact: WideString;
begin
    Result := DefaultInterface.Contact;
end;

procedure TCustomer.Set_Contact(const Param1: WideString);
begin
  DefaultInterface.Set_Contact(Param1);
end;

function TCustomer.Get_CreditLimit: Double;
begin
    Result := DefaultInterface.CreditLimit;
end;

procedure TCustomer.Set_CreditLimit(Param1: Double);
begin
  DefaultInterface.Set_CreditLimit(Param1);
end;

function TCustomer.Get_CreditStatus: Integer;
begin
    Result := DefaultInterface.CreditStatus;
end;

procedure TCustomer.Set_CreditStatus(Param1: Integer);
begin
  DefaultInterface.Set_CreditStatus(Param1);
end;

function TCustomer.Get_CurrentBalance: Double;
begin
    Result := DefaultInterface.CurrentBalance;
end;

procedure TCustomer.Set_CurrentBalance(Param1: Double);
begin
  DefaultInterface.Set_CurrentBalance(Param1);
end;

function TCustomer.Get_CustomerID: WideString;
begin
    Result := DefaultInterface.CustomerID;
end;

procedure TCustomer.Set_CustomerID(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerID(Param1);
end;

function TCustomer.Get_CustomerSinceDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.CustomerSinceDate;
end;

procedure TCustomer.Set_CustomerSinceDate(Param1: OleVariant);
begin
  DefaultInterface.Set_CustomerSinceDate(Param1);
end;

function TCustomer.Get_CustomerType: WideString;
begin
    Result := DefaultInterface.CustomerType;
end;

procedure TCustomer.Set_CustomerType(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerType(Param1);
end;

function TCustomer.Get_CustomField(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomField[Index];
end;

procedure TCustomer.Set_CustomField(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomField(Index,Param2);
end;

function TCustomer.Get_DiscountDays: Smallint;
begin
    Result := DefaultInterface.DiscountDays;
end;

procedure TCustomer.Set_DiscountDays(Param1: Smallint);
begin
  DefaultInterface.Set_DiscountDays(Param1);
end;

function TCustomer.Get_DiscountPercent: Double;
begin
    Result := DefaultInterface.DiscountPercent;
end;

procedure TCustomer.Set_DiscountPercent(Param1: Double);
begin
  DefaultInterface.Set_DiscountPercent(Param1);
end;

function TCustomer.Get_DueAtEndOfMonth: WordBool;
begin
    Result := DefaultInterface.DueAtEndOfMonth;
end;

procedure TCustomer.Set_DueAtEndOfMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueAtEndOfMonth(Param1);
end;

function TCustomer.Get_DueOnDayOfNextMonth: WordBool;
begin
    Result := DefaultInterface.DueOnDayOfNextMonth;
end;

procedure TCustomer.Set_DueOnDayOfNextMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueOnDayOfNextMonth(Param1);
end;

function TCustomer.Get_Email: WideString;
begin
    Result := DefaultInterface.Email;
end;

procedure TCustomer.Set_Email(const Param1: WideString);
begin
  DefaultInterface.Set_Email(Param1);
end;

function TCustomer.Get_Fax: WideString;
begin
    Result := DefaultInterface.Fax;
end;

procedure TCustomer.Set_Fax(const Param1: WideString);
begin
  DefaultInterface.Set_Fax(Param1);
end;

function TCustomer.Get_FormDeliveryFlags: Integer;
begin
    Result := DefaultInterface.FormDeliveryFlags;
end;

procedure TCustomer.Set_FormDeliveryFlags(Param1: Integer);
begin
  DefaultInterface.Set_FormDeliveryFlags(Param1);
end;

function TCustomer.Get_GLSalesAccount: WideString;
begin
    Result := DefaultInterface.GLSalesAccount;
end;

procedure TCustomer.Set_GLSalesAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLSalesAccount(Param1);
end;

function TCustomer.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TCustomer.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TCustomer.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TCustomer.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TCustomer.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TCustomer.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TCustomer.Get_LastInvoiceAmount: Double;
begin
    Result := DefaultInterface.LastInvoiceAmount;
end;

procedure TCustomer.Set_LastInvoiceAmount(Param1: Double);
begin
  DefaultInterface.Set_LastInvoiceAmount(Param1);
end;

function TCustomer.Get_LastInvoiceDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastInvoiceDate;
end;

procedure TCustomer.Set_LastInvoiceDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastInvoiceDate(Param1);
end;

function TCustomer.Get_LastPaymentAmount: Double;
begin
    Result := DefaultInterface.LastPaymentAmount;
end;

procedure TCustomer.Set_LastPaymentAmount(Param1: Double);
begin
  DefaultInterface.Set_LastPaymentAmount(Param1);
end;

function TCustomer.Get_LastPaymentDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastPaymentDate;
end;

procedure TCustomer.Set_LastPaymentDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastPaymentDate(Param1);
end;

function TCustomer.Get_LastStatementDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastStatementDate;
end;

procedure TCustomer.Set_LastStatementDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastStatementDate(Param1);
end;

function TCustomer.Get_LastUpdateCounter: Integer;
begin
    Result := DefaultInterface.LastUpdateCounter;
end;

procedure TCustomer.Set_LastUpdateCounter(Param1: Integer);
begin
  DefaultInterface.Set_LastUpdateCounter(Param1);
end;

function TCustomer.Get_NetDueDays: Smallint;
begin
    Result := DefaultInterface.NetDueDays;
end;

procedure TCustomer.Set_NetDueDays(Param1: Smallint);
begin
  DefaultInterface.Set_NetDueDays(Param1);
end;

function TCustomer.Get_OpenPONumber: WideString;
begin
    Result := DefaultInterface.OpenPONumber;
end;

procedure TCustomer.Set_OpenPONumber(const Param1: WideString);
begin
  DefaultInterface.Set_OpenPONumber(Param1);
end;

function TCustomer.Get_OurAccount: WideString;
begin
    Result := DefaultInterface.OurAccount;
end;

procedure TCustomer.Set_OurAccount(const Param1: WideString);
begin
  DefaultInterface.Set_OurAccount(Param1);
end;

function TCustomer.Get_PaymentAccount: WideString;
begin
    Result := DefaultInterface.PaymentAccount;
end;

procedure TCustomer.Set_PaymentAccount(const Param1: WideString);
begin
  DefaultInterface.Set_PaymentAccount(Param1);
end;

function TCustomer.Get_PaymentDefaultData: Integer;
begin
    Result := DefaultInterface.PaymentDefaultData;
end;

procedure TCustomer.Set_PaymentDefaultData(Param1: Integer);
begin
  DefaultInterface.Set_PaymentDefaultData(Param1);
end;

function TCustomer.Get_PaymentMethod: WideString;
begin
    Result := DefaultInterface.PaymentMethod;
end;

procedure TCustomer.Set_PaymentMethod(const Param1: WideString);
begin
  DefaultInterface.Set_PaymentMethod(Param1);
end;

function TCustomer.Get_PrepaidTerms: WordBool;
begin
    Result := DefaultInterface.PrepaidTerms;
end;

procedure TCustomer.Set_PrepaidTerms(Param1: WordBool);
begin
  DefaultInterface.Set_PrepaidTerms(Param1);
end;

function TCustomer.Get_PricingLevel: Byte;
begin
    Result := DefaultInterface.PricingLevel;
end;

procedure TCustomer.Set_PricingLevel(Param1: Byte);
begin
  DefaultInterface.Set_PricingLevel(Param1);
end;

function TCustomer.Get_Prospect: WordBool;
begin
    Result := DefaultInterface.Prospect;
end;

procedure TCustomer.Set_Prospect(Param1: WordBool);
begin
  DefaultInterface.Set_Prospect(Param1);
end;

function TCustomer.Get_Receipts(Index: Smallint): Double;
begin
    Result := DefaultInterface.Receipts[Index];
end;

procedure TCustomer.Set_Receipts(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Receipts[Index] := Param2;
end;

function TCustomer.Get_ResaleNumber: WideString;
begin
    Result := DefaultInterface.ResaleNumber;
end;

procedure TCustomer.Set_ResaleNumber(const Param1: WideString);
begin
  DefaultInterface.Set_ResaleNumber(Param1);
end;

function TCustomer.Get_Sales(Index: Smallint): Double;
begin
    Result := DefaultInterface.Sales[Index];
end;

procedure TCustomer.Set_Sales(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Sales[Index] := Param2;
end;

function TCustomer.Get_SalesRepID: WideString;
begin
    Result := DefaultInterface.SalesRepID;
end;

procedure TCustomer.Set_SalesRepID(const Param1: WideString);
begin
  DefaultInterface.Set_SalesRepID(Param1);
end;

function TCustomer.Get_ShipToAddress1(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToAddress1[Index];
end;

procedure TCustomer.Set_ShipToAddress1(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToAddress1(Index,Param2);
end;

function TCustomer.Get_ShipToAddress2(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToAddress2[Index];
end;

procedure TCustomer.Set_ShipToAddress2(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToAddress2(Index,Param2);
end;

function TCustomer.Get_ShipToCity(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToCity[Index];
end;

procedure TCustomer.Set_ShipToCity(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToCity(Index,Param2);
end;

function TCustomer.Get_ShipToCountry(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToCountry[Index];
end;

procedure TCustomer.Set_ShipToCountry(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToCountry(Index,Param2);
end;

function TCustomer.Get_ShipToName(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToName[Index];
end;

procedure TCustomer.Set_ShipToName(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToName(Index,Param2);
end;

function TCustomer.Get_ShipToSalesTaxCode(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToSalesTaxCode[Index];
end;

procedure TCustomer.Set_ShipToSalesTaxCode(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToSalesTaxCode(Index,Param2);
end;

function TCustomer.Get_ShipToState(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToState[Index];
end;

procedure TCustomer.Set_ShipToState(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToState(Index,Param2);
end;

function TCustomer.Get_ShipToZipCode(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToZipCode[Index];
end;

procedure TCustomer.Set_ShipToZipCode(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToZipCode(Index,Param2);
end;

function TCustomer.Get_ShipVia: Byte;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TCustomer.Set_ShipVia(Param1: Byte);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TCustomer.Get_Telephone1: WideString;
begin
    Result := DefaultInterface.Telephone1;
end;

procedure TCustomer.Set_Telephone1(const Param1: WideString);
begin
  DefaultInterface.Set_Telephone1(Param1);
end;

function TCustomer.Get_Telephone2: WideString;
begin
    Result := DefaultInterface.Telephone2;
end;

procedure TCustomer.Set_Telephone2(const Param1: WideString);
begin
  DefaultInterface.Set_Telephone2(Param1);
end;

function TCustomer.Get_Unknown1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown1[Index];
end;

procedure TCustomer.Set_Unknown1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown1[Index] := Param2;
end;

function TCustomer.Get_Unused1: Byte;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TCustomer.Set_Unused1(Param1: Byte);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TCustomer.Get_Unknown2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown2[Index];
end;

procedure TCustomer.Set_Unknown2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown2[Index] := Param2;
end;

function TCustomer.Get_Unknown3: Byte;
begin
    Result := DefaultInterface.Unknown3;
end;

procedure TCustomer.Set_Unknown3(Param1: Byte);
begin
  DefaultInterface.Set_Unknown3(Param1);
end;

function TCustomer.Get_Unknown4: Byte;
begin
    Result := DefaultInterface.Unknown4;
end;

procedure TCustomer.Set_Unknown4(Param1: Byte);
begin
  DefaultInterface.Set_Unknown4(Param1);
end;

function TCustomer.Get_Unused5: Smallint;
begin
    Result := DefaultInterface.Unused5;
end;

procedure TCustomer.Set_Unused5(Param1: Smallint);
begin
  DefaultInterface.Set_Unused5(Param1);
end;

function TCustomer.Get_UseReceiptWindowSettingsNot: Integer;
begin
    Result := DefaultInterface.UseReceiptWindowSettingsNot;
end;

procedure TCustomer.Set_UseReceiptWindowSettingsNot(Param1: Integer);
begin
  DefaultInterface.Set_UseReceiptWindowSettingsNot(Param1);
end;

function TCustomer.Get_UseStandardTerms: WordBool;
begin
    Result := DefaultInterface.UseStandardTerms;
end;

procedure TCustomer.Set_UseStandardTerms(Param1: WordBool);
begin
  DefaultInterface.Set_UseStandardTerms(Param1);
end;

function TCustomer.Get_Web: WideString;
begin
    Result := DefaultInterface.Web;
end;

procedure TCustomer.Set_Web(const Param1: WideString);
begin
  DefaultInterface.Set_Web(Param1);
end;

function TCustomer.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TCustomer.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TCustomer.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TCustomer.FindByPercent: Integer;
begin
  Result := DefaultInterface.FindByPercent;
end;

function TCustomer.GetByPercent(Percent: Double): Smallint;
begin
  Result := DefaultInterface.GetByPercent(Percent);
end;

function TCustomer.GetEqual(const CustomerID: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(CustomerID);
end;

function TCustomer.GetFirst: Smallint;
begin
  Result := DefaultInterface.GetFirst;
end;

function TCustomer.GetForIndex(Index: Integer): Smallint;
begin
  Result := DefaultInterface.GetForIndex(Index);
end;

function TCustomer.GetGreaterThan(const CustomerID: WideString): Smallint;
begin
  Result := DefaultInterface.GetGreaterThan(CustomerID);
end;

function TCustomer.GetGreaterThanOrEqual(const CustomerID: WideString): Smallint;
begin
  Result := DefaultInterface.GetGreaterThanOrEqual(CustomerID);
end;

function TCustomer.GetLast: Smallint;
begin
  Result := DefaultInterface.GetLast;
end;

function TCustomer.GetLessThan(const CustomerID: WideString): Smallint;
begin
  Result := DefaultInterface.GetLessThan(CustomerID);
end;

function TCustomer.GetLessThanOrEqual(const CustomerID: WideString): Smallint;
begin
  Result := DefaultInterface.GetLessThanOrEqual(CustomerID);
end;

function TCustomer.GetNext: Smallint;
begin
  Result := DefaultInterface.GetNext;
end;

function TCustomer.GetPrevious: Smallint;
begin
  Result := DefaultInterface.GetPrevious;
end;

function TCustomer.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TCustomer.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TCustomer.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TCustomer.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TCustomer.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TCustomer.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TCustomer.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCustomerProperties.Create(AServer: TCustomer);
begin
  inherited Create;
  FServer := AServer;
end;

function TCustomerProperties.GetDefaultInterface: _Customer;
begin
  Result := FServer.DefaultInterface;
end;

function TCustomerProperties.Get_BillPresentment: WordBool;
begin
    Result := DefaultInterface.BillPresentment;
end;

procedure TCustomerProperties.Set_BillPresentment(Param1: WordBool);
begin
  DefaultInterface.Set_BillPresentment(Param1);
end;

function TCustomerProperties.Get_BillToAddress1: WideString;
begin
    Result := DefaultInterface.BillToAddress1;
end;

procedure TCustomerProperties.Set_BillToAddress1(const Param1: WideString);
begin
  DefaultInterface.Set_BillToAddress1(Param1);
end;

function TCustomerProperties.Get_BillToAddress2: WideString;
begin
    Result := DefaultInterface.BillToAddress2;
end;

procedure TCustomerProperties.Set_BillToAddress2(const Param1: WideString);
begin
  DefaultInterface.Set_BillToAddress2(Param1);
end;

function TCustomerProperties.Get_BillToCity: WideString;
begin
    Result := DefaultInterface.BillToCity;
end;

procedure TCustomerProperties.Set_BillToCity(const Param1: WideString);
begin
  DefaultInterface.Set_BillToCity(Param1);
end;

function TCustomerProperties.Get_BillToCountry: WideString;
begin
    Result := DefaultInterface.BillToCountry;
end;

procedure TCustomerProperties.Set_BillToCountry(const Param1: WideString);
begin
  DefaultInterface.Set_BillToCountry(Param1);
end;

function TCustomerProperties.Get_BillToName: WideString;
begin
    Result := DefaultInterface.BillToName;
end;

procedure TCustomerProperties.Set_BillToName(const Param1: WideString);
begin
  DefaultInterface.Set_BillToName(Param1);
end;

function TCustomerProperties.Get_BillToSalesTaxCode: WideString;
begin
    Result := DefaultInterface.BillToSalesTaxCode;
end;

procedure TCustomerProperties.Set_BillToSalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_BillToSalesTaxCode(Param1);
end;

function TCustomerProperties.Get_BillToState: WideString;
begin
    Result := DefaultInterface.BillToState;
end;

procedure TCustomerProperties.Set_BillToState(const Param1: WideString);
begin
  DefaultInterface.Set_BillToState(Param1);
end;

function TCustomerProperties.Get_BillToZipcode: WideString;
begin
    Result := DefaultInterface.BillToZipcode;
end;

procedure TCustomerProperties.Set_BillToZipcode(const Param1: WideString);
begin
  DefaultInterface.Set_BillToZipcode(Param1);
end;

function TCustomerProperties.Get_CardholderAddress1: WideString;
begin
    Result := DefaultInterface.CardholderAddress1;
end;

procedure TCustomerProperties.Set_CardholderAddress1(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderAddress1(Param1);
end;

function TCustomerProperties.Get_CardholderAddress2: WideString;
begin
    Result := DefaultInterface.CardholderAddress2;
end;

procedure TCustomerProperties.Set_CardholderAddress2(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderAddress2(Param1);
end;

function TCustomerProperties.Get_CardholderCity: WideString;
begin
    Result := DefaultInterface.CardholderCity;
end;

procedure TCustomerProperties.Set_CardholderCity(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderCity(Param1);
end;

function TCustomerProperties.Get_CardholderCountry: WideString;
begin
    Result := DefaultInterface.CardholderCountry;
end;

procedure TCustomerProperties.Set_CardholderCountry(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderCountry(Param1);
end;

function TCustomerProperties.Get_CardholderName: WideString;
begin
    Result := DefaultInterface.CardholderName;
end;

procedure TCustomerProperties.Set_CardholderName(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderName(Param1);
end;

function TCustomerProperties.Get_CardholderState: WideString;
begin
    Result := DefaultInterface.CardholderState;
end;

procedure TCustomerProperties.Set_CardholderState(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderState(Param1);
end;

function TCustomerProperties.Get_CardholderZipCode: WideString;
begin
    Result := DefaultInterface.CardholderZipCode;
end;

procedure TCustomerProperties.Set_CardholderZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_CardholderZipCode(Param1);
end;

function TCustomerProperties.Get_CCExpirationDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.CCExpirationDate;
end;

procedure TCustomerProperties.Set_CCExpirationDate(Param1: OleVariant);
begin
  DefaultInterface.Set_CCExpirationDate(Param1);
end;

function TCustomerProperties.Get_CCNumber: WideString;
begin
    Result := DefaultInterface.CCNumber;
end;

procedure TCustomerProperties.Set_CCNumber(const Param1: WideString);
begin
  DefaultInterface.Set_CCNumber(Param1);
end;

function TCustomerProperties.Get_ChargeFinanceCharges: WordBool;
begin
    Result := DefaultInterface.ChargeFinanceCharges;
end;

procedure TCustomerProperties.Set_ChargeFinanceCharges(Param1: WordBool);
begin
  DefaultInterface.Set_ChargeFinanceCharges(Param1);
end;

function TCustomerProperties.Get_CODTerms: WordBool;
begin
    Result := DefaultInterface.CODTerms;
end;

procedure TCustomerProperties.Set_CODTerms(Param1: WordBool);
begin
  DefaultInterface.Set_CODTerms(Param1);
end;

function TCustomerProperties.Get_Contact: WideString;
begin
    Result := DefaultInterface.Contact;
end;

procedure TCustomerProperties.Set_Contact(const Param1: WideString);
begin
  DefaultInterface.Set_Contact(Param1);
end;

function TCustomerProperties.Get_CreditLimit: Double;
begin
    Result := DefaultInterface.CreditLimit;
end;

procedure TCustomerProperties.Set_CreditLimit(Param1: Double);
begin
  DefaultInterface.Set_CreditLimit(Param1);
end;

function TCustomerProperties.Get_CreditStatus: Integer;
begin
    Result := DefaultInterface.CreditStatus;
end;

procedure TCustomerProperties.Set_CreditStatus(Param1: Integer);
begin
  DefaultInterface.Set_CreditStatus(Param1);
end;

function TCustomerProperties.Get_CurrentBalance: Double;
begin
    Result := DefaultInterface.CurrentBalance;
end;

procedure TCustomerProperties.Set_CurrentBalance(Param1: Double);
begin
  DefaultInterface.Set_CurrentBalance(Param1);
end;

function TCustomerProperties.Get_CustomerID: WideString;
begin
    Result := DefaultInterface.CustomerID;
end;

procedure TCustomerProperties.Set_CustomerID(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerID(Param1);
end;

function TCustomerProperties.Get_CustomerSinceDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.CustomerSinceDate;
end;

procedure TCustomerProperties.Set_CustomerSinceDate(Param1: OleVariant);
begin
  DefaultInterface.Set_CustomerSinceDate(Param1);
end;

function TCustomerProperties.Get_CustomerType: WideString;
begin
    Result := DefaultInterface.CustomerType;
end;

procedure TCustomerProperties.Set_CustomerType(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerType(Param1);
end;

function TCustomerProperties.Get_CustomField(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomField[Index];
end;

procedure TCustomerProperties.Set_CustomField(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomField(Index,Param2);
end;

function TCustomerProperties.Get_DiscountDays: Smallint;
begin
    Result := DefaultInterface.DiscountDays;
end;

procedure TCustomerProperties.Set_DiscountDays(Param1: Smallint);
begin
  DefaultInterface.Set_DiscountDays(Param1);
end;

function TCustomerProperties.Get_DiscountPercent: Double;
begin
    Result := DefaultInterface.DiscountPercent;
end;

procedure TCustomerProperties.Set_DiscountPercent(Param1: Double);
begin
  DefaultInterface.Set_DiscountPercent(Param1);
end;

function TCustomerProperties.Get_DueAtEndOfMonth: WordBool;
begin
    Result := DefaultInterface.DueAtEndOfMonth;
end;

procedure TCustomerProperties.Set_DueAtEndOfMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueAtEndOfMonth(Param1);
end;

function TCustomerProperties.Get_DueOnDayOfNextMonth: WordBool;
begin
    Result := DefaultInterface.DueOnDayOfNextMonth;
end;

procedure TCustomerProperties.Set_DueOnDayOfNextMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueOnDayOfNextMonth(Param1);
end;

function TCustomerProperties.Get_Email: WideString;
begin
    Result := DefaultInterface.Email;
end;

procedure TCustomerProperties.Set_Email(const Param1: WideString);
begin
  DefaultInterface.Set_Email(Param1);
end;

function TCustomerProperties.Get_Fax: WideString;
begin
    Result := DefaultInterface.Fax;
end;

procedure TCustomerProperties.Set_Fax(const Param1: WideString);
begin
  DefaultInterface.Set_Fax(Param1);
end;

function TCustomerProperties.Get_FormDeliveryFlags: Integer;
begin
    Result := DefaultInterface.FormDeliveryFlags;
end;

procedure TCustomerProperties.Set_FormDeliveryFlags(Param1: Integer);
begin
  DefaultInterface.Set_FormDeliveryFlags(Param1);
end;

function TCustomerProperties.Get_GLSalesAccount: WideString;
begin
    Result := DefaultInterface.GLSalesAccount;
end;

procedure TCustomerProperties.Set_GLSalesAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLSalesAccount(Param1);
end;

function TCustomerProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TCustomerProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TCustomerProperties.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TCustomerProperties.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TCustomerProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TCustomerProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TCustomerProperties.Get_LastInvoiceAmount: Double;
begin
    Result := DefaultInterface.LastInvoiceAmount;
end;

procedure TCustomerProperties.Set_LastInvoiceAmount(Param1: Double);
begin
  DefaultInterface.Set_LastInvoiceAmount(Param1);
end;

function TCustomerProperties.Get_LastInvoiceDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastInvoiceDate;
end;

procedure TCustomerProperties.Set_LastInvoiceDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastInvoiceDate(Param1);
end;

function TCustomerProperties.Get_LastPaymentAmount: Double;
begin
    Result := DefaultInterface.LastPaymentAmount;
end;

procedure TCustomerProperties.Set_LastPaymentAmount(Param1: Double);
begin
  DefaultInterface.Set_LastPaymentAmount(Param1);
end;

function TCustomerProperties.Get_LastPaymentDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastPaymentDate;
end;

procedure TCustomerProperties.Set_LastPaymentDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastPaymentDate(Param1);
end;

function TCustomerProperties.Get_LastStatementDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastStatementDate;
end;

procedure TCustomerProperties.Set_LastStatementDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastStatementDate(Param1);
end;

function TCustomerProperties.Get_LastUpdateCounter: Integer;
begin
    Result := DefaultInterface.LastUpdateCounter;
end;

procedure TCustomerProperties.Set_LastUpdateCounter(Param1: Integer);
begin
  DefaultInterface.Set_LastUpdateCounter(Param1);
end;

function TCustomerProperties.Get_NetDueDays: Smallint;
begin
    Result := DefaultInterface.NetDueDays;
end;

procedure TCustomerProperties.Set_NetDueDays(Param1: Smallint);
begin
  DefaultInterface.Set_NetDueDays(Param1);
end;

function TCustomerProperties.Get_OpenPONumber: WideString;
begin
    Result := DefaultInterface.OpenPONumber;
end;

procedure TCustomerProperties.Set_OpenPONumber(const Param1: WideString);
begin
  DefaultInterface.Set_OpenPONumber(Param1);
end;

function TCustomerProperties.Get_OurAccount: WideString;
begin
    Result := DefaultInterface.OurAccount;
end;

procedure TCustomerProperties.Set_OurAccount(const Param1: WideString);
begin
  DefaultInterface.Set_OurAccount(Param1);
end;

function TCustomerProperties.Get_PaymentAccount: WideString;
begin
    Result := DefaultInterface.PaymentAccount;
end;

procedure TCustomerProperties.Set_PaymentAccount(const Param1: WideString);
begin
  DefaultInterface.Set_PaymentAccount(Param1);
end;

function TCustomerProperties.Get_PaymentDefaultData: Integer;
begin
    Result := DefaultInterface.PaymentDefaultData;
end;

procedure TCustomerProperties.Set_PaymentDefaultData(Param1: Integer);
begin
  DefaultInterface.Set_PaymentDefaultData(Param1);
end;

function TCustomerProperties.Get_PaymentMethod: WideString;
begin
    Result := DefaultInterface.PaymentMethod;
end;

procedure TCustomerProperties.Set_PaymentMethod(const Param1: WideString);
begin
  DefaultInterface.Set_PaymentMethod(Param1);
end;

function TCustomerProperties.Get_PrepaidTerms: WordBool;
begin
    Result := DefaultInterface.PrepaidTerms;
end;

procedure TCustomerProperties.Set_PrepaidTerms(Param1: WordBool);
begin
  DefaultInterface.Set_PrepaidTerms(Param1);
end;

function TCustomerProperties.Get_PricingLevel: Byte;
begin
    Result := DefaultInterface.PricingLevel;
end;

procedure TCustomerProperties.Set_PricingLevel(Param1: Byte);
begin
  DefaultInterface.Set_PricingLevel(Param1);
end;

function TCustomerProperties.Get_Prospect: WordBool;
begin
    Result := DefaultInterface.Prospect;
end;

procedure TCustomerProperties.Set_Prospect(Param1: WordBool);
begin
  DefaultInterface.Set_Prospect(Param1);
end;

function TCustomerProperties.Get_Receipts(Index: Smallint): Double;
begin
    Result := DefaultInterface.Receipts[Index];
end;

procedure TCustomerProperties.Set_Receipts(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Receipts[Index] := Param2;
end;

function TCustomerProperties.Get_ResaleNumber: WideString;
begin
    Result := DefaultInterface.ResaleNumber;
end;

procedure TCustomerProperties.Set_ResaleNumber(const Param1: WideString);
begin
  DefaultInterface.Set_ResaleNumber(Param1);
end;

function TCustomerProperties.Get_Sales(Index: Smallint): Double;
begin
    Result := DefaultInterface.Sales[Index];
end;

procedure TCustomerProperties.Set_Sales(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Sales[Index] := Param2;
end;

function TCustomerProperties.Get_SalesRepID: WideString;
begin
    Result := DefaultInterface.SalesRepID;
end;

procedure TCustomerProperties.Set_SalesRepID(const Param1: WideString);
begin
  DefaultInterface.Set_SalesRepID(Param1);
end;

function TCustomerProperties.Get_ShipToAddress1(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToAddress1[Index];
end;

procedure TCustomerProperties.Set_ShipToAddress1(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToAddress1(Index,Param2);
end;

function TCustomerProperties.Get_ShipToAddress2(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToAddress2[Index];
end;

procedure TCustomerProperties.Set_ShipToAddress2(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToAddress2(Index,Param2);
end;

function TCustomerProperties.Get_ShipToCity(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToCity[Index];
end;

procedure TCustomerProperties.Set_ShipToCity(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToCity(Index,Param2);
end;

function TCustomerProperties.Get_ShipToCountry(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToCountry[Index];
end;

procedure TCustomerProperties.Set_ShipToCountry(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToCountry(Index,Param2);
end;

function TCustomerProperties.Get_ShipToName(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToName[Index];
end;

procedure TCustomerProperties.Set_ShipToName(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToName(Index,Param2);
end;

function TCustomerProperties.Get_ShipToSalesTaxCode(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToSalesTaxCode[Index];
end;

procedure TCustomerProperties.Set_ShipToSalesTaxCode(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToSalesTaxCode(Index,Param2);
end;

function TCustomerProperties.Get_ShipToState(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToState[Index];
end;

procedure TCustomerProperties.Set_ShipToState(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToState(Index,Param2);
end;

function TCustomerProperties.Get_ShipToZipCode(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ShipToZipCode[Index];
end;

procedure TCustomerProperties.Set_ShipToZipCode(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ShipToZipCode(Index,Param2);
end;

function TCustomerProperties.Get_ShipVia: Byte;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TCustomerProperties.Set_ShipVia(Param1: Byte);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TCustomerProperties.Get_Telephone1: WideString;
begin
    Result := DefaultInterface.Telephone1;
end;

procedure TCustomerProperties.Set_Telephone1(const Param1: WideString);
begin
  DefaultInterface.Set_Telephone1(Param1);
end;

function TCustomerProperties.Get_Telephone2: WideString;
begin
    Result := DefaultInterface.Telephone2;
end;

procedure TCustomerProperties.Set_Telephone2(const Param1: WideString);
begin
  DefaultInterface.Set_Telephone2(Param1);
end;

function TCustomerProperties.Get_Unknown1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown1[Index];
end;

procedure TCustomerProperties.Set_Unknown1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown1[Index] := Param2;
end;

function TCustomerProperties.Get_Unused1: Byte;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TCustomerProperties.Set_Unused1(Param1: Byte);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TCustomerProperties.Get_Unknown2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown2[Index];
end;

procedure TCustomerProperties.Set_Unknown2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown2[Index] := Param2;
end;

function TCustomerProperties.Get_Unknown3: Byte;
begin
    Result := DefaultInterface.Unknown3;
end;

procedure TCustomerProperties.Set_Unknown3(Param1: Byte);
begin
  DefaultInterface.Set_Unknown3(Param1);
end;

function TCustomerProperties.Get_Unknown4: Byte;
begin
    Result := DefaultInterface.Unknown4;
end;

procedure TCustomerProperties.Set_Unknown4(Param1: Byte);
begin
  DefaultInterface.Set_Unknown4(Param1);
end;

function TCustomerProperties.Get_Unused5: Smallint;
begin
    Result := DefaultInterface.Unused5;
end;

procedure TCustomerProperties.Set_Unused5(Param1: Smallint);
begin
  DefaultInterface.Set_Unused5(Param1);
end;

function TCustomerProperties.Get_UseReceiptWindowSettingsNot: Integer;
begin
    Result := DefaultInterface.UseReceiptWindowSettingsNot;
end;

procedure TCustomerProperties.Set_UseReceiptWindowSettingsNot(Param1: Integer);
begin
  DefaultInterface.Set_UseReceiptWindowSettingsNot(Param1);
end;

function TCustomerProperties.Get_UseStandardTerms: WordBool;
begin
    Result := DefaultInterface.UseStandardTerms;
end;

procedure TCustomerProperties.Set_UseStandardTerms(Param1: WordBool);
begin
  DefaultInterface.Set_UseStandardTerms(Param1);
end;

function TCustomerProperties.Get_Web: WideString;
begin
    Result := DefaultInterface.Web;
end;

procedure TCustomerProperties.Set_Web(const Param1: WideString);
begin
  DefaultInterface.Set_Web(Param1);
end;

{$ENDIF}

class function CoAlarm.Create: _Alarm;
begin
  Result := CreateComObject(CLASS_Alarm) as _Alarm;
end;

class function CoAlarm.CreateRemote(const MachineName: string): _Alarm;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Alarm) as _Alarm;
end;

procedure TAlarm.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{03DE53DE-7B42-47E1-B0B6-1CBCE10C94D4}';
    IntfIID:   '{2E8F56F1-7459-4E81-8D84-9A91F3AA5206}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAlarm.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Alarm;
  end;
end;

procedure TAlarm.ConnectTo(svrIntf: _Alarm);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAlarm.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAlarm.GetDefaultInterface: _Alarm;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAlarm.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAlarmProperties.Create(Self);
{$ENDIF}
end;

destructor TAlarm.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAlarm.GetServerProperties: TAlarmProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAlarm.Get_AlarmIndex: Integer;
begin
    Result := DefaultInterface.AlarmIndex;
end;

procedure TAlarm.Set_AlarmIndex(Param1: Integer);
begin
  DefaultInterface.Set_AlarmIndex(Param1);
end;

function TAlarm.Get_AlertIndex: Smallint;
begin
    Result := DefaultInterface.AlertIndex;
end;

procedure TAlarm.Set_AlertIndex(Param1: Smallint);
begin
  DefaultInterface.Set_AlertIndex(Param1);
end;

function TAlarm.Get_ApplyTo: Smallint;
begin
    Result := DefaultInterface.ApplyTo;
end;

procedure TAlarm.Set_ApplyTo(Param1: Smallint);
begin
  DefaultInterface.Set_ApplyTo(Param1);
end;

function TAlarm.Get_ApplyToDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ApplyToDescription[Index];
end;

function TAlarm.Get_FromDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.FromDate;
end;

procedure TAlarm.Set_FromDate(Param1: OleVariant);
begin
  DefaultInterface.Set_FromDate(Param1);
end;

function TAlarm.Get_ID: WideString;
begin
    Result := DefaultInterface.ID;
end;

procedure TAlarm.Set_ID(const Param1: WideString);
begin
  DefaultInterface.Set_ID(Param1);
end;

function TAlarm.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TAlarm.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TAlarm.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TAlarm.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TAlarm.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TAlarm.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TAlarm.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TAlarm.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TAlarm.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TAlarm.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TAlarm.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TAlarm.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TAlarm.Get_ToDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ToDate;
end;

procedure TAlarm.Set_ToDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ToDate(Param1);
end;

function TAlarm.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TAlarm.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TAlarm.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TAlarm.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TAlarm.Get_Unknown: Integer;
begin
    Result := DefaultInterface.Unknown;
end;

procedure TAlarm.Set_Unknown(Param1: Integer);
begin
  DefaultInterface.Set_Unknown(Param1);
end;

function TAlarm.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TAlarm.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TAlarm.GetCustomer(Index: Integer): Smallint;
begin
  Result := DefaultInterface.GetCustomer(Index);
end;

function TAlarm.GetFirst: Smallint;
begin
  Result := DefaultInterface.GetFirst;
end;

function TAlarm.GetItem(Index: Integer): Smallint;
begin
  Result := DefaultInterface.GetItem(Index);
end;

function TAlarm.GetLast: Smallint;
begin
  Result := DefaultInterface.GetLast;
end;

function TAlarm.GetNext: Smallint;
begin
  Result := DefaultInterface.GetNext;
end;

function TAlarm.GetPrevious: Smallint;
begin
  Result := DefaultInterface.GetPrevious;
end;

function TAlarm.GetVendor(Index: Integer): Smallint;
begin
  Result := DefaultInterface.GetVendor(Index);
end;

function TAlarm.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TAlarm.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TAlarm.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TAlarm.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TAlarm.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TAlarm.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TAlarm.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TAlarm.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAlarmProperties.Create(AServer: TAlarm);
begin
  inherited Create;
  FServer := AServer;
end;

function TAlarmProperties.GetDefaultInterface: _Alarm;
begin
  Result := FServer.DefaultInterface;
end;

function TAlarmProperties.Get_AlarmIndex: Integer;
begin
    Result := DefaultInterface.AlarmIndex;
end;

procedure TAlarmProperties.Set_AlarmIndex(Param1: Integer);
begin
  DefaultInterface.Set_AlarmIndex(Param1);
end;

function TAlarmProperties.Get_AlertIndex: Smallint;
begin
    Result := DefaultInterface.AlertIndex;
end;

procedure TAlarmProperties.Set_AlertIndex(Param1: Smallint);
begin
  DefaultInterface.Set_AlertIndex(Param1);
end;

function TAlarmProperties.Get_ApplyTo: Smallint;
begin
    Result := DefaultInterface.ApplyTo;
end;

procedure TAlarmProperties.Set_ApplyTo(Param1: Smallint);
begin
  DefaultInterface.Set_ApplyTo(Param1);
end;

function TAlarmProperties.Get_ApplyToDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ApplyToDescription[Index];
end;

function TAlarmProperties.Get_FromDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.FromDate;
end;

procedure TAlarmProperties.Set_FromDate(Param1: OleVariant);
begin
  DefaultInterface.Set_FromDate(Param1);
end;

function TAlarmProperties.Get_ID: WideString;
begin
    Result := DefaultInterface.ID;
end;

procedure TAlarmProperties.Set_ID(const Param1: WideString);
begin
  DefaultInterface.Set_ID(Param1);
end;

function TAlarmProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TAlarmProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TAlarmProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TAlarmProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TAlarmProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TAlarmProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TAlarmProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TAlarmProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TAlarmProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TAlarmProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TAlarmProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TAlarmProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TAlarmProperties.Get_ToDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ToDate;
end;

procedure TAlarmProperties.Set_ToDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ToDate(Param1);
end;

function TAlarmProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TAlarmProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TAlarmProperties.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TAlarmProperties.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TAlarmProperties.Get_Unknown: Integer;
begin
    Result := DefaultInterface.Unknown;
end;

procedure TAlarmProperties.Set_Unknown(Param1: Integer);
begin
  DefaultInterface.Set_Unknown(Param1);
end;

{$ENDIF}

class function CoSalesTaxCode.Create: _SalesTaxCode;
begin
  Result := CreateComObject(CLASS_SalesTaxCode) as _SalesTaxCode;
end;

class function CoSalesTaxCode.CreateRemote(const MachineName: string): _SalesTaxCode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SalesTaxCode) as _SalesTaxCode;
end;

procedure TSalesTaxCode.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E5A0323F-5459-4749-8FC3-E3DE56C98A60}';
    IntfIID:   '{AC42A55B-321A-4ECE-941E-AB12D47B3662}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSalesTaxCode.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SalesTaxCode;
  end;
end;

procedure TSalesTaxCode.ConnectTo(svrIntf: _SalesTaxCode);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSalesTaxCode.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSalesTaxCode.GetDefaultInterface: _SalesTaxCode;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSalesTaxCode.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSalesTaxCodeProperties.Create(Self);
{$ENDIF}
end;

destructor TSalesTaxCode.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSalesTaxCode.GetServerProperties: TSalesTaxCodeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSalesTaxCode.Get_Authority(Index: Smallint): WideString;
begin
    Result := DefaultInterface.Authority[Index];
end;

procedure TSalesTaxCode.Set_Authority(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_Authority(Index,Param2);
end;

function TSalesTaxCode.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TSalesTaxCode.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TSalesTaxCode.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TSalesTaxCode.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TSalesTaxCode.Get_SalesTaxCode: WideString;
begin
    Result := DefaultInterface.SalesTaxCode;
end;

procedure TSalesTaxCode.Set_SalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_SalesTaxCode(Param1);
end;

function TSalesTaxCode.Get_TaxFreight: WordBool;
begin
    Result := DefaultInterface.TaxFreight;
end;

procedure TSalesTaxCode.Set_TaxFreight(Param1: WordBool);
begin
  DefaultInterface.Set_TaxFreight(Param1);
end;

function TSalesTaxCode.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TSalesTaxCode.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TSalesTaxCode.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TSalesTaxCode.GetEqual(const ID: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(ID);
end;

function TSalesTaxCode.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TSalesTaxCode.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TSalesTaxCode.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TSalesTaxCode.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TSalesTaxCode.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TSalesTaxCode.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TSalesTaxCode.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSalesTaxCodeProperties.Create(AServer: TSalesTaxCode);
begin
  inherited Create;
  FServer := AServer;
end;

function TSalesTaxCodeProperties.GetDefaultInterface: _SalesTaxCode;
begin
  Result := FServer.DefaultInterface;
end;

function TSalesTaxCodeProperties.Get_Authority(Index: Smallint): WideString;
begin
    Result := DefaultInterface.Authority[Index];
end;

procedure TSalesTaxCodeProperties.Set_Authority(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_Authority(Index,Param2);
end;

function TSalesTaxCodeProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TSalesTaxCodeProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TSalesTaxCodeProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TSalesTaxCodeProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TSalesTaxCodeProperties.Get_SalesTaxCode: WideString;
begin
    Result := DefaultInterface.SalesTaxCode;
end;

procedure TSalesTaxCodeProperties.Set_SalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_SalesTaxCode(Param1);
end;

function TSalesTaxCodeProperties.Get_TaxFreight: WordBool;
begin
    Result := DefaultInterface.TaxFreight;
end;

procedure TSalesTaxCodeProperties.Set_TaxFreight(Param1: WordBool);
begin
  DefaultInterface.Set_TaxFreight(Param1);
end;

{$ENDIF}

class function CoEmployee.Create: _Employee;
begin
  Result := CreateComObject(CLASS_Employee) as _Employee;
end;

class function CoEmployee.CreateRemote(const MachineName: string): _Employee;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Employee) as _Employee;
end;

procedure TEmployee.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0196CACD-9606-4ED5-8130-8B848289F214}';
    IntfIID:   '{381C298F-0686-46B2-9188-29F2275757AE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEmployee.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Employee;
  end;
end;

procedure TEmployee.ConnectTo(svrIntf: _Employee);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEmployee.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEmployee.GetDefaultInterface: _Employee;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TEmployee.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TEmployeeProperties.Create(Self);
{$ENDIF}
end;

destructor TEmployee.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TEmployee.GetServerProperties: TEmployeeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TEmployee.Get_AcctDataGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.AcctDataGLAccount[Index];
end;

procedure TEmployee.Set_AcctDataGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_AcctDataGLAccount(Index,Param2);
end;

function TEmployee.Get_AcctDataUseStandard(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.AcctDataUseStandard[Index];
end;

procedure TEmployee.Set_AcctDataUseStandard(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.AcctDataUseStandard[Index] := Param2;
end;

function TEmployee.Get_AdditionalFederalWithholding: Double;
begin
    Result := DefaultInterface.AdditionalFederalWithholding;
end;

procedure TEmployee.Set_AdditionalFederalWithholding(Param1: Double);
begin
  DefaultInterface.Set_AdditionalFederalWithholding(Param1);
end;

function TEmployee.Get_AdditionalLocalWithholding: Double;
begin
    Result := DefaultInterface.AdditionalLocalWithholding;
end;

procedure TEmployee.Set_AdditionalLocalWithholding(Param1: Double);
begin
  DefaultInterface.Set_AdditionalLocalWithholding(Param1);
end;

function TEmployee.Get_AdditionalStateWithholding: Double;
begin
    Result := DefaultInterface.AdditionalStateWithholding;
end;

procedure TEmployee.Set_AdditionalStateWithholding(Param1: Double);
begin
  DefaultInterface.Set_AdditionalStateWithholding(Param1);
end;

function TEmployee.Get_Address1: WideString;
begin
    Result := DefaultInterface.Address1;
end;

procedure TEmployee.Set_Address1(const Param1: WideString);
begin
  DefaultInterface.Set_Address1(Param1);
end;

function TEmployee.Get_Address2: WideString;
begin
    Result := DefaultInterface.Address2;
end;

procedure TEmployee.Set_Address2(const Param1: WideString);
begin
  DefaultInterface.Set_Address2(Param1);
end;

function TEmployee.Get_City: WideString;
begin
    Result := DefaultInterface.City;
end;

procedure TEmployee.Set_City(const Param1: WideString);
begin
  DefaultInterface.Set_City(Param1);
end;

function TEmployee.Get_Country: WideString;
begin
    Result := DefaultInterface.Country;
end;

procedure TEmployee.Set_Country(const Param1: WideString);
begin
  DefaultInterface.Set_Country(Param1);
end;

function TEmployee.Get_CustomField(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomField[Index];
end;

procedure TEmployee.Set_CustomField(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomField(Index,Param2);
end;

function TEmployee.Get_DateHired: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateHired;
end;

procedure TEmployee.Set_DateHired(Param1: OleVariant);
begin
  DefaultInterface.Set_DateHired(Param1);
end;

function TEmployee.Get_DateLastRaise: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateLastRaise;
end;

procedure TEmployee.Set_DateLastRaise(Param1: OleVariant);
begin
  DefaultInterface.Set_DateLastRaise(Param1);
end;

function TEmployee.Get_DateTerminated: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateTerminated;
end;

procedure TEmployee.Set_DateTerminated(Param1: OleVariant);
begin
  DefaultInterface.Set_DateTerminated(Param1);
end;

function TEmployee.Get_Deferred: WordBool;
begin
    Result := DefaultInterface.Deferred;
end;

procedure TEmployee.Set_Deferred(Param1: WordBool);
begin
  DefaultInterface.Set_Deferred(Param1);
end;

function TEmployee.Get_EEAdjust(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.EEAdjust[Index1, Index2];
end;

procedure TEmployee.Set_EEAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
begin
  DefaultInterface.EEAdjust[Index1, Index2] := Param3;
end;

function TEmployee.Get_EEAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.EEAmount[Index];
end;

procedure TEmployee.Set_EEAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.EEAmount[Index] := Param2;
end;

function TEmployee.Get_EECalcName(Index: Smallint): WideString;
begin
    Result := DefaultInterface.EECalcName[Index];
end;

procedure TEmployee.Set_EECalcName(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_EECalcName(Index,Param2);
end;

function TEmployee.Get_EECalcOn(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.EECalcOn[Index];
end;

procedure TEmployee.Set_EECalcOn(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.EECalcOn[Index] := Param2;
end;

function TEmployee.Get_EEGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.EEGLAccount[Index];
end;

procedure TEmployee.Set_EEGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_EEGLAccount(Index,Param2);
end;

function TEmployee.Get_EEUnused(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.EEUnused[Index1, Index2];
end;

procedure TEmployee.Set_EEUnused(Index1: Smallint; Index2: Smallint; Param3: Byte);
begin
  DefaultInterface.EEUnused[Index1, Index2] := Param3;
end;

function TEmployee.Get_EEUseCustom(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.EEUseCustom[Index];
end;

procedure TEmployee.Set_EEUseCustom(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.EEUseCustom[Index] := Param2;
end;

function TEmployee.Get_Email: WideString;
begin
    Result := DefaultInterface.Email;
end;

procedure TEmployee.Set_Email(const Param1: WideString);
begin
  DefaultInterface.Set_Email(Param1);
end;

function TEmployee.Get_ERAdjust(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.ERAdjust[Index1, Index2];
end;

procedure TEmployee.Set_ERAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
begin
  DefaultInterface.ERAdjust[Index1, Index2] := Param3;
end;

function TEmployee.Get_ERCalcName(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERCalcName[Index];
end;

procedure TEmployee.Set_ERCalcName(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ERCalcName(Index,Param2);
end;

function TEmployee.Get_ERCalcOn(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.ERCalcOn[Index];
end;

procedure TEmployee.Set_ERCalcOn(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.ERCalcOn[Index] := Param2;
end;

function TEmployee.Get_ERExpenseAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERExpenseAccount[Index];
end;

procedure TEmployee.Set_ERExpenseAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ERExpenseAccount(Index,Param2);
end;

function TEmployee.Get_ERLiabilityAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERLiabilityAccount[Index];
end;

procedure TEmployee.Set_ERLiabilityAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ERLiabilityAccount(Index,Param2);
end;

function TEmployee.Get_ERUseCustom(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.ERUseCustom[Index];
end;

procedure TEmployee.Set_ERUseCustom(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.ERUseCustom[Index] := Param2;
end;

function TEmployee.Get_IsEmployee: WordBool;
begin
    Result := DefaultInterface.IsEmployee;
end;

procedure TEmployee.Set_IsEmployee(Param1: WordBool);
begin
  DefaultInterface.Set_IsEmployee(Param1);
end;

function TEmployee.Get_EmployeeID: WideString;
begin
    Result := DefaultInterface.EmployeeID;
end;

procedure TEmployee.Set_EmployeeID(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeID(Param1);
end;

function TEmployee.Get_EmployeeFirstName: WideString;
begin
    Result := DefaultInterface.EmployeeFirstName;
end;

procedure TEmployee.Set_EmployeeFirstName(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeFirstName(Param1);
end;

function TEmployee.Get_EmployeeLastName: WideString;
begin
    Result := DefaultInterface.EmployeeLastName;
end;

procedure TEmployee.Set_EmployeeLastName(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeLastName(Param1);
end;

function TEmployee.Get_EmployeeMiddleInit: WideString;
begin
    Result := DefaultInterface.EmployeeMiddleInit;
end;

procedure TEmployee.Set_EmployeeMiddleInit(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeMiddleInit(Param1);
end;

function TEmployee.Get_EmployeeName: WideString;
begin
    Result := DefaultInterface.EmployeeName;
end;

procedure TEmployee.Set_EmployeeName(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeName(Param1);
end;

function TEmployee.Get_EmployeeType: WideString;
begin
    Result := DefaultInterface.EmployeeType;
end;

procedure TEmployee.Set_EmployeeType(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeType(Param1);
end;

function TEmployee.Get_eTimeBadgeNum: WideString;
begin
    Result := DefaultInterface.eTimeBadgeNum;
end;

procedure TEmployee.Set_eTimeBadgeNum(const Param1: WideString);
begin
  DefaultInterface.Set_eTimeBadgeNum(Param1);
end;

function TEmployee.Get_eTimeDept: WideString;
begin
    Result := DefaultInterface.eTimeDept;
end;

procedure TEmployee.Set_eTimeDept(const Param1: WideString);
begin
  DefaultInterface.Set_eTimeDept(Param1);
end;

function TEmployee.Get_eTimeEmpID: WideString;
begin
    Result := DefaultInterface.eTimeEmpID;
end;

procedure TEmployee.Set_eTimeEmpID(const Param1: WideString);
begin
  DefaultInterface.Set_eTimeEmpID(Param1);
end;

function TEmployee.Get_eTimeHomeTimeClock: WideString;
begin
    Result := DefaultInterface.eTimeHomeTimeClock;
end;

procedure TEmployee.Set_eTimeHomeTimeClock(const Param1: WideString);
begin
  DefaultInterface.Set_eTimeHomeTimeClock(Param1);
end;

function TEmployee.Get_eTimePayClass: WideString;
begin
    Result := DefaultInterface.eTimePayClass;
end;

procedure TEmployee.Set_eTimePayClass(const Param1: WideString);
begin
  DefaultInterface.Set_eTimePayClass(Param1);
end;

function TEmployee.Get_eTimeProfile: WideString;
begin
    Result := DefaultInterface.eTimeProfile;
end;

procedure TEmployee.Set_eTimeProfile(const Param1: WideString);
begin
  DefaultInterface.Set_eTimeProfile(Param1);
end;

function TEmployee.Get_Extra401k: Double;
begin
    Result := DefaultInterface.Extra401k;
end;

procedure TEmployee.Set_Extra401k(Param1: Double);
begin
  DefaultInterface.Set_Extra401k(Param1);
end;

function TEmployee.Get_ExtraSpecial1: Double;
begin
    Result := DefaultInterface.ExtraSpecial1;
end;

procedure TEmployee.Set_ExtraSpecial1(Param1: Double);
begin
  DefaultInterface.Set_ExtraSpecial1(Param1);
end;

function TEmployee.Get_ExtraSpecial2: Double;
begin
    Result := DefaultInterface.ExtraSpecial2;
end;

procedure TEmployee.Set_ExtraSpecial2(Param1: Double);
begin
  DefaultInterface.Set_ExtraSpecial2(Param1);
end;

function TEmployee.Get_FederalAllowances: Smallint;
begin
    Result := DefaultInterface.FederalAllowances;
end;

procedure TEmployee.Set_FederalAllowances(Param1: Smallint);
begin
  DefaultInterface.Set_FederalAllowances(Param1);
end;

function TEmployee.Get_FederalFilingStatus: Smallint;
begin
    Result := DefaultInterface.FederalFilingStatus;
end;

procedure TEmployee.Set_FederalFilingStatus(Param1: Smallint);
begin
  DefaultInterface.Set_FederalFilingStatus(Param1);
end;

function TEmployee.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TEmployee.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TEmployee.Get_HourlyBillingRate: Double;
begin
    Result := DefaultInterface.HourlyBillingRate;
end;

procedure TEmployee.Set_HourlyBillingRate(Param1: Double);
begin
  DefaultInterface.Set_HourlyBillingRate(Param1);
end;

function TEmployee.Get_HoursPerPayPeriod: Double;
begin
    Result := DefaultInterface.HoursPerPayPeriod;
end;

procedure TEmployee.Set_HoursPerPayPeriod(Param1: Double);
begin
  DefaultInterface.Set_HoursPerPayPeriod(Param1);
end;

function TEmployee.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TEmployee.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TEmployee.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TEmployee.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TEmployee.Get_LocalAllowances: Smallint;
begin
    Result := DefaultInterface.LocalAllowances;
end;

procedure TEmployee.Set_LocalAllowances(Param1: Smallint);
begin
  DefaultInterface.Set_LocalAllowances(Param1);
end;

function TEmployee.Get_LocalFilingStatus: Smallint;
begin
    Result := DefaultInterface.LocalFilingStatus;
end;

procedure TEmployee.Set_LocalFilingStatus(Param1: Smallint);
begin
  DefaultInterface.Set_LocalFilingStatus(Param1);
end;

function TEmployee.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TEmployee.Set_Name(const Param1: WideString);
begin
  DefaultInterface.Set_Name(Param1);
end;

function TEmployee.Get_PayFrequency: Byte;
begin
    Result := DefaultInterface.PayFrequency;
end;

procedure TEmployee.Set_PayFrequency(Param1: Byte);
begin
  DefaultInterface.Set_PayFrequency(Param1);
end;

function TEmployee.Get_PayMethod: Smallint;
begin
    Result := DefaultInterface.PayMethod;
end;

procedure TEmployee.Set_PayMethod(Param1: Smallint);
begin
  DefaultInterface.Set_PayMethod(Param1);
end;

function TEmployee.Get_PayRateAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.PayRateAmount[Index];
end;

procedure TEmployee.Set_PayRateAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PayRateAmount[Index] := Param2;
end;

function TEmployee.Get_PayrollEE(Quarter: Smallint; Index: Smallint): Double;
begin
    Result := DefaultInterface.PayrollEE[Quarter, Index];
end;

procedure TEmployee.Set_PayrollEE(Quarter: Smallint; Index: Smallint; Param3: Double);
begin
  DefaultInterface.PayrollEE[Quarter, Index] := Param3;
end;

function TEmployee.Get_PayrollER(Quarter: Smallint; Index: Smallint): Double;
begin
    Result := DefaultInterface.PayrollER[Quarter, Index];
end;

procedure TEmployee.Set_PayrollER(Quarter: Smallint; Index: Smallint; Param3: Double);
begin
  DefaultInterface.PayrollER[Quarter, Index] := Param3;
end;

function TEmployee.Get_PayrollHoursLevel(Quarter: Smallint; Index: Smallint): Double;
begin
    Result := DefaultInterface.PayrollHoursLevel[Quarter, Index];
end;

procedure TEmployee.Set_PayrollHoursLevel(Quarter: Smallint; Index: Smallint; Param3: Double);
begin
  DefaultInterface.PayrollHoursLevel[Quarter, Index] := Param3;
end;

function TEmployee.Get_PayrollPayLevel(Quarter: Smallint; Index: Smallint): Double;
begin
    Result := DefaultInterface.PayrollPayLevel[Quarter, Index];
end;

procedure TEmployee.Set_PayrollPayLevel(Quarter: Smallint; Index: Smallint; Param3: Double);
begin
  DefaultInterface.PayrollPayLevel[Quarter, Index] := Param3;
end;

function TEmployee.Get_PayrollUnused(Quarter: Smallint): Double;
begin
    Result := DefaultInterface.PayrollUnused[Quarter];
end;

procedure TEmployee.Set_PayrollUnused(Quarter: Smallint; Param2: Double);
begin
  DefaultInterface.PayrollUnused[Quarter] := Param2;
end;

function TEmployee.Get_PayrollWeeks(Quarter: Smallint): Smallint;
begin
    Result := DefaultInterface.PayrollWeeks[Quarter];
end;

procedure TEmployee.Set_PayrollWeeks(Quarter: Smallint; Param2: Smallint);
begin
  DefaultInterface.PayrollWeeks[Quarter] := Param2;
end;

function TEmployee.Get_PayType: Byte;
begin
    Result := DefaultInterface.PayType;
end;

procedure TEmployee.Set_PayType(Param1: Byte);
begin
  DefaultInterface.Set_PayType(Param1);
end;

function TEmployee.Get_Pension: WordBool;
begin
    Result := DefaultInterface.Pension;
end;

procedure TEmployee.Set_Pension(Param1: WordBool);
begin
  DefaultInterface.Set_Pension(Param1);
end;

function TEmployee.Get_PrevHoursLevel(Index: Smallint): Double;
begin
    Result := DefaultInterface.PrevHoursLevel[Index];
end;

procedure TEmployee.Set_PrevHoursLevel(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PrevHoursLevel[Index] := Param2;
end;

function TEmployee.Get_PrevPayLevel(Index: Smallint): Double;
begin
    Result := DefaultInterface.PrevPayLevel[Index];
end;

procedure TEmployee.Set_PrevPayLevel(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PrevPayLevel[Index] := Param2;
end;

function TEmployee.Get_PreviousYearsEE(Index: Smallint): Double;
begin
    Result := DefaultInterface.PreviousYearsEE[Index];
end;

procedure TEmployee.Set_PreviousYearsEE(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PreviousYearsEE[Index] := Param2;
end;

function TEmployee.Get_PreviousYearsER(Index: Smallint): Double;
begin
    Result := DefaultInterface.PreviousYearsER[Index];
end;

procedure TEmployee.Set_PreviousYearsER(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PreviousYearsER[Index] := Param2;
end;

function TEmployee.Get_PrevUnused: Double;
begin
    Result := DefaultInterface.PrevUnused;
end;

procedure TEmployee.Set_PrevUnused(Param1: Double);
begin
  DefaultInterface.Set_PrevUnused(Param1);
end;

function TEmployee.Get_PrevWeeks: Smallint;
begin
    Result := DefaultInterface.PrevWeeks;
end;

procedure TEmployee.Set_PrevWeeks(Param1: Smallint);
begin
  DefaultInterface.Set_PrevWeeks(Param1);
end;

function TEmployee.Get_SalesRep: WordBool;
begin
    Result := DefaultInterface.SalesRep;
end;

procedure TEmployee.Set_SalesRep(Param1: WordBool);
begin
  DefaultInterface.Set_SalesRep(Param1);
end;

function TEmployee.Get_SocialSecurityNumber: WideString;
begin
    Result := DefaultInterface.SocialSecurityNumber;
end;

procedure TEmployee.Set_SocialSecurityNumber(const Param1: WideString);
begin
  DefaultInterface.Set_SocialSecurityNumber(Param1);
end;

function TEmployee.Get_SpecialAllowance1: Smallint;
begin
    Result := DefaultInterface.SpecialAllowance1;
end;

procedure TEmployee.Set_SpecialAllowance1(Param1: Smallint);
begin
  DefaultInterface.Set_SpecialAllowance1(Param1);
end;

function TEmployee.Get_SpecialAllowance2: Smallint;
begin
    Result := DefaultInterface.SpecialAllowance2;
end;

procedure TEmployee.Set_SpecialAllowance2(Param1: Smallint);
begin
  DefaultInterface.Set_SpecialAllowance2(Param1);
end;

function TEmployee.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TEmployee.Set_State(const Param1: WideString);
begin
  DefaultInterface.Set_State(Param1);
end;

function TEmployee.Get_StateAllowances: Smallint;
begin
    Result := DefaultInterface.StateAllowances;
end;

procedure TEmployee.Set_StateAllowances(Param1: Smallint);
begin
  DefaultInterface.Set_StateAllowances(Param1);
end;

function TEmployee.Get_StateFilingStatus: Smallint;
begin
    Result := DefaultInterface.StateFilingStatus;
end;

procedure TEmployee.Set_StateFilingStatus(Param1: Smallint);
begin
  DefaultInterface.Set_StateFilingStatus(Param1);
end;

function TEmployee.Get_Telephone: WideString;
begin
    Result := DefaultInterface.Telephone;
end;

procedure TEmployee.Set_Telephone(const Param1: WideString);
begin
  DefaultInterface.Set_Telephone(Param1);
end;

function TEmployee.Get_Unused0(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused0[Index];
end;

procedure TEmployee.Set_Unused0(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused0[Index] := Param2;
end;

function TEmployee.Get_Unused1: Byte;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TEmployee.Set_Unused1(Param1: Byte);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TEmployee.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TEmployee.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TEmployee.Get_Unused3: Byte;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TEmployee.Set_Unused3(Param1: Byte);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TEmployee.Get_Unused4(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused4[Index];
end;

procedure TEmployee.Set_Unused4(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused4[Index] := Param2;
end;

function TEmployee.Get_Unknown5: Byte;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TEmployee.Set_Unknown5(Param1: Byte);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

function TEmployee.Get_Unknown6: Byte;
begin
    Result := DefaultInterface.Unknown6;
end;

procedure TEmployee.Set_Unknown6(Param1: Byte);
begin
  DefaultInterface.Set_Unknown6(Param1);
end;

function TEmployee.Get_Unused7: Byte;
begin
    Result := DefaultInterface.Unused7;
end;

procedure TEmployee.Set_Unused7(Param1: Byte);
begin
  DefaultInterface.Set_Unused7(Param1);
end;

function TEmployee.Get_Unknown8(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown8[Index];
end;

procedure TEmployee.Set_Unknown8(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown8[Index] := Param2;
end;

function TEmployee.Get_W2IDLocal: WideString;
begin
    Result := DefaultInterface.W2IDLocal;
end;

procedure TEmployee.Set_W2IDLocal(const Param1: WideString);
begin
  DefaultInterface.Set_W2IDLocal(Param1);
end;

function TEmployee.Get_W2IDState: WideString;
begin
    Result := DefaultInterface.W2IDState;
end;

procedure TEmployee.Set_W2IDState(const Param1: WideString);
begin
  DefaultInterface.Set_W2IDState(Param1);
end;

function TEmployee.Get_Zipcode: WideString;
begin
    Result := DefaultInterface.Zipcode;
end;

procedure TEmployee.Set_Zipcode(const Param1: WideString);
begin
  DefaultInterface.Set_Zipcode(Param1);
end;

function TEmployee.CacheCharts(Flag: WordBool): Smallint;
begin
  Result := DefaultInterface.CacheCharts(Flag);
end;

function TEmployee.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TEmployee.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TEmployee.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TEmployee.GetEqual(const EmployeeID: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(EmployeeID);
end;

function TEmployee.GetForIndex(Index: Integer): Smallint;
begin
  Result := DefaultInterface.GetForIndex(Index);
end;

function TEmployee.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TEmployee.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TEmployee.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TEmployee.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TEmployee.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TEmployee.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TEmployee.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TEmployeeProperties.Create(AServer: TEmployee);
begin
  inherited Create;
  FServer := AServer;
end;

function TEmployeeProperties.GetDefaultInterface: _Employee;
begin
  Result := FServer.DefaultInterface;
end;

function TEmployeeProperties.Get_AcctDataGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.AcctDataGLAccount[Index];
end;

procedure TEmployeeProperties.Set_AcctDataGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_AcctDataGLAccount(Index,Param2);
end;

function TEmployeeProperties.Get_AcctDataUseStandard(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.AcctDataUseStandard[Index];
end;

procedure TEmployeeProperties.Set_AcctDataUseStandard(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.AcctDataUseStandard[Index] := Param2;
end;

function TEmployeeProperties.Get_AdditionalFederalWithholding: Double;
begin
    Result := DefaultInterface.AdditionalFederalWithholding;
end;

procedure TEmployeeProperties.Set_AdditionalFederalWithholding(Param1: Double);
begin
  DefaultInterface.Set_AdditionalFederalWithholding(Param1);
end;

function TEmployeeProperties.Get_AdditionalLocalWithholding: Double;
begin
    Result := DefaultInterface.AdditionalLocalWithholding;
end;

procedure TEmployeeProperties.Set_AdditionalLocalWithholding(Param1: Double);
begin
  DefaultInterface.Set_AdditionalLocalWithholding(Param1);
end;

function TEmployeeProperties.Get_AdditionalStateWithholding: Double;
begin
    Result := DefaultInterface.AdditionalStateWithholding;
end;

procedure TEmployeeProperties.Set_AdditionalStateWithholding(Param1: Double);
begin
  DefaultInterface.Set_AdditionalStateWithholding(Param1);
end;

function TEmployeeProperties.Get_Address1: WideString;
begin
    Result := DefaultInterface.Address1;
end;

procedure TEmployeeProperties.Set_Address1(const Param1: WideString);
begin
  DefaultInterface.Set_Address1(Param1);
end;

function TEmployeeProperties.Get_Address2: WideString;
begin
    Result := DefaultInterface.Address2;
end;

procedure TEmployeeProperties.Set_Address2(const Param1: WideString);
begin
  DefaultInterface.Set_Address2(Param1);
end;

function TEmployeeProperties.Get_City: WideString;
begin
    Result := DefaultInterface.City;
end;

procedure TEmployeeProperties.Set_City(const Param1: WideString);
begin
  DefaultInterface.Set_City(Param1);
end;

function TEmployeeProperties.Get_Country: WideString;
begin
    Result := DefaultInterface.Country;
end;

procedure TEmployeeProperties.Set_Country(const Param1: WideString);
begin
  DefaultInterface.Set_Country(Param1);
end;

function TEmployeeProperties.Get_CustomField(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomField[Index];
end;

procedure TEmployeeProperties.Set_CustomField(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomField(Index,Param2);
end;

function TEmployeeProperties.Get_DateHired: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateHired;
end;

procedure TEmployeeProperties.Set_DateHired(Param1: OleVariant);
begin
  DefaultInterface.Set_DateHired(Param1);
end;

function TEmployeeProperties.Get_DateLastRaise: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateLastRaise;
end;

procedure TEmployeeProperties.Set_DateLastRaise(Param1: OleVariant);
begin
  DefaultInterface.Set_DateLastRaise(Param1);
end;

function TEmployeeProperties.Get_DateTerminated: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateTerminated;
end;

procedure TEmployeeProperties.Set_DateTerminated(Param1: OleVariant);
begin
  DefaultInterface.Set_DateTerminated(Param1);
end;

function TEmployeeProperties.Get_Deferred: WordBool;
begin
    Result := DefaultInterface.Deferred;
end;

procedure TEmployeeProperties.Set_Deferred(Param1: WordBool);
begin
  DefaultInterface.Set_Deferred(Param1);
end;

function TEmployeeProperties.Get_EEAdjust(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.EEAdjust[Index1, Index2];
end;

procedure TEmployeeProperties.Set_EEAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
begin
  DefaultInterface.EEAdjust[Index1, Index2] := Param3;
end;

function TEmployeeProperties.Get_EEAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.EEAmount[Index];
end;

procedure TEmployeeProperties.Set_EEAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.EEAmount[Index] := Param2;
end;

function TEmployeeProperties.Get_EECalcName(Index: Smallint): WideString;
begin
    Result := DefaultInterface.EECalcName[Index];
end;

procedure TEmployeeProperties.Set_EECalcName(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_EECalcName(Index,Param2);
end;

function TEmployeeProperties.Get_EECalcOn(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.EECalcOn[Index];
end;

procedure TEmployeeProperties.Set_EECalcOn(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.EECalcOn[Index] := Param2;
end;

function TEmployeeProperties.Get_EEGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.EEGLAccount[Index];
end;

procedure TEmployeeProperties.Set_EEGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_EEGLAccount(Index,Param2);
end;

function TEmployeeProperties.Get_EEUnused(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.EEUnused[Index1, Index2];
end;

procedure TEmployeeProperties.Set_EEUnused(Index1: Smallint; Index2: Smallint; Param3: Byte);
begin
  DefaultInterface.EEUnused[Index1, Index2] := Param3;
end;

function TEmployeeProperties.Get_EEUseCustom(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.EEUseCustom[Index];
end;

procedure TEmployeeProperties.Set_EEUseCustom(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.EEUseCustom[Index] := Param2;
end;

function TEmployeeProperties.Get_Email: WideString;
begin
    Result := DefaultInterface.Email;
end;

procedure TEmployeeProperties.Set_Email(const Param1: WideString);
begin
  DefaultInterface.Set_Email(Param1);
end;

function TEmployeeProperties.Get_ERAdjust(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.ERAdjust[Index1, Index2];
end;

procedure TEmployeeProperties.Set_ERAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
begin
  DefaultInterface.ERAdjust[Index1, Index2] := Param3;
end;

function TEmployeeProperties.Get_ERCalcName(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERCalcName[Index];
end;

procedure TEmployeeProperties.Set_ERCalcName(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ERCalcName(Index,Param2);
end;

function TEmployeeProperties.Get_ERCalcOn(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.ERCalcOn[Index];
end;

procedure TEmployeeProperties.Set_ERCalcOn(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.ERCalcOn[Index] := Param2;
end;

function TEmployeeProperties.Get_ERExpenseAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERExpenseAccount[Index];
end;

procedure TEmployeeProperties.Set_ERExpenseAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ERExpenseAccount(Index,Param2);
end;

function TEmployeeProperties.Get_ERLiabilityAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERLiabilityAccount[Index];
end;

procedure TEmployeeProperties.Set_ERLiabilityAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ERLiabilityAccount(Index,Param2);
end;

function TEmployeeProperties.Get_ERUseCustom(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.ERUseCustom[Index];
end;

procedure TEmployeeProperties.Set_ERUseCustom(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.ERUseCustom[Index] := Param2;
end;

function TEmployeeProperties.Get_IsEmployee: WordBool;
begin
    Result := DefaultInterface.IsEmployee;
end;

procedure TEmployeeProperties.Set_IsEmployee(Param1: WordBool);
begin
  DefaultInterface.Set_IsEmployee(Param1);
end;

function TEmployeeProperties.Get_EmployeeID: WideString;
begin
    Result := DefaultInterface.EmployeeID;
end;

procedure TEmployeeProperties.Set_EmployeeID(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeID(Param1);
end;

function TEmployeeProperties.Get_EmployeeFirstName: WideString;
begin
    Result := DefaultInterface.EmployeeFirstName;
end;

procedure TEmployeeProperties.Set_EmployeeFirstName(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeFirstName(Param1);
end;

function TEmployeeProperties.Get_EmployeeLastName: WideString;
begin
    Result := DefaultInterface.EmployeeLastName;
end;

procedure TEmployeeProperties.Set_EmployeeLastName(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeLastName(Param1);
end;

function TEmployeeProperties.Get_EmployeeMiddleInit: WideString;
begin
    Result := DefaultInterface.EmployeeMiddleInit;
end;

procedure TEmployeeProperties.Set_EmployeeMiddleInit(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeMiddleInit(Param1);
end;

function TEmployeeProperties.Get_EmployeeName: WideString;
begin
    Result := DefaultInterface.EmployeeName;
end;

procedure TEmployeeProperties.Set_EmployeeName(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeName(Param1);
end;

function TEmployeeProperties.Get_EmployeeType: WideString;
begin
    Result := DefaultInterface.EmployeeType;
end;

procedure TEmployeeProperties.Set_EmployeeType(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeType(Param1);
end;

function TEmployeeProperties.Get_eTimeBadgeNum: WideString;
begin
    Result := DefaultInterface.eTimeBadgeNum;
end;

procedure TEmployeeProperties.Set_eTimeBadgeNum(const Param1: WideString);
begin
  DefaultInterface.Set_eTimeBadgeNum(Param1);
end;

function TEmployeeProperties.Get_eTimeDept: WideString;
begin
    Result := DefaultInterface.eTimeDept;
end;

procedure TEmployeeProperties.Set_eTimeDept(const Param1: WideString);
begin
  DefaultInterface.Set_eTimeDept(Param1);
end;

function TEmployeeProperties.Get_eTimeEmpID: WideString;
begin
    Result := DefaultInterface.eTimeEmpID;
end;

procedure TEmployeeProperties.Set_eTimeEmpID(const Param1: WideString);
begin
  DefaultInterface.Set_eTimeEmpID(Param1);
end;

function TEmployeeProperties.Get_eTimeHomeTimeClock: WideString;
begin
    Result := DefaultInterface.eTimeHomeTimeClock;
end;

procedure TEmployeeProperties.Set_eTimeHomeTimeClock(const Param1: WideString);
begin
  DefaultInterface.Set_eTimeHomeTimeClock(Param1);
end;

function TEmployeeProperties.Get_eTimePayClass: WideString;
begin
    Result := DefaultInterface.eTimePayClass;
end;

procedure TEmployeeProperties.Set_eTimePayClass(const Param1: WideString);
begin
  DefaultInterface.Set_eTimePayClass(Param1);
end;

function TEmployeeProperties.Get_eTimeProfile: WideString;
begin
    Result := DefaultInterface.eTimeProfile;
end;

procedure TEmployeeProperties.Set_eTimeProfile(const Param1: WideString);
begin
  DefaultInterface.Set_eTimeProfile(Param1);
end;

function TEmployeeProperties.Get_Extra401k: Double;
begin
    Result := DefaultInterface.Extra401k;
end;

procedure TEmployeeProperties.Set_Extra401k(Param1: Double);
begin
  DefaultInterface.Set_Extra401k(Param1);
end;

function TEmployeeProperties.Get_ExtraSpecial1: Double;
begin
    Result := DefaultInterface.ExtraSpecial1;
end;

procedure TEmployeeProperties.Set_ExtraSpecial1(Param1: Double);
begin
  DefaultInterface.Set_ExtraSpecial1(Param1);
end;

function TEmployeeProperties.Get_ExtraSpecial2: Double;
begin
    Result := DefaultInterface.ExtraSpecial2;
end;

procedure TEmployeeProperties.Set_ExtraSpecial2(Param1: Double);
begin
  DefaultInterface.Set_ExtraSpecial2(Param1);
end;

function TEmployeeProperties.Get_FederalAllowances: Smallint;
begin
    Result := DefaultInterface.FederalAllowances;
end;

procedure TEmployeeProperties.Set_FederalAllowances(Param1: Smallint);
begin
  DefaultInterface.Set_FederalAllowances(Param1);
end;

function TEmployeeProperties.Get_FederalFilingStatus: Smallint;
begin
    Result := DefaultInterface.FederalFilingStatus;
end;

procedure TEmployeeProperties.Set_FederalFilingStatus(Param1: Smallint);
begin
  DefaultInterface.Set_FederalFilingStatus(Param1);
end;

function TEmployeeProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TEmployeeProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TEmployeeProperties.Get_HourlyBillingRate: Double;
begin
    Result := DefaultInterface.HourlyBillingRate;
end;

procedure TEmployeeProperties.Set_HourlyBillingRate(Param1: Double);
begin
  DefaultInterface.Set_HourlyBillingRate(Param1);
end;

function TEmployeeProperties.Get_HoursPerPayPeriod: Double;
begin
    Result := DefaultInterface.HoursPerPayPeriod;
end;

procedure TEmployeeProperties.Set_HoursPerPayPeriod(Param1: Double);
begin
  DefaultInterface.Set_HoursPerPayPeriod(Param1);
end;

function TEmployeeProperties.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TEmployeeProperties.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TEmployeeProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TEmployeeProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TEmployeeProperties.Get_LocalAllowances: Smallint;
begin
    Result := DefaultInterface.LocalAllowances;
end;

procedure TEmployeeProperties.Set_LocalAllowances(Param1: Smallint);
begin
  DefaultInterface.Set_LocalAllowances(Param1);
end;

function TEmployeeProperties.Get_LocalFilingStatus: Smallint;
begin
    Result := DefaultInterface.LocalFilingStatus;
end;

procedure TEmployeeProperties.Set_LocalFilingStatus(Param1: Smallint);
begin
  DefaultInterface.Set_LocalFilingStatus(Param1);
end;

function TEmployeeProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TEmployeeProperties.Set_Name(const Param1: WideString);
begin
  DefaultInterface.Set_Name(Param1);
end;

function TEmployeeProperties.Get_PayFrequency: Byte;
begin
    Result := DefaultInterface.PayFrequency;
end;

procedure TEmployeeProperties.Set_PayFrequency(Param1: Byte);
begin
  DefaultInterface.Set_PayFrequency(Param1);
end;

function TEmployeeProperties.Get_PayMethod: Smallint;
begin
    Result := DefaultInterface.PayMethod;
end;

procedure TEmployeeProperties.Set_PayMethod(Param1: Smallint);
begin
  DefaultInterface.Set_PayMethod(Param1);
end;

function TEmployeeProperties.Get_PayRateAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.PayRateAmount[Index];
end;

procedure TEmployeeProperties.Set_PayRateAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PayRateAmount[Index] := Param2;
end;

function TEmployeeProperties.Get_PayrollEE(Quarter: Smallint; Index: Smallint): Double;
begin
    Result := DefaultInterface.PayrollEE[Quarter, Index];
end;

procedure TEmployeeProperties.Set_PayrollEE(Quarter: Smallint; Index: Smallint; Param3: Double);
begin
  DefaultInterface.PayrollEE[Quarter, Index] := Param3;
end;

function TEmployeeProperties.Get_PayrollER(Quarter: Smallint; Index: Smallint): Double;
begin
    Result := DefaultInterface.PayrollER[Quarter, Index];
end;

procedure TEmployeeProperties.Set_PayrollER(Quarter: Smallint; Index: Smallint; Param3: Double);
begin
  DefaultInterface.PayrollER[Quarter, Index] := Param3;
end;

function TEmployeeProperties.Get_PayrollHoursLevel(Quarter: Smallint; Index: Smallint): Double;
begin
    Result := DefaultInterface.PayrollHoursLevel[Quarter, Index];
end;

procedure TEmployeeProperties.Set_PayrollHoursLevel(Quarter: Smallint; Index: Smallint; 
                                                    Param3: Double);
begin
  DefaultInterface.PayrollHoursLevel[Quarter, Index] := Param3;
end;

function TEmployeeProperties.Get_PayrollPayLevel(Quarter: Smallint; Index: Smallint): Double;
begin
    Result := DefaultInterface.PayrollPayLevel[Quarter, Index];
end;

procedure TEmployeeProperties.Set_PayrollPayLevel(Quarter: Smallint; Index: Smallint; Param3: Double);
begin
  DefaultInterface.PayrollPayLevel[Quarter, Index] := Param3;
end;

function TEmployeeProperties.Get_PayrollUnused(Quarter: Smallint): Double;
begin
    Result := DefaultInterface.PayrollUnused[Quarter];
end;

procedure TEmployeeProperties.Set_PayrollUnused(Quarter: Smallint; Param2: Double);
begin
  DefaultInterface.PayrollUnused[Quarter] := Param2;
end;

function TEmployeeProperties.Get_PayrollWeeks(Quarter: Smallint): Smallint;
begin
    Result := DefaultInterface.PayrollWeeks[Quarter];
end;

procedure TEmployeeProperties.Set_PayrollWeeks(Quarter: Smallint; Param2: Smallint);
begin
  DefaultInterface.PayrollWeeks[Quarter] := Param2;
end;

function TEmployeeProperties.Get_PayType: Byte;
begin
    Result := DefaultInterface.PayType;
end;

procedure TEmployeeProperties.Set_PayType(Param1: Byte);
begin
  DefaultInterface.Set_PayType(Param1);
end;

function TEmployeeProperties.Get_Pension: WordBool;
begin
    Result := DefaultInterface.Pension;
end;

procedure TEmployeeProperties.Set_Pension(Param1: WordBool);
begin
  DefaultInterface.Set_Pension(Param1);
end;

function TEmployeeProperties.Get_PrevHoursLevel(Index: Smallint): Double;
begin
    Result := DefaultInterface.PrevHoursLevel[Index];
end;

procedure TEmployeeProperties.Set_PrevHoursLevel(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PrevHoursLevel[Index] := Param2;
end;

function TEmployeeProperties.Get_PrevPayLevel(Index: Smallint): Double;
begin
    Result := DefaultInterface.PrevPayLevel[Index];
end;

procedure TEmployeeProperties.Set_PrevPayLevel(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PrevPayLevel[Index] := Param2;
end;

function TEmployeeProperties.Get_PreviousYearsEE(Index: Smallint): Double;
begin
    Result := DefaultInterface.PreviousYearsEE[Index];
end;

procedure TEmployeeProperties.Set_PreviousYearsEE(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PreviousYearsEE[Index] := Param2;
end;

function TEmployeeProperties.Get_PreviousYearsER(Index: Smallint): Double;
begin
    Result := DefaultInterface.PreviousYearsER[Index];
end;

procedure TEmployeeProperties.Set_PreviousYearsER(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PreviousYearsER[Index] := Param2;
end;

function TEmployeeProperties.Get_PrevUnused: Double;
begin
    Result := DefaultInterface.PrevUnused;
end;

procedure TEmployeeProperties.Set_PrevUnused(Param1: Double);
begin
  DefaultInterface.Set_PrevUnused(Param1);
end;

function TEmployeeProperties.Get_PrevWeeks: Smallint;
begin
    Result := DefaultInterface.PrevWeeks;
end;

procedure TEmployeeProperties.Set_PrevWeeks(Param1: Smallint);
begin
  DefaultInterface.Set_PrevWeeks(Param1);
end;

function TEmployeeProperties.Get_SalesRep: WordBool;
begin
    Result := DefaultInterface.SalesRep;
end;

procedure TEmployeeProperties.Set_SalesRep(Param1: WordBool);
begin
  DefaultInterface.Set_SalesRep(Param1);
end;

function TEmployeeProperties.Get_SocialSecurityNumber: WideString;
begin
    Result := DefaultInterface.SocialSecurityNumber;
end;

procedure TEmployeeProperties.Set_SocialSecurityNumber(const Param1: WideString);
begin
  DefaultInterface.Set_SocialSecurityNumber(Param1);
end;

function TEmployeeProperties.Get_SpecialAllowance1: Smallint;
begin
    Result := DefaultInterface.SpecialAllowance1;
end;

procedure TEmployeeProperties.Set_SpecialAllowance1(Param1: Smallint);
begin
  DefaultInterface.Set_SpecialAllowance1(Param1);
end;

function TEmployeeProperties.Get_SpecialAllowance2: Smallint;
begin
    Result := DefaultInterface.SpecialAllowance2;
end;

procedure TEmployeeProperties.Set_SpecialAllowance2(Param1: Smallint);
begin
  DefaultInterface.Set_SpecialAllowance2(Param1);
end;

function TEmployeeProperties.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TEmployeeProperties.Set_State(const Param1: WideString);
begin
  DefaultInterface.Set_State(Param1);
end;

function TEmployeeProperties.Get_StateAllowances: Smallint;
begin
    Result := DefaultInterface.StateAllowances;
end;

procedure TEmployeeProperties.Set_StateAllowances(Param1: Smallint);
begin
  DefaultInterface.Set_StateAllowances(Param1);
end;

function TEmployeeProperties.Get_StateFilingStatus: Smallint;
begin
    Result := DefaultInterface.StateFilingStatus;
end;

procedure TEmployeeProperties.Set_StateFilingStatus(Param1: Smallint);
begin
  DefaultInterface.Set_StateFilingStatus(Param1);
end;

function TEmployeeProperties.Get_Telephone: WideString;
begin
    Result := DefaultInterface.Telephone;
end;

procedure TEmployeeProperties.Set_Telephone(const Param1: WideString);
begin
  DefaultInterface.Set_Telephone(Param1);
end;

function TEmployeeProperties.Get_Unused0(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused0[Index];
end;

procedure TEmployeeProperties.Set_Unused0(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused0[Index] := Param2;
end;

function TEmployeeProperties.Get_Unused1: Byte;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TEmployeeProperties.Set_Unused1(Param1: Byte);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TEmployeeProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TEmployeeProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TEmployeeProperties.Get_Unused3: Byte;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TEmployeeProperties.Set_Unused3(Param1: Byte);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TEmployeeProperties.Get_Unused4(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused4[Index];
end;

procedure TEmployeeProperties.Set_Unused4(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused4[Index] := Param2;
end;

function TEmployeeProperties.Get_Unknown5: Byte;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TEmployeeProperties.Set_Unknown5(Param1: Byte);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

function TEmployeeProperties.Get_Unknown6: Byte;
begin
    Result := DefaultInterface.Unknown6;
end;

procedure TEmployeeProperties.Set_Unknown6(Param1: Byte);
begin
  DefaultInterface.Set_Unknown6(Param1);
end;

function TEmployeeProperties.Get_Unused7: Byte;
begin
    Result := DefaultInterface.Unused7;
end;

procedure TEmployeeProperties.Set_Unused7(Param1: Byte);
begin
  DefaultInterface.Set_Unused7(Param1);
end;

function TEmployeeProperties.Get_Unknown8(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown8[Index];
end;

procedure TEmployeeProperties.Set_Unknown8(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown8[Index] := Param2;
end;

function TEmployeeProperties.Get_W2IDLocal: WideString;
begin
    Result := DefaultInterface.W2IDLocal;
end;

procedure TEmployeeProperties.Set_W2IDLocal(const Param1: WideString);
begin
  DefaultInterface.Set_W2IDLocal(Param1);
end;

function TEmployeeProperties.Get_W2IDState: WideString;
begin
    Result := DefaultInterface.W2IDState;
end;

procedure TEmployeeProperties.Set_W2IDState(const Param1: WideString);
begin
  DefaultInterface.Set_W2IDState(Param1);
end;

function TEmployeeProperties.Get_Zipcode: WideString;
begin
    Result := DefaultInterface.Zipcode;
end;

procedure TEmployeeProperties.Set_Zipcode(const Param1: WideString);
begin
  DefaultInterface.Set_Zipcode(Param1);
end;

{$ENDIF}

class function CoTaxAuthority.Create: _TaxAuthority;
begin
  Result := CreateComObject(CLASS_TaxAuthority) as _TaxAuthority;
end;

class function CoTaxAuthority.CreateRemote(const MachineName: string): _TaxAuthority;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TaxAuthority) as _TaxAuthority;
end;

procedure TTaxAuthority.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0A2C83E2-BAA3-4CDA-BBFA-A364D084B467}';
    IntfIID:   '{05E5D9BD-5175-4627-8269-ED49AC32D662}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTaxAuthority.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TaxAuthority;
  end;
end;

procedure TTaxAuthority.ConnectTo(svrIntf: _TaxAuthority);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTaxAuthority.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTaxAuthority.GetDefaultInterface: _TaxAuthority;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTaxAuthority.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTaxAuthorityProperties.Create(Self);
{$ENDIF}
end;

destructor TTaxAuthority.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTaxAuthority.GetServerProperties: TTaxAuthorityProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTaxAuthority.Get_Account: WideString;
begin
    Result := DefaultInterface.Account;
end;

procedure TTaxAuthority.Set_Account(const Param1: WideString);
begin
  DefaultInterface.Set_Account(Param1);
end;

function TTaxAuthority.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TTaxAuthority.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TTaxAuthority.Get_ID: WideString;
begin
    Result := DefaultInterface.ID;
end;

procedure TTaxAuthority.Set_ID(const Param1: WideString);
begin
  DefaultInterface.Set_ID(Param1);
end;

function TTaxAuthority.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTaxAuthority.Set_Name(const Param1: WideString);
begin
  DefaultInterface.Set_Name(Param1);
end;

function TTaxAuthority.Get_Rate: Double;
begin
    Result := DefaultInterface.Rate;
end;

procedure TTaxAuthority.Set_Rate(Param1: Double);
begin
  DefaultInterface.Set_Rate(Param1);
end;

function TTaxAuthority.Get_Rate2: Double;
begin
    Result := DefaultInterface.Rate2;
end;

procedure TTaxAuthority.Set_Rate2(Param1: Double);
begin
  DefaultInterface.Set_Rate2(Param1);
end;

function TTaxAuthority.Get_TaxBasis: Integer;
begin
    Result := DefaultInterface.TaxBasis;
end;

procedure TTaxAuthority.Set_TaxBasis(Param1: Integer);
begin
  DefaultInterface.Set_TaxBasis(Param1);
end;

function TTaxAuthority.Get_TaxChangeAt: Double;
begin
    Result := DefaultInterface.TaxChangeAt;
end;

procedure TTaxAuthority.Set_TaxChangeAt(Param1: Double);
begin
  DefaultInterface.Set_TaxChangeAt(Param1);
end;

function TTaxAuthority.Get_TaxUsesFormula: WordBool;
begin
    Result := DefaultInterface.TaxUsesFormula;
end;

procedure TTaxAuthority.Set_TaxUsesFormula(Param1: WordBool);
begin
  DefaultInterface.Set_TaxUsesFormula(Param1);
end;

function TTaxAuthority.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TTaxAuthority.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

function TTaxAuthority.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TTaxAuthority.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TTaxAuthority.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TTaxAuthority.GetEqual(const ID: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(ID);
end;

function TTaxAuthority.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TTaxAuthority.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TTaxAuthority.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TTaxAuthority.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TTaxAuthority.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TTaxAuthority.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TTaxAuthority.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTaxAuthorityProperties.Create(AServer: TTaxAuthority);
begin
  inherited Create;
  FServer := AServer;
end;

function TTaxAuthorityProperties.GetDefaultInterface: _TaxAuthority;
begin
  Result := FServer.DefaultInterface;
end;

function TTaxAuthorityProperties.Get_Account: WideString;
begin
    Result := DefaultInterface.Account;
end;

procedure TTaxAuthorityProperties.Set_Account(const Param1: WideString);
begin
  DefaultInterface.Set_Account(Param1);
end;

function TTaxAuthorityProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TTaxAuthorityProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TTaxAuthorityProperties.Get_ID: WideString;
begin
    Result := DefaultInterface.ID;
end;

procedure TTaxAuthorityProperties.Set_ID(const Param1: WideString);
begin
  DefaultInterface.Set_ID(Param1);
end;

function TTaxAuthorityProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTaxAuthorityProperties.Set_Name(const Param1: WideString);
begin
  DefaultInterface.Set_Name(Param1);
end;

function TTaxAuthorityProperties.Get_Rate: Double;
begin
    Result := DefaultInterface.Rate;
end;

procedure TTaxAuthorityProperties.Set_Rate(Param1: Double);
begin
  DefaultInterface.Set_Rate(Param1);
end;

function TTaxAuthorityProperties.Get_Rate2: Double;
begin
    Result := DefaultInterface.Rate2;
end;

procedure TTaxAuthorityProperties.Set_Rate2(Param1: Double);
begin
  DefaultInterface.Set_Rate2(Param1);
end;

function TTaxAuthorityProperties.Get_TaxBasis: Integer;
begin
    Result := DefaultInterface.TaxBasis;
end;

procedure TTaxAuthorityProperties.Set_TaxBasis(Param1: Integer);
begin
  DefaultInterface.Set_TaxBasis(Param1);
end;

function TTaxAuthorityProperties.Get_TaxChangeAt: Double;
begin
    Result := DefaultInterface.TaxChangeAt;
end;

procedure TTaxAuthorityProperties.Set_TaxChangeAt(Param1: Double);
begin
  DefaultInterface.Set_TaxChangeAt(Param1);
end;

function TTaxAuthorityProperties.Get_TaxUsesFormula: WordBool;
begin
    Result := DefaultInterface.TaxUsesFormula;
end;

procedure TTaxAuthorityProperties.Set_TaxUsesFormula(Param1: WordBool);
begin
  DefaultInterface.Set_TaxUsesFormula(Param1);
end;

function TTaxAuthorityProperties.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TTaxAuthorityProperties.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

{$ENDIF}

class function CoVendor.Create: _Vendor;
begin
  Result := CreateComObject(CLASS_Vendor) as _Vendor;
end;

class function CoVendor.CreateRemote(const MachineName: string): _Vendor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Vendor) as _Vendor;
end;

procedure TVendor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{484BF770-A229-453C-842F-B77FC047AD2F}';
    IntfIID:   '{191C30C5-4808-46F3-97D9-3B14EE1D2AB3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TVendor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Vendor;
  end;
end;

procedure TVendor.ConnectTo(svrIntf: _Vendor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TVendor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TVendor.GetDefaultInterface: _Vendor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TVendor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TVendorProperties.Create(Self);
{$ENDIF}
end;

destructor TVendor.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TVendor.GetServerProperties: TVendorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TVendor.Get_AccountNumber: WideString;
begin
    Result := DefaultInterface.AccountNumber;
end;

procedure TVendor.Set_AccountNumber(const Param1: WideString);
begin
  DefaultInterface.Set_AccountNumber(Param1);
end;

function TVendor.Get_Address1: WideString;
begin
    Result := DefaultInterface.Address1;
end;

procedure TVendor.Set_Address1(const Param1: WideString);
begin
  DefaultInterface.Set_Address1(Param1);
end;

function TVendor.Get_Address2: WideString;
begin
    Result := DefaultInterface.Address2;
end;

procedure TVendor.Set_Address2(const Param1: WideString);
begin
  DefaultInterface.Set_Address2(Param1);
end;

function TVendor.Get_City: WideString;
begin
    Result := DefaultInterface.City;
end;

procedure TVendor.Set_City(const Param1: WideString);
begin
  DefaultInterface.Set_City(Param1);
end;

function TVendor.Get_CODTerms: WordBool;
begin
    Result := DefaultInterface.CODTerms;
end;

procedure TVendor.Set_CODTerms(Param1: WordBool);
begin
  DefaultInterface.Set_CODTerms(Param1);
end;

function TVendor.Get_Contact: WideString;
begin
    Result := DefaultInterface.Contact;
end;

procedure TVendor.Set_Contact(const Param1: WideString);
begin
  DefaultInterface.Set_Contact(Param1);
end;

function TVendor.Get_Country: WideString;
begin
    Result := DefaultInterface.Country;
end;

procedure TVendor.Set_Country(const Param1: WideString);
begin
  DefaultInterface.Set_Country(Param1);
end;

function TVendor.Get_CreditLimit: Double;
begin
    Result := DefaultInterface.CreditLimit;
end;

procedure TVendor.Set_CreditLimit(Param1: Double);
begin
  DefaultInterface.Set_CreditLimit(Param1);
end;

function TVendor.Get_CurrentBalance: Double;
begin
    Result := DefaultInterface.CurrentBalance;
end;

procedure TVendor.Set_CurrentBalance(Param1: Double);
begin
  DefaultInterface.Set_CurrentBalance(Param1);
end;

function TVendor.Get_CustomField(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomField[Index];
end;

procedure TVendor.Set_CustomField(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomField(Index,Param2);
end;

function TVendor.Get_DiscountDays: Smallint;
begin
    Result := DefaultInterface.DiscountDays;
end;

procedure TVendor.Set_DiscountDays(Param1: Smallint);
begin
  DefaultInterface.Set_DiscountDays(Param1);
end;

function TVendor.Get_DiscountPercent: Double;
begin
    Result := DefaultInterface.DiscountPercent;
end;

procedure TVendor.Set_DiscountPercent(Param1: Double);
begin
  DefaultInterface.Set_DiscountPercent(Param1);
end;

function TVendor.Get_DueAtEndOfMonth: WordBool;
begin
    Result := DefaultInterface.DueAtEndOfMonth;
end;

procedure TVendor.Set_DueAtEndOfMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueAtEndOfMonth(Param1);
end;

function TVendor.Get_DueOnDayOfNextMonth: WordBool;
begin
    Result := DefaultInterface.DueOnDayOfNextMonth;
end;

procedure TVendor.Set_DueOnDayOfNextMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueOnDayOfNextMonth(Param1);
end;

function TVendor.Get_Email: WideString;
begin
    Result := DefaultInterface.Email;
end;

procedure TVendor.Set_Email(const Param1: WideString);
begin
  DefaultInterface.Set_Email(Param1);
end;

function TVendor.Get_EmployeeIndex: Integer;
begin
    Result := DefaultInterface.EmployeeIndex;
end;

procedure TVendor.Set_EmployeeIndex(Param1: Integer);
begin
  DefaultInterface.Set_EmployeeIndex(Param1);
end;

function TVendor.Get_Fax: WideString;
begin
    Result := DefaultInterface.Fax;
end;

procedure TVendor.Set_Fax(const Param1: WideString);
begin
  DefaultInterface.Set_Fax(Param1);
end;

function TVendor.Get_FormsDeliveryFlags: Integer;
begin
    Result := DefaultInterface.FormsDeliveryFlags;
end;

procedure TVendor.Set_FormsDeliveryFlags(Param1: Integer);
begin
  DefaultInterface.Set_FormsDeliveryFlags(Param1);
end;

function TVendor.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TVendor.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TVendor.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TVendor.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TVendor.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TVendor.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TVendor.Get_LastInvoiceAmount: Double;
begin
    Result := DefaultInterface.LastInvoiceAmount;
end;

procedure TVendor.Set_LastInvoiceAmount(Param1: Double);
begin
  DefaultInterface.Set_LastInvoiceAmount(Param1);
end;

function TVendor.Get_LastInvoiceDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastInvoiceDate;
end;

procedure TVendor.Set_LastInvoiceDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastInvoiceDate(Param1);
end;

function TVendor.Get_LastPaymentAmount: Double;
begin
    Result := DefaultInterface.LastPaymentAmount;
end;

procedure TVendor.Set_LastPaymentAmount(Param1: Double);
begin
  DefaultInterface.Set_LastPaymentAmount(Param1);
end;

function TVendor.Get_LastPaymentDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastPaymentDate;
end;

procedure TVendor.Set_LastPaymentDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastPaymentDate(Param1);
end;

function TVendor.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TVendor.Set_Name(const Param1: WideString);
begin
  DefaultInterface.Set_Name(Param1);
end;

function TVendor.Get_NetDueDays: Smallint;
begin
    Result := DefaultInterface.NetDueDays;
end;

procedure TVendor.Set_NetDueDays(Param1: Smallint);
begin
  DefaultInterface.Set_NetDueDays(Param1);
end;

function TVendor.Get_Payments(Index: Smallint): Double;
begin
    Result := DefaultInterface.Payments[Index];
end;

procedure TVendor.Set_Payments(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Payments[Index] := Param2;
end;

function TVendor.Get_PrepaidTerms: WordBool;
begin
    Result := DefaultInterface.PrepaidTerms;
end;

procedure TVendor.Set_PrepaidTerms(Param1: WordBool);
begin
  DefaultInterface.Set_PrepaidTerms(Param1);
end;

function TVendor.Get_PurchaseAccount: WideString;
begin
    Result := DefaultInterface.PurchaseAccount;
end;

procedure TVendor.Set_PurchaseAccount(const Param1: WideString);
begin
  DefaultInterface.Set_PurchaseAccount(Param1);
end;

function TVendor.Get_Purchases(Index: Smallint): Double;
begin
    Result := DefaultInterface.Purchases[Index];
end;

procedure TVendor.Set_Purchases(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Purchases[Index] := Param2;
end;

function TVendor.Get_ShipVia: Smallint;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TVendor.Set_ShipVia(Param1: Smallint);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TVendor.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TVendor.Set_State(const Param1: WideString);
begin
  DefaultInterface.Set_State(Param1);
end;

function TVendor.Get_TaxIDNumber: WideString;
begin
    Result := DefaultInterface.TaxIDNumber;
end;

procedure TVendor.Set_TaxIDNumber(const Param1: WideString);
begin
  DefaultInterface.Set_TaxIDNumber(Param1);
end;

function TVendor.Get_Telephone1: WideString;
begin
    Result := DefaultInterface.Telephone1;
end;

procedure TVendor.Set_Telephone1(const Param1: WideString);
begin
  DefaultInterface.Set_Telephone1(Param1);
end;

function TVendor.Get_Telephone2: WideString;
begin
    Result := DefaultInterface.Telephone2;
end;

procedure TVendor.Set_Telephone2(const Param1: WideString);
begin
  DefaultInterface.Set_Telephone2(Param1);
end;

function TVendor.Get_Type1099: Smallint;
begin
    Result := DefaultInterface.Type1099;
end;

procedure TVendor.Set_Type1099(Param1: Smallint);
begin
  DefaultInterface.Set_Type1099(Param1);
end;

function TVendor.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TVendor.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TVendor.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TVendor.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TVendor.Get_Unused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused3[Index];
end;

procedure TVendor.Set_Unused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused3[Index] := Param2;
end;

function TVendor.Get_Unused4: Byte;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TVendor.Set_Unused4(Param1: Byte);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TVendor.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TVendor.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TVendor.Get_Unused6: Integer;
begin
    Result := DefaultInterface.Unused6;
end;

procedure TVendor.Set_Unused6(Param1: Integer);
begin
  DefaultInterface.Set_Unused6(Param1);
end;

function TVendor.Get_UseStandardTerms: WordBool;
begin
    Result := DefaultInterface.UseStandardTerms;
end;

procedure TVendor.Set_UseStandardTerms(Param1: WordBool);
begin
  DefaultInterface.Set_UseStandardTerms(Param1);
end;

function TVendor.Get_VendorID: WideString;
begin
    Result := DefaultInterface.VendorID;
end;

procedure TVendor.Set_VendorID(const Param1: WideString);
begin
  DefaultInterface.Set_VendorID(Param1);
end;

function TVendor.Get_VendorSinceDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.VendorSinceDate;
end;

procedure TVendor.Set_VendorSinceDate(Param1: OleVariant);
begin
  DefaultInterface.Set_VendorSinceDate(Param1);
end;

function TVendor.Get_VendorType: WideString;
begin
    Result := DefaultInterface.VendorType;
end;

procedure TVendor.Set_VendorType(const Param1: WideString);
begin
  DefaultInterface.Set_VendorType(Param1);
end;

function TVendor.Get_Web: WideString;
begin
    Result := DefaultInterface.Web;
end;

procedure TVendor.Set_Web(const Param1: WideString);
begin
  DefaultInterface.Set_Web(Param1);
end;

function TVendor.Get_Zipcode: WideString;
begin
    Result := DefaultInterface.Zipcode;
end;

procedure TVendor.Set_Zipcode(const Param1: WideString);
begin
  DefaultInterface.Set_Zipcode(Param1);
end;

function TVendor.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TVendor.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TVendor.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TVendor.FindByPercent: Integer;
begin
  Result := DefaultInterface.FindByPercent;
end;

function TVendor.GetByPercent(Percent: Double): Smallint;
begin
  Result := DefaultInterface.GetByPercent(Percent);
end;

function TVendor.GetEqual(const VendorID: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(VendorID);
end;

function TVendor.GetFirst: Smallint;
begin
  Result := DefaultInterface.GetFirst;
end;

function TVendor.GetForIndex(Index: Integer): Smallint;
begin
  Result := DefaultInterface.GetForIndex(Index);
end;

function TVendor.GetGreaterThan(const VendorID: WideString): Smallint;
begin
  Result := DefaultInterface.GetGreaterThan(VendorID);
end;

function TVendor.GetGreaterThanOrEqual(const VendorID: WideString): Smallint;
begin
  Result := DefaultInterface.GetGreaterThanOrEqual(VendorID);
end;

function TVendor.GetLast: Smallint;
begin
  Result := DefaultInterface.GetLast;
end;

function TVendor.GetLessThan(const VendorID: WideString): Smallint;
begin
  Result := DefaultInterface.GetLessThan(VendorID);
end;

function TVendor.GetLessThanOrEqual(const VendorID: WideString): Smallint;
begin
  Result := DefaultInterface.GetLessThanOrEqual(VendorID);
end;

function TVendor.GetNext: Smallint;
begin
  Result := DefaultInterface.GetNext;
end;

function TVendor.GetPrevious: Smallint;
begin
  Result := DefaultInterface.GetPrevious;
end;

function TVendor.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TVendor.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TVendor.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TVendor.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TVendor.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TVendor.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TVendor.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TVendorProperties.Create(AServer: TVendor);
begin
  inherited Create;
  FServer := AServer;
end;

function TVendorProperties.GetDefaultInterface: _Vendor;
begin
  Result := FServer.DefaultInterface;
end;

function TVendorProperties.Get_AccountNumber: WideString;
begin
    Result := DefaultInterface.AccountNumber;
end;

procedure TVendorProperties.Set_AccountNumber(const Param1: WideString);
begin
  DefaultInterface.Set_AccountNumber(Param1);
end;

function TVendorProperties.Get_Address1: WideString;
begin
    Result := DefaultInterface.Address1;
end;

procedure TVendorProperties.Set_Address1(const Param1: WideString);
begin
  DefaultInterface.Set_Address1(Param1);
end;

function TVendorProperties.Get_Address2: WideString;
begin
    Result := DefaultInterface.Address2;
end;

procedure TVendorProperties.Set_Address2(const Param1: WideString);
begin
  DefaultInterface.Set_Address2(Param1);
end;

function TVendorProperties.Get_City: WideString;
begin
    Result := DefaultInterface.City;
end;

procedure TVendorProperties.Set_City(const Param1: WideString);
begin
  DefaultInterface.Set_City(Param1);
end;

function TVendorProperties.Get_CODTerms: WordBool;
begin
    Result := DefaultInterface.CODTerms;
end;

procedure TVendorProperties.Set_CODTerms(Param1: WordBool);
begin
  DefaultInterface.Set_CODTerms(Param1);
end;

function TVendorProperties.Get_Contact: WideString;
begin
    Result := DefaultInterface.Contact;
end;

procedure TVendorProperties.Set_Contact(const Param1: WideString);
begin
  DefaultInterface.Set_Contact(Param1);
end;

function TVendorProperties.Get_Country: WideString;
begin
    Result := DefaultInterface.Country;
end;

procedure TVendorProperties.Set_Country(const Param1: WideString);
begin
  DefaultInterface.Set_Country(Param1);
end;

function TVendorProperties.Get_CreditLimit: Double;
begin
    Result := DefaultInterface.CreditLimit;
end;

procedure TVendorProperties.Set_CreditLimit(Param1: Double);
begin
  DefaultInterface.Set_CreditLimit(Param1);
end;

function TVendorProperties.Get_CurrentBalance: Double;
begin
    Result := DefaultInterface.CurrentBalance;
end;

procedure TVendorProperties.Set_CurrentBalance(Param1: Double);
begin
  DefaultInterface.Set_CurrentBalance(Param1);
end;

function TVendorProperties.Get_CustomField(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomField[Index];
end;

procedure TVendorProperties.Set_CustomField(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomField(Index,Param2);
end;

function TVendorProperties.Get_DiscountDays: Smallint;
begin
    Result := DefaultInterface.DiscountDays;
end;

procedure TVendorProperties.Set_DiscountDays(Param1: Smallint);
begin
  DefaultInterface.Set_DiscountDays(Param1);
end;

function TVendorProperties.Get_DiscountPercent: Double;
begin
    Result := DefaultInterface.DiscountPercent;
end;

procedure TVendorProperties.Set_DiscountPercent(Param1: Double);
begin
  DefaultInterface.Set_DiscountPercent(Param1);
end;

function TVendorProperties.Get_DueAtEndOfMonth: WordBool;
begin
    Result := DefaultInterface.DueAtEndOfMonth;
end;

procedure TVendorProperties.Set_DueAtEndOfMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueAtEndOfMonth(Param1);
end;

function TVendorProperties.Get_DueOnDayOfNextMonth: WordBool;
begin
    Result := DefaultInterface.DueOnDayOfNextMonth;
end;

procedure TVendorProperties.Set_DueOnDayOfNextMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueOnDayOfNextMonth(Param1);
end;

function TVendorProperties.Get_Email: WideString;
begin
    Result := DefaultInterface.Email;
end;

procedure TVendorProperties.Set_Email(const Param1: WideString);
begin
  DefaultInterface.Set_Email(Param1);
end;

function TVendorProperties.Get_EmployeeIndex: Integer;
begin
    Result := DefaultInterface.EmployeeIndex;
end;

procedure TVendorProperties.Set_EmployeeIndex(Param1: Integer);
begin
  DefaultInterface.Set_EmployeeIndex(Param1);
end;

function TVendorProperties.Get_Fax: WideString;
begin
    Result := DefaultInterface.Fax;
end;

procedure TVendorProperties.Set_Fax(const Param1: WideString);
begin
  DefaultInterface.Set_Fax(Param1);
end;

function TVendorProperties.Get_FormsDeliveryFlags: Integer;
begin
    Result := DefaultInterface.FormsDeliveryFlags;
end;

procedure TVendorProperties.Set_FormsDeliveryFlags(Param1: Integer);
begin
  DefaultInterface.Set_FormsDeliveryFlags(Param1);
end;

function TVendorProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TVendorProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TVendorProperties.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TVendorProperties.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TVendorProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TVendorProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TVendorProperties.Get_LastInvoiceAmount: Double;
begin
    Result := DefaultInterface.LastInvoiceAmount;
end;

procedure TVendorProperties.Set_LastInvoiceAmount(Param1: Double);
begin
  DefaultInterface.Set_LastInvoiceAmount(Param1);
end;

function TVendorProperties.Get_LastInvoiceDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastInvoiceDate;
end;

procedure TVendorProperties.Set_LastInvoiceDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastInvoiceDate(Param1);
end;

function TVendorProperties.Get_LastPaymentAmount: Double;
begin
    Result := DefaultInterface.LastPaymentAmount;
end;

procedure TVendorProperties.Set_LastPaymentAmount(Param1: Double);
begin
  DefaultInterface.Set_LastPaymentAmount(Param1);
end;

function TVendorProperties.Get_LastPaymentDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastPaymentDate;
end;

procedure TVendorProperties.Set_LastPaymentDate(Param1: OleVariant);
begin
  DefaultInterface.Set_LastPaymentDate(Param1);
end;

function TVendorProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TVendorProperties.Set_Name(const Param1: WideString);
begin
  DefaultInterface.Set_Name(Param1);
end;

function TVendorProperties.Get_NetDueDays: Smallint;
begin
    Result := DefaultInterface.NetDueDays;
end;

procedure TVendorProperties.Set_NetDueDays(Param1: Smallint);
begin
  DefaultInterface.Set_NetDueDays(Param1);
end;

function TVendorProperties.Get_Payments(Index: Smallint): Double;
begin
    Result := DefaultInterface.Payments[Index];
end;

procedure TVendorProperties.Set_Payments(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Payments[Index] := Param2;
end;

function TVendorProperties.Get_PrepaidTerms: WordBool;
begin
    Result := DefaultInterface.PrepaidTerms;
end;

procedure TVendorProperties.Set_PrepaidTerms(Param1: WordBool);
begin
  DefaultInterface.Set_PrepaidTerms(Param1);
end;

function TVendorProperties.Get_PurchaseAccount: WideString;
begin
    Result := DefaultInterface.PurchaseAccount;
end;

procedure TVendorProperties.Set_PurchaseAccount(const Param1: WideString);
begin
  DefaultInterface.Set_PurchaseAccount(Param1);
end;

function TVendorProperties.Get_Purchases(Index: Smallint): Double;
begin
    Result := DefaultInterface.Purchases[Index];
end;

procedure TVendorProperties.Set_Purchases(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Purchases[Index] := Param2;
end;

function TVendorProperties.Get_ShipVia: Smallint;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TVendorProperties.Set_ShipVia(Param1: Smallint);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TVendorProperties.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TVendorProperties.Set_State(const Param1: WideString);
begin
  DefaultInterface.Set_State(Param1);
end;

function TVendorProperties.Get_TaxIDNumber: WideString;
begin
    Result := DefaultInterface.TaxIDNumber;
end;

procedure TVendorProperties.Set_TaxIDNumber(const Param1: WideString);
begin
  DefaultInterface.Set_TaxIDNumber(Param1);
end;

function TVendorProperties.Get_Telephone1: WideString;
begin
    Result := DefaultInterface.Telephone1;
end;

procedure TVendorProperties.Set_Telephone1(const Param1: WideString);
begin
  DefaultInterface.Set_Telephone1(Param1);
end;

function TVendorProperties.Get_Telephone2: WideString;
begin
    Result := DefaultInterface.Telephone2;
end;

procedure TVendorProperties.Set_Telephone2(const Param1: WideString);
begin
  DefaultInterface.Set_Telephone2(Param1);
end;

function TVendorProperties.Get_Type1099: Smallint;
begin
    Result := DefaultInterface.Type1099;
end;

procedure TVendorProperties.Set_Type1099(Param1: Smallint);
begin
  DefaultInterface.Set_Type1099(Param1);
end;

function TVendorProperties.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TVendorProperties.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TVendorProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TVendorProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TVendorProperties.Get_Unused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused3[Index];
end;

procedure TVendorProperties.Set_Unused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused3[Index] := Param2;
end;

function TVendorProperties.Get_Unused4: Byte;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TVendorProperties.Set_Unused4(Param1: Byte);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TVendorProperties.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TVendorProperties.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TVendorProperties.Get_Unused6: Integer;
begin
    Result := DefaultInterface.Unused6;
end;

procedure TVendorProperties.Set_Unused6(Param1: Integer);
begin
  DefaultInterface.Set_Unused6(Param1);
end;

function TVendorProperties.Get_UseStandardTerms: WordBool;
begin
    Result := DefaultInterface.UseStandardTerms;
end;

procedure TVendorProperties.Set_UseStandardTerms(Param1: WordBool);
begin
  DefaultInterface.Set_UseStandardTerms(Param1);
end;

function TVendorProperties.Get_VendorID: WideString;
begin
    Result := DefaultInterface.VendorID;
end;

procedure TVendorProperties.Set_VendorID(const Param1: WideString);
begin
  DefaultInterface.Set_VendorID(Param1);
end;

function TVendorProperties.Get_VendorSinceDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.VendorSinceDate;
end;

procedure TVendorProperties.Set_VendorSinceDate(Param1: OleVariant);
begin
  DefaultInterface.Set_VendorSinceDate(Param1);
end;

function TVendorProperties.Get_VendorType: WideString;
begin
    Result := DefaultInterface.VendorType;
end;

procedure TVendorProperties.Set_VendorType(const Param1: WideString);
begin
  DefaultInterface.Set_VendorType(Param1);
end;

function TVendorProperties.Get_Web: WideString;
begin
    Result := DefaultInterface.Web;
end;

procedure TVendorProperties.Set_Web(const Param1: WideString);
begin
  DefaultInterface.Set_Web(Param1);
end;

function TVendorProperties.Get_Zipcode: WideString;
begin
    Result := DefaultInterface.Zipcode;
end;

procedure TVendorProperties.Set_Zipcode(const Param1: WideString);
begin
  DefaultInterface.Set_Zipcode(Param1);
end;

{$ENDIF}

class function CoLineItem.Create: _LineItem;
begin
  Result := CreateComObject(CLASS_LineItem) as _LineItem;
end;

class function CoLineItem.CreateRemote(const MachineName: string): _LineItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LineItem) as _LineItem;
end;

procedure TLineItem.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E4FD2C67-EADD-435D-B11E-4B751F56DA7C}';
    IntfIID:   '{84F73079-D468-42E8-BB31-E2700971AF0E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TLineItem.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _LineItem;
  end;
end;

procedure TLineItem.ConnectTo(svrIntf: _LineItem);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TLineItem.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TLineItem.GetDefaultInterface: _LineItem;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TLineItem.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TLineItemProperties.Create(Self);
{$ENDIF}
end;

destructor TLineItem.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TLineItem.GetServerProperties: TLineItemProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TLineItem.Get_BuyerID: WideString;
begin
    Result := DefaultInterface.BuyerID;
end;

procedure TLineItem.Set_BuyerID(const Param1: WideString);
begin
  DefaultInterface.Set_BuyerID(Param1);
end;

function TLineItem.Get_ComponentIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.ComponentIndex[Index];
end;

procedure TLineItem.Set_ComponentIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.ComponentIndex[Index] := Param2;
end;

function TLineItem.Get_ComponentQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.ComponentQuantity[Index];
end;

procedure TLineItem.Set_ComponentQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.ComponentQuantity[Index] := Param2;
end;

function TLineItem.Get_Cost: Double;
begin
    Result := DefaultInterface.Cost;
end;

procedure TLineItem.Set_Cost(Param1: Double);
begin
  DefaultInterface.Set_Cost(Param1);
end;

function TLineItem.Get_CostingMethod: Byte;
begin
    Result := DefaultInterface.CostingMethod;
end;

procedure TLineItem.Set_CostingMethod(Param1: Byte);
begin
  DefaultInterface.Set_CostingMethod(Param1);
end;

function TLineItem.Get_CustomField(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomField[Index];
end;

procedure TLineItem.Set_CustomField(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomField(Index,Param2);
end;

function TLineItem.Get_DefaultForPurchasing: WordBool;
begin
    Result := DefaultInterface.DefaultForPurchasing;
end;

procedure TLineItem.Set_DefaultForPurchasing(Param1: WordBool);
begin
  DefaultInterface.Set_DefaultForPurchasing(Param1);
end;

function TLineItem.Get_DefaultForSales: WordBool;
begin
    Result := DefaultInterface.DefaultForSales;
end;

procedure TLineItem.Set_DefaultForSales(Param1: WordBool);
begin
  DefaultInterface.Set_DefaultForSales(Param1);
end;

function TLineItem.Get_DescriptionForPurchases: WideString;
begin
    Result := DefaultInterface.DescriptionForPurchases;
end;

procedure TLineItem.Set_DescriptionForPurchases(const Param1: WideString);
begin
  DefaultInterface.Set_DescriptionForPurchases(Param1);
end;

function TLineItem.Get_DescriptionForSales: WideString;
begin
    Result := DefaultInterface.DescriptionForSales;
end;

procedure TLineItem.Set_DescriptionForSales(const Param1: WideString);
begin
  DefaultInterface.Set_DescriptionForSales(Param1);
end;

function TLineItem.Get_GLCOGSSalaryAccount: WideString;
begin
    Result := DefaultInterface.GLCOGSSalaryAccount;
end;

procedure TLineItem.Set_GLCOGSSalaryAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLCOGSSalaryAccount(Param1);
end;

function TLineItem.Get_GLInventoryAccount: WideString;
begin
    Result := DefaultInterface.GLInventoryAccount;
end;

procedure TLineItem.Set_GLInventoryAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLInventoryAccount(Param1);
end;

function TLineItem.Get_GLSalesAccount: WideString;
begin
    Result := DefaultInterface.GLSalesAccount;
end;

procedure TLineItem.Set_GLSalesAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLSalesAccount(Param1);
end;

function TLineItem.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TLineItem.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TLineItem.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TLineItem.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TLineItem.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TLineItem.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TLineItem.Get_ItemClass: Smallint;
begin
    Result := DefaultInterface.ItemClass;
end;

procedure TLineItem.Set_ItemClass(Param1: Smallint);
begin
  DefaultInterface.Set_ItemClass(Param1);
end;

function TLineItem.Get_ItemDescription: WideString;
begin
    Result := DefaultInterface.ItemDescription;
end;

procedure TLineItem.Set_ItemDescription(const Param1: WideString);
begin
  DefaultInterface.Set_ItemDescription(Param1);
end;

function TLineItem.Get_ItemID: WideString;
begin
    Result := DefaultInterface.ItemID;
end;

procedure TLineItem.Set_ItemID(const Param1: WideString);
begin
  DefaultInterface.Set_ItemID(Param1);
end;

function TLineItem.Get_ItemNote: WideString;
begin
    Result := DefaultInterface.ItemNote;
end;

procedure TLineItem.Set_ItemNote(const Param1: WideString);
begin
  DefaultInterface.Set_ItemNote(Param1);
end;

function TLineItem.Get_ItemTaxType: Smallint;
begin
    Result := DefaultInterface.ItemTaxType;
end;

procedure TLineItem.Set_ItemTaxType(Param1: Smallint);
begin
  DefaultInterface.Set_ItemTaxType(Param1);
end;

function TLineItem.Get_ItemType: WideString;
begin
    Result := DefaultInterface.ItemType;
end;

procedure TLineItem.Set_ItemType(const Param1: WideString);
begin
  DefaultInterface.Set_ItemType(Param1);
end;

function TLineItem.Get_Location: WideString;
begin
    Result := DefaultInterface.Location;
end;

procedure TLineItem.Set_Location(const Param1: WideString);
begin
  DefaultInterface.Set_Location(Param1);
end;

function TLineItem.Get_MasterItemID: WideString;
begin
    Result := DefaultInterface.MasterItemID;
end;

procedure TLineItem.Set_MasterItemID(const Param1: WideString);
begin
  DefaultInterface.Set_MasterItemID(Param1);
end;

function TLineItem.Get_MasterItemIndex: Integer;
begin
    Result := DefaultInterface.MasterItemIndex;
end;

procedure TLineItem.Set_MasterItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_MasterItemIndex(Param1);
end;

function TLineItem.Get_MinimumStock: Double;
begin
    Result := DefaultInterface.MinimumStock;
end;

procedure TLineItem.Set_MinimumStock(Param1: Double);
begin
  DefaultInterface.Set_MinimumStock(Param1);
end;

function TLineItem.Get_NotStockItem: WordBool;
begin
    Result := DefaultInterface.NotStockItem;
end;

procedure TLineItem.Set_NotStockItem(Param1: WordBool);
begin
  DefaultInterface.Set_NotStockItem(Param1);
end;

function TLineItem.Get_NPrimaryAttributes: Integer;
begin
    Result := DefaultInterface.NPrimaryAttributes;
end;

procedure TLineItem.Set_NPrimaryAttributes(Param1: Integer);
begin
  DefaultInterface.Set_NPrimaryAttributes(Param1);
end;

function TLineItem.Get_NSecondaryAttributes: Integer;
begin
    Result := DefaultInterface.NSecondaryAttributes;
end;

procedure TLineItem.Set_NSecondaryAttributes(Param1: Integer);
begin
  DefaultInterface.Set_NSecondaryAttributes(Param1);
end;

function TLineItem.Get_NumberOfComponents: Smallint;
begin
    Result := DefaultInterface.NumberOfComponents;
end;

procedure TLineItem.Set_NumberOfComponents(Param1: Smallint);
begin
  DefaultInterface.Set_NumberOfComponents(Param1);
end;

function TLineItem.Get_PriceLevel1Value(Index: Smallint): Double;
begin
    Result := DefaultInterface.PriceLevel1Value[Index];
end;

procedure TLineItem.Set_PriceLevel1Value(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PriceLevel1Value[Index] := Param2;
end;

function TLineItem.Get_PriceLevelIndex(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PriceLevelIndex[Index];
end;

procedure TLineItem.Set_PriceLevelIndex(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PriceLevelIndex[Index] := Param2;
end;

function TLineItem.Get_PriceLevelMethod(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PriceLevelMethod[Index];
end;

procedure TLineItem.Set_PriceLevelMethod(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PriceLevelMethod[Index] := Param2;
end;

function TLineItem.Get_PriceLevelMethodAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.PriceLevelMethodAmount[Index];
end;

procedure TLineItem.Set_PriceLevelMethodAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PriceLevelMethodAmount[Index] := Param2;
end;

function TLineItem.Get_PriceLevelName(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PriceLevelName[Index];
end;

procedure TLineItem.Set_PriceLevelName(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PriceLevelName(Index,Param2);
end;

function TLineItem.Get_PriceLevelPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.PriceLevelPrice[Index];
end;

procedure TLineItem.Set_PriceLevelPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PriceLevelPrice[Index] := Param2;
end;

function TLineItem.Get_PriceLevelRounding(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PriceLevelRounding[Index];
end;

procedure TLineItem.Set_PriceLevelRounding(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PriceLevelRounding[Index] := Param2;
end;

function TLineItem.Get_PriceLevelSpecificCent(Index: Smallint): Double;
begin
    Result := DefaultInterface.PriceLevelSpecificCent[Index];
end;

procedure TLineItem.Set_PriceLevelSpecificCent(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PriceLevelSpecificCent[Index] := Param2;
end;

function TLineItem.Get_PriceLevelUse(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PriceLevelUse[Index];
end;

procedure TLineItem.Set_PriceLevelUse(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PriceLevelUse[Index] := Param2;
end;

function TLineItem.Get_PrimaryAttributeDesc(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PrimaryAttributeDesc[Index];
end;

procedure TLineItem.Set_PrimaryAttributeDesc(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PrimaryAttributeDesc(Index,Param2);
end;

function TLineItem.Get_PrimaryAttributeID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PrimaryAttributeID[Index];
end;

procedure TLineItem.Set_PrimaryAttributeID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PrimaryAttributeID(Index,Param2);
end;

function TLineItem.Get_PrimaryAttributeName: WideString;
begin
    Result := DefaultInterface.PrimaryAttributeName;
end;

procedure TLineItem.Set_PrimaryAttributeName(const Param1: WideString);
begin
  DefaultInterface.Set_PrimaryAttributeName(Param1);
end;

function TLineItem.Get_PrintComponents: WordBool;
begin
    Result := DefaultInterface.PrintComponents;
end;

procedure TLineItem.Set_PrintComponents(Param1: WordBool);
begin
  DefaultInterface.Set_PrintComponents(Param1);
end;

function TLineItem.Get_PurchasingGUID: WideString;
begin
    Result := DefaultInterface.PurchasingGUID;
end;

procedure TLineItem.Set_PurchasingGUID(const Param1: WideString);
begin
  DefaultInterface.Set_PurchasingGUID(Param1);
end;

function TLineItem.Get_PurchasingUPC_SCC: WideString;
begin
    Result := DefaultInterface.PurchasingUPC_SCC;
end;

procedure TLineItem.Set_PurchasingUPC_SCC(const Param1: WideString);
begin
  DefaultInterface.Set_PurchasingUPC_SCC(Param1);
end;

function TLineItem.Get_PurchasingWeight: Double;
begin
    Result := DefaultInterface.PurchasingWeight;
end;

procedure TLineItem.Set_PurchasingWeight(Param1: Double);
begin
  DefaultInterface.Set_PurchasingWeight(Param1);
end;

function TLineItem.Get_QtyDiscGUID: WideString;
begin
    Result := DefaultInterface.QtyDiscGUID;
end;

procedure TLineItem.Set_QtyDiscGUID(const Param1: WideString);
begin
  DefaultInterface.Set_QtyDiscGUID(Param1);
end;

function TLineItem.Get_ReorderQuantity: Double;
begin
    Result := DefaultInterface.ReorderQuantity;
end;

procedure TLineItem.Set_ReorderQuantity(Param1: Double);
begin
  DefaultInterface.Set_ReorderQuantity(Param1);
end;

function TLineItem.Get_Sales(Index: Smallint): Double;
begin
    Result := DefaultInterface.Sales[Index];
end;

procedure TLineItem.Set_Sales(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Sales[Index] := Param2;
end;

function TLineItem.Get_SalesGUID: WideString;
begin
    Result := DefaultInterface.SalesGUID;
end;

procedure TLineItem.Set_SalesGUID(const Param1: WideString);
begin
  DefaultInterface.Set_SalesGUID(Param1);
end;

function TLineItem.Get_SalesPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.SalesPrice[Index];
end;

procedure TLineItem.Set_SalesPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.SalesPrice[Index] := Param2;
end;

function TLineItem.Get_SalesUPC_SCC: WideString;
begin
    Result := DefaultInterface.SalesUPC_SCC;
end;

procedure TLineItem.Set_SalesUPC_SCC(const Param1: WideString);
begin
  DefaultInterface.Set_SalesUPC_SCC(Param1);
end;

function TLineItem.Get_SalesWeight: Double;
begin
    Result := DefaultInterface.SalesWeight;
end;

procedure TLineItem.Set_SalesWeight(Param1: Double);
begin
  DefaultInterface.Set_SalesWeight(Param1);
end;

function TLineItem.Get_SecondaryAttributeDesc(Index: Smallint): WideString;
begin
    Result := DefaultInterface.SecondaryAttributeDesc[Index];
end;

procedure TLineItem.Set_SecondaryAttributeDesc(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_SecondaryAttributeDesc(Index,Param2);
end;

function TLineItem.Get_SecondaryAttributeID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.SecondaryAttributeID[Index];
end;

procedure TLineItem.Set_SecondaryAttributeID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_SecondaryAttributeID(Index,Param2);
end;

function TLineItem.Get_SecondaryAttributeName: WideString;
begin
    Result := DefaultInterface.SecondaryAttributeName;
end;

procedure TLineItem.Set_SecondaryAttributeName(const Param1: WideString);
begin
  DefaultInterface.Set_SecondaryAttributeName(Param1);
end;

function TLineItem.Get_SubjectToCommission: WordBool;
begin
    Result := DefaultInterface.SubjectToCommission;
end;

procedure TLineItem.Set_SubjectToCommission(Param1: WordBool);
begin
  DefaultInterface.Set_SubjectToCommission(Param1);
end;

function TLineItem.Get_SubstockPrimaryAttributeDesc: WideString;
begin
    Result := DefaultInterface.SubstockPrimaryAttributeDesc;
end;

procedure TLineItem.Set_SubstockPrimaryAttributeDesc(const Param1: WideString);
begin
  DefaultInterface.Set_SubstockPrimaryAttributeDesc(Param1);
end;

function TLineItem.Get_SubstockPrimaryAttributeID: WideString;
begin
    Result := DefaultInterface.SubstockPrimaryAttributeID;
end;

procedure TLineItem.Set_SubstockPrimaryAttributeID(const Param1: WideString);
begin
  DefaultInterface.Set_SubstockPrimaryAttributeID(Param1);
end;

function TLineItem.Get_SubstockSecondaryAttributeDesc: WideString;
begin
    Result := DefaultInterface.SubstockSecondaryAttributeDesc;
end;

procedure TLineItem.Set_SubstockSecondaryAttributeDesc(const Param1: WideString);
begin
  DefaultInterface.Set_SubstockSecondaryAttributeDesc(Param1);
end;

function TLineItem.Get_SubstockSecondaryAttributeID: WideString;
begin
    Result := DefaultInterface.SubstockSecondaryAttributeID;
end;

procedure TLineItem.Set_SubstockSecondaryAttributeID(const Param1: WideString);
begin
  DefaultInterface.Set_SubstockSecondaryAttributeID(Param1);
end;

function TLineItem.Get_UnitOfMeasure: WideString;
begin
    Result := DefaultInterface.UnitOfMeasure;
end;

procedure TLineItem.Set_UnitOfMeasure(const Param1: WideString);
begin
  DefaultInterface.Set_UnitOfMeasure(Param1);
end;

function TLineItem.Get_UnitsSold(Index: Smallint): Double;
begin
    Result := DefaultInterface.UnitsSold[Index];
end;

procedure TLineItem.Set_UnitsSold(Index: Smallint; Param2: Double);
begin
  DefaultInterface.UnitsSold[Index] := Param2;
end;

function TLineItem.Get_Unused1: Byte;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TLineItem.Set_Unused1(Param1: Byte);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TLineItem.Get_UPC_SKU: WideString;
begin
    Result := DefaultInterface.UPC_SKU;
end;

procedure TLineItem.Set_UPC_SKU(const Param1: WideString);
begin
  DefaultInterface.Set_UPC_SKU(Param1);
end;

function TLineItem.Get_UseMultiPacks: WordBool;
begin
    Result := DefaultInterface.UseMultiPacks;
end;

procedure TLineItem.Set_UseMultiPacks(Param1: WordBool);
begin
  DefaultInterface.Set_UseMultiPacks(Param1);
end;

function TLineItem.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TLineItem.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

function TLineItem.Get_Weight: Double;
begin
    Result := DefaultInterface.Weight;
end;

procedure TLineItem.Set_Weight(Param1: Double);
begin
  DefaultInterface.Set_Weight(Param1);
end;

function TLineItem.Get_WarrantyPeriod: Integer;
begin
    Result := DefaultInterface.WarrantyPeriod;
end;

procedure TLineItem.Set_WarrantyPeriod(Param1: Integer);
begin
  DefaultInterface.Set_WarrantyPeriod(Param1);
end;

function TLineItem.Get_WarrantySpan: Integer;
begin
    Result := DefaultInterface.WarrantySpan;
end;

procedure TLineItem.Set_WarrantySpan(Param1: Integer);
begin
  DefaultInterface.Set_WarrantySpan(Param1);
end;

function TLineItem.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TLineItem.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TLineItem.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TLineItem.FindByPercent: Integer;
begin
  Result := DefaultInterface.FindByPercent;
end;

function TLineItem.GetByPercent(Percent: Double): Smallint;
begin
  Result := DefaultInterface.GetByPercent(Percent);
end;

function TLineItem.GetEqual(const ID: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(ID);
end;

function TLineItem.GetFirst: Smallint;
begin
  Result := DefaultInterface.GetFirst;
end;

function TLineItem.GetForIndex(Index: Integer): Smallint;
begin
  Result := DefaultInterface.GetForIndex(Index);
end;

function TLineItem.GetGreaterThan(const LineItemID: WideString): Smallint;
begin
  Result := DefaultInterface.GetGreaterThan(LineItemID);
end;

function TLineItem.GetGreaterThanOrEqual(const LineItemID: WideString): Smallint;
begin
  Result := DefaultInterface.GetGreaterThanOrEqual(LineItemID);
end;

function TLineItem.GetLast: Smallint;
begin
  Result := DefaultInterface.GetLast;
end;

function TLineItem.GetLessThan(const LineItemID: WideString): Smallint;
begin
  Result := DefaultInterface.GetLessThan(LineItemID);
end;

function TLineItem.GetLessThanOrEqual(const LineItemID: WideString): Smallint;
begin
  Result := DefaultInterface.GetLessThanOrEqual(LineItemID);
end;

function TLineItem.GetNext: Smallint;
begin
  Result := DefaultInterface.GetNext;
end;

function TLineItem.GetPrevious: Smallint;
begin
  Result := DefaultInterface.GetPrevious;
end;

function TLineItem.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TLineItem.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TLineItem.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TLineItem.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TLineItem.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TLineItem.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TLineItem.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TLineItemProperties.Create(AServer: TLineItem);
begin
  inherited Create;
  FServer := AServer;
end;

function TLineItemProperties.GetDefaultInterface: _LineItem;
begin
  Result := FServer.DefaultInterface;
end;

function TLineItemProperties.Get_BuyerID: WideString;
begin
    Result := DefaultInterface.BuyerID;
end;

procedure TLineItemProperties.Set_BuyerID(const Param1: WideString);
begin
  DefaultInterface.Set_BuyerID(Param1);
end;

function TLineItemProperties.Get_ComponentIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.ComponentIndex[Index];
end;

procedure TLineItemProperties.Set_ComponentIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.ComponentIndex[Index] := Param2;
end;

function TLineItemProperties.Get_ComponentQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.ComponentQuantity[Index];
end;

procedure TLineItemProperties.Set_ComponentQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.ComponentQuantity[Index] := Param2;
end;

function TLineItemProperties.Get_Cost: Double;
begin
    Result := DefaultInterface.Cost;
end;

procedure TLineItemProperties.Set_Cost(Param1: Double);
begin
  DefaultInterface.Set_Cost(Param1);
end;

function TLineItemProperties.Get_CostingMethod: Byte;
begin
    Result := DefaultInterface.CostingMethod;
end;

procedure TLineItemProperties.Set_CostingMethod(Param1: Byte);
begin
  DefaultInterface.Set_CostingMethod(Param1);
end;

function TLineItemProperties.Get_CustomField(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomField[Index];
end;

procedure TLineItemProperties.Set_CustomField(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomField(Index,Param2);
end;

function TLineItemProperties.Get_DefaultForPurchasing: WordBool;
begin
    Result := DefaultInterface.DefaultForPurchasing;
end;

procedure TLineItemProperties.Set_DefaultForPurchasing(Param1: WordBool);
begin
  DefaultInterface.Set_DefaultForPurchasing(Param1);
end;

function TLineItemProperties.Get_DefaultForSales: WordBool;
begin
    Result := DefaultInterface.DefaultForSales;
end;

procedure TLineItemProperties.Set_DefaultForSales(Param1: WordBool);
begin
  DefaultInterface.Set_DefaultForSales(Param1);
end;

function TLineItemProperties.Get_DescriptionForPurchases: WideString;
begin
    Result := DefaultInterface.DescriptionForPurchases;
end;

procedure TLineItemProperties.Set_DescriptionForPurchases(const Param1: WideString);
begin
  DefaultInterface.Set_DescriptionForPurchases(Param1);
end;

function TLineItemProperties.Get_DescriptionForSales: WideString;
begin
    Result := DefaultInterface.DescriptionForSales;
end;

procedure TLineItemProperties.Set_DescriptionForSales(const Param1: WideString);
begin
  DefaultInterface.Set_DescriptionForSales(Param1);
end;

function TLineItemProperties.Get_GLCOGSSalaryAccount: WideString;
begin
    Result := DefaultInterface.GLCOGSSalaryAccount;
end;

procedure TLineItemProperties.Set_GLCOGSSalaryAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLCOGSSalaryAccount(Param1);
end;

function TLineItemProperties.Get_GLInventoryAccount: WideString;
begin
    Result := DefaultInterface.GLInventoryAccount;
end;

procedure TLineItemProperties.Set_GLInventoryAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLInventoryAccount(Param1);
end;

function TLineItemProperties.Get_GLSalesAccount: WideString;
begin
    Result := DefaultInterface.GLSalesAccount;
end;

procedure TLineItemProperties.Set_GLSalesAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLSalesAccount(Param1);
end;

function TLineItemProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TLineItemProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TLineItemProperties.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TLineItemProperties.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TLineItemProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TLineItemProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TLineItemProperties.Get_ItemClass: Smallint;
begin
    Result := DefaultInterface.ItemClass;
end;

procedure TLineItemProperties.Set_ItemClass(Param1: Smallint);
begin
  DefaultInterface.Set_ItemClass(Param1);
end;

function TLineItemProperties.Get_ItemDescription: WideString;
begin
    Result := DefaultInterface.ItemDescription;
end;

procedure TLineItemProperties.Set_ItemDescription(const Param1: WideString);
begin
  DefaultInterface.Set_ItemDescription(Param1);
end;

function TLineItemProperties.Get_ItemID: WideString;
begin
    Result := DefaultInterface.ItemID;
end;

procedure TLineItemProperties.Set_ItemID(const Param1: WideString);
begin
  DefaultInterface.Set_ItemID(Param1);
end;

function TLineItemProperties.Get_ItemNote: WideString;
begin
    Result := DefaultInterface.ItemNote;
end;

procedure TLineItemProperties.Set_ItemNote(const Param1: WideString);
begin
  DefaultInterface.Set_ItemNote(Param1);
end;

function TLineItemProperties.Get_ItemTaxType: Smallint;
begin
    Result := DefaultInterface.ItemTaxType;
end;

procedure TLineItemProperties.Set_ItemTaxType(Param1: Smallint);
begin
  DefaultInterface.Set_ItemTaxType(Param1);
end;

function TLineItemProperties.Get_ItemType: WideString;
begin
    Result := DefaultInterface.ItemType;
end;

procedure TLineItemProperties.Set_ItemType(const Param1: WideString);
begin
  DefaultInterface.Set_ItemType(Param1);
end;

function TLineItemProperties.Get_Location: WideString;
begin
    Result := DefaultInterface.Location;
end;

procedure TLineItemProperties.Set_Location(const Param1: WideString);
begin
  DefaultInterface.Set_Location(Param1);
end;

function TLineItemProperties.Get_MasterItemID: WideString;
begin
    Result := DefaultInterface.MasterItemID;
end;

procedure TLineItemProperties.Set_MasterItemID(const Param1: WideString);
begin
  DefaultInterface.Set_MasterItemID(Param1);
end;

function TLineItemProperties.Get_MasterItemIndex: Integer;
begin
    Result := DefaultInterface.MasterItemIndex;
end;

procedure TLineItemProperties.Set_MasterItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_MasterItemIndex(Param1);
end;

function TLineItemProperties.Get_MinimumStock: Double;
begin
    Result := DefaultInterface.MinimumStock;
end;

procedure TLineItemProperties.Set_MinimumStock(Param1: Double);
begin
  DefaultInterface.Set_MinimumStock(Param1);
end;

function TLineItemProperties.Get_NotStockItem: WordBool;
begin
    Result := DefaultInterface.NotStockItem;
end;

procedure TLineItemProperties.Set_NotStockItem(Param1: WordBool);
begin
  DefaultInterface.Set_NotStockItem(Param1);
end;

function TLineItemProperties.Get_NPrimaryAttributes: Integer;
begin
    Result := DefaultInterface.NPrimaryAttributes;
end;

procedure TLineItemProperties.Set_NPrimaryAttributes(Param1: Integer);
begin
  DefaultInterface.Set_NPrimaryAttributes(Param1);
end;

function TLineItemProperties.Get_NSecondaryAttributes: Integer;
begin
    Result := DefaultInterface.NSecondaryAttributes;
end;

procedure TLineItemProperties.Set_NSecondaryAttributes(Param1: Integer);
begin
  DefaultInterface.Set_NSecondaryAttributes(Param1);
end;

function TLineItemProperties.Get_NumberOfComponents: Smallint;
begin
    Result := DefaultInterface.NumberOfComponents;
end;

procedure TLineItemProperties.Set_NumberOfComponents(Param1: Smallint);
begin
  DefaultInterface.Set_NumberOfComponents(Param1);
end;

function TLineItemProperties.Get_PriceLevel1Value(Index: Smallint): Double;
begin
    Result := DefaultInterface.PriceLevel1Value[Index];
end;

procedure TLineItemProperties.Set_PriceLevel1Value(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PriceLevel1Value[Index] := Param2;
end;

function TLineItemProperties.Get_PriceLevelIndex(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PriceLevelIndex[Index];
end;

procedure TLineItemProperties.Set_PriceLevelIndex(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PriceLevelIndex[Index] := Param2;
end;

function TLineItemProperties.Get_PriceLevelMethod(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PriceLevelMethod[Index];
end;

procedure TLineItemProperties.Set_PriceLevelMethod(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PriceLevelMethod[Index] := Param2;
end;

function TLineItemProperties.Get_PriceLevelMethodAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.PriceLevelMethodAmount[Index];
end;

procedure TLineItemProperties.Set_PriceLevelMethodAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PriceLevelMethodAmount[Index] := Param2;
end;

function TLineItemProperties.Get_PriceLevelName(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PriceLevelName[Index];
end;

procedure TLineItemProperties.Set_PriceLevelName(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PriceLevelName(Index,Param2);
end;

function TLineItemProperties.Get_PriceLevelPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.PriceLevelPrice[Index];
end;

procedure TLineItemProperties.Set_PriceLevelPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PriceLevelPrice[Index] := Param2;
end;

function TLineItemProperties.Get_PriceLevelRounding(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PriceLevelRounding[Index];
end;

procedure TLineItemProperties.Set_PriceLevelRounding(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PriceLevelRounding[Index] := Param2;
end;

function TLineItemProperties.Get_PriceLevelSpecificCent(Index: Smallint): Double;
begin
    Result := DefaultInterface.PriceLevelSpecificCent[Index];
end;

procedure TLineItemProperties.Set_PriceLevelSpecificCent(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PriceLevelSpecificCent[Index] := Param2;
end;

function TLineItemProperties.Get_PriceLevelUse(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PriceLevelUse[Index];
end;

procedure TLineItemProperties.Set_PriceLevelUse(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PriceLevelUse[Index] := Param2;
end;

function TLineItemProperties.Get_PrimaryAttributeDesc(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PrimaryAttributeDesc[Index];
end;

procedure TLineItemProperties.Set_PrimaryAttributeDesc(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PrimaryAttributeDesc(Index,Param2);
end;

function TLineItemProperties.Get_PrimaryAttributeID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PrimaryAttributeID[Index];
end;

procedure TLineItemProperties.Set_PrimaryAttributeID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PrimaryAttributeID(Index,Param2);
end;

function TLineItemProperties.Get_PrimaryAttributeName: WideString;
begin
    Result := DefaultInterface.PrimaryAttributeName;
end;

procedure TLineItemProperties.Set_PrimaryAttributeName(const Param1: WideString);
begin
  DefaultInterface.Set_PrimaryAttributeName(Param1);
end;

function TLineItemProperties.Get_PrintComponents: WordBool;
begin
    Result := DefaultInterface.PrintComponents;
end;

procedure TLineItemProperties.Set_PrintComponents(Param1: WordBool);
begin
  DefaultInterface.Set_PrintComponents(Param1);
end;

function TLineItemProperties.Get_PurchasingGUID: WideString;
begin
    Result := DefaultInterface.PurchasingGUID;
end;

procedure TLineItemProperties.Set_PurchasingGUID(const Param1: WideString);
begin
  DefaultInterface.Set_PurchasingGUID(Param1);
end;

function TLineItemProperties.Get_PurchasingUPC_SCC: WideString;
begin
    Result := DefaultInterface.PurchasingUPC_SCC;
end;

procedure TLineItemProperties.Set_PurchasingUPC_SCC(const Param1: WideString);
begin
  DefaultInterface.Set_PurchasingUPC_SCC(Param1);
end;

function TLineItemProperties.Get_PurchasingWeight: Double;
begin
    Result := DefaultInterface.PurchasingWeight;
end;

procedure TLineItemProperties.Set_PurchasingWeight(Param1: Double);
begin
  DefaultInterface.Set_PurchasingWeight(Param1);
end;

function TLineItemProperties.Get_QtyDiscGUID: WideString;
begin
    Result := DefaultInterface.QtyDiscGUID;
end;

procedure TLineItemProperties.Set_QtyDiscGUID(const Param1: WideString);
begin
  DefaultInterface.Set_QtyDiscGUID(Param1);
end;

function TLineItemProperties.Get_ReorderQuantity: Double;
begin
    Result := DefaultInterface.ReorderQuantity;
end;

procedure TLineItemProperties.Set_ReorderQuantity(Param1: Double);
begin
  DefaultInterface.Set_ReorderQuantity(Param1);
end;

function TLineItemProperties.Get_Sales(Index: Smallint): Double;
begin
    Result := DefaultInterface.Sales[Index];
end;

procedure TLineItemProperties.Set_Sales(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Sales[Index] := Param2;
end;

function TLineItemProperties.Get_SalesGUID: WideString;
begin
    Result := DefaultInterface.SalesGUID;
end;

procedure TLineItemProperties.Set_SalesGUID(const Param1: WideString);
begin
  DefaultInterface.Set_SalesGUID(Param1);
end;

function TLineItemProperties.Get_SalesPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.SalesPrice[Index];
end;

procedure TLineItemProperties.Set_SalesPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.SalesPrice[Index] := Param2;
end;

function TLineItemProperties.Get_SalesUPC_SCC: WideString;
begin
    Result := DefaultInterface.SalesUPC_SCC;
end;

procedure TLineItemProperties.Set_SalesUPC_SCC(const Param1: WideString);
begin
  DefaultInterface.Set_SalesUPC_SCC(Param1);
end;

function TLineItemProperties.Get_SalesWeight: Double;
begin
    Result := DefaultInterface.SalesWeight;
end;

procedure TLineItemProperties.Set_SalesWeight(Param1: Double);
begin
  DefaultInterface.Set_SalesWeight(Param1);
end;

function TLineItemProperties.Get_SecondaryAttributeDesc(Index: Smallint): WideString;
begin
    Result := DefaultInterface.SecondaryAttributeDesc[Index];
end;

procedure TLineItemProperties.Set_SecondaryAttributeDesc(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_SecondaryAttributeDesc(Index,Param2);
end;

function TLineItemProperties.Get_SecondaryAttributeID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.SecondaryAttributeID[Index];
end;

procedure TLineItemProperties.Set_SecondaryAttributeID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_SecondaryAttributeID(Index,Param2);
end;

function TLineItemProperties.Get_SecondaryAttributeName: WideString;
begin
    Result := DefaultInterface.SecondaryAttributeName;
end;

procedure TLineItemProperties.Set_SecondaryAttributeName(const Param1: WideString);
begin
  DefaultInterface.Set_SecondaryAttributeName(Param1);
end;

function TLineItemProperties.Get_SubjectToCommission: WordBool;
begin
    Result := DefaultInterface.SubjectToCommission;
end;

procedure TLineItemProperties.Set_SubjectToCommission(Param1: WordBool);
begin
  DefaultInterface.Set_SubjectToCommission(Param1);
end;

function TLineItemProperties.Get_SubstockPrimaryAttributeDesc: WideString;
begin
    Result := DefaultInterface.SubstockPrimaryAttributeDesc;
end;

procedure TLineItemProperties.Set_SubstockPrimaryAttributeDesc(const Param1: WideString);
begin
  DefaultInterface.Set_SubstockPrimaryAttributeDesc(Param1);
end;

function TLineItemProperties.Get_SubstockPrimaryAttributeID: WideString;
begin
    Result := DefaultInterface.SubstockPrimaryAttributeID;
end;

procedure TLineItemProperties.Set_SubstockPrimaryAttributeID(const Param1: WideString);
begin
  DefaultInterface.Set_SubstockPrimaryAttributeID(Param1);
end;

function TLineItemProperties.Get_SubstockSecondaryAttributeDesc: WideString;
begin
    Result := DefaultInterface.SubstockSecondaryAttributeDesc;
end;

procedure TLineItemProperties.Set_SubstockSecondaryAttributeDesc(const Param1: WideString);
begin
  DefaultInterface.Set_SubstockSecondaryAttributeDesc(Param1);
end;

function TLineItemProperties.Get_SubstockSecondaryAttributeID: WideString;
begin
    Result := DefaultInterface.SubstockSecondaryAttributeID;
end;

procedure TLineItemProperties.Set_SubstockSecondaryAttributeID(const Param1: WideString);
begin
  DefaultInterface.Set_SubstockSecondaryAttributeID(Param1);
end;

function TLineItemProperties.Get_UnitOfMeasure: WideString;
begin
    Result := DefaultInterface.UnitOfMeasure;
end;

procedure TLineItemProperties.Set_UnitOfMeasure(const Param1: WideString);
begin
  DefaultInterface.Set_UnitOfMeasure(Param1);
end;

function TLineItemProperties.Get_UnitsSold(Index: Smallint): Double;
begin
    Result := DefaultInterface.UnitsSold[Index];
end;

procedure TLineItemProperties.Set_UnitsSold(Index: Smallint; Param2: Double);
begin
  DefaultInterface.UnitsSold[Index] := Param2;
end;

function TLineItemProperties.Get_Unused1: Byte;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TLineItemProperties.Set_Unused1(Param1: Byte);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TLineItemProperties.Get_UPC_SKU: WideString;
begin
    Result := DefaultInterface.UPC_SKU;
end;

procedure TLineItemProperties.Set_UPC_SKU(const Param1: WideString);
begin
  DefaultInterface.Set_UPC_SKU(Param1);
end;

function TLineItemProperties.Get_UseMultiPacks: WordBool;
begin
    Result := DefaultInterface.UseMultiPacks;
end;

procedure TLineItemProperties.Set_UseMultiPacks(Param1: WordBool);
begin
  DefaultInterface.Set_UseMultiPacks(Param1);
end;

function TLineItemProperties.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TLineItemProperties.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

function TLineItemProperties.Get_Weight: Double;
begin
    Result := DefaultInterface.Weight;
end;

procedure TLineItemProperties.Set_Weight(Param1: Double);
begin
  DefaultInterface.Set_Weight(Param1);
end;

function TLineItemProperties.Get_WarrantyPeriod: Integer;
begin
    Result := DefaultInterface.WarrantyPeriod;
end;

procedure TLineItemProperties.Set_WarrantyPeriod(Param1: Integer);
begin
  DefaultInterface.Set_WarrantyPeriod(Param1);
end;

function TLineItemProperties.Get_WarrantySpan: Integer;
begin
    Result := DefaultInterface.WarrantySpan;
end;

procedure TLineItemProperties.Set_WarrantySpan(Param1: Integer);
begin
  DefaultInterface.Set_WarrantySpan(Param1);
end;

{$ENDIF}

class function CoGeneralData.Create: _GeneralData;
begin
  Result := CreateComObject(CLASS_GeneralData) as _GeneralData;
end;

class function CoGeneralData.CreateRemote(const MachineName: string): _GeneralData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GeneralData) as _GeneralData;
end;

procedure TGeneralData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{41045BB1-3FF3-4447-94DE-B0672EE3A6B8}';
    IntfIID:   '{2CE67D67-2EE7-409B-9F42-C466E56E4B09}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGeneralData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _GeneralData;
  end;
end;

procedure TGeneralData.ConnectTo(svrIntf: _GeneralData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGeneralData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGeneralData.GetDefaultInterface: _GeneralData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGeneralData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGeneralDataProperties.Create(Self);
{$ENDIF}
end;

destructor TGeneralData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGeneralData.GetServerProperties: TGeneralDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TGeneralData.Get_BankRecAccount: WideString;
begin
    Result := DefaultInterface.BankRecAccount;
end;

procedure TGeneralData.Set_BankRecAccount(const Param1: WideString);
begin
  DefaultInterface.Set_BankRecAccount(Param1);
end;

function TGeneralData.Get_BatchEntryCount(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.BatchEntryCount[Index];
end;

procedure TGeneralData.Set_BatchEntryCount(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.BatchEntryCount[Index] := Param2;
end;

function TGeneralData.Get_BatchFlag(Index: Smallint): Byte;
begin
    Result := DefaultInterface.BatchFlag[Index];
end;

procedure TGeneralData.Set_BatchFlag(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.BatchFlag[Index] := Param2;
end;

function TGeneralData.Get_BBEquityAccount: WideString;
begin
    Result := DefaultInterface.BBEquityAccount;
end;

procedure TGeneralData.Set_BBEquityAccount(const Param1: WideString);
begin
  DefaultInterface.Set_BBEquityAccount(Param1);
end;

function TGeneralData.Get_CalendarYear: Smallint;
begin
    Result := DefaultInterface.CalendarYear;
end;

procedure TGeneralData.Set_CalendarYear(Param1: Smallint);
begin
  DefaultInterface.Set_CalendarYear(Param1);
end;

function TGeneralData.Get_CurrentPeriod: Smallint;
begin
    Result := DefaultInterface.CurrentPeriod;
end;

function TGeneralData.Get_DateLastPurge: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateLastPurge;
end;

procedure TGeneralData.Set_DateLastPurge(Param1: OleVariant);
begin
  DefaultInterface.Set_DateLastPurge(Param1);
end;

function TGeneralData.Get_LastActRecAccnt: WideString;
begin
    Result := DefaultInterface.LastActRecAccnt;
end;

procedure TGeneralData.Set_LastActRecAccnt(const Param1: WideString);
begin
  DefaultInterface.Set_LastActRecAccnt(Param1);
end;

function TGeneralData.Get_LastPostOrderNumber: Integer;
begin
    Result := DefaultInterface.LastPostOrderNumber;
end;

procedure TGeneralData.Set_LastPostOrderNumber(Param1: Integer);
begin
  DefaultInterface.Set_LastPostOrderNumber(Param1);
end;

function TGeneralData.Get_NumberOfPeriods: Smallint;
begin
    Result := DefaultInterface.NumberOfPeriods;
end;

procedure TGeneralData.Set_NumberOfPeriods(Param1: Smallint);
begin
  DefaultInterface.Set_NumberOfPeriods(Param1);
end;

function TGeneralData.Get_OldestPO: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldestPO;
end;

procedure TGeneralData.Set_OldestPO(Param1: OleVariant);
begin
  DefaultInterface.Set_OldestPO(Param1);
end;

function TGeneralData.Get_OldestQuote: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldestQuote;
end;

procedure TGeneralData.Set_OldestQuote(Param1: OleVariant);
begin
  DefaultInterface.Set_OldestQuote(Param1);
end;

function TGeneralData.Get_OldestUnpostedTrx: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldestUnpostedTrx;
end;

procedure TGeneralData.Set_OldestUnpostedTrx(Param1: OleVariant);
begin
  DefaultInterface.Set_OldestUnpostedTrx(Param1);
end;

function TGeneralData.Get_PeriodEndDate(Index: Smallint): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PeriodEndDate[Index];
end;

procedure TGeneralData.Set_PeriodEndDate(Index: Smallint; Param2: OleVariant);
begin
  DefaultInterface.PeriodEndDate[Index] := Param2;
end;

function TGeneralData.Get_PeriodStartDate(Index: Smallint): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PeriodStartDate[Index];
end;

procedure TGeneralData.Set_PeriodStartDate(Index: Smallint; Param2: OleVariant);
begin
  DefaultInterface.PeriodStartDate[Index] := Param2;
end;

function TGeneralData.Get_PriorPeriod: Smallint;
begin
    Result := DefaultInterface.PriorPeriod;
end;

procedure TGeneralData.Set_PriorPeriod(Param1: Smallint);
begin
  DefaultInterface.Set_PriorPeriod(Param1);
end;

function TGeneralData.Get_RoundingAccount: WideString;
begin
    Result := DefaultInterface.RoundingAccount;
end;

procedure TGeneralData.Set_RoundingAccount(const Param1: WideString);
begin
  DefaultInterface.Set_RoundingAccount(Param1);
end;

function TGeneralData.Get_Ten99UnprintedNextYear: WordBool;
begin
    Result := DefaultInterface.Ten99UnprintedNextYear;
end;

procedure TGeneralData.Set_Ten99UnprintedNextYear(Param1: WordBool);
begin
  DefaultInterface.Set_Ten99UnprintedNextYear(Param1);
end;

function TGeneralData.Get_Ten99UnprintedThisYear: WordBool;
begin
    Result := DefaultInterface.Ten99UnprintedThisYear;
end;

procedure TGeneralData.Set_Ten99UnprintedThisYear(Param1: WordBool);
begin
  DefaultInterface.Set_Ten99UnprintedThisYear(Param1);
end;

function TGeneralData.Get_UnidentifiedAccount1: WideString;
begin
    Result := DefaultInterface.UnidentifiedAccount1;
end;

procedure TGeneralData.Set_UnidentifiedAccount1(const Param1: WideString);
begin
  DefaultInterface.Set_UnidentifiedAccount1(Param1);
end;

function TGeneralData.Get_UnidentifiedAccount2: WideString;
begin
    Result := DefaultInterface.UnidentifiedAccount2;
end;

procedure TGeneralData.Set_UnidentifiedAccount2(const Param1: WideString);
begin
  DefaultInterface.Set_UnidentifiedAccount2(Param1);
end;

function TGeneralData.Get_UnidentifiedDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.UnidentifiedDate;
end;

procedure TGeneralData.Set_UnidentifiedDate(Param1: OleVariant);
begin
  DefaultInterface.Set_UnidentifiedDate(Param1);
end;

function TGeneralData.Get_UnpostedFlag: Byte;
begin
    Result := DefaultInterface.UnpostedFlag;
end;

procedure TGeneralData.Set_UnpostedFlag(Param1: Byte);
begin
  DefaultInterface.Set_UnpostedFlag(Param1);
end;

function TGeneralData.Get_UnusedDate1: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.UnusedDate1;
end;

procedure TGeneralData.Set_UnusedDate1(Param1: OleVariant);
begin
  DefaultInterface.Set_UnusedDate1(Param1);
end;

function TGeneralData.Get_UnusedDate2: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.UnusedDate2;
end;

procedure TGeneralData.Set_UnusedDate2(Param1: OleVariant);
begin
  DefaultInterface.Set_UnusedDate2(Param1);
end;

function TGeneralData.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TGeneralData.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TGeneralData.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TGeneralData.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TGeneralData.Get_Unused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused3[Index];
end;

procedure TGeneralData.Set_Unused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused3[Index] := Param2;
end;

function TGeneralData.Get_Unused4: Byte;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TGeneralData.Set_Unused4(Param1: Byte);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TGeneralData.Get_Unknown5: Byte;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TGeneralData.Set_Unknown5(Param1: Byte);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

function TGeneralData.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TGeneralData.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TGeneralData.Get_Unused7(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused7[Index];
end;

procedure TGeneralData.Set_Unused7(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused7[Index] := Param2;
end;

function TGeneralData.Get_Unknown8: Byte;
begin
    Result := DefaultInterface.Unknown8;
end;

procedure TGeneralData.Set_Unknown8(Param1: Byte);
begin
  DefaultInterface.Set_Unknown8(Param1);
end;

function TGeneralData.Get_Unused9(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused9[Index];
end;

procedure TGeneralData.Set_Unused9(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused9[Index] := Param2;
end;

function TGeneralData.Get_Unused10: Byte;
begin
    Result := DefaultInterface.Unused10;
end;

procedure TGeneralData.Set_Unused10(Param1: Byte);
begin
  DefaultInterface.Set_Unused10(Param1);
end;

function TGeneralData.Get_Unknown11(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown11[Index];
end;

procedure TGeneralData.Set_Unknown11(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown11[Index] := Param2;
end;

function TGeneralData.Get_Unknown12(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown12[Index];
end;

procedure TGeneralData.Set_Unknown12(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown12[Index] := Param2;
end;

function TGeneralData.Get_Unused13(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused13[Index];
end;

procedure TGeneralData.Set_Unused13(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused13[Index] := Param2;
end;

function TGeneralData.Get_Unknown14(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown14[Index];
end;

procedure TGeneralData.Set_Unknown14(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown14[Index] := Param2;
end;

function TGeneralData.Get_Unused15(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused15[Index];
end;

procedure TGeneralData.Set_Unused15(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused15[Index] := Param2;
end;

function TGeneralData.Get_Unknown16(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown16[Index];
end;

procedure TGeneralData.Set_Unknown16(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown16[Index] := Param2;
end;

function TGeneralData.Get_Unused17(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused17[Index];
end;

procedure TGeneralData.Set_Unused17(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused17[Index] := Param2;
end;

function TGeneralData.Get_Unused18: Byte;
begin
    Result := DefaultInterface.Unused18;
end;

procedure TGeneralData.Set_Unused18(Param1: Byte);
begin
  DefaultInterface.Set_Unused18(Param1);
end;

function TGeneralData.Get_Unused19: Byte;
begin
    Result := DefaultInterface.Unused19;
end;

procedure TGeneralData.Set_Unused19(Param1: Byte);
begin
  DefaultInterface.Set_Unused19(Param1);
end;

function TGeneralData.Get_Version: WideString;
begin
    Result := DefaultInterface.Version;
end;

function TGeneralData.Get_W2UnprintedNextYear: WordBool;
begin
    Result := DefaultInterface.W2UnprintedNextYear;
end;

procedure TGeneralData.Set_W2UnprintedNextYear(Param1: WordBool);
begin
  DefaultInterface.Set_W2UnprintedNextYear(Param1);
end;

function TGeneralData.Get_W2UnprintedThisYear: WordBool;
begin
    Result := DefaultInterface.W2UnprintedThisYear;
end;

procedure TGeneralData.Set_W2UnprintedThisYear(Param1: WordBool);
begin
  DefaultInterface.Set_W2UnprintedThisYear(Param1);
end;

function TGeneralData.Get_YearlyGLPrintedNextYear: WordBool;
begin
    Result := DefaultInterface.YearlyGLPrintedNextYear;
end;

procedure TGeneralData.Set_YearlyGLPrintedNextYear(Param1: WordBool);
begin
  DefaultInterface.Set_YearlyGLPrintedNextYear(Param1);
end;

function TGeneralData.Get_YearlyGLPrintedThisYear: WordBool;
begin
    Result := DefaultInterface.YearlyGLPrintedThisYear;
end;

procedure TGeneralData.Set_YearlyGLPrintedThisYear(Param1: WordBool);
begin
  DefaultInterface.Set_YearlyGLPrintedThisYear(Param1);
end;

function TGeneralData.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TGeneralData.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TGeneralData.Read: Smallint;
begin
  Result := DefaultInterface.Read;
end;

function TGeneralData.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGeneralDataProperties.Create(AServer: TGeneralData);
begin
  inherited Create;
  FServer := AServer;
end;

function TGeneralDataProperties.GetDefaultInterface: _GeneralData;
begin
  Result := FServer.DefaultInterface;
end;

function TGeneralDataProperties.Get_BankRecAccount: WideString;
begin
    Result := DefaultInterface.BankRecAccount;
end;

procedure TGeneralDataProperties.Set_BankRecAccount(const Param1: WideString);
begin
  DefaultInterface.Set_BankRecAccount(Param1);
end;

function TGeneralDataProperties.Get_BatchEntryCount(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.BatchEntryCount[Index];
end;

procedure TGeneralDataProperties.Set_BatchEntryCount(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.BatchEntryCount[Index] := Param2;
end;

function TGeneralDataProperties.Get_BatchFlag(Index: Smallint): Byte;
begin
    Result := DefaultInterface.BatchFlag[Index];
end;

procedure TGeneralDataProperties.Set_BatchFlag(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.BatchFlag[Index] := Param2;
end;

function TGeneralDataProperties.Get_BBEquityAccount: WideString;
begin
    Result := DefaultInterface.BBEquityAccount;
end;

procedure TGeneralDataProperties.Set_BBEquityAccount(const Param1: WideString);
begin
  DefaultInterface.Set_BBEquityAccount(Param1);
end;

function TGeneralDataProperties.Get_CalendarYear: Smallint;
begin
    Result := DefaultInterface.CalendarYear;
end;

procedure TGeneralDataProperties.Set_CalendarYear(Param1: Smallint);
begin
  DefaultInterface.Set_CalendarYear(Param1);
end;

function TGeneralDataProperties.Get_CurrentPeriod: Smallint;
begin
    Result := DefaultInterface.CurrentPeriod;
end;

function TGeneralDataProperties.Get_DateLastPurge: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateLastPurge;
end;

procedure TGeneralDataProperties.Set_DateLastPurge(Param1: OleVariant);
begin
  DefaultInterface.Set_DateLastPurge(Param1);
end;

function TGeneralDataProperties.Get_LastActRecAccnt: WideString;
begin
    Result := DefaultInterface.LastActRecAccnt;
end;

procedure TGeneralDataProperties.Set_LastActRecAccnt(const Param1: WideString);
begin
  DefaultInterface.Set_LastActRecAccnt(Param1);
end;

function TGeneralDataProperties.Get_LastPostOrderNumber: Integer;
begin
    Result := DefaultInterface.LastPostOrderNumber;
end;

procedure TGeneralDataProperties.Set_LastPostOrderNumber(Param1: Integer);
begin
  DefaultInterface.Set_LastPostOrderNumber(Param1);
end;

function TGeneralDataProperties.Get_NumberOfPeriods: Smallint;
begin
    Result := DefaultInterface.NumberOfPeriods;
end;

procedure TGeneralDataProperties.Set_NumberOfPeriods(Param1: Smallint);
begin
  DefaultInterface.Set_NumberOfPeriods(Param1);
end;

function TGeneralDataProperties.Get_OldestPO: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldestPO;
end;

procedure TGeneralDataProperties.Set_OldestPO(Param1: OleVariant);
begin
  DefaultInterface.Set_OldestPO(Param1);
end;

function TGeneralDataProperties.Get_OldestQuote: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldestQuote;
end;

procedure TGeneralDataProperties.Set_OldestQuote(Param1: OleVariant);
begin
  DefaultInterface.Set_OldestQuote(Param1);
end;

function TGeneralDataProperties.Get_OldestUnpostedTrx: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldestUnpostedTrx;
end;

procedure TGeneralDataProperties.Set_OldestUnpostedTrx(Param1: OleVariant);
begin
  DefaultInterface.Set_OldestUnpostedTrx(Param1);
end;

function TGeneralDataProperties.Get_PeriodEndDate(Index: Smallint): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PeriodEndDate[Index];
end;

procedure TGeneralDataProperties.Set_PeriodEndDate(Index: Smallint; Param2: OleVariant);
begin
  DefaultInterface.PeriodEndDate[Index] := Param2;
end;

function TGeneralDataProperties.Get_PeriodStartDate(Index: Smallint): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PeriodStartDate[Index];
end;

procedure TGeneralDataProperties.Set_PeriodStartDate(Index: Smallint; Param2: OleVariant);
begin
  DefaultInterface.PeriodStartDate[Index] := Param2;
end;

function TGeneralDataProperties.Get_PriorPeriod: Smallint;
begin
    Result := DefaultInterface.PriorPeriod;
end;

procedure TGeneralDataProperties.Set_PriorPeriod(Param1: Smallint);
begin
  DefaultInterface.Set_PriorPeriod(Param1);
end;

function TGeneralDataProperties.Get_RoundingAccount: WideString;
begin
    Result := DefaultInterface.RoundingAccount;
end;

procedure TGeneralDataProperties.Set_RoundingAccount(const Param1: WideString);
begin
  DefaultInterface.Set_RoundingAccount(Param1);
end;

function TGeneralDataProperties.Get_Ten99UnprintedNextYear: WordBool;
begin
    Result := DefaultInterface.Ten99UnprintedNextYear;
end;

procedure TGeneralDataProperties.Set_Ten99UnprintedNextYear(Param1: WordBool);
begin
  DefaultInterface.Set_Ten99UnprintedNextYear(Param1);
end;

function TGeneralDataProperties.Get_Ten99UnprintedThisYear: WordBool;
begin
    Result := DefaultInterface.Ten99UnprintedThisYear;
end;

procedure TGeneralDataProperties.Set_Ten99UnprintedThisYear(Param1: WordBool);
begin
  DefaultInterface.Set_Ten99UnprintedThisYear(Param1);
end;

function TGeneralDataProperties.Get_UnidentifiedAccount1: WideString;
begin
    Result := DefaultInterface.UnidentifiedAccount1;
end;

procedure TGeneralDataProperties.Set_UnidentifiedAccount1(const Param1: WideString);
begin
  DefaultInterface.Set_UnidentifiedAccount1(Param1);
end;

function TGeneralDataProperties.Get_UnidentifiedAccount2: WideString;
begin
    Result := DefaultInterface.UnidentifiedAccount2;
end;

procedure TGeneralDataProperties.Set_UnidentifiedAccount2(const Param1: WideString);
begin
  DefaultInterface.Set_UnidentifiedAccount2(Param1);
end;

function TGeneralDataProperties.Get_UnidentifiedDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.UnidentifiedDate;
end;

procedure TGeneralDataProperties.Set_UnidentifiedDate(Param1: OleVariant);
begin
  DefaultInterface.Set_UnidentifiedDate(Param1);
end;

function TGeneralDataProperties.Get_UnpostedFlag: Byte;
begin
    Result := DefaultInterface.UnpostedFlag;
end;

procedure TGeneralDataProperties.Set_UnpostedFlag(Param1: Byte);
begin
  DefaultInterface.Set_UnpostedFlag(Param1);
end;

function TGeneralDataProperties.Get_UnusedDate1: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.UnusedDate1;
end;

procedure TGeneralDataProperties.Set_UnusedDate1(Param1: OleVariant);
begin
  DefaultInterface.Set_UnusedDate1(Param1);
end;

function TGeneralDataProperties.Get_UnusedDate2: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.UnusedDate2;
end;

procedure TGeneralDataProperties.Set_UnusedDate2(Param1: OleVariant);
begin
  DefaultInterface.Set_UnusedDate2(Param1);
end;

function TGeneralDataProperties.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TGeneralDataProperties.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TGeneralDataProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TGeneralDataProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TGeneralDataProperties.Get_Unused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused3[Index];
end;

procedure TGeneralDataProperties.Set_Unused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused3[Index] := Param2;
end;

function TGeneralDataProperties.Get_Unused4: Byte;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TGeneralDataProperties.Set_Unused4(Param1: Byte);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TGeneralDataProperties.Get_Unknown5: Byte;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TGeneralDataProperties.Set_Unknown5(Param1: Byte);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

function TGeneralDataProperties.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TGeneralDataProperties.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TGeneralDataProperties.Get_Unused7(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused7[Index];
end;

procedure TGeneralDataProperties.Set_Unused7(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused7[Index] := Param2;
end;

function TGeneralDataProperties.Get_Unknown8: Byte;
begin
    Result := DefaultInterface.Unknown8;
end;

procedure TGeneralDataProperties.Set_Unknown8(Param1: Byte);
begin
  DefaultInterface.Set_Unknown8(Param1);
end;

function TGeneralDataProperties.Get_Unused9(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused9[Index];
end;

procedure TGeneralDataProperties.Set_Unused9(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused9[Index] := Param2;
end;

function TGeneralDataProperties.Get_Unused10: Byte;
begin
    Result := DefaultInterface.Unused10;
end;

procedure TGeneralDataProperties.Set_Unused10(Param1: Byte);
begin
  DefaultInterface.Set_Unused10(Param1);
end;

function TGeneralDataProperties.Get_Unknown11(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown11[Index];
end;

procedure TGeneralDataProperties.Set_Unknown11(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown11[Index] := Param2;
end;

function TGeneralDataProperties.Get_Unknown12(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown12[Index];
end;

procedure TGeneralDataProperties.Set_Unknown12(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown12[Index] := Param2;
end;

function TGeneralDataProperties.Get_Unused13(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused13[Index];
end;

procedure TGeneralDataProperties.Set_Unused13(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused13[Index] := Param2;
end;

function TGeneralDataProperties.Get_Unknown14(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown14[Index];
end;

procedure TGeneralDataProperties.Set_Unknown14(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown14[Index] := Param2;
end;

function TGeneralDataProperties.Get_Unused15(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused15[Index];
end;

procedure TGeneralDataProperties.Set_Unused15(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused15[Index] := Param2;
end;

function TGeneralDataProperties.Get_Unknown16(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown16[Index];
end;

procedure TGeneralDataProperties.Set_Unknown16(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown16[Index] := Param2;
end;

function TGeneralDataProperties.Get_Unused17(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused17[Index];
end;

procedure TGeneralDataProperties.Set_Unused17(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused17[Index] := Param2;
end;

function TGeneralDataProperties.Get_Unused18: Byte;
begin
    Result := DefaultInterface.Unused18;
end;

procedure TGeneralDataProperties.Set_Unused18(Param1: Byte);
begin
  DefaultInterface.Set_Unused18(Param1);
end;

function TGeneralDataProperties.Get_Unused19: Byte;
begin
    Result := DefaultInterface.Unused19;
end;

procedure TGeneralDataProperties.Set_Unused19(Param1: Byte);
begin
  DefaultInterface.Set_Unused19(Param1);
end;

function TGeneralDataProperties.Get_Version: WideString;
begin
    Result := DefaultInterface.Version;
end;

function TGeneralDataProperties.Get_W2UnprintedNextYear: WordBool;
begin
    Result := DefaultInterface.W2UnprintedNextYear;
end;

procedure TGeneralDataProperties.Set_W2UnprintedNextYear(Param1: WordBool);
begin
  DefaultInterface.Set_W2UnprintedNextYear(Param1);
end;

function TGeneralDataProperties.Get_W2UnprintedThisYear: WordBool;
begin
    Result := DefaultInterface.W2UnprintedThisYear;
end;

procedure TGeneralDataProperties.Set_W2UnprintedThisYear(Param1: WordBool);
begin
  DefaultInterface.Set_W2UnprintedThisYear(Param1);
end;

function TGeneralDataProperties.Get_YearlyGLPrintedNextYear: WordBool;
begin
    Result := DefaultInterface.YearlyGLPrintedNextYear;
end;

procedure TGeneralDataProperties.Set_YearlyGLPrintedNextYear(Param1: WordBool);
begin
  DefaultInterface.Set_YearlyGLPrintedNextYear(Param1);
end;

function TGeneralDataProperties.Get_YearlyGLPrintedThisYear: WordBool;
begin
    Result := DefaultInterface.YearlyGLPrintedThisYear;
end;

procedure TGeneralDataProperties.Set_YearlyGLPrintedThisYear(Param1: WordBool);
begin
  DefaultInterface.Set_YearlyGLPrintedThisYear(Param1);
end;

{$ENDIF}

class function CoSelectCustomer.Create: _SelectCustomer;
begin
  Result := CreateComObject(CLASS_SelectCustomer) as _SelectCustomer;
end;

class function CoSelectCustomer.CreateRemote(const MachineName: string): _SelectCustomer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectCustomer) as _SelectCustomer;
end;

procedure TSelectCustomer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7A34BF98-6CDB-4F5B-8CF1-4361DFA683B5}';
    IntfIID:   '{83AB11CD-FFCB-4AB6-85E0-D0B2171120A2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSelectCustomer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SelectCustomer;
  end;
end;

procedure TSelectCustomer.ConnectTo(svrIntf: _SelectCustomer);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSelectCustomer.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSelectCustomer.GetDefaultInterface: _SelectCustomer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSelectCustomer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSelectCustomerProperties.Create(Self);
{$ENDIF}
end;

destructor TSelectCustomer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSelectCustomer.GetServerProperties: TSelectCustomerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSelectCustomer.Get_CustomerID: WideString;
begin
    Result := DefaultInterface.CustomerID;
end;

procedure TSelectCustomer.Set_CustomerID(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerID(Param1);
end;

procedure TSelectCustomer.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

function TSelectCustomer.ShowOpen: OleVariant;
begin
  Result := DefaultInterface.ShowOpen;
end;

function TSelectCustomer.Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
begin
  Result := DefaultInterface.Location(hwnd, left, top);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSelectCustomerProperties.Create(AServer: TSelectCustomer);
begin
  inherited Create;
  FServer := AServer;
end;

function TSelectCustomerProperties.GetDefaultInterface: _SelectCustomer;
begin
  Result := FServer.DefaultInterface;
end;

function TSelectCustomerProperties.Get_CustomerID: WideString;
begin
    Result := DefaultInterface.CustomerID;
end;

procedure TSelectCustomerProperties.Set_CustomerID(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerID(Param1);
end;

procedure TSelectCustomerProperties.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

{$ENDIF}

class function CoSelectDate.Create: _SelectDate;
begin
  Result := CreateComObject(CLASS_SelectDate) as _SelectDate;
end;

class function CoSelectDate.CreateRemote(const MachineName: string): _SelectDate;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectDate) as _SelectDate;
end;

procedure TSelectDate.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F1D30CF3-F765-45A6-9C6E-EAEA6A172691}';
    IntfIID:   '{7131E671-4312-4354-ABAF-5E9D70118986}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSelectDate.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SelectDate;
  end;
end;

procedure TSelectDate.ConnectTo(svrIntf: _SelectDate);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSelectDate.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSelectDate.GetDefaultInterface: _SelectDate;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSelectDate.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSelectDateProperties.Create(Self);
{$ENDIF}
end;

destructor TSelectDate.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSelectDate.GetServerProperties: TSelectDateProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSelectDate.Get_SelectedDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.SelectedDate;
end;

procedure TSelectDate.Set_SelectedDate(Param1: OleVariant);
begin
  DefaultInterface.Set_SelectedDate(Param1);
end;

function TSelectDate.ShowOpen: OleVariant;
begin
  Result := DefaultInterface.ShowOpen;
end;

function TSelectDate.Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
begin
  Result := DefaultInterface.Location(hwnd, left, top);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSelectDateProperties.Create(AServer: TSelectDate);
begin
  inherited Create;
  FServer := AServer;
end;

function TSelectDateProperties.GetDefaultInterface: _SelectDate;
begin
  Result := FServer.DefaultInterface;
end;

function TSelectDateProperties.Get_SelectedDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.SelectedDate;
end;

procedure TSelectDateProperties.Set_SelectedDate(Param1: OleVariant);
begin
  DefaultInterface.Set_SelectedDate(Param1);
end;

{$ENDIF}

class function CoSelectSalesTaxCode.Create: _SelectSalesTaxCode;
begin
  Result := CreateComObject(CLASS_SelectSalesTaxCode) as _SelectSalesTaxCode;
end;

class function CoSelectSalesTaxCode.CreateRemote(const MachineName: string): _SelectSalesTaxCode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectSalesTaxCode) as _SelectSalesTaxCode;
end;

procedure TSelectSalesTaxCode.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{38A2D6FB-7787-4378-AAD0-60809156BFB3}';
    IntfIID:   '{6560FBC2-03A4-42E2-B388-FA05700FB5B3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSelectSalesTaxCode.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SelectSalesTaxCode;
  end;
end;

procedure TSelectSalesTaxCode.ConnectTo(svrIntf: _SelectSalesTaxCode);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSelectSalesTaxCode.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSelectSalesTaxCode.GetDefaultInterface: _SelectSalesTaxCode;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSelectSalesTaxCode.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSelectSalesTaxCodeProperties.Create(Self);
{$ENDIF}
end;

destructor TSelectSalesTaxCode.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSelectSalesTaxCode.GetServerProperties: TSelectSalesTaxCodeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSelectSalesTaxCode.Get_SalesTaxCode: WideString;
begin
    Result := DefaultInterface.SalesTaxCode;
end;

procedure TSelectSalesTaxCode.Set_SalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_SalesTaxCode(Param1);
end;

function TSelectSalesTaxCode.ShowOpen: OleVariant;
begin
  Result := DefaultInterface.ShowOpen;
end;

function TSelectSalesTaxCode.Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
begin
  Result := DefaultInterface.Location(hwnd, left, top);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSelectSalesTaxCodeProperties.Create(AServer: TSelectSalesTaxCode);
begin
  inherited Create;
  FServer := AServer;
end;

function TSelectSalesTaxCodeProperties.GetDefaultInterface: _SelectSalesTaxCode;
begin
  Result := FServer.DefaultInterface;
end;

function TSelectSalesTaxCodeProperties.Get_SalesTaxCode: WideString;
begin
    Result := DefaultInterface.SalesTaxCode;
end;

procedure TSelectSalesTaxCodeProperties.Set_SalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_SalesTaxCode(Param1);
end;

{$ENDIF}

class function CoDefaultShipMethod.Create: _DefaultShipMethod;
begin
  Result := CreateComObject(CLASS_DefaultShipMethod) as _DefaultShipMethod;
end;

class function CoDefaultShipMethod.CreateRemote(const MachineName: string): _DefaultShipMethod;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DefaultShipMethod) as _DefaultShipMethod;
end;

procedure TDefaultShipMethod.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{96176F30-1DDE-4677-85EE-C16CA19615DD}';
    IntfIID:   '{017D5A7E-C77F-4C99-9B8B-7FC70B4975AE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDefaultShipMethod.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DefaultShipMethod;
  end;
end;

procedure TDefaultShipMethod.ConnectTo(svrIntf: _DefaultShipMethod);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDefaultShipMethod.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDefaultShipMethod.GetDefaultInterface: _DefaultShipMethod;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDefaultShipMethod.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDefaultShipMethodProperties.Create(Self);
{$ENDIF}
end;

destructor TDefaultShipMethod.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDefaultShipMethod.GetServerProperties: TDefaultShipMethodProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDefaultShipMethod.Get_Description(Index: Smallint): WideString;
begin
    Result := DefaultInterface.Description[Index];
end;

procedure TDefaultShipMethod.Set_Description(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_Description(Index,Param2);
end;

function TDefaultShipMethod.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TDefaultShipMethod.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TDefaultShipMethod.Read: Smallint;
begin
  Result := DefaultInterface.Read;
end;

function TDefaultShipMethod.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDefaultShipMethodProperties.Create(AServer: TDefaultShipMethod);
begin
  inherited Create;
  FServer := AServer;
end;

function TDefaultShipMethodProperties.GetDefaultInterface: _DefaultShipMethod;
begin
  Result := FServer.DefaultInterface;
end;

function TDefaultShipMethodProperties.Get_Description(Index: Smallint): WideString;
begin
    Result := DefaultInterface.Description[Index];
end;

procedure TDefaultShipMethodProperties.Set_Description(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_Description(Index,Param2);
end;

{$ENDIF}

class function CoSelectSalesRep.Create: _SelectSalesRep;
begin
  Result := CreateComObject(CLASS_SelectSalesRep) as _SelectSalesRep;
end;

class function CoSelectSalesRep.CreateRemote(const MachineName: string): _SelectSalesRep;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectSalesRep) as _SelectSalesRep;
end;

procedure TSelectSalesRep.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F8191383-82A3-4958-81F1-08B3292D7A5C}';
    IntfIID:   '{420F9F2E-15E6-422E-84AA-E3CC2AD0D0B5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSelectSalesRep.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SelectSalesRep;
  end;
end;

procedure TSelectSalesRep.ConnectTo(svrIntf: _SelectSalesRep);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSelectSalesRep.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSelectSalesRep.GetDefaultInterface: _SelectSalesRep;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSelectSalesRep.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSelectSalesRepProperties.Create(Self);
{$ENDIF}
end;

destructor TSelectSalesRep.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSelectSalesRep.GetServerProperties: TSelectSalesRepProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSelectSalesRep.Get_EmployeeID: WideString;
begin
    Result := DefaultInterface.EmployeeID;
end;

procedure TSelectSalesRep.Set_EmployeeID(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeID(Param1);
end;

procedure TSelectSalesRep.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

function TSelectSalesRep.ShowOpen: OleVariant;
begin
  Result := DefaultInterface.ShowOpen;
end;

function TSelectSalesRep.Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
begin
  Result := DefaultInterface.Location(hwnd, left, top);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSelectSalesRepProperties.Create(AServer: TSelectSalesRep);
begin
  inherited Create;
  FServer := AServer;
end;

function TSelectSalesRepProperties.GetDefaultInterface: _SelectSalesRep;
begin
  Result := FServer.DefaultInterface;
end;

function TSelectSalesRepProperties.Get_EmployeeID: WideString;
begin
    Result := DefaultInterface.EmployeeID;
end;

procedure TSelectSalesRepProperties.Set_EmployeeID(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeID(Param1);
end;

procedure TSelectSalesRepProperties.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

{$ENDIF}

class function CoSelectAccount.Create: _SelectAccount;
begin
  Result := CreateComObject(CLASS_SelectAccount) as _SelectAccount;
end;

class function CoSelectAccount.CreateRemote(const MachineName: string): _SelectAccount;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectAccount) as _SelectAccount;
end;

procedure TSelectAccount.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B73AC94B-FC41-4072-B77C-FBDDEED00D88}';
    IntfIID:   '{3E7726C7-B33F-4DB8-9A41-36C1AC345AE0}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSelectAccount.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SelectAccount;
  end;
end;

procedure TSelectAccount.ConnectTo(svrIntf: _SelectAccount);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSelectAccount.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSelectAccount.GetDefaultInterface: _SelectAccount;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSelectAccount.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSelectAccountProperties.Create(Self);
{$ENDIF}
end;

destructor TSelectAccount.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSelectAccount.GetServerProperties: TSelectAccountProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSelectAccount.Get_AccountID: WideString;
begin
    Result := DefaultInterface.AccountID;
end;

procedure TSelectAccount.Set_AccountID(const Param1: WideString);
begin
  DefaultInterface.Set_AccountID(Param1);
end;

procedure TSelectAccount.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

function TSelectAccount.ShowOpen: OleVariant;
begin
  Result := DefaultInterface.ShowOpen;
end;

function TSelectAccount.Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
begin
  Result := DefaultInterface.Location(hwnd, left, top);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSelectAccountProperties.Create(AServer: TSelectAccount);
begin
  inherited Create;
  FServer := AServer;
end;

function TSelectAccountProperties.GetDefaultInterface: _SelectAccount;
begin
  Result := FServer.DefaultInterface;
end;

function TSelectAccountProperties.Get_AccountID: WideString;
begin
    Result := DefaultInterface.AccountID;
end;

procedure TSelectAccountProperties.Set_AccountID(const Param1: WideString);
begin
  DefaultInterface.Set_AccountID(Param1);
end;

procedure TSelectAccountProperties.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

{$ENDIF}

class function CoSalesJournal.Create: _SalesJournal;
begin
  Result := CreateComObject(CLASS_SalesJournal) as _SalesJournal;
end;

class function CoSalesJournal.CreateRemote(const MachineName: string): _SalesJournal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SalesJournal) as _SalesJournal;
end;

procedure TSalesJournal.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A9353DDD-90F9-4D37-A3C4-2340C238387A}';
    IntfIID:   '{0FD1CB59-0033-4910-8CED-73E4953443C2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSalesJournal.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SalesJournal;
  end;
end;

procedure TSalesJournal.ConnectTo(svrIntf: _SalesJournal);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSalesJournal.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSalesJournal.GetDefaultInterface: _SalesJournal;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSalesJournal.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSalesJournalProperties.Create(Self);
{$ENDIF}
end;

destructor TSalesJournal.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSalesJournal.GetServerProperties: TSalesJournalProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSalesJournal.Get_AmountReceived: Double;
begin
    Result := DefaultInterface.AmountReceived;
end;

procedure TSalesJournal.Set_AmountReceived(Param1: Double);
begin
  DefaultInterface.Set_AmountReceived(Param1);
end;

function TSalesJournal.Get_ARAccount: WideString;
begin
    Result := DefaultInterface.ARAccount;
end;

procedure TSalesJournal.Set_ARAccount(const Param1: WideString);
begin
  DefaultInterface.Set_ARAccount(Param1);
end;

function TSalesJournal.Get_ARAmount: Double;
begin
    Result := DefaultInterface.ARAmount;
end;

procedure TSalesJournal.Set_ARAmount(Param1: Double);
begin
  DefaultInterface.Set_ARAmount(Param1);
end;

function TSalesJournal.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TSalesJournal.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TSalesJournal.Get_CloseSalesOrder: WordBool;
begin
    Result := DefaultInterface.CloseSalesOrder;
end;

procedure TSalesJournal.Set_CloseSalesOrder(Param1: WordBool);
begin
  DefaultInterface.Set_CloseSalesOrder(Param1);
end;

function TSalesJournal.Get_CustomerIndex: Integer;
begin
    Result := DefaultInterface.CustomerIndex;
end;

procedure TSalesJournal.Set_CustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_CustomerIndex(Param1);
end;

function TSalesJournal.Get_CustomerName: WideString;
begin
    Result := DefaultInterface.CustomerName;
end;

procedure TSalesJournal.Set_CustomerName(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerName(Param1);
end;

function TSalesJournal.Get_CustomerPO: WideString;
begin
    Result := DefaultInterface.CustomerPO;
end;

procedure TSalesJournal.Set_CustomerPO(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerPO(Param1);
end;

function TSalesJournal.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TSalesJournal.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TSalesJournal.Get_DateDue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateDue;
end;

procedure TSalesJournal.Set_DateDue(Param1: OleVariant);
begin
  DefaultInterface.Set_DateDue(Param1);
end;

function TSalesJournal.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TSalesJournal.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TSalesJournal.Get_DetailApplyToSO(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailApplyToSO[Index];
end;

procedure TSalesJournal.Set_DetailApplyToSO(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailApplyToSO[Index] := Param2;
end;

function TSalesJournal.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TSalesJournal.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TSalesJournal.Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailCostOfSalesAccount[Index];
end;

procedure TSalesJournal.Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailCostOfSalesAccount(Index,Param2);
end;

function TSalesJournal.Get_DetailCostOfSalesAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailCostOfSalesAmount[Index];
end;

procedure TSalesJournal.Set_DetailCostOfSalesAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailCostOfSalesAmount[Index] := Param2;
end;

function TSalesJournal.Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailCostOfSalesTrx[Index];
end;

procedure TSalesJournal.Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailCostOfSalesTrx[Index] := Param2;
end;

function TSalesJournal.Get_DetailCustomerIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCustomerIndex[Index];
end;

procedure TSalesJournal.Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCustomerIndex[Index] := Param2;
end;

function TSalesJournal.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TSalesJournal.Set_DetailDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TSalesJournal.Get_DetailDisplayedLine(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailDisplayedLine[Index];
end;

procedure TSalesJournal.Set_DetailDisplayedLine(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailDisplayedLine[Index] := Param2;
end;

function TSalesJournal.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TSalesJournal.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TSalesJournal.Get_DetailFreightFlag(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFreightFlag[Index];
end;

procedure TSalesJournal.Set_DetailFreightFlag(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFreightFlag[Index] := Param2;
end;

function TSalesJournal.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TSalesJournal.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TSalesJournal.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TSalesJournal.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TSalesJournal.Get_DetailInventoryAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInventoryAccount[Index];
end;

procedure TSalesJournal.Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailInventoryAccount(Index,Param2);
end;

function TSalesJournal.Get_DetailInvoiceNRecord(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailInvoiceNRecord[Index];
end;

procedure TSalesJournal.Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailInvoiceNRecord[Index] := Param2;
end;

function TSalesJournal.Get_DetailInvoicePaid(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInvoicePaid[Index];
end;

procedure TSalesJournal.Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailInvoicePaid(Index,Param2);
end;

function TSalesJournal.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TSalesJournal.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TSalesJournal.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TSalesJournal.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TSalesJournal.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TSalesJournal.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TSalesJournal.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TSalesJournal.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TSalesJournal.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TSalesJournal.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TSalesJournal.Get_DetailSalesTaxAuthority(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailSalesTaxAuthority[Index];
end;

procedure TSalesJournal.Set_DetailSalesTaxAuthority(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailSalesTaxAuthority(Index,Param2);
end;

function TSalesJournal.Get_DetailSOLine(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailSOLine[Index];
end;

procedure TSalesJournal.Set_DetailSOLine(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailSOLine[Index] := Param2;
end;

function TSalesJournal.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TSalesJournal.Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TSalesJournal.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TSalesJournal.Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TSalesJournal.Get_DetailTaxType(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailTaxType[Index];
end;

procedure TSalesJournal.Set_DetailTaxType(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailTaxType[Index] := Param2;
end;

function TSalesJournal.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TSalesJournal.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TSalesJournal.Get_DetailUMGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailUMGUID[Index];
end;

procedure TSalesJournal.Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailUMGUID(Index,Param2);
end;

function TSalesJournal.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TSalesJournal.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TSalesJournal.Get_DetailUnused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused1[Index];
end;

procedure TSalesJournal.Set_DetailUnused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused1[Index] := Param2;
end;

function TSalesJournal.Get_DiscountAmount: Double;
begin
    Result := DefaultInterface.DiscountAmount;
end;

procedure TSalesJournal.Set_DiscountAmount(Param1: Double);
begin
  DefaultInterface.Set_DiscountAmount(Param1);
end;

function TSalesJournal.Get_DiscountDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DiscountDate;
end;

procedure TSalesJournal.Set_DiscountDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DiscountDate(Param1);
end;

function TSalesJournal.Get_DropShip: WordBool;
begin
    Result := DefaultInterface.DropShip;
end;

procedure TSalesJournal.Set_DropShip(Param1: WordBool);
begin
  DefaultInterface.Set_DropShip(Param1);
end;

function TSalesJournal.Get_DropShipCustomerIndex: Integer;
begin
    Result := DefaultInterface.DropShipCustomerIndex;
end;

procedure TSalesJournal.Set_DropShipCustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_DropShipCustomerIndex(Param1);
end;

function TSalesJournal.Get_DropShipInvNo: WideString;
begin
    Result := DefaultInterface.DropShipInvNo;
end;

procedure TSalesJournal.Set_DropShipInvNo(const Param1: WideString);
begin
  DefaultInterface.Set_DropShipInvNo(Param1);
end;

function TSalesJournal.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TSalesJournal.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TSalesJournal.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TSalesJournal.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TSalesJournal.Get_HasPartner: WordBool;
begin
    Result := DefaultInterface.HasPartner;
end;

procedure TSalesJournal.Set_HasPartner(Param1: WordBool);
begin
  DefaultInterface.Set_HasPartner(Param1);
end;

function TSalesJournal.Get_InternalNote: WideString;
begin
    Result := DefaultInterface.InternalNote;
end;

procedure TSalesJournal.Set_InternalNote(const Param1: WideString);
begin
  DefaultInterface.Set_InternalNote(Param1);
end;

function TSalesJournal.Get_InvoiceNumber: WideString;
begin
    Result := DefaultInterface.InvoiceNumber;
end;

procedure TSalesJournal.Set_InvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_InvoiceNumber(Param1);
end;

function TSalesJournal.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TSalesJournal.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TSalesJournal.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TSalesJournal.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TSalesJournal.Get_JrnlTypeEx: Integer;
begin
    Result := DefaultInterface.JrnlTypeEx;
end;

procedure TSalesJournal.Set_JrnlTypeEx(Param1: Integer);
begin
  DefaultInterface.Set_JrnlTypeEx(Param1);
end;

function TSalesJournal.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TSalesJournal.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TSalesJournal.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TSalesJournal.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TSalesJournal.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TSalesJournal.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TSalesJournal.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TSalesJournal.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TSalesJournal.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TSalesJournal.Get_NextInvoiceNumber: WideString;
begin
    Result := DefaultInterface.NextInvoiceNumber;
end;

procedure TSalesJournal.Set_NextInvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_NextInvoiceNumber(Param1);
end;

function TSalesJournal.Get_NextQuoteNumber: WideString;
begin
    Result := DefaultInterface.NextQuoteNumber;
end;

procedure TSalesJournal.Set_NextSONumber(const Param1: WideString);
begin
  DefaultInterface.Set_NextSONumber(Param1);
end;

function TSalesJournal.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TSalesJournal.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TSalesJournal.Get_NotePrintsAfterItems: WordBool;
begin
    Result := DefaultInterface.NotePrintsAfterItems;
end;

procedure TSalesJournal.Set_NotePrintsAfterItems(Param1: WordBool);
begin
  DefaultInterface.Set_NotePrintsAfterItems(Param1);
end;

function TSalesJournal.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TSalesJournal.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TSalesJournal.Get_NumOrderLines: Smallint;
begin
    Result := DefaultInterface.NumOrderLines;
end;

procedure TSalesJournal.Set_NumOrderLines(Param1: Smallint);
begin
  DefaultInterface.Set_NumOrderLines(Param1);
end;

function TSalesJournal.Get_PaymentDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PaymentDate;
end;

procedure TSalesJournal.Set_PaymentDate(Param1: OleVariant);
begin
  DefaultInterface.Set_PaymentDate(Param1);
end;

function TSalesJournal.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TSalesJournal.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TSalesJournal.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TSalesJournal.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TSalesJournal.Get_Prepayment: WordBool;
begin
    Result := DefaultInterface.Prepayment;
end;

procedure TSalesJournal.Set_Prepayment(Param1: WordBool);
begin
  DefaultInterface.Set_Prepayment(Param1);
end;

function TSalesJournal.Get_PrintBeforeInvoiceReference: WordBool;
begin
    Result := DefaultInterface.PrintBeforeInvoiceReference;
end;

procedure TSalesJournal.Set_PrintBeforeInvoiceReference(Param1: WordBool);
begin
  DefaultInterface.Set_PrintBeforeInvoiceReference(Param1);
end;

function TSalesJournal.Get_Quote: WordBool;
begin
    Result := DefaultInterface.Quote;
end;

procedure TSalesJournal.Set_Quote(Param1: WordBool);
begin
  DefaultInterface.Set_Quote(Param1);
end;

function TSalesJournal.Get_QuoteGoodThruDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.QuoteGoodThruDate;
end;

procedure TSalesJournal.Set_QuoteGoodThruDate(Param1: OleVariant);
begin
  DefaultInterface.Set_QuoteGoodThruDate(Param1);
end;

function TSalesJournal.Get_QuoteNumber: WideString;
begin
    Result := DefaultInterface.QuoteNumber;
end;

procedure TSalesJournal.Set_QuoteNumber(const Param1: WideString);
begin
  DefaultInterface.Set_QuoteNumber(Param1);
end;

function TSalesJournal.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TSalesJournal.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TSalesJournal.Get_RecurrenceIndex: Integer;
begin
    Result := DefaultInterface.RecurrenceIndex;
end;

procedure TSalesJournal.Set_RecurrenceIndex(Param1: Integer);
begin
  DefaultInterface.Set_RecurrenceIndex(Param1);
end;

function TSalesJournal.Get_RecurrenceRate: Smallint;
begin
    Result := DefaultInterface.RecurrenceRate;
end;

procedure TSalesJournal.Set_RecurrenceRate(Param1: Smallint);
begin
  DefaultInterface.Set_RecurrenceRate(Param1);
end;

function TSalesJournal.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TSalesJournal.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TSalesJournal.Get_ReturnAuthorization: WideString;
begin
    Result := DefaultInterface.ReturnAuthorization;
end;

procedure TSalesJournal.Set_ReturnAuthorization(const Param1: WideString);
begin
  DefaultInterface.Set_ReturnAuthorization(Param1);
end;

function TSalesJournal.Get_SalesRepID: WideString;
begin
    Result := DefaultInterface.SalesRepID;
end;

procedure TSalesJournal.Set_SalesRepID(const Param1: WideString);
begin
  DefaultInterface.Set_SalesRepID(Param1);
end;

function TSalesJournal.Get_SalesTaxCode: WideString;
begin
    Result := DefaultInterface.SalesTaxCode;
end;

procedure TSalesJournal.Set_SalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_SalesTaxCode(Param1);
end;

function TSalesJournal.Get_ShipDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShipDate;
end;

procedure TSalesJournal.Set_ShipDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ShipDate(Param1);
end;

function TSalesJournal.Get_ShipToAddr1: WideString;
begin
    Result := DefaultInterface.ShipToAddr1;
end;

procedure TSalesJournal.Set_ShipToAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr1(Param1);
end;

function TSalesJournal.Get_ShipToAddr2: WideString;
begin
    Result := DefaultInterface.ShipToAddr2;
end;

procedure TSalesJournal.Set_ShipToAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr2(Param1);
end;

function TSalesJournal.Get_ShipToCity: WideString;
begin
    Result := DefaultInterface.ShipToCity;
end;

procedure TSalesJournal.Set_ShipToCity(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCity(Param1);
end;

function TSalesJournal.Get_ShipToCountry: WideString;
begin
    Result := DefaultInterface.ShipToCountry;
end;

procedure TSalesJournal.Set_ShipToCountry(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCountry(Param1);
end;

function TSalesJournal.Get_ShipToName: WideString;
begin
    Result := DefaultInterface.ShipToName;
end;

procedure TSalesJournal.Set_ShipToName(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToName(Param1);
end;

function TSalesJournal.Get_ShipToState: WideString;
begin
    Result := DefaultInterface.ShipToState;
end;

procedure TSalesJournal.Set_ShipToState(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToState(Param1);
end;

function TSalesJournal.Get_ShipToZipCode: WideString;
begin
    Result := DefaultInterface.ShipToZipCode;
end;

procedure TSalesJournal.Set_ShipToZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToZipCode(Param1);
end;

function TSalesJournal.Get_ShipVia: WideString;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TSalesJournal.Set_ShipVia(const Param1: WideString);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TSalesJournal.Get_SONo: WideString;
begin
    Result := DefaultInterface.SONo;
end;

procedure TSalesJournal.Set_SONo(const Param1: WideString);
begin
  DefaultInterface.Set_SONo(Param1);
end;

function TSalesJournal.Get_StatementNote: WideString;
begin
    Result := DefaultInterface.StatementNote;
end;

procedure TSalesJournal.Set_StatementNote(const Param1: WideString);
begin
  DefaultInterface.Set_StatementNote(Param1);
end;

function TSalesJournal.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TSalesJournal.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TSalesJournal.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TSalesJournal.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TSalesJournal.Get_Terms: WideString;
begin
    Result := DefaultInterface.Terms;
end;

procedure TSalesJournal.Set_Terms(const Param1: WideString);
begin
  DefaultInterface.Set_Terms(Param1);
end;

function TSalesJournal.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TSalesJournal.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TSalesJournal.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TSalesJournal.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TSalesJournal.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TSalesJournal.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TSalesJournal.Get_TrxVoidedBy: Integer;
begin
    Result := DefaultInterface.TrxVoidedBy;
end;

procedure TSalesJournal.Set_TrxVoidedBy(Param1: Integer);
begin
  DefaultInterface.Set_TrxVoidedBy(Param1);
end;

function TSalesJournal.Get_Unused1: Byte;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TSalesJournal.Set_Unused1(Param1: Byte);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TSalesJournal.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TSalesJournal.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TSalesJournal.Get_Unused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused3[Index];
end;

procedure TSalesJournal.Set_Unused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused3[Index] := Param2;
end;

function TSalesJournal.Get_Unused4: Byte;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TSalesJournal.Set_Unused4(Param1: Byte);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TSalesJournal.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TSalesJournal.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TSalesJournal.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TSalesJournal.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TSalesJournal.ClearRecord: Smallint;
begin
  Result := DefaultInterface.ClearRecord;
end;

function TSalesJournal.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TSalesJournal.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TSalesJournal.GetEqual(NRecord: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(NRecord);
end;

function TSalesJournal.GetForInvoice(const Invoice: WideString): Smallint;
begin
  Result := DefaultInterface.GetForInvoice(Invoice);
end;

function TSalesJournal.IncrementBatchCount: Smallint;
begin
  Result := DefaultInterface.IncrementBatchCount;
end;

function TSalesJournal.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TSalesJournal.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TSalesJournal.ReadFirst(Period: Smallint): Smallint;
begin
  Result := DefaultInterface.ReadFirst(Period);
end;

function TSalesJournal.ReadFirstForCustomer(Index: Integer): Smallint;
begin
  Result := DefaultInterface.ReadFirstForCustomer(Index);
end;

function TSalesJournal.ReadNext: Smallint;
begin
  Result := DefaultInterface.ReadNext;
end;

function TSalesJournal.ReadNextByCustomer: Smallint;
begin
  Result := DefaultInterface.ReadNextByCustomer;
end;

function TSalesJournal.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSalesJournalProperties.Create(AServer: TSalesJournal);
begin
  inherited Create;
  FServer := AServer;
end;

function TSalesJournalProperties.GetDefaultInterface: _SalesJournal;
begin
  Result := FServer.DefaultInterface;
end;

function TSalesJournalProperties.Get_AmountReceived: Double;
begin
    Result := DefaultInterface.AmountReceived;
end;

procedure TSalesJournalProperties.Set_AmountReceived(Param1: Double);
begin
  DefaultInterface.Set_AmountReceived(Param1);
end;

function TSalesJournalProperties.Get_ARAccount: WideString;
begin
    Result := DefaultInterface.ARAccount;
end;

procedure TSalesJournalProperties.Set_ARAccount(const Param1: WideString);
begin
  DefaultInterface.Set_ARAccount(Param1);
end;

function TSalesJournalProperties.Get_ARAmount: Double;
begin
    Result := DefaultInterface.ARAmount;
end;

procedure TSalesJournalProperties.Set_ARAmount(Param1: Double);
begin
  DefaultInterface.Set_ARAmount(Param1);
end;

function TSalesJournalProperties.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TSalesJournalProperties.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TSalesJournalProperties.Get_CloseSalesOrder: WordBool;
begin
    Result := DefaultInterface.CloseSalesOrder;
end;

procedure TSalesJournalProperties.Set_CloseSalesOrder(Param1: WordBool);
begin
  DefaultInterface.Set_CloseSalesOrder(Param1);
end;

function TSalesJournalProperties.Get_CustomerIndex: Integer;
begin
    Result := DefaultInterface.CustomerIndex;
end;

procedure TSalesJournalProperties.Set_CustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_CustomerIndex(Param1);
end;

function TSalesJournalProperties.Get_CustomerName: WideString;
begin
    Result := DefaultInterface.CustomerName;
end;

procedure TSalesJournalProperties.Set_CustomerName(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerName(Param1);
end;

function TSalesJournalProperties.Get_CustomerPO: WideString;
begin
    Result := DefaultInterface.CustomerPO;
end;

procedure TSalesJournalProperties.Set_CustomerPO(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerPO(Param1);
end;

function TSalesJournalProperties.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TSalesJournalProperties.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TSalesJournalProperties.Get_DateDue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateDue;
end;

procedure TSalesJournalProperties.Set_DateDue(Param1: OleVariant);
begin
  DefaultInterface.Set_DateDue(Param1);
end;

function TSalesJournalProperties.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TSalesJournalProperties.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailApplyToSO(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailApplyToSO[Index];
end;

procedure TSalesJournalProperties.Set_DetailApplyToSO(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailApplyToSO[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TSalesJournalProperties.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailCostOfSalesAccount[Index];
end;

procedure TSalesJournalProperties.Set_DetailCostOfSalesAccount(Index: Smallint; 
                                                               const Param2: WideString);
begin
  DefaultInterface.Set_DetailCostOfSalesAccount(Index,Param2);
end;

function TSalesJournalProperties.Get_DetailCostOfSalesAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailCostOfSalesAmount[Index];
end;

procedure TSalesJournalProperties.Set_DetailCostOfSalesAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailCostOfSalesAmount[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailCostOfSalesTrx[Index];
end;

procedure TSalesJournalProperties.Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailCostOfSalesTrx[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailCustomerIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCustomerIndex[Index];
end;

procedure TSalesJournalProperties.Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCustomerIndex[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TSalesJournalProperties.Set_DetailDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TSalesJournalProperties.Get_DetailDisplayedLine(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailDisplayedLine[Index];
end;

procedure TSalesJournalProperties.Set_DetailDisplayedLine(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailDisplayedLine[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TSalesJournalProperties.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailFreightFlag(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFreightFlag[Index];
end;

procedure TSalesJournalProperties.Set_DetailFreightFlag(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFreightFlag[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TSalesJournalProperties.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TSalesJournalProperties.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TSalesJournalProperties.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TSalesJournalProperties.Get_DetailInventoryAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInventoryAccount[Index];
end;

procedure TSalesJournalProperties.Set_DetailInventoryAccount(Index: Smallint; 
                                                             const Param2: WideString);
begin
  DefaultInterface.Set_DetailInventoryAccount(Index,Param2);
end;

function TSalesJournalProperties.Get_DetailInvoiceNRecord(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailInvoiceNRecord[Index];
end;

procedure TSalesJournalProperties.Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailInvoiceNRecord[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailInvoicePaid(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInvoicePaid[Index];
end;

procedure TSalesJournalProperties.Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailInvoicePaid(Index,Param2);
end;

function TSalesJournalProperties.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TSalesJournalProperties.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TSalesJournalProperties.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TSalesJournalProperties.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TSalesJournalProperties.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TSalesJournalProperties.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailSalesTaxAuthority(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailSalesTaxAuthority[Index];
end;

procedure TSalesJournalProperties.Set_DetailSalesTaxAuthority(Index: Smallint; 
                                                              const Param2: WideString);
begin
  DefaultInterface.Set_DetailSalesTaxAuthority(Index,Param2);
end;

function TSalesJournalProperties.Get_DetailSOLine(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailSOLine[Index];
end;

procedure TSalesJournalProperties.Set_DetailSOLine(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailSOLine[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TSalesJournalProperties.Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TSalesJournalProperties.Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailTaxType(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailTaxType[Index];
end;

procedure TSalesJournalProperties.Set_DetailTaxType(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailTaxType[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TSalesJournalProperties.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailUMGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailUMGUID[Index];
end;

procedure TSalesJournalProperties.Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailUMGUID(Index,Param2);
end;

function TSalesJournalProperties.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TSalesJournalProperties.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TSalesJournalProperties.Get_DetailUnused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused1[Index];
end;

procedure TSalesJournalProperties.Set_DetailUnused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused1[Index] := Param2;
end;

function TSalesJournalProperties.Get_DiscountAmount: Double;
begin
    Result := DefaultInterface.DiscountAmount;
end;

procedure TSalesJournalProperties.Set_DiscountAmount(Param1: Double);
begin
  DefaultInterface.Set_DiscountAmount(Param1);
end;

function TSalesJournalProperties.Get_DiscountDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DiscountDate;
end;

procedure TSalesJournalProperties.Set_DiscountDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DiscountDate(Param1);
end;

function TSalesJournalProperties.Get_DropShip: WordBool;
begin
    Result := DefaultInterface.DropShip;
end;

procedure TSalesJournalProperties.Set_DropShip(Param1: WordBool);
begin
  DefaultInterface.Set_DropShip(Param1);
end;

function TSalesJournalProperties.Get_DropShipCustomerIndex: Integer;
begin
    Result := DefaultInterface.DropShipCustomerIndex;
end;

procedure TSalesJournalProperties.Set_DropShipCustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_DropShipCustomerIndex(Param1);
end;

function TSalesJournalProperties.Get_DropShipInvNo: WideString;
begin
    Result := DefaultInterface.DropShipInvNo;
end;

procedure TSalesJournalProperties.Set_DropShipInvNo(const Param1: WideString);
begin
  DefaultInterface.Set_DropShipInvNo(Param1);
end;

function TSalesJournalProperties.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TSalesJournalProperties.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TSalesJournalProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TSalesJournalProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TSalesJournalProperties.Get_HasPartner: WordBool;
begin
    Result := DefaultInterface.HasPartner;
end;

procedure TSalesJournalProperties.Set_HasPartner(Param1: WordBool);
begin
  DefaultInterface.Set_HasPartner(Param1);
end;

function TSalesJournalProperties.Get_InternalNote: WideString;
begin
    Result := DefaultInterface.InternalNote;
end;

procedure TSalesJournalProperties.Set_InternalNote(const Param1: WideString);
begin
  DefaultInterface.Set_InternalNote(Param1);
end;

function TSalesJournalProperties.Get_InvoiceNumber: WideString;
begin
    Result := DefaultInterface.InvoiceNumber;
end;

procedure TSalesJournalProperties.Set_InvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_InvoiceNumber(Param1);
end;

function TSalesJournalProperties.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TSalesJournalProperties.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TSalesJournalProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TSalesJournalProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TSalesJournalProperties.Get_JrnlTypeEx: Integer;
begin
    Result := DefaultInterface.JrnlTypeEx;
end;

procedure TSalesJournalProperties.Set_JrnlTypeEx(Param1: Integer);
begin
  DefaultInterface.Set_JrnlTypeEx(Param1);
end;

function TSalesJournalProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TSalesJournalProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TSalesJournalProperties.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TSalesJournalProperties.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TSalesJournalProperties.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TSalesJournalProperties.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TSalesJournalProperties.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TSalesJournalProperties.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TSalesJournalProperties.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TSalesJournalProperties.Get_NextInvoiceNumber: WideString;
begin
    Result := DefaultInterface.NextInvoiceNumber;
end;

procedure TSalesJournalProperties.Set_NextInvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_NextInvoiceNumber(Param1);
end;

function TSalesJournalProperties.Get_NextQuoteNumber: WideString;
begin
    Result := DefaultInterface.NextQuoteNumber;
end;

procedure TSalesJournalProperties.Set_NextSONumber(const Param1: WideString);
begin
  DefaultInterface.Set_NextSONumber(Param1);
end;

function TSalesJournalProperties.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TSalesJournalProperties.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TSalesJournalProperties.Get_NotePrintsAfterItems: WordBool;
begin
    Result := DefaultInterface.NotePrintsAfterItems;
end;

procedure TSalesJournalProperties.Set_NotePrintsAfterItems(Param1: WordBool);
begin
  DefaultInterface.Set_NotePrintsAfterItems(Param1);
end;

function TSalesJournalProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TSalesJournalProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TSalesJournalProperties.Get_NumOrderLines: Smallint;
begin
    Result := DefaultInterface.NumOrderLines;
end;

procedure TSalesJournalProperties.Set_NumOrderLines(Param1: Smallint);
begin
  DefaultInterface.Set_NumOrderLines(Param1);
end;

function TSalesJournalProperties.Get_PaymentDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PaymentDate;
end;

procedure TSalesJournalProperties.Set_PaymentDate(Param1: OleVariant);
begin
  DefaultInterface.Set_PaymentDate(Param1);
end;

function TSalesJournalProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TSalesJournalProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TSalesJournalProperties.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TSalesJournalProperties.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TSalesJournalProperties.Get_Prepayment: WordBool;
begin
    Result := DefaultInterface.Prepayment;
end;

procedure TSalesJournalProperties.Set_Prepayment(Param1: WordBool);
begin
  DefaultInterface.Set_Prepayment(Param1);
end;

function TSalesJournalProperties.Get_PrintBeforeInvoiceReference: WordBool;
begin
    Result := DefaultInterface.PrintBeforeInvoiceReference;
end;

procedure TSalesJournalProperties.Set_PrintBeforeInvoiceReference(Param1: WordBool);
begin
  DefaultInterface.Set_PrintBeforeInvoiceReference(Param1);
end;

function TSalesJournalProperties.Get_Quote: WordBool;
begin
    Result := DefaultInterface.Quote;
end;

procedure TSalesJournalProperties.Set_Quote(Param1: WordBool);
begin
  DefaultInterface.Set_Quote(Param1);
end;

function TSalesJournalProperties.Get_QuoteGoodThruDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.QuoteGoodThruDate;
end;

procedure TSalesJournalProperties.Set_QuoteGoodThruDate(Param1: OleVariant);
begin
  DefaultInterface.Set_QuoteGoodThruDate(Param1);
end;

function TSalesJournalProperties.Get_QuoteNumber: WideString;
begin
    Result := DefaultInterface.QuoteNumber;
end;

procedure TSalesJournalProperties.Set_QuoteNumber(const Param1: WideString);
begin
  DefaultInterface.Set_QuoteNumber(Param1);
end;

function TSalesJournalProperties.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TSalesJournalProperties.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TSalesJournalProperties.Get_RecurrenceIndex: Integer;
begin
    Result := DefaultInterface.RecurrenceIndex;
end;

procedure TSalesJournalProperties.Set_RecurrenceIndex(Param1: Integer);
begin
  DefaultInterface.Set_RecurrenceIndex(Param1);
end;

function TSalesJournalProperties.Get_RecurrenceRate: Smallint;
begin
    Result := DefaultInterface.RecurrenceRate;
end;

procedure TSalesJournalProperties.Set_RecurrenceRate(Param1: Smallint);
begin
  DefaultInterface.Set_RecurrenceRate(Param1);
end;

function TSalesJournalProperties.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TSalesJournalProperties.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TSalesJournalProperties.Get_ReturnAuthorization: WideString;
begin
    Result := DefaultInterface.ReturnAuthorization;
end;

procedure TSalesJournalProperties.Set_ReturnAuthorization(const Param1: WideString);
begin
  DefaultInterface.Set_ReturnAuthorization(Param1);
end;

function TSalesJournalProperties.Get_SalesRepID: WideString;
begin
    Result := DefaultInterface.SalesRepID;
end;

procedure TSalesJournalProperties.Set_SalesRepID(const Param1: WideString);
begin
  DefaultInterface.Set_SalesRepID(Param1);
end;

function TSalesJournalProperties.Get_SalesTaxCode: WideString;
begin
    Result := DefaultInterface.SalesTaxCode;
end;

procedure TSalesJournalProperties.Set_SalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_SalesTaxCode(Param1);
end;

function TSalesJournalProperties.Get_ShipDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShipDate;
end;

procedure TSalesJournalProperties.Set_ShipDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ShipDate(Param1);
end;

function TSalesJournalProperties.Get_ShipToAddr1: WideString;
begin
    Result := DefaultInterface.ShipToAddr1;
end;

procedure TSalesJournalProperties.Set_ShipToAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr1(Param1);
end;

function TSalesJournalProperties.Get_ShipToAddr2: WideString;
begin
    Result := DefaultInterface.ShipToAddr2;
end;

procedure TSalesJournalProperties.Set_ShipToAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr2(Param1);
end;

function TSalesJournalProperties.Get_ShipToCity: WideString;
begin
    Result := DefaultInterface.ShipToCity;
end;

procedure TSalesJournalProperties.Set_ShipToCity(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCity(Param1);
end;

function TSalesJournalProperties.Get_ShipToCountry: WideString;
begin
    Result := DefaultInterface.ShipToCountry;
end;

procedure TSalesJournalProperties.Set_ShipToCountry(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCountry(Param1);
end;

function TSalesJournalProperties.Get_ShipToName: WideString;
begin
    Result := DefaultInterface.ShipToName;
end;

procedure TSalesJournalProperties.Set_ShipToName(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToName(Param1);
end;

function TSalesJournalProperties.Get_ShipToState: WideString;
begin
    Result := DefaultInterface.ShipToState;
end;

procedure TSalesJournalProperties.Set_ShipToState(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToState(Param1);
end;

function TSalesJournalProperties.Get_ShipToZipCode: WideString;
begin
    Result := DefaultInterface.ShipToZipCode;
end;

procedure TSalesJournalProperties.Set_ShipToZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToZipCode(Param1);
end;

function TSalesJournalProperties.Get_ShipVia: WideString;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TSalesJournalProperties.Set_ShipVia(const Param1: WideString);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TSalesJournalProperties.Get_SONo: WideString;
begin
    Result := DefaultInterface.SONo;
end;

procedure TSalesJournalProperties.Set_SONo(const Param1: WideString);
begin
  DefaultInterface.Set_SONo(Param1);
end;

function TSalesJournalProperties.Get_StatementNote: WideString;
begin
    Result := DefaultInterface.StatementNote;
end;

procedure TSalesJournalProperties.Set_StatementNote(const Param1: WideString);
begin
  DefaultInterface.Set_StatementNote(Param1);
end;

function TSalesJournalProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TSalesJournalProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TSalesJournalProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TSalesJournalProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TSalesJournalProperties.Get_Terms: WideString;
begin
    Result := DefaultInterface.Terms;
end;

procedure TSalesJournalProperties.Set_Terms(const Param1: WideString);
begin
  DefaultInterface.Set_Terms(Param1);
end;

function TSalesJournalProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TSalesJournalProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TSalesJournalProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TSalesJournalProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TSalesJournalProperties.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TSalesJournalProperties.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TSalesJournalProperties.Get_TrxVoidedBy: Integer;
begin
    Result := DefaultInterface.TrxVoidedBy;
end;

procedure TSalesJournalProperties.Set_TrxVoidedBy(Param1: Integer);
begin
  DefaultInterface.Set_TrxVoidedBy(Param1);
end;

function TSalesJournalProperties.Get_Unused1: Byte;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TSalesJournalProperties.Set_Unused1(Param1: Byte);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TSalesJournalProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TSalesJournalProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TSalesJournalProperties.Get_Unused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused3[Index];
end;

procedure TSalesJournalProperties.Set_Unused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused3[Index] := Param2;
end;

function TSalesJournalProperties.Get_Unused4: Byte;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TSalesJournalProperties.Set_Unused4(Param1: Byte);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TSalesJournalProperties.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TSalesJournalProperties.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TSalesJournalProperties.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TSalesJournalProperties.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

{$ENDIF}

class function CoJournal.Create: _Journal;
begin
  Result := CreateComObject(CLASS_Journal) as _Journal;
end;

class function CoJournal.CreateRemote(const MachineName: string): _Journal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Journal) as _Journal;
end;

procedure TJournal.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2AC30DBA-9AE2-4B27-9577-DEF7CEBBBF1B}';
    IntfIID:   '{4B02042B-65FB-432E-B015-692AF10D2FF4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TJournal.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Journal;
  end;
end;

procedure TJournal.ConnectTo(svrIntf: _Journal);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TJournal.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TJournal.GetDefaultInterface: _Journal;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TJournal.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TJournalProperties.Create(Self);
{$ENDIF}
end;

destructor TJournal.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TJournal.GetServerProperties: TJournalProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TJournal.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TJournal.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TJournal.Delete(NRecord: Integer): Smallint;
begin
  Result := DefaultInterface.Delete(NRecord);
end;

function TJournal.CustomerInJournals(CustomerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.CustomerInJournals(CustomerIndex);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TJournalProperties.Create(AServer: TJournal);
begin
  inherited Create;
  FServer := AServer;
end;

function TJournalProperties.GetDefaultInterface: _Journal;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoAlert.Create: _Alert;
begin
  Result := CreateComObject(CLASS_Alert) as _Alert;
end;

class function CoAlert.CreateRemote(const MachineName: string): _Alert;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Alert) as _Alert;
end;

procedure TAlert.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2F4B0A29-7257-4BD2-BAE4-29839D548128}';
    IntfIID:   '{433F1659-7F2D-42DE-86CC-2FA2EB8D1AE5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAlert.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Alert;
  end;
end;

procedure TAlert.ConnectTo(svrIntf: _Alert);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAlert.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAlert.GetDefaultInterface: _Alert;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAlert.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAlertProperties.Create(Self);
{$ENDIF}
end;

destructor TAlert.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAlert.GetServerProperties: TAlertProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAlert.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TAlert.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TAlert.Get_ApplyTo: Smallint;
begin
    Result := DefaultInterface.ApplyTo;
end;

procedure TAlert.Set_ApplyTo(Param1: Smallint);
begin
  DefaultInterface.Set_ApplyTo(Param1);
end;

function TAlert.Get_ApplyToDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ApplyToDescription[Index];
end;

function TAlert.Get_Condition: Smallint;
begin
    Result := DefaultInterface.Condition;
end;

procedure TAlert.Set_Condition(Param1: Smallint);
begin
  DefaultInterface.Set_Condition(Param1);
end;

function TAlert.Get_ConditionDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ConditionDescription[Index];
end;

function TAlert.Get_Email: WordBool;
begin
    Result := DefaultInterface.Email;
end;

procedure TAlert.Set_Email(Param1: WordBool);
begin
  DefaultInterface.Set_Email(Param1);
end;

function TAlert.Get_EmailBCC: WideString;
begin
    Result := DefaultInterface.EmailBCC;
end;

procedure TAlert.Set_EmailBCC(const Param1: WideString);
begin
  DefaultInterface.Set_EmailBCC(Param1);
end;

function TAlert.Get_EmailCC: WideString;
begin
    Result := DefaultInterface.EmailCC;
end;

procedure TAlert.Set_EmailCC(const Param1: WideString);
begin
  DefaultInterface.Set_EmailCC(Param1);
end;

function TAlert.Get_EmailNote: WordBool;
begin
    Result := DefaultInterface.EmailNote;
end;

procedure TAlert.Set_EmailNote(Param1: WordBool);
begin
  DefaultInterface.Set_EmailNote(Param1);
end;

function TAlert.Get_EmailTo: WideString;
begin
    Result := DefaultInterface.EmailTo;
end;

procedure TAlert.Set_EmailTo(const Param1: WideString);
begin
  DefaultInterface.Set_EmailTo(Param1);
end;

function TAlert.Get_FromID: WideString;
begin
    Result := DefaultInterface.FromID;
end;

procedure TAlert.Set_FromID(const Param1: WideString);
begin
  DefaultInterface.Set_FromID(Param1);
end;

function TAlert.Get_Index: Smallint;
begin
    Result := DefaultInterface.Index;
end;

procedure TAlert.Set_Index(Param1: Smallint);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TAlert.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TAlert.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TAlert.Get_StandardMessage: WordBool;
begin
    Result := DefaultInterface.StandardMessage;
end;

procedure TAlert.Set_StandardMessage(Param1: WordBool);
begin
  DefaultInterface.Set_StandardMessage(Param1);
end;

function TAlert.Get_Subject: WideString;
begin
    Result := DefaultInterface.Subject;
end;

procedure TAlert.Set_Subject(const Param1: WideString);
begin
  DefaultInterface.Set_Subject(Param1);
end;

function TAlert.Get_ToID: WideString;
begin
    Result := DefaultInterface.ToID;
end;

procedure TAlert.Set_ToID(const Param1: WideString);
begin
  DefaultInterface.Set_ToID(Param1);
end;

function TAlert.Get_TypeIndex: Smallint;
begin
    Result := DefaultInterface.TypeIndex;
end;

procedure TAlert.Set_TypeIndex(Param1: Smallint);
begin
  DefaultInterface.Set_TypeIndex(Param1);
end;

function TAlert.Get_TypeDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.TypeDescription[Index];
end;

function TAlert.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TAlert.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TAlert.GetEqual(Index: Smallint): Smallint;
begin
  Result := DefaultInterface.GetEqual(Index);
end;

function TAlert.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TAlert.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TAlert.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TAlert.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TAlert.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TAlert.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TAlert.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TAlert.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAlertProperties.Create(AServer: TAlert);
begin
  inherited Create;
  FServer := AServer;
end;

function TAlertProperties.GetDefaultInterface: _Alert;
begin
  Result := FServer.DefaultInterface;
end;

function TAlertProperties.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TAlertProperties.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TAlertProperties.Get_ApplyTo: Smallint;
begin
    Result := DefaultInterface.ApplyTo;
end;

procedure TAlertProperties.Set_ApplyTo(Param1: Smallint);
begin
  DefaultInterface.Set_ApplyTo(Param1);
end;

function TAlertProperties.Get_ApplyToDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ApplyToDescription[Index];
end;

function TAlertProperties.Get_Condition: Smallint;
begin
    Result := DefaultInterface.Condition;
end;

procedure TAlertProperties.Set_Condition(Param1: Smallint);
begin
  DefaultInterface.Set_Condition(Param1);
end;

function TAlertProperties.Get_ConditionDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ConditionDescription[Index];
end;

function TAlertProperties.Get_Email: WordBool;
begin
    Result := DefaultInterface.Email;
end;

procedure TAlertProperties.Set_Email(Param1: WordBool);
begin
  DefaultInterface.Set_Email(Param1);
end;

function TAlertProperties.Get_EmailBCC: WideString;
begin
    Result := DefaultInterface.EmailBCC;
end;

procedure TAlertProperties.Set_EmailBCC(const Param1: WideString);
begin
  DefaultInterface.Set_EmailBCC(Param1);
end;

function TAlertProperties.Get_EmailCC: WideString;
begin
    Result := DefaultInterface.EmailCC;
end;

procedure TAlertProperties.Set_EmailCC(const Param1: WideString);
begin
  DefaultInterface.Set_EmailCC(Param1);
end;

function TAlertProperties.Get_EmailNote: WordBool;
begin
    Result := DefaultInterface.EmailNote;
end;

procedure TAlertProperties.Set_EmailNote(Param1: WordBool);
begin
  DefaultInterface.Set_EmailNote(Param1);
end;

function TAlertProperties.Get_EmailTo: WideString;
begin
    Result := DefaultInterface.EmailTo;
end;

procedure TAlertProperties.Set_EmailTo(const Param1: WideString);
begin
  DefaultInterface.Set_EmailTo(Param1);
end;

function TAlertProperties.Get_FromID: WideString;
begin
    Result := DefaultInterface.FromID;
end;

procedure TAlertProperties.Set_FromID(const Param1: WideString);
begin
  DefaultInterface.Set_FromID(Param1);
end;

function TAlertProperties.Get_Index: Smallint;
begin
    Result := DefaultInterface.Index;
end;

procedure TAlertProperties.Set_Index(Param1: Smallint);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TAlertProperties.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TAlertProperties.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TAlertProperties.Get_StandardMessage: WordBool;
begin
    Result := DefaultInterface.StandardMessage;
end;

procedure TAlertProperties.Set_StandardMessage(Param1: WordBool);
begin
  DefaultInterface.Set_StandardMessage(Param1);
end;

function TAlertProperties.Get_Subject: WideString;
begin
    Result := DefaultInterface.Subject;
end;

procedure TAlertProperties.Set_Subject(const Param1: WideString);
begin
  DefaultInterface.Set_Subject(Param1);
end;

function TAlertProperties.Get_ToID: WideString;
begin
    Result := DefaultInterface.ToID;
end;

procedure TAlertProperties.Set_ToID(const Param1: WideString);
begin
  DefaultInterface.Set_ToID(Param1);
end;

function TAlertProperties.Get_TypeIndex: Smallint;
begin
    Result := DefaultInterface.TypeIndex;
end;

procedure TAlertProperties.Set_TypeIndex(Param1: Smallint);
begin
  DefaultInterface.Set_TypeIndex(Param1);
end;

function TAlertProperties.Get_TypeDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.TypeDescription[Index];
end;

{$ENDIF}

class function CoEventlog.Create: _Eventlog;
begin
  Result := CreateComObject(CLASS_Eventlog) as _Eventlog;
end;

class function CoEventlog.CreateRemote(const MachineName: string): _Eventlog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Eventlog) as _Eventlog;
end;

procedure TEventlog.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C6A8701E-F407-4F58-98A9-E1A8B4275B9D}';
    IntfIID:   '{64631A2F-7752-4C6A-AB79-263E7F7CD7F8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEventlog.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Eventlog;
  end;
end;

procedure TEventlog.ConnectTo(svrIntf: _Eventlog);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEventlog.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEventlog.GetDefaultInterface: _Eventlog;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TEventlog.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TEventlogProperties.Create(Self);
{$ENDIF}
end;

destructor TEventlog.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TEventlog.GetServerProperties: TEventlogProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TEventlog.Get_BeforeAfter: WordBool;
begin
    Result := DefaultInterface.BeforeAfter;
end;

procedure TEventlog.Set_BeforeAfter(Param1: WordBool);
begin
  DefaultInterface.Set_BeforeAfter(Param1);
end;

function TEventlog.Get_Completed: WordBool;
begin
    Result := DefaultInterface.Completed;
end;

procedure TEventlog.Set_Completed(Param1: WordBool);
begin
  DefaultInterface.Set_Completed(Param1);
end;

function TEventlog.Get_CompletionDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.CompletionDate;
end;

procedure TEventlog.Set_CompletionDate(Param1: OleVariant);
begin
  DefaultInterface.Set_CompletionDate(Param1);
end;

function TEventlog.Get_Days: Smallint;
begin
    Result := DefaultInterface.Days;
end;

procedure TEventlog.Set_Days(Param1: Smallint);
begin
  DefaultInterface.Set_Days(Param1);
end;

function TEventlog.Get_Display: WordBool;
begin
    Result := DefaultInterface.Display;
end;

procedure TEventlog.Set_Display(Param1: WordBool);
begin
  DefaultInterface.Set_Display(Param1);
end;

function TEventlog.Get_EventCategory: Smallint;
begin
    Result := DefaultInterface.EventCategory;
end;

procedure TEventlog.Set_EventCategory(Param1: Smallint);
begin
  DefaultInterface.Set_EventCategory(Param1);
end;

function TEventlog.Get_EventDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EventDate;
end;

procedure TEventlog.Set_EventDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EventDate(Param1);
end;

function TEventlog.Get_EventSource: WideString;
begin
    Result := DefaultInterface.EventSource;
end;

procedure TEventlog.Set_EventSource(const Param1: WideString);
begin
  DefaultInterface.Set_EventSource(Param1);
end;

function TEventlog.Get_EventType: Smallint;
begin
    Result := DefaultInterface.EventType;
end;

procedure TEventlog.Set_EventType(Param1: Smallint);
begin
  DefaultInterface.Set_EventType(Param1);
end;

function TEventlog.Get_ID: WideString;
begin
    Result := DefaultInterface.ID;
end;

procedure TEventlog.Set_ID(const Param1: WideString);
begin
  DefaultInterface.Set_ID(Param1);
end;

function TEventlog.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TEventlog.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TEventlog.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TEventlog.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TEventlog.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TEventlog.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TEventlog.Get_LineNumber: Smallint;
begin
    Result := DefaultInterface.LineNumber;
end;

procedure TEventlog.Set_LineNumber(Param1: Smallint);
begin
  DefaultInterface.Set_LineNumber(Param1);
end;

function TEventlog.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TEventlog.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TEventlog.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TEventlog.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TEventlog.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TEventlog.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TEventlog.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TEventlog.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TEventlog.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TEventlog.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TEventlog.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TEventlog.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TEventlog.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TEventlog.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TEventlog.Get_Unused2: Byte;
begin
    Result := DefaultInterface.Unused2;
end;

procedure TEventlog.Set_Unused2(Param1: Byte);
begin
  DefaultInterface.Set_Unused2(Param1);
end;

function TEventlog.Get_Unused3: Byte;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TEventlog.Set_Unused3(Param1: Byte);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TEventlog.Get_Unused4: Smallint;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TEventlog.Set_Unused4(Param1: Smallint);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TEventlog.Get_Unknown5: Integer;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TEventlog.Set_Unknown5(Param1: Integer);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

function TEventlog.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TEventlog.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TEventlog.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TEventlog.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TEventlog.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TEventlog.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TEventlog.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TEventlog.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TEventlog.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TEventlog.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TEventlogProperties.Create(AServer: TEventlog);
begin
  inherited Create;
  FServer := AServer;
end;

function TEventlogProperties.GetDefaultInterface: _Eventlog;
begin
  Result := FServer.DefaultInterface;
end;

function TEventlogProperties.Get_BeforeAfter: WordBool;
begin
    Result := DefaultInterface.BeforeAfter;
end;

procedure TEventlogProperties.Set_BeforeAfter(Param1: WordBool);
begin
  DefaultInterface.Set_BeforeAfter(Param1);
end;

function TEventlogProperties.Get_Completed: WordBool;
begin
    Result := DefaultInterface.Completed;
end;

procedure TEventlogProperties.Set_Completed(Param1: WordBool);
begin
  DefaultInterface.Set_Completed(Param1);
end;

function TEventlogProperties.Get_CompletionDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.CompletionDate;
end;

procedure TEventlogProperties.Set_CompletionDate(Param1: OleVariant);
begin
  DefaultInterface.Set_CompletionDate(Param1);
end;

function TEventlogProperties.Get_Days: Smallint;
begin
    Result := DefaultInterface.Days;
end;

procedure TEventlogProperties.Set_Days(Param1: Smallint);
begin
  DefaultInterface.Set_Days(Param1);
end;

function TEventlogProperties.Get_Display: WordBool;
begin
    Result := DefaultInterface.Display;
end;

procedure TEventlogProperties.Set_Display(Param1: WordBool);
begin
  DefaultInterface.Set_Display(Param1);
end;

function TEventlogProperties.Get_EventCategory: Smallint;
begin
    Result := DefaultInterface.EventCategory;
end;

procedure TEventlogProperties.Set_EventCategory(Param1: Smallint);
begin
  DefaultInterface.Set_EventCategory(Param1);
end;

function TEventlogProperties.Get_EventDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EventDate;
end;

procedure TEventlogProperties.Set_EventDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EventDate(Param1);
end;

function TEventlogProperties.Get_EventSource: WideString;
begin
    Result := DefaultInterface.EventSource;
end;

procedure TEventlogProperties.Set_EventSource(const Param1: WideString);
begin
  DefaultInterface.Set_EventSource(Param1);
end;

function TEventlogProperties.Get_EventType: Smallint;
begin
    Result := DefaultInterface.EventType;
end;

procedure TEventlogProperties.Set_EventType(Param1: Smallint);
begin
  DefaultInterface.Set_EventType(Param1);
end;

function TEventlogProperties.Get_ID: WideString;
begin
    Result := DefaultInterface.ID;
end;

procedure TEventlogProperties.Set_ID(const Param1: WideString);
begin
  DefaultInterface.Set_ID(Param1);
end;

function TEventlogProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TEventlogProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TEventlogProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TEventlogProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TEventlogProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TEventlogProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TEventlogProperties.Get_LineNumber: Smallint;
begin
    Result := DefaultInterface.LineNumber;
end;

procedure TEventlogProperties.Set_LineNumber(Param1: Smallint);
begin
  DefaultInterface.Set_LineNumber(Param1);
end;

function TEventlogProperties.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TEventlogProperties.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TEventlogProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TEventlogProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TEventlogProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TEventlogProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TEventlogProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TEventlogProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TEventlogProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TEventlogProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TEventlogProperties.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TEventlogProperties.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TEventlogProperties.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TEventlogProperties.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TEventlogProperties.Get_Unused2: Byte;
begin
    Result := DefaultInterface.Unused2;
end;

procedure TEventlogProperties.Set_Unused2(Param1: Byte);
begin
  DefaultInterface.Set_Unused2(Param1);
end;

function TEventlogProperties.Get_Unused3: Byte;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TEventlogProperties.Set_Unused3(Param1: Byte);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TEventlogProperties.Get_Unused4: Smallint;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TEventlogProperties.Set_Unused4(Param1: Smallint);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TEventlogProperties.Get_Unknown5: Integer;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TEventlogProperties.Set_Unknown5(Param1: Integer);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

{$ENDIF}

class function CoAuditTrail.Create: _AuditTrail;
begin
  Result := CreateComObject(CLASS_AuditTrail) as _AuditTrail;
end;

class function CoAuditTrail.CreateRemote(const MachineName: string): _AuditTrail;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AuditTrail) as _AuditTrail;
end;

procedure TAuditTrail.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2A935BE4-95AA-4DAA-91AA-150C7A3B0E1E}';
    IntfIID:   '{0308E528-3721-4B89-95CB-31649F5CDCD4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAuditTrail.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _AuditTrail;
  end;
end;

procedure TAuditTrail.ConnectTo(svrIntf: _AuditTrail);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAuditTrail.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAuditTrail.GetDefaultInterface: _AuditTrail;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAuditTrail.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAuditTrailProperties.Create(Self);
{$ENDIF}
end;

destructor TAuditTrail.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAuditTrail.GetServerProperties: TAuditTrailProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAuditTrail.Get_ActionCode: Smallint;
begin
    Result := DefaultInterface.ActionCode;
end;

procedure TAuditTrail.Set_ActionCode(Param1: Smallint);
begin
  DefaultInterface.Set_ActionCode(Param1);
end;

function TAuditTrail.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TAuditTrail.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TAuditTrail.Get_EntryDate: TDateTime;
begin
    Result := DefaultInterface.EntryDate;
end;

procedure TAuditTrail.Set_EntryDate(Param1: TDateTime);
begin
  DefaultInterface.Set_EntryDate(Param1);
end;

function TAuditTrail.Get_EntryTime: TDateTime;
begin
    Result := DefaultInterface.EntryTime;
end;

procedure TAuditTrail.Set_EntryTime(Param1: TDateTime);
begin
  DefaultInterface.Set_EntryTime(Param1);
end;

function TAuditTrail.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TAuditTrail.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TAuditTrail.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TAuditTrail.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TAuditTrail.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TAuditTrail.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TAuditTrail.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TAuditTrail.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TAuditTrail.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TAuditTrail.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TAuditTrail.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TAuditTrail.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TAuditTrail.Get_TransactionID: WideString;
begin
    Result := DefaultInterface.TransactionID;
end;

procedure TAuditTrail.Set_TransactionID(const Param1: WideString);
begin
  DefaultInterface.Set_TransactionID(Param1);
end;

function TAuditTrail.Get_TransactionReference: WideString;
begin
    Result := DefaultInterface.TransactionReference;
end;

procedure TAuditTrail.Set_TransactionReference(const Param1: WideString);
begin
  DefaultInterface.Set_TransactionReference(Param1);
end;

function TAuditTrail.Get_TransactionType: Smallint;
begin
    Result := DefaultInterface.TransactionType;
end;

procedure TAuditTrail.Set_TransactionType(Param1: Smallint);
begin
  DefaultInterface.Set_TransactionType(Param1);
end;

function TAuditTrail.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TAuditTrail.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TAuditTrail.Get_Unknown1: Smallint;
begin
    Result := DefaultInterface.Unknown1;
end;

procedure TAuditTrail.Set_Unknown1(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown1(Param1);
end;

function TAuditTrail.Get_UserID: WideString;
begin
    Result := DefaultInterface.UserID;
end;

procedure TAuditTrail.Set_UserID(const Param1: WideString);
begin
  DefaultInterface.Set_UserID(Param1);
end;

function TAuditTrail.Get_WindowName: WideString;
begin
    Result := DefaultInterface.WindowName;
end;

procedure TAuditTrail.Set_WindowName(const Param1: WideString);
begin
  DefaultInterface.Set_WindowName(Param1);
end;

function TAuditTrail.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TAuditTrail.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TAuditTrail.GetFirst: Smallint;
begin
  Result := DefaultInterface.GetFirst;
end;

function TAuditTrail.GetLast: Smallint;
begin
  Result := DefaultInterface.GetLast;
end;

function TAuditTrail.GetNext: Smallint;
begin
  Result := DefaultInterface.GetNext;
end;

function TAuditTrail.GetPrevious: Smallint;
begin
  Result := DefaultInterface.GetPrevious;
end;

function TAuditTrail.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TAuditTrail.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TAuditTrail.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TAuditTrail.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TAuditTrail.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TAuditTrail.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TAuditTrail.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TAuditTrail.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAuditTrailProperties.Create(AServer: TAuditTrail);
begin
  inherited Create;
  FServer := AServer;
end;

function TAuditTrailProperties.GetDefaultInterface: _AuditTrail;
begin
  Result := FServer.DefaultInterface;
end;

function TAuditTrailProperties.Get_ActionCode: Smallint;
begin
    Result := DefaultInterface.ActionCode;
end;

procedure TAuditTrailProperties.Set_ActionCode(Param1: Smallint);
begin
  DefaultInterface.Set_ActionCode(Param1);
end;

function TAuditTrailProperties.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TAuditTrailProperties.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TAuditTrailProperties.Get_EntryDate: TDateTime;
begin
    Result := DefaultInterface.EntryDate;
end;

procedure TAuditTrailProperties.Set_EntryDate(Param1: TDateTime);
begin
  DefaultInterface.Set_EntryDate(Param1);
end;

function TAuditTrailProperties.Get_EntryTime: TDateTime;
begin
    Result := DefaultInterface.EntryTime;
end;

procedure TAuditTrailProperties.Set_EntryTime(Param1: TDateTime);
begin
  DefaultInterface.Set_EntryTime(Param1);
end;

function TAuditTrailProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TAuditTrailProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TAuditTrailProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TAuditTrailProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TAuditTrailProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TAuditTrailProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TAuditTrailProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TAuditTrailProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TAuditTrailProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TAuditTrailProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TAuditTrailProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TAuditTrailProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TAuditTrailProperties.Get_TransactionID: WideString;
begin
    Result := DefaultInterface.TransactionID;
end;

procedure TAuditTrailProperties.Set_TransactionID(const Param1: WideString);
begin
  DefaultInterface.Set_TransactionID(Param1);
end;

function TAuditTrailProperties.Get_TransactionReference: WideString;
begin
    Result := DefaultInterface.TransactionReference;
end;

procedure TAuditTrailProperties.Set_TransactionReference(const Param1: WideString);
begin
  DefaultInterface.Set_TransactionReference(Param1);
end;

function TAuditTrailProperties.Get_TransactionType: Smallint;
begin
    Result := DefaultInterface.TransactionType;
end;

procedure TAuditTrailProperties.Set_TransactionType(Param1: Smallint);
begin
  DefaultInterface.Set_TransactionType(Param1);
end;

function TAuditTrailProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TAuditTrailProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TAuditTrailProperties.Get_Unknown1: Smallint;
begin
    Result := DefaultInterface.Unknown1;
end;

procedure TAuditTrailProperties.Set_Unknown1(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown1(Param1);
end;

function TAuditTrailProperties.Get_UserID: WideString;
begin
    Result := DefaultInterface.UserID;
end;

procedure TAuditTrailProperties.Set_UserID(const Param1: WideString);
begin
  DefaultInterface.Set_UserID(Param1);
end;

function TAuditTrailProperties.Get_WindowName: WideString;
begin
    Result := DefaultInterface.WindowName;
end;

procedure TAuditTrailProperties.Set_WindowName(const Param1: WideString);
begin
  DefaultInterface.Set_WindowName(Param1);
end;

{$ENDIF}

class function CoCost.Create: _Cost;
begin
  Result := CreateComObject(CLASS_Cost) as _Cost;
end;

class function CoCost.CreateRemote(const MachineName: string): _Cost;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Cost) as _Cost;
end;

procedure TCost.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0C0EF76E-4E44-465E-B2B1-8049BF9D37F8}';
    IntfIID:   '{76C49CA7-1F47-49EA-A842-3E6E79C2AAA6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCost.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Cost;
  end;
end;

procedure TCost.ConnectTo(svrIntf: _Cost);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCost.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCost.GetDefaultInterface: _Cost;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCost.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCostProperties.Create(Self);
{$ENDIF}
end;

destructor TCost.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCost.GetServerProperties: TCostProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCost.Get_CostID: WideString;
begin
    Result := DefaultInterface.CostID;
end;

procedure TCost.Set_CostID(const Param1: WideString);
begin
  DefaultInterface.Set_CostID(Param1);
end;

function TCost.Get_CostType: WideString;
begin
    Result := DefaultInterface.CostType;
end;

procedure TCost.Set_CostType(const Param1: WideString);
begin
  DefaultInterface.Set_CostType(Param1);
end;

function TCost.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TCost.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TCost.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TCost.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TCost.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TCost.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TCost.Get_Unknown1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown1[Index];
end;

procedure TCost.Set_Unknown1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown1[Index] := Param2;
end;

function TCost.Get_Unknown2: WordBool;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TCost.Set_Unknown2(Param1: WordBool);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TCost.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TCost.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TCost.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TCost.GetEqual(const ID: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(ID);
end;

function TCost.GetForIndex(Index: Integer): Smallint;
begin
  Result := DefaultInterface.GetForIndex(Index);
end;

function TCost.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TCost.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TCost.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TCost.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TCost.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TCost.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TCost.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCostProperties.Create(AServer: TCost);
begin
  inherited Create;
  FServer := AServer;
end;

function TCostProperties.GetDefaultInterface: _Cost;
begin
  Result := FServer.DefaultInterface;
end;

function TCostProperties.Get_CostID: WideString;
begin
    Result := DefaultInterface.CostID;
end;

procedure TCostProperties.Set_CostID(const Param1: WideString);
begin
  DefaultInterface.Set_CostID(Param1);
end;

function TCostProperties.Get_CostType: WideString;
begin
    Result := DefaultInterface.CostType;
end;

procedure TCostProperties.Set_CostType(const Param1: WideString);
begin
  DefaultInterface.Set_CostType(Param1);
end;

function TCostProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TCostProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TCostProperties.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TCostProperties.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TCostProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TCostProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TCostProperties.Get_Unknown1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown1[Index];
end;

procedure TCostProperties.Set_Unknown1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown1[Index] := Param2;
end;

function TCostProperties.Get_Unknown2: WordBool;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TCostProperties.Set_Unknown2(Param1: WordBool);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

{$ENDIF}

class function CoAssemblyAdjustmentJournal.Create: _AssemblyAdjustmentJournal;
begin
  Result := CreateComObject(CLASS_AssemblyAdjustmentJournal) as _AssemblyAdjustmentJournal;
end;

class function CoAssemblyAdjustmentJournal.CreateRemote(const MachineName: string): _AssemblyAdjustmentJournal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AssemblyAdjustmentJournal) as _AssemblyAdjustmentJournal;
end;

procedure TAssemblyAdjustmentJournal.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{55D6A38F-70CC-47C9-AE66-8AEC5E635DF0}';
    IntfIID:   '{183FA8D7-6686-4A5A-89D8-39E3E675E66D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAssemblyAdjustmentJournal.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _AssemblyAdjustmentJournal;
  end;
end;

procedure TAssemblyAdjustmentJournal.ConnectTo(svrIntf: _AssemblyAdjustmentJournal);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAssemblyAdjustmentJournal.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAssemblyAdjustmentJournal.GetDefaultInterface: _AssemblyAdjustmentJournal;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAssemblyAdjustmentJournal.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAssemblyAdjustmentJournalProperties.Create(Self);
{$ENDIF}
end;

destructor TAssemblyAdjustmentJournal.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAssemblyAdjustmentJournal.GetServerProperties: TAssemblyAdjustmentJournalProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAssemblyAdjustmentJournal.Get_AmountAdjusted: Double;
begin
    Result := DefaultInterface.AmountAdjusted;
end;

procedure TAssemblyAdjustmentJournal.Set_AmountAdjusted(Param1: Double);
begin
  DefaultInterface.Set_AmountAdjusted(Param1);
end;

function TAssemblyAdjustmentJournal.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TAssemblyAdjustmentJournal.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TAssemblyAdjustmentJournal.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TAssemblyAdjustmentJournal.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TAssemblyAdjustmentJournal.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_DetailComponentItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailComponentItemIndex[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailComponentItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailComponentItemIndex[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailCostOfSalesTrx[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailCostOfSalesTrx[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TAssemblyAdjustmentJournal.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TAssemblyAdjustmentJournal.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TAssemblyAdjustmentJournal.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TAssemblyAdjustmentJournal.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TAssemblyAdjustmentJournal.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TAssemblyAdjustmentJournal.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TAssemblyAdjustmentJournal.Get_InventoryAccount: WideString;
begin
    Result := DefaultInterface.InventoryAccount;
end;

procedure TAssemblyAdjustmentJournal.Set_InventoryAccount(const Param1: WideString);
begin
  DefaultInterface.Set_InventoryAccount(Param1);
end;

function TAssemblyAdjustmentJournal.Get_ItemIndex: Integer;
begin
    Result := DefaultInterface.ItemIndex;
end;

procedure TAssemblyAdjustmentJournal.Set_ItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_ItemIndex(Param1);
end;

function TAssemblyAdjustmentJournal.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TAssemblyAdjustmentJournal.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TAssemblyAdjustmentJournal.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TAssemblyAdjustmentJournal.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TAssemblyAdjustmentJournal.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TAssemblyAdjustmentJournal.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TAssemblyAdjustmentJournal.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TAssemblyAdjustmentJournal.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TAssemblyAdjustmentJournal.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TAssemblyAdjustmentJournal.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TAssemblyAdjustmentJournal.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TAssemblyAdjustmentJournal.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TAssemblyAdjustmentJournal.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TAssemblyAdjustmentJournal.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TAssemblyAdjustmentJournal.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TAssemblyAdjustmentJournal.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TAssemblyAdjustmentJournal.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TAssemblyAdjustmentJournal.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TAssemblyAdjustmentJournal.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TAssemblyAdjustmentJournal.Get_QuantityBuilt: Double;
begin
    Result := DefaultInterface.QuantityBuilt;
end;

procedure TAssemblyAdjustmentJournal.Set_QuantityBuilt(Param1: Double);
begin
  DefaultInterface.Set_QuantityBuilt(Param1);
end;

function TAssemblyAdjustmentJournal.Get_ReasonForBuild: WideString;
begin
    Result := DefaultInterface.ReasonForBuild;
end;

procedure TAssemblyAdjustmentJournal.Set_ReasonForBuild(const Param1: WideString);
begin
  DefaultInterface.Set_ReasonForBuild(Param1);
end;

function TAssemblyAdjustmentJournal.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TAssemblyAdjustmentJournal.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TAssemblyAdjustmentJournal.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TAssemblyAdjustmentJournal.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TAssemblyAdjustmentJournal.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TAssemblyAdjustmentJournal.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TAssemblyAdjustmentJournal.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TAssemblyAdjustmentJournal.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TAssemblyAdjustmentJournal.Get_SuperRecordNumber: Byte;
begin
    Result := DefaultInterface.SuperRecordNumber;
end;

procedure TAssemblyAdjustmentJournal.Set_SuperRecordNumber(Param1: Byte);
begin
  DefaultInterface.Set_SuperRecordNumber(Param1);
end;

function TAssemblyAdjustmentJournal.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TAssemblyAdjustmentJournal.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TAssemblyAdjustmentJournal.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TAssemblyAdjustmentJournal.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TAssemblyAdjustmentJournal.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TAssemblyAdjustmentJournal.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TAssemblyAdjustmentJournal.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.Get_Unknown3: Smallint;
begin
    Result := DefaultInterface.Unknown3;
end;

procedure TAssemblyAdjustmentJournal.Set_Unknown3(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown3(Param1);
end;

function TAssemblyAdjustmentJournal.Get_Unused4: Smallint;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TAssemblyAdjustmentJournal.Set_Unused4(Param1: Smallint);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TAssemblyAdjustmentJournal.Get_Unknown5: Smallint;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TAssemblyAdjustmentJournal.Set_Unknown5(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

function TAssemblyAdjustmentJournal.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TAssemblyAdjustmentJournal.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TAssemblyAdjustmentJournal.ClearRecord: Smallint;
begin
  Result := DefaultInterface.ClearRecord;
end;

function TAssemblyAdjustmentJournal.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TAssemblyAdjustmentJournal.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TAssemblyAdjustmentJournal.GetEqual(NRecord: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(NRecord);
end;

function TAssemblyAdjustmentJournal.IncrementBatchCount: Smallint;
begin
  Result := DefaultInterface.IncrementBatchCount;
end;

function TAssemblyAdjustmentJournal.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TAssemblyAdjustmentJournal.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TAssemblyAdjustmentJournal.ReadFirst(Period: Smallint): Smallint;
begin
  Result := DefaultInterface.ReadFirst(Period);
end;

function TAssemblyAdjustmentJournal.ReadNext: Smallint;
begin
  Result := DefaultInterface.ReadNext;
end;

function TAssemblyAdjustmentJournal.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAssemblyAdjustmentJournalProperties.Create(AServer: TAssemblyAdjustmentJournal);
begin
  inherited Create;
  FServer := AServer;
end;

function TAssemblyAdjustmentJournalProperties.GetDefaultInterface: _AssemblyAdjustmentJournal;
begin
  Result := FServer.DefaultInterface;
end;

function TAssemblyAdjustmentJournalProperties.Get_AmountAdjusted: Double;
begin
    Result := DefaultInterface.AmountAdjusted;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_AmountAdjusted(Param1: Double);
begin
  DefaultInterface.Set_AmountAdjusted(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailComponentItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailComponentItemIndex[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailComponentItemIndex(Index: Smallint; 
                                                                            Param2: Integer);
begin
  DefaultInterface.DetailComponentItemIndex[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailCostOfSalesTrx[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailCostOfSalesTrx(Index: Smallint; 
                                                                        Param2: WordBool);
begin
  DefaultInterface.DetailCostOfSalesTrx[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailDescription(Index: Smallint; 
                                                                     const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailGLAccount(Index: Smallint; 
                                                                   const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailGUID(Index: Smallint; 
                                                              const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailStockingQuantity(Index: Smallint; 
                                                                          Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailStockingUnitPrice(Index: Smallint; 
                                                                           Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_InventoryAccount: WideString;
begin
    Result := DefaultInterface.InventoryAccount;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_InventoryAccount(const Param1: WideString);
begin
  DefaultInterface.Set_InventoryAccount(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_ItemIndex: Integer;
begin
    Result := DefaultInterface.ItemIndex;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_ItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_ItemIndex(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TAssemblyAdjustmentJournalProperties.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TAssemblyAdjustmentJournalProperties.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TAssemblyAdjustmentJournalProperties.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_QuantityBuilt: Double;
begin
    Result := DefaultInterface.QuantityBuilt;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_QuantityBuilt(Param1: Double);
begin
  DefaultInterface.Set_QuantityBuilt(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_ReasonForBuild: WideString;
begin
    Result := DefaultInterface.ReasonForBuild;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_ReasonForBuild(const Param1: WideString);
begin
  DefaultInterface.Set_ReasonForBuild(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_SuperRecordNumber: Byte;
begin
    Result := DefaultInterface.SuperRecordNumber;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_SuperRecordNumber(Param1: Byte);
begin
  DefaultInterface.Set_SuperRecordNumber(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TAssemblyAdjustmentJournalProperties.Get_Unknown3: Smallint;
begin
    Result := DefaultInterface.Unknown3;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_Unknown3(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown3(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_Unused4: Smallint;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_Unused4(Param1: Smallint);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_Unknown5: Smallint;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TAssemblyAdjustmentJournalProperties.Set_Unknown5(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

function TAssemblyAdjustmentJournalProperties.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TAssemblyAdjustmentJournalProperties.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

{$ENDIF}

class function CoFAAsset.Create: _FAAsset;
begin
  Result := CreateComObject(CLASS_FAAsset) as _FAAsset;
end;

class function CoFAAsset.CreateRemote(const MachineName: string): _FAAsset;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FAAsset) as _FAAsset;
end;

procedure TFAAsset.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2794648E-10A1-44A1-9103-0A87439A7081}';
    IntfIID:   '{F2C0D9E2-6F81-49A1-B846-C1F5740B97A5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFAAsset.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _FAAsset;
  end;
end;

procedure TFAAsset.ConnectTo(svrIntf: _FAAsset);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFAAsset.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFAAsset.GetDefaultInterface: _FAAsset;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFAAsset.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFAAssetProperties.Create(Self);
{$ENDIF}
end;

destructor TFAAsset.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFAAsset.GetServerProperties: TFAAssetProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFAAsset.Get_Acquired: TDateTime;
begin
    Result := DefaultInterface.Acquired;
end;

procedure TFAAsset.Set_Acquired(Param1: TDateTime);
begin
  DefaultInterface.Set_Acquired(Param1);
end;

function TFAAsset.Get_AssetID: Integer;
begin
    Result := DefaultInterface.AssetID;
end;

procedure TFAAsset.Set_AssetID(Param1: Integer);
begin
  DefaultInterface.Set_AssetID(Param1);
end;

function TFAAsset.Get_Class_: WideString;
begin
    Result := DefaultInterface.Class_;
end;

procedure TFAAsset.Set_Class_(const Param1: WideString);
begin
  DefaultInterface.Set_Class_(Param1);
end;

function TFAAsset.Get_Department: WideString;
begin
    Result := DefaultInterface.Department;
end;

procedure TFAAsset.Set_Department(const Param1: WideString);
begin
  DefaultInterface.Set_Department(Param1);
end;

function TFAAsset.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TFAAsset.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TFAAsset.Get_GLAssetAccount: WideString;
begin
    Result := DefaultInterface.GLAssetAccount;
end;

procedure TFAAsset.Set_GLAssetAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLAssetAccount(Param1);
end;

function TFAAsset.Get_GLAccumulatedDepreciationAccount: WideString;
begin
    Result := DefaultInterface.GLAccumulatedDepreciationAccount;
end;

procedure TFAAsset.Set_GLAccumulatedDepreciationAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLAccumulatedDepreciationAccount(Param1);
end;

function TFAAsset.Get_GLDepreciationExpenseAccount: WideString;
begin
    Result := DefaultInterface.GLDepreciationExpenseAccount;
end;

procedure TFAAsset.Set_GLDepreciationExpenseAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLDepreciationExpenseAccount(Param1);
end;

function TFAAsset.Get_LastAssetID: Integer;
begin
    Result := DefaultInterface.LastAssetID;
end;

function TFAAsset.Get_Listed: WordBool;
begin
    Result := DefaultInterface.Listed;
end;

procedure TFAAsset.Set_Listed(Param1: WordBool);
begin
  DefaultInterface.Set_Listed(Param1);
end;

function TFAAsset.Get_Location: WideString;
begin
    Result := DefaultInterface.Location;
end;

procedure TFAAsset.Set_Location(const Param1: WideString);
begin
  DefaultInterface.Set_Location(Param1);
end;

function TFAAsset.Get_NewFlag: WordBool;
begin
    Result := DefaultInterface.NewFlag;
end;

procedure TFAAsset.Set_NewFlag(Param1: WordBool);
begin
  DefaultInterface.Set_NewFlag(Param1);
end;

function TFAAsset.Get_SerialNumber: WideString;
begin
    Result := DefaultInterface.SerialNumber;
end;

procedure TFAAsset.Set_SerialNumber(const Param1: WideString);
begin
  DefaultInterface.Set_SerialNumber(Param1);
end;

function TFAAsset.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TFAAsset.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TFAAsset.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TFAAsset.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TFAAsset.Get_Unused3: Smallint;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TFAAsset.Set_Unused3(Param1: Smallint);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TFAAsset.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TFAAsset.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TFAAsset.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TFAAsset.GetEqual(ID: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(ID);
end;

function TFAAsset.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TFAAsset.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TFAAsset.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TFAAsset.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TFAAsset.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TFAAsset.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TFAAsset.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFAAssetProperties.Create(AServer: TFAAsset);
begin
  inherited Create;
  FServer := AServer;
end;

function TFAAssetProperties.GetDefaultInterface: _FAAsset;
begin
  Result := FServer.DefaultInterface;
end;

function TFAAssetProperties.Get_Acquired: TDateTime;
begin
    Result := DefaultInterface.Acquired;
end;

procedure TFAAssetProperties.Set_Acquired(Param1: TDateTime);
begin
  DefaultInterface.Set_Acquired(Param1);
end;

function TFAAssetProperties.Get_AssetID: Integer;
begin
    Result := DefaultInterface.AssetID;
end;

procedure TFAAssetProperties.Set_AssetID(Param1: Integer);
begin
  DefaultInterface.Set_AssetID(Param1);
end;

function TFAAssetProperties.Get_Class_: WideString;
begin
    Result := DefaultInterface.Class_;
end;

procedure TFAAssetProperties.Set_Class_(const Param1: WideString);
begin
  DefaultInterface.Set_Class_(Param1);
end;

function TFAAssetProperties.Get_Department: WideString;
begin
    Result := DefaultInterface.Department;
end;

procedure TFAAssetProperties.Set_Department(const Param1: WideString);
begin
  DefaultInterface.Set_Department(Param1);
end;

function TFAAssetProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TFAAssetProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TFAAssetProperties.Get_GLAssetAccount: WideString;
begin
    Result := DefaultInterface.GLAssetAccount;
end;

procedure TFAAssetProperties.Set_GLAssetAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLAssetAccount(Param1);
end;

function TFAAssetProperties.Get_GLAccumulatedDepreciationAccount: WideString;
begin
    Result := DefaultInterface.GLAccumulatedDepreciationAccount;
end;

procedure TFAAssetProperties.Set_GLAccumulatedDepreciationAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLAccumulatedDepreciationAccount(Param1);
end;

function TFAAssetProperties.Get_GLDepreciationExpenseAccount: WideString;
begin
    Result := DefaultInterface.GLDepreciationExpenseAccount;
end;

procedure TFAAssetProperties.Set_GLDepreciationExpenseAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLDepreciationExpenseAccount(Param1);
end;

function TFAAssetProperties.Get_LastAssetID: Integer;
begin
    Result := DefaultInterface.LastAssetID;
end;

function TFAAssetProperties.Get_Listed: WordBool;
begin
    Result := DefaultInterface.Listed;
end;

procedure TFAAssetProperties.Set_Listed(Param1: WordBool);
begin
  DefaultInterface.Set_Listed(Param1);
end;

function TFAAssetProperties.Get_Location: WideString;
begin
    Result := DefaultInterface.Location;
end;

procedure TFAAssetProperties.Set_Location(const Param1: WideString);
begin
  DefaultInterface.Set_Location(Param1);
end;

function TFAAssetProperties.Get_NewFlag: WordBool;
begin
    Result := DefaultInterface.NewFlag;
end;

procedure TFAAssetProperties.Set_NewFlag(Param1: WordBool);
begin
  DefaultInterface.Set_NewFlag(Param1);
end;

function TFAAssetProperties.Get_SerialNumber: WideString;
begin
    Result := DefaultInterface.SerialNumber;
end;

procedure TFAAssetProperties.Set_SerialNumber(const Param1: WideString);
begin
  DefaultInterface.Set_SerialNumber(Param1);
end;

function TFAAssetProperties.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TFAAssetProperties.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TFAAssetProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TFAAssetProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TFAAssetProperties.Get_Unused3: Smallint;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TFAAssetProperties.Set_Unused3(Param1: Smallint);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

{$ENDIF}

class function CoFABook.Create: _FABook;
begin
  Result := CreateComObject(CLASS_FABook) as _FABook;
end;

class function CoFABook.CreateRemote(const MachineName: string): _FABook;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FABook) as _FABook;
end;

procedure TFABook.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C11ADB0A-7CD0-4F92-936B-D220E4C3B7B3}';
    IntfIID:   '{26F3EF12-AB32-4085-B74A-02D2F3220124}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFABook.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _FABook;
  end;
end;

procedure TFABook.ConnectTo(svrIntf: _FABook);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFABook.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFABook.GetDefaultInterface: _FABook;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFABook.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFABookProperties.Create(Self);
{$ENDIF}
end;

destructor TFABook.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFABook.GetServerProperties: TFABookProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFABook.Get_AnnualDepreciation: Double;
begin
    Result := DefaultInterface.AnnualDepreciation;
end;

procedure TFABook.Set_AnnualDepreciation(Param1: Double);
begin
  DefaultInterface.Set_AnnualDepreciation(Param1);
end;

function TFABook.Get_AssetID: Integer;
begin
    Result := DefaultInterface.AssetID;
end;

procedure TFABook.Set_AssetID(Param1: Integer);
begin
  DefaultInterface.Set_AssetID(Param1);
end;

function TFABook.Get_BookCode: Smallint;
begin
    Result := DefaultInterface.BookCode;
end;

procedure TFABook.Set_BookCode(Param1: Smallint);
begin
  DefaultInterface.Set_BookCode(Param1);
end;

function TFABook.Get_Cost: Double;
begin
    Result := DefaultInterface.Cost;
end;

procedure TFABook.Set_Cost(Param1: Double);
begin
  DefaultInterface.Set_Cost(Param1);
end;

function TFABook.Get_DateAsOf: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateAsOf;
end;

procedure TFABook.Set_DateAsOf(Param1: OleVariant);
begin
  DefaultInterface.Set_DateAsOf(Param1);
end;

function TFABook.Get_DateAsOfHistory: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateAsOfHistory;
end;

procedure TFABook.Set_DateAsOfHistory(Param1: OleVariant);
begin
  DefaultInterface.Set_DateAsOfHistory(Param1);
end;

function TFABook.Get_DateInService: TDateTime;
begin
    Result := DefaultInterface.DateInService;
end;

procedure TFABook.Set_DateInService(Param1: TDateTime);
begin
  DefaultInterface.Set_DateInService(Param1);
end;

function TFABook.Get_DecliningBalancePercent: Smallint;
begin
    Result := DefaultInterface.DecliningBalancePercent;
end;

procedure TFABook.Set_DecliningBalancePercent(Param1: Smallint);
begin
  DefaultInterface.Set_DecliningBalancePercent(Param1);
end;

function TFABook.Get_FullUse: WordBool;
begin
    Result := DefaultInterface.FullUse;
end;

procedure TFABook.Set_FullUse(Param1: WordBool);
begin
  DefaultInterface.Set_FullUse(Param1);
end;

function TFABook.Get_ITCAmount: Double;
begin
    Result := DefaultInterface.ITCAmount;
end;

procedure TFABook.Set_ITCAmount(Param1: Double);
begin
  DefaultInterface.Set_ITCAmount(Param1);
end;

function TFABook.Get_ITCCode: WideString;
begin
    Result := DefaultInterface.ITCCode;
end;

procedure TFABook.Set_ITCCode(const Param1: WideString);
begin
  DefaultInterface.Set_ITCCode(Param1);
end;

function TFABook.Get_LastDepreciationRun: Double;
begin
    Result := DefaultInterface.LastDepreciationRun;
end;

procedure TFABook.Set_LastDepreciationRun(Param1: Double);
begin
  DefaultInterface.Set_LastDepreciationRun(Param1);
end;

function TFABook.Get_Life: Double;
begin
    Result := DefaultInterface.Life;
end;

procedure TFABook.Set_Life(Param1: Double);
begin
  DefaultInterface.Set_Life(Param1);
end;

function TFABook.Get_LifeToDateDepreciation: Double;
begin
    Result := DefaultInterface.LifeToDateDepreciation;
end;

procedure TFABook.Set_LifeToDateDepreciation(Param1: Double);
begin
  DefaultInterface.Set_LifeToDateDepreciation(Param1);
end;

function TFABook.Get_LifeToDateDepreciationHistory: Double;
begin
    Result := DefaultInterface.LifeToDateDepreciationHistory;
end;

procedure TFABook.Set_LifeToDateDepreciationHistory(Param1: Double);
begin
  DefaultInterface.Set_LifeToDateDepreciationHistory(Param1);
end;

function TFABook.Get_Method: WideString;
begin
    Result := DefaultInterface.Method;
end;

procedure TFABook.Set_Method(const Param1: WideString);
begin
  DefaultInterface.Set_Method(Param1);
end;

function TFABook.Get_MidQuarterConvention: WordBool;
begin
    Result := DefaultInterface.MidQuarterConvention;
end;

procedure TFABook.Set_MidQuarterConvention(Param1: WordBool);
begin
  DefaultInterface.Set_MidQuarterConvention(Param1);
end;

function TFABook.Get_ReducedBasis: Smallint;
begin
    Result := DefaultInterface.ReducedBasis;
end;

procedure TFABook.Set_ReducedBasis(Param1: Smallint);
begin
  DefaultInterface.Set_ReducedBasis(Param1);
end;

function TFABook.Get_Salvage: Double;
begin
    Result := DefaultInterface.Salvage;
end;

procedure TFABook.Set_Salvage(Param1: Double);
begin
  DefaultInterface.Set_Salvage(Param1);
end;

function TFABook.Get_Section179: Double;
begin
    Result := DefaultInterface.Section179;
end;

procedure TFABook.Set_Section179(Param1: Double);
begin
  DefaultInterface.Set_Section179(Param1);
end;

function TFABook.Get_Unused1: Double;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TFABook.Set_Unused1(Param1: Double);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TFABook.Get_Unknown2: Double;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TFABook.Set_Unknown2(Param1: Double);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TFABook.Get_YearToDateDepreciation: Double;
begin
    Result := DefaultInterface.YearToDateDepreciation;
end;

procedure TFABook.Set_YearToDateDepreciation(Param1: Double);
begin
  DefaultInterface.Set_YearToDateDepreciation(Param1);
end;

function TFABook.Get_YearToDateDepreciationHistory: Double;
begin
    Result := DefaultInterface.YearToDateDepreciationHistory;
end;

procedure TFABook.Set_YearToDateDepreciationHistory(Param1: Double);
begin
  DefaultInterface.Set_YearToDateDepreciationHistory(Param1);
end;

function TFABook.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TFABook.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TFABook.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TFABook.GetEqual(ID: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(ID);
end;

function TFABook.GetNext: Smallint;
begin
  Result := DefaultInterface.GetNext;
end;

function TFABook.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TFABook.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TFABook.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TFABook.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TFABook.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TFABook.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TFABook.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFABookProperties.Create(AServer: TFABook);
begin
  inherited Create;
  FServer := AServer;
end;

function TFABookProperties.GetDefaultInterface: _FABook;
begin
  Result := FServer.DefaultInterface;
end;

function TFABookProperties.Get_AnnualDepreciation: Double;
begin
    Result := DefaultInterface.AnnualDepreciation;
end;

procedure TFABookProperties.Set_AnnualDepreciation(Param1: Double);
begin
  DefaultInterface.Set_AnnualDepreciation(Param1);
end;

function TFABookProperties.Get_AssetID: Integer;
begin
    Result := DefaultInterface.AssetID;
end;

procedure TFABookProperties.Set_AssetID(Param1: Integer);
begin
  DefaultInterface.Set_AssetID(Param1);
end;

function TFABookProperties.Get_BookCode: Smallint;
begin
    Result := DefaultInterface.BookCode;
end;

procedure TFABookProperties.Set_BookCode(Param1: Smallint);
begin
  DefaultInterface.Set_BookCode(Param1);
end;

function TFABookProperties.Get_Cost: Double;
begin
    Result := DefaultInterface.Cost;
end;

procedure TFABookProperties.Set_Cost(Param1: Double);
begin
  DefaultInterface.Set_Cost(Param1);
end;

function TFABookProperties.Get_DateAsOf: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateAsOf;
end;

procedure TFABookProperties.Set_DateAsOf(Param1: OleVariant);
begin
  DefaultInterface.Set_DateAsOf(Param1);
end;

function TFABookProperties.Get_DateAsOfHistory: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateAsOfHistory;
end;

procedure TFABookProperties.Set_DateAsOfHistory(Param1: OleVariant);
begin
  DefaultInterface.Set_DateAsOfHistory(Param1);
end;

function TFABookProperties.Get_DateInService: TDateTime;
begin
    Result := DefaultInterface.DateInService;
end;

procedure TFABookProperties.Set_DateInService(Param1: TDateTime);
begin
  DefaultInterface.Set_DateInService(Param1);
end;

function TFABookProperties.Get_DecliningBalancePercent: Smallint;
begin
    Result := DefaultInterface.DecliningBalancePercent;
end;

procedure TFABookProperties.Set_DecliningBalancePercent(Param1: Smallint);
begin
  DefaultInterface.Set_DecliningBalancePercent(Param1);
end;

function TFABookProperties.Get_FullUse: WordBool;
begin
    Result := DefaultInterface.FullUse;
end;

procedure TFABookProperties.Set_FullUse(Param1: WordBool);
begin
  DefaultInterface.Set_FullUse(Param1);
end;

function TFABookProperties.Get_ITCAmount: Double;
begin
    Result := DefaultInterface.ITCAmount;
end;

procedure TFABookProperties.Set_ITCAmount(Param1: Double);
begin
  DefaultInterface.Set_ITCAmount(Param1);
end;

function TFABookProperties.Get_ITCCode: WideString;
begin
    Result := DefaultInterface.ITCCode;
end;

procedure TFABookProperties.Set_ITCCode(const Param1: WideString);
begin
  DefaultInterface.Set_ITCCode(Param1);
end;

function TFABookProperties.Get_LastDepreciationRun: Double;
begin
    Result := DefaultInterface.LastDepreciationRun;
end;

procedure TFABookProperties.Set_LastDepreciationRun(Param1: Double);
begin
  DefaultInterface.Set_LastDepreciationRun(Param1);
end;

function TFABookProperties.Get_Life: Double;
begin
    Result := DefaultInterface.Life;
end;

procedure TFABookProperties.Set_Life(Param1: Double);
begin
  DefaultInterface.Set_Life(Param1);
end;

function TFABookProperties.Get_LifeToDateDepreciation: Double;
begin
    Result := DefaultInterface.LifeToDateDepreciation;
end;

procedure TFABookProperties.Set_LifeToDateDepreciation(Param1: Double);
begin
  DefaultInterface.Set_LifeToDateDepreciation(Param1);
end;

function TFABookProperties.Get_LifeToDateDepreciationHistory: Double;
begin
    Result := DefaultInterface.LifeToDateDepreciationHistory;
end;

procedure TFABookProperties.Set_LifeToDateDepreciationHistory(Param1: Double);
begin
  DefaultInterface.Set_LifeToDateDepreciationHistory(Param1);
end;

function TFABookProperties.Get_Method: WideString;
begin
    Result := DefaultInterface.Method;
end;

procedure TFABookProperties.Set_Method(const Param1: WideString);
begin
  DefaultInterface.Set_Method(Param1);
end;

function TFABookProperties.Get_MidQuarterConvention: WordBool;
begin
    Result := DefaultInterface.MidQuarterConvention;
end;

procedure TFABookProperties.Set_MidQuarterConvention(Param1: WordBool);
begin
  DefaultInterface.Set_MidQuarterConvention(Param1);
end;

function TFABookProperties.Get_ReducedBasis: Smallint;
begin
    Result := DefaultInterface.ReducedBasis;
end;

procedure TFABookProperties.Set_ReducedBasis(Param1: Smallint);
begin
  DefaultInterface.Set_ReducedBasis(Param1);
end;

function TFABookProperties.Get_Salvage: Double;
begin
    Result := DefaultInterface.Salvage;
end;

procedure TFABookProperties.Set_Salvage(Param1: Double);
begin
  DefaultInterface.Set_Salvage(Param1);
end;

function TFABookProperties.Get_Section179: Double;
begin
    Result := DefaultInterface.Section179;
end;

procedure TFABookProperties.Set_Section179(Param1: Double);
begin
  DefaultInterface.Set_Section179(Param1);
end;

function TFABookProperties.Get_Unused1: Double;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TFABookProperties.Set_Unused1(Param1: Double);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TFABookProperties.Get_Unknown2: Double;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TFABookProperties.Set_Unknown2(Param1: Double);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TFABookProperties.Get_YearToDateDepreciation: Double;
begin
    Result := DefaultInterface.YearToDateDepreciation;
end;

procedure TFABookProperties.Set_YearToDateDepreciation(Param1: Double);
begin
  DefaultInterface.Set_YearToDateDepreciation(Param1);
end;

function TFABookProperties.Get_YearToDateDepreciationHistory: Double;
begin
    Result := DefaultInterface.YearToDateDepreciationHistory;
end;

procedure TFABookProperties.Set_YearToDateDepreciationHistory(Param1: Double);
begin
  DefaultInterface.Set_YearToDateDepreciationHistory(Param1);
end;

{$ENDIF}

class function CoFABusUse.Create: _FABusUse;
begin
  Result := CreateComObject(CLASS_FABusUse) as _FABusUse;
end;

class function CoFABusUse.CreateRemote(const MachineName: string): _FABusUse;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FABusUse) as _FABusUse;
end;

procedure TFABusUse.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E10F99E2-18FB-4E6D-ACD6-43DAED08DC3B}';
    IntfIID:   '{91AF0605-3D70-4339-89BE-D7529627B213}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFABusUse.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _FABusUse;
  end;
end;

procedure TFABusUse.ConnectTo(svrIntf: _FABusUse);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFABusUse.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFABusUse.GetDefaultInterface: _FABusUse;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFABusUse.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFABusUseProperties.Create(Self);
{$ENDIF}
end;

destructor TFABusUse.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFABusUse.GetServerProperties: TFABusUseProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFABusUse.Get_AssetID: Integer;
begin
    Result := DefaultInterface.AssetID;
end;

procedure TFABusUse.Set_AssetID(Param1: Integer);
begin
  DefaultInterface.Set_AssetID(Param1);
end;

function TFABusUse.Get_BookCode: Smallint;
begin
    Result := DefaultInterface.BookCode;
end;

procedure TFABusUse.Set_BookCode(Param1: Smallint);
begin
  DefaultInterface.Set_BookCode(Param1);
end;

function TFABusUse.Get_Date1: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date1;
end;

procedure TFABusUse.Set_Date1(Param1: OleVariant);
begin
  DefaultInterface.Set_Date1(Param1);
end;

function TFABusUse.Get_Date2: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date2;
end;

procedure TFABusUse.Set_Date2(Param1: OleVariant);
begin
  DefaultInterface.Set_Date2(Param1);
end;

function TFABusUse.Get_Date3: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date3;
end;

procedure TFABusUse.Set_Date3(Param1: OleVariant);
begin
  DefaultInterface.Set_Date3(Param1);
end;

function TFABusUse.Get_Date4: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date4;
end;

procedure TFABusUse.Set_Date4(Param1: OleVariant);
begin
  DefaultInterface.Set_Date4(Param1);
end;

function TFABusUse.Get_Date5: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date5;
end;

procedure TFABusUse.Set_Date5(Param1: OleVariant);
begin
  DefaultInterface.Set_Date5(Param1);
end;

function TFABusUse.Get_Percent1: Smallint;
begin
    Result := DefaultInterface.Percent1;
end;

procedure TFABusUse.Set_Percent1(Param1: Smallint);
begin
  DefaultInterface.Set_Percent1(Param1);
end;

function TFABusUse.Get_Percent2: Smallint;
begin
    Result := DefaultInterface.Percent2;
end;

procedure TFABusUse.Set_Percent2(Param1: Smallint);
begin
  DefaultInterface.Set_Percent2(Param1);
end;

function TFABusUse.Get_Percent3: Smallint;
begin
    Result := DefaultInterface.Percent3;
end;

procedure TFABusUse.Set_Percent3(Param1: Smallint);
begin
  DefaultInterface.Set_Percent3(Param1);
end;

function TFABusUse.Get_Percent4: Smallint;
begin
    Result := DefaultInterface.Percent4;
end;

procedure TFABusUse.Set_Percent4(Param1: Smallint);
begin
  DefaultInterface.Set_Percent4(Param1);
end;

function TFABusUse.Get_Percent5: Smallint;
begin
    Result := DefaultInterface.Percent5;
end;

procedure TFABusUse.Set_Percent5(Param1: Smallint);
begin
  DefaultInterface.Set_Percent5(Param1);
end;

function TFABusUse.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TFABusUse.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TFABusUse.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TFABusUse.GetEqual(ID: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(ID);
end;

function TFABusUse.GetNext: Smallint;
begin
  Result := DefaultInterface.GetNext;
end;

function TFABusUse.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TFABusUse.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TFABusUse.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TFABusUse.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TFABusUse.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TFABusUse.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TFABusUse.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFABusUseProperties.Create(AServer: TFABusUse);
begin
  inherited Create;
  FServer := AServer;
end;

function TFABusUseProperties.GetDefaultInterface: _FABusUse;
begin
  Result := FServer.DefaultInterface;
end;

function TFABusUseProperties.Get_AssetID: Integer;
begin
    Result := DefaultInterface.AssetID;
end;

procedure TFABusUseProperties.Set_AssetID(Param1: Integer);
begin
  DefaultInterface.Set_AssetID(Param1);
end;

function TFABusUseProperties.Get_BookCode: Smallint;
begin
    Result := DefaultInterface.BookCode;
end;

procedure TFABusUseProperties.Set_BookCode(Param1: Smallint);
begin
  DefaultInterface.Set_BookCode(Param1);
end;

function TFABusUseProperties.Get_Date1: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date1;
end;

procedure TFABusUseProperties.Set_Date1(Param1: OleVariant);
begin
  DefaultInterface.Set_Date1(Param1);
end;

function TFABusUseProperties.Get_Date2: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date2;
end;

procedure TFABusUseProperties.Set_Date2(Param1: OleVariant);
begin
  DefaultInterface.Set_Date2(Param1);
end;

function TFABusUseProperties.Get_Date3: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date3;
end;

procedure TFABusUseProperties.Set_Date3(Param1: OleVariant);
begin
  DefaultInterface.Set_Date3(Param1);
end;

function TFABusUseProperties.Get_Date4: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date4;
end;

procedure TFABusUseProperties.Set_Date4(Param1: OleVariant);
begin
  DefaultInterface.Set_Date4(Param1);
end;

function TFABusUseProperties.Get_Date5: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date5;
end;

procedure TFABusUseProperties.Set_Date5(Param1: OleVariant);
begin
  DefaultInterface.Set_Date5(Param1);
end;

function TFABusUseProperties.Get_Percent1: Smallint;
begin
    Result := DefaultInterface.Percent1;
end;

procedure TFABusUseProperties.Set_Percent1(Param1: Smallint);
begin
  DefaultInterface.Set_Percent1(Param1);
end;

function TFABusUseProperties.Get_Percent2: Smallint;
begin
    Result := DefaultInterface.Percent2;
end;

procedure TFABusUseProperties.Set_Percent2(Param1: Smallint);
begin
  DefaultInterface.Set_Percent2(Param1);
end;

function TFABusUseProperties.Get_Percent3: Smallint;
begin
    Result := DefaultInterface.Percent3;
end;

procedure TFABusUseProperties.Set_Percent3(Param1: Smallint);
begin
  DefaultInterface.Set_Percent3(Param1);
end;

function TFABusUseProperties.Get_Percent4: Smallint;
begin
    Result := DefaultInterface.Percent4;
end;

procedure TFABusUseProperties.Set_Percent4(Param1: Smallint);
begin
  DefaultInterface.Set_Percent4(Param1);
end;

function TFABusUseProperties.Get_Percent5: Smallint;
begin
    Result := DefaultInterface.Percent5;
end;

procedure TFABusUseProperties.Set_Percent5(Param1: Smallint);
begin
  DefaultInterface.Set_Percent5(Param1);
end;

{$ENDIF}

class function CoFAClass.Create: _FAClass;
begin
  Result := CreateComObject(CLASS_FAClass) as _FAClass;
end;

class function CoFAClass.CreateRemote(const MachineName: string): _FAClass;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FAClass) as _FAClass;
end;

procedure TFAClass.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FC0F23F7-824A-42AD-A5F3-D1DCAE2FC4DC}';
    IntfIID:   '{1D3B8B73-7364-4C0A-BCD7-468C85E263DD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFAClass.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _FAClass;
  end;
end;

procedure TFAClass.ConnectTo(svrIntf: _FAClass);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFAClass.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFAClass.GetDefaultInterface: _FAClass;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFAClass.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFAClassProperties.Create(Self);
{$ENDIF}
end;

destructor TFAClass.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFAClass.GetServerProperties: TFAClassProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFAClass.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TFAClass.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TFAClass.Get_Life1: WideString;
begin
    Result := DefaultInterface.Life1;
end;

procedure TFAClass.Set_Life1(const Param1: WideString);
begin
  DefaultInterface.Set_Life1(Param1);
end;

function TFAClass.Get_Life2: WideString;
begin
    Result := DefaultInterface.Life2;
end;

procedure TFAClass.Set_Life2(const Param1: WideString);
begin
  DefaultInterface.Set_Life2(Param1);
end;

function TFAClass.Get_Method1: WideString;
begin
    Result := DefaultInterface.Method1;
end;

procedure TFAClass.Set_Method1(const Param1: WideString);
begin
  DefaultInterface.Set_Method1(Param1);
end;

function TFAClass.Get_Method2: WideString;
begin
    Result := DefaultInterface.Method2;
end;

procedure TFAClass.Set_Method2(const Param1: WideString);
begin
  DefaultInterface.Set_Method2(Param1);
end;

function TFAClass.Get_Method3: WideString;
begin
    Result := DefaultInterface.Method3;
end;

procedure TFAClass.Set_Method3(const Param1: WideString);
begin
  DefaultInterface.Set_Method3(Param1);
end;

function TFAClass.Get_Method4: WideString;
begin
    Result := DefaultInterface.Method4;
end;

procedure TFAClass.Set_Method4(const Param1: WideString);
begin
  DefaultInterface.Set_Method4(Param1);
end;

function TFAClass.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TFAClass.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TFAClass.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TFAClass.GetEqual(const Value: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(Value);
end;

function TFAClass.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TFAClass.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TFAClass.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TFAClass.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TFAClass.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TFAClass.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TFAClass.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFAClassProperties.Create(AServer: TFAClass);
begin
  inherited Create;
  FServer := AServer;
end;

function TFAClassProperties.GetDefaultInterface: _FAClass;
begin
  Result := FServer.DefaultInterface;
end;

function TFAClassProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TFAClassProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TFAClassProperties.Get_Life1: WideString;
begin
    Result := DefaultInterface.Life1;
end;

procedure TFAClassProperties.Set_Life1(const Param1: WideString);
begin
  DefaultInterface.Set_Life1(Param1);
end;

function TFAClassProperties.Get_Life2: WideString;
begin
    Result := DefaultInterface.Life2;
end;

procedure TFAClassProperties.Set_Life2(const Param1: WideString);
begin
  DefaultInterface.Set_Life2(Param1);
end;

function TFAClassProperties.Get_Method1: WideString;
begin
    Result := DefaultInterface.Method1;
end;

procedure TFAClassProperties.Set_Method1(const Param1: WideString);
begin
  DefaultInterface.Set_Method1(Param1);
end;

function TFAClassProperties.Get_Method2: WideString;
begin
    Result := DefaultInterface.Method2;
end;

procedure TFAClassProperties.Set_Method2(const Param1: WideString);
begin
  DefaultInterface.Set_Method2(Param1);
end;

function TFAClassProperties.Get_Method3: WideString;
begin
    Result := DefaultInterface.Method3;
end;

procedure TFAClassProperties.Set_Method3(const Param1: WideString);
begin
  DefaultInterface.Set_Method3(Param1);
end;

function TFAClassProperties.Get_Method4: WideString;
begin
    Result := DefaultInterface.Method4;
end;

procedure TFAClassProperties.Set_Method4(const Param1: WideString);
begin
  DefaultInterface.Set_Method4(Param1);
end;

{$ENDIF}

class function CoFAComp.Create: _FAComp;
begin
  Result := CreateComObject(CLASS_FAComp) as _FAComp;
end;

class function CoFAComp.CreateRemote(const MachineName: string): _FAComp;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FAComp) as _FAComp;
end;

procedure TFAComp.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8CA75560-9714-41B4-AF2D-4947E23CED75}';
    IntfIID:   '{1E00F48D-5C80-491F-8A26-6DF6AFD31769}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFAComp.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _FAComp;
  end;
end;

procedure TFAComp.ConnectTo(svrIntf: _FAComp);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFAComp.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFAComp.GetDefaultInterface: _FAComp;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFAComp.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFACompProperties.Create(Self);
{$ENDIF}
end;

destructor TFAComp.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFAComp.GetServerProperties: TFACompProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFAComp.Get_ACEBook: WordBool;
begin
    Result := DefaultInterface.ACEBook;
end;

procedure TFAComp.Set_ACEBook(Param1: WordBool);
begin
  DefaultInterface.Set_ACEBook(Param1);
end;

function TFAComp.Get_AMTBook: WordBool;
begin
    Result := DefaultInterface.AMTBook;
end;

procedure TFAComp.Set_AMTBook(Param1: WordBool);
begin
  DefaultInterface.Set_AMTBook(Param1);
end;

function TFAComp.Get_CompanyName: WideString;
begin
    Result := DefaultInterface.CompanyName;
end;

procedure TFAComp.Set_CompanyName(const Param1: WideString);
begin
  DefaultInterface.Set_CompanyName(Param1);
end;

function TFAComp.Get_ConversionDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ConversionDate;
end;

procedure TFAComp.Set_ConversionDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ConversionDate(Param1);
end;

function TFAComp.Get_Date1: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date1;
end;

procedure TFAComp.Set_Date1(Param1: OleVariant);
begin
  DefaultInterface.Set_Date1(Param1);
end;

function TFAComp.Get_Date2: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date2;
end;

procedure TFAComp.Set_Date2(Param1: OleVariant);
begin
  DefaultInterface.Set_Date2(Param1);
end;

function TFAComp.Get_Date3: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date3;
end;

procedure TFAComp.Set_Date3(Param1: OleVariant);
begin
  DefaultInterface.Set_Date3(Param1);
end;

function TFAComp.Get_FederalIDNumber: WideString;
begin
    Result := DefaultInterface.FederalIDNumber;
end;

procedure TFAComp.Set_FederalIDNumber(const Param1: WideString);
begin
  DefaultInterface.Set_FederalIDNumber(Param1);
end;

function TFAComp.Get_FederalTaxBook: WordBool;
begin
    Result := DefaultInterface.FederalTaxBook;
end;

procedure TFAComp.Set_FederalTaxBook(Param1: WordBool);
begin
  DefaultInterface.Set_FederalTaxBook(Param1);
end;

function TFAComp.Get_FinancialBook: WordBool;
begin
    Result := DefaultInterface.FinancialBook;
end;

procedure TFAComp.Set_FinancialBook(Param1: WordBool);
begin
  DefaultInterface.Set_FinancialBook(Param1);
end;

function TFAComp.Get_FormOfBusiness: WideString;
begin
    Result := DefaultInterface.FormOfBusiness;
end;

procedure TFAComp.Set_FormOfBusiness(const Param1: WideString);
begin
  DefaultInterface.Set_FormOfBusiness(Param1);
end;

function TFAComp.Get_MonthFiscalYearEnds: Smallint;
begin
    Result := DefaultInterface.MonthFiscalYearEnds;
end;

procedure TFAComp.Set_MonthFiscalYearEnds(Param1: Smallint);
begin
  DefaultInterface.Set_MonthFiscalYearEnds(Param1);
end;

function TFAComp.Get_OtherBook: WordBool;
begin
    Result := DefaultInterface.OtherBook;
end;

procedure TFAComp.Set_OtherBook(Param1: WordBool);
begin
  DefaultInterface.Set_OtherBook(Param1);
end;

function TFAComp.Get_ShortTaxYearsFrom1: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsFrom1;
end;

procedure TFAComp.Set_ShortTaxYearsFrom1(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsFrom1(Param1);
end;

function TFAComp.Get_ShortTaxYearsFrom2: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsFrom2;
end;

procedure TFAComp.Set_ShortTaxYearsFrom2(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsFrom2(Param1);
end;

function TFAComp.Get_ShortTaxYearsFrom3: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsFrom3;
end;

procedure TFAComp.Set_ShortTaxYearsFrom3(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsFrom3(Param1);
end;

function TFAComp.Get_ShortTaxYearsFrom4: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsFrom4;
end;

procedure TFAComp.Set_ShortTaxYearsFrom4(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsFrom4(Param1);
end;

function TFAComp.Get_ShortTaxYearsTo1: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsTo1;
end;

procedure TFAComp.Set_ShortTaxYearsTo1(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsTo1(Param1);
end;

function TFAComp.Get_ShortTaxYearsTo2: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsTo2;
end;

procedure TFAComp.Set_ShortTaxYearsTo2(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsTo2(Param1);
end;

function TFAComp.Get_ShortTaxYearsTo3: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsTo3;
end;

procedure TFAComp.Set_ShortTaxYearsTo3(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsTo3(Param1);
end;

function TFAComp.Get_ShortTaxYearsTo4: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsTo4;
end;

procedure TFAComp.Set_ShortTaxYearsTo4(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsTo4(Param1);
end;

function TFAComp.Get_StateTaxBook: WordBool;
begin
    Result := DefaultInterface.StateTaxBook;
end;

procedure TFAComp.Set_StateTaxBook(Param1: WordBool);
begin
  DefaultInterface.Set_StateTaxBook(Param1);
end;

function TFAComp.Get_UnknownBook: WordBool;
begin
    Result := DefaultInterface.UnknownBook;
end;

procedure TFAComp.Set_UnknownBook(Param1: WordBool);
begin
  DefaultInterface.Set_UnknownBook(Param1);
end;

function TFAComp.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TFAComp.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TFAComp.Get_Unknown2: Smallint;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TFAComp.Set_Unknown2(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TFAComp.Get_Unused3: Integer;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TFAComp.Set_Unused3(Param1: Integer);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TFAComp.Get_Unused4: Integer;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TFAComp.Set_Unused4(Param1: Integer);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TFAComp.Get_Unused5: Integer;
begin
    Result := DefaultInterface.Unused5;
end;

procedure TFAComp.Set_Unused5(Param1: Integer);
begin
  DefaultInterface.Set_Unused5(Param1);
end;

function TFAComp.Get_Unused6: Integer;
begin
    Result := DefaultInterface.Unused6;
end;

procedure TFAComp.Set_Unused6(Param1: Integer);
begin
  DefaultInterface.Set_Unused6(Param1);
end;

function TFAComp.Get_Unused7: Integer;
begin
    Result := DefaultInterface.Unused7;
end;

procedure TFAComp.Set_Unused7(Param1: Integer);
begin
  DefaultInterface.Set_Unused7(Param1);
end;

function TFAComp.Get_Unused8: Integer;
begin
    Result := DefaultInterface.Unused8;
end;

procedure TFAComp.Set_Unused8(Param1: Integer);
begin
  DefaultInterface.Set_Unused8(Param1);
end;

function TFAComp.Get_Unused9: Integer;
begin
    Result := DefaultInterface.Unused9;
end;

procedure TFAComp.Set_Unused9(Param1: Integer);
begin
  DefaultInterface.Set_Unused9(Param1);
end;

function TFAComp.Get_Unused10: Integer;
begin
    Result := DefaultInterface.Unused10;
end;

procedure TFAComp.Set_Unused10(Param1: Integer);
begin
  DefaultInterface.Set_Unused10(Param1);
end;

function TFAComp.Get_Unused11: Integer;
begin
    Result := DefaultInterface.Unused11;
end;

procedure TFAComp.Set_Unused11(Param1: Integer);
begin
  DefaultInterface.Set_Unused11(Param1);
end;

function TFAComp.Get_Unused12: Integer;
begin
    Result := DefaultInterface.Unused12;
end;

procedure TFAComp.Set_Unused12(Param1: Integer);
begin
  DefaultInterface.Set_Unused12(Param1);
end;

function TFAComp.Get_Unknown13: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Unknown13;
end;

procedure TFAComp.Set_Unknown13(Param1: OleVariant);
begin
  DefaultInterface.Set_Unknown13(Param1);
end;

function TFAComp.Get_Unknown14: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Unknown14;
end;

procedure TFAComp.Set_Unknown14(Param1: OleVariant);
begin
  DefaultInterface.Set_Unknown14(Param1);
end;

function TFAComp.Get_Unused15: Smallint;
begin
    Result := DefaultInterface.Unused15;
end;

procedure TFAComp.Set_Unused15(Param1: Smallint);
begin
  DefaultInterface.Set_Unused15(Param1);
end;

function TFAComp.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TFAComp.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TFAComp.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TFAComp.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TFAComp.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TFAComp.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TFAComp.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFACompProperties.Create(AServer: TFAComp);
begin
  inherited Create;
  FServer := AServer;
end;

function TFACompProperties.GetDefaultInterface: _FAComp;
begin
  Result := FServer.DefaultInterface;
end;

function TFACompProperties.Get_ACEBook: WordBool;
begin
    Result := DefaultInterface.ACEBook;
end;

procedure TFACompProperties.Set_ACEBook(Param1: WordBool);
begin
  DefaultInterface.Set_ACEBook(Param1);
end;

function TFACompProperties.Get_AMTBook: WordBool;
begin
    Result := DefaultInterface.AMTBook;
end;

procedure TFACompProperties.Set_AMTBook(Param1: WordBool);
begin
  DefaultInterface.Set_AMTBook(Param1);
end;

function TFACompProperties.Get_CompanyName: WideString;
begin
    Result := DefaultInterface.CompanyName;
end;

procedure TFACompProperties.Set_CompanyName(const Param1: WideString);
begin
  DefaultInterface.Set_CompanyName(Param1);
end;

function TFACompProperties.Get_ConversionDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ConversionDate;
end;

procedure TFACompProperties.Set_ConversionDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ConversionDate(Param1);
end;

function TFACompProperties.Get_Date1: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date1;
end;

procedure TFACompProperties.Set_Date1(Param1: OleVariant);
begin
  DefaultInterface.Set_Date1(Param1);
end;

function TFACompProperties.Get_Date2: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date2;
end;

procedure TFACompProperties.Set_Date2(Param1: OleVariant);
begin
  DefaultInterface.Set_Date2(Param1);
end;

function TFACompProperties.Get_Date3: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Date3;
end;

procedure TFACompProperties.Set_Date3(Param1: OleVariant);
begin
  DefaultInterface.Set_Date3(Param1);
end;

function TFACompProperties.Get_FederalIDNumber: WideString;
begin
    Result := DefaultInterface.FederalIDNumber;
end;

procedure TFACompProperties.Set_FederalIDNumber(const Param1: WideString);
begin
  DefaultInterface.Set_FederalIDNumber(Param1);
end;

function TFACompProperties.Get_FederalTaxBook: WordBool;
begin
    Result := DefaultInterface.FederalTaxBook;
end;

procedure TFACompProperties.Set_FederalTaxBook(Param1: WordBool);
begin
  DefaultInterface.Set_FederalTaxBook(Param1);
end;

function TFACompProperties.Get_FinancialBook: WordBool;
begin
    Result := DefaultInterface.FinancialBook;
end;

procedure TFACompProperties.Set_FinancialBook(Param1: WordBool);
begin
  DefaultInterface.Set_FinancialBook(Param1);
end;

function TFACompProperties.Get_FormOfBusiness: WideString;
begin
    Result := DefaultInterface.FormOfBusiness;
end;

procedure TFACompProperties.Set_FormOfBusiness(const Param1: WideString);
begin
  DefaultInterface.Set_FormOfBusiness(Param1);
end;

function TFACompProperties.Get_MonthFiscalYearEnds: Smallint;
begin
    Result := DefaultInterface.MonthFiscalYearEnds;
end;

procedure TFACompProperties.Set_MonthFiscalYearEnds(Param1: Smallint);
begin
  DefaultInterface.Set_MonthFiscalYearEnds(Param1);
end;

function TFACompProperties.Get_OtherBook: WordBool;
begin
    Result := DefaultInterface.OtherBook;
end;

procedure TFACompProperties.Set_OtherBook(Param1: WordBool);
begin
  DefaultInterface.Set_OtherBook(Param1);
end;

function TFACompProperties.Get_ShortTaxYearsFrom1: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsFrom1;
end;

procedure TFACompProperties.Set_ShortTaxYearsFrom1(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsFrom1(Param1);
end;

function TFACompProperties.Get_ShortTaxYearsFrom2: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsFrom2;
end;

procedure TFACompProperties.Set_ShortTaxYearsFrom2(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsFrom2(Param1);
end;

function TFACompProperties.Get_ShortTaxYearsFrom3: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsFrom3;
end;

procedure TFACompProperties.Set_ShortTaxYearsFrom3(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsFrom3(Param1);
end;

function TFACompProperties.Get_ShortTaxYearsFrom4: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsFrom4;
end;

procedure TFACompProperties.Set_ShortTaxYearsFrom4(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsFrom4(Param1);
end;

function TFACompProperties.Get_ShortTaxYearsTo1: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsTo1;
end;

procedure TFACompProperties.Set_ShortTaxYearsTo1(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsTo1(Param1);
end;

function TFACompProperties.Get_ShortTaxYearsTo2: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsTo2;
end;

procedure TFACompProperties.Set_ShortTaxYearsTo2(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsTo2(Param1);
end;

function TFACompProperties.Get_ShortTaxYearsTo3: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsTo3;
end;

procedure TFACompProperties.Set_ShortTaxYearsTo3(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsTo3(Param1);
end;

function TFACompProperties.Get_ShortTaxYearsTo4: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShortTaxYearsTo4;
end;

procedure TFACompProperties.Set_ShortTaxYearsTo4(Param1: OleVariant);
begin
  DefaultInterface.Set_ShortTaxYearsTo4(Param1);
end;

function TFACompProperties.Get_StateTaxBook: WordBool;
begin
    Result := DefaultInterface.StateTaxBook;
end;

procedure TFACompProperties.Set_StateTaxBook(Param1: WordBool);
begin
  DefaultInterface.Set_StateTaxBook(Param1);
end;

function TFACompProperties.Get_UnknownBook: WordBool;
begin
    Result := DefaultInterface.UnknownBook;
end;

procedure TFACompProperties.Set_UnknownBook(Param1: WordBool);
begin
  DefaultInterface.Set_UnknownBook(Param1);
end;

function TFACompProperties.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TFACompProperties.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TFACompProperties.Get_Unknown2: Smallint;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TFACompProperties.Set_Unknown2(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TFACompProperties.Get_Unused3: Integer;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TFACompProperties.Set_Unused3(Param1: Integer);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TFACompProperties.Get_Unused4: Integer;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TFACompProperties.Set_Unused4(Param1: Integer);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TFACompProperties.Get_Unused5: Integer;
begin
    Result := DefaultInterface.Unused5;
end;

procedure TFACompProperties.Set_Unused5(Param1: Integer);
begin
  DefaultInterface.Set_Unused5(Param1);
end;

function TFACompProperties.Get_Unused6: Integer;
begin
    Result := DefaultInterface.Unused6;
end;

procedure TFACompProperties.Set_Unused6(Param1: Integer);
begin
  DefaultInterface.Set_Unused6(Param1);
end;

function TFACompProperties.Get_Unused7: Integer;
begin
    Result := DefaultInterface.Unused7;
end;

procedure TFACompProperties.Set_Unused7(Param1: Integer);
begin
  DefaultInterface.Set_Unused7(Param1);
end;

function TFACompProperties.Get_Unused8: Integer;
begin
    Result := DefaultInterface.Unused8;
end;

procedure TFACompProperties.Set_Unused8(Param1: Integer);
begin
  DefaultInterface.Set_Unused8(Param1);
end;

function TFACompProperties.Get_Unused9: Integer;
begin
    Result := DefaultInterface.Unused9;
end;

procedure TFACompProperties.Set_Unused9(Param1: Integer);
begin
  DefaultInterface.Set_Unused9(Param1);
end;

function TFACompProperties.Get_Unused10: Integer;
begin
    Result := DefaultInterface.Unused10;
end;

procedure TFACompProperties.Set_Unused10(Param1: Integer);
begin
  DefaultInterface.Set_Unused10(Param1);
end;

function TFACompProperties.Get_Unused11: Integer;
begin
    Result := DefaultInterface.Unused11;
end;

procedure TFACompProperties.Set_Unused11(Param1: Integer);
begin
  DefaultInterface.Set_Unused11(Param1);
end;

function TFACompProperties.Get_Unused12: Integer;
begin
    Result := DefaultInterface.Unused12;
end;

procedure TFACompProperties.Set_Unused12(Param1: Integer);
begin
  DefaultInterface.Set_Unused12(Param1);
end;

function TFACompProperties.Get_Unknown13: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Unknown13;
end;

procedure TFACompProperties.Set_Unknown13(Param1: OleVariant);
begin
  DefaultInterface.Set_Unknown13(Param1);
end;

function TFACompProperties.Get_Unknown14: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Unknown14;
end;

procedure TFACompProperties.Set_Unknown14(Param1: OleVariant);
begin
  DefaultInterface.Set_Unknown14(Param1);
end;

function TFACompProperties.Get_Unused15: Smallint;
begin
    Result := DefaultInterface.Unused15;
end;

procedure TFACompProperties.Set_Unused15(Param1: Smallint);
begin
  DefaultInterface.Set_Unused15(Param1);
end;

{$ENDIF}

class function CoFAPost.Create: _FAPost;
begin
  Result := CreateComObject(CLASS_FAPost) as _FAPost;
end;

class function CoFAPost.CreateRemote(const MachineName: string): _FAPost;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FAPost) as _FAPost;
end;

procedure TFAPost.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C526D449-43D6-44E9-B5F2-7E5B220414F5}';
    IntfIID:   '{3BE6A22F-677A-4B25-A1DC-DABF6AFEE050}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFAPost.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _FAPost;
  end;
end;

procedure TFAPost.ConnectTo(svrIntf: _FAPost);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFAPost.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFAPost.GetDefaultInterface: _FAPost;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFAPost.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFAPostProperties.Create(Self);
{$ENDIF}
end;

destructor TFAPost.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFAPost.GetServerProperties: TFAPostProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFAPost.Get_Account: WideString;
begin
    Result := DefaultInterface.Account;
end;

procedure TFAPost.Set_Account(const Param1: WideString);
begin
  DefaultInterface.Set_Account(Param1);
end;

function TFAPost.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TFAPost.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TFAPost.Get_Batch: WideString;
begin
    Result := DefaultInterface.Batch;
end;

procedure TFAPost.Set_Batch(const Param1: WideString);
begin
  DefaultInterface.Set_Batch(Param1);
end;

function TFAPost.Get_DatePosted: TDateTime;
begin
    Result := DefaultInterface.DatePosted;
end;

procedure TFAPost.Set_DatePosted(Param1: TDateTime);
begin
  DefaultInterface.Set_DatePosted(Param1);
end;

function TFAPost.Get_Day: Smallint;
begin
    Result := DefaultInterface.Day;
end;

procedure TFAPost.Set_Day(Param1: Smallint);
begin
  DefaultInterface.Set_Day(Param1);
end;

function TFAPost.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TFAPost.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TFAPost.Get_Month: Smallint;
begin
    Result := DefaultInterface.Month;
end;

procedure TFAPost.Set_Month(Param1: Smallint);
begin
  DefaultInterface.Set_Month(Param1);
end;

function TFAPost.Get_Year: Smallint;
begin
    Result := DefaultInterface.Year;
end;

procedure TFAPost.Set_Year(Param1: Smallint);
begin
  DefaultInterface.Set_Year(Param1);
end;

function TFAPost.Get_Unknown: Integer;
begin
    Result := DefaultInterface.Unknown;
end;

procedure TFAPost.Set_Unknown(Param1: Integer);
begin
  DefaultInterface.Set_Unknown(Param1);
end;

function TFAPost.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TFAPost.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TFAPost.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TFAPost.GetEqual(Value: OleVariant): Smallint;
begin
  Result := DefaultInterface.GetEqual(Value);
end;

function TFAPost.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TFAPost.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TFAPost.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TFAPost.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TFAPost.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TFAPost.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TFAPost.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFAPostProperties.Create(AServer: TFAPost);
begin
  inherited Create;
  FServer := AServer;
end;

function TFAPostProperties.GetDefaultInterface: _FAPost;
begin
  Result := FServer.DefaultInterface;
end;

function TFAPostProperties.Get_Account: WideString;
begin
    Result := DefaultInterface.Account;
end;

procedure TFAPostProperties.Set_Account(const Param1: WideString);
begin
  DefaultInterface.Set_Account(Param1);
end;

function TFAPostProperties.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TFAPostProperties.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TFAPostProperties.Get_Batch: WideString;
begin
    Result := DefaultInterface.Batch;
end;

procedure TFAPostProperties.Set_Batch(const Param1: WideString);
begin
  DefaultInterface.Set_Batch(Param1);
end;

function TFAPostProperties.Get_DatePosted: TDateTime;
begin
    Result := DefaultInterface.DatePosted;
end;

procedure TFAPostProperties.Set_DatePosted(Param1: TDateTime);
begin
  DefaultInterface.Set_DatePosted(Param1);
end;

function TFAPostProperties.Get_Day: Smallint;
begin
    Result := DefaultInterface.Day;
end;

procedure TFAPostProperties.Set_Day(Param1: Smallint);
begin
  DefaultInterface.Set_Day(Param1);
end;

function TFAPostProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TFAPostProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TFAPostProperties.Get_Month: Smallint;
begin
    Result := DefaultInterface.Month;
end;

procedure TFAPostProperties.Set_Month(Param1: Smallint);
begin
  DefaultInterface.Set_Month(Param1);
end;

function TFAPostProperties.Get_Year: Smallint;
begin
    Result := DefaultInterface.Year;
end;

procedure TFAPostProperties.Set_Year(Param1: Smallint);
begin
  DefaultInterface.Set_Year(Param1);
end;

function TFAPostProperties.Get_Unknown: Integer;
begin
    Result := DefaultInterface.Unknown;
end;

procedure TFAPostProperties.Set_Unknown(Param1: Integer);
begin
  DefaultInterface.Set_Unknown(Param1);
end;

{$ENDIF}

class function CoFAPrePst.Create: _FAPrePst;
begin
  Result := CreateComObject(CLASS_FAPrePst) as _FAPrePst;
end;

class function CoFAPrePst.CreateRemote(const MachineName: string): _FAPrePst;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FAPrePst) as _FAPrePst;
end;

procedure TFAPrePst.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6CA32A72-B918-403B-972C-BA5FD56C0778}';
    IntfIID:   '{4E40871E-981E-4C7C-B4F4-FB1EBB4A0E05}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFAPrePst.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _FAPrePst;
  end;
end;

procedure TFAPrePst.ConnectTo(svrIntf: _FAPrePst);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFAPrePst.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFAPrePst.GetDefaultInterface: _FAPrePst;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFAPrePst.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFAPrePstProperties.Create(Self);
{$ENDIF}
end;

destructor TFAPrePst.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFAPrePst.GetServerProperties: TFAPrePstProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFAPrePst.Get_Account: WideString;
begin
    Result := DefaultInterface.Account;
end;

procedure TFAPrePst.Set_Account(const Param1: WideString);
begin
  DefaultInterface.Set_Account(Param1);
end;

function TFAPrePst.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TFAPrePst.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TFAPrePst.Get_EntryDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EntryDate;
end;

procedure TFAPrePst.Set_EntryDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EntryDate(Param1);
end;

function TFAPrePst.Get_Index: WideString;
begin
    Result := DefaultInterface.Index;
end;

procedure TFAPrePst.Set_Index(const Param1: WideString);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TFAPrePst.Get_Unused: WideString;
begin
    Result := DefaultInterface.Unused;
end;

procedure TFAPrePst.Set_Unused(const Param1: WideString);
begin
  DefaultInterface.Set_Unused(Param1);
end;

function TFAPrePst.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TFAPrePst.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TFAPrePst.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TFAPrePst.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TFAPrePst.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TFAPrePst.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TFAPrePst.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TFAPrePst.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TFAPrePst.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TFAPrePst.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFAPrePstProperties.Create(AServer: TFAPrePst);
begin
  inherited Create;
  FServer := AServer;
end;

function TFAPrePstProperties.GetDefaultInterface: _FAPrePst;
begin
  Result := FServer.DefaultInterface;
end;

function TFAPrePstProperties.Get_Account: WideString;
begin
    Result := DefaultInterface.Account;
end;

procedure TFAPrePstProperties.Set_Account(const Param1: WideString);
begin
  DefaultInterface.Set_Account(Param1);
end;

function TFAPrePstProperties.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TFAPrePstProperties.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TFAPrePstProperties.Get_EntryDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EntryDate;
end;

procedure TFAPrePstProperties.Set_EntryDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EntryDate(Param1);
end;

function TFAPrePstProperties.Get_Index: WideString;
begin
    Result := DefaultInterface.Index;
end;

procedure TFAPrePstProperties.Set_Index(const Param1: WideString);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TFAPrePstProperties.Get_Unused: WideString;
begin
    Result := DefaultInterface.Unused;
end;

procedure TFAPrePstProperties.Set_Unused(const Param1: WideString);
begin
  DefaultInterface.Set_Unused(Param1);
end;

{$ENDIF}

class function CoDefaultStatementData.Create: _DefaultStatementData;
begin
  Result := CreateComObject(CLASS_DefaultStatementData) as _DefaultStatementData;
end;

class function CoDefaultStatementData.CreateRemote(const MachineName: string): _DefaultStatementData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DefaultStatementData) as _DefaultStatementData;
end;

procedure TDefaultStatementData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{65F4CA2E-BD56-4889-9FB3-EF31BA289636}';
    IntfIID:   '{95E03C99-E38C-413A-8D44-1D0B19F13A0C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDefaultStatementData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DefaultStatementData;
  end;
end;

procedure TDefaultStatementData.ConnectTo(svrIntf: _DefaultStatementData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDefaultStatementData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDefaultStatementData.GetDefaultInterface: _DefaultStatementData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDefaultStatementData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDefaultStatementDataProperties.Create(Self);
{$ENDIF}
end;

destructor TDefaultStatementData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDefaultStatementData.GetServerProperties: TDefaultStatementDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDefaultStatementData.Get_ActualLength: Integer;
begin
    Result := DefaultInterface.ActualLength;
end;

function TDefaultStatementData.Get_DunningDays(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DunningDays[Index];
end;

procedure TDefaultStatementData.Set_DunningDays(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DunningDays[Index] := Param2;
end;

function TDefaultStatementData.Get_DunningMessage(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DunningMessage[Index];
end;

procedure TDefaultStatementData.Set_DunningMessage(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DunningMessage(Index,Param2);
end;

function TDefaultStatementData.Get_FCWarningMessage: WideString;
begin
    Result := DefaultInterface.FCWarningMessage;
end;

procedure TDefaultStatementData.Set_FCWarningMessage(const Param1: WideString);
begin
  DefaultInterface.Set_FCWarningMessage(Param1);
end;

function TDefaultStatementData.Get_PrintAddress: WordBool;
begin
    Result := DefaultInterface.PrintAddress;
end;

procedure TDefaultStatementData.Set_PrintAddress(Param1: WordBool);
begin
  DefaultInterface.Set_PrintAddress(Param1);
end;

function TDefaultStatementData.Get_PrintAnyActivity: WordBool;
begin
    Result := DefaultInterface.PrintAnyActivity;
end;

procedure TDefaultStatementData.Set_PrintAnyActivity(Param1: WordBool);
begin
  DefaultInterface.Set_PrintAnyActivity(Param1);
end;

function TDefaultStatementData.Get_PrintBalancesAtLeast: WordBool;
begin
    Result := DefaultInterface.PrintBalancesAtLeast;
end;

procedure TDefaultStatementData.Set_PrintBalancesAtLeast(Param1: WordBool);
begin
  DefaultInterface.Set_PrintBalancesAtLeast(Param1);
end;

function TDefaultStatementData.Get_PrintFCWarning: WordBool;
begin
    Result := DefaultInterface.PrintFCWarning;
end;

procedure TDefaultStatementData.Set_PrintFCWarning(Param1: WordBool);
begin
  DefaultInterface.Set_PrintFCWarning(Param1);
end;

function TDefaultStatementData.Get_PrintInvoicesAtLeast: WordBool;
begin
    Result := DefaultInterface.PrintInvoicesAtLeast;
end;

procedure TDefaultStatementData.Set_PrintInvoicesAtLeast(Param1: WordBool);
begin
  DefaultInterface.Set_PrintInvoicesAtLeast(Param1);
end;

function TDefaultStatementData.Get_PrintMinimumBalance: Double;
begin
    Result := DefaultInterface.PrintMinimumBalance;
end;

procedure TDefaultStatementData.Set_PrintMinimumBalance(Param1: Double);
begin
  DefaultInterface.Set_PrintMinimumBalance(Param1);
end;

function TDefaultStatementData.Get_PrintNegativeBalance: WordBool;
begin
    Result := DefaultInterface.PrintNegativeBalance;
end;

procedure TDefaultStatementData.Set_PrintNegativeBalance(Param1: WordBool);
begin
  DefaultInterface.Set_PrintNegativeBalance(Param1);
end;

function TDefaultStatementData.Get_PrintNegativeBalanceChar: WideString;
begin
    Result := DefaultInterface.PrintNegativeBalanceChar;
end;

procedure TDefaultStatementData.Set_PrintNegativeBalanceChar(const Param1: WideString);
begin
  DefaultInterface.Set_PrintNegativeBalanceChar(Param1);
end;

function TDefaultStatementData.Get_PrintOverdueDays: Smallint;
begin
    Result := DefaultInterface.PrintOverdueDays;
end;

procedure TDefaultStatementData.Set_PrintOverdueDays(Param1: Smallint);
begin
  DefaultInterface.Set_PrintOverdueDays(Param1);
end;

function TDefaultStatementData.Get_PrintZeroBalance: WordBool;
begin
    Result := DefaultInterface.PrintZeroBalance;
end;

procedure TDefaultStatementData.Set_PrintZeroBalance(Param1: WordBool);
begin
  DefaultInterface.Set_PrintZeroBalance(Param1);
end;

function TDefaultStatementData.Get_PrintZeroBalanceChar: WideString;
begin
    Result := DefaultInterface.PrintZeroBalanceChar;
end;

procedure TDefaultStatementData.Set_PrintZeroBalanceChar(const Param1: WideString);
begin
  DefaultInterface.Set_PrintZeroBalanceChar(Param1);
end;

function TDefaultStatementData.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TDefaultStatementData.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TDefaultStatementData.Read: Smallint;
begin
  Result := DefaultInterface.Read;
end;

function TDefaultStatementData.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDefaultStatementDataProperties.Create(AServer: TDefaultStatementData);
begin
  inherited Create;
  FServer := AServer;
end;

function TDefaultStatementDataProperties.GetDefaultInterface: _DefaultStatementData;
begin
  Result := FServer.DefaultInterface;
end;

function TDefaultStatementDataProperties.Get_ActualLength: Integer;
begin
    Result := DefaultInterface.ActualLength;
end;

function TDefaultStatementDataProperties.Get_DunningDays(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DunningDays[Index];
end;

procedure TDefaultStatementDataProperties.Set_DunningDays(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DunningDays[Index] := Param2;
end;

function TDefaultStatementDataProperties.Get_DunningMessage(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DunningMessage[Index];
end;

procedure TDefaultStatementDataProperties.Set_DunningMessage(Index: Smallint; 
                                                             const Param2: WideString);
begin
  DefaultInterface.Set_DunningMessage(Index,Param2);
end;

function TDefaultStatementDataProperties.Get_FCWarningMessage: WideString;
begin
    Result := DefaultInterface.FCWarningMessage;
end;

procedure TDefaultStatementDataProperties.Set_FCWarningMessage(const Param1: WideString);
begin
  DefaultInterface.Set_FCWarningMessage(Param1);
end;

function TDefaultStatementDataProperties.Get_PrintAddress: WordBool;
begin
    Result := DefaultInterface.PrintAddress;
end;

procedure TDefaultStatementDataProperties.Set_PrintAddress(Param1: WordBool);
begin
  DefaultInterface.Set_PrintAddress(Param1);
end;

function TDefaultStatementDataProperties.Get_PrintAnyActivity: WordBool;
begin
    Result := DefaultInterface.PrintAnyActivity;
end;

procedure TDefaultStatementDataProperties.Set_PrintAnyActivity(Param1: WordBool);
begin
  DefaultInterface.Set_PrintAnyActivity(Param1);
end;

function TDefaultStatementDataProperties.Get_PrintBalancesAtLeast: WordBool;
begin
    Result := DefaultInterface.PrintBalancesAtLeast;
end;

procedure TDefaultStatementDataProperties.Set_PrintBalancesAtLeast(Param1: WordBool);
begin
  DefaultInterface.Set_PrintBalancesAtLeast(Param1);
end;

function TDefaultStatementDataProperties.Get_PrintFCWarning: WordBool;
begin
    Result := DefaultInterface.PrintFCWarning;
end;

procedure TDefaultStatementDataProperties.Set_PrintFCWarning(Param1: WordBool);
begin
  DefaultInterface.Set_PrintFCWarning(Param1);
end;

function TDefaultStatementDataProperties.Get_PrintInvoicesAtLeast: WordBool;
begin
    Result := DefaultInterface.PrintInvoicesAtLeast;
end;

procedure TDefaultStatementDataProperties.Set_PrintInvoicesAtLeast(Param1: WordBool);
begin
  DefaultInterface.Set_PrintInvoicesAtLeast(Param1);
end;

function TDefaultStatementDataProperties.Get_PrintMinimumBalance: Double;
begin
    Result := DefaultInterface.PrintMinimumBalance;
end;

procedure TDefaultStatementDataProperties.Set_PrintMinimumBalance(Param1: Double);
begin
  DefaultInterface.Set_PrintMinimumBalance(Param1);
end;

function TDefaultStatementDataProperties.Get_PrintNegativeBalance: WordBool;
begin
    Result := DefaultInterface.PrintNegativeBalance;
end;

procedure TDefaultStatementDataProperties.Set_PrintNegativeBalance(Param1: WordBool);
begin
  DefaultInterface.Set_PrintNegativeBalance(Param1);
end;

function TDefaultStatementDataProperties.Get_PrintNegativeBalanceChar: WideString;
begin
    Result := DefaultInterface.PrintNegativeBalanceChar;
end;

procedure TDefaultStatementDataProperties.Set_PrintNegativeBalanceChar(const Param1: WideString);
begin
  DefaultInterface.Set_PrintNegativeBalanceChar(Param1);
end;

function TDefaultStatementDataProperties.Get_PrintOverdueDays: Smallint;
begin
    Result := DefaultInterface.PrintOverdueDays;
end;

procedure TDefaultStatementDataProperties.Set_PrintOverdueDays(Param1: Smallint);
begin
  DefaultInterface.Set_PrintOverdueDays(Param1);
end;

function TDefaultStatementDataProperties.Get_PrintZeroBalance: WordBool;
begin
    Result := DefaultInterface.PrintZeroBalance;
end;

procedure TDefaultStatementDataProperties.Set_PrintZeroBalance(Param1: WordBool);
begin
  DefaultInterface.Set_PrintZeroBalance(Param1);
end;

function TDefaultStatementDataProperties.Get_PrintZeroBalanceChar: WideString;
begin
    Result := DefaultInterface.PrintZeroBalanceChar;
end;

procedure TDefaultStatementDataProperties.Set_PrintZeroBalanceChar(const Param1: WideString);
begin
  DefaultInterface.Set_PrintZeroBalanceChar(Param1);
end;

{$ENDIF}

class function CoDefaultTaxTypes.Create: _DefaultTaxTypes;
begin
  Result := CreateComObject(CLASS_DefaultTaxTypes) as _DefaultTaxTypes;
end;

class function CoDefaultTaxTypes.CreateRemote(const MachineName: string): _DefaultTaxTypes;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DefaultTaxTypes) as _DefaultTaxTypes;
end;

procedure TDefaultTaxTypes.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{078F2EB5-8BC3-4677-A627-60DDBF864C90}';
    IntfIID:   '{8C51FB85-22A0-4911-B528-904321D88575}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDefaultTaxTypes.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DefaultTaxTypes;
  end;
end;

procedure TDefaultTaxTypes.ConnectTo(svrIntf: _DefaultTaxTypes);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDefaultTaxTypes.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDefaultTaxTypes.GetDefaultInterface: _DefaultTaxTypes;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDefaultTaxTypes.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDefaultTaxTypesProperties.Create(Self);
{$ENDIF}
end;

destructor TDefaultTaxTypes.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDefaultTaxTypes.GetServerProperties: TDefaultTaxTypesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDefaultTaxTypes.Get_Description(Index: Smallint): WideString;
begin
    Result := DefaultInterface.Description[Index];
end;

procedure TDefaultTaxTypes.Set_Description(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_Description(Index,Param2);
end;

function TDefaultTaxTypes.Get_Taxable(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.Taxable[Index];
end;

procedure TDefaultTaxTypes.Set_Taxable(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.Taxable[Index] := Param2;
end;

function TDefaultTaxTypes.Get_Unknown(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown[Index];
end;

procedure TDefaultTaxTypes.Set_Unknown(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown[Index] := Param2;
end;

function TDefaultTaxTypes.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TDefaultTaxTypes.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TDefaultTaxTypes.Read: Smallint;
begin
  Result := DefaultInterface.Read;
end;

function TDefaultTaxTypes.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDefaultTaxTypesProperties.Create(AServer: TDefaultTaxTypes);
begin
  inherited Create;
  FServer := AServer;
end;

function TDefaultTaxTypesProperties.GetDefaultInterface: _DefaultTaxTypes;
begin
  Result := FServer.DefaultInterface;
end;

function TDefaultTaxTypesProperties.Get_Description(Index: Smallint): WideString;
begin
    Result := DefaultInterface.Description[Index];
end;

procedure TDefaultTaxTypesProperties.Set_Description(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_Description(Index,Param2);
end;

function TDefaultTaxTypesProperties.Get_Taxable(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.Taxable[Index];
end;

procedure TDefaultTaxTypesProperties.Set_Taxable(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.Taxable[Index] := Param2;
end;

function TDefaultTaxTypesProperties.Get_Unknown(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown[Index];
end;

procedure TDefaultTaxTypesProperties.Set_Unknown(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown[Index] := Param2;
end;

{$ENDIF}

class function CoDefaultVendorData.Create: _DefaultVendorData;
begin
  Result := CreateComObject(CLASS_DefaultVendorData) as _DefaultVendorData;
end;

class function CoDefaultVendorData.CreateRemote(const MachineName: string): _DefaultVendorData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DefaultVendorData) as _DefaultVendorData;
end;

procedure TDefaultVendorData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1EFFAA3B-5888-4423-B0E8-9D9FF3CE102D}';
    IntfIID:   '{694A13DF-B513-4AF2-BF55-2AA70D375DB4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDefaultVendorData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DefaultVendorData;
  end;
end;

procedure TDefaultVendorData.ConnectTo(svrIntf: _DefaultVendorData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDefaultVendorData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDefaultVendorData.GetDefaultInterface: _DefaultVendorData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDefaultVendorData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDefaultVendorDataProperties.Create(Self);
{$ENDIF}
end;

destructor TDefaultVendorData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDefaultVendorData.GetServerProperties: TDefaultVendorDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDefaultVendorData.Get_ActualLength: Integer;
begin
    Result := DefaultInterface.ActualLength;
end;

function TDefaultVendorData.Get_AgeByDueDate: WordBool;
begin
    Result := DefaultInterface.AgeByDueDate;
end;

procedure TDefaultVendorData.Set_AgeByDueDate(Param1: WordBool);
begin
  DefaultInterface.Set_AgeByDueDate(Param1);
end;

function TDefaultVendorData.Get_AgingDays(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.AgingDays[Index];
end;

procedure TDefaultVendorData.Set_AgingDays(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.AgingDays[Index] := Param2;
end;

function TDefaultVendorData.Get_AgingHeading(Index: Smallint): WideString;
begin
    Result := DefaultInterface.AgingHeading[Index];
end;

procedure TDefaultVendorData.Set_AgingHeading(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_AgingHeading(Index,Param2);
end;

function TDefaultVendorData.Get_APAccount: WideString;
begin
    Result := DefaultInterface.APAccount;
end;

procedure TDefaultVendorData.Set_APAccount(const Param1: WideString);
begin
  DefaultInterface.Set_APAccount(Param1);
end;

function TDefaultVendorData.Get_CashAccount: WideString;
begin
    Result := DefaultInterface.CashAccount;
end;

procedure TDefaultVendorData.Set_CashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_CashAccount(Param1);
end;

function TDefaultVendorData.Get_COD: WordBool;
begin
    Result := DefaultInterface.COD;
end;

procedure TDefaultVendorData.Set_COD(Param1: WordBool);
begin
  DefaultInterface.Set_COD(Param1);
end;

function TDefaultVendorData.Get_CreditLimit: Double;
begin
    Result := DefaultInterface.CreditLimit;
end;

procedure TDefaultVendorData.Set_CreditLimit(Param1: Double);
begin
  DefaultInterface.Set_CreditLimit(Param1);
end;

function TDefaultVendorData.Get_CustomFieldEnabled(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.CustomFieldEnabled[Index];
end;

procedure TDefaultVendorData.Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.CustomFieldEnabled[Index] := Param2;
end;

function TDefaultVendorData.Get_CustomFieldLabel(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomFieldLabel[Index];
end;

procedure TDefaultVendorData.Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomFieldLabel(Index,Param2);
end;

function TDefaultVendorData.Get_DiscountDays: Smallint;
begin
    Result := DefaultInterface.DiscountDays;
end;

procedure TDefaultVendorData.Set_DiscountDays(Param1: Smallint);
begin
  DefaultInterface.Set_DiscountDays(Param1);
end;

function TDefaultVendorData.Get_DiscountPercent: Double;
begin
    Result := DefaultInterface.DiscountPercent;
end;

procedure TDefaultVendorData.Set_DiscountPercent(Param1: Double);
begin
  DefaultInterface.Set_DiscountPercent(Param1);
end;

function TDefaultVendorData.Get_DiscountGLAccount: WideString;
begin
    Result := DefaultInterface.DiscountGLAccount;
end;

procedure TDefaultVendorData.Set_DiscountGLAccount(const Param1: WideString);
begin
  DefaultInterface.Set_DiscountGLAccount(Param1);
end;

function TDefaultVendorData.Get_DueAtEndOfMonth: WordBool;
begin
    Result := DefaultInterface.DueAtEndOfMonth;
end;

procedure TDefaultVendorData.Set_DueAtEndOfMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueAtEndOfMonth(Param1);
end;

function TDefaultVendorData.Get_DueOnDayOfNextMonth: WordBool;
begin
    Result := DefaultInterface.DueOnDayOfNextMonth;
end;

procedure TDefaultVendorData.Set_DueOnDayOfNextMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueOnDayOfNextMonth(Param1);
end;

function TDefaultVendorData.Get_LastPONumber: WideString;
begin
    Result := DefaultInterface.LastPONumber;
end;

procedure TDefaultVendorData.Set_LastPONumber(const Param1: WideString);
begin
  DefaultInterface.Set_LastPONumber(Param1);
end;

function TDefaultVendorData.Get_NetDueDays: Smallint;
begin
    Result := DefaultInterface.NetDueDays;
end;

procedure TDefaultVendorData.Set_NetDueDays(Param1: Smallint);
begin
  DefaultInterface.Set_NetDueDays(Param1);
end;

function TDefaultVendorData.Get_NLabels: Smallint;
begin
    Result := DefaultInterface.NLabels;
end;

function TDefaultVendorData.Get_Prepaid: WordBool;
begin
    Result := DefaultInterface.Prepaid;
end;

procedure TDefaultVendorData.Set_Prepaid(Param1: WordBool);
begin
  DefaultInterface.Set_Prepaid(Param1);
end;

function TDefaultVendorData.Get_PurchaseAccount: WideString;
begin
    Result := DefaultInterface.PurchaseAccount;
end;

procedure TDefaultVendorData.Set_PurchaseAccount(const Param1: WideString);
begin
  DefaultInterface.Set_PurchaseAccount(Param1);
end;

function TDefaultVendorData.Get_Unknown1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown1[Index];
end;

procedure TDefaultVendorData.Set_Unknown1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown1[Index] := Param2;
end;

function TDefaultVendorData.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TDefaultVendorData.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TDefaultVendorData.Get_Unused3: Byte;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TDefaultVendorData.Set_Unused3(Param1: Byte);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TDefaultVendorData.Get_Unused4(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused4[Index];
end;

procedure TDefaultVendorData.Set_Unused4(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused4[Index] := Param2;
end;

function TDefaultVendorData.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TDefaultVendorData.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TDefaultVendorData.Get_WriteCheckCashAccount: WideString;
begin
    Result := DefaultInterface.WriteCheckCashAccount;
end;

procedure TDefaultVendorData.Set_WriteCheckCashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_WriteCheckCashAccount(Param1);
end;

function TDefaultVendorData.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TDefaultVendorData.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TDefaultVendorData.Read: Smallint;
begin
  Result := DefaultInterface.Read;
end;

function TDefaultVendorData.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDefaultVendorDataProperties.Create(AServer: TDefaultVendorData);
begin
  inherited Create;
  FServer := AServer;
end;

function TDefaultVendorDataProperties.GetDefaultInterface: _DefaultVendorData;
begin
  Result := FServer.DefaultInterface;
end;

function TDefaultVendorDataProperties.Get_ActualLength: Integer;
begin
    Result := DefaultInterface.ActualLength;
end;

function TDefaultVendorDataProperties.Get_AgeByDueDate: WordBool;
begin
    Result := DefaultInterface.AgeByDueDate;
end;

procedure TDefaultVendorDataProperties.Set_AgeByDueDate(Param1: WordBool);
begin
  DefaultInterface.Set_AgeByDueDate(Param1);
end;

function TDefaultVendorDataProperties.Get_AgingDays(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.AgingDays[Index];
end;

procedure TDefaultVendorDataProperties.Set_AgingDays(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.AgingDays[Index] := Param2;
end;

function TDefaultVendorDataProperties.Get_AgingHeading(Index: Smallint): WideString;
begin
    Result := DefaultInterface.AgingHeading[Index];
end;

procedure TDefaultVendorDataProperties.Set_AgingHeading(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_AgingHeading(Index,Param2);
end;

function TDefaultVendorDataProperties.Get_APAccount: WideString;
begin
    Result := DefaultInterface.APAccount;
end;

procedure TDefaultVendorDataProperties.Set_APAccount(const Param1: WideString);
begin
  DefaultInterface.Set_APAccount(Param1);
end;

function TDefaultVendorDataProperties.Get_CashAccount: WideString;
begin
    Result := DefaultInterface.CashAccount;
end;

procedure TDefaultVendorDataProperties.Set_CashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_CashAccount(Param1);
end;

function TDefaultVendorDataProperties.Get_COD: WordBool;
begin
    Result := DefaultInterface.COD;
end;

procedure TDefaultVendorDataProperties.Set_COD(Param1: WordBool);
begin
  DefaultInterface.Set_COD(Param1);
end;

function TDefaultVendorDataProperties.Get_CreditLimit: Double;
begin
    Result := DefaultInterface.CreditLimit;
end;

procedure TDefaultVendorDataProperties.Set_CreditLimit(Param1: Double);
begin
  DefaultInterface.Set_CreditLimit(Param1);
end;

function TDefaultVendorDataProperties.Get_CustomFieldEnabled(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.CustomFieldEnabled[Index];
end;

procedure TDefaultVendorDataProperties.Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.CustomFieldEnabled[Index] := Param2;
end;

function TDefaultVendorDataProperties.Get_CustomFieldLabel(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomFieldLabel[Index];
end;

procedure TDefaultVendorDataProperties.Set_CustomFieldLabel(Index: Smallint; 
                                                            const Param2: WideString);
begin
  DefaultInterface.Set_CustomFieldLabel(Index,Param2);
end;

function TDefaultVendorDataProperties.Get_DiscountDays: Smallint;
begin
    Result := DefaultInterface.DiscountDays;
end;

procedure TDefaultVendorDataProperties.Set_DiscountDays(Param1: Smallint);
begin
  DefaultInterface.Set_DiscountDays(Param1);
end;

function TDefaultVendorDataProperties.Get_DiscountPercent: Double;
begin
    Result := DefaultInterface.DiscountPercent;
end;

procedure TDefaultVendorDataProperties.Set_DiscountPercent(Param1: Double);
begin
  DefaultInterface.Set_DiscountPercent(Param1);
end;

function TDefaultVendorDataProperties.Get_DiscountGLAccount: WideString;
begin
    Result := DefaultInterface.DiscountGLAccount;
end;

procedure TDefaultVendorDataProperties.Set_DiscountGLAccount(const Param1: WideString);
begin
  DefaultInterface.Set_DiscountGLAccount(Param1);
end;

function TDefaultVendorDataProperties.Get_DueAtEndOfMonth: WordBool;
begin
    Result := DefaultInterface.DueAtEndOfMonth;
end;

procedure TDefaultVendorDataProperties.Set_DueAtEndOfMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueAtEndOfMonth(Param1);
end;

function TDefaultVendorDataProperties.Get_DueOnDayOfNextMonth: WordBool;
begin
    Result := DefaultInterface.DueOnDayOfNextMonth;
end;

procedure TDefaultVendorDataProperties.Set_DueOnDayOfNextMonth(Param1: WordBool);
begin
  DefaultInterface.Set_DueOnDayOfNextMonth(Param1);
end;

function TDefaultVendorDataProperties.Get_LastPONumber: WideString;
begin
    Result := DefaultInterface.LastPONumber;
end;

procedure TDefaultVendorDataProperties.Set_LastPONumber(const Param1: WideString);
begin
  DefaultInterface.Set_LastPONumber(Param1);
end;

function TDefaultVendorDataProperties.Get_NetDueDays: Smallint;
begin
    Result := DefaultInterface.NetDueDays;
end;

procedure TDefaultVendorDataProperties.Set_NetDueDays(Param1: Smallint);
begin
  DefaultInterface.Set_NetDueDays(Param1);
end;

function TDefaultVendorDataProperties.Get_NLabels: Smallint;
begin
    Result := DefaultInterface.NLabels;
end;

function TDefaultVendorDataProperties.Get_Prepaid: WordBool;
begin
    Result := DefaultInterface.Prepaid;
end;

procedure TDefaultVendorDataProperties.Set_Prepaid(Param1: WordBool);
begin
  DefaultInterface.Set_Prepaid(Param1);
end;

function TDefaultVendorDataProperties.Get_PurchaseAccount: WideString;
begin
    Result := DefaultInterface.PurchaseAccount;
end;

procedure TDefaultVendorDataProperties.Set_PurchaseAccount(const Param1: WideString);
begin
  DefaultInterface.Set_PurchaseAccount(Param1);
end;

function TDefaultVendorDataProperties.Get_Unknown1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown1[Index];
end;

procedure TDefaultVendorDataProperties.Set_Unknown1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown1[Index] := Param2;
end;

function TDefaultVendorDataProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TDefaultVendorDataProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TDefaultVendorDataProperties.Get_Unused3: Byte;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TDefaultVendorDataProperties.Set_Unused3(Param1: Byte);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TDefaultVendorDataProperties.Get_Unused4(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused4[Index];
end;

procedure TDefaultVendorDataProperties.Set_Unused4(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused4[Index] := Param2;
end;

function TDefaultVendorDataProperties.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TDefaultVendorDataProperties.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TDefaultVendorDataProperties.Get_WriteCheckCashAccount: WideString;
begin
    Result := DefaultInterface.WriteCheckCashAccount;
end;

procedure TDefaultVendorDataProperties.Set_WriteCheckCashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_WriteCheckCashAccount(Param1);
end;

{$ENDIF}

class function CoDefaultInventoryData.Create: _DefaultInventoryData;
begin
  Result := CreateComObject(CLASS_DefaultInventoryData) as _DefaultInventoryData;
end;

class function CoDefaultInventoryData.CreateRemote(const MachineName: string): _DefaultInventoryData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DefaultInventoryData) as _DefaultInventoryData;
end;

procedure TDefaultInventoryData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3E93158D-7D06-4542-9294-4B105AC82049}';
    IntfIID:   '{8D834B33-7E7D-412C-819A-C87393958778}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDefaultInventoryData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DefaultInventoryData;
  end;
end;

procedure TDefaultInventoryData.ConnectTo(svrIntf: _DefaultInventoryData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDefaultInventoryData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDefaultInventoryData.GetDefaultInterface: _DefaultInventoryData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDefaultInventoryData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDefaultInventoryDataProperties.Create(Self);
{$ENDIF}
end;

destructor TDefaultInventoryData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDefaultInventoryData.GetServerProperties: TDefaultInventoryDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDefaultInventoryData.Get_CustomFieldEnabled(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.CustomFieldEnabled[Index];
end;

procedure TDefaultInventoryData.Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.CustomFieldEnabled[Index] := Param2;
end;

function TDefaultInventoryData.Get_CustomFieldLabel(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomFieldLabel[Index];
end;

procedure TDefaultInventoryData.Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomFieldLabel(Index,Param2);
end;

function TDefaultInventoryData.Get_GLFreightAccount: WideString;
begin
    Result := DefaultInterface.GLFreightAccount;
end;

procedure TDefaultInventoryData.Set_GLFreightAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLFreightAccount(Param1);
end;

function TDefaultInventoryData.Get_NLabels: Smallint;
begin
    Result := DefaultInterface.NLabels;
end;

function TDefaultInventoryData.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TDefaultInventoryData.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TDefaultInventoryData.Read: Smallint;
begin
  Result := DefaultInterface.Read;
end;

function TDefaultInventoryData.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDefaultInventoryDataProperties.Create(AServer: TDefaultInventoryData);
begin
  inherited Create;
  FServer := AServer;
end;

function TDefaultInventoryDataProperties.GetDefaultInterface: _DefaultInventoryData;
begin
  Result := FServer.DefaultInterface;
end;

function TDefaultInventoryDataProperties.Get_CustomFieldEnabled(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.CustomFieldEnabled[Index];
end;

procedure TDefaultInventoryDataProperties.Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.CustomFieldEnabled[Index] := Param2;
end;

function TDefaultInventoryDataProperties.Get_CustomFieldLabel(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomFieldLabel[Index];
end;

procedure TDefaultInventoryDataProperties.Set_CustomFieldLabel(Index: Smallint; 
                                                               const Param2: WideString);
begin
  DefaultInterface.Set_CustomFieldLabel(Index,Param2);
end;

function TDefaultInventoryDataProperties.Get_GLFreightAccount: WideString;
begin
    Result := DefaultInterface.GLFreightAccount;
end;

procedure TDefaultInventoryDataProperties.Set_GLFreightAccount(const Param1: WideString);
begin
  DefaultInterface.Set_GLFreightAccount(Param1);
end;

function TDefaultInventoryDataProperties.Get_NLabels: Smallint;
begin
    Result := DefaultInterface.NLabels;
end;

{$ENDIF}

class function CoDefaultGLAccounts.Create: _DefaultGLAccounts;
begin
  Result := CreateComObject(CLASS_DefaultGLAccounts) as _DefaultGLAccounts;
end;

class function CoDefaultGLAccounts.CreateRemote(const MachineName: string): _DefaultGLAccounts;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DefaultGLAccounts) as _DefaultGLAccounts;
end;

procedure TDefaultGLAccounts.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{19B50B6E-5367-4402-97CF-5665BD91CA63}';
    IntfIID:   '{7244422D-476B-43D1-B263-A3A4EC39FBA5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDefaultGLAccounts.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DefaultGLAccounts;
  end;
end;

procedure TDefaultGLAccounts.ConnectTo(svrIntf: _DefaultGLAccounts);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDefaultGLAccounts.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDefaultGLAccounts.GetDefaultInterface: _DefaultGLAccounts;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDefaultGLAccounts.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDefaultGLAccountsProperties.Create(Self);
{$ENDIF}
end;

destructor TDefaultGLAccounts.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDefaultGLAccounts.GetServerProperties: TDefaultGLAccountsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDefaultGLAccounts.Get_Costing(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Costing[Index];
end;

procedure TDefaultGLAccounts.Set_Costing(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Costing[Index] := Param2;
end;

function TDefaultGLAccounts.Get_GLCostOfSales(Index: Smallint): WideString;
begin
    Result := DefaultInterface.GLCostOfSales[Index];
end;

procedure TDefaultGLAccounts.Set_GLCostOfSales(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_GLCostOfSales(Index,Param2);
end;

function TDefaultGLAccounts.Get_GLInventoryWage(Index: Smallint): WideString;
begin
    Result := DefaultInterface.GLInventoryWage[Index];
end;

procedure TDefaultGLAccounts.Set_GLInventoryWage(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_GLInventoryWage(Index,Param2);
end;

function TDefaultGLAccounts.Get_GLSales(Index: Smallint): WideString;
begin
    Result := DefaultInterface.GLSales[Index];
end;

procedure TDefaultGLAccounts.Set_GLSales(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_GLSales(Index,Param2);
end;

function TDefaultGLAccounts.Get_ItemClassIndex(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.ItemClassIndex[Index];
end;

procedure TDefaultGLAccounts.Set_ItemClassIndex(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.ItemClassIndex[Index] := Param2;
end;

function TDefaultGLAccounts.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TDefaultGLAccounts.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TDefaultGLAccounts.Read: Smallint;
begin
  Result := DefaultInterface.Read;
end;

function TDefaultGLAccounts.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDefaultGLAccountsProperties.Create(AServer: TDefaultGLAccounts);
begin
  inherited Create;
  FServer := AServer;
end;

function TDefaultGLAccountsProperties.GetDefaultInterface: _DefaultGLAccounts;
begin
  Result := FServer.DefaultInterface;
end;

function TDefaultGLAccountsProperties.Get_Costing(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Costing[Index];
end;

procedure TDefaultGLAccountsProperties.Set_Costing(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Costing[Index] := Param2;
end;

function TDefaultGLAccountsProperties.Get_GLCostOfSales(Index: Smallint): WideString;
begin
    Result := DefaultInterface.GLCostOfSales[Index];
end;

procedure TDefaultGLAccountsProperties.Set_GLCostOfSales(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_GLCostOfSales(Index,Param2);
end;

function TDefaultGLAccountsProperties.Get_GLInventoryWage(Index: Smallint): WideString;
begin
    Result := DefaultInterface.GLInventoryWage[Index];
end;

procedure TDefaultGLAccountsProperties.Set_GLInventoryWage(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_GLInventoryWage(Index,Param2);
end;

function TDefaultGLAccountsProperties.Get_GLSales(Index: Smallint): WideString;
begin
    Result := DefaultInterface.GLSales[Index];
end;

procedure TDefaultGLAccountsProperties.Set_GLSales(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_GLSales(Index,Param2);
end;

function TDefaultGLAccountsProperties.Get_ItemClassIndex(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.ItemClassIndex[Index];
end;

procedure TDefaultGLAccountsProperties.Set_ItemClassIndex(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.ItemClassIndex[Index] := Param2;
end;

{$ENDIF}

class function CoDefaultJobData.Create: _DefaultJobData;
begin
  Result := CreateComObject(CLASS_DefaultJobData) as _DefaultJobData;
end;

class function CoDefaultJobData.CreateRemote(const MachineName: string): _DefaultJobData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DefaultJobData) as _DefaultJobData;
end;

procedure TDefaultJobData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4362B82A-010A-4647-B7F5-95137500100F}';
    IntfIID:   '{95677474-3820-4C10-B5E9-FE0F96D6AEF4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDefaultJobData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DefaultJobData;
  end;
end;

procedure TDefaultJobData.ConnectTo(svrIntf: _DefaultJobData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDefaultJobData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDefaultJobData.GetDefaultInterface: _DefaultJobData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDefaultJobData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDefaultJobDataProperties.Create(Self);
{$ENDIF}
end;

destructor TDefaultJobData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDefaultJobData.GetServerProperties: TDefaultJobDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDefaultJobData.Get_CustomFieldEnabled(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.CustomFieldEnabled[Index];
end;

procedure TDefaultJobData.Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.CustomFieldEnabled[Index] := Param2;
end;

function TDefaultJobData.Get_CustomFieldLabel(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomFieldLabel[Index];
end;

procedure TDefaultJobData.Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomFieldLabel(Index,Param2);
end;

function TDefaultJobData.Get_NLabels: Smallint;
begin
    Result := DefaultInterface.NLabels;
end;

function TDefaultJobData.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TDefaultJobData.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TDefaultJobData.Read: Smallint;
begin
  Result := DefaultInterface.Read;
end;

function TDefaultJobData.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDefaultJobDataProperties.Create(AServer: TDefaultJobData);
begin
  inherited Create;
  FServer := AServer;
end;

function TDefaultJobDataProperties.GetDefaultInterface: _DefaultJobData;
begin
  Result := FServer.DefaultInterface;
end;

function TDefaultJobDataProperties.Get_CustomFieldEnabled(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.CustomFieldEnabled[Index];
end;

procedure TDefaultJobDataProperties.Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.CustomFieldEnabled[Index] := Param2;
end;

function TDefaultJobDataProperties.Get_CustomFieldLabel(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomFieldLabel[Index];
end;

procedure TDefaultJobDataProperties.Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomFieldLabel(Index,Param2);
end;

function TDefaultJobDataProperties.Get_NLabels: Smallint;
begin
    Result := DefaultInterface.NLabels;
end;

{$ENDIF}

class function CoDefaultEmployeeData.Create: _DefaultEmployeeData;
begin
  Result := CreateComObject(CLASS_DefaultEmployeeData) as _DefaultEmployeeData;
end;

class function CoDefaultEmployeeData.CreateRemote(const MachineName: string): _DefaultEmployeeData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DefaultEmployeeData) as _DefaultEmployeeData;
end;

procedure TDefaultEmployeeData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5912BA69-EF35-4F00-AF8E-BC176D8581DC}';
    IntfIID:   '{FE278A92-7AB4-46BF-8C63-13A1A8B716AC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDefaultEmployeeData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DefaultEmployeeData;
  end;
end;

procedure TDefaultEmployeeData.ConnectTo(svrIntf: _DefaultEmployeeData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDefaultEmployeeData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDefaultEmployeeData.GetDefaultInterface: _DefaultEmployeeData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDefaultEmployeeData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDefaultEmployeeDataProperties.Create(Self);
{$ENDIF}
end;

destructor TDefaultEmployeeData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDefaultEmployeeData.GetServerProperties: TDefaultEmployeeDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDefaultEmployeeData.Get_CustomFieldEnabled(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.CustomFieldEnabled[Index];
end;

procedure TDefaultEmployeeData.Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.CustomFieldEnabled[Index] := Param2;
end;

function TDefaultEmployeeData.Get_CustomFieldLabel(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomFieldLabel[Index];
end;

procedure TDefaultEmployeeData.Set_CustomFieldLabel(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomFieldLabel(Index,Param2);
end;

function TDefaultEmployeeData.Get_DisplayLastNameFirst: WordBool;
begin
    Result := DefaultInterface.DisplayLastNameFirst;
end;

procedure TDefaultEmployeeData.Set_DisplayLastNameFirst(Param1: WordBool);
begin
  DefaultInterface.Set_DisplayLastNameFirst(Param1);
end;

function TDefaultEmployeeData.Get_EEAdjust(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.EEAdjust[Index1, Index2];
end;

procedure TDefaultEmployeeData.Set_EEAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
begin
  DefaultInterface.EEAdjust[Index1, Index2] := Param3;
end;

function TDefaultEmployeeData.Get_EEAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.EEAmount[Index];
end;

procedure TDefaultEmployeeData.Set_EEAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.EEAmount[Index] := Param2;
end;

function TDefaultEmployeeData.Get_EECalc(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.EECalc[Index];
end;

procedure TDefaultEmployeeData.Set_EECalc(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.EECalc[Index] := Param2;
end;

function TDefaultEmployeeData.Get_EECalcName(Index: Smallint): WideString;
begin
    Result := DefaultInterface.EECalcName[Index];
end;

procedure TDefaultEmployeeData.Set_EECalcName(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_EECalcName(Index,Param2);
end;

function TDefaultEmployeeData.Get_EEDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.EEDescription[Index];
end;

procedure TDefaultEmployeeData.Set_EEDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_EEDescription(Index,Param2);
end;

function TDefaultEmployeeData.Get_EEDisability: Smallint;
begin
    Result := DefaultInterface.EEDisability;
end;

procedure TDefaultEmployeeData.Set_EEDisability(Param1: Smallint);
begin
  DefaultInterface.Set_EEDisability(Param1);
end;

function TDefaultEmployeeData.Get_EEStateUnemployment: Smallint;
begin
    Result := DefaultInterface.EEStateUnemployment;
end;

procedure TDefaultEmployeeData.Set_EEStateUnemployment(Param1: Smallint);
begin
  DefaultInterface.Set_EEStateUnemployment(Param1);
end;

function TDefaultEmployeeData.Get_EETrainingTax: Smallint;
begin
    Result := DefaultInterface.EETrainingTax;
end;

procedure TDefaultEmployeeData.Set_EETrainingTax(Param1: Smallint);
begin
  DefaultInterface.Set_EETrainingTax(Param1);
end;

function TDefaultEmployeeData.Get_EEGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.EEGLAccount[Index];
end;

procedure TDefaultEmployeeData.Set_EEGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_EEGLAccount(Index,Param2);
end;

function TDefaultEmployeeData.Get_EEMemo(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.EEMemo[Index];
end;

procedure TDefaultEmployeeData.Set_EEMemo(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.EEMemo[Index] := Param2;
end;

function TDefaultEmployeeData.Get_EERun(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.EERun[Index];
end;

procedure TDefaultEmployeeData.Set_EERun(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.EERun[Index] := Param2;
end;

function TDefaultEmployeeData.Get_ERAdjust(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.ERAdjust[Index1, Index2];
end;

procedure TDefaultEmployeeData.Set_ERAdjust(Index1: Smallint; Index2: Smallint; Param3: Byte);
begin
  DefaultInterface.ERAdjust[Index1, Index2] := Param3;
end;

function TDefaultEmployeeData.Get_ERCalc(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.ERCalc[Index];
end;

procedure TDefaultEmployeeData.Set_ERCalc(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.ERCalc[Index] := Param2;
end;

function TDefaultEmployeeData.Get_ERCalcName(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERCalcName[Index];
end;

procedure TDefaultEmployeeData.Set_ERCalcName(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ERCalcName(Index,Param2);
end;

function TDefaultEmployeeData.Get_ERDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERDescription[Index];
end;

procedure TDefaultEmployeeData.Set_ERDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ERDescription(Index,Param2);
end;

function TDefaultEmployeeData.Get_ERExpenseAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERExpenseAccount[Index];
end;

procedure TDefaultEmployeeData.Set_ERExpenseAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ERExpenseAccount(Index,Param2);
end;

function TDefaultEmployeeData.Get_ERLiabilityAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERLiabilityAccount[Index];
end;

procedure TDefaultEmployeeData.Set_ERLiabilityAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ERLiabilityAccount(Index,Param2);
end;

function TDefaultEmployeeData.Get_FUTA_ER: Smallint;
begin
    Result := DefaultInterface.FUTA_ER;
end;

procedure TDefaultEmployeeData.Set_FUTA_ER(Param1: Smallint);
begin
  DefaultInterface.Set_FUTA_ER(Param1);
end;

function TDefaultEmployeeData.Get_HoursDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.HoursDescription[Index];
end;

procedure TDefaultEmployeeData.Set_HoursDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_HoursDescription(Index,Param2);
end;

function TDefaultEmployeeData.Get_HoursGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.HoursGLAccount[Index];
end;

procedure TDefaultEmployeeData.Set_HoursGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_HoursGLAccount(Index,Param2);
end;

function TDefaultEmployeeData.Get_Locality: WideString;
begin
    Result := DefaultInterface.Locality;
end;

procedure TDefaultEmployeeData.Set_Locality(const Param1: WideString);
begin
  DefaultInterface.Set_Locality(Param1);
end;

function TDefaultEmployeeData.Get_NLabels: Smallint;
begin
    Result := DefaultInterface.NLabels;
end;

function TDefaultEmployeeData.Get_PayrollCashAccount: WideString;
begin
    Result := DefaultInterface.PayrollCashAccount;
end;

procedure TDefaultEmployeeData.Set_PayrollCashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_PayrollCashAccount(Param1);
end;

function TDefaultEmployeeData.Get_SalaryDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.SalaryDescription[Index];
end;

procedure TDefaultEmployeeData.Set_SalaryDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_SalaryDescription(Index,Param2);
end;

function TDefaultEmployeeData.Get_SalaryGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.SalaryGLAccount[Index];
end;

procedure TDefaultEmployeeData.Set_SalaryGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_SalaryGLAccount(Index,Param2);
end;

function TDefaultEmployeeData.Get_SDI: Smallint;
begin
    Result := DefaultInterface.SDI;
end;

procedure TDefaultEmployeeData.Set_SDI(Param1: Smallint);
begin
  DefaultInterface.Set_SDI(Param1);
end;

function TDefaultEmployeeData.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TDefaultEmployeeData.Set_State(const Param1: WideString);
begin
  DefaultInterface.Set_State(Param1);
end;

function TDefaultEmployeeData.Get_StateSpecialA: Smallint;
begin
    Result := DefaultInterface.StateSpecialA;
end;

procedure TDefaultEmployeeData.Set_StateSpecialA(Param1: Smallint);
begin
  DefaultInterface.Set_StateSpecialA(Param1);
end;

function TDefaultEmployeeData.Get_StateSpecialB: Smallint;
begin
    Result := DefaultInterface.StateSpecialB;
end;

procedure TDefaultEmployeeData.Set_StateSpecialB(Param1: Smallint);
begin
  DefaultInterface.Set_StateSpecialB(Param1);
end;

function TDefaultEmployeeData.Get_StateTrainingTax: Smallint;
begin
    Result := DefaultInterface.StateTrainingTax;
end;

procedure TDefaultEmployeeData.Set_StateTrainingTax(Param1: Smallint);
begin
  DefaultInterface.Set_StateTrainingTax(Param1);
end;

function TDefaultEmployeeData.Get_SUI_ER: Smallint;
begin
    Result := DefaultInterface.SUI_ER;
end;

procedure TDefaultEmployeeData.Set_SUI_ER(Param1: Smallint);
begin
  DefaultInterface.Set_SUI_ER(Param1);
end;

function TDefaultEmployeeData.Get_Unknown1: Smallint;
begin
    Result := DefaultInterface.Unknown1;
end;

procedure TDefaultEmployeeData.Set_Unknown1(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown1(Param1);
end;

function TDefaultEmployeeData.Get_Unknown2: Smallint;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TDefaultEmployeeData.Set_Unknown2(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TDefaultEmployeeData.Get_Unknown3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown3[Index];
end;

procedure TDefaultEmployeeData.Set_Unknown3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown3[Index] := Param2;
end;

function TDefaultEmployeeData.Get_W2Field2: Smallint;
begin
    Result := DefaultInterface.W2Field2;
end;

procedure TDefaultEmployeeData.Set_W2Field2(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field2(Param1);
end;

function TDefaultEmployeeData.Get_W2Field4: Smallint;
begin
    Result := DefaultInterface.W2Field4;
end;

procedure TDefaultEmployeeData.Set_W2Field4(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field4(Param1);
end;

function TDefaultEmployeeData.Get_W2Field6: Smallint;
begin
    Result := DefaultInterface.W2Field6;
end;

procedure TDefaultEmployeeData.Set_W2Field6(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field6(Param1);
end;

function TDefaultEmployeeData.Get_W2Field7: Smallint;
begin
    Result := DefaultInterface.W2Field7;
end;

procedure TDefaultEmployeeData.Set_W2Field7(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field7(Param1);
end;

function TDefaultEmployeeData.Get_W2Field8: Smallint;
begin
    Result := DefaultInterface.W2Field8;
end;

procedure TDefaultEmployeeData.Set_W2Field8(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field8(Param1);
end;

function TDefaultEmployeeData.Get_W2Field9: Smallint;
begin
    Result := DefaultInterface.W2Field9;
end;

procedure TDefaultEmployeeData.Set_W2Field9(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field9(Param1);
end;

function TDefaultEmployeeData.Get_W2Field10: Smallint;
begin
    Result := DefaultInterface.W2Field10;
end;

procedure TDefaultEmployeeData.Set_W2Field10(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field10(Param1);
end;

function TDefaultEmployeeData.Get_W2Field11: Smallint;
begin
    Result := DefaultInterface.W2Field11;
end;

procedure TDefaultEmployeeData.Set_W2Field11(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field11(Param1);
end;

function TDefaultEmployeeData.Get_W2Field12: Smallint;
begin
    Result := DefaultInterface.W2Field12;
end;

procedure TDefaultEmployeeData.Set_W2Field12(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field12(Param1);
end;

function TDefaultEmployeeData.Get_W2Field13C1: WideString;
begin
    Result := DefaultInterface.W2Field13C1;
end;

procedure TDefaultEmployeeData.Set_W2Field13C1(const Param1: WideString);
begin
  DefaultInterface.Set_W2Field13C1(Param1);
end;

function TDefaultEmployeeData.Get_W2Field13C2: WideString;
begin
    Result := DefaultInterface.W2Field13C2;
end;

procedure TDefaultEmployeeData.Set_W2Field13C2(const Param1: WideString);
begin
  DefaultInterface.Set_W2Field13C2(Param1);
end;

function TDefaultEmployeeData.Get_W2Field13C3: WideString;
begin
    Result := DefaultInterface.W2Field13C3;
end;

procedure TDefaultEmployeeData.Set_W2Field13C3(const Param1: WideString);
begin
  DefaultInterface.Set_W2Field13C3(Param1);
end;

function TDefaultEmployeeData.Get_W2Field13C4: WideString;
begin
    Result := DefaultInterface.W2Field13C4;
end;

procedure TDefaultEmployeeData.Set_W2Field13C4(const Param1: WideString);
begin
  DefaultInterface.Set_W2Field13C4(Param1);
end;

function TDefaultEmployeeData.Get_W2Field13F1: Smallint;
begin
    Result := DefaultInterface.W2Field13F1;
end;

procedure TDefaultEmployeeData.Set_W2Field13F1(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field13F1(Param1);
end;

function TDefaultEmployeeData.Get_W2Field13F2: Smallint;
begin
    Result := DefaultInterface.W2Field13F2;
end;

procedure TDefaultEmployeeData.Set_W2Field13F2(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field13F2(Param1);
end;

function TDefaultEmployeeData.Get_W2Field13F3: Smallint;
begin
    Result := DefaultInterface.W2Field13F3;
end;

procedure TDefaultEmployeeData.Set_W2Field13F3(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field13F3(Param1);
end;

function TDefaultEmployeeData.Get_W2Field13F4: Smallint;
begin
    Result := DefaultInterface.W2Field13F4;
end;

procedure TDefaultEmployeeData.Set_W2Field13F4(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field13F4(Param1);
end;

function TDefaultEmployeeData.Get_W2Field14: Smallint;
begin
    Result := DefaultInterface.W2Field14;
end;

procedure TDefaultEmployeeData.Set_W2Field14(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field14(Param1);
end;

function TDefaultEmployeeData.Get_W2Field14B: Smallint;
begin
    Result := DefaultInterface.W2Field14B;
end;

procedure TDefaultEmployeeData.Set_W2Field14B(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field14B(Param1);
end;

function TDefaultEmployeeData.Get_W2Field18: Smallint;
begin
    Result := DefaultInterface.W2Field18;
end;

procedure TDefaultEmployeeData.Set_W2Field18(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field18(Param1);
end;

function TDefaultEmployeeData.Get_W2Field21: Smallint;
begin
    Result := DefaultInterface.W2Field21;
end;

procedure TDefaultEmployeeData.Set_W2Field21(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field21(Param1);
end;

function TDefaultEmployeeData.Get_W2Text: WideString;
begin
    Result := DefaultInterface.W2Text;
end;

procedure TDefaultEmployeeData.Set_W2Text(const Param1: WideString);
begin
  DefaultInterface.Set_W2Text(Param1);
end;

function TDefaultEmployeeData.Get_W2Text2: WideString;
begin
    Result := DefaultInterface.W2Text2;
end;

procedure TDefaultEmployeeData.Set_W2Text2(const Param1: WideString);
begin
  DefaultInterface.Set_W2Text2(Param1);
end;

function TDefaultEmployeeData.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TDefaultEmployeeData.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TDefaultEmployeeData.Read: Smallint;
begin
  Result := DefaultInterface.Read;
end;

function TDefaultEmployeeData.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDefaultEmployeeDataProperties.Create(AServer: TDefaultEmployeeData);
begin
  inherited Create;
  FServer := AServer;
end;

function TDefaultEmployeeDataProperties.GetDefaultInterface: _DefaultEmployeeData;
begin
  Result := FServer.DefaultInterface;
end;

function TDefaultEmployeeDataProperties.Get_CustomFieldEnabled(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.CustomFieldEnabled[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_CustomFieldEnabled(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.CustomFieldEnabled[Index] := Param2;
end;

function TDefaultEmployeeDataProperties.Get_CustomFieldLabel(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomFieldLabel[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_CustomFieldLabel(Index: Smallint; 
                                                              const Param2: WideString);
begin
  DefaultInterface.Set_CustomFieldLabel(Index,Param2);
end;

function TDefaultEmployeeDataProperties.Get_DisplayLastNameFirst: WordBool;
begin
    Result := DefaultInterface.DisplayLastNameFirst;
end;

procedure TDefaultEmployeeDataProperties.Set_DisplayLastNameFirst(Param1: WordBool);
begin
  DefaultInterface.Set_DisplayLastNameFirst(Param1);
end;

function TDefaultEmployeeDataProperties.Get_EEAdjust(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.EEAdjust[Index1, Index2];
end;

procedure TDefaultEmployeeDataProperties.Set_EEAdjust(Index1: Smallint; Index2: Smallint; 
                                                      Param3: Byte);
begin
  DefaultInterface.EEAdjust[Index1, Index2] := Param3;
end;

function TDefaultEmployeeDataProperties.Get_EEAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.EEAmount[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_EEAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.EEAmount[Index] := Param2;
end;

function TDefaultEmployeeDataProperties.Get_EECalc(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.EECalc[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_EECalc(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.EECalc[Index] := Param2;
end;

function TDefaultEmployeeDataProperties.Get_EECalcName(Index: Smallint): WideString;
begin
    Result := DefaultInterface.EECalcName[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_EECalcName(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_EECalcName(Index,Param2);
end;

function TDefaultEmployeeDataProperties.Get_EEDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.EEDescription[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_EEDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_EEDescription(Index,Param2);
end;

function TDefaultEmployeeDataProperties.Get_EEDisability: Smallint;
begin
    Result := DefaultInterface.EEDisability;
end;

procedure TDefaultEmployeeDataProperties.Set_EEDisability(Param1: Smallint);
begin
  DefaultInterface.Set_EEDisability(Param1);
end;

function TDefaultEmployeeDataProperties.Get_EEStateUnemployment: Smallint;
begin
    Result := DefaultInterface.EEStateUnemployment;
end;

procedure TDefaultEmployeeDataProperties.Set_EEStateUnemployment(Param1: Smallint);
begin
  DefaultInterface.Set_EEStateUnemployment(Param1);
end;

function TDefaultEmployeeDataProperties.Get_EETrainingTax: Smallint;
begin
    Result := DefaultInterface.EETrainingTax;
end;

procedure TDefaultEmployeeDataProperties.Set_EETrainingTax(Param1: Smallint);
begin
  DefaultInterface.Set_EETrainingTax(Param1);
end;

function TDefaultEmployeeDataProperties.Get_EEGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.EEGLAccount[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_EEGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_EEGLAccount(Index,Param2);
end;

function TDefaultEmployeeDataProperties.Get_EEMemo(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.EEMemo[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_EEMemo(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.EEMemo[Index] := Param2;
end;

function TDefaultEmployeeDataProperties.Get_EERun(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.EERun[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_EERun(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.EERun[Index] := Param2;
end;

function TDefaultEmployeeDataProperties.Get_ERAdjust(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.ERAdjust[Index1, Index2];
end;

procedure TDefaultEmployeeDataProperties.Set_ERAdjust(Index1: Smallint; Index2: Smallint; 
                                                      Param3: Byte);
begin
  DefaultInterface.ERAdjust[Index1, Index2] := Param3;
end;

function TDefaultEmployeeDataProperties.Get_ERCalc(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.ERCalc[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_ERCalc(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.ERCalc[Index] := Param2;
end;

function TDefaultEmployeeDataProperties.Get_ERCalcName(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERCalcName[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_ERCalcName(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ERCalcName(Index,Param2);
end;

function TDefaultEmployeeDataProperties.Get_ERDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERDescription[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_ERDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_ERDescription(Index,Param2);
end;

function TDefaultEmployeeDataProperties.Get_ERExpenseAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERExpenseAccount[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_ERExpenseAccount(Index: Smallint; 
                                                              const Param2: WideString);
begin
  DefaultInterface.Set_ERExpenseAccount(Index,Param2);
end;

function TDefaultEmployeeDataProperties.Get_ERLiabilityAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.ERLiabilityAccount[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_ERLiabilityAccount(Index: Smallint; 
                                                                const Param2: WideString);
begin
  DefaultInterface.Set_ERLiabilityAccount(Index,Param2);
end;

function TDefaultEmployeeDataProperties.Get_FUTA_ER: Smallint;
begin
    Result := DefaultInterface.FUTA_ER;
end;

procedure TDefaultEmployeeDataProperties.Set_FUTA_ER(Param1: Smallint);
begin
  DefaultInterface.Set_FUTA_ER(Param1);
end;

function TDefaultEmployeeDataProperties.Get_HoursDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.HoursDescription[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_HoursDescription(Index: Smallint; 
                                                              const Param2: WideString);
begin
  DefaultInterface.Set_HoursDescription(Index,Param2);
end;

function TDefaultEmployeeDataProperties.Get_HoursGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.HoursGLAccount[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_HoursGLAccount(Index: Smallint; 
                                                            const Param2: WideString);
begin
  DefaultInterface.Set_HoursGLAccount(Index,Param2);
end;

function TDefaultEmployeeDataProperties.Get_Locality: WideString;
begin
    Result := DefaultInterface.Locality;
end;

procedure TDefaultEmployeeDataProperties.Set_Locality(const Param1: WideString);
begin
  DefaultInterface.Set_Locality(Param1);
end;

function TDefaultEmployeeDataProperties.Get_NLabels: Smallint;
begin
    Result := DefaultInterface.NLabels;
end;

function TDefaultEmployeeDataProperties.Get_PayrollCashAccount: WideString;
begin
    Result := DefaultInterface.PayrollCashAccount;
end;

procedure TDefaultEmployeeDataProperties.Set_PayrollCashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_PayrollCashAccount(Param1);
end;

function TDefaultEmployeeDataProperties.Get_SalaryDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.SalaryDescription[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_SalaryDescription(Index: Smallint; 
                                                               const Param2: WideString);
begin
  DefaultInterface.Set_SalaryDescription(Index,Param2);
end;

function TDefaultEmployeeDataProperties.Get_SalaryGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.SalaryGLAccount[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_SalaryGLAccount(Index: Smallint; 
                                                             const Param2: WideString);
begin
  DefaultInterface.Set_SalaryGLAccount(Index,Param2);
end;

function TDefaultEmployeeDataProperties.Get_SDI: Smallint;
begin
    Result := DefaultInterface.SDI;
end;

procedure TDefaultEmployeeDataProperties.Set_SDI(Param1: Smallint);
begin
  DefaultInterface.Set_SDI(Param1);
end;

function TDefaultEmployeeDataProperties.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TDefaultEmployeeDataProperties.Set_State(const Param1: WideString);
begin
  DefaultInterface.Set_State(Param1);
end;

function TDefaultEmployeeDataProperties.Get_StateSpecialA: Smallint;
begin
    Result := DefaultInterface.StateSpecialA;
end;

procedure TDefaultEmployeeDataProperties.Set_StateSpecialA(Param1: Smallint);
begin
  DefaultInterface.Set_StateSpecialA(Param1);
end;

function TDefaultEmployeeDataProperties.Get_StateSpecialB: Smallint;
begin
    Result := DefaultInterface.StateSpecialB;
end;

procedure TDefaultEmployeeDataProperties.Set_StateSpecialB(Param1: Smallint);
begin
  DefaultInterface.Set_StateSpecialB(Param1);
end;

function TDefaultEmployeeDataProperties.Get_StateTrainingTax: Smallint;
begin
    Result := DefaultInterface.StateTrainingTax;
end;

procedure TDefaultEmployeeDataProperties.Set_StateTrainingTax(Param1: Smallint);
begin
  DefaultInterface.Set_StateTrainingTax(Param1);
end;

function TDefaultEmployeeDataProperties.Get_SUI_ER: Smallint;
begin
    Result := DefaultInterface.SUI_ER;
end;

procedure TDefaultEmployeeDataProperties.Set_SUI_ER(Param1: Smallint);
begin
  DefaultInterface.Set_SUI_ER(Param1);
end;

function TDefaultEmployeeDataProperties.Get_Unknown1: Smallint;
begin
    Result := DefaultInterface.Unknown1;
end;

procedure TDefaultEmployeeDataProperties.Set_Unknown1(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown1(Param1);
end;

function TDefaultEmployeeDataProperties.Get_Unknown2: Smallint;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TDefaultEmployeeDataProperties.Set_Unknown2(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TDefaultEmployeeDataProperties.Get_Unknown3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown3[Index];
end;

procedure TDefaultEmployeeDataProperties.Set_Unknown3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown3[Index] := Param2;
end;

function TDefaultEmployeeDataProperties.Get_W2Field2: Smallint;
begin
    Result := DefaultInterface.W2Field2;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field2(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field2(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field4: Smallint;
begin
    Result := DefaultInterface.W2Field4;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field4(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field4(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field6: Smallint;
begin
    Result := DefaultInterface.W2Field6;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field6(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field6(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field7: Smallint;
begin
    Result := DefaultInterface.W2Field7;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field7(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field7(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field8: Smallint;
begin
    Result := DefaultInterface.W2Field8;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field8(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field8(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field9: Smallint;
begin
    Result := DefaultInterface.W2Field9;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field9(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field9(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field10: Smallint;
begin
    Result := DefaultInterface.W2Field10;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field10(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field10(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field11: Smallint;
begin
    Result := DefaultInterface.W2Field11;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field11(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field11(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field12: Smallint;
begin
    Result := DefaultInterface.W2Field12;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field12(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field12(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field13C1: WideString;
begin
    Result := DefaultInterface.W2Field13C1;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field13C1(const Param1: WideString);
begin
  DefaultInterface.Set_W2Field13C1(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field13C2: WideString;
begin
    Result := DefaultInterface.W2Field13C2;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field13C2(const Param1: WideString);
begin
  DefaultInterface.Set_W2Field13C2(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field13C3: WideString;
begin
    Result := DefaultInterface.W2Field13C3;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field13C3(const Param1: WideString);
begin
  DefaultInterface.Set_W2Field13C3(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field13C4: WideString;
begin
    Result := DefaultInterface.W2Field13C4;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field13C4(const Param1: WideString);
begin
  DefaultInterface.Set_W2Field13C4(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field13F1: Smallint;
begin
    Result := DefaultInterface.W2Field13F1;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field13F1(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field13F1(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field13F2: Smallint;
begin
    Result := DefaultInterface.W2Field13F2;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field13F2(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field13F2(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field13F3: Smallint;
begin
    Result := DefaultInterface.W2Field13F3;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field13F3(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field13F3(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field13F4: Smallint;
begin
    Result := DefaultInterface.W2Field13F4;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field13F4(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field13F4(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field14: Smallint;
begin
    Result := DefaultInterface.W2Field14;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field14(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field14(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field14B: Smallint;
begin
    Result := DefaultInterface.W2Field14B;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field14B(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field14B(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field18: Smallint;
begin
    Result := DefaultInterface.W2Field18;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field18(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field18(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Field21: Smallint;
begin
    Result := DefaultInterface.W2Field21;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Field21(Param1: Smallint);
begin
  DefaultInterface.Set_W2Field21(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Text: WideString;
begin
    Result := DefaultInterface.W2Text;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Text(const Param1: WideString);
begin
  DefaultInterface.Set_W2Text(Param1);
end;

function TDefaultEmployeeDataProperties.Get_W2Text2: WideString;
begin
    Result := DefaultInterface.W2Text2;
end;

procedure TDefaultEmployeeDataProperties.Set_W2Text2(const Param1: WideString);
begin
  DefaultInterface.Set_W2Text2(Param1);
end;

{$ENDIF}

class function CoeCheckData.Create: _eCheckData;
begin
  Result := CreateComObject(CLASS_eCheckData) as _eCheckData;
end;

class function CoeCheckData.CreateRemote(const MachineName: string): _eCheckData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_eCheckData) as _eCheckData;
end;

procedure TeCheckData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DD726905-EB74-4D7A-9EC8-F4E5A96B10E7}';
    IntfIID:   '{F5C083F1-BB74-43DA-9DE3-050A82A310A6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TeCheckData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _eCheckData;
  end;
end;

procedure TeCheckData.ConnectTo(svrIntf: _eCheckData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TeCheckData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TeCheckData.GetDefaultInterface: _eCheckData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TeCheckData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TeCheckDataProperties.Create(Self);
{$ENDIF}
end;

destructor TeCheckData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TeCheckData.GetServerProperties: TeCheckDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TeCheckData.Get_MasterBusinessID: Integer;
begin
    Result := DefaultInterface.MasterBusinessID;
end;

procedure TeCheckData.Set_MasterBusinessID(Param1: Integer);
begin
  DefaultInterface.Set_MasterBusinessID(Param1);
end;

function TeCheckData.Get_SecurityCode: WideString;
begin
    Result := DefaultInterface.SecurityCode;
end;

procedure TeCheckData.Set_SecurityCode(const Param1: WideString);
begin
  DefaultInterface.Set_SecurityCode(Param1);
end;

function TeCheckData.Get_TransmissionPhone: WideString;
begin
    Result := DefaultInterface.TransmissionPhone;
end;

procedure TeCheckData.Set_TransmissionPhone(const Param1: WideString);
begin
  DefaultInterface.Set_TransmissionPhone(Param1);
end;

function TeCheckData.Get_Unknown(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown[Index];
end;

procedure TeCheckData.Set_Unknown(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown[Index] := Param2;
end;

function TeCheckData.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TeCheckData.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TeCheckData.Read: Smallint;
begin
  Result := DefaultInterface.Read;
end;

function TeCheckData.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TeCheckDataProperties.Create(AServer: TeCheckData);
begin
  inherited Create;
  FServer := AServer;
end;

function TeCheckDataProperties.GetDefaultInterface: _eCheckData;
begin
  Result := FServer.DefaultInterface;
end;

function TeCheckDataProperties.Get_MasterBusinessID: Integer;
begin
    Result := DefaultInterface.MasterBusinessID;
end;

procedure TeCheckDataProperties.Set_MasterBusinessID(Param1: Integer);
begin
  DefaultInterface.Set_MasterBusinessID(Param1);
end;

function TeCheckDataProperties.Get_SecurityCode: WideString;
begin
    Result := DefaultInterface.SecurityCode;
end;

procedure TeCheckDataProperties.Set_SecurityCode(const Param1: WideString);
begin
  DefaultInterface.Set_SecurityCode(Param1);
end;

function TeCheckDataProperties.Get_TransmissionPhone: WideString;
begin
    Result := DefaultInterface.TransmissionPhone;
end;

procedure TeCheckDataProperties.Set_TransmissionPhone(const Param1: WideString);
begin
  DefaultInterface.Set_TransmissionPhone(Param1);
end;

function TeCheckDataProperties.Get_Unknown(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown[Index];
end;

procedure TeCheckDataProperties.Set_Unknown(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown[Index] := Param2;
end;

{$ENDIF}

class function CoGroupData.Create: _GroupData;
begin
  Result := CreateComObject(CLASS_GroupData) as _GroupData;
end;

class function CoGroupData.CreateRemote(const MachineName: string): _GroupData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GroupData) as _GroupData;
end;

procedure TGroupData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4409504D-0A68-4604-8C9D-489882B585BF}';
    IntfIID:   '{DFA18B58-6843-49F7-900F-2B85F02B7315}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGroupData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _GroupData;
  end;
end;

procedure TGroupData.ConnectTo(svrIntf: _GroupData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGroupData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGroupData.GetDefaultInterface: _GroupData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGroupData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGroupDataProperties.Create(Self);
{$ENDIF}
end;

destructor TGroupData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGroupData.GetServerProperties: TGroupDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TGroupData.Get_Flag(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Flag[Index];
end;

procedure TGroupData.Set_Flag(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Flag[Index] := Param2;
end;

function TGroupData.Get_IDA(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.IDA[Index];
end;

procedure TGroupData.Set_IDA(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.IDA[Index] := Param2;
end;

function TGroupData.Get_IDB(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.IDB[Index];
end;

procedure TGroupData.Set_IDB(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.IDB[Index] := Param2;
end;

function TGroupData.Get_Index: Smallint;
begin
    Result := DefaultInterface.Index;
end;

procedure TGroupData.Set_Index(Param1: Smallint);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TGroupData.Get_LongDescription: WideString;
begin
    Result := DefaultInterface.LongDescription;
end;

procedure TGroupData.Set_LongDescription(const Param1: WideString);
begin
  DefaultInterface.Set_LongDescription(Param1);
end;

function TGroupData.Get_ShortDescription: WideString;
begin
    Result := DefaultInterface.ShortDescription;
end;

procedure TGroupData.Set_ShortDescription(const Param1: WideString);
begin
  DefaultInterface.Set_ShortDescription(Param1);
end;

function TGroupData.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TGroupData.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TGroupData.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TGroupData.GetEqual(Index: Smallint): Smallint;
begin
  Result := DefaultInterface.GetEqual(Index);
end;

function TGroupData.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TGroupData.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TGroupData.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TGroupData.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TGroupData.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TGroupData.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TGroupData.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGroupDataProperties.Create(AServer: TGroupData);
begin
  inherited Create;
  FServer := AServer;
end;

function TGroupDataProperties.GetDefaultInterface: _GroupData;
begin
  Result := FServer.DefaultInterface;
end;

function TGroupDataProperties.Get_Flag(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Flag[Index];
end;

procedure TGroupDataProperties.Set_Flag(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Flag[Index] := Param2;
end;

function TGroupDataProperties.Get_IDA(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.IDA[Index];
end;

procedure TGroupDataProperties.Set_IDA(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.IDA[Index] := Param2;
end;

function TGroupDataProperties.Get_IDB(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.IDB[Index];
end;

procedure TGroupDataProperties.Set_IDB(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.IDB[Index] := Param2;
end;

function TGroupDataProperties.Get_Index: Smallint;
begin
    Result := DefaultInterface.Index;
end;

procedure TGroupDataProperties.Set_Index(Param1: Smallint);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TGroupDataProperties.Get_LongDescription: WideString;
begin
    Result := DefaultInterface.LongDescription;
end;

procedure TGroupDataProperties.Set_LongDescription(const Param1: WideString);
begin
  DefaultInterface.Set_LongDescription(Param1);
end;

function TGroupDataProperties.Get_ShortDescription: WideString;
begin
    Result := DefaultInterface.ShortDescription;
end;

procedure TGroupDataProperties.Set_ShortDescription(const Param1: WideString);
begin
  DefaultInterface.Set_ShortDescription(Param1);
end;

{$ENDIF}

class function CoInventoryChain.Create: _InventoryChain;
begin
  Result := CreateComObject(CLASS_InventoryChain) as _InventoryChain;
end;

class function CoInventoryChain.CreateRemote(const MachineName: string): _InventoryChain;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InventoryChain) as _InventoryChain;
end;

procedure TInventoryChain.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{006EFB40-3C22-4A19-BAE4-8A317111DCEC}';
    IntfIID:   '{0C871551-80C7-4854-A9DB-E687A0DA193F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TInventoryChain.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _InventoryChain;
  end;
end;

procedure TInventoryChain.ConnectTo(svrIntf: _InventoryChain);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TInventoryChain.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TInventoryChain.GetDefaultInterface: _InventoryChain;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TInventoryChain.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TInventoryChainProperties.Create(Self);
{$ENDIF}
end;

destructor TInventoryChain.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TInventoryChain.GetServerProperties: TInventoryChainProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TInventoryChain.Get_Index1: Integer;
begin
    Result := DefaultInterface.Index1;
end;

procedure TInventoryChain.Set_Index1(Param1: Integer);
begin
  DefaultInterface.Set_Index1(Param1);
end;

function TInventoryChain.Get_Index2: Smallint;
begin
    Result := DefaultInterface.Index2;
end;

procedure TInventoryChain.Set_Index2(Param1: Smallint);
begin
  DefaultInterface.Set_Index2(Param1);
end;

function TInventoryChain.Get_Index3: Integer;
begin
    Result := DefaultInterface.Index3;
end;

procedure TInventoryChain.Set_Index3(Param1: Integer);
begin
  DefaultInterface.Set_Index3(Param1);
end;

function TInventoryChain.Get_Index4: Smallint;
begin
    Result := DefaultInterface.Index4;
end;

procedure TInventoryChain.Set_Index4(Param1: Smallint);
begin
  DefaultInterface.Set_Index4(Param1);
end;

function TInventoryChain.Get_Value: Double;
begin
    Result := DefaultInterface.Value;
end;

procedure TInventoryChain.Set_Value(Param1: Double);
begin
  DefaultInterface.Set_Value(Param1);
end;

function TInventoryChain.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TInventoryChain.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TInventoryChain.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TInventoryChain.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TInventoryChain.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TInventoryChain.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TInventoryChain.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TInventoryChain.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TInventoryChain.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TInventoryChain.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TInventoryChainProperties.Create(AServer: TInventoryChain);
begin
  inherited Create;
  FServer := AServer;
end;

function TInventoryChainProperties.GetDefaultInterface: _InventoryChain;
begin
  Result := FServer.DefaultInterface;
end;

function TInventoryChainProperties.Get_Index1: Integer;
begin
    Result := DefaultInterface.Index1;
end;

procedure TInventoryChainProperties.Set_Index1(Param1: Integer);
begin
  DefaultInterface.Set_Index1(Param1);
end;

function TInventoryChainProperties.Get_Index2: Smallint;
begin
    Result := DefaultInterface.Index2;
end;

procedure TInventoryChainProperties.Set_Index2(Param1: Smallint);
begin
  DefaultInterface.Set_Index2(Param1);
end;

function TInventoryChainProperties.Get_Index3: Integer;
begin
    Result := DefaultInterface.Index3;
end;

procedure TInventoryChainProperties.Set_Index3(Param1: Integer);
begin
  DefaultInterface.Set_Index3(Param1);
end;

function TInventoryChainProperties.Get_Index4: Smallint;
begin
    Result := DefaultInterface.Index4;
end;

procedure TInventoryChainProperties.Set_Index4(Param1: Smallint);
begin
  DefaultInterface.Set_Index4(Param1);
end;

function TInventoryChainProperties.Get_Value: Double;
begin
    Result := DefaultInterface.Value;
end;

procedure TInventoryChainProperties.Set_Value(Param1: Double);
begin
  DefaultInterface.Set_Value(Param1);
end;

{$ENDIF}

class function CoInventoryComponent.Create: _InventoryComponent;
begin
  Result := CreateComObject(CLASS_InventoryComponent) as _InventoryComponent;
end;

class function CoInventoryComponent.CreateRemote(const MachineName: string): _InventoryComponent;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InventoryComponent) as _InventoryComponent;
end;

procedure TInventoryComponent.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D452ECB8-97EF-47F2-B81F-80CF61DF9CDC}';
    IntfIID:   '{E32AD34C-EA66-4B84-B0D8-F1AFBC6C5F4F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TInventoryComponent.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _InventoryComponent;
  end;
end;

procedure TInventoryComponent.ConnectTo(svrIntf: _InventoryComponent);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TInventoryComponent.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TInventoryComponent.GetDefaultInterface: _InventoryComponent;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TInventoryComponent.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TInventoryComponentProperties.Create(Self);
{$ENDIF}
end;

destructor TInventoryComponent.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TInventoryComponent.GetServerProperties: TInventoryComponentProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TInventoryComponent.Get_ComponentID: WideString;
begin
    Result := DefaultInterface.ComponentID;
end;

procedure TInventoryComponent.Set_ComponentID(const Param1: WideString);
begin
  DefaultInterface.Set_ComponentID(Param1);
end;

function TInventoryComponent.Get_ItemID: WideString;
begin
    Result := DefaultInterface.ItemID;
end;

procedure TInventoryComponent.Set_ItemID(const Param1: WideString);
begin
  DefaultInterface.Set_ItemID(Param1);
end;

function TInventoryComponent.Get_Quantity: Double;
begin
    Result := DefaultInterface.Quantity;
end;

procedure TInventoryComponent.Set_Quantity(Param1: Double);
begin
  DefaultInterface.Set_Quantity(Param1);
end;

function TInventoryComponent.Get_Unknown: Smallint;
begin
    Result := DefaultInterface.Unknown;
end;

procedure TInventoryComponent.Set_Unknown(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown(Param1);
end;

function TInventoryComponent.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TInventoryComponent.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TInventoryComponent.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TInventoryComponent.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TInventoryComponent.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TInventoryComponent.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TInventoryComponent.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TInventoryComponent.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TInventoryComponent.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TInventoryComponent.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TInventoryComponentProperties.Create(AServer: TInventoryComponent);
begin
  inherited Create;
  FServer := AServer;
end;

function TInventoryComponentProperties.GetDefaultInterface: _InventoryComponent;
begin
  Result := FServer.DefaultInterface;
end;

function TInventoryComponentProperties.Get_ComponentID: WideString;
begin
    Result := DefaultInterface.ComponentID;
end;

procedure TInventoryComponentProperties.Set_ComponentID(const Param1: WideString);
begin
  DefaultInterface.Set_ComponentID(Param1);
end;

function TInventoryComponentProperties.Get_ItemID: WideString;
begin
    Result := DefaultInterface.ItemID;
end;

procedure TInventoryComponentProperties.Set_ItemID(const Param1: WideString);
begin
  DefaultInterface.Set_ItemID(Param1);
end;

function TInventoryComponentProperties.Get_Quantity: Double;
begin
    Result := DefaultInterface.Quantity;
end;

procedure TInventoryComponentProperties.Set_Quantity(Param1: Double);
begin
  DefaultInterface.Set_Quantity(Param1);
end;

function TInventoryComponentProperties.Get_Unknown: Smallint;
begin
    Result := DefaultInterface.Unknown;
end;

procedure TInventoryComponentProperties.Set_Unknown(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown(Param1);
end;

{$ENDIF}

class function CoInventoryCost.Create: _InventoryCost;
begin
  Result := CreateComObject(CLASS_InventoryCost) as _InventoryCost;
end;

class function CoInventoryCost.CreateRemote(const MachineName: string): _InventoryCost;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InventoryCost) as _InventoryCost;
end;

procedure TInventoryCost.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{43FDAA1F-D7C3-4B1F-A5EE-5576C9258184}';
    IntfIID:   '{A8D25F38-0008-49CD-976C-384BE0B59D7C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TInventoryCost.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _InventoryCost;
  end;
end;

procedure TInventoryCost.ConnectTo(svrIntf: _InventoryCost);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TInventoryCost.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TInventoryCost.GetDefaultInterface: _InventoryCost;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TInventoryCost.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TInventoryCostProperties.Create(Self);
{$ENDIF}
end;

destructor TInventoryCost.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TInventoryCost.GetServerProperties: TInventoryCostProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TInventoryCost.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TInventoryCost.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TInventoryCost.Get_Code: Byte;
begin
    Result := DefaultInterface.Code;
end;

procedure TInventoryCost.Set_Code(Param1: Byte);
begin
  DefaultInterface.Set_Code(Param1);
end;

function TInventoryCost.Get_Cost1: Double;
begin
    Result := DefaultInterface.Cost1;
end;

procedure TInventoryCost.Set_Cost1(Param1: Double);
begin
  DefaultInterface.Set_Cost1(Param1);
end;

function TInventoryCost.Get_Cost2: Double;
begin
    Result := DefaultInterface.Cost2;
end;

procedure TInventoryCost.Set_Cost2(Param1: Double);
begin
  DefaultInterface.Set_Cost2(Param1);
end;

function TInventoryCost.Get_EntryDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EntryDate;
end;

procedure TInventoryCost.Set_EntryDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EntryDate(Param1);
end;

function TInventoryCost.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TInventoryCost.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TInventoryCost.Get_InventoryAccountIndex: Integer;
begin
    Result := DefaultInterface.InventoryAccountIndex;
end;

procedure TInventoryCost.Set_InventoryAccountIndex(Param1: Integer);
begin
  DefaultInterface.Set_InventoryAccountIndex(Param1);
end;

function TInventoryCost.Get_Number: Integer;
begin
    Result := DefaultInterface.Number;
end;

procedure TInventoryCost.Set_Number(Param1: Integer);
begin
  DefaultInterface.Set_Number(Param1);
end;

function TInventoryCost.Get_Quantity1: Double;
begin
    Result := DefaultInterface.Quantity1;
end;

procedure TInventoryCost.Set_Quantity1(Param1: Double);
begin
  DefaultInterface.Set_Quantity1(Param1);
end;

function TInventoryCost.Get_Quantity2: Double;
begin
    Result := DefaultInterface.Quantity2;
end;

procedure TInventoryCost.Set_Quantity2(Param1: Double);
begin
  DefaultInterface.Set_Quantity2(Param1);
end;

function TInventoryCost.Get_QuantitySold: Double;
begin
    Result := DefaultInterface.QuantitySold;
end;

procedure TInventoryCost.Set_QuantitySold(Param1: Double);
begin
  DefaultInterface.Set_QuantitySold(Param1);
end;

function TInventoryCost.Get_RecordCode: Smallint;
begin
    Result := DefaultInterface.RecordCode;
end;

procedure TInventoryCost.Set_RecordCode(Param1: Smallint);
begin
  DefaultInterface.Set_RecordCode(Param1);
end;

function TInventoryCost.Get_RecordType: Smallint;
begin
    Result := DefaultInterface.RecordType;
end;

procedure TInventoryCost.Set_RecordType(Param1: Smallint);
begin
  DefaultInterface.Set_RecordType(Param1);
end;

function TInventoryCost.Get_SaleFlag: WordBool;
begin
    Result := DefaultInterface.SaleFlag;
end;

procedure TInventoryCost.Set_SaleFlag(Param1: WordBool);
begin
  DefaultInterface.Set_SaleFlag(Param1);
end;

function TInventoryCost.Get_SalesAccountIndex: Integer;
begin
    Result := DefaultInterface.SalesAccountIndex;
end;

procedure TInventoryCost.Set_SalesAccountIndex(Param1: Integer);
begin
  DefaultInterface.Set_SalesAccountIndex(Param1);
end;

function TInventoryCost.Get_Unused: Byte;
begin
    Result := DefaultInterface.Unused;
end;

procedure TInventoryCost.Set_Unused(Param1: Byte);
begin
  DefaultInterface.Set_Unused(Param1);
end;

function TInventoryCost.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TInventoryCost.GetEqual(NRecord: Integer; Line: Smallint): Smallint;
begin
  Result := DefaultInterface.GetEqual(NRecord, Line);
end;

function TInventoryCost.GetFirst(Index: Integer): Smallint;
begin
  Result := DefaultInterface.GetFirst(Index);
end;

function TInventoryCost.GetNext: Smallint;
begin
  Result := DefaultInterface.GetNext;
end;

function TInventoryCost.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TInventoryCost.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TInventoryCost.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TInventoryCost.QuantityOnHand(Index: Integer): Double;
begin
  Result := DefaultInterface.QuantityOnHand(Index);
end;

function TInventoryCost.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TInventoryCost.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TInventoryCost.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TInventoryCost.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TInventoryCost.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TInventoryCost.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TInventoryCostProperties.Create(AServer: TInventoryCost);
begin
  inherited Create;
  FServer := AServer;
end;

function TInventoryCostProperties.GetDefaultInterface: _InventoryCost;
begin
  Result := FServer.DefaultInterface;
end;

function TInventoryCostProperties.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TInventoryCostProperties.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TInventoryCostProperties.Get_Code: Byte;
begin
    Result := DefaultInterface.Code;
end;

procedure TInventoryCostProperties.Set_Code(Param1: Byte);
begin
  DefaultInterface.Set_Code(Param1);
end;

function TInventoryCostProperties.Get_Cost1: Double;
begin
    Result := DefaultInterface.Cost1;
end;

procedure TInventoryCostProperties.Set_Cost1(Param1: Double);
begin
  DefaultInterface.Set_Cost1(Param1);
end;

function TInventoryCostProperties.Get_Cost2: Double;
begin
    Result := DefaultInterface.Cost2;
end;

procedure TInventoryCostProperties.Set_Cost2(Param1: Double);
begin
  DefaultInterface.Set_Cost2(Param1);
end;

function TInventoryCostProperties.Get_EntryDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EntryDate;
end;

procedure TInventoryCostProperties.Set_EntryDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EntryDate(Param1);
end;

function TInventoryCostProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TInventoryCostProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TInventoryCostProperties.Get_InventoryAccountIndex: Integer;
begin
    Result := DefaultInterface.InventoryAccountIndex;
end;

procedure TInventoryCostProperties.Set_InventoryAccountIndex(Param1: Integer);
begin
  DefaultInterface.Set_InventoryAccountIndex(Param1);
end;

function TInventoryCostProperties.Get_Number: Integer;
begin
    Result := DefaultInterface.Number;
end;

procedure TInventoryCostProperties.Set_Number(Param1: Integer);
begin
  DefaultInterface.Set_Number(Param1);
end;

function TInventoryCostProperties.Get_Quantity1: Double;
begin
    Result := DefaultInterface.Quantity1;
end;

procedure TInventoryCostProperties.Set_Quantity1(Param1: Double);
begin
  DefaultInterface.Set_Quantity1(Param1);
end;

function TInventoryCostProperties.Get_Quantity2: Double;
begin
    Result := DefaultInterface.Quantity2;
end;

procedure TInventoryCostProperties.Set_Quantity2(Param1: Double);
begin
  DefaultInterface.Set_Quantity2(Param1);
end;

function TInventoryCostProperties.Get_QuantitySold: Double;
begin
    Result := DefaultInterface.QuantitySold;
end;

procedure TInventoryCostProperties.Set_QuantitySold(Param1: Double);
begin
  DefaultInterface.Set_QuantitySold(Param1);
end;

function TInventoryCostProperties.Get_RecordCode: Smallint;
begin
    Result := DefaultInterface.RecordCode;
end;

procedure TInventoryCostProperties.Set_RecordCode(Param1: Smallint);
begin
  DefaultInterface.Set_RecordCode(Param1);
end;

function TInventoryCostProperties.Get_RecordType: Smallint;
begin
    Result := DefaultInterface.RecordType;
end;

procedure TInventoryCostProperties.Set_RecordType(Param1: Smallint);
begin
  DefaultInterface.Set_RecordType(Param1);
end;

function TInventoryCostProperties.Get_SaleFlag: WordBool;
begin
    Result := DefaultInterface.SaleFlag;
end;

procedure TInventoryCostProperties.Set_SaleFlag(Param1: WordBool);
begin
  DefaultInterface.Set_SaleFlag(Param1);
end;

function TInventoryCostProperties.Get_SalesAccountIndex: Integer;
begin
    Result := DefaultInterface.SalesAccountIndex;
end;

procedure TInventoryCostProperties.Set_SalesAccountIndex(Param1: Integer);
begin
  DefaultInterface.Set_SalesAccountIndex(Param1);
end;

function TInventoryCostProperties.Get_Unused: Byte;
begin
    Result := DefaultInterface.Unused;
end;

procedure TInventoryCostProperties.Set_Unused(Param1: Byte);
begin
  DefaultInterface.Set_Unused(Param1);
end;

{$ENDIF}

class function CoENums.Create: _ENums;
begin
  Result := CreateComObject(CLASS_ENums) as _ENums;
end;

class function CoENums.CreateRemote(const MachineName: string): _ENums;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ENums) as _ENums;
end;

procedure TENums.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7EF65709-5146-4C8D-96E9-61B033A55878}';
    IntfIID:   '{5F86289E-E438-45CD-96C8-ADD96930695E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TENums.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _ENums;
  end;
end;

procedure TENums.ConnectTo(svrIntf: _ENums);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TENums.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TENums.GetDefaultInterface: _ENums;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TENums.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TENumsProperties.Create(Self);
{$ENDIF}
end;

destructor TENums.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TENums.GetServerProperties: TENumsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TENumsProperties.Create(AServer: TENums);
begin
  inherited Create;
  FServer := AServer;
end;

function TENumsProperties.GetDefaultInterface: _ENums;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoJobData.Create: _JobData;
begin
  Result := CreateComObject(CLASS_JobData) as _JobData;
end;

class function CoJobData.CreateRemote(const MachineName: string): _JobData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_JobData) as _JobData;
end;

procedure TJobData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2AFC9962-F624-40CF-94FE-913E3C5F19C7}';
    IntfIID:   '{E8A88023-3A3B-4589-AAEB-E4CDBEFAA403}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TJobData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _JobData;
  end;
end;

procedure TJobData.ConnectTo(svrIntf: _JobData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TJobData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TJobData.GetDefaultInterface: _JobData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TJobData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TJobDataProperties.Create(Self);
{$ENDIF}
end;

destructor TJobData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TJobData.GetServerProperties: TJobDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TJobData.Get_CustomerIndex: Integer;
begin
    Result := DefaultInterface.CustomerIndex;
end;

procedure TJobData.Set_CustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_CustomerIndex(Param1);
end;

function TJobData.Get_CustomField(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomField[Index];
end;

procedure TJobData.Set_CustomField(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomField(Index,Param2);
end;

function TJobData.Get_EndDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EndDate;
end;

procedure TJobData.Set_EndDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EndDate(Param1);
end;

function TJobData.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TJobData.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TJobData.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TJobData.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TJobData.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TJobData.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TJobData.Get_JobDescription: WideString;
begin
    Result := DefaultInterface.JobDescription;
end;

procedure TJobData.Set_JobDescription(const Param1: WideString);
begin
  DefaultInterface.Set_JobDescription(Param1);
end;

function TJobData.Get_JobID: WideString;
begin
    Result := DefaultInterface.JobID;
end;

procedure TJobData.Set_JobID(const Param1: WideString);
begin
  DefaultInterface.Set_JobID(Param1);
end;

function TJobData.Get_JobNote: WideString;
begin
    Result := DefaultInterface.JobNote;
end;

procedure TJobData.Set_JobNote(const Param1: WideString);
begin
  DefaultInterface.Set_JobNote(Param1);
end;

function TJobData.Get_JobType: WideString;
begin
    Result := DefaultInterface.JobType;
end;

procedure TJobData.Set_JobType(const Param1: WideString);
begin
  DefaultInterface.Set_JobType(Param1);
end;

function TJobData.Get_PercentComplete: Smallint;
begin
    Result := DefaultInterface.PercentComplete;
end;

procedure TJobData.Set_PercentComplete(Param1: Smallint);
begin
  DefaultInterface.Set_PercentComplete(Param1);
end;

function TJobData.Get_PONumber: WideString;
begin
    Result := DefaultInterface.PONumber;
end;

procedure TJobData.Set_PONumber(const Param1: WideString);
begin
  DefaultInterface.Set_PONumber(Param1);
end;

function TJobData.Get_StartDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.StartDate;
end;

procedure TJobData.Set_StartDate(Param1: OleVariant);
begin
  DefaultInterface.Set_StartDate(Param1);
end;

function TJobData.Get_Supervisor: WideString;
begin
    Result := DefaultInterface.Supervisor;
end;

procedure TJobData.Set_Supervisor(const Param1: WideString);
begin
  DefaultInterface.Set_Supervisor(Param1);
end;

function TJobData.Get_UsePhases: WordBool;
begin
    Result := DefaultInterface.UsePhases;
end;

procedure TJobData.Set_UsePhases(Param1: WordBool);
begin
  DefaultInterface.Set_UsePhases(Param1);
end;

function TJobData.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TJobData.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TJobData.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TJobData.GetEqual(const JobID: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(JobID);
end;

function TJobData.GetForIndex(Index: Integer): Smallint;
begin
  Result := DefaultInterface.GetForIndex(Index);
end;

function TJobData.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TJobData.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TJobData.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TJobData.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TJobData.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TJobData.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TJobData.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TJobDataProperties.Create(AServer: TJobData);
begin
  inherited Create;
  FServer := AServer;
end;

function TJobDataProperties.GetDefaultInterface: _JobData;
begin
  Result := FServer.DefaultInterface;
end;

function TJobDataProperties.Get_CustomerIndex: Integer;
begin
    Result := DefaultInterface.CustomerIndex;
end;

procedure TJobDataProperties.Set_CustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_CustomerIndex(Param1);
end;

function TJobDataProperties.Get_CustomField(Index: Smallint): WideString;
begin
    Result := DefaultInterface.CustomField[Index];
end;

procedure TJobDataProperties.Set_CustomField(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_CustomField(Index,Param2);
end;

function TJobDataProperties.Get_EndDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EndDate;
end;

procedure TJobDataProperties.Set_EndDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EndDate(Param1);
end;

function TJobDataProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TJobDataProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TJobDataProperties.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TJobDataProperties.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TJobDataProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TJobDataProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TJobDataProperties.Get_JobDescription: WideString;
begin
    Result := DefaultInterface.JobDescription;
end;

procedure TJobDataProperties.Set_JobDescription(const Param1: WideString);
begin
  DefaultInterface.Set_JobDescription(Param1);
end;

function TJobDataProperties.Get_JobID: WideString;
begin
    Result := DefaultInterface.JobID;
end;

procedure TJobDataProperties.Set_JobID(const Param1: WideString);
begin
  DefaultInterface.Set_JobID(Param1);
end;

function TJobDataProperties.Get_JobNote: WideString;
begin
    Result := DefaultInterface.JobNote;
end;

procedure TJobDataProperties.Set_JobNote(const Param1: WideString);
begin
  DefaultInterface.Set_JobNote(Param1);
end;

function TJobDataProperties.Get_JobType: WideString;
begin
    Result := DefaultInterface.JobType;
end;

procedure TJobDataProperties.Set_JobType(const Param1: WideString);
begin
  DefaultInterface.Set_JobType(Param1);
end;

function TJobDataProperties.Get_PercentComplete: Smallint;
begin
    Result := DefaultInterface.PercentComplete;
end;

procedure TJobDataProperties.Set_PercentComplete(Param1: Smallint);
begin
  DefaultInterface.Set_PercentComplete(Param1);
end;

function TJobDataProperties.Get_PONumber: WideString;
begin
    Result := DefaultInterface.PONumber;
end;

procedure TJobDataProperties.Set_PONumber(const Param1: WideString);
begin
  DefaultInterface.Set_PONumber(Param1);
end;

function TJobDataProperties.Get_StartDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.StartDate;
end;

procedure TJobDataProperties.Set_StartDate(Param1: OleVariant);
begin
  DefaultInterface.Set_StartDate(Param1);
end;

function TJobDataProperties.Get_Supervisor: WideString;
begin
    Result := DefaultInterface.Supervisor;
end;

procedure TJobDataProperties.Set_Supervisor(const Param1: WideString);
begin
  DefaultInterface.Set_Supervisor(Param1);
end;

function TJobDataProperties.Get_UsePhases: WordBool;
begin
    Result := DefaultInterface.UsePhases;
end;

procedure TJobDataProperties.Set_UsePhases(Param1: WordBool);
begin
  DefaultInterface.Set_UsePhases(Param1);
end;

{$ENDIF}

class function CoJobEstimate.Create: _JobEstimate;
begin
  Result := CreateComObject(CLASS_JobEstimate) as _JobEstimate;
end;

class function CoJobEstimate.CreateRemote(const MachineName: string): _JobEstimate;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_JobEstimate) as _JobEstimate;
end;

procedure TJobEstimate.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5A026537-DEA8-4ECE-829A-AFA1A9959409}';
    IntfIID:   '{CC3E57D4-0951-42D9-9758-7DED330B1459}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TJobEstimate.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _JobEstimate;
  end;
end;

procedure TJobEstimate.ConnectTo(svrIntf: _JobEstimate);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TJobEstimate.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TJobEstimate.GetDefaultInterface: _JobEstimate;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TJobEstimate.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TJobEstimateProperties.Create(Self);
{$ENDIF}
end;

destructor TJobEstimate.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TJobEstimate.GetServerProperties: TJobEstimateProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TJobEstimate.Get_CostIndex: Integer;
begin
    Result := DefaultInterface.CostIndex;
end;

procedure TJobEstimate.Set_CostIndex(Param1: Integer);
begin
  DefaultInterface.Set_CostIndex(Param1);
end;

function TJobEstimate.Get_Expenses: Double;
begin
    Result := DefaultInterface.Expenses;
end;

procedure TJobEstimate.Set_Expenses(Param1: Double);
begin
  DefaultInterface.Set_Expenses(Param1);
end;

function TJobEstimate.Get_JobIndex: Integer;
begin
    Result := DefaultInterface.JobIndex;
end;

procedure TJobEstimate.Set_JobIndex(Param1: Integer);
begin
  DefaultInterface.Set_JobIndex(Param1);
end;

function TJobEstimate.Get_NumberOfUnits: Double;
begin
    Result := DefaultInterface.NumberOfUnits;
end;

procedure TJobEstimate.Set_NumberOfUnits(Param1: Double);
begin
  DefaultInterface.Set_NumberOfUnits(Param1);
end;

function TJobEstimate.Get_PhaseIndex: Integer;
begin
    Result := DefaultInterface.PhaseIndex;
end;

procedure TJobEstimate.Set_PhaseIndex(Param1: Integer);
begin
  DefaultInterface.Set_PhaseIndex(Param1);
end;

function TJobEstimate.Get_Revenues: Double;
begin
    Result := DefaultInterface.Revenues;
end;

procedure TJobEstimate.Set_Revenues(Param1: Double);
begin
  DefaultInterface.Set_Revenues(Param1);
end;

function TJobEstimate.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TJobEstimate.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TJobEstimate.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TJobEstimate.GetEqual(JobIndex: Integer; PhaseIndex: Integer; CostIndex: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(JobIndex, PhaseIndex, CostIndex);
end;

function TJobEstimate.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TJobEstimate.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TJobEstimate.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TJobEstimate.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TJobEstimate.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TJobEstimate.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TJobEstimate.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TJobEstimateProperties.Create(AServer: TJobEstimate);
begin
  inherited Create;
  FServer := AServer;
end;

function TJobEstimateProperties.GetDefaultInterface: _JobEstimate;
begin
  Result := FServer.DefaultInterface;
end;

function TJobEstimateProperties.Get_CostIndex: Integer;
begin
    Result := DefaultInterface.CostIndex;
end;

procedure TJobEstimateProperties.Set_CostIndex(Param1: Integer);
begin
  DefaultInterface.Set_CostIndex(Param1);
end;

function TJobEstimateProperties.Get_Expenses: Double;
begin
    Result := DefaultInterface.Expenses;
end;

procedure TJobEstimateProperties.Set_Expenses(Param1: Double);
begin
  DefaultInterface.Set_Expenses(Param1);
end;

function TJobEstimateProperties.Get_JobIndex: Integer;
begin
    Result := DefaultInterface.JobIndex;
end;

procedure TJobEstimateProperties.Set_JobIndex(Param1: Integer);
begin
  DefaultInterface.Set_JobIndex(Param1);
end;

function TJobEstimateProperties.Get_NumberOfUnits: Double;
begin
    Result := DefaultInterface.NumberOfUnits;
end;

procedure TJobEstimateProperties.Set_NumberOfUnits(Param1: Double);
begin
  DefaultInterface.Set_NumberOfUnits(Param1);
end;

function TJobEstimateProperties.Get_PhaseIndex: Integer;
begin
    Result := DefaultInterface.PhaseIndex;
end;

procedure TJobEstimateProperties.Set_PhaseIndex(Param1: Integer);
begin
  DefaultInterface.Set_PhaseIndex(Param1);
end;

function TJobEstimateProperties.Get_Revenues: Double;
begin
    Result := DefaultInterface.Revenues;
end;

procedure TJobEstimateProperties.Set_Revenues(Param1: Double);
begin
  DefaultInterface.Set_Revenues(Param1);
end;

{$ENDIF}

class function CoJobTag.Create: _JobTag;
begin
  Result := CreateComObject(CLASS_JobTag) as _JobTag;
end;

class function CoJobTag.CreateRemote(const MachineName: string): _JobTag;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_JobTag) as _JobTag;
end;

procedure TJobTag.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D91B8C8A-F21F-4D40-BAFC-FE864BC44530}';
    IntfIID:   '{DEF289CA-D93E-43B0-A96A-22DC2A5BF693}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TJobTag.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _JobTag;
  end;
end;

procedure TJobTag.ConnectTo(svrIntf: _JobTag);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TJobTag.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TJobTag.GetDefaultInterface: _JobTag;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TJobTag.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TJobTagProperties.Create(Self);
{$ENDIF}
end;

destructor TJobTag.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TJobTag.GetServerProperties: TJobTagProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TJobTag.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TJobTag.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TJobTag.Get_ComponentIndex: Integer;
begin
    Result := DefaultInterface.ComponentIndex;
end;

procedure TJobTag.Set_ComponentIndex(Param1: Integer);
begin
  DefaultInterface.Set_ComponentIndex(Param1);
end;

function TJobTag.Get_CostIndex: Integer;
begin
    Result := DefaultInterface.CostIndex;
end;

procedure TJobTag.Set_CostIndex(Param1: Integer);
begin
  DefaultInterface.Set_CostIndex(Param1);
end;

function TJobTag.Get_EntryDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EntryDate;
end;

procedure TJobTag.Set_EntryDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EntryDate(Param1);
end;

function TJobTag.Get_GLAccountID: WideString;
begin
    Result := DefaultInterface.GLAccountID;
end;

procedure TJobTag.Set_GLAccountID(const Param1: WideString);
begin
  DefaultInterface.Set_GLAccountID(Param1);
end;

function TJobTag.Get_JobIndex: Integer;
begin
    Result := DefaultInterface.JobIndex;
end;

procedure TJobTag.Set_JobIndex(Param1: Integer);
begin
  DefaultInterface.Set_JobIndex(Param1);
end;

function TJobTag.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TJobTag.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TJobTag.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TJobTag.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TJobTag.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TJobTag.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TJobTag.Get_PhaseIndex: Integer;
begin
    Result := DefaultInterface.PhaseIndex;
end;

procedure TJobTag.Set_PhaseIndex(Param1: Integer);
begin
  DefaultInterface.Set_PhaseIndex(Param1);
end;

function TJobTag.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TJobTag.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TJobTag.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TJobTag.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TJobTag.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TJobTag.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TJobTag.Get_StockItem: WordBool;
begin
    Result := DefaultInterface.StockItem;
end;

procedure TJobTag.Set_StockItem(Param1: WordBool);
begin
  DefaultInterface.Set_StockItem(Param1);
end;

function TJobTag.Get_LineNumber: Smallint;
begin
    Result := DefaultInterface.LineNumber;
end;

procedure TJobTag.Set_LineNumber(Param1: Smallint);
begin
  DefaultInterface.Set_LineNumber(Param1);
end;

function TJobTag.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TJobTag.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TJobTag.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TJobTag.GetFirst(JobIndex: Integer; PhaseIndex: Integer; CostIndex: Integer; 
                          JobDate: OleVariant): Smallint;
begin
  Result := DefaultInterface.GetFirst(JobIndex, PhaseIndex, CostIndex, JobDate);
end;

function TJobTag.GetNext: Smallint;
begin
  Result := DefaultInterface.GetNext;
end;

function TJobTag.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TJobTag.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TJobTag.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TJobTag.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TJobTag.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TJobTag.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TJobTag.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TJobTagProperties.Create(AServer: TJobTag);
begin
  inherited Create;
  FServer := AServer;
end;

function TJobTagProperties.GetDefaultInterface: _JobTag;
begin
  Result := FServer.DefaultInterface;
end;

function TJobTagProperties.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TJobTagProperties.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TJobTagProperties.Get_ComponentIndex: Integer;
begin
    Result := DefaultInterface.ComponentIndex;
end;

procedure TJobTagProperties.Set_ComponentIndex(Param1: Integer);
begin
  DefaultInterface.Set_ComponentIndex(Param1);
end;

function TJobTagProperties.Get_CostIndex: Integer;
begin
    Result := DefaultInterface.CostIndex;
end;

procedure TJobTagProperties.Set_CostIndex(Param1: Integer);
begin
  DefaultInterface.Set_CostIndex(Param1);
end;

function TJobTagProperties.Get_EntryDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EntryDate;
end;

procedure TJobTagProperties.Set_EntryDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EntryDate(Param1);
end;

function TJobTagProperties.Get_GLAccountID: WideString;
begin
    Result := DefaultInterface.GLAccountID;
end;

procedure TJobTagProperties.Set_GLAccountID(const Param1: WideString);
begin
  DefaultInterface.Set_GLAccountID(Param1);
end;

function TJobTagProperties.Get_JobIndex: Integer;
begin
    Result := DefaultInterface.JobIndex;
end;

procedure TJobTagProperties.Set_JobIndex(Param1: Integer);
begin
  DefaultInterface.Set_JobIndex(Param1);
end;

function TJobTagProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TJobTagProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TJobTagProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TJobTagProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TJobTagProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TJobTagProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TJobTagProperties.Get_PhaseIndex: Integer;
begin
    Result := DefaultInterface.PhaseIndex;
end;

procedure TJobTagProperties.Set_PhaseIndex(Param1: Integer);
begin
  DefaultInterface.Set_PhaseIndex(Param1);
end;

function TJobTagProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TJobTagProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TJobTagProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TJobTagProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TJobTagProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TJobTagProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TJobTagProperties.Get_StockItem: WordBool;
begin
    Result := DefaultInterface.StockItem;
end;

procedure TJobTagProperties.Set_StockItem(Param1: WordBool);
begin
  DefaultInterface.Set_StockItem(Param1);
end;

function TJobTagProperties.Get_LineNumber: Smallint;
begin
    Result := DefaultInterface.LineNumber;
end;

procedure TJobTagProperties.Set_LineNumber(Param1: Smallint);
begin
  DefaultInterface.Set_LineNumber(Param1);
end;

{$ENDIF}

class function CoCashDisbursementJournal.Create: _CashDisbursementJournal;
begin
  Result := CreateComObject(CLASS_CashDisbursementJournal) as _CashDisbursementJournal;
end;

class function CoCashDisbursementJournal.CreateRemote(const MachineName: string): _CashDisbursementJournal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CashDisbursementJournal) as _CashDisbursementJournal;
end;

procedure TCashDisbursementJournal.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{86968F99-2C7E-4AF8-8E8E-C2F11411C81C}';
    IntfIID:   '{BEAEE06C-BAD5-484E-8C89-A84C825E55BD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCashDisbursementJournal.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _CashDisbursementJournal;
  end;
end;

procedure TCashDisbursementJournal.ConnectTo(svrIntf: _CashDisbursementJournal);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCashDisbursementJournal.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCashDisbursementJournal.GetDefaultInterface: _CashDisbursementJournal;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCashDisbursementJournal.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCashDisbursementJournalProperties.Create(Self);
{$ENDIF}
end;

destructor TCashDisbursementJournal.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCashDisbursementJournal.GetServerProperties: TCashDisbursementJournalProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCashDisbursementJournal.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TCashDisbursementJournal.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TCashDisbursementJournal.Get_CashAccount: WideString;
begin
    Result := DefaultInterface.CashAccount;
end;

procedure TCashDisbursementJournal.Set_CashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_CashAccount(Param1);
end;

function TCashDisbursementJournal.Get_CashAmount: Double;
begin
    Result := DefaultInterface.CashAmount;
end;

procedure TCashDisbursementJournal.Set_CashAmount(Param1: Double);
begin
  DefaultInterface.Set_CashAmount(Param1);
end;

function TCashDisbursementJournal.Get_CheckAddr1: WideString;
begin
    Result := DefaultInterface.CheckAddr1;
end;

procedure TCashDisbursementJournal.Set_CheckAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_CheckAddr1(Param1);
end;

function TCashDisbursementJournal.Get_CheckAddr2: WideString;
begin
    Result := DefaultInterface.CheckAddr2;
end;

procedure TCashDisbursementJournal.Set_CheckAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_CheckAddr2(Param1);
end;

function TCashDisbursementJournal.Get_CheckCity: WideString;
begin
    Result := DefaultInterface.CheckCity;
end;

procedure TCashDisbursementJournal.Set_CheckCity(const Param1: WideString);
begin
  DefaultInterface.Set_CheckCity(Param1);
end;

function TCashDisbursementJournal.Get_CheckCountry: WideString;
begin
    Result := DefaultInterface.CheckCountry;
end;

procedure TCashDisbursementJournal.Set_CheckCountry(const Param1: WideString);
begin
  DefaultInterface.Set_CheckCountry(Param1);
end;

function TCashDisbursementJournal.Get_CheckName: WideString;
begin
    Result := DefaultInterface.CheckName;
end;

procedure TCashDisbursementJournal.Set_CheckName(const Param1: WideString);
begin
  DefaultInterface.Set_CheckName(Param1);
end;

function TCashDisbursementJournal.Get_CheckNumber: WideString;
begin
    Result := DefaultInterface.CheckNumber;
end;

procedure TCashDisbursementJournal.Set_CheckNumber(const Param1: WideString);
begin
  DefaultInterface.Set_CheckNumber(Param1);
end;

function TCashDisbursementJournal.Get_CheckState: WideString;
begin
    Result := DefaultInterface.CheckState;
end;

procedure TCashDisbursementJournal.Set_CheckState(const Param1: WideString);
begin
  DefaultInterface.Set_CheckState(Param1);
end;

function TCashDisbursementJournal.Get_CheckZipcode: WideString;
begin
    Result := DefaultInterface.CheckZipcode;
end;

procedure TCashDisbursementJournal.Set_CheckZipcode(const Param1: WideString);
begin
  DefaultInterface.Set_CheckZipcode(Param1);
end;

function TCashDisbursementJournal.Get_CustomerIndex: Integer;
begin
    Result := DefaultInterface.CustomerIndex;
end;

procedure TCashDisbursementJournal.Set_CustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_CustomerIndex(Param1);
end;

function TCashDisbursementJournal.Get_CustomerPayment: WordBool;
begin
    Result := DefaultInterface.CustomerPayment;
end;

procedure TCashDisbursementJournal.Set_CustomerPayment(Param1: WordBool);
begin
  DefaultInterface.Set_CustomerPayment(Param1);
end;

function TCashDisbursementJournal.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TCashDisbursementJournal.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TCashDisbursementJournal.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TCashDisbursementJournal.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TCashDisbursementJournal.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailCostOfSalesAccount[Index];
end;

procedure TCashDisbursementJournal.Set_DetailCostOfSalesAccount(Index: Smallint; 
                                                                const Param2: WideString);
begin
  DefaultInterface.Set_DetailCostOfSalesAccount(Index,Param2);
end;

function TCashDisbursementJournal.Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailCostOfSalesTrx[Index];
end;

procedure TCashDisbursementJournal.Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailCostOfSalesTrx[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailCustomerIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCustomerIndex[Index];
end;

procedure TCashDisbursementJournal.Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCustomerIndex[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailDateCleared(Index: Smallint): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DetailDateCleared[Index];
end;

procedure TCashDisbursementJournal.Set_DetailDateCleared(Index: Smallint; Param2: OleVariant);
begin
  DefaultInterface.DetailDateCleared[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TCashDisbursementJournal.Set_DetailDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TCashDisbursementJournal.Get_DetailDiscountAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailDiscountAmount[Index];
end;

procedure TCashDisbursementJournal.Set_DetailDiscountAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailDiscountAmount[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TCashDisbursementJournal.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailFlag2(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag2[Index];
end;

procedure TCashDisbursementJournal.Set_DetailFlag2(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag2[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TCashDisbursementJournal.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TCashDisbursementJournal.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TCashDisbursementJournal.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TCashDisbursementJournal.Get_DetailInventoryAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInventoryAccount[Index];
end;

procedure TCashDisbursementJournal.Set_DetailInventoryAccount(Index: Smallint; 
                                                              const Param2: WideString);
begin
  DefaultInterface.Set_DetailInventoryAccount(Index,Param2);
end;

function TCashDisbursementJournal.Get_DetailInventoryAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailInventoryAmount[Index];
end;

procedure TCashDisbursementJournal.Set_DetailInventoryAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailInventoryAmount[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailInvoiceNRecord(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailInvoiceNRecord[Index];
end;

procedure TCashDisbursementJournal.Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailInvoiceNRecord[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailInvoicePaid(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInvoicePaid[Index];
end;

procedure TCashDisbursementJournal.Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailInvoicePaid(Index,Param2);
end;

function TCashDisbursementJournal.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TCashDisbursementJournal.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TCashDisbursementJournal.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TCashDisbursementJournal.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TCashDisbursementJournal.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TCashDisbursementJournal.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TCashDisbursementJournal.Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TCashDisbursementJournal.Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailTaxType(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailTaxType[Index];
end;

procedure TCashDisbursementJournal.Set_DetailTaxType(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailTaxType[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TCashDisbursementJournal.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TCashDisbursementJournal.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailUnknownBoolean(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailUnknownBoolean[Index];
end;

procedure TCashDisbursementJournal.Set_DetailUnknownBoolean(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailUnknownBoolean[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailUnused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused1[Index];
end;

procedure TCashDisbursementJournal.Set_DetailUnused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused1[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DetailVendorIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailVendorIndex[Index];
end;

procedure TCashDisbursementJournal.Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailVendorIndex[Index] := Param2;
end;

function TCashDisbursementJournal.Get_DiscountAccount: WideString;
begin
    Result := DefaultInterface.DiscountAccount;
end;

procedure TCashDisbursementJournal.Set_DiscountAccount(const Param1: WideString);
begin
  DefaultInterface.Set_DiscountAccount(Param1);
end;

function TCashDisbursementJournal.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TCashDisbursementJournal.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TCashDisbursementJournal.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TCashDisbursementJournal.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TCashDisbursementJournal.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TCashDisbursementJournal.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TCashDisbursementJournal.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TCashDisbursementJournal.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TCashDisbursementJournal.Get_JrnlTypeEx: Integer;
begin
    Result := DefaultInterface.JrnlTypeEx;
end;

procedure TCashDisbursementJournal.Set_JrnlTypeEx(Param1: Integer);
begin
  DefaultInterface.Set_JrnlTypeEx(Param1);
end;

function TCashDisbursementJournal.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TCashDisbursementJournal.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TCashDisbursementJournal.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TCashDisbursementJournal.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TCashDisbursementJournal.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TCashDisbursementJournal.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TCashDisbursementJournal.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TCashDisbursementJournal.Get_Memo: WideString;
begin
    Result := DefaultInterface.Memo;
end;

procedure TCashDisbursementJournal.Set_Memo(const Param1: WideString);
begin
  DefaultInterface.Set_Memo(Param1);
end;

function TCashDisbursementJournal.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TCashDisbursementJournal.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TCashDisbursementJournal.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TCashDisbursementJournal.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TCashDisbursementJournal.Get_PaymentMethod: WideString;
begin
    Result := DefaultInterface.PaymentMethod;
end;

procedure TCashDisbursementJournal.Set_PaymentMethod(const Param1: WideString);
begin
  DefaultInterface.Set_PaymentMethod(Param1);
end;

function TCashDisbursementJournal.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TCashDisbursementJournal.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TCashDisbursementJournal.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TCashDisbursementJournal.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TCashDisbursementJournal.Get_Prepayment: WordBool;
begin
    Result := DefaultInterface.Prepayment;
end;

procedure TCashDisbursementJournal.Set_Prepayment(Param1: WordBool);
begin
  DefaultInterface.Set_Prepayment(Param1);
end;

function TCashDisbursementJournal.Get_PrintCheck: WordBool;
begin
    Result := DefaultInterface.PrintCheck;
end;

procedure TCashDisbursementJournal.Set_PrintCheck(Param1: WordBool);
begin
  DefaultInterface.Set_PrintCheck(Param1);
end;

function TCashDisbursementJournal.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TCashDisbursementJournal.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TCashDisbursementJournal.Get_RecurrenceIndex: Integer;
begin
    Result := DefaultInterface.RecurrenceIndex;
end;

procedure TCashDisbursementJournal.Set_RecurrenceIndex(Param1: Integer);
begin
  DefaultInterface.Set_RecurrenceIndex(Param1);
end;

function TCashDisbursementJournal.Get_RecurrenceRate: Smallint;
begin
    Result := DefaultInterface.RecurrenceRate;
end;

procedure TCashDisbursementJournal.Set_RecurrenceRate(Param1: Smallint);
begin
  DefaultInterface.Set_RecurrenceRate(Param1);
end;

function TCashDisbursementJournal.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TCashDisbursementJournal.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TCashDisbursementJournal.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TCashDisbursementJournal.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TCashDisbursementJournal.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TCashDisbursementJournal.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TCashDisbursementJournal.Get_TotalPaidOnInvoice: Double;
begin
    Result := DefaultInterface.TotalPaidOnInvoice;
end;

procedure TCashDisbursementJournal.Set_TotalPaidOnInvoice(Param1: Double);
begin
  DefaultInterface.Set_TotalPaidOnInvoice(Param1);
end;

function TCashDisbursementJournal.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TCashDisbursementJournal.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TCashDisbursementJournal.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TCashDisbursementJournal.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TCashDisbursementJournal.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TCashDisbursementJournal.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TCashDisbursementJournal.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TCashDisbursementJournal.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TCashDisbursementJournal.Get_Unknown2: Smallint;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TCashDisbursementJournal.Set_Unknown2(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TCashDisbursementJournal.Get_Unused3: Smallint;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TCashDisbursementJournal.Set_Unused3(Param1: Smallint);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TCashDisbursementJournal.Get_Unknown4: Smallint;
begin
    Result := DefaultInterface.Unknown4;
end;

procedure TCashDisbursementJournal.Set_Unknown4(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown4(Param1);
end;

function TCashDisbursementJournal.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TCashDisbursementJournal.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TCashDisbursementJournal.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TCashDisbursementJournal.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TCashDisbursementJournal.Get_Unused7(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused7[Index];
end;

procedure TCashDisbursementJournal.Set_Unused7(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused7[Index] := Param2;
end;

function TCashDisbursementJournal.Get_Unused8: Byte;
begin
    Result := DefaultInterface.Unused8;
end;

procedure TCashDisbursementJournal.Set_Unused8(Param1: Byte);
begin
  DefaultInterface.Set_Unused8(Param1);
end;

function TCashDisbursementJournal.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TCashDisbursementJournal.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

function TCashDisbursementJournal.Get_VendorName: WideString;
begin
    Result := DefaultInterface.VendorName;
end;

procedure TCashDisbursementJournal.Set_VendorName(const Param1: WideString);
begin
  DefaultInterface.Set_VendorName(Param1);
end;

function TCashDisbursementJournal.ClearRecord: Smallint;
begin
  Result := DefaultInterface.ClearRecord;
end;

function TCashDisbursementJournal.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TCashDisbursementJournal.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TCashDisbursementJournal.GetEqual(NRecord: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(NRecord);
end;

function TCashDisbursementJournal.IncrementBatchCount: Smallint;
begin
  Result := DefaultInterface.IncrementBatchCount;
end;

function TCashDisbursementJournal.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TCashDisbursementJournal.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TCashDisbursementJournal.ReadFirst(Period: Smallint): Smallint;
begin
  Result := DefaultInterface.ReadFirst(Period);
end;

function TCashDisbursementJournal.ReadFirstForVendor(Index: Integer): Smallint;
begin
  Result := DefaultInterface.ReadFirstForVendor(Index);
end;

function TCashDisbursementJournal.ReadNext: Smallint;
begin
  Result := DefaultInterface.ReadNext;
end;

function TCashDisbursementJournal.ReadNextByVendor: Smallint;
begin
  Result := DefaultInterface.ReadNextByVendor;
end;

function TCashDisbursementJournal.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCashDisbursementJournalProperties.Create(AServer: TCashDisbursementJournal);
begin
  inherited Create;
  FServer := AServer;
end;

function TCashDisbursementJournalProperties.GetDefaultInterface: _CashDisbursementJournal;
begin
  Result := FServer.DefaultInterface;
end;

function TCashDisbursementJournalProperties.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TCashDisbursementJournalProperties.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TCashDisbursementJournalProperties.Get_CashAccount: WideString;
begin
    Result := DefaultInterface.CashAccount;
end;

procedure TCashDisbursementJournalProperties.Set_CashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_CashAccount(Param1);
end;

function TCashDisbursementJournalProperties.Get_CashAmount: Double;
begin
    Result := DefaultInterface.CashAmount;
end;

procedure TCashDisbursementJournalProperties.Set_CashAmount(Param1: Double);
begin
  DefaultInterface.Set_CashAmount(Param1);
end;

function TCashDisbursementJournalProperties.Get_CheckAddr1: WideString;
begin
    Result := DefaultInterface.CheckAddr1;
end;

procedure TCashDisbursementJournalProperties.Set_CheckAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_CheckAddr1(Param1);
end;

function TCashDisbursementJournalProperties.Get_CheckAddr2: WideString;
begin
    Result := DefaultInterface.CheckAddr2;
end;

procedure TCashDisbursementJournalProperties.Set_CheckAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_CheckAddr2(Param1);
end;

function TCashDisbursementJournalProperties.Get_CheckCity: WideString;
begin
    Result := DefaultInterface.CheckCity;
end;

procedure TCashDisbursementJournalProperties.Set_CheckCity(const Param1: WideString);
begin
  DefaultInterface.Set_CheckCity(Param1);
end;

function TCashDisbursementJournalProperties.Get_CheckCountry: WideString;
begin
    Result := DefaultInterface.CheckCountry;
end;

procedure TCashDisbursementJournalProperties.Set_CheckCountry(const Param1: WideString);
begin
  DefaultInterface.Set_CheckCountry(Param1);
end;

function TCashDisbursementJournalProperties.Get_CheckName: WideString;
begin
    Result := DefaultInterface.CheckName;
end;

procedure TCashDisbursementJournalProperties.Set_CheckName(const Param1: WideString);
begin
  DefaultInterface.Set_CheckName(Param1);
end;

function TCashDisbursementJournalProperties.Get_CheckNumber: WideString;
begin
    Result := DefaultInterface.CheckNumber;
end;

procedure TCashDisbursementJournalProperties.Set_CheckNumber(const Param1: WideString);
begin
  DefaultInterface.Set_CheckNumber(Param1);
end;

function TCashDisbursementJournalProperties.Get_CheckState: WideString;
begin
    Result := DefaultInterface.CheckState;
end;

procedure TCashDisbursementJournalProperties.Set_CheckState(const Param1: WideString);
begin
  DefaultInterface.Set_CheckState(Param1);
end;

function TCashDisbursementJournalProperties.Get_CheckZipcode: WideString;
begin
    Result := DefaultInterface.CheckZipcode;
end;

procedure TCashDisbursementJournalProperties.Set_CheckZipcode(const Param1: WideString);
begin
  DefaultInterface.Set_CheckZipcode(Param1);
end;

function TCashDisbursementJournalProperties.Get_CustomerIndex: Integer;
begin
    Result := DefaultInterface.CustomerIndex;
end;

procedure TCashDisbursementJournalProperties.Set_CustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_CustomerIndex(Param1);
end;

function TCashDisbursementJournalProperties.Get_CustomerPayment: WordBool;
begin
    Result := DefaultInterface.CustomerPayment;
end;

procedure TCashDisbursementJournalProperties.Set_CustomerPayment(Param1: WordBool);
begin
  DefaultInterface.Set_CustomerPayment(Param1);
end;

function TCashDisbursementJournalProperties.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TCashDisbursementJournalProperties.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TCashDisbursementJournalProperties.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailCostOfSalesAccount[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailCostOfSalesAccount(Index: Smallint; 
                                                                          const Param2: WideString);
begin
  DefaultInterface.Set_DetailCostOfSalesAccount(Index,Param2);
end;

function TCashDisbursementJournalProperties.Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailCostOfSalesTrx[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailCostOfSalesTrx(Index: Smallint; 
                                                                      Param2: WordBool);
begin
  DefaultInterface.DetailCostOfSalesTrx[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailCustomerIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCustomerIndex[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailCustomerIndex(Index: Smallint; 
                                                                     Param2: Integer);
begin
  DefaultInterface.DetailCustomerIndex[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailDateCleared(Index: Smallint): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DetailDateCleared[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailDateCleared(Index: Smallint; 
                                                                   Param2: OleVariant);
begin
  DefaultInterface.DetailDateCleared[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailDescription(Index: Smallint; 
                                                                   const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TCashDisbursementJournalProperties.Get_DetailDiscountAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailDiscountAmount[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailDiscountAmount(Index: Smallint; 
                                                                      Param2: Double);
begin
  DefaultInterface.DetailDiscountAmount[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailFlag2(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag2[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailFlag2(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag2[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailGLAccount(Index: Smallint; 
                                                                 const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TCashDisbursementJournalProperties.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailGUID(Index: Smallint; 
                                                            const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TCashDisbursementJournalProperties.Get_DetailInventoryAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInventoryAccount[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailInventoryAccount(Index: Smallint; 
                                                                        const Param2: WideString);
begin
  DefaultInterface.Set_DetailInventoryAccount(Index,Param2);
end;

function TCashDisbursementJournalProperties.Get_DetailInventoryAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailInventoryAmount[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailInventoryAmount(Index: Smallint; 
                                                                       Param2: Double);
begin
  DefaultInterface.DetailInventoryAmount[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailInvoiceNRecord(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailInvoiceNRecord[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailInvoiceNRecord(Index: Smallint; 
                                                                      Param2: Integer);
begin
  DefaultInterface.DetailInvoiceNRecord[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailInvoicePaid(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInvoicePaid[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailInvoicePaid(Index: Smallint; 
                                                                   const Param2: WideString);
begin
  DefaultInterface.Set_DetailInvoicePaid(Index,Param2);
end;

function TCashDisbursementJournalProperties.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailStockingQuantity(Index: Smallint; 
                                                                        Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailStockingUnitPrice(Index: Smallint; 
                                                                         Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailTaxType(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailTaxType[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailTaxType(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailTaxType[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailUnknownBoolean(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailUnknownBoolean[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailUnknownBoolean(Index: Smallint; 
                                                                      Param2: WordBool);
begin
  DefaultInterface.DetailUnknownBoolean[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailUnused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused1[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailUnused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused1[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DetailVendorIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailVendorIndex[Index];
end;

procedure TCashDisbursementJournalProperties.Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailVendorIndex[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_DiscountAccount: WideString;
begin
    Result := DefaultInterface.DiscountAccount;
end;

procedure TCashDisbursementJournalProperties.Set_DiscountAccount(const Param1: WideString);
begin
  DefaultInterface.Set_DiscountAccount(Param1);
end;

function TCashDisbursementJournalProperties.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TCashDisbursementJournalProperties.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TCashDisbursementJournalProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TCashDisbursementJournalProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TCashDisbursementJournalProperties.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TCashDisbursementJournalProperties.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TCashDisbursementJournalProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TCashDisbursementJournalProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TCashDisbursementJournalProperties.Get_JrnlTypeEx: Integer;
begin
    Result := DefaultInterface.JrnlTypeEx;
end;

procedure TCashDisbursementJournalProperties.Set_JrnlTypeEx(Param1: Integer);
begin
  DefaultInterface.Set_JrnlTypeEx(Param1);
end;

function TCashDisbursementJournalProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TCashDisbursementJournalProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TCashDisbursementJournalProperties.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TCashDisbursementJournalProperties.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TCashDisbursementJournalProperties.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TCashDisbursementJournalProperties.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TCashDisbursementJournalProperties.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TCashDisbursementJournalProperties.Get_Memo: WideString;
begin
    Result := DefaultInterface.Memo;
end;

procedure TCashDisbursementJournalProperties.Set_Memo(const Param1: WideString);
begin
  DefaultInterface.Set_Memo(Param1);
end;

function TCashDisbursementJournalProperties.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TCashDisbursementJournalProperties.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TCashDisbursementJournalProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TCashDisbursementJournalProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TCashDisbursementJournalProperties.Get_PaymentMethod: WideString;
begin
    Result := DefaultInterface.PaymentMethod;
end;

procedure TCashDisbursementJournalProperties.Set_PaymentMethod(const Param1: WideString);
begin
  DefaultInterface.Set_PaymentMethod(Param1);
end;

function TCashDisbursementJournalProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TCashDisbursementJournalProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TCashDisbursementJournalProperties.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TCashDisbursementJournalProperties.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TCashDisbursementJournalProperties.Get_Prepayment: WordBool;
begin
    Result := DefaultInterface.Prepayment;
end;

procedure TCashDisbursementJournalProperties.Set_Prepayment(Param1: WordBool);
begin
  DefaultInterface.Set_Prepayment(Param1);
end;

function TCashDisbursementJournalProperties.Get_PrintCheck: WordBool;
begin
    Result := DefaultInterface.PrintCheck;
end;

procedure TCashDisbursementJournalProperties.Set_PrintCheck(Param1: WordBool);
begin
  DefaultInterface.Set_PrintCheck(Param1);
end;

function TCashDisbursementJournalProperties.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TCashDisbursementJournalProperties.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TCashDisbursementJournalProperties.Get_RecurrenceIndex: Integer;
begin
    Result := DefaultInterface.RecurrenceIndex;
end;

procedure TCashDisbursementJournalProperties.Set_RecurrenceIndex(Param1: Integer);
begin
  DefaultInterface.Set_RecurrenceIndex(Param1);
end;

function TCashDisbursementJournalProperties.Get_RecurrenceRate: Smallint;
begin
    Result := DefaultInterface.RecurrenceRate;
end;

procedure TCashDisbursementJournalProperties.Set_RecurrenceRate(Param1: Smallint);
begin
  DefaultInterface.Set_RecurrenceRate(Param1);
end;

function TCashDisbursementJournalProperties.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TCashDisbursementJournalProperties.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TCashDisbursementJournalProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TCashDisbursementJournalProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TCashDisbursementJournalProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TCashDisbursementJournalProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TCashDisbursementJournalProperties.Get_TotalPaidOnInvoice: Double;
begin
    Result := DefaultInterface.TotalPaidOnInvoice;
end;

procedure TCashDisbursementJournalProperties.Set_TotalPaidOnInvoice(Param1: Double);
begin
  DefaultInterface.Set_TotalPaidOnInvoice(Param1);
end;

function TCashDisbursementJournalProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TCashDisbursementJournalProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TCashDisbursementJournalProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TCashDisbursementJournalProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TCashDisbursementJournalProperties.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TCashDisbursementJournalProperties.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TCashDisbursementJournalProperties.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TCashDisbursementJournalProperties.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_Unknown2: Smallint;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TCashDisbursementJournalProperties.Set_Unknown2(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TCashDisbursementJournalProperties.Get_Unused3: Smallint;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TCashDisbursementJournalProperties.Set_Unused3(Param1: Smallint);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TCashDisbursementJournalProperties.Get_Unknown4: Smallint;
begin
    Result := DefaultInterface.Unknown4;
end;

procedure TCashDisbursementJournalProperties.Set_Unknown4(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown4(Param1);
end;

function TCashDisbursementJournalProperties.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TCashDisbursementJournalProperties.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TCashDisbursementJournalProperties.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_Unused7(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused7[Index];
end;

procedure TCashDisbursementJournalProperties.Set_Unused7(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused7[Index] := Param2;
end;

function TCashDisbursementJournalProperties.Get_Unused8: Byte;
begin
    Result := DefaultInterface.Unused8;
end;

procedure TCashDisbursementJournalProperties.Set_Unused8(Param1: Byte);
begin
  DefaultInterface.Set_Unused8(Param1);
end;

function TCashDisbursementJournalProperties.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TCashDisbursementJournalProperties.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

function TCashDisbursementJournalProperties.Get_VendorName: WideString;
begin
    Result := DefaultInterface.VendorName;
end;

procedure TCashDisbursementJournalProperties.Set_VendorName(const Param1: WideString);
begin
  DefaultInterface.Set_VendorName(Param1);
end;

{$ENDIF}

class function CoCashReceiptJournal.Create: _CashReceiptJournal;
begin
  Result := CreateComObject(CLASS_CashReceiptJournal) as _CashReceiptJournal;
end;

class function CoCashReceiptJournal.CreateRemote(const MachineName: string): _CashReceiptJournal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CashReceiptJournal) as _CashReceiptJournal;
end;

procedure TCashReceiptJournal.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{857E096D-6846-41EF-A395-179A138AA2F1}';
    IntfIID:   '{3D47D9FA-9FC9-445A-9C51-C34C54476933}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCashReceiptJournal.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _CashReceiptJournal;
  end;
end;

procedure TCashReceiptJournal.ConnectTo(svrIntf: _CashReceiptJournal);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCashReceiptJournal.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCashReceiptJournal.GetDefaultInterface: _CashReceiptJournal;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCashReceiptJournal.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCashReceiptJournalProperties.Create(Self);
{$ENDIF}
end;

destructor TCashReceiptJournal.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCashReceiptJournal.GetServerProperties: TCashReceiptJournalProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCashReceiptJournal.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TCashReceiptJournal.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TCashReceiptJournal.Get_CashAccount: WideString;
begin
    Result := DefaultInterface.CashAccount;
end;

procedure TCashReceiptJournal.Set_CashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_CashAccount(Param1);
end;

function TCashReceiptJournal.Get_CashAmount: Double;
begin
    Result := DefaultInterface.CashAmount;
end;

procedure TCashReceiptJournal.Set_CashAmount(Param1: Double);
begin
  DefaultInterface.Set_CashAmount(Param1);
end;

function TCashReceiptJournal.Get_CCAddress1: WideString;
begin
    Result := DefaultInterface.CCAddress1;
end;

procedure TCashReceiptJournal.Set_CCAddress1(const Param1: WideString);
begin
  DefaultInterface.Set_CCAddress1(Param1);
end;

function TCashReceiptJournal.Get_CCAddress2: WideString;
begin
    Result := DefaultInterface.CCAddress2;
end;

procedure TCashReceiptJournal.Set_CCAddress2(const Param1: WideString);
begin
  DefaultInterface.Set_CCAddress2(Param1);
end;

function TCashReceiptJournal.Get_CCAuthorization: WideString;
begin
    Result := DefaultInterface.CCAuthorization;
end;

procedure TCashReceiptJournal.Set_CCAuthorization(const Param1: WideString);
begin
  DefaultInterface.Set_CCAuthorization(Param1);
end;

function TCashReceiptJournal.Get_CCCity: WideString;
begin
    Result := DefaultInterface.CCCity;
end;

procedure TCashReceiptJournal.Set_CCCity(const Param1: WideString);
begin
  DefaultInterface.Set_CCCity(Param1);
end;

function TCashReceiptJournal.Get_CCComment: WideString;
begin
    Result := DefaultInterface.CCComment;
end;

procedure TCashReceiptJournal.Set_CCComment(const Param1: WideString);
begin
  DefaultInterface.Set_CCComment(Param1);
end;

function TCashReceiptJournal.Get_CCCountry: WideString;
begin
    Result := DefaultInterface.CCCountry;
end;

procedure TCashReceiptJournal.Set_CCCountry(const Param1: WideString);
begin
  DefaultInterface.Set_CCCountry(Param1);
end;

function TCashReceiptJournal.Get_CCEncryptedCard: WideString;
begin
    Result := DefaultInterface.CCEncryptedCard;
end;

procedure TCashReceiptJournal.Set_CCEncryptedCard(const Param1: WideString);
begin
  DefaultInterface.Set_CCEncryptedCard(Param1);
end;

function TCashReceiptJournal.Get_CCExpirationDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.CCExpirationDate;
end;

procedure TCashReceiptJournal.Set_CCExpirationDate(Param1: OleVariant);
begin
  DefaultInterface.Set_CCExpirationDate(Param1);
end;

function TCashReceiptJournal.Get_CCFlag: Byte;
begin
    Result := DefaultInterface.CCFlag;
end;

procedure TCashReceiptJournal.Set_CCFlag(Param1: Byte);
begin
  DefaultInterface.Set_CCFlag(Param1);
end;

function TCashReceiptJournal.Get_CCName: WideString;
begin
    Result := DefaultInterface.CCName;
end;

procedure TCashReceiptJournal.Set_CCName(const Param1: WideString);
begin
  DefaultInterface.Set_CCName(Param1);
end;

function TCashReceiptJournal.Get_CCNumber: WideString;
begin
    Result := DefaultInterface.CCNumber;
end;

procedure TCashReceiptJournal.Set_CCNumber(const Param1: WideString);
begin
  DefaultInterface.Set_CCNumber(Param1);
end;

function TCashReceiptJournal.Get_CCState: WideString;
begin
    Result := DefaultInterface.CCState;
end;

procedure TCashReceiptJournal.Set_CCState(const Param1: WideString);
begin
  DefaultInterface.Set_CCState(Param1);
end;

function TCashReceiptJournal.Get_CCUnknown(Index: Smallint): Byte;
begin
    Result := DefaultInterface.CCUnknown[Index];
end;

procedure TCashReceiptJournal.Set_CCUnknown(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.CCUnknown[Index] := Param2;
end;

function TCashReceiptJournal.Get_CCZipcode: WideString;
begin
    Result := DefaultInterface.CCZipcode;
end;

procedure TCashReceiptJournal.Set_CCZipcode(const Param1: WideString);
begin
  DefaultInterface.Set_CCZipcode(Param1);
end;

function TCashReceiptJournal.Get_CheckAddr1: WideString;
begin
    Result := DefaultInterface.CheckAddr1;
end;

procedure TCashReceiptJournal.Set_CheckAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_CheckAddr1(Param1);
end;

function TCashReceiptJournal.Get_CheckAddr2: WideString;
begin
    Result := DefaultInterface.CheckAddr2;
end;

procedure TCashReceiptJournal.Set_CheckAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_CheckAddr2(Param1);
end;

function TCashReceiptJournal.Get_CheckCity: WideString;
begin
    Result := DefaultInterface.CheckCity;
end;

procedure TCashReceiptJournal.Set_CheckCity(const Param1: WideString);
begin
  DefaultInterface.Set_CheckCity(Param1);
end;

function TCashReceiptJournal.Get_CheckCountry: WideString;
begin
    Result := DefaultInterface.CheckCountry;
end;

procedure TCashReceiptJournal.Set_CheckCountry(const Param1: WideString);
begin
  DefaultInterface.Set_CheckCountry(Param1);
end;

function TCashReceiptJournal.Get_CheckName: WideString;
begin
    Result := DefaultInterface.CheckName;
end;

procedure TCashReceiptJournal.Set_CheckName(const Param1: WideString);
begin
  DefaultInterface.Set_CheckName(Param1);
end;

function TCashReceiptJournal.Get_CheckState: WideString;
begin
    Result := DefaultInterface.CheckState;
end;

procedure TCashReceiptJournal.Set_CheckState(const Param1: WideString);
begin
  DefaultInterface.Set_CheckState(Param1);
end;

function TCashReceiptJournal.Get_CheckZipcode: WideString;
begin
    Result := DefaultInterface.CheckZipcode;
end;

procedure TCashReceiptJournal.Set_CheckZipcode(const Param1: WideString);
begin
  DefaultInterface.Set_CheckZipcode(Param1);
end;

function TCashReceiptJournal.Get_CustomerIndex: Integer;
begin
    Result := DefaultInterface.CustomerIndex;
end;

procedure TCashReceiptJournal.Set_CustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_CustomerIndex(Param1);
end;

function TCashReceiptJournal.Get_CustomerName: WideString;
begin
    Result := DefaultInterface.CustomerName;
end;

procedure TCashReceiptJournal.Set_CustomerName(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerName(Param1);
end;

function TCashReceiptJournal.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TCashReceiptJournal.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TCashReceiptJournal.Get_DepositDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DepositDate;
end;

procedure TCashReceiptJournal.Set_DepositDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DepositDate(Param1);
end;

function TCashReceiptJournal.Get_DepositTicketID: WideString;
begin
    Result := DefaultInterface.DepositTicketID;
end;

procedure TCashReceiptJournal.Set_DepositTicketID(const Param1: WideString);
begin
  DefaultInterface.Set_DepositTicketID(Param1);
end;

function TCashReceiptJournal.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TCashReceiptJournal.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TCashReceiptJournal.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailCostOfSalesAccount[Index];
end;

procedure TCashReceiptJournal.Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailCostOfSalesAccount(Index,Param2);
end;

function TCashReceiptJournal.Get_DetailCostOfSalesAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailCostOfSalesAmount[Index];
end;

procedure TCashReceiptJournal.Set_DetailCostOfSalesAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailCostOfSalesAmount[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailCostOfSalesTrx[Index];
end;

procedure TCashReceiptJournal.Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailCostOfSalesTrx[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailCustomerIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCustomerIndex[Index];
end;

procedure TCashReceiptJournal.Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCustomerIndex[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailDateCleared(Index: Smallint): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DetailDateCleared[Index];
end;

procedure TCashReceiptJournal.Set_DetailDateCleared(Index: Smallint; Param2: OleVariant);
begin
  DefaultInterface.DetailDateCleared[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TCashReceiptJournal.Set_DetailDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TCashReceiptJournal.Get_DetailDiscountAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailDiscountAmount[Index];
end;

procedure TCashReceiptJournal.Set_DetailDiscountAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailDiscountAmount[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TCashReceiptJournal.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TCashReceiptJournal.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TCashReceiptJournal.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TCashReceiptJournal.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TCashReceiptJournal.Get_DetailInventoryAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInventoryAccount[Index];
end;

procedure TCashReceiptJournal.Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailInventoryAccount(Index,Param2);
end;

function TCashReceiptJournal.Get_DetailInvoiceNRecord(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailInvoiceNRecord[Index];
end;

procedure TCashReceiptJournal.Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailInvoiceNRecord[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailInvoicePaid(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInvoicePaid[Index];
end;

procedure TCashReceiptJournal.Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailInvoicePaid(Index,Param2);
end;

function TCashReceiptJournal.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TCashReceiptJournal.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TCashReceiptJournal.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TCashReceiptJournal.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TCashReceiptJournal.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TCashReceiptJournal.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailSalesTaxAuthority(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailSalesTaxAuthority[Index];
end;

procedure TCashReceiptJournal.Set_DetailSalesTaxAuthority(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailSalesTaxAuthority(Index,Param2);
end;

function TCashReceiptJournal.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TCashReceiptJournal.Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TCashReceiptJournal.Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailTaxType(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailTaxType[Index];
end;

procedure TCashReceiptJournal.Set_DetailTaxType(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailTaxType[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TCashReceiptJournal.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TCashReceiptJournal.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailUnused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused1[Index];
end;

procedure TCashReceiptJournal.Set_DetailUnused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused1[Index] := Param2;
end;

function TCashReceiptJournal.Get_DetailVendorIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailVendorIndex[Index];
end;

procedure TCashReceiptJournal.Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailVendorIndex[Index] := Param2;
end;

function TCashReceiptJournal.Get_DiscountAccount: WideString;
begin
    Result := DefaultInterface.DiscountAccount;
end;

procedure TCashReceiptJournal.Set_DiscountAccount(const Param1: WideString);
begin
  DefaultInterface.Set_DiscountAccount(Param1);
end;

function TCashReceiptJournal.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TCashReceiptJournal.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TCashReceiptJournal.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TCashReceiptJournal.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TCashReceiptJournal.Get_InvoicesPaid: Double;
begin
    Result := DefaultInterface.InvoicesPaid;
end;

procedure TCashReceiptJournal.Set_InvoicesPaid(Param1: Double);
begin
  DefaultInterface.Set_InvoicesPaid(Param1);
end;

function TCashReceiptJournal.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TCashReceiptJournal.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TCashReceiptJournal.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TCashReceiptJournal.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TCashReceiptJournal.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TCashReceiptJournal.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TCashReceiptJournal.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TCashReceiptJournal.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TCashReceiptJournal.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TCashReceiptJournal.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TCashReceiptJournal.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TCashReceiptJournal.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TCashReceiptJournal.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TCashReceiptJournal.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TCashReceiptJournal.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TCashReceiptJournal.Get_PaymentMethod: WideString;
begin
    Result := DefaultInterface.PaymentMethod;
end;

procedure TCashReceiptJournal.Set_PaymentMethod(const Param1: WideString);
begin
  DefaultInterface.Set_PaymentMethod(Param1);
end;

function TCashReceiptJournal.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TCashReceiptJournal.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TCashReceiptJournal.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TCashReceiptJournal.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TCashReceiptJournal.Get_Prepayment: WordBool;
begin
    Result := DefaultInterface.Prepayment;
end;

procedure TCashReceiptJournal.Set_Prepayment(Param1: WordBool);
begin
  DefaultInterface.Set_Prepayment(Param1);
end;

function TCashReceiptJournal.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TCashReceiptJournal.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TCashReceiptJournal.Get_ReceiptNum: WideString;
begin
    Result := DefaultInterface.ReceiptNum;
end;

procedure TCashReceiptJournal.Set_ReceiptNum(const Param1: WideString);
begin
  DefaultInterface.Set_ReceiptNum(Param1);
end;

function TCashReceiptJournal.Get_RecurrenceIndex: Integer;
begin
    Result := DefaultInterface.RecurrenceIndex;
end;

procedure TCashReceiptJournal.Set_RecurrenceIndex(Param1: Integer);
begin
  DefaultInterface.Set_RecurrenceIndex(Param1);
end;

function TCashReceiptJournal.Get_RecurrenceRate: Smallint;
begin
    Result := DefaultInterface.RecurrenceRate;
end;

procedure TCashReceiptJournal.Set_RecurrenceRate(Param1: Smallint);
begin
  DefaultInterface.Set_RecurrenceRate(Param1);
end;

function TCashReceiptJournal.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TCashReceiptJournal.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TCashReceiptJournal.Get_SalesRepID: WideString;
begin
    Result := DefaultInterface.SalesRepID;
end;

procedure TCashReceiptJournal.Set_SalesRepID(const Param1: WideString);
begin
  DefaultInterface.Set_SalesRepID(Param1);
end;

function TCashReceiptJournal.Get_SalesTaxCode: WideString;
begin
    Result := DefaultInterface.SalesTaxCode;
end;

procedure TCashReceiptJournal.Set_SalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_SalesTaxCode(Param1);
end;

function TCashReceiptJournal.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TCashReceiptJournal.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TCashReceiptJournal.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TCashReceiptJournal.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TCashReceiptJournal.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TCashReceiptJournal.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TCashReceiptJournal.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TCashReceiptJournal.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TCashReceiptJournal.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TCashReceiptJournal.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TCashReceiptJournal.Get_Unused1: Byte;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TCashReceiptJournal.Set_Unused1(Param1: Byte);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TCashReceiptJournal.Get_Unknown2: Smallint;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TCashReceiptJournal.Set_Unknown2(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TCashReceiptJournal.Get_Unused3: Smallint;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TCashReceiptJournal.Set_Unused3(Param1: Smallint);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TCashReceiptJournal.Get_Unknown4: Smallint;
begin
    Result := DefaultInterface.Unknown4;
end;

procedure TCashReceiptJournal.Set_Unknown4(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown4(Param1);
end;

function TCashReceiptJournal.Get_Unused5: Byte;
begin
    Result := DefaultInterface.Unused5;
end;

procedure TCashReceiptJournal.Set_Unused5(Param1: Byte);
begin
  DefaultInterface.Set_Unused5(Param1);
end;

function TCashReceiptJournal.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TCashReceiptJournal.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TCashReceiptJournal.Get_Unused7(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused7[Index];
end;

procedure TCashReceiptJournal.Set_Unused7(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused7[Index] := Param2;
end;

function TCashReceiptJournal.Get_Unused8: Byte;
begin
    Result := DefaultInterface.Unused8;
end;

procedure TCashReceiptJournal.Set_Unused8(Param1: Byte);
begin
  DefaultInterface.Set_Unused8(Param1);
end;

function TCashReceiptJournal.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TCashReceiptJournal.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

function TCashReceiptJournal.Get_VendorReceipt: WordBool;
begin
    Result := DefaultInterface.VendorReceipt;
end;

procedure TCashReceiptJournal.Set_VendorReceipt(Param1: WordBool);
begin
  DefaultInterface.Set_VendorReceipt(Param1);
end;

function TCashReceiptJournal.ClearRecord: Smallint;
begin
  Result := DefaultInterface.ClearRecord;
end;

function TCashReceiptJournal.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TCashReceiptJournal.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TCashReceiptJournal.GetEqual(NRecord: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(NRecord);
end;

function TCashReceiptJournal.GetForKey(Subindex1: Byte; TrxNumber: Smallint; Period: Smallint; 
                                       JournalID: Smallint; Subindex2: Smallint): OleVariant;
begin
  Result := DefaultInterface.GetForKey(Subindex1, TrxNumber, Period, JournalID, Subindex2);
end;

function TCashReceiptJournal.GetForKeyL(Subindex1: Byte; TrxNumber: Integer; Period: Smallint; 
                                        JournalID: Smallint; Subindex2: Smallint): OleVariant;
begin
  Result := DefaultInterface.GetForKeyL(Subindex1, TrxNumber, Period, JournalID, Subindex2);
end;

function TCashReceiptJournal.IncrementBatchCount: Smallint;
begin
  Result := DefaultInterface.IncrementBatchCount;
end;

function TCashReceiptJournal.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TCashReceiptJournal.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TCashReceiptJournal.ReadFirst(Period: Smallint): Smallint;
begin
  Result := DefaultInterface.ReadFirst(Period);
end;

function TCashReceiptJournal.ReadFirstForCustomer(Index: Integer): Smallint;
begin
  Result := DefaultInterface.ReadFirstForCustomer(Index);
end;

function TCashReceiptJournal.ReadNext: Smallint;
begin
  Result := DefaultInterface.ReadNext;
end;

function TCashReceiptJournal.ReadNextByCustomer: Smallint;
begin
  Result := DefaultInterface.ReadNextByCustomer;
end;

function TCashReceiptJournal.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCashReceiptJournalProperties.Create(AServer: TCashReceiptJournal);
begin
  inherited Create;
  FServer := AServer;
end;

function TCashReceiptJournalProperties.GetDefaultInterface: _CashReceiptJournal;
begin
  Result := FServer.DefaultInterface;
end;

function TCashReceiptJournalProperties.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TCashReceiptJournalProperties.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TCashReceiptJournalProperties.Get_CashAccount: WideString;
begin
    Result := DefaultInterface.CashAccount;
end;

procedure TCashReceiptJournalProperties.Set_CashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_CashAccount(Param1);
end;

function TCashReceiptJournalProperties.Get_CashAmount: Double;
begin
    Result := DefaultInterface.CashAmount;
end;

procedure TCashReceiptJournalProperties.Set_CashAmount(Param1: Double);
begin
  DefaultInterface.Set_CashAmount(Param1);
end;

function TCashReceiptJournalProperties.Get_CCAddress1: WideString;
begin
    Result := DefaultInterface.CCAddress1;
end;

procedure TCashReceiptJournalProperties.Set_CCAddress1(const Param1: WideString);
begin
  DefaultInterface.Set_CCAddress1(Param1);
end;

function TCashReceiptJournalProperties.Get_CCAddress2: WideString;
begin
    Result := DefaultInterface.CCAddress2;
end;

procedure TCashReceiptJournalProperties.Set_CCAddress2(const Param1: WideString);
begin
  DefaultInterface.Set_CCAddress2(Param1);
end;

function TCashReceiptJournalProperties.Get_CCAuthorization: WideString;
begin
    Result := DefaultInterface.CCAuthorization;
end;

procedure TCashReceiptJournalProperties.Set_CCAuthorization(const Param1: WideString);
begin
  DefaultInterface.Set_CCAuthorization(Param1);
end;

function TCashReceiptJournalProperties.Get_CCCity: WideString;
begin
    Result := DefaultInterface.CCCity;
end;

procedure TCashReceiptJournalProperties.Set_CCCity(const Param1: WideString);
begin
  DefaultInterface.Set_CCCity(Param1);
end;

function TCashReceiptJournalProperties.Get_CCComment: WideString;
begin
    Result := DefaultInterface.CCComment;
end;

procedure TCashReceiptJournalProperties.Set_CCComment(const Param1: WideString);
begin
  DefaultInterface.Set_CCComment(Param1);
end;

function TCashReceiptJournalProperties.Get_CCCountry: WideString;
begin
    Result := DefaultInterface.CCCountry;
end;

procedure TCashReceiptJournalProperties.Set_CCCountry(const Param1: WideString);
begin
  DefaultInterface.Set_CCCountry(Param1);
end;

function TCashReceiptJournalProperties.Get_CCEncryptedCard: WideString;
begin
    Result := DefaultInterface.CCEncryptedCard;
end;

procedure TCashReceiptJournalProperties.Set_CCEncryptedCard(const Param1: WideString);
begin
  DefaultInterface.Set_CCEncryptedCard(Param1);
end;

function TCashReceiptJournalProperties.Get_CCExpirationDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.CCExpirationDate;
end;

procedure TCashReceiptJournalProperties.Set_CCExpirationDate(Param1: OleVariant);
begin
  DefaultInterface.Set_CCExpirationDate(Param1);
end;

function TCashReceiptJournalProperties.Get_CCFlag: Byte;
begin
    Result := DefaultInterface.CCFlag;
end;

procedure TCashReceiptJournalProperties.Set_CCFlag(Param1: Byte);
begin
  DefaultInterface.Set_CCFlag(Param1);
end;

function TCashReceiptJournalProperties.Get_CCName: WideString;
begin
    Result := DefaultInterface.CCName;
end;

procedure TCashReceiptJournalProperties.Set_CCName(const Param1: WideString);
begin
  DefaultInterface.Set_CCName(Param1);
end;

function TCashReceiptJournalProperties.Get_CCNumber: WideString;
begin
    Result := DefaultInterface.CCNumber;
end;

procedure TCashReceiptJournalProperties.Set_CCNumber(const Param1: WideString);
begin
  DefaultInterface.Set_CCNumber(Param1);
end;

function TCashReceiptJournalProperties.Get_CCState: WideString;
begin
    Result := DefaultInterface.CCState;
end;

procedure TCashReceiptJournalProperties.Set_CCState(const Param1: WideString);
begin
  DefaultInterface.Set_CCState(Param1);
end;

function TCashReceiptJournalProperties.Get_CCUnknown(Index: Smallint): Byte;
begin
    Result := DefaultInterface.CCUnknown[Index];
end;

procedure TCashReceiptJournalProperties.Set_CCUnknown(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.CCUnknown[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_CCZipcode: WideString;
begin
    Result := DefaultInterface.CCZipcode;
end;

procedure TCashReceiptJournalProperties.Set_CCZipcode(const Param1: WideString);
begin
  DefaultInterface.Set_CCZipcode(Param1);
end;

function TCashReceiptJournalProperties.Get_CheckAddr1: WideString;
begin
    Result := DefaultInterface.CheckAddr1;
end;

procedure TCashReceiptJournalProperties.Set_CheckAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_CheckAddr1(Param1);
end;

function TCashReceiptJournalProperties.Get_CheckAddr2: WideString;
begin
    Result := DefaultInterface.CheckAddr2;
end;

procedure TCashReceiptJournalProperties.Set_CheckAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_CheckAddr2(Param1);
end;

function TCashReceiptJournalProperties.Get_CheckCity: WideString;
begin
    Result := DefaultInterface.CheckCity;
end;

procedure TCashReceiptJournalProperties.Set_CheckCity(const Param1: WideString);
begin
  DefaultInterface.Set_CheckCity(Param1);
end;

function TCashReceiptJournalProperties.Get_CheckCountry: WideString;
begin
    Result := DefaultInterface.CheckCountry;
end;

procedure TCashReceiptJournalProperties.Set_CheckCountry(const Param1: WideString);
begin
  DefaultInterface.Set_CheckCountry(Param1);
end;

function TCashReceiptJournalProperties.Get_CheckName: WideString;
begin
    Result := DefaultInterface.CheckName;
end;

procedure TCashReceiptJournalProperties.Set_CheckName(const Param1: WideString);
begin
  DefaultInterface.Set_CheckName(Param1);
end;

function TCashReceiptJournalProperties.Get_CheckState: WideString;
begin
    Result := DefaultInterface.CheckState;
end;

procedure TCashReceiptJournalProperties.Set_CheckState(const Param1: WideString);
begin
  DefaultInterface.Set_CheckState(Param1);
end;

function TCashReceiptJournalProperties.Get_CheckZipcode: WideString;
begin
    Result := DefaultInterface.CheckZipcode;
end;

procedure TCashReceiptJournalProperties.Set_CheckZipcode(const Param1: WideString);
begin
  DefaultInterface.Set_CheckZipcode(Param1);
end;

function TCashReceiptJournalProperties.Get_CustomerIndex: Integer;
begin
    Result := DefaultInterface.CustomerIndex;
end;

procedure TCashReceiptJournalProperties.Set_CustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_CustomerIndex(Param1);
end;

function TCashReceiptJournalProperties.Get_CustomerName: WideString;
begin
    Result := DefaultInterface.CustomerName;
end;

procedure TCashReceiptJournalProperties.Set_CustomerName(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerName(Param1);
end;

function TCashReceiptJournalProperties.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TCashReceiptJournalProperties.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TCashReceiptJournalProperties.Get_DepositDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DepositDate;
end;

procedure TCashReceiptJournalProperties.Set_DepositDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DepositDate(Param1);
end;

function TCashReceiptJournalProperties.Get_DepositTicketID: WideString;
begin
    Result := DefaultInterface.DepositTicketID;
end;

procedure TCashReceiptJournalProperties.Set_DepositTicketID(const Param1: WideString);
begin
  DefaultInterface.Set_DepositTicketID(Param1);
end;

function TCashReceiptJournalProperties.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailCostOfSalesAccount[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailCostOfSalesAccount(Index: Smallint; 
                                                                     const Param2: WideString);
begin
  DefaultInterface.Set_DetailCostOfSalesAccount(Index,Param2);
end;

function TCashReceiptJournalProperties.Get_DetailCostOfSalesAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailCostOfSalesAmount[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailCostOfSalesAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailCostOfSalesAmount[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailCostOfSalesTrx[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailCostOfSalesTrx[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailCustomerIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCustomerIndex[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCustomerIndex[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailDateCleared(Index: Smallint): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DetailDateCleared[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailDateCleared(Index: Smallint; Param2: OleVariant);
begin
  DefaultInterface.DetailDateCleared[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailDescription(Index: Smallint; 
                                                              const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TCashReceiptJournalProperties.Get_DetailDiscountAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailDiscountAmount[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailDiscountAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailDiscountAmount[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailGLAccount(Index: Smallint; 
                                                            const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TCashReceiptJournalProperties.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TCashReceiptJournalProperties.Get_DetailInventoryAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInventoryAccount[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailInventoryAccount(Index: Smallint; 
                                                                   const Param2: WideString);
begin
  DefaultInterface.Set_DetailInventoryAccount(Index,Param2);
end;

function TCashReceiptJournalProperties.Get_DetailInvoiceNRecord(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailInvoiceNRecord[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailInvoiceNRecord[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailInvoicePaid(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInvoicePaid[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailInvoicePaid(Index: Smallint; 
                                                              const Param2: WideString);
begin
  DefaultInterface.Set_DetailInvoicePaid(Index,Param2);
end;

function TCashReceiptJournalProperties.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailSalesTaxAuthority(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailSalesTaxAuthority[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailSalesTaxAuthority(Index: Smallint; 
                                                                    const Param2: WideString);
begin
  DefaultInterface.Set_DetailSalesTaxAuthority(Index,Param2);
end;

function TCashReceiptJournalProperties.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailTaxType(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailTaxType[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailTaxType(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailTaxType[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailUnused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused1[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailUnused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused1[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DetailVendorIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailVendorIndex[Index];
end;

procedure TCashReceiptJournalProperties.Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailVendorIndex[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_DiscountAccount: WideString;
begin
    Result := DefaultInterface.DiscountAccount;
end;

procedure TCashReceiptJournalProperties.Set_DiscountAccount(const Param1: WideString);
begin
  DefaultInterface.Set_DiscountAccount(Param1);
end;

function TCashReceiptJournalProperties.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TCashReceiptJournalProperties.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TCashReceiptJournalProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TCashReceiptJournalProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TCashReceiptJournalProperties.Get_InvoicesPaid: Double;
begin
    Result := DefaultInterface.InvoicesPaid;
end;

procedure TCashReceiptJournalProperties.Set_InvoicesPaid(Param1: Double);
begin
  DefaultInterface.Set_InvoicesPaid(Param1);
end;

function TCashReceiptJournalProperties.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TCashReceiptJournalProperties.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TCashReceiptJournalProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TCashReceiptJournalProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TCashReceiptJournalProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TCashReceiptJournalProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TCashReceiptJournalProperties.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TCashReceiptJournalProperties.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TCashReceiptJournalProperties.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TCashReceiptJournalProperties.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TCashReceiptJournalProperties.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TCashReceiptJournalProperties.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TCashReceiptJournalProperties.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TCashReceiptJournalProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TCashReceiptJournalProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TCashReceiptJournalProperties.Get_PaymentMethod: WideString;
begin
    Result := DefaultInterface.PaymentMethod;
end;

procedure TCashReceiptJournalProperties.Set_PaymentMethod(const Param1: WideString);
begin
  DefaultInterface.Set_PaymentMethod(Param1);
end;

function TCashReceiptJournalProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TCashReceiptJournalProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TCashReceiptJournalProperties.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TCashReceiptJournalProperties.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TCashReceiptJournalProperties.Get_Prepayment: WordBool;
begin
    Result := DefaultInterface.Prepayment;
end;

procedure TCashReceiptJournalProperties.Set_Prepayment(Param1: WordBool);
begin
  DefaultInterface.Set_Prepayment(Param1);
end;

function TCashReceiptJournalProperties.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TCashReceiptJournalProperties.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TCashReceiptJournalProperties.Get_ReceiptNum: WideString;
begin
    Result := DefaultInterface.ReceiptNum;
end;

procedure TCashReceiptJournalProperties.Set_ReceiptNum(const Param1: WideString);
begin
  DefaultInterface.Set_ReceiptNum(Param1);
end;

function TCashReceiptJournalProperties.Get_RecurrenceIndex: Integer;
begin
    Result := DefaultInterface.RecurrenceIndex;
end;

procedure TCashReceiptJournalProperties.Set_RecurrenceIndex(Param1: Integer);
begin
  DefaultInterface.Set_RecurrenceIndex(Param1);
end;

function TCashReceiptJournalProperties.Get_RecurrenceRate: Smallint;
begin
    Result := DefaultInterface.RecurrenceRate;
end;

procedure TCashReceiptJournalProperties.Set_RecurrenceRate(Param1: Smallint);
begin
  DefaultInterface.Set_RecurrenceRate(Param1);
end;

function TCashReceiptJournalProperties.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TCashReceiptJournalProperties.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TCashReceiptJournalProperties.Get_SalesRepID: WideString;
begin
    Result := DefaultInterface.SalesRepID;
end;

procedure TCashReceiptJournalProperties.Set_SalesRepID(const Param1: WideString);
begin
  DefaultInterface.Set_SalesRepID(Param1);
end;

function TCashReceiptJournalProperties.Get_SalesTaxCode: WideString;
begin
    Result := DefaultInterface.SalesTaxCode;
end;

procedure TCashReceiptJournalProperties.Set_SalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_SalesTaxCode(Param1);
end;

function TCashReceiptJournalProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TCashReceiptJournalProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TCashReceiptJournalProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TCashReceiptJournalProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TCashReceiptJournalProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TCashReceiptJournalProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TCashReceiptJournalProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TCashReceiptJournalProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TCashReceiptJournalProperties.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TCashReceiptJournalProperties.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TCashReceiptJournalProperties.Get_Unused1: Byte;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TCashReceiptJournalProperties.Set_Unused1(Param1: Byte);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TCashReceiptJournalProperties.Get_Unknown2: Smallint;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TCashReceiptJournalProperties.Set_Unknown2(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TCashReceiptJournalProperties.Get_Unused3: Smallint;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TCashReceiptJournalProperties.Set_Unused3(Param1: Smallint);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TCashReceiptJournalProperties.Get_Unknown4: Smallint;
begin
    Result := DefaultInterface.Unknown4;
end;

procedure TCashReceiptJournalProperties.Set_Unknown4(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown4(Param1);
end;

function TCashReceiptJournalProperties.Get_Unused5: Byte;
begin
    Result := DefaultInterface.Unused5;
end;

procedure TCashReceiptJournalProperties.Set_Unused5(Param1: Byte);
begin
  DefaultInterface.Set_Unused5(Param1);
end;

function TCashReceiptJournalProperties.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TCashReceiptJournalProperties.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_Unused7(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused7[Index];
end;

procedure TCashReceiptJournalProperties.Set_Unused7(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused7[Index] := Param2;
end;

function TCashReceiptJournalProperties.Get_Unused8: Byte;
begin
    Result := DefaultInterface.Unused8;
end;

procedure TCashReceiptJournalProperties.Set_Unused8(Param1: Byte);
begin
  DefaultInterface.Set_Unused8(Param1);
end;

function TCashReceiptJournalProperties.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TCashReceiptJournalProperties.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

function TCashReceiptJournalProperties.Get_VendorReceipt: WordBool;
begin
    Result := DefaultInterface.VendorReceipt;
end;

procedure TCashReceiptJournalProperties.Set_VendorReceipt(Param1: WordBool);
begin
  DefaultInterface.Set_VendorReceipt(Param1);
end;

{$ENDIF}

class function CoGeneralJournal.Create: _GeneralJournal;
begin
  Result := CreateComObject(CLASS_GeneralJournal) as _GeneralJournal;
end;

class function CoGeneralJournal.CreateRemote(const MachineName: string): _GeneralJournal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GeneralJournal) as _GeneralJournal;
end;

procedure TGeneralJournal.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AA4BA1A4-F3B9-4613-8AFB-F33A9EAC230A}';
    IntfIID:   '{29E5BBAB-8F57-4DEB-890B-B6F5D805F941}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGeneralJournal.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _GeneralJournal;
  end;
end;

procedure TGeneralJournal.ConnectTo(svrIntf: _GeneralJournal);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGeneralJournal.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGeneralJournal.GetDefaultInterface: _GeneralJournal;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGeneralJournal.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGeneralJournalProperties.Create(Self);
{$ENDIF}
end;

destructor TGeneralJournal.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGeneralJournal.GetServerProperties: TGeneralJournalProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TGeneralJournal.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TGeneralJournal.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TGeneralJournal.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TGeneralJournal.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TGeneralJournal.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TGeneralJournal.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TGeneralJournal.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TGeneralJournal.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TGeneralJournal.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TGeneralJournal.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TGeneralJournal.Get_DetailDateCleared(Index: Smallint): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DetailDateCleared[Index];
end;

procedure TGeneralJournal.Set_DetailDateCleared(Index: Smallint; Param2: OleVariant);
begin
  DefaultInterface.DetailDateCleared[Index] := Param2;
end;

function TGeneralJournal.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TGeneralJournal.Set_DetailDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TGeneralJournal.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TGeneralJournal.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TGeneralJournal.Get_DetailFlag2(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag2[Index];
end;

procedure TGeneralJournal.Set_DetailFlag2(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag2[Index] := Param2;
end;

function TGeneralJournal.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TGeneralJournal.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TGeneralJournal.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TGeneralJournal.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TGeneralJournal.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TGeneralJournal.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TGeneralJournal.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TGeneralJournal.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TGeneralJournal.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TGeneralJournal.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TGeneralJournal.Get_DetailPosted(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailPosted[Index];
end;

procedure TGeneralJournal.Set_DetailPosted(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailPosted[Index] := Param2;
end;

function TGeneralJournal.Get_DetailReversed(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailReversed[Index];
end;

procedure TGeneralJournal.Set_DetailReversed(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailReversed[Index] := Param2;
end;

function TGeneralJournal.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TGeneralJournal.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TGeneralJournal.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TGeneralJournal.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TGeneralJournal.Get_HasPartner: WordBool;
begin
    Result := DefaultInterface.HasPartner;
end;

procedure TGeneralJournal.Set_HasPartner(Param1: WordBool);
begin
  DefaultInterface.Set_HasPartner(Param1);
end;

function TGeneralJournal.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TGeneralJournal.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TGeneralJournal.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TGeneralJournal.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TGeneralJournal.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TGeneralJournal.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TGeneralJournal.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TGeneralJournal.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TGeneralJournal.Get_MainAmount: Double;
begin
    Result := DefaultInterface.MainAmount;
end;

procedure TGeneralJournal.Set_MainAmount(Param1: Double);
begin
  DefaultInterface.Set_MainAmount(Param1);
end;

function TGeneralJournal.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TGeneralJournal.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TGeneralJournal.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TGeneralJournal.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TGeneralJournal.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TGeneralJournal.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TGeneralJournal.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TGeneralJournal.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TGeneralJournal.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TGeneralJournal.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TGeneralJournal.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TGeneralJournal.Get_PrimaryID: WideString;
begin
    Result := DefaultInterface.PrimaryID;
end;

procedure TGeneralJournal.Set_PrimaryID(const Param1: WideString);
begin
  DefaultInterface.Set_PrimaryID(Param1);
end;

function TGeneralJournal.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TGeneralJournal.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TGeneralJournal.Get_RecurrenceIndex: Integer;
begin
    Result := DefaultInterface.RecurrenceIndex;
end;

procedure TGeneralJournal.Set_RecurrenceIndex(Param1: Integer);
begin
  DefaultInterface.Set_RecurrenceIndex(Param1);
end;

function TGeneralJournal.Get_RecurrenceRate: Smallint;
begin
    Result := DefaultInterface.RecurrenceRate;
end;

procedure TGeneralJournal.Set_RecurrenceRate(Param1: Smallint);
begin
  DefaultInterface.Set_RecurrenceRate(Param1);
end;

function TGeneralJournal.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TGeneralJournal.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TGeneralJournal.Get_Reversed: WordBool;
begin
    Result := DefaultInterface.Reversed;
end;

procedure TGeneralJournal.Set_Reversed(Param1: WordBool);
begin
  DefaultInterface.Set_Reversed(Param1);
end;

function TGeneralJournal.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TGeneralJournal.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TGeneralJournal.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TGeneralJournal.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TGeneralJournal.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TGeneralJournal.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TGeneralJournal.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TGeneralJournal.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TGeneralJournal.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TGeneralJournal.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TGeneralJournal.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TGeneralJournal.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TGeneralJournal.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TGeneralJournal.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TGeneralJournal.Get_Unknown3: Smallint;
begin
    Result := DefaultInterface.Unknown3;
end;

procedure TGeneralJournal.Set_Unknown3(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown3(Param1);
end;

function TGeneralJournal.Get_Unused4: Smallint;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TGeneralJournal.Set_Unused4(Param1: Smallint);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TGeneralJournal.Get_Unknown5: Smallint;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TGeneralJournal.Set_Unknown5(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

function TGeneralJournal.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TGeneralJournal.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TGeneralJournal.Get_Unused7: Double;
begin
    Result := DefaultInterface.Unused7;
end;

procedure TGeneralJournal.Set_Unused7(Param1: Double);
begin
  DefaultInterface.Set_Unused7(Param1);
end;

function TGeneralJournal.ClearRecord: Smallint;
begin
  Result := DefaultInterface.ClearRecord;
end;

function TGeneralJournal.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TGeneralJournal.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TGeneralJournal.GetEqual(NRecord: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(NRecord);
end;

function TGeneralJournal.IncrementBatchCount: Smallint;
begin
  Result := DefaultInterface.IncrementBatchCount;
end;

function TGeneralJournal.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TGeneralJournal.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TGeneralJournal.ReadFirst(Period: Smallint): OleVariant;
begin
  Result := DefaultInterface.ReadFirst(Period);
end;

function TGeneralJournal.ReadNext: Smallint;
begin
  Result := DefaultInterface.ReadNext;
end;

function TGeneralJournal.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGeneralJournalProperties.Create(AServer: TGeneralJournal);
begin
  inherited Create;
  FServer := AServer;
end;

function TGeneralJournalProperties.GetDefaultInterface: _GeneralJournal;
begin
  Result := FServer.DefaultInterface;
end;

function TGeneralJournalProperties.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TGeneralJournalProperties.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TGeneralJournalProperties.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TGeneralJournalProperties.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TGeneralJournalProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TGeneralJournalProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TGeneralJournalProperties.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TGeneralJournalProperties.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TGeneralJournalProperties.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TGeneralJournalProperties.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TGeneralJournalProperties.Get_DetailDateCleared(Index: Smallint): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DetailDateCleared[Index];
end;

procedure TGeneralJournalProperties.Set_DetailDateCleared(Index: Smallint; Param2: OleVariant);
begin
  DefaultInterface.DetailDateCleared[Index] := Param2;
end;

function TGeneralJournalProperties.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TGeneralJournalProperties.Set_DetailDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TGeneralJournalProperties.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TGeneralJournalProperties.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TGeneralJournalProperties.Get_DetailFlag2(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag2[Index];
end;

procedure TGeneralJournalProperties.Set_DetailFlag2(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag2[Index] := Param2;
end;

function TGeneralJournalProperties.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TGeneralJournalProperties.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TGeneralJournalProperties.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TGeneralJournalProperties.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TGeneralJournalProperties.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TGeneralJournalProperties.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TGeneralJournalProperties.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TGeneralJournalProperties.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TGeneralJournalProperties.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TGeneralJournalProperties.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TGeneralJournalProperties.Get_DetailPosted(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailPosted[Index];
end;

procedure TGeneralJournalProperties.Set_DetailPosted(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailPosted[Index] := Param2;
end;

function TGeneralJournalProperties.Get_DetailReversed(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailReversed[Index];
end;

procedure TGeneralJournalProperties.Set_DetailReversed(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailReversed[Index] := Param2;
end;

function TGeneralJournalProperties.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TGeneralJournalProperties.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TGeneralJournalProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TGeneralJournalProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TGeneralJournalProperties.Get_HasPartner: WordBool;
begin
    Result := DefaultInterface.HasPartner;
end;

procedure TGeneralJournalProperties.Set_HasPartner(Param1: WordBool);
begin
  DefaultInterface.Set_HasPartner(Param1);
end;

function TGeneralJournalProperties.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TGeneralJournalProperties.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TGeneralJournalProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TGeneralJournalProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TGeneralJournalProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TGeneralJournalProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TGeneralJournalProperties.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TGeneralJournalProperties.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TGeneralJournalProperties.Get_MainAmount: Double;
begin
    Result := DefaultInterface.MainAmount;
end;

procedure TGeneralJournalProperties.Set_MainAmount(Param1: Double);
begin
  DefaultInterface.Set_MainAmount(Param1);
end;

function TGeneralJournalProperties.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TGeneralJournalProperties.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TGeneralJournalProperties.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TGeneralJournalProperties.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TGeneralJournalProperties.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TGeneralJournalProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TGeneralJournalProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TGeneralJournalProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TGeneralJournalProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TGeneralJournalProperties.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TGeneralJournalProperties.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TGeneralJournalProperties.Get_PrimaryID: WideString;
begin
    Result := DefaultInterface.PrimaryID;
end;

procedure TGeneralJournalProperties.Set_PrimaryID(const Param1: WideString);
begin
  DefaultInterface.Set_PrimaryID(Param1);
end;

function TGeneralJournalProperties.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TGeneralJournalProperties.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TGeneralJournalProperties.Get_RecurrenceIndex: Integer;
begin
    Result := DefaultInterface.RecurrenceIndex;
end;

procedure TGeneralJournalProperties.Set_RecurrenceIndex(Param1: Integer);
begin
  DefaultInterface.Set_RecurrenceIndex(Param1);
end;

function TGeneralJournalProperties.Get_RecurrenceRate: Smallint;
begin
    Result := DefaultInterface.RecurrenceRate;
end;

procedure TGeneralJournalProperties.Set_RecurrenceRate(Param1: Smallint);
begin
  DefaultInterface.Set_RecurrenceRate(Param1);
end;

function TGeneralJournalProperties.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TGeneralJournalProperties.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TGeneralJournalProperties.Get_Reversed: WordBool;
begin
    Result := DefaultInterface.Reversed;
end;

procedure TGeneralJournalProperties.Set_Reversed(Param1: WordBool);
begin
  DefaultInterface.Set_Reversed(Param1);
end;

function TGeneralJournalProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TGeneralJournalProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TGeneralJournalProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TGeneralJournalProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TGeneralJournalProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TGeneralJournalProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TGeneralJournalProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TGeneralJournalProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TGeneralJournalProperties.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TGeneralJournalProperties.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TGeneralJournalProperties.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TGeneralJournalProperties.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TGeneralJournalProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TGeneralJournalProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TGeneralJournalProperties.Get_Unknown3: Smallint;
begin
    Result := DefaultInterface.Unknown3;
end;

procedure TGeneralJournalProperties.Set_Unknown3(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown3(Param1);
end;

function TGeneralJournalProperties.Get_Unused4: Smallint;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TGeneralJournalProperties.Set_Unused4(Param1: Smallint);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TGeneralJournalProperties.Get_Unknown5: Smallint;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TGeneralJournalProperties.Set_Unknown5(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

function TGeneralJournalProperties.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TGeneralJournalProperties.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TGeneralJournalProperties.Get_Unused7: Double;
begin
    Result := DefaultInterface.Unused7;
end;

procedure TGeneralJournalProperties.Set_Unused7(Param1: Double);
begin
  DefaultInterface.Set_Unused7(Param1);
end;

{$ENDIF}

class function CoInventoryAdjustmentJournal.Create: _InventoryAdjustmentJournal;
begin
  Result := CreateComObject(CLASS_InventoryAdjustmentJournal) as _InventoryAdjustmentJournal;
end;

class function CoInventoryAdjustmentJournal.CreateRemote(const MachineName: string): _InventoryAdjustmentJournal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InventoryAdjustmentJournal) as _InventoryAdjustmentJournal;
end;

procedure TInventoryAdjustmentJournal.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0E1A7194-6BD5-4068-9505-8F5D51E12B28}';
    IntfIID:   '{B57FFDF8-947B-4662-B996-65FDC8FA87E1}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TInventoryAdjustmentJournal.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _InventoryAdjustmentJournal;
  end;
end;

procedure TInventoryAdjustmentJournal.ConnectTo(svrIntf: _InventoryAdjustmentJournal);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TInventoryAdjustmentJournal.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TInventoryAdjustmentJournal.GetDefaultInterface: _InventoryAdjustmentJournal;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TInventoryAdjustmentJournal.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TInventoryAdjustmentJournalProperties.Create(Self);
{$ENDIF}
end;

destructor TInventoryAdjustmentJournal.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TInventoryAdjustmentJournal.GetServerProperties: TInventoryAdjustmentJournalProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TInventoryAdjustmentJournal.Get_AmountAdjusted: Double;
begin
    Result := DefaultInterface.AmountAdjusted;
end;

procedure TInventoryAdjustmentJournal.Set_AmountAdjusted(Param1: Double);
begin
  DefaultInterface.Set_AmountAdjusted(Param1);
end;

function TInventoryAdjustmentJournal.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TInventoryAdjustmentJournal.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TInventoryAdjustmentJournal.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TInventoryAdjustmentJournal.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TInventoryAdjustmentJournal.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailCostOfSalesTrx[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailCostOfSalesTrx[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TInventoryAdjustmentJournal.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TInventoryAdjustmentJournal.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_DetailReasonToAdjust(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailReasonToAdjust[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailReasonToAdjust(Index: Smallint; 
                                                               const Param2: WideString);
begin
  DefaultInterface.Set_DetailReasonToAdjust(Index,Param2);
end;

function TInventoryAdjustmentJournal.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_DetailUnitCost(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitCost[Index];
end;

procedure TInventoryAdjustmentJournal.Set_DetailUnitCost(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitCost[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_DetailUnused7(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused7[Index1, Index2];
end;

procedure TInventoryAdjustmentJournal.Set_DetailUnused7(Index1: Smallint; Index2: Smallint; 
                                                        Param3: Byte);
begin
  DefaultInterface.DetailUnused7[Index1, Index2] := Param3;
end;

function TInventoryAdjustmentJournal.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TInventoryAdjustmentJournal.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TInventoryAdjustmentJournal.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TInventoryAdjustmentJournal.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TInventoryAdjustmentJournal.Get_InventoryAccount: WideString;
begin
    Result := DefaultInterface.InventoryAccount;
end;

procedure TInventoryAdjustmentJournal.Set_InventoryAccount(const Param1: WideString);
begin
  DefaultInterface.Set_InventoryAccount(Param1);
end;

function TInventoryAdjustmentJournal.Get_ItemIndex: Integer;
begin
    Result := DefaultInterface.ItemIndex;
end;

procedure TInventoryAdjustmentJournal.Set_ItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_ItemIndex(Param1);
end;

function TInventoryAdjustmentJournal.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TInventoryAdjustmentJournal.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TInventoryAdjustmentJournal.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TInventoryAdjustmentJournal.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TInventoryAdjustmentJournal.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TInventoryAdjustmentJournal.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TInventoryAdjustmentJournal.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TInventoryAdjustmentJournal.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TInventoryAdjustmentJournal.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TInventoryAdjustmentJournal.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TInventoryAdjustmentJournal.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TInventoryAdjustmentJournal.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TInventoryAdjustmentJournal.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TInventoryAdjustmentJournal.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TInventoryAdjustmentJournal.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TInventoryAdjustmentJournal.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TInventoryAdjustmentJournal.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TInventoryAdjustmentJournal.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TInventoryAdjustmentJournal.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TInventoryAdjustmentJournal.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TInventoryAdjustmentJournal.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TInventoryAdjustmentJournal.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TInventoryAdjustmentJournal.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TInventoryAdjustmentJournal.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TInventoryAdjustmentJournal.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TInventoryAdjustmentJournal.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TInventoryAdjustmentJournal.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TInventoryAdjustmentJournal.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TInventoryAdjustmentJournal.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TInventoryAdjustmentJournal.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TInventoryAdjustmentJournal.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TInventoryAdjustmentJournal.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TInventoryAdjustmentJournal.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TInventoryAdjustmentJournal.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TInventoryAdjustmentJournal.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TInventoryAdjustmentJournal.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TInventoryAdjustmentJournal.Get_Unknown3: Smallint;
begin
    Result := DefaultInterface.Unknown3;
end;

procedure TInventoryAdjustmentJournal.Set_Unknown3(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown3(Param1);
end;

function TInventoryAdjustmentJournal.Get_Unused4: Smallint;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TInventoryAdjustmentJournal.Set_Unused4(Param1: Smallint);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TInventoryAdjustmentJournal.Get_Unknown5: Smallint;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TInventoryAdjustmentJournal.Set_Unknown5(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

function TInventoryAdjustmentJournal.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TInventoryAdjustmentJournal.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TInventoryAdjustmentJournal.ClearRecord: Smallint;
begin
  Result := DefaultInterface.ClearRecord;
end;

function TInventoryAdjustmentJournal.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TInventoryAdjustmentJournal.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TInventoryAdjustmentJournal.GetEqual(NRecord: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(NRecord);
end;

function TInventoryAdjustmentJournal.IncrementBatchCount: Smallint;
begin
  Result := DefaultInterface.IncrementBatchCount;
end;

function TInventoryAdjustmentJournal.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TInventoryAdjustmentJournal.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TInventoryAdjustmentJournal.ReadFirst(Period: Smallint): Smallint;
begin
  Result := DefaultInterface.ReadFirst(Period);
end;

function TInventoryAdjustmentJournal.ReadNext: Smallint;
begin
  Result := DefaultInterface.ReadNext;
end;

function TInventoryAdjustmentJournal.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TInventoryAdjustmentJournalProperties.Create(AServer: TInventoryAdjustmentJournal);
begin
  inherited Create;
  FServer := AServer;
end;

function TInventoryAdjustmentJournalProperties.GetDefaultInterface: _InventoryAdjustmentJournal;
begin
  Result := FServer.DefaultInterface;
end;

function TInventoryAdjustmentJournalProperties.Get_AmountAdjusted: Double;
begin
    Result := DefaultInterface.AmountAdjusted;
end;

procedure TInventoryAdjustmentJournalProperties.Set_AmountAdjusted(Param1: Double);
begin
  DefaultInterface.Set_AmountAdjusted(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TInventoryAdjustmentJournalProperties.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TInventoryAdjustmentJournalProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailCostOfSalesTrx[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailCostOfSalesTrx(Index: Smallint; 
                                                                         Param2: WordBool);
begin
  DefaultInterface.DetailCostOfSalesTrx[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailGLAccount(Index: Smallint; 
                                                                    const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TInventoryAdjustmentJournalProperties.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailGUID(Index: Smallint; 
                                                               const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TInventoryAdjustmentJournalProperties.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailPhaseIndex(Index: Smallint; 
                                                                     Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_DetailReasonToAdjust(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailReasonToAdjust[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailReasonToAdjust(Index: Smallint; 
                                                                         const Param2: WideString);
begin
  DefaultInterface.Set_DetailReasonToAdjust(Index,Param2);
end;

function TInventoryAdjustmentJournalProperties.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailStockingQuantity(Index: Smallint; 
                                                                           Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailStockingUnitPrice(Index: Smallint; 
                                                                            Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_DetailUnitCost(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitCost[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailUnitCost(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitCost[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_DetailUnused7(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused7[Index1, Index2];
end;

procedure TInventoryAdjustmentJournalProperties.Set_DetailUnused7(Index1: Smallint; 
                                                                  Index2: Smallint; Param3: Byte);
begin
  DefaultInterface.DetailUnused7[Index1, Index2] := Param3;
end;

function TInventoryAdjustmentJournalProperties.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TInventoryAdjustmentJournalProperties.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TInventoryAdjustmentJournalProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_InventoryAccount: WideString;
begin
    Result := DefaultInterface.InventoryAccount;
end;

procedure TInventoryAdjustmentJournalProperties.Set_InventoryAccount(const Param1: WideString);
begin
  DefaultInterface.Set_InventoryAccount(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_ItemIndex: Integer;
begin
    Result := DefaultInterface.ItemIndex;
end;

procedure TInventoryAdjustmentJournalProperties.Set_ItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_ItemIndex(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TInventoryAdjustmentJournalProperties.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TInventoryAdjustmentJournalProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TInventoryAdjustmentJournalProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TInventoryAdjustmentJournalProperties.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TInventoryAdjustmentJournalProperties.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TInventoryAdjustmentJournalProperties.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TInventoryAdjustmentJournalProperties.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TInventoryAdjustmentJournalProperties.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TInventoryAdjustmentJournalProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TInventoryAdjustmentJournalProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TInventoryAdjustmentJournalProperties.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TInventoryAdjustmentJournalProperties.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TInventoryAdjustmentJournalProperties.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TInventoryAdjustmentJournalProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TInventoryAdjustmentJournalProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TInventoryAdjustmentJournalProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TInventoryAdjustmentJournalProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TInventoryAdjustmentJournalProperties.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TInventoryAdjustmentJournalProperties.Get_Unknown3: Smallint;
begin
    Result := DefaultInterface.Unknown3;
end;

procedure TInventoryAdjustmentJournalProperties.Set_Unknown3(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown3(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_Unused4: Smallint;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TInventoryAdjustmentJournalProperties.Set_Unused4(Param1: Smallint);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_Unknown5: Smallint;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TInventoryAdjustmentJournalProperties.Set_Unknown5(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

function TInventoryAdjustmentJournalProperties.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TInventoryAdjustmentJournalProperties.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

{$ENDIF}

class function CoPayrollJournal.Create: _PayrollJournal;
begin
  Result := CreateComObject(CLASS_PayrollJournal) as _PayrollJournal;
end;

class function CoPayrollJournal.CreateRemote(const MachineName: string): _PayrollJournal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PayrollJournal) as _PayrollJournal;
end;

procedure TPayrollJournal.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FEABC47D-91AE-4084-BBBF-F53D92DB21E3}';
    IntfIID:   '{296F1A27-28AB-4511-B98A-C31D38E6CADE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPayrollJournal.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _PayrollJournal;
  end;
end;

procedure TPayrollJournal.ConnectTo(svrIntf: _PayrollJournal);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPayrollJournal.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPayrollJournal.GetDefaultInterface: _PayrollJournal;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TPayrollJournal.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TPayrollJournalProperties.Create(Self);
{$ENDIF}
end;

destructor TPayrollJournal.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TPayrollJournal.GetServerProperties: TPayrollJournalProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TPayrollJournal.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TPayrollJournal.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TPayrollJournal.Get_CashAccount: WideString;
begin
    Result := DefaultInterface.CashAccount;
end;

procedure TPayrollJournal.Set_CashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_CashAccount(Param1);
end;

function TPayrollJournal.Get_CashAmount: Double;
begin
    Result := DefaultInterface.CashAmount;
end;

procedure TPayrollJournal.Set_CashAmount(Param1: Double);
begin
  DefaultInterface.Set_CashAmount(Param1);
end;

function TPayrollJournal.Get_CheckNumber: WideString;
begin
    Result := DefaultInterface.CheckNumber;
end;

procedure TPayrollJournal.Set_CheckNumber(const Param1: WideString);
begin
  DefaultInterface.Set_CheckNumber(Param1);
end;

function TPayrollJournal.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TPayrollJournal.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TPayrollJournal.Get_EmployeeID: WideString;
begin
    Result := DefaultInterface.EmployeeID;
end;

procedure TPayrollJournal.Set_EmployeeID(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeID(Param1);
end;

function TPayrollJournal.Get_EmployeeName: WideString;
begin
    Result := DefaultInterface.EmployeeName;
end;

procedure TPayrollJournal.Set_EmployeeName(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeName(Param1);
end;

function TPayrollJournal.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TPayrollJournal.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TPayrollJournal.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TPayrollJournal.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TPayrollJournal.Get_HoursSalaryAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.HoursSalaryAmount[Index];
end;

procedure TPayrollJournal.Set_HoursSalaryAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.HoursSalaryAmount[Index] := Param2;
end;

function TPayrollJournal.Get_JobAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.JobAccount[Index];
end;

procedure TPayrollJournal.Set_JobAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_JobAccount(Index,Param2);
end;

function TPayrollJournal.Get_JobAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.JobAmount[Index];
end;

procedure TPayrollJournal.Set_JobAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.JobAmount[Index] := Param2;
end;

function TPayrollJournal.Get_JobCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.JobCostIndex[Index];
end;

procedure TPayrollJournal.Set_JobCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.JobCostIndex[Index] := Param2;
end;

function TPayrollJournal.Get_JobEmployeeID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.JobEmployeeID[Index];
end;

procedure TPayrollJournal.Set_JobEmployeeID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_JobEmployeeID(Index,Param2);
end;

function TPayrollJournal.Get_JobFieldNumber(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.JobFieldNumber[Index];
end;

procedure TPayrollJournal.Set_JobFieldNumber(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.JobFieldNumber[Index] := Param2;
end;

function TPayrollJournal.Get_JobFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.JobFlag1[Index];
end;

procedure TPayrollJournal.Set_JobFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.JobFlag1[Index] := Param2;
end;

function TPayrollJournal.Get_JobGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.JobGUID[Index];
end;

procedure TPayrollJournal.Set_JobGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_JobGUID(Index,Param2);
end;

function TPayrollJournal.Get_JobFlag2(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.JobFlag2[Index];
end;

procedure TPayrollJournal.Set_JobFlag2(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.JobFlag2[Index] := Param2;
end;

function TPayrollJournal.Get_JobHours(Index: Smallint): Double;
begin
    Result := DefaultInterface.JobHours[Index];
end;

procedure TPayrollJournal.Set_JobHours(Index: Smallint; Param2: Double);
begin
  DefaultInterface.JobHours[Index] := Param2;
end;

function TPayrollJournal.Get_JobJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.JobJobIndex[Index];
end;

procedure TPayrollJournal.Set_JobJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.JobJobIndex[Index] := Param2;
end;

function TPayrollJournal.Get_JobLevel(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.JobLevel[Index];
end;

procedure TPayrollJournal.Set_JobLevel(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.JobLevel[Index] := Param2;
end;

function TPayrollJournal.Get_JobLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.JobLineNo[Index];
end;

procedure TPayrollJournal.Set_JobLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.JobLineNo[Index] := Param2;
end;

function TPayrollJournal.Get_JobPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.JobPhaseIndex[Index];
end;

procedure TPayrollJournal.Set_JobPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.JobPhaseIndex[Index] := Param2;
end;

function TPayrollJournal.Get_JobTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.JobTrxType[Index];
end;

procedure TPayrollJournal.Set_JobTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.JobTrxType[Index] := Param2;
end;

function TPayrollJournal.Get_JobUnknown(Index: Smallint): Byte;
begin
    Result := DefaultInterface.JobUnknown[Index];
end;

procedure TPayrollJournal.Set_JobUnknown(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.JobUnknown[Index] := Param2;
end;

function TPayrollJournal.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TPayrollJournal.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TPayrollJournal.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TPayrollJournal.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TPayrollJournal.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TPayrollJournal.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TPayrollJournal.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TPayrollJournal.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TPayrollJournal.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TPayrollJournal.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TPayrollJournal.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TPayrollJournal.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TPayrollJournal.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TPayrollJournal.Get_NLaborDistributions: Smallint;
begin
    Result := DefaultInterface.NLaborDistributions;
end;

procedure TPayrollJournal.Set_NLaborDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NLaborDistributions(Param1);
end;

function TPayrollJournal.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TPayrollJournal.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TPayrollJournal.Get_PayAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PayAccount[Index];
end;

procedure TPayrollJournal.Set_PayAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PayAccount(Index,Param2);
end;

function TPayrollJournal.Get_PayAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.PayAmount[Index];
end;

procedure TPayrollJournal.Set_PayAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PayAmount[Index] := Param2;
end;

function TPayrollJournal.Get_PayDateCleared(Index: Smallint): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PayDateCleared[Index];
end;

procedure TPayrollJournal.Set_PayDateCleared(Index: Smallint; Param2: OleVariant);
begin
  DefaultInterface.PayDateCleared[Index] := Param2;
end;

function TPayrollJournal.Get_PayDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PayDescription[Index];
end;

procedure TPayrollJournal.Set_PayDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PayDescription(Index,Param2);
end;

function TPayrollJournal.Get_PayEmployeeID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PayEmployeeID[Index];
end;

procedure TPayrollJournal.Set_PayEmployeeID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PayEmployeeID(Index,Param2);
end;

function TPayrollJournal.Get_PayFieldNumber(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PayFieldNumber[Index];
end;

procedure TPayrollJournal.Set_PayFieldNumber(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PayFieldNumber[Index] := Param2;
end;

function TPayrollJournal.Get_PayFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.PayFlag1[Index];
end;

procedure TPayrollJournal.Set_PayFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.PayFlag1[Index] := Param2;
end;

function TPayrollJournal.Get_PayFlag2(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.PayFlag2[Index];
end;

procedure TPayrollJournal.Set_PayFlag2(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.PayFlag2[Index] := Param2;
end;

function TPayrollJournal.Get_PayGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PayGUID[Index];
end;

procedure TPayrollJournal.Set_PayGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PayGUID(Index,Param2);
end;

function TPayrollJournal.Get_PayLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PayLineNo[Index];
end;

procedure TPayrollJournal.Set_PayLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PayLineNo[Index] := Param2;
end;

function TPayrollJournal.Get_PayMemoAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.PayMemoAmount[Index];
end;

procedure TPayrollJournal.Set_PayMemoAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PayMemoAmount[Index] := Param2;
end;

function TPayrollJournal.Get_PayNField(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PayNField[Index];
end;

procedure TPayrollJournal.Set_PayNField(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PayNField[Index] := Param2;
end;

function TPayrollJournal.Get_PayPeriodEnd: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PayPeriodEnd;
end;

procedure TPayrollJournal.Set_PayPeriodEnd(Param1: OleVariant);
begin
  DefaultInterface.Set_PayPeriodEnd(Param1);
end;

function TPayrollJournal.Get_PayQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.PayQuantity[Index];
end;

procedure TPayrollJournal.Set_PayQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PayQuantity[Index] := Param2;
end;

function TPayrollJournal.Get_PayTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.PayTrxType[Index];
end;

procedure TPayrollJournal.Set_PayTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.PayTrxType[Index] := Param2;
end;

function TPayrollJournal.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TPayrollJournal.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TPayrollJournal.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TPayrollJournal.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TPayrollJournal.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TPayrollJournal.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TPayrollJournal.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TPayrollJournal.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TPayrollJournal.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TPayrollJournal.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TPayrollJournal.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TPayrollJournal.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TPayrollJournal.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TPayrollJournal.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TPayrollJournal.Get_TrxIsReadOnly: Smallint;
begin
    Result := DefaultInterface.TrxIsReadOnly;
end;

procedure TPayrollJournal.Set_TrxIsReadOnly(Param1: Smallint);
begin
  DefaultInterface.Set_TrxIsReadOnly(Param1);
end;

function TPayrollJournal.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TPayrollJournal.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TPayrollJournal.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TPayrollJournal.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TPayrollJournal.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TPayrollJournal.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TPayrollJournal.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TPayrollJournal.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TPayrollJournal.Get_Unused3: Double;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TPayrollJournal.Set_Unused3(Param1: Double);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TPayrollJournal.Get_WeeksInPayPeriod: Smallint;
begin
    Result := DefaultInterface.WeeksInPayPeriod;
end;

procedure TPayrollJournal.Set_WeeksInPayPeriod(Param1: Smallint);
begin
  DefaultInterface.Set_WeeksInPayPeriod(Param1);
end;

function TPayrollJournal.ClearRecord: Smallint;
begin
  Result := DefaultInterface.ClearRecord;
end;

function TPayrollJournal.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TPayrollJournal.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TPayrollJournal.GetEqual(NRecord: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(NRecord);
end;

function TPayrollJournal.IncrementBatchCount: Smallint;
begin
  Result := DefaultInterface.IncrementBatchCount;
end;

function TPayrollJournal.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TPayrollJournal.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TPayrollJournal.ReadFirst(Period: Smallint): Smallint;
begin
  Result := DefaultInterface.ReadFirst(Period);
end;

function TPayrollJournal.ReadNext: Smallint;
begin
  Result := DefaultInterface.ReadNext;
end;

function TPayrollJournal.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TPayrollJournalProperties.Create(AServer: TPayrollJournal);
begin
  inherited Create;
  FServer := AServer;
end;

function TPayrollJournalProperties.GetDefaultInterface: _PayrollJournal;
begin
  Result := FServer.DefaultInterface;
end;

function TPayrollJournalProperties.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TPayrollJournalProperties.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TPayrollJournalProperties.Get_CashAccount: WideString;
begin
    Result := DefaultInterface.CashAccount;
end;

procedure TPayrollJournalProperties.Set_CashAccount(const Param1: WideString);
begin
  DefaultInterface.Set_CashAccount(Param1);
end;

function TPayrollJournalProperties.Get_CashAmount: Double;
begin
    Result := DefaultInterface.CashAmount;
end;

procedure TPayrollJournalProperties.Set_CashAmount(Param1: Double);
begin
  DefaultInterface.Set_CashAmount(Param1);
end;

function TPayrollJournalProperties.Get_CheckNumber: WideString;
begin
    Result := DefaultInterface.CheckNumber;
end;

procedure TPayrollJournalProperties.Set_CheckNumber(const Param1: WideString);
begin
  DefaultInterface.Set_CheckNumber(Param1);
end;

function TPayrollJournalProperties.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TPayrollJournalProperties.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TPayrollJournalProperties.Get_EmployeeID: WideString;
begin
    Result := DefaultInterface.EmployeeID;
end;

procedure TPayrollJournalProperties.Set_EmployeeID(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeID(Param1);
end;

function TPayrollJournalProperties.Get_EmployeeName: WideString;
begin
    Result := DefaultInterface.EmployeeName;
end;

procedure TPayrollJournalProperties.Set_EmployeeName(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeName(Param1);
end;

function TPayrollJournalProperties.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TPayrollJournalProperties.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TPayrollJournalProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TPayrollJournalProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TPayrollJournalProperties.Get_HoursSalaryAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.HoursSalaryAmount[Index];
end;

procedure TPayrollJournalProperties.Set_HoursSalaryAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.HoursSalaryAmount[Index] := Param2;
end;

function TPayrollJournalProperties.Get_JobAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.JobAccount[Index];
end;

procedure TPayrollJournalProperties.Set_JobAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_JobAccount(Index,Param2);
end;

function TPayrollJournalProperties.Get_JobAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.JobAmount[Index];
end;

procedure TPayrollJournalProperties.Set_JobAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.JobAmount[Index] := Param2;
end;

function TPayrollJournalProperties.Get_JobCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.JobCostIndex[Index];
end;

procedure TPayrollJournalProperties.Set_JobCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.JobCostIndex[Index] := Param2;
end;

function TPayrollJournalProperties.Get_JobEmployeeID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.JobEmployeeID[Index];
end;

procedure TPayrollJournalProperties.Set_JobEmployeeID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_JobEmployeeID(Index,Param2);
end;

function TPayrollJournalProperties.Get_JobFieldNumber(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.JobFieldNumber[Index];
end;

procedure TPayrollJournalProperties.Set_JobFieldNumber(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.JobFieldNumber[Index] := Param2;
end;

function TPayrollJournalProperties.Get_JobFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.JobFlag1[Index];
end;

procedure TPayrollJournalProperties.Set_JobFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.JobFlag1[Index] := Param2;
end;

function TPayrollJournalProperties.Get_JobGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.JobGUID[Index];
end;

procedure TPayrollJournalProperties.Set_JobGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_JobGUID(Index,Param2);
end;

function TPayrollJournalProperties.Get_JobFlag2(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.JobFlag2[Index];
end;

procedure TPayrollJournalProperties.Set_JobFlag2(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.JobFlag2[Index] := Param2;
end;

function TPayrollJournalProperties.Get_JobHours(Index: Smallint): Double;
begin
    Result := DefaultInterface.JobHours[Index];
end;

procedure TPayrollJournalProperties.Set_JobHours(Index: Smallint; Param2: Double);
begin
  DefaultInterface.JobHours[Index] := Param2;
end;

function TPayrollJournalProperties.Get_JobJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.JobJobIndex[Index];
end;

procedure TPayrollJournalProperties.Set_JobJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.JobJobIndex[Index] := Param2;
end;

function TPayrollJournalProperties.Get_JobLevel(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.JobLevel[Index];
end;

procedure TPayrollJournalProperties.Set_JobLevel(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.JobLevel[Index] := Param2;
end;

function TPayrollJournalProperties.Get_JobLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.JobLineNo[Index];
end;

procedure TPayrollJournalProperties.Set_JobLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.JobLineNo[Index] := Param2;
end;

function TPayrollJournalProperties.Get_JobPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.JobPhaseIndex[Index];
end;

procedure TPayrollJournalProperties.Set_JobPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.JobPhaseIndex[Index] := Param2;
end;

function TPayrollJournalProperties.Get_JobTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.JobTrxType[Index];
end;

procedure TPayrollJournalProperties.Set_JobTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.JobTrxType[Index] := Param2;
end;

function TPayrollJournalProperties.Get_JobUnknown(Index: Smallint): Byte;
begin
    Result := DefaultInterface.JobUnknown[Index];
end;

procedure TPayrollJournalProperties.Set_JobUnknown(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.JobUnknown[Index] := Param2;
end;

function TPayrollJournalProperties.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TPayrollJournalProperties.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TPayrollJournalProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TPayrollJournalProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TPayrollJournalProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TPayrollJournalProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TPayrollJournalProperties.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TPayrollJournalProperties.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TPayrollJournalProperties.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TPayrollJournalProperties.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TPayrollJournalProperties.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TPayrollJournalProperties.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TPayrollJournalProperties.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TPayrollJournalProperties.Get_NLaborDistributions: Smallint;
begin
    Result := DefaultInterface.NLaborDistributions;
end;

procedure TPayrollJournalProperties.Set_NLaborDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NLaborDistributions(Param1);
end;

function TPayrollJournalProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TPayrollJournalProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TPayrollJournalProperties.Get_PayAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PayAccount[Index];
end;

procedure TPayrollJournalProperties.Set_PayAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PayAccount(Index,Param2);
end;

function TPayrollJournalProperties.Get_PayAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.PayAmount[Index];
end;

procedure TPayrollJournalProperties.Set_PayAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PayAmount[Index] := Param2;
end;

function TPayrollJournalProperties.Get_PayDateCleared(Index: Smallint): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PayDateCleared[Index];
end;

procedure TPayrollJournalProperties.Set_PayDateCleared(Index: Smallint; Param2: OleVariant);
begin
  DefaultInterface.PayDateCleared[Index] := Param2;
end;

function TPayrollJournalProperties.Get_PayDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PayDescription[Index];
end;

procedure TPayrollJournalProperties.Set_PayDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PayDescription(Index,Param2);
end;

function TPayrollJournalProperties.Get_PayEmployeeID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PayEmployeeID[Index];
end;

procedure TPayrollJournalProperties.Set_PayEmployeeID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PayEmployeeID(Index,Param2);
end;

function TPayrollJournalProperties.Get_PayFieldNumber(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PayFieldNumber[Index];
end;

procedure TPayrollJournalProperties.Set_PayFieldNumber(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PayFieldNumber[Index] := Param2;
end;

function TPayrollJournalProperties.Get_PayFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.PayFlag1[Index];
end;

procedure TPayrollJournalProperties.Set_PayFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.PayFlag1[Index] := Param2;
end;

function TPayrollJournalProperties.Get_PayFlag2(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.PayFlag2[Index];
end;

procedure TPayrollJournalProperties.Set_PayFlag2(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.PayFlag2[Index] := Param2;
end;

function TPayrollJournalProperties.Get_PayGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.PayGUID[Index];
end;

procedure TPayrollJournalProperties.Set_PayGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_PayGUID(Index,Param2);
end;

function TPayrollJournalProperties.Get_PayLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PayLineNo[Index];
end;

procedure TPayrollJournalProperties.Set_PayLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PayLineNo[Index] := Param2;
end;

function TPayrollJournalProperties.Get_PayMemoAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.PayMemoAmount[Index];
end;

procedure TPayrollJournalProperties.Set_PayMemoAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PayMemoAmount[Index] := Param2;
end;

function TPayrollJournalProperties.Get_PayNField(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.PayNField[Index];
end;

procedure TPayrollJournalProperties.Set_PayNField(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.PayNField[Index] := Param2;
end;

function TPayrollJournalProperties.Get_PayPeriodEnd: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PayPeriodEnd;
end;

procedure TPayrollJournalProperties.Set_PayPeriodEnd(Param1: OleVariant);
begin
  DefaultInterface.Set_PayPeriodEnd(Param1);
end;

function TPayrollJournalProperties.Get_PayQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.PayQuantity[Index];
end;

procedure TPayrollJournalProperties.Set_PayQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PayQuantity[Index] := Param2;
end;

function TPayrollJournalProperties.Get_PayTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.PayTrxType[Index];
end;

procedure TPayrollJournalProperties.Set_PayTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.PayTrxType[Index] := Param2;
end;

function TPayrollJournalProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TPayrollJournalProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TPayrollJournalProperties.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TPayrollJournalProperties.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TPayrollJournalProperties.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TPayrollJournalProperties.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TPayrollJournalProperties.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TPayrollJournalProperties.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TPayrollJournalProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TPayrollJournalProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TPayrollJournalProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TPayrollJournalProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TPayrollJournalProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TPayrollJournalProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TPayrollJournalProperties.Get_TrxIsReadOnly: Smallint;
begin
    Result := DefaultInterface.TrxIsReadOnly;
end;

procedure TPayrollJournalProperties.Set_TrxIsReadOnly(Param1: Smallint);
begin
  DefaultInterface.Set_TrxIsReadOnly(Param1);
end;

function TPayrollJournalProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TPayrollJournalProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TPayrollJournalProperties.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TPayrollJournalProperties.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TPayrollJournalProperties.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TPayrollJournalProperties.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TPayrollJournalProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TPayrollJournalProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TPayrollJournalProperties.Get_Unused3: Double;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TPayrollJournalProperties.Set_Unused3(Param1: Double);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TPayrollJournalProperties.Get_WeeksInPayPeriod: Smallint;
begin
    Result := DefaultInterface.WeeksInPayPeriod;
end;

procedure TPayrollJournalProperties.Set_WeeksInPayPeriod(Param1: Smallint);
begin
  DefaultInterface.Set_WeeksInPayPeriod(Param1);
end;

{$ENDIF}

class function CoPurchaseJournal.Create: _PurchaseJournal;
begin
  Result := CreateComObject(CLASS_PurchaseJournal) as _PurchaseJournal;
end;

class function CoPurchaseJournal.CreateRemote(const MachineName: string): _PurchaseJournal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PurchaseJournal) as _PurchaseJournal;
end;

procedure TPurchaseJournal.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5271E4A4-A1B8-4063-A60A-D6662EE2206E}';
    IntfIID:   '{FFDC920E-F028-4F48-8AED-DBA3AE359924}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPurchaseJournal.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _PurchaseJournal;
  end;
end;

procedure TPurchaseJournal.ConnectTo(svrIntf: _PurchaseJournal);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPurchaseJournal.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPurchaseJournal.GetDefaultInterface: _PurchaseJournal;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TPurchaseJournal.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TPurchaseJournalProperties.Create(Self);
{$ENDIF}
end;

destructor TPurchaseJournal.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TPurchaseJournal.GetServerProperties: TPurchaseJournalProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TPurchaseJournal.Get_AmountPaid: Double;
begin
    Result := DefaultInterface.AmountPaid;
end;

procedure TPurchaseJournal.Set_AmountPaid(Param1: Double);
begin
  DefaultInterface.Set_AmountPaid(Param1);
end;

function TPurchaseJournal.Get_APAccount: WideString;
begin
    Result := DefaultInterface.APAccount;
end;

procedure TPurchaseJournal.Set_APAccount(const Param1: WideString);
begin
  DefaultInterface.Set_APAccount(Param1);
end;

function TPurchaseJournal.Get_APAmount: Double;
begin
    Result := DefaultInterface.APAmount;
end;

procedure TPurchaseJournal.Set_APAmount(Param1: Double);
begin
  DefaultInterface.Set_APAmount(Param1);
end;

function TPurchaseJournal.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TPurchaseJournal.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TPurchaseJournal.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TPurchaseJournal.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TPurchaseJournal.Get_DateDue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateDue;
end;

procedure TPurchaseJournal.Set_DateDue(Param1: OleVariant);
begin
  DefaultInterface.Set_DateDue(Param1);
end;

function TPurchaseJournal.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TPurchaseJournal.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailApplyToPO(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailApplyToPO[Index];
end;

procedure TPurchaseJournal.Set_DetailApplyToPO(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailApplyToPO[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TPurchaseJournal.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailCostOfSalesAccount[Index];
end;

procedure TPurchaseJournal.Set_DetailCostOfSalesAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailCostOfSalesAccount(Index,Param2);
end;

function TPurchaseJournal.Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailCostOfSalesTrx[Index];
end;

procedure TPurchaseJournal.Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailCostOfSalesTrx[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TPurchaseJournal.Set_DetailDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TPurchaseJournal.Get_DetailDisplayedLine(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailDisplayedLine[Index];
end;

procedure TPurchaseJournal.Set_DetailDisplayedLine(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailDisplayedLine[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TPurchaseJournal.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailFlag2(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag2[Index];
end;

procedure TPurchaseJournal.Set_DetailFlag2(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag2[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TPurchaseJournal.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TPurchaseJournal.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TPurchaseJournal.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TPurchaseJournal.Get_DetailInventoryAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInventoryAccount[Index];
end;

procedure TPurchaseJournal.Set_DetailInventoryAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailInventoryAccount(Index,Param2);
end;

function TPurchaseJournal.Get_DetailInvoiceNRecord(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailInvoiceNRecord[Index];
end;

procedure TPurchaseJournal.Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailInvoiceNRecord[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailInvoicePaid(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInvoicePaid[Index];
end;

procedure TPurchaseJournal.Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailInvoicePaid(Index,Param2);
end;

function TPurchaseJournal.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TPurchaseJournal.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TPurchaseJournal.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TPurchaseJournal.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TPurchaseJournal.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailPOLine(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailPOLine[Index];
end;

procedure TPurchaseJournal.Set_DetailPOLine(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailPOLine[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TPurchaseJournal.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TPurchaseJournal.Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TPurchaseJournal.Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TPurchaseJournal.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailUMGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailUMGUID[Index];
end;

procedure TPurchaseJournal.Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailUMGUID(Index,Param2);
end;

function TPurchaseJournal.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TPurchaseJournal.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailUnknown(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnknown[Index];
end;

procedure TPurchaseJournal.Set_DetailUnknown(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnknown[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailUnused1(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailUnused1[Index];
end;

procedure TPurchaseJournal.Set_DetailUnused1(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailUnused1[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailUnused2(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailUnused2[Index];
end;

procedure TPurchaseJournal.Set_DetailUnused2(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailUnused2[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailUnused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused3[Index];
end;

procedure TPurchaseJournal.Set_DetailUnused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused3[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailUnused4(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnused4[Index];
end;

procedure TPurchaseJournal.Set_DetailUnused4(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnused4[Index] := Param2;
end;

function TPurchaseJournal.Get_DetailVendorIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailVendorIndex[Index];
end;

procedure TPurchaseJournal.Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailVendorIndex[Index] := Param2;
end;

function TPurchaseJournal.Get_DiscountAmount: Double;
begin
    Result := DefaultInterface.DiscountAmount;
end;

procedure TPurchaseJournal.Set_DiscountAmount(Param1: Double);
begin
  DefaultInterface.Set_DiscountAmount(Param1);
end;

function TPurchaseJournal.Get_DiscountDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DiscountDate;
end;

procedure TPurchaseJournal.Set_DiscountDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DiscountDate(Param1);
end;

function TPurchaseJournal.Get_DropShip: WordBool;
begin
    Result := DefaultInterface.DropShip;
end;

procedure TPurchaseJournal.Set_DropShip(Param1: WordBool);
begin
  DefaultInterface.Set_DropShip(Param1);
end;

function TPurchaseJournal.Get_DropShipCustomerIndex: Integer;
begin
    Result := DefaultInterface.DropShipCustomerIndex;
end;

procedure TPurchaseJournal.Set_DropShipCustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_DropShipCustomerIndex(Param1);
end;

function TPurchaseJournal.Get_DropShipInvNo: WideString;
begin
    Result := DefaultInterface.DropShipInvNo;
end;

procedure TPurchaseJournal.Set_DropShipInvNo(const Param1: WideString);
begin
  DefaultInterface.Set_DropShipInvNo(Param1);
end;

function TPurchaseJournal.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TPurchaseJournal.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TPurchaseJournal.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TPurchaseJournal.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TPurchaseJournal.Get_HasPartner: WordBool;
begin
    Result := DefaultInterface.HasPartner;
end;

procedure TPurchaseJournal.Set_HasPartner(Param1: WordBool);
begin
  DefaultInterface.Set_HasPartner(Param1);
end;

function TPurchaseJournal.Get_InternalNote: WideString;
begin
    Result := DefaultInterface.InternalNote;
end;

procedure TPurchaseJournal.Set_InternalNote(const Param1: WideString);
begin
  DefaultInterface.Set_InternalNote(Param1);
end;

function TPurchaseJournal.Get_InvoiceNumber: WideString;
begin
    Result := DefaultInterface.InvoiceNumber;
end;

procedure TPurchaseJournal.Set_InvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_InvoiceNumber(Param1);
end;

function TPurchaseJournal.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TPurchaseJournal.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TPurchaseJournal.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TPurchaseJournal.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TPurchaseJournal.Get_JrnlTypeEx: Integer;
begin
    Result := DefaultInterface.JrnlTypeEx;
end;

procedure TPurchaseJournal.Set_JrnlTypeEx(Param1: Integer);
begin
  DefaultInterface.Set_JrnlTypeEx(Param1);
end;

function TPurchaseJournal.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TPurchaseJournal.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TPurchaseJournal.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TPurchaseJournal.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TPurchaseJournal.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TPurchaseJournal.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TPurchaseJournal.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TPurchaseJournal.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TPurchaseJournal.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TPurchaseJournal.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TPurchaseJournal.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TPurchaseJournal.Get_NotePrintsAfterItems: WordBool;
begin
    Result := DefaultInterface.NotePrintsAfterItems;
end;

procedure TPurchaseJournal.Set_NotePrintsAfterItems(Param1: WordBool);
begin
  DefaultInterface.Set_NotePrintsAfterItems(Param1);
end;

function TPurchaseJournal.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TPurchaseJournal.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TPurchaseJournal.Get_NumOrderLines: Smallint;
begin
    Result := DefaultInterface.NumOrderLines;
end;

procedure TPurchaseJournal.Set_NumOrderLines(Param1: Smallint);
begin
  DefaultInterface.Set_NumOrderLines(Param1);
end;

function TPurchaseJournal.Get_PaymentDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PaymentDate;
end;

procedure TPurchaseJournal.Set_PaymentDate(Param1: OleVariant);
begin
  DefaultInterface.Set_PaymentDate(Param1);
end;

function TPurchaseJournal.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TPurchaseJournal.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TPurchaseJournal.Get_PO: WordBool;
begin
    Result := DefaultInterface.PO;
end;

procedure TPurchaseJournal.Set_PO(Param1: WordBool);
begin
  DefaultInterface.Set_PO(Param1);
end;

function TPurchaseJournal.Get_POGoodThruDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.POGoodThruDate;
end;

procedure TPurchaseJournal.Set_POGoodThruDate(Param1: OleVariant);
begin
  DefaultInterface.Set_POGoodThruDate(Param1);
end;

function TPurchaseJournal.Get_PONo: WideString;
begin
    Result := DefaultInterface.PONo;
end;

procedure TPurchaseJournal.Set_PONo(const Param1: WideString);
begin
  DefaultInterface.Set_PONo(Param1);
end;

function TPurchaseJournal.Get_PONumber: WideString;
begin
    Result := DefaultInterface.PONumber;
end;

procedure TPurchaseJournal.Set_PONumber(const Param1: WideString);
begin
  DefaultInterface.Set_PONumber(Param1);
end;

function TPurchaseJournal.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TPurchaseJournal.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TPurchaseJournal.Get_Prepayment: WordBool;
begin
    Result := DefaultInterface.Prepayment;
end;

procedure TPurchaseJournal.Set_Prepayment(Param1: WordBool);
begin
  DefaultInterface.Set_Prepayment(Param1);
end;

function TPurchaseJournal.Get_PrintCheck: WordBool;
begin
    Result := DefaultInterface.PrintCheck;
end;

procedure TPurchaseJournal.Set_PrintCheck(Param1: WordBool);
begin
  DefaultInterface.Set_PrintCheck(Param1);
end;

function TPurchaseJournal.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TPurchaseJournal.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TPurchaseJournal.Get_RecurrenceIndex: Integer;
begin
    Result := DefaultInterface.RecurrenceIndex;
end;

procedure TPurchaseJournal.Set_RecurrenceIndex(Param1: Integer);
begin
  DefaultInterface.Set_RecurrenceIndex(Param1);
end;

function TPurchaseJournal.Get_RecurrenceRate: Smallint;
begin
    Result := DefaultInterface.RecurrenceRate;
end;

procedure TPurchaseJournal.Set_RecurrenceRate(Param1: Smallint);
begin
  DefaultInterface.Set_RecurrenceRate(Param1);
end;

function TPurchaseJournal.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TPurchaseJournal.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TPurchaseJournal.Get_ShipToAddr1: WideString;
begin
    Result := DefaultInterface.ShipToAddr1;
end;

procedure TPurchaseJournal.Set_ShipToAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr1(Param1);
end;

function TPurchaseJournal.Get_ShipToAddr2: WideString;
begin
    Result := DefaultInterface.ShipToAddr2;
end;

procedure TPurchaseJournal.Set_ShipToAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr2(Param1);
end;

function TPurchaseJournal.Get_ShipToCity: WideString;
begin
    Result := DefaultInterface.ShipToCity;
end;

procedure TPurchaseJournal.Set_ShipToCity(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCity(Param1);
end;

function TPurchaseJournal.Get_ShipToCountry: WideString;
begin
    Result := DefaultInterface.ShipToCountry;
end;

procedure TPurchaseJournal.Set_ShipToCountry(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCountry(Param1);
end;

function TPurchaseJournal.Get_ShipToName: WideString;
begin
    Result := DefaultInterface.ShipToName;
end;

procedure TPurchaseJournal.Set_ShipToName(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToName(Param1);
end;

function TPurchaseJournal.Get_ShipToState: WideString;
begin
    Result := DefaultInterface.ShipToState;
end;

procedure TPurchaseJournal.Set_ShipToState(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToState(Param1);
end;

function TPurchaseJournal.Get_ShipToZipCode: WideString;
begin
    Result := DefaultInterface.ShipToZipCode;
end;

procedure TPurchaseJournal.Set_ShipToZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToZipCode(Param1);
end;

function TPurchaseJournal.Get_ShipVia: WideString;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TPurchaseJournal.Set_ShipVia(const Param1: WideString);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TPurchaseJournal.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TPurchaseJournal.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TPurchaseJournal.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TPurchaseJournal.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TPurchaseJournal.Get_Terms: WideString;
begin
    Result := DefaultInterface.Terms;
end;

procedure TPurchaseJournal.Set_Terms(const Param1: WideString);
begin
  DefaultInterface.Set_Terms(Param1);
end;

function TPurchaseJournal.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TPurchaseJournal.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TPurchaseJournal.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TPurchaseJournal.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TPurchaseJournal.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TPurchaseJournal.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TPurchaseJournal.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TPurchaseJournal.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TPurchaseJournal.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TPurchaseJournal.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TPurchaseJournal.Get_Unused3: Double;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TPurchaseJournal.Set_Unused3(Param1: Double);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TPurchaseJournal.Get_Unused4: Byte;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TPurchaseJournal.Set_Unused4(Param1: Byte);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TPurchaseJournal.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TPurchaseJournal.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TPurchaseJournal.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TPurchaseJournal.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TPurchaseJournal.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TPurchaseJournal.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

function TPurchaseJournal.Get_VendorName: WideString;
begin
    Result := DefaultInterface.VendorName;
end;

procedure TPurchaseJournal.Set_VendorName(const Param1: WideString);
begin
  DefaultInterface.Set_VendorName(Param1);
end;

function TPurchaseJournal.Get_WaitingOnBill: WordBool;
begin
    Result := DefaultInterface.WaitingOnBill;
end;

procedure TPurchaseJournal.Set_WaitingOnBill(Param1: WordBool);
begin
  DefaultInterface.Set_WaitingOnBill(Param1);
end;

function TPurchaseJournal.ClearRecord: Smallint;
begin
  Result := DefaultInterface.ClearRecord;
end;

function TPurchaseJournal.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TPurchaseJournal.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TPurchaseJournal.GetEqual(NRecord: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(NRecord);
end;

function TPurchaseJournal.IncrementBatchCount: Smallint;
begin
  Result := DefaultInterface.IncrementBatchCount;
end;

function TPurchaseJournal.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TPurchaseJournal.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TPurchaseJournal.ReadFirst(Period: Smallint): Smallint;
begin
  Result := DefaultInterface.ReadFirst(Period);
end;

function TPurchaseJournal.ReadFirstForVendor(Index: Integer): Smallint;
begin
  Result := DefaultInterface.ReadFirstForVendor(Index);
end;

function TPurchaseJournal.ReadNext: Smallint;
begin
  Result := DefaultInterface.ReadNext;
end;

function TPurchaseJournal.ReadNextByVendor: Smallint;
begin
  Result := DefaultInterface.ReadNextByVendor;
end;

function TPurchaseJournal.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TPurchaseJournalProperties.Create(AServer: TPurchaseJournal);
begin
  inherited Create;
  FServer := AServer;
end;

function TPurchaseJournalProperties.GetDefaultInterface: _PurchaseJournal;
begin
  Result := FServer.DefaultInterface;
end;

function TPurchaseJournalProperties.Get_AmountPaid: Double;
begin
    Result := DefaultInterface.AmountPaid;
end;

procedure TPurchaseJournalProperties.Set_AmountPaid(Param1: Double);
begin
  DefaultInterface.Set_AmountPaid(Param1);
end;

function TPurchaseJournalProperties.Get_APAccount: WideString;
begin
    Result := DefaultInterface.APAccount;
end;

procedure TPurchaseJournalProperties.Set_APAccount(const Param1: WideString);
begin
  DefaultInterface.Set_APAccount(Param1);
end;

function TPurchaseJournalProperties.Get_APAmount: Double;
begin
    Result := DefaultInterface.APAmount;
end;

procedure TPurchaseJournalProperties.Set_APAmount(Param1: Double);
begin
  DefaultInterface.Set_APAmount(Param1);
end;

function TPurchaseJournalProperties.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TPurchaseJournalProperties.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TPurchaseJournalProperties.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TPurchaseJournalProperties.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TPurchaseJournalProperties.Get_DateDue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateDue;
end;

procedure TPurchaseJournalProperties.Set_DateDue(Param1: OleVariant);
begin
  DefaultInterface.Set_DateDue(Param1);
end;

function TPurchaseJournalProperties.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailApplyToPO(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailApplyToPO[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailApplyToPO(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailApplyToPO[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailCostOfSalesAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailCostOfSalesAccount[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailCostOfSalesAccount(Index: Smallint; 
                                                                  const Param2: WideString);
begin
  DefaultInterface.Set_DetailCostOfSalesAccount(Index,Param2);
end;

function TPurchaseJournalProperties.Get_DetailCostOfSalesTrx(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailCostOfSalesTrx[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailCostOfSalesTrx(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailCostOfSalesTrx[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TPurchaseJournalProperties.Get_DetailDisplayedLine(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailDisplayedLine[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailDisplayedLine(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailDisplayedLine[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailFlag1(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag1[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailFlag1(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag1[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailFlag2(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFlag2[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailFlag2(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFlag2[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TPurchaseJournalProperties.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TPurchaseJournalProperties.Get_DetailInventoryAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInventoryAccount[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailInventoryAccount(Index: Smallint; 
                                                                const Param2: WideString);
begin
  DefaultInterface.Set_DetailInventoryAccount(Index,Param2);
end;

function TPurchaseJournalProperties.Get_DetailInvoiceNRecord(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailInvoiceNRecord[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailInvoiceNRecord(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailInvoiceNRecord[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailInvoicePaid(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailInvoicePaid[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailInvoicePaid(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailInvoicePaid(Index,Param2);
end;

function TPurchaseJournalProperties.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailPOLine(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailPOLine[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailPOLine(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailPOLine[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailUMGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailUMGUID[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailUMGUID(Index,Param2);
end;

function TPurchaseJournalProperties.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailUnknown(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnknown[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailUnknown(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnknown[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailUnused1(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailUnused1[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailUnused1(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailUnused1[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailUnused2(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailUnused2[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailUnused2(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailUnused2[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailUnused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused3[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailUnused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused3[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailUnused4(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnused4[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailUnused4(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnused4[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DetailVendorIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailVendorIndex[Index];
end;

procedure TPurchaseJournalProperties.Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailVendorIndex[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_DiscountAmount: Double;
begin
    Result := DefaultInterface.DiscountAmount;
end;

procedure TPurchaseJournalProperties.Set_DiscountAmount(Param1: Double);
begin
  DefaultInterface.Set_DiscountAmount(Param1);
end;

function TPurchaseJournalProperties.Get_DiscountDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DiscountDate;
end;

procedure TPurchaseJournalProperties.Set_DiscountDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DiscountDate(Param1);
end;

function TPurchaseJournalProperties.Get_DropShip: WordBool;
begin
    Result := DefaultInterface.DropShip;
end;

procedure TPurchaseJournalProperties.Set_DropShip(Param1: WordBool);
begin
  DefaultInterface.Set_DropShip(Param1);
end;

function TPurchaseJournalProperties.Get_DropShipCustomerIndex: Integer;
begin
    Result := DefaultInterface.DropShipCustomerIndex;
end;

procedure TPurchaseJournalProperties.Set_DropShipCustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_DropShipCustomerIndex(Param1);
end;

function TPurchaseJournalProperties.Get_DropShipInvNo: WideString;
begin
    Result := DefaultInterface.DropShipInvNo;
end;

procedure TPurchaseJournalProperties.Set_DropShipInvNo(const Param1: WideString);
begin
  DefaultInterface.Set_DropShipInvNo(Param1);
end;

function TPurchaseJournalProperties.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TPurchaseJournalProperties.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TPurchaseJournalProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TPurchaseJournalProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TPurchaseJournalProperties.Get_HasPartner: WordBool;
begin
    Result := DefaultInterface.HasPartner;
end;

procedure TPurchaseJournalProperties.Set_HasPartner(Param1: WordBool);
begin
  DefaultInterface.Set_HasPartner(Param1);
end;

function TPurchaseJournalProperties.Get_InternalNote: WideString;
begin
    Result := DefaultInterface.InternalNote;
end;

procedure TPurchaseJournalProperties.Set_InternalNote(const Param1: WideString);
begin
  DefaultInterface.Set_InternalNote(Param1);
end;

function TPurchaseJournalProperties.Get_InvoiceNumber: WideString;
begin
    Result := DefaultInterface.InvoiceNumber;
end;

procedure TPurchaseJournalProperties.Set_InvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_InvoiceNumber(Param1);
end;

function TPurchaseJournalProperties.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TPurchaseJournalProperties.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TPurchaseJournalProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TPurchaseJournalProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TPurchaseJournalProperties.Get_JrnlTypeEx: Integer;
begin
    Result := DefaultInterface.JrnlTypeEx;
end;

procedure TPurchaseJournalProperties.Set_JrnlTypeEx(Param1: Integer);
begin
  DefaultInterface.Set_JrnlTypeEx(Param1);
end;

function TPurchaseJournalProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TPurchaseJournalProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TPurchaseJournalProperties.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TPurchaseJournalProperties.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TPurchaseJournalProperties.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TPurchaseJournalProperties.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TPurchaseJournalProperties.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TPurchaseJournalProperties.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TPurchaseJournalProperties.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TPurchaseJournalProperties.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TPurchaseJournalProperties.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TPurchaseJournalProperties.Get_NotePrintsAfterItems: WordBool;
begin
    Result := DefaultInterface.NotePrintsAfterItems;
end;

procedure TPurchaseJournalProperties.Set_NotePrintsAfterItems(Param1: WordBool);
begin
  DefaultInterface.Set_NotePrintsAfterItems(Param1);
end;

function TPurchaseJournalProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TPurchaseJournalProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TPurchaseJournalProperties.Get_NumOrderLines: Smallint;
begin
    Result := DefaultInterface.NumOrderLines;
end;

procedure TPurchaseJournalProperties.Set_NumOrderLines(Param1: Smallint);
begin
  DefaultInterface.Set_NumOrderLines(Param1);
end;

function TPurchaseJournalProperties.Get_PaymentDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PaymentDate;
end;

procedure TPurchaseJournalProperties.Set_PaymentDate(Param1: OleVariant);
begin
  DefaultInterface.Set_PaymentDate(Param1);
end;

function TPurchaseJournalProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TPurchaseJournalProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TPurchaseJournalProperties.Get_PO: WordBool;
begin
    Result := DefaultInterface.PO;
end;

procedure TPurchaseJournalProperties.Set_PO(Param1: WordBool);
begin
  DefaultInterface.Set_PO(Param1);
end;

function TPurchaseJournalProperties.Get_POGoodThruDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.POGoodThruDate;
end;

procedure TPurchaseJournalProperties.Set_POGoodThruDate(Param1: OleVariant);
begin
  DefaultInterface.Set_POGoodThruDate(Param1);
end;

function TPurchaseJournalProperties.Get_PONo: WideString;
begin
    Result := DefaultInterface.PONo;
end;

procedure TPurchaseJournalProperties.Set_PONo(const Param1: WideString);
begin
  DefaultInterface.Set_PONo(Param1);
end;

function TPurchaseJournalProperties.Get_PONumber: WideString;
begin
    Result := DefaultInterface.PONumber;
end;

procedure TPurchaseJournalProperties.Set_PONumber(const Param1: WideString);
begin
  DefaultInterface.Set_PONumber(Param1);
end;

function TPurchaseJournalProperties.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TPurchaseJournalProperties.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TPurchaseJournalProperties.Get_Prepayment: WordBool;
begin
    Result := DefaultInterface.Prepayment;
end;

procedure TPurchaseJournalProperties.Set_Prepayment(Param1: WordBool);
begin
  DefaultInterface.Set_Prepayment(Param1);
end;

function TPurchaseJournalProperties.Get_PrintCheck: WordBool;
begin
    Result := DefaultInterface.PrintCheck;
end;

procedure TPurchaseJournalProperties.Set_PrintCheck(Param1: WordBool);
begin
  DefaultInterface.Set_PrintCheck(Param1);
end;

function TPurchaseJournalProperties.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TPurchaseJournalProperties.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TPurchaseJournalProperties.Get_RecurrenceIndex: Integer;
begin
    Result := DefaultInterface.RecurrenceIndex;
end;

procedure TPurchaseJournalProperties.Set_RecurrenceIndex(Param1: Integer);
begin
  DefaultInterface.Set_RecurrenceIndex(Param1);
end;

function TPurchaseJournalProperties.Get_RecurrenceRate: Smallint;
begin
    Result := DefaultInterface.RecurrenceRate;
end;

procedure TPurchaseJournalProperties.Set_RecurrenceRate(Param1: Smallint);
begin
  DefaultInterface.Set_RecurrenceRate(Param1);
end;

function TPurchaseJournalProperties.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TPurchaseJournalProperties.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TPurchaseJournalProperties.Get_ShipToAddr1: WideString;
begin
    Result := DefaultInterface.ShipToAddr1;
end;

procedure TPurchaseJournalProperties.Set_ShipToAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr1(Param1);
end;

function TPurchaseJournalProperties.Get_ShipToAddr2: WideString;
begin
    Result := DefaultInterface.ShipToAddr2;
end;

procedure TPurchaseJournalProperties.Set_ShipToAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr2(Param1);
end;

function TPurchaseJournalProperties.Get_ShipToCity: WideString;
begin
    Result := DefaultInterface.ShipToCity;
end;

procedure TPurchaseJournalProperties.Set_ShipToCity(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCity(Param1);
end;

function TPurchaseJournalProperties.Get_ShipToCountry: WideString;
begin
    Result := DefaultInterface.ShipToCountry;
end;

procedure TPurchaseJournalProperties.Set_ShipToCountry(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCountry(Param1);
end;

function TPurchaseJournalProperties.Get_ShipToName: WideString;
begin
    Result := DefaultInterface.ShipToName;
end;

procedure TPurchaseJournalProperties.Set_ShipToName(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToName(Param1);
end;

function TPurchaseJournalProperties.Get_ShipToState: WideString;
begin
    Result := DefaultInterface.ShipToState;
end;

procedure TPurchaseJournalProperties.Set_ShipToState(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToState(Param1);
end;

function TPurchaseJournalProperties.Get_ShipToZipCode: WideString;
begin
    Result := DefaultInterface.ShipToZipCode;
end;

procedure TPurchaseJournalProperties.Set_ShipToZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToZipCode(Param1);
end;

function TPurchaseJournalProperties.Get_ShipVia: WideString;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TPurchaseJournalProperties.Set_ShipVia(const Param1: WideString);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TPurchaseJournalProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TPurchaseJournalProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TPurchaseJournalProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TPurchaseJournalProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TPurchaseJournalProperties.Get_Terms: WideString;
begin
    Result := DefaultInterface.Terms;
end;

procedure TPurchaseJournalProperties.Set_Terms(const Param1: WideString);
begin
  DefaultInterface.Set_Terms(Param1);
end;

function TPurchaseJournalProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TPurchaseJournalProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TPurchaseJournalProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TPurchaseJournalProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TPurchaseJournalProperties.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TPurchaseJournalProperties.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TPurchaseJournalProperties.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TPurchaseJournalProperties.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TPurchaseJournalProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TPurchaseJournalProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_Unused3: Double;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TPurchaseJournalProperties.Set_Unused3(Param1: Double);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TPurchaseJournalProperties.Get_Unused4: Byte;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TPurchaseJournalProperties.Set_Unused4(Param1: Byte);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TPurchaseJournalProperties.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TPurchaseJournalProperties.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TPurchaseJournalProperties.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TPurchaseJournalProperties.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TPurchaseJournalProperties.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

function TPurchaseJournalProperties.Get_VendorName: WideString;
begin
    Result := DefaultInterface.VendorName;
end;

procedure TPurchaseJournalProperties.Set_VendorName(const Param1: WideString);
begin
  DefaultInterface.Set_VendorName(Param1);
end;

function TPurchaseJournalProperties.Get_WaitingOnBill: WordBool;
begin
    Result := DefaultInterface.WaitingOnBill;
end;

procedure TPurchaseJournalProperties.Set_WaitingOnBill(Param1: WordBool);
begin
  DefaultInterface.Set_WaitingOnBill(Param1);
end;

{$ENDIF}

class function CoPurchaseOrderJournal.Create: _PurchaseOrderJournal;
begin
  Result := CreateComObject(CLASS_PurchaseOrderJournal) as _PurchaseOrderJournal;
end;

class function CoPurchaseOrderJournal.CreateRemote(const MachineName: string): _PurchaseOrderJournal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PurchaseOrderJournal) as _PurchaseOrderJournal;
end;

procedure TPurchaseOrderJournal.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CA936A79-B0D7-4D66-93EA-AE34E59A5103}';
    IntfIID:   '{BC073E73-CB03-4BEA-8DD7-2551A1B36C06}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPurchaseOrderJournal.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _PurchaseOrderJournal;
  end;
end;

procedure TPurchaseOrderJournal.ConnectTo(svrIntf: _PurchaseOrderJournal);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPurchaseOrderJournal.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPurchaseOrderJournal.GetDefaultInterface: _PurchaseOrderJournal;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TPurchaseOrderJournal.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TPurchaseOrderJournalProperties.Create(Self);
{$ENDIF}
end;

destructor TPurchaseOrderJournal.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TPurchaseOrderJournal.GetServerProperties: TPurchaseOrderJournalProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TPurchaseOrderJournal.Get_AmountPaid: Double;
begin
    Result := DefaultInterface.AmountPaid;
end;

procedure TPurchaseOrderJournal.Set_AmountPaid(Param1: Double);
begin
  DefaultInterface.Set_AmountPaid(Param1);
end;

function TPurchaseOrderJournal.Get_APAccount: WideString;
begin
    Result := DefaultInterface.APAccount;
end;

procedure TPurchaseOrderJournal.Set_APAccount(const Param1: WideString);
begin
  DefaultInterface.Set_APAccount(Param1);
end;

function TPurchaseOrderJournal.Get_APAmount: Double;
begin
    Result := DefaultInterface.APAmount;
end;

procedure TPurchaseOrderJournal.Set_APAmount(Param1: Double);
begin
  DefaultInterface.Set_APAmount(Param1);
end;

function TPurchaseOrderJournal.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TPurchaseOrderJournal.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TPurchaseOrderJournal.Get_ClosePurchaseOrder: WordBool;
begin
    Result := DefaultInterface.ClosePurchaseOrder;
end;

procedure TPurchaseOrderJournal.Set_ClosePurchaseOrder(Param1: WordBool);
begin
  DefaultInterface.Set_ClosePurchaseOrder(Param1);
end;

function TPurchaseOrderJournal.Get_CustomerInvoiceNumber: WideString;
begin
    Result := DefaultInterface.CustomerInvoiceNumber;
end;

procedure TPurchaseOrderJournal.Set_CustomerInvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerInvoiceNumber(Param1);
end;

function TPurchaseOrderJournal.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TPurchaseOrderJournal.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TPurchaseOrderJournal.Get_DateDue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateDue;
end;

procedure TPurchaseOrderJournal.Set_DateDue(Param1: OleVariant);
begin
  DefaultInterface.Set_DateDue(Param1);
end;

function TPurchaseOrderJournal.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TPurchaseOrderJournal.Get_DetailExtension(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailExtension[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailExtension(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailExtension[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TPurchaseOrderJournal.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TPurchaseOrderJournal.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailPOLine(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailPOLine[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailPOLine(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailPOLine[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailPOLine2(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailPOLine2[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailPOLine2(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailPOLine2[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailReceivedAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailReceivedAmount[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailReceivedAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailReceivedAmount[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailReceivedQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailReceivedQuantity[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailReceivedQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailReceivedQuantity[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailStockingQuantityOrdered(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantityOrdered[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailStockingQuantityOrdered(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantityOrdered[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailStockingQuantityShipped(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantityShipped[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailStockingQuantityShipped(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantityShipped[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailUMGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailUMGUID[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailUMGUID(Index,Param2);
end;

function TPurchaseOrderJournal.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DetailUnused(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused[Index1, Index2];
end;

procedure TPurchaseOrderJournal.Set_DetailUnused(Index1: Smallint; Index2: Smallint; Param3: Byte);
begin
  DefaultInterface.DetailUnused[Index1, Index2] := Param3;
end;

function TPurchaseOrderJournal.Get_DetailVendorIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailVendorIndex[Index];
end;

procedure TPurchaseOrderJournal.Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailVendorIndex[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_DiscountAmount: Double;
begin
    Result := DefaultInterface.DiscountAmount;
end;

procedure TPurchaseOrderJournal.Set_DiscountAmount(Param1: Double);
begin
  DefaultInterface.Set_DiscountAmount(Param1);
end;

function TPurchaseOrderJournal.Get_DiscountDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DiscountDate;
end;

procedure TPurchaseOrderJournal.Set_DiscountDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DiscountDate(Param1);
end;

function TPurchaseOrderJournal.Get_DropShip: WordBool;
begin
    Result := DefaultInterface.DropShip;
end;

procedure TPurchaseOrderJournal.Set_DropShip(Param1: WordBool);
begin
  DefaultInterface.Set_DropShip(Param1);
end;

function TPurchaseOrderJournal.Get_DropShipCustomerIndex: Integer;
begin
    Result := DefaultInterface.DropShipCustomerIndex;
end;

procedure TPurchaseOrderJournal.Set_DropShipCustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_DropShipCustomerIndex(Param1);
end;

function TPurchaseOrderJournal.Get_DropShipInvoiceNumber: WideString;
begin
    Result := DefaultInterface.DropShipInvoiceNumber;
end;

procedure TPurchaseOrderJournal.Set_DropShipInvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_DropShipInvoiceNumber(Param1);
end;

function TPurchaseOrderJournal.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TPurchaseOrderJournal.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TPurchaseOrderJournal.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TPurchaseOrderJournal.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TPurchaseOrderJournal.Get_InternalNote: WideString;
begin
    Result := DefaultInterface.InternalNote;
end;

procedure TPurchaseOrderJournal.Set_InternalNote(const Param1: WideString);
begin
  DefaultInterface.Set_InternalNote(Param1);
end;

function TPurchaseOrderJournal.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TPurchaseOrderJournal.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TPurchaseOrderJournal.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TPurchaseOrderJournal.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TPurchaseOrderJournal.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TPurchaseOrderJournal.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TPurchaseOrderJournal.Get_LastPONumber: WideString;
begin
    Result := DefaultInterface.LastPONumber;
end;

procedure TPurchaseOrderJournal.Set_LastPONumber(const Param1: WideString);
begin
  DefaultInterface.Set_LastPONumber(Param1);
end;

function TPurchaseOrderJournal.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TPurchaseOrderJournal.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TPurchaseOrderJournal.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TPurchaseOrderJournal.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TPurchaseOrderJournal.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TPurchaseOrderJournal.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TPurchaseOrderJournal.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TPurchaseOrderJournal.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TPurchaseOrderJournal.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TPurchaseOrderJournal.Get_NotePrintsAfterItems: WordBool;
begin
    Result := DefaultInterface.NotePrintsAfterItems;
end;

procedure TPurchaseOrderJournal.Set_NotePrintsAfterItems(Param1: WordBool);
begin
  DefaultInterface.Set_NotePrintsAfterItems(Param1);
end;

function TPurchaseOrderJournal.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TPurchaseOrderJournal.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TPurchaseOrderJournal.Get_NumPOLines: Byte;
begin
    Result := DefaultInterface.NumPOLines;
end;

procedure TPurchaseOrderJournal.Set_NumPOLines(Param1: Byte);
begin
  DefaultInterface.Set_NumPOLines(Param1);
end;

function TPurchaseOrderJournal.Get_NumPOLines2: Smallint;
begin
    Result := DefaultInterface.NumPOLines2;
end;

procedure TPurchaseOrderJournal.Set_NumPOLines2(Param1: Smallint);
begin
  DefaultInterface.Set_NumPOLines2(Param1);
end;

function TPurchaseOrderJournal.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TPurchaseOrderJournal.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TPurchaseOrderJournal.Get_POGoodThruDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.POGoodThruDate;
end;

procedure TPurchaseOrderJournal.Set_POGoodThruDate(Param1: OleVariant);
begin
  DefaultInterface.Set_POGoodThruDate(Param1);
end;

function TPurchaseOrderJournal.Get_PONumber: WideString;
begin
    Result := DefaultInterface.PONumber;
end;

procedure TPurchaseOrderJournal.Set_PONumber(const Param1: WideString);
begin
  DefaultInterface.Set_PONumber(Param1);
end;

function TPurchaseOrderJournal.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TPurchaseOrderJournal.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TPurchaseOrderJournal.Get_Prepayment: WordBool;
begin
    Result := DefaultInterface.Prepayment;
end;

procedure TPurchaseOrderJournal.Set_Prepayment(Param1: WordBool);
begin
  DefaultInterface.Set_Prepayment(Param1);
end;

function TPurchaseOrderJournal.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TPurchaseOrderJournal.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TPurchaseOrderJournal.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TPurchaseOrderJournal.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TPurchaseOrderJournal.Get_ShipToAddr1: WideString;
begin
    Result := DefaultInterface.ShipToAddr1;
end;

procedure TPurchaseOrderJournal.Set_ShipToAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr1(Param1);
end;

function TPurchaseOrderJournal.Get_ShipToAddr2: WideString;
begin
    Result := DefaultInterface.ShipToAddr2;
end;

procedure TPurchaseOrderJournal.Set_ShipToAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr2(Param1);
end;

function TPurchaseOrderJournal.Get_ShipToCity: WideString;
begin
    Result := DefaultInterface.ShipToCity;
end;

procedure TPurchaseOrderJournal.Set_ShipToCity(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCity(Param1);
end;

function TPurchaseOrderJournal.Get_ShipToCountry: WideString;
begin
    Result := DefaultInterface.ShipToCountry;
end;

procedure TPurchaseOrderJournal.Set_ShipToCountry(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCountry(Param1);
end;

function TPurchaseOrderJournal.Get_ShipToName: WideString;
begin
    Result := DefaultInterface.ShipToName;
end;

procedure TPurchaseOrderJournal.Set_ShipToName(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToName(Param1);
end;

function TPurchaseOrderJournal.Get_ShipToState: WideString;
begin
    Result := DefaultInterface.ShipToState;
end;

procedure TPurchaseOrderJournal.Set_ShipToState(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToState(Param1);
end;

function TPurchaseOrderJournal.Get_ShipToZipCode: WideString;
begin
    Result := DefaultInterface.ShipToZipCode;
end;

procedure TPurchaseOrderJournal.Set_ShipToZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToZipCode(Param1);
end;

function TPurchaseOrderJournal.Get_ShipVia: WideString;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TPurchaseOrderJournal.Set_ShipVia(const Param1: WideString);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TPurchaseOrderJournal.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TPurchaseOrderJournal.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TPurchaseOrderJournal.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TPurchaseOrderJournal.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TPurchaseOrderJournal.Get_Terms: WideString;
begin
    Result := DefaultInterface.Terms;
end;

procedure TPurchaseOrderJournal.Set_Terms(const Param1: WideString);
begin
  DefaultInterface.Set_Terms(Param1);
end;

function TPurchaseOrderJournal.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TPurchaseOrderJournal.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TPurchaseOrderJournal.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TPurchaseOrderJournal.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TPurchaseOrderJournal.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TPurchaseOrderJournal.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TPurchaseOrderJournal.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TPurchaseOrderJournal.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TPurchaseOrderJournal.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TPurchaseOrderJournal.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_Unused3: Double;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TPurchaseOrderJournal.Set_Unused3(Param1: Double);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TPurchaseOrderJournal.Get_Unused4: Byte;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TPurchaseOrderJournal.Set_Unused4(Param1: Byte);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TPurchaseOrderJournal.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TPurchaseOrderJournal.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TPurchaseOrderJournal.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TPurchaseOrderJournal.Get_Unused7: Double;
begin
    Result := DefaultInterface.Unused7;
end;

procedure TPurchaseOrderJournal.Set_Unused7(Param1: Double);
begin
  DefaultInterface.Set_Unused7(Param1);
end;

function TPurchaseOrderJournal.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TPurchaseOrderJournal.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

function TPurchaseOrderJournal.Get_VendorName: WideString;
begin
    Result := DefaultInterface.VendorName;
end;

procedure TPurchaseOrderJournal.Set_VendorName(const Param1: WideString);
begin
  DefaultInterface.Set_VendorName(Param1);
end;

function TPurchaseOrderJournal.ClearRecord: Smallint;
begin
  Result := DefaultInterface.ClearRecord;
end;

function TPurchaseOrderJournal.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TPurchaseOrderJournal.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TPurchaseOrderJournal.GetEqual(NRecord: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(NRecord);
end;

function TPurchaseOrderJournal.IncrementBatchCount: Smallint;
begin
  Result := DefaultInterface.IncrementBatchCount;
end;

function TPurchaseOrderJournal.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TPurchaseOrderJournal.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TPurchaseOrderJournal.ReadFirst(Period: Smallint): Smallint;
begin
  Result := DefaultInterface.ReadFirst(Period);
end;

function TPurchaseOrderJournal.ReadFirstForVendor(Index: Integer): Smallint;
begin
  Result := DefaultInterface.ReadFirstForVendor(Index);
end;

function TPurchaseOrderJournal.ReadNext: Smallint;
begin
  Result := DefaultInterface.ReadNext;
end;

function TPurchaseOrderJournal.ReadNextByVendor: Smallint;
begin
  Result := DefaultInterface.ReadNextByVendor;
end;

function TPurchaseOrderJournal.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TPurchaseOrderJournalProperties.Create(AServer: TPurchaseOrderJournal);
begin
  inherited Create;
  FServer := AServer;
end;

function TPurchaseOrderJournalProperties.GetDefaultInterface: _PurchaseOrderJournal;
begin
  Result := FServer.DefaultInterface;
end;

function TPurchaseOrderJournalProperties.Get_AmountPaid: Double;
begin
    Result := DefaultInterface.AmountPaid;
end;

procedure TPurchaseOrderJournalProperties.Set_AmountPaid(Param1: Double);
begin
  DefaultInterface.Set_AmountPaid(Param1);
end;

function TPurchaseOrderJournalProperties.Get_APAccount: WideString;
begin
    Result := DefaultInterface.APAccount;
end;

procedure TPurchaseOrderJournalProperties.Set_APAccount(const Param1: WideString);
begin
  DefaultInterface.Set_APAccount(Param1);
end;

function TPurchaseOrderJournalProperties.Get_APAmount: Double;
begin
    Result := DefaultInterface.APAmount;
end;

procedure TPurchaseOrderJournalProperties.Set_APAmount(Param1: Double);
begin
  DefaultInterface.Set_APAmount(Param1);
end;

function TPurchaseOrderJournalProperties.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TPurchaseOrderJournalProperties.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TPurchaseOrderJournalProperties.Get_ClosePurchaseOrder: WordBool;
begin
    Result := DefaultInterface.ClosePurchaseOrder;
end;

procedure TPurchaseOrderJournalProperties.Set_ClosePurchaseOrder(Param1: WordBool);
begin
  DefaultInterface.Set_ClosePurchaseOrder(Param1);
end;

function TPurchaseOrderJournalProperties.Get_CustomerInvoiceNumber: WideString;
begin
    Result := DefaultInterface.CustomerInvoiceNumber;
end;

procedure TPurchaseOrderJournalProperties.Set_CustomerInvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerInvoiceNumber(Param1);
end;

function TPurchaseOrderJournalProperties.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TPurchaseOrderJournalProperties.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TPurchaseOrderJournalProperties.Get_DateDue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateDue;
end;

procedure TPurchaseOrderJournalProperties.Set_DateDue(Param1: OleVariant);
begin
  DefaultInterface.Set_DateDue(Param1);
end;

function TPurchaseOrderJournalProperties.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailDescription(Index: Smallint; 
                                                                const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TPurchaseOrderJournalProperties.Get_DetailExtension(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailExtension[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailExtension(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailExtension[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailGLAccount(Index: Smallint; 
                                                              const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TPurchaseOrderJournalProperties.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TPurchaseOrderJournalProperties.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailPOLine(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailPOLine[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailPOLine(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailPOLine[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailPOLine2(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailPOLine2[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailPOLine2(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailPOLine2[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailReceivedAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailReceivedAmount[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailReceivedAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailReceivedAmount[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailReceivedQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailReceivedQuantity[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailReceivedQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailReceivedQuantity[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailStockingQuantityOrdered(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantityOrdered[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailStockingQuantityOrdered(Index: Smallint; 
                                                                            Param2: Double);
begin
  DefaultInterface.DetailStockingQuantityOrdered[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailStockingQuantityShipped(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantityShipped[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailStockingQuantityShipped(Index: Smallint; 
                                                                            Param2: Double);
begin
  DefaultInterface.DetailStockingQuantityShipped[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailStockingUnitPrice(Index: Smallint; 
                                                                      Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailUMGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailUMGUID[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailUMGUID(Index,Param2);
end;

function TPurchaseOrderJournalProperties.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DetailUnused(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused[Index1, Index2];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailUnused(Index1: Smallint; Index2: Smallint; 
                                                           Param3: Byte);
begin
  DefaultInterface.DetailUnused[Index1, Index2] := Param3;
end;

function TPurchaseOrderJournalProperties.Get_DetailVendorIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailVendorIndex[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_DetailVendorIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailVendorIndex[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_DiscountAmount: Double;
begin
    Result := DefaultInterface.DiscountAmount;
end;

procedure TPurchaseOrderJournalProperties.Set_DiscountAmount(Param1: Double);
begin
  DefaultInterface.Set_DiscountAmount(Param1);
end;

function TPurchaseOrderJournalProperties.Get_DiscountDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DiscountDate;
end;

procedure TPurchaseOrderJournalProperties.Set_DiscountDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DiscountDate(Param1);
end;

function TPurchaseOrderJournalProperties.Get_DropShip: WordBool;
begin
    Result := DefaultInterface.DropShip;
end;

procedure TPurchaseOrderJournalProperties.Set_DropShip(Param1: WordBool);
begin
  DefaultInterface.Set_DropShip(Param1);
end;

function TPurchaseOrderJournalProperties.Get_DropShipCustomerIndex: Integer;
begin
    Result := DefaultInterface.DropShipCustomerIndex;
end;

procedure TPurchaseOrderJournalProperties.Set_DropShipCustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_DropShipCustomerIndex(Param1);
end;

function TPurchaseOrderJournalProperties.Get_DropShipInvoiceNumber: WideString;
begin
    Result := DefaultInterface.DropShipInvoiceNumber;
end;

procedure TPurchaseOrderJournalProperties.Set_DropShipInvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_DropShipInvoiceNumber(Param1);
end;

function TPurchaseOrderJournalProperties.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TPurchaseOrderJournalProperties.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TPurchaseOrderJournalProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TPurchaseOrderJournalProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TPurchaseOrderJournalProperties.Get_InternalNote: WideString;
begin
    Result := DefaultInterface.InternalNote;
end;

procedure TPurchaseOrderJournalProperties.Set_InternalNote(const Param1: WideString);
begin
  DefaultInterface.Set_InternalNote(Param1);
end;

function TPurchaseOrderJournalProperties.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TPurchaseOrderJournalProperties.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TPurchaseOrderJournalProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TPurchaseOrderJournalProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TPurchaseOrderJournalProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TPurchaseOrderJournalProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TPurchaseOrderJournalProperties.Get_LastPONumber: WideString;
begin
    Result := DefaultInterface.LastPONumber;
end;

procedure TPurchaseOrderJournalProperties.Set_LastPONumber(const Param1: WideString);
begin
  DefaultInterface.Set_LastPONumber(Param1);
end;

function TPurchaseOrderJournalProperties.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TPurchaseOrderJournalProperties.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TPurchaseOrderJournalProperties.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TPurchaseOrderJournalProperties.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TPurchaseOrderJournalProperties.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TPurchaseOrderJournalProperties.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TPurchaseOrderJournalProperties.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TPurchaseOrderJournalProperties.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TPurchaseOrderJournalProperties.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TPurchaseOrderJournalProperties.Get_NotePrintsAfterItems: WordBool;
begin
    Result := DefaultInterface.NotePrintsAfterItems;
end;

procedure TPurchaseOrderJournalProperties.Set_NotePrintsAfterItems(Param1: WordBool);
begin
  DefaultInterface.Set_NotePrintsAfterItems(Param1);
end;

function TPurchaseOrderJournalProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TPurchaseOrderJournalProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TPurchaseOrderJournalProperties.Get_NumPOLines: Byte;
begin
    Result := DefaultInterface.NumPOLines;
end;

procedure TPurchaseOrderJournalProperties.Set_NumPOLines(Param1: Byte);
begin
  DefaultInterface.Set_NumPOLines(Param1);
end;

function TPurchaseOrderJournalProperties.Get_NumPOLines2: Smallint;
begin
    Result := DefaultInterface.NumPOLines2;
end;

procedure TPurchaseOrderJournalProperties.Set_NumPOLines2(Param1: Smallint);
begin
  DefaultInterface.Set_NumPOLines2(Param1);
end;

function TPurchaseOrderJournalProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TPurchaseOrderJournalProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TPurchaseOrderJournalProperties.Get_POGoodThruDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.POGoodThruDate;
end;

procedure TPurchaseOrderJournalProperties.Set_POGoodThruDate(Param1: OleVariant);
begin
  DefaultInterface.Set_POGoodThruDate(Param1);
end;

function TPurchaseOrderJournalProperties.Get_PONumber: WideString;
begin
    Result := DefaultInterface.PONumber;
end;

procedure TPurchaseOrderJournalProperties.Set_PONumber(const Param1: WideString);
begin
  DefaultInterface.Set_PONumber(Param1);
end;

function TPurchaseOrderJournalProperties.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TPurchaseOrderJournalProperties.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TPurchaseOrderJournalProperties.Get_Prepayment: WordBool;
begin
    Result := DefaultInterface.Prepayment;
end;

procedure TPurchaseOrderJournalProperties.Set_Prepayment(Param1: WordBool);
begin
  DefaultInterface.Set_Prepayment(Param1);
end;

function TPurchaseOrderJournalProperties.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TPurchaseOrderJournalProperties.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TPurchaseOrderJournalProperties.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TPurchaseOrderJournalProperties.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TPurchaseOrderJournalProperties.Get_ShipToAddr1: WideString;
begin
    Result := DefaultInterface.ShipToAddr1;
end;

procedure TPurchaseOrderJournalProperties.Set_ShipToAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr1(Param1);
end;

function TPurchaseOrderJournalProperties.Get_ShipToAddr2: WideString;
begin
    Result := DefaultInterface.ShipToAddr2;
end;

procedure TPurchaseOrderJournalProperties.Set_ShipToAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr2(Param1);
end;

function TPurchaseOrderJournalProperties.Get_ShipToCity: WideString;
begin
    Result := DefaultInterface.ShipToCity;
end;

procedure TPurchaseOrderJournalProperties.Set_ShipToCity(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCity(Param1);
end;

function TPurchaseOrderJournalProperties.Get_ShipToCountry: WideString;
begin
    Result := DefaultInterface.ShipToCountry;
end;

procedure TPurchaseOrderJournalProperties.Set_ShipToCountry(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCountry(Param1);
end;

function TPurchaseOrderJournalProperties.Get_ShipToName: WideString;
begin
    Result := DefaultInterface.ShipToName;
end;

procedure TPurchaseOrderJournalProperties.Set_ShipToName(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToName(Param1);
end;

function TPurchaseOrderJournalProperties.Get_ShipToState: WideString;
begin
    Result := DefaultInterface.ShipToState;
end;

procedure TPurchaseOrderJournalProperties.Set_ShipToState(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToState(Param1);
end;

function TPurchaseOrderJournalProperties.Get_ShipToZipCode: WideString;
begin
    Result := DefaultInterface.ShipToZipCode;
end;

procedure TPurchaseOrderJournalProperties.Set_ShipToZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToZipCode(Param1);
end;

function TPurchaseOrderJournalProperties.Get_ShipVia: WideString;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TPurchaseOrderJournalProperties.Set_ShipVia(const Param1: WideString);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TPurchaseOrderJournalProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TPurchaseOrderJournalProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TPurchaseOrderJournalProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TPurchaseOrderJournalProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TPurchaseOrderJournalProperties.Get_Terms: WideString;
begin
    Result := DefaultInterface.Terms;
end;

procedure TPurchaseOrderJournalProperties.Set_Terms(const Param1: WideString);
begin
  DefaultInterface.Set_Terms(Param1);
end;

function TPurchaseOrderJournalProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TPurchaseOrderJournalProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TPurchaseOrderJournalProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TPurchaseOrderJournalProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TPurchaseOrderJournalProperties.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TPurchaseOrderJournalProperties.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TPurchaseOrderJournalProperties.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TPurchaseOrderJournalProperties.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TPurchaseOrderJournalProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_Unused3: Double;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TPurchaseOrderJournalProperties.Set_Unused3(Param1: Double);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TPurchaseOrderJournalProperties.Get_Unused4: Byte;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TPurchaseOrderJournalProperties.Set_Unused4(Param1: Byte);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TPurchaseOrderJournalProperties.Get_Unused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused5[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_Unused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused5[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TPurchaseOrderJournalProperties.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TPurchaseOrderJournalProperties.Get_Unused7: Double;
begin
    Result := DefaultInterface.Unused7;
end;

procedure TPurchaseOrderJournalProperties.Set_Unused7(Param1: Double);
begin
  DefaultInterface.Set_Unused7(Param1);
end;

function TPurchaseOrderJournalProperties.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TPurchaseOrderJournalProperties.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

function TPurchaseOrderJournalProperties.Get_VendorName: WideString;
begin
    Result := DefaultInterface.VendorName;
end;

procedure TPurchaseOrderJournalProperties.Set_VendorName(const Param1: WideString);
begin
  DefaultInterface.Set_VendorName(Param1);
end;

{$ENDIF}

class function CoSalesOrderJournal.Create: _SalesOrderJournal;
begin
  Result := CreateComObject(CLASS_SalesOrderJournal) as _SalesOrderJournal;
end;

class function CoSalesOrderJournal.CreateRemote(const MachineName: string): _SalesOrderJournal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SalesOrderJournal) as _SalesOrderJournal;
end;

procedure TSalesOrderJournal.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B65EA8D4-65B4-4C7E-A141-232D97058A47}';
    IntfIID:   '{14188EF5-39B9-456D-9222-B03FF50D991B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSalesOrderJournal.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SalesOrderJournal;
  end;
end;

procedure TSalesOrderJournal.ConnectTo(svrIntf: _SalesOrderJournal);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSalesOrderJournal.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSalesOrderJournal.GetDefaultInterface: _SalesOrderJournal;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSalesOrderJournal.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSalesOrderJournalProperties.Create(Self);
{$ENDIF}
end;

destructor TSalesOrderJournal.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSalesOrderJournal.GetServerProperties: TSalesOrderJournalProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSalesOrderJournal.Get_ARAccount: WideString;
begin
    Result := DefaultInterface.ARAccount;
end;

procedure TSalesOrderJournal.Set_ARAccount(const Param1: WideString);
begin
  DefaultInterface.Set_ARAccount(Param1);
end;

function TSalesOrderJournal.Get_ARAmount: Double;
begin
    Result := DefaultInterface.ARAmount;
end;

procedure TSalesOrderJournal.Set_ARAmount(Param1: Double);
begin
  DefaultInterface.Set_ARAmount(Param1);
end;

function TSalesOrderJournal.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TSalesOrderJournal.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TSalesOrderJournal.Get_CloseSalesOrder: WordBool;
begin
    Result := DefaultInterface.CloseSalesOrder;
end;

procedure TSalesOrderJournal.Set_CloseSalesOrder(Param1: WordBool);
begin
  DefaultInterface.Set_CloseSalesOrder(Param1);
end;

function TSalesOrderJournal.Get_CustomerIndex: Integer;
begin
    Result := DefaultInterface.CustomerIndex;
end;

procedure TSalesOrderJournal.Set_CustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_CustomerIndex(Param1);
end;

function TSalesOrderJournal.Get_CustomerName: WideString;
begin
    Result := DefaultInterface.CustomerName;
end;

procedure TSalesOrderJournal.Set_CustomerName(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerName(Param1);
end;

function TSalesOrderJournal.Get_CustomerPO: WideString;
begin
    Result := DefaultInterface.CustomerPO;
end;

procedure TSalesOrderJournal.Set_CustomerPO(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerPO(Param1);
end;

function TSalesOrderJournal.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TSalesOrderJournal.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TSalesOrderJournal.Get_DateDue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateDue;
end;

procedure TSalesOrderJournal.Set_DateDue(Param1: OleVariant);
begin
  DefaultInterface.Set_DateDue(Param1);
end;

function TSalesOrderJournal.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TSalesOrderJournal.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TSalesOrderJournal.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailCustomerIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCustomerIndex[Index];
end;

procedure TSalesOrderJournal.Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCustomerIndex[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TSalesOrderJournal.Set_DetailDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TSalesOrderJournal.Get_DetailExtension(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailExtension[Index];
end;

procedure TSalesOrderJournal.Set_DetailExtension(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailExtension[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailFreightFlag(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFreightFlag[Index];
end;

procedure TSalesOrderJournal.Set_DetailFreightFlag(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFreightFlag[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TSalesOrderJournal.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TSalesOrderJournal.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TSalesOrderJournal.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TSalesOrderJournal.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TSalesOrderJournal.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TSalesOrderJournal.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TSalesOrderJournal.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TSalesOrderJournal.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TSalesOrderJournal.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailSalesTaxAuthority(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailSalesTaxAuthority[Index];
end;

procedure TSalesOrderJournal.Set_DetailSalesTaxAuthority(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailSalesTaxAuthority(Index,Param2);
end;

function TSalesOrderJournal.Get_DetailShippedAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailShippedAmount[Index];
end;

procedure TSalesOrderJournal.Set_DetailShippedAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailShippedAmount[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailShippedQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailShippedQuantity[Index];
end;

procedure TSalesOrderJournal.Set_DetailShippedQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailShippedQuantity[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailSOLine(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailSOLine[Index];
end;

procedure TSalesOrderJournal.Set_DetailSOLine(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailSOLine[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailSOLine2(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailSOLine2[Index];
end;

procedure TSalesOrderJournal.Set_DetailSOLine2(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailSOLine2[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailStockingQuantityOrdered(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantityOrdered[Index];
end;

procedure TSalesOrderJournal.Set_DetailStockingQuantityOrdered(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantityOrdered[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailStockingQuantityShipped(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantityShipped[Index];
end;

procedure TSalesOrderJournal.Set_DetailStockingQuantityShipped(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantityShipped[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TSalesOrderJournal.Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailTaxFlag(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailTaxFlag[Index];
end;

procedure TSalesOrderJournal.Set_DetailTaxFlag(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailTaxFlag[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailTaxType(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailTaxType[Index];
end;

procedure TSalesOrderJournal.Set_DetailTaxType(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailTaxType[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TSalesOrderJournal.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailUMGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailUMGUID[Index];
end;

procedure TSalesOrderJournal.Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailUMGUID(Index,Param2);
end;

function TSalesOrderJournal.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TSalesOrderJournal.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailUnused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused1[Index];
end;

procedure TSalesOrderJournal.Set_DetailUnused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused1[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailUnknown2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnknown2[Index];
end;

procedure TSalesOrderJournal.Set_DetailUnknown2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnknown2[Index] := Param2;
end;

function TSalesOrderJournal.Get_DetailUnused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused3[Index];
end;

procedure TSalesOrderJournal.Set_DetailUnused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused3[Index] := Param2;
end;

function TSalesOrderJournal.Get_DiscountDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DiscountDate;
end;

procedure TSalesOrderJournal.Set_DiscountDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DiscountDate(Param1);
end;

function TSalesOrderJournal.Get_DropShip: WordBool;
begin
    Result := DefaultInterface.DropShip;
end;

procedure TSalesOrderJournal.Set_DropShip(Param1: WordBool);
begin
  DefaultInterface.Set_DropShip(Param1);
end;

function TSalesOrderJournal.Get_DropShipCustomerIndex: Integer;
begin
    Result := DefaultInterface.DropShipCustomerIndex;
end;

procedure TSalesOrderJournal.Set_DropShipCustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_DropShipCustomerIndex(Param1);
end;

function TSalesOrderJournal.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TSalesOrderJournal.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TSalesOrderJournal.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TSalesOrderJournal.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TSalesOrderJournal.Get_InternalNote: WideString;
begin
    Result := DefaultInterface.InternalNote;
end;

procedure TSalesOrderJournal.Set_InternalNote(const Param1: WideString);
begin
  DefaultInterface.Set_InternalNote(Param1);
end;

function TSalesOrderJournal.Get_InvoiceNumber: WideString;
begin
    Result := DefaultInterface.InvoiceNumber;
end;

procedure TSalesOrderJournal.Set_InvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_InvoiceNumber(Param1);
end;

function TSalesOrderJournal.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TSalesOrderJournal.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TSalesOrderJournal.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TSalesOrderJournal.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TSalesOrderJournal.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TSalesOrderJournal.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TSalesOrderJournal.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TSalesOrderJournal.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TSalesOrderJournal.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TSalesOrderJournal.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TSalesOrderJournal.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TSalesOrderJournal.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TSalesOrderJournal.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TSalesOrderJournal.Get_NextSONumber: WideString;
begin
    Result := DefaultInterface.NextSONumber;
end;

procedure TSalesOrderJournal.Set_NextSONumber(const Param1: WideString);
begin
  DefaultInterface.Set_NextSONumber(Param1);
end;

function TSalesOrderJournal.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TSalesOrderJournal.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TSalesOrderJournal.Get_NotePrintsAfterItems: WordBool;
begin
    Result := DefaultInterface.NotePrintsAfterItems;
end;

procedure TSalesOrderJournal.Set_NotePrintsAfterItems(Param1: WordBool);
begin
  DefaultInterface.Set_NotePrintsAfterItems(Param1);
end;

function TSalesOrderJournal.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TSalesOrderJournal.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TSalesOrderJournal.Get_NumSOLines: Byte;
begin
    Result := DefaultInterface.NumSOLines;
end;

procedure TSalesOrderJournal.Set_NumSOLines(Param1: Byte);
begin
  DefaultInterface.Set_NumSOLines(Param1);
end;

function TSalesOrderJournal.Get_NumSOLines2: Smallint;
begin
    Result := DefaultInterface.NumSOLines2;
end;

procedure TSalesOrderJournal.Set_NumSOLines2(Param1: Smallint);
begin
  DefaultInterface.Set_NumSOLines2(Param1);
end;

function TSalesOrderJournal.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TSalesOrderJournal.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TSalesOrderJournal.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TSalesOrderJournal.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TSalesOrderJournal.Get_PrintBeforeInvoiceReference: WordBool;
begin
    Result := DefaultInterface.PrintBeforeInvoiceReference;
end;

procedure TSalesOrderJournal.Set_PrintBeforeInvoiceReference(Param1: WordBool);
begin
  DefaultInterface.Set_PrintBeforeInvoiceReference(Param1);
end;

function TSalesOrderJournal.Get_QuoteGoodThruDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.QuoteGoodThruDate;
end;

procedure TSalesOrderJournal.Set_QuoteGoodThruDate(Param1: OleVariant);
begin
  DefaultInterface.Set_QuoteGoodThruDate(Param1);
end;

function TSalesOrderJournal.Get_QuoteNumber: WideString;
begin
    Result := DefaultInterface.QuoteNumber;
end;

procedure TSalesOrderJournal.Set_QuoteNumber(const Param1: WideString);
begin
  DefaultInterface.Set_QuoteNumber(Param1);
end;

function TSalesOrderJournal.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TSalesOrderJournal.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TSalesOrderJournal.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TSalesOrderJournal.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TSalesOrderJournal.Get_SalesRepID: WideString;
begin
    Result := DefaultInterface.SalesRepID;
end;

procedure TSalesOrderJournal.Set_SalesRepID(const Param1: WideString);
begin
  DefaultInterface.Set_SalesRepID(Param1);
end;

function TSalesOrderJournal.Get_SalesTaxCode: WideString;
begin
    Result := DefaultInterface.SalesTaxCode;
end;

procedure TSalesOrderJournal.Set_SalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_SalesTaxCode(Param1);
end;

function TSalesOrderJournal.Get_ShipByDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShipByDate;
end;

procedure TSalesOrderJournal.Set_ShipByDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ShipByDate(Param1);
end;

function TSalesOrderJournal.Get_ShipToAddr1: WideString;
begin
    Result := DefaultInterface.ShipToAddr1;
end;

procedure TSalesOrderJournal.Set_ShipToAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr1(Param1);
end;

function TSalesOrderJournal.Get_ShipToAddr2: WideString;
begin
    Result := DefaultInterface.ShipToAddr2;
end;

procedure TSalesOrderJournal.Set_ShipToAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr2(Param1);
end;

function TSalesOrderJournal.Get_ShipToCity: WideString;
begin
    Result := DefaultInterface.ShipToCity;
end;

procedure TSalesOrderJournal.Set_ShipToCity(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCity(Param1);
end;

function TSalesOrderJournal.Get_ShipToCountry: WideString;
begin
    Result := DefaultInterface.ShipToCountry;
end;

procedure TSalesOrderJournal.Set_ShipToCountry(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCountry(Param1);
end;

function TSalesOrderJournal.Get_ShipToName: WideString;
begin
    Result := DefaultInterface.ShipToName;
end;

procedure TSalesOrderJournal.Set_ShipToName(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToName(Param1);
end;

function TSalesOrderJournal.Get_ShipToState: WideString;
begin
    Result := DefaultInterface.ShipToState;
end;

procedure TSalesOrderJournal.Set_ShipToState(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToState(Param1);
end;

function TSalesOrderJournal.Get_ShipToZipCode: WideString;
begin
    Result := DefaultInterface.ShipToZipCode;
end;

procedure TSalesOrderJournal.Set_ShipToZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToZipCode(Param1);
end;

function TSalesOrderJournal.Get_ShipVia: WideString;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TSalesOrderJournal.Set_ShipVia(const Param1: WideString);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TSalesOrderJournal.Get_StatementNote: WideString;
begin
    Result := DefaultInterface.StatementNote;
end;

procedure TSalesOrderJournal.Set_StatementNote(const Param1: WideString);
begin
  DefaultInterface.Set_StatementNote(Param1);
end;

function TSalesOrderJournal.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TSalesOrderJournal.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TSalesOrderJournal.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TSalesOrderJournal.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TSalesOrderJournal.Get_Terms: WideString;
begin
    Result := DefaultInterface.Terms;
end;

procedure TSalesOrderJournal.Set_Terms(const Param1: WideString);
begin
  DefaultInterface.Set_Terms(Param1);
end;

function TSalesOrderJournal.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TSalesOrderJournal.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TSalesOrderJournal.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TSalesOrderJournal.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TSalesOrderJournal.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TSalesOrderJournal.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TSalesOrderJournal.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TSalesOrderJournal.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TSalesOrderJournal.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TSalesOrderJournal.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TSalesOrderJournal.Get_Unused3: Double;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TSalesOrderJournal.Set_Unused3(Param1: Double);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TSalesOrderJournal.Get_Unused4: Integer;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TSalesOrderJournal.Set_Unused4(Param1: Integer);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TSalesOrderJournal.Get_Unused5: Byte;
begin
    Result := DefaultInterface.Unused5;
end;

procedure TSalesOrderJournal.Set_Unused5(Param1: Byte);
begin
  DefaultInterface.Set_Unused5(Param1);
end;

function TSalesOrderJournal.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TSalesOrderJournal.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TSalesOrderJournal.Get_Unused7(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused7[Index];
end;

procedure TSalesOrderJournal.Set_Unused7(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused7[Index] := Param2;
end;

function TSalesOrderJournal.Get_Unused8: Double;
begin
    Result := DefaultInterface.Unused8;
end;

procedure TSalesOrderJournal.Set_Unused8(Param1: Double);
begin
  DefaultInterface.Set_Unused8(Param1);
end;

function TSalesOrderJournal.ClearRecord: Smallint;
begin
  Result := DefaultInterface.ClearRecord;
end;

function TSalesOrderJournal.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TSalesOrderJournal.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TSalesOrderJournal.GetEqual(NRecord: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(NRecord);
end;

function TSalesOrderJournal.IncrementBatchCount: Smallint;
begin
  Result := DefaultInterface.IncrementBatchCount;
end;

function TSalesOrderJournal.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TSalesOrderJournal.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TSalesOrderJournal.ReadFirst(Period: Smallint): Smallint;
begin
  Result := DefaultInterface.ReadFirst(Period);
end;

function TSalesOrderJournal.ReadFirstForCustomer(Index: Integer): Smallint;
begin
  Result := DefaultInterface.ReadFirstForCustomer(Index);
end;

function TSalesOrderJournal.ReadNext: Smallint;
begin
  Result := DefaultInterface.ReadNext;
end;

function TSalesOrderJournal.ReadNextByCustomer: Smallint;
begin
  Result := DefaultInterface.ReadNextByCustomer;
end;

function TSalesOrderJournal.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSalesOrderJournalProperties.Create(AServer: TSalesOrderJournal);
begin
  inherited Create;
  FServer := AServer;
end;

function TSalesOrderJournalProperties.GetDefaultInterface: _SalesOrderJournal;
begin
  Result := FServer.DefaultInterface;
end;

function TSalesOrderJournalProperties.Get_ARAccount: WideString;
begin
    Result := DefaultInterface.ARAccount;
end;

procedure TSalesOrderJournalProperties.Set_ARAccount(const Param1: WideString);
begin
  DefaultInterface.Set_ARAccount(Param1);
end;

function TSalesOrderJournalProperties.Get_ARAmount: Double;
begin
    Result := DefaultInterface.ARAmount;
end;

procedure TSalesOrderJournalProperties.Set_ARAmount(Param1: Double);
begin
  DefaultInterface.Set_ARAmount(Param1);
end;

function TSalesOrderJournalProperties.Get_BeginningBalanceFlag: WordBool;
begin
    Result := DefaultInterface.BeginningBalanceFlag;
end;

procedure TSalesOrderJournalProperties.Set_BeginningBalanceFlag(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalanceFlag(Param1);
end;

function TSalesOrderJournalProperties.Get_CloseSalesOrder: WordBool;
begin
    Result := DefaultInterface.CloseSalesOrder;
end;

procedure TSalesOrderJournalProperties.Set_CloseSalesOrder(Param1: WordBool);
begin
  DefaultInterface.Set_CloseSalesOrder(Param1);
end;

function TSalesOrderJournalProperties.Get_CustomerIndex: Integer;
begin
    Result := DefaultInterface.CustomerIndex;
end;

procedure TSalesOrderJournalProperties.Set_CustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_CustomerIndex(Param1);
end;

function TSalesOrderJournalProperties.Get_CustomerName: WideString;
begin
    Result := DefaultInterface.CustomerName;
end;

procedure TSalesOrderJournalProperties.Set_CustomerName(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerName(Param1);
end;

function TSalesOrderJournalProperties.Get_CustomerPO: WideString;
begin
    Result := DefaultInterface.CustomerPO;
end;

procedure TSalesOrderJournalProperties.Set_CustomerPO(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerPO(Param1);
end;

function TSalesOrderJournalProperties.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TSalesOrderJournalProperties.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TSalesOrderJournalProperties.Get_DateDue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateDue;
end;

procedure TSalesOrderJournalProperties.Set_DateDue(Param1: OleVariant);
begin
  DefaultInterface.Set_DateDue(Param1);
end;

function TSalesOrderJournalProperties.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailCustomerIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCustomerIndex[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailCustomerIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCustomerIndex[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailDescription(Index: Smallint; 
                                                             const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TSalesOrderJournalProperties.Get_DetailExtension(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailExtension[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailExtension(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailExtension[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailFreightFlag(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFreightFlag[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailFreightFlag(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFreightFlag[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TSalesOrderJournalProperties.Get_DetailGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGUID[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGUID(Index,Param2);
end;

function TSalesOrderJournalProperties.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailLineNo(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailLineNo[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailLineNo(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailLineNo[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailSalesTaxAuthority(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailSalesTaxAuthority[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailSalesTaxAuthority(Index: Smallint; 
                                                                   const Param2: WideString);
begin
  DefaultInterface.Set_DetailSalesTaxAuthority(Index,Param2);
end;

function TSalesOrderJournalProperties.Get_DetailShippedAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailShippedAmount[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailShippedAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailShippedAmount[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailShippedQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailShippedQuantity[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailShippedQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailShippedQuantity[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailSOLine(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailSOLine[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailSOLine(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailSOLine[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailSOLine2(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailSOLine2[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailSOLine2(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailSOLine2[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailStockingQuantityOrdered(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantityOrdered[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailStockingQuantityOrdered(Index: Smallint; 
                                                                         Param2: Double);
begin
  DefaultInterface.DetailStockingQuantityOrdered[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailStockingQuantityShipped(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantityShipped[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailStockingQuantityShipped(Index: Smallint; 
                                                                         Param2: Double);
begin
  DefaultInterface.DetailStockingQuantityShipped[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailTaxFlag(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailTaxFlag[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailTaxFlag(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailTaxFlag[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailTaxType(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailTaxType[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailTaxType(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailTaxType[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailTrxType(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailTrxType[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailTrxType(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailTrxType[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailUMGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailUMGUID[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailUMGUID(Index,Param2);
end;

function TSalesOrderJournalProperties.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailUnused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused1[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailUnused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused1[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailUnknown2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnknown2[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailUnknown2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnknown2[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DetailUnused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused3[Index];
end;

procedure TSalesOrderJournalProperties.Set_DetailUnused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused3[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_DiscountDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DiscountDate;
end;

procedure TSalesOrderJournalProperties.Set_DiscountDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DiscountDate(Param1);
end;

function TSalesOrderJournalProperties.Get_DropShip: WordBool;
begin
    Result := DefaultInterface.DropShip;
end;

procedure TSalesOrderJournalProperties.Set_DropShip(Param1: WordBool);
begin
  DefaultInterface.Set_DropShip(Param1);
end;

function TSalesOrderJournalProperties.Get_DropShipCustomerIndex: Integer;
begin
    Result := DefaultInterface.DropShipCustomerIndex;
end;

procedure TSalesOrderJournalProperties.Set_DropShipCustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_DropShipCustomerIndex(Param1);
end;

function TSalesOrderJournalProperties.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TSalesOrderJournalProperties.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TSalesOrderJournalProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TSalesOrderJournalProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TSalesOrderJournalProperties.Get_InternalNote: WideString;
begin
    Result := DefaultInterface.InternalNote;
end;

procedure TSalesOrderJournalProperties.Set_InternalNote(const Param1: WideString);
begin
  DefaultInterface.Set_InternalNote(Param1);
end;

function TSalesOrderJournalProperties.Get_InvoiceNumber: WideString;
begin
    Result := DefaultInterface.InvoiceNumber;
end;

procedure TSalesOrderJournalProperties.Set_InvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_InvoiceNumber(Param1);
end;

function TSalesOrderJournalProperties.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TSalesOrderJournalProperties.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TSalesOrderJournalProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TSalesOrderJournalProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TSalesOrderJournalProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TSalesOrderJournalProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TSalesOrderJournalProperties.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TSalesOrderJournalProperties.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TSalesOrderJournalProperties.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TSalesOrderJournalProperties.Get_MaxTrxNumber(Period: Smallint): Smallint;
begin
    Result := DefaultInterface.MaxTrxNumber[Period];
end;

function TSalesOrderJournalProperties.Get_MaxTrxNumberL(Period: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period];
end;

function TSalesOrderJournalProperties.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TSalesOrderJournalProperties.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TSalesOrderJournalProperties.Get_NextSONumber: WideString;
begin
    Result := DefaultInterface.NextSONumber;
end;

procedure TSalesOrderJournalProperties.Set_NextSONumber(const Param1: WideString);
begin
  DefaultInterface.Set_NextSONumber(Param1);
end;

function TSalesOrderJournalProperties.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TSalesOrderJournalProperties.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TSalesOrderJournalProperties.Get_NotePrintsAfterItems: WordBool;
begin
    Result := DefaultInterface.NotePrintsAfterItems;
end;

procedure TSalesOrderJournalProperties.Set_NotePrintsAfterItems(Param1: WordBool);
begin
  DefaultInterface.Set_NotePrintsAfterItems(Param1);
end;

function TSalesOrderJournalProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TSalesOrderJournalProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TSalesOrderJournalProperties.Get_NumSOLines: Byte;
begin
    Result := DefaultInterface.NumSOLines;
end;

procedure TSalesOrderJournalProperties.Set_NumSOLines(Param1: Byte);
begin
  DefaultInterface.Set_NumSOLines(Param1);
end;

function TSalesOrderJournalProperties.Get_NumSOLines2: Smallint;
begin
    Result := DefaultInterface.NumSOLines2;
end;

procedure TSalesOrderJournalProperties.Set_NumSOLines2(Param1: Smallint);
begin
  DefaultInterface.Set_NumSOLines2(Param1);
end;

function TSalesOrderJournalProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TSalesOrderJournalProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TSalesOrderJournalProperties.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TSalesOrderJournalProperties.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TSalesOrderJournalProperties.Get_PrintBeforeInvoiceReference: WordBool;
begin
    Result := DefaultInterface.PrintBeforeInvoiceReference;
end;

procedure TSalesOrderJournalProperties.Set_PrintBeforeInvoiceReference(Param1: WordBool);
begin
  DefaultInterface.Set_PrintBeforeInvoiceReference(Param1);
end;

function TSalesOrderJournalProperties.Get_QuoteGoodThruDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.QuoteGoodThruDate;
end;

procedure TSalesOrderJournalProperties.Set_QuoteGoodThruDate(Param1: OleVariant);
begin
  DefaultInterface.Set_QuoteGoodThruDate(Param1);
end;

function TSalesOrderJournalProperties.Get_QuoteNumber: WideString;
begin
    Result := DefaultInterface.QuoteNumber;
end;

procedure TSalesOrderJournalProperties.Set_QuoteNumber(const Param1: WideString);
begin
  DefaultInterface.Set_QuoteNumber(Param1);
end;

function TSalesOrderJournalProperties.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TSalesOrderJournalProperties.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TSalesOrderJournalProperties.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TSalesOrderJournalProperties.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TSalesOrderJournalProperties.Get_SalesRepID: WideString;
begin
    Result := DefaultInterface.SalesRepID;
end;

procedure TSalesOrderJournalProperties.Set_SalesRepID(const Param1: WideString);
begin
  DefaultInterface.Set_SalesRepID(Param1);
end;

function TSalesOrderJournalProperties.Get_SalesTaxCode: WideString;
begin
    Result := DefaultInterface.SalesTaxCode;
end;

procedure TSalesOrderJournalProperties.Set_SalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_SalesTaxCode(Param1);
end;

function TSalesOrderJournalProperties.Get_ShipByDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShipByDate;
end;

procedure TSalesOrderJournalProperties.Set_ShipByDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ShipByDate(Param1);
end;

function TSalesOrderJournalProperties.Get_ShipToAddr1: WideString;
begin
    Result := DefaultInterface.ShipToAddr1;
end;

procedure TSalesOrderJournalProperties.Set_ShipToAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr1(Param1);
end;

function TSalesOrderJournalProperties.Get_ShipToAddr2: WideString;
begin
    Result := DefaultInterface.ShipToAddr2;
end;

procedure TSalesOrderJournalProperties.Set_ShipToAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddr2(Param1);
end;

function TSalesOrderJournalProperties.Get_ShipToCity: WideString;
begin
    Result := DefaultInterface.ShipToCity;
end;

procedure TSalesOrderJournalProperties.Set_ShipToCity(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCity(Param1);
end;

function TSalesOrderJournalProperties.Get_ShipToCountry: WideString;
begin
    Result := DefaultInterface.ShipToCountry;
end;

procedure TSalesOrderJournalProperties.Set_ShipToCountry(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCountry(Param1);
end;

function TSalesOrderJournalProperties.Get_ShipToName: WideString;
begin
    Result := DefaultInterface.ShipToName;
end;

procedure TSalesOrderJournalProperties.Set_ShipToName(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToName(Param1);
end;

function TSalesOrderJournalProperties.Get_ShipToState: WideString;
begin
    Result := DefaultInterface.ShipToState;
end;

procedure TSalesOrderJournalProperties.Set_ShipToState(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToState(Param1);
end;

function TSalesOrderJournalProperties.Get_ShipToZipCode: WideString;
begin
    Result := DefaultInterface.ShipToZipCode;
end;

procedure TSalesOrderJournalProperties.Set_ShipToZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToZipCode(Param1);
end;

function TSalesOrderJournalProperties.Get_ShipVia: WideString;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TSalesOrderJournalProperties.Set_ShipVia(const Param1: WideString);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TSalesOrderJournalProperties.Get_StatementNote: WideString;
begin
    Result := DefaultInterface.StatementNote;
end;

procedure TSalesOrderJournalProperties.Set_StatementNote(const Param1: WideString);
begin
  DefaultInterface.Set_StatementNote(Param1);
end;

function TSalesOrderJournalProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TSalesOrderJournalProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TSalesOrderJournalProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TSalesOrderJournalProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TSalesOrderJournalProperties.Get_Terms: WideString;
begin
    Result := DefaultInterface.Terms;
end;

procedure TSalesOrderJournalProperties.Set_Terms(const Param1: WideString);
begin
  DefaultInterface.Set_Terms(Param1);
end;

function TSalesOrderJournalProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TSalesOrderJournalProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TSalesOrderJournalProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TSalesOrderJournalProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TSalesOrderJournalProperties.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TSalesOrderJournalProperties.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TSalesOrderJournalProperties.Get_Unused1: Smallint;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TSalesOrderJournalProperties.Set_Unused1(Param1: Smallint);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TSalesOrderJournalProperties.Get_Unused2(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TSalesOrderJournalProperties.Set_Unused2(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_Unused3: Double;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TSalesOrderJournalProperties.Set_Unused3(Param1: Double);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TSalesOrderJournalProperties.Get_Unused4: Integer;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TSalesOrderJournalProperties.Set_Unused4(Param1: Integer);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TSalesOrderJournalProperties.Get_Unused5: Byte;
begin
    Result := DefaultInterface.Unused5;
end;

procedure TSalesOrderJournalProperties.Set_Unused5(Param1: Byte);
begin
  DefaultInterface.Set_Unused5(Param1);
end;

function TSalesOrderJournalProperties.Get_Unused6(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused6[Index];
end;

procedure TSalesOrderJournalProperties.Set_Unused6(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused6[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_Unused7(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused7[Index];
end;

procedure TSalesOrderJournalProperties.Set_Unused7(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused7[Index] := Param2;
end;

function TSalesOrderJournalProperties.Get_Unused8: Double;
begin
    Result := DefaultInterface.Unused8;
end;

procedure TSalesOrderJournalProperties.Set_Unused8(Param1: Double);
begin
  DefaultInterface.Set_Unused8(Param1);
end;

{$ENDIF}

class function CoPhase.Create: _Phase;
begin
  Result := CreateComObject(CLASS_Phase) as _Phase;
end;

class function CoPhase.CreateRemote(const MachineName: string): _Phase;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Phase) as _Phase;
end;

procedure TPhase.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C4403A67-4D78-4C9A-ABBC-8B44D817A329}';
    IntfIID:   '{1920C000-56E7-493D-A454-3A53A6687C59}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPhase.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Phase;
  end;
end;

procedure TPhase.ConnectTo(svrIntf: _Phase);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPhase.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPhase.GetDefaultInterface: _Phase;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TPhase.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TPhaseProperties.Create(Self);
{$ENDIF}
end;

destructor TPhase.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TPhase.GetServerProperties: TPhaseProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TPhase.Get_CostType: WideString;
begin
    Result := DefaultInterface.CostType;
end;

procedure TPhase.Set_CostType(const Param1: WideString);
begin
  DefaultInterface.Set_CostType(Param1);
end;

function TPhase.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TPhase.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TPhase.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TPhase.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TPhase.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TPhase.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TPhase.Get_PhaseID: WideString;
begin
    Result := DefaultInterface.PhaseID;
end;

procedure TPhase.Set_PhaseID(const Param1: WideString);
begin
  DefaultInterface.Set_PhaseID(Param1);
end;

function TPhase.Get_UseCostCodes: WordBool;
begin
    Result := DefaultInterface.UseCostCodes;
end;

procedure TPhase.Set_UseCostCodes(Param1: WordBool);
begin
  DefaultInterface.Set_UseCostCodes(Param1);
end;

function TPhase.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TPhase.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TPhase.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TPhase.GetEqual(const ID: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(ID);
end;

function TPhase.GetForIndex(Index: Integer): Smallint;
begin
  Result := DefaultInterface.GetForIndex(Index);
end;

function TPhase.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TPhase.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TPhase.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TPhase.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TPhase.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TPhase.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TPhase.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TPhaseProperties.Create(AServer: TPhase);
begin
  inherited Create;
  FServer := AServer;
end;

function TPhaseProperties.GetDefaultInterface: _Phase;
begin
  Result := FServer.DefaultInterface;
end;

function TPhaseProperties.Get_CostType: WideString;
begin
    Result := DefaultInterface.CostType;
end;

procedure TPhaseProperties.Set_CostType(const Param1: WideString);
begin
  DefaultInterface.Set_CostType(Param1);
end;

function TPhaseProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TPhaseProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TPhaseProperties.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TPhaseProperties.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TPhaseProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TPhaseProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TPhaseProperties.Get_PhaseID: WideString;
begin
    Result := DefaultInterface.PhaseID;
end;

procedure TPhaseProperties.Set_PhaseID(const Param1: WideString);
begin
  DefaultInterface.Set_PhaseID(Param1);
end;

function TPhaseProperties.Get_UseCostCodes: WordBool;
begin
    Result := DefaultInterface.UseCostCodes;
end;

procedure TPhaseProperties.Set_UseCostCodes(Param1: WordBool);
begin
  DefaultInterface.Set_UseCostCodes(Param1);
end;

{$ENDIF}

class function CoReceiptTag.Create: _ReceiptTag;
begin
  Result := CreateComObject(CLASS_ReceiptTag) as _ReceiptTag;
end;

class function CoReceiptTag.CreateRemote(const MachineName: string): _ReceiptTag;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReceiptTag) as _ReceiptTag;
end;

procedure TReceiptTag.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A8B1880A-877F-4B42-89B4-73538459BE73}';
    IntfIID:   '{AD03D005-0348-437B-949B-3D9D9B038828}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TReceiptTag.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _ReceiptTag;
  end;
end;

procedure TReceiptTag.ConnectTo(svrIntf: _ReceiptTag);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TReceiptTag.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TReceiptTag.GetDefaultInterface: _ReceiptTag;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TReceiptTag.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TReceiptTagProperties.Create(Self);
{$ENDIF}
end;

destructor TReceiptTag.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TReceiptTag.GetServerProperties: TReceiptTagProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TReceiptTag.Get_JournalIDA: Smallint;
begin
    Result := DefaultInterface.JournalIDA;
end;

procedure TReceiptTag.Set_JournalIDA(Param1: Smallint);
begin
  DefaultInterface.Set_JournalIDA(Param1);
end;

function TReceiptTag.Get_JournalIDB: Smallint;
begin
    Result := DefaultInterface.JournalIDB;
end;

procedure TReceiptTag.Set_JournalIDB(Param1: Smallint);
begin
  DefaultInterface.Set_JournalIDB(Param1);
end;

function TReceiptTag.Get_KeyA: Double;
begin
    Result := DefaultInterface.KeyA;
end;

procedure TReceiptTag.Set_KeyA(Param1: Double);
begin
  DefaultInterface.Set_KeyA(Param1);
end;

function TReceiptTag.Get_KeyB: Double;
begin
    Result := DefaultInterface.KeyB;
end;

procedure TReceiptTag.Set_KeyB(Param1: Double);
begin
  DefaultInterface.Set_KeyB(Param1);
end;

function TReceiptTag.Get_NRecordA: Integer;
begin
    Result := DefaultInterface.NRecordA;
end;

procedure TReceiptTag.Set_NRecordA(Param1: Integer);
begin
  DefaultInterface.Set_NRecordA(Param1);
end;

function TReceiptTag.Get_NRecordB: Integer;
begin
    Result := DefaultInterface.NRecordB;
end;

procedure TReceiptTag.Set_NRecordB(Param1: Integer);
begin
  DefaultInterface.Set_NRecordB(Param1);
end;

function TReceiptTag.Get_PeriodA: Smallint;
begin
    Result := DefaultInterface.PeriodA;
end;

procedure TReceiptTag.Set_PeriodA(Param1: Smallint);
begin
  DefaultInterface.Set_PeriodA(Param1);
end;

function TReceiptTag.Get_PeriodB: Smallint;
begin
    Result := DefaultInterface.PeriodB;
end;

procedure TReceiptTag.Set_PeriodB(Param1: Smallint);
begin
  DefaultInterface.Set_PeriodB(Param1);
end;

function TReceiptTag.Get_Subindex1A: Byte;
begin
    Result := DefaultInterface.Subindex1A;
end;

procedure TReceiptTag.Set_Subindex1A(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1A(Param1);
end;

function TReceiptTag.Get_Subindex1B: Byte;
begin
    Result := DefaultInterface.Subindex1B;
end;

procedure TReceiptTag.Set_Subindex1B(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1B(Param1);
end;

function TReceiptTag.Get_Subindex2A: Byte;
begin
    Result := DefaultInterface.Subindex2A;
end;

procedure TReceiptTag.Set_Subindex2A(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2A(Param1);
end;

function TReceiptTag.Get_Subindex2B: Byte;
begin
    Result := DefaultInterface.Subindex2B;
end;

procedure TReceiptTag.Set_Subindex2B(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2B(Param1);
end;

function TReceiptTag.Get_TrxNumberA: Smallint;
begin
    Result := DefaultInterface.TrxNumberA;
end;

procedure TReceiptTag.Set_TrxNumberA(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumberA(Param1);
end;

function TReceiptTag.Get_TrxNumberB: Smallint;
begin
    Result := DefaultInterface.TrxNumberB;
end;

procedure TReceiptTag.Set_TrxNumberB(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumberB(Param1);
end;

function TReceiptTag.Get_TrxNumberLA: Integer;
begin
    Result := DefaultInterface.TrxNumberLA;
end;

procedure TReceiptTag.Set_TrxNumberLA(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberLA(Param1);
end;

function TReceiptTag.Get_TrxNumberLB: Integer;
begin
    Result := DefaultInterface.TrxNumberLB;
end;

procedure TReceiptTag.Set_TrxNumberLB(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberLB(Param1);
end;

function TReceiptTag.Get_UnknownDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.UnknownDate;
end;

procedure TReceiptTag.Set_UnknownDate(Param1: OleVariant);
begin
  DefaultInterface.Set_UnknownDate(Param1);
end;

function TReceiptTag.Get_Unknown1: Smallint;
begin
    Result := DefaultInterface.Unknown1;
end;

procedure TReceiptTag.Set_Unknown1(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown1(Param1);
end;

function TReceiptTag.Get_Unknown2: Double;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TReceiptTag.Set_Unknown2(Param1: Double);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TReceiptTag.Get_Unknown3: Byte;
begin
    Result := DefaultInterface.Unknown3;
end;

procedure TReceiptTag.Set_Unknown3(Param1: Byte);
begin
  DefaultInterface.Set_Unknown3(Param1);
end;

function TReceiptTag.Get_Unknown4: Byte;
begin
    Result := DefaultInterface.Unknown4;
end;

procedure TReceiptTag.Set_Unknown4(Param1: Byte);
begin
  DefaultInterface.Set_Unknown4(Param1);
end;

function TReceiptTag.Get_Unknown5: Byte;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TReceiptTag.Set_Unknown5(Param1: Byte);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

function TReceiptTag.Get_Unknown6: Byte;
begin
    Result := DefaultInterface.Unknown6;
end;

procedure TReceiptTag.Set_Unknown6(Param1: Byte);
begin
  DefaultInterface.Set_Unknown6(Param1);
end;

function TReceiptTag.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TReceiptTag.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TReceiptTag.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TReceiptTag.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TReceiptTag.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TReceiptTag.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TReceiptTag.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TReceiptTag.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TReceiptTag.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TReceiptTag.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TReceiptTagProperties.Create(AServer: TReceiptTag);
begin
  inherited Create;
  FServer := AServer;
end;

function TReceiptTagProperties.GetDefaultInterface: _ReceiptTag;
begin
  Result := FServer.DefaultInterface;
end;

function TReceiptTagProperties.Get_JournalIDA: Smallint;
begin
    Result := DefaultInterface.JournalIDA;
end;

procedure TReceiptTagProperties.Set_JournalIDA(Param1: Smallint);
begin
  DefaultInterface.Set_JournalIDA(Param1);
end;

function TReceiptTagProperties.Get_JournalIDB: Smallint;
begin
    Result := DefaultInterface.JournalIDB;
end;

procedure TReceiptTagProperties.Set_JournalIDB(Param1: Smallint);
begin
  DefaultInterface.Set_JournalIDB(Param1);
end;

function TReceiptTagProperties.Get_KeyA: Double;
begin
    Result := DefaultInterface.KeyA;
end;

procedure TReceiptTagProperties.Set_KeyA(Param1: Double);
begin
  DefaultInterface.Set_KeyA(Param1);
end;

function TReceiptTagProperties.Get_KeyB: Double;
begin
    Result := DefaultInterface.KeyB;
end;

procedure TReceiptTagProperties.Set_KeyB(Param1: Double);
begin
  DefaultInterface.Set_KeyB(Param1);
end;

function TReceiptTagProperties.Get_NRecordA: Integer;
begin
    Result := DefaultInterface.NRecordA;
end;

procedure TReceiptTagProperties.Set_NRecordA(Param1: Integer);
begin
  DefaultInterface.Set_NRecordA(Param1);
end;

function TReceiptTagProperties.Get_NRecordB: Integer;
begin
    Result := DefaultInterface.NRecordB;
end;

procedure TReceiptTagProperties.Set_NRecordB(Param1: Integer);
begin
  DefaultInterface.Set_NRecordB(Param1);
end;

function TReceiptTagProperties.Get_PeriodA: Smallint;
begin
    Result := DefaultInterface.PeriodA;
end;

procedure TReceiptTagProperties.Set_PeriodA(Param1: Smallint);
begin
  DefaultInterface.Set_PeriodA(Param1);
end;

function TReceiptTagProperties.Get_PeriodB: Smallint;
begin
    Result := DefaultInterface.PeriodB;
end;

procedure TReceiptTagProperties.Set_PeriodB(Param1: Smallint);
begin
  DefaultInterface.Set_PeriodB(Param1);
end;

function TReceiptTagProperties.Get_Subindex1A: Byte;
begin
    Result := DefaultInterface.Subindex1A;
end;

procedure TReceiptTagProperties.Set_Subindex1A(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1A(Param1);
end;

function TReceiptTagProperties.Get_Subindex1B: Byte;
begin
    Result := DefaultInterface.Subindex1B;
end;

procedure TReceiptTagProperties.Set_Subindex1B(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1B(Param1);
end;

function TReceiptTagProperties.Get_Subindex2A: Byte;
begin
    Result := DefaultInterface.Subindex2A;
end;

procedure TReceiptTagProperties.Set_Subindex2A(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2A(Param1);
end;

function TReceiptTagProperties.Get_Subindex2B: Byte;
begin
    Result := DefaultInterface.Subindex2B;
end;

procedure TReceiptTagProperties.Set_Subindex2B(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2B(Param1);
end;

function TReceiptTagProperties.Get_TrxNumberA: Smallint;
begin
    Result := DefaultInterface.TrxNumberA;
end;

procedure TReceiptTagProperties.Set_TrxNumberA(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumberA(Param1);
end;

function TReceiptTagProperties.Get_TrxNumberB: Smallint;
begin
    Result := DefaultInterface.TrxNumberB;
end;

procedure TReceiptTagProperties.Set_TrxNumberB(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumberB(Param1);
end;

function TReceiptTagProperties.Get_TrxNumberLA: Integer;
begin
    Result := DefaultInterface.TrxNumberLA;
end;

procedure TReceiptTagProperties.Set_TrxNumberLA(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberLA(Param1);
end;

function TReceiptTagProperties.Get_TrxNumberLB: Integer;
begin
    Result := DefaultInterface.TrxNumberLB;
end;

procedure TReceiptTagProperties.Set_TrxNumberLB(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberLB(Param1);
end;

function TReceiptTagProperties.Get_UnknownDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.UnknownDate;
end;

procedure TReceiptTagProperties.Set_UnknownDate(Param1: OleVariant);
begin
  DefaultInterface.Set_UnknownDate(Param1);
end;

function TReceiptTagProperties.Get_Unknown1: Smallint;
begin
    Result := DefaultInterface.Unknown1;
end;

procedure TReceiptTagProperties.Set_Unknown1(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown1(Param1);
end;

function TReceiptTagProperties.Get_Unknown2: Double;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TReceiptTagProperties.Set_Unknown2(Param1: Double);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TReceiptTagProperties.Get_Unknown3: Byte;
begin
    Result := DefaultInterface.Unknown3;
end;

procedure TReceiptTagProperties.Set_Unknown3(Param1: Byte);
begin
  DefaultInterface.Set_Unknown3(Param1);
end;

function TReceiptTagProperties.Get_Unknown4: Byte;
begin
    Result := DefaultInterface.Unknown4;
end;

procedure TReceiptTagProperties.Set_Unknown4(Param1: Byte);
begin
  DefaultInterface.Set_Unknown4(Param1);
end;

function TReceiptTagProperties.Get_Unknown5: Byte;
begin
    Result := DefaultInterface.Unknown5;
end;

procedure TReceiptTagProperties.Set_Unknown5(Param1: Byte);
begin
  DefaultInterface.Set_Unknown5(Param1);
end;

function TReceiptTagProperties.Get_Unknown6: Byte;
begin
    Result := DefaultInterface.Unknown6;
end;

procedure TReceiptTagProperties.Set_Unknown6(Param1: Byte);
begin
  DefaultInterface.Set_Unknown6(Param1);
end;

{$ENDIF}

class function CoMemorizedTransactions.Create: _MemorizedTransactions;
begin
  Result := CreateComObject(CLASS_MemorizedTransactions) as _MemorizedTransactions;
end;

class function CoMemorizedTransactions.CreateRemote(const MachineName: string): _MemorizedTransactions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MemorizedTransactions) as _MemorizedTransactions;
end;

procedure TMemorizedTransactions.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{477B24C6-3A9A-401E-BA07-DD150F298C8A}';
    IntfIID:   '{A9B269CE-B5C4-47FF-88E0-FB7D80C3345C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMemorizedTransactions.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _MemorizedTransactions;
  end;
end;

procedure TMemorizedTransactions.ConnectTo(svrIntf: _MemorizedTransactions);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMemorizedTransactions.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMemorizedTransactions.GetDefaultInterface: _MemorizedTransactions;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMemorizedTransactions.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMemorizedTransactionsProperties.Create(Self);
{$ENDIF}
end;

destructor TMemorizedTransactions.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMemorizedTransactions.GetServerProperties: TMemorizedTransactionsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMemorizedTransactions.Get_Account: WideString;
begin
    Result := DefaultInterface.Account;
end;

procedure TMemorizedTransactions.Set_Account(const Param1: WideString);
begin
  DefaultInterface.Set_Account(Param1);
end;

function TMemorizedTransactions.Get_AddrAddr1: WideString;
begin
    Result := DefaultInterface.AddrAddr1;
end;

procedure TMemorizedTransactions.Set_AddrAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_AddrAddr1(Param1);
end;

function TMemorizedTransactions.Get_AddrAddr2: WideString;
begin
    Result := DefaultInterface.AddrAddr2;
end;

procedure TMemorizedTransactions.Set_AddrAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_AddrAddr2(Param1);
end;

function TMemorizedTransactions.Get_AddrCity: WideString;
begin
    Result := DefaultInterface.AddrCity;
end;

procedure TMemorizedTransactions.Set_AddrCity(const Param1: WideString);
begin
  DefaultInterface.Set_AddrCity(Param1);
end;

function TMemorizedTransactions.Get_AddrCountry: WideString;
begin
    Result := DefaultInterface.AddrCountry;
end;

procedure TMemorizedTransactions.Set_AddrCountry(const Param1: WideString);
begin
  DefaultInterface.Set_AddrCountry(Param1);
end;

function TMemorizedTransactions.Get_AddressPresent: WordBool;
begin
    Result := DefaultInterface.AddressPresent;
end;

procedure TMemorizedTransactions.Set_AddressPresent(Param1: WordBool);
begin
  DefaultInterface.Set_AddressPresent(Param1);
end;

function TMemorizedTransactions.Get_AddrName: WideString;
begin
    Result := DefaultInterface.AddrName;
end;

procedure TMemorizedTransactions.Set_AddrName(const Param1: WideString);
begin
  DefaultInterface.Set_AddrName(Param1);
end;

function TMemorizedTransactions.Get_AddrState: WideString;
begin
    Result := DefaultInterface.AddrState;
end;

procedure TMemorizedTransactions.Set_AddrState(const Param1: WideString);
begin
  DefaultInterface.Set_AddrState(Param1);
end;

function TMemorizedTransactions.Get_AddrZipCode: WideString;
begin
    Result := DefaultInterface.AddrZipCode;
end;

procedure TMemorizedTransactions.Set_AddrZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_AddrZipCode(Param1);
end;

function TMemorizedTransactions.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TMemorizedTransactions.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TMemorizedTransactions.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TMemorizedTransactions.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TMemorizedTransactions.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TMemorizedTransactions.Set_DetailDescription(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TMemorizedTransactions.Get_DetailFreightFlag(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFreightFlag[Index];
end;

procedure TMemorizedTransactions.Set_DetailFreightFlag(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFreightFlag[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TMemorizedTransactions.Set_DetailGLAccount(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TMemorizedTransactions.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TMemorizedTransactions.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TMemorizedTransactions.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TMemorizedTransactions.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TMemorizedTransactions.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TMemorizedTransactions.Set_DetailStockingQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TMemorizedTransactions.Set_DetailStockingUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailTaxCode(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailTaxCode[Index];
end;

procedure TMemorizedTransactions.Set_DetailTaxCode(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailTaxCode[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailUMGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailUMGUID[Index];
end;

procedure TMemorizedTransactions.Set_DetailUMGUID(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_DetailUMGUID(Index,Param2);
end;

function TMemorizedTransactions.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TMemorizedTransactions.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailUnused1(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailUnused1[Index];
end;

procedure TMemorizedTransactions.Set_DetailUnused1(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailUnused1[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailUnused2(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused2[Index1, Index2];
end;

procedure TMemorizedTransactions.Set_DetailUnused2(Index1: Smallint; Index2: Smallint; Param3: Byte);
begin
  DefaultInterface.DetailUnused2[Index1, Index2] := Param3;
end;

function TMemorizedTransactions.Get_DetailUnused3(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailUnused3[Index];
end;

procedure TMemorizedTransactions.Set_DetailUnused3(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailUnused3[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailUnused4(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused4[Index];
end;

procedure TMemorizedTransactions.Set_DetailUnused4(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused4[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailUnused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused5[Index];
end;

procedure TMemorizedTransactions.Set_DetailUnused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused5[Index] := Param2;
end;

function TMemorizedTransactions.Get_DetailUnused6(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused6[Index1, Index2];
end;

procedure TMemorizedTransactions.Set_DetailUnused6(Index1: Smallint; Index2: Smallint; Param3: Byte);
begin
  DefaultInterface.DetailUnused6[Index1, Index2] := Param3;
end;

function TMemorizedTransactions.Get_DropShip: WordBool;
begin
    Result := DefaultInterface.DropShip;
end;

procedure TMemorizedTransactions.Set_DropShip(Param1: WordBool);
begin
  DefaultInterface.Set_DropShip(Param1);
end;

function TMemorizedTransactions.Get_DropShipCustomerIndex: Integer;
begin
    Result := DefaultInterface.DropShipCustomerIndex;
end;

procedure TMemorizedTransactions.Set_DropShipCustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_DropShipCustomerIndex(Param1);
end;

function TMemorizedTransactions.Get_ID: WideString;
begin
    Result := DefaultInterface.ID;
end;

procedure TMemorizedTransactions.Set_ID(const Param1: WideString);
begin
  DefaultInterface.Set_ID(Param1);
end;

function TMemorizedTransactions.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TMemorizedTransactions.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TMemorizedTransactions.Get_Memo: WideString;
begin
    Result := DefaultInterface.Memo;
end;

procedure TMemorizedTransactions.Set_Memo(const Param1: WideString);
begin
  DefaultInterface.Set_Memo(Param1);
end;

function TMemorizedTransactions.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TMemorizedTransactions.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TMemorizedTransactions.Get_RecordType: Smallint;
begin
    Result := DefaultInterface.RecordType;
end;

procedure TMemorizedTransactions.Set_RecordType(Param1: Smallint);
begin
  DefaultInterface.Set_RecordType(Param1);
end;

function TMemorizedTransactions.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TMemorizedTransactions.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TMemorizedTransactions.Get_ReverseTransaction: WordBool;
begin
    Result := DefaultInterface.ReverseTransaction;
end;

procedure TMemorizedTransactions.Set_ReverseTransaction(Param1: WordBool);
begin
  DefaultInterface.Set_ReverseTransaction(Param1);
end;

function TMemorizedTransactions.Get_ShipToIndex: Smallint;
begin
    Result := DefaultInterface.ShipToIndex;
end;

procedure TMemorizedTransactions.Set_ShipToIndex(Param1: Smallint);
begin
  DefaultInterface.Set_ShipToIndex(Param1);
end;

function TMemorizedTransactions.Get_TotalAmount: Double;
begin
    Result := DefaultInterface.TotalAmount;
end;

procedure TMemorizedTransactions.Set_TotalAmount(Param1: Double);
begin
  DefaultInterface.Set_TotalAmount(Param1);
end;

function TMemorizedTransactions.Get_TransactionID: WideString;
begin
    Result := DefaultInterface.TransactionID;
end;

procedure TMemorizedTransactions.Set_TransactionID(const Param1: WideString);
begin
  DefaultInterface.Set_TransactionID(Param1);
end;

function TMemorizedTransactions.Get_Unknown1: Smallint;
begin
    Result := DefaultInterface.Unknown1;
end;

procedure TMemorizedTransactions.Set_Unknown1(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown1(Param1);
end;

function TMemorizedTransactions.Get_Unknown2: Smallint;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TMemorizedTransactions.Set_Unknown2(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TMemorizedTransactions.Get_Unused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused3[Index];
end;

procedure TMemorizedTransactions.Set_Unused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused3[Index] := Param2;
end;

function TMemorizedTransactions.Get_Unused4: Smallint;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TMemorizedTransactions.Set_Unused4(Param1: Smallint);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TMemorizedTransactions.Get_Unused5: Byte;
begin
    Result := DefaultInterface.Unused5;
end;

procedure TMemorizedTransactions.Set_Unused5(Param1: Byte);
begin
  DefaultInterface.Set_Unused5(Param1);
end;

function TMemorizedTransactions.ClearRecord: Smallint;
begin
  Result := DefaultInterface.ClearRecord;
end;

function TMemorizedTransactions.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TMemorizedTransactions.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TMemorizedTransactions.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TMemorizedTransactions.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TMemorizedTransactions.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TMemorizedTransactions.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TMemorizedTransactions.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TMemorizedTransactions.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TMemorizedTransactions.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TMemorizedTransactions.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMemorizedTransactionsProperties.Create(AServer: TMemorizedTransactions);
begin
  inherited Create;
  FServer := AServer;
end;

function TMemorizedTransactionsProperties.GetDefaultInterface: _MemorizedTransactions;
begin
  Result := FServer.DefaultInterface;
end;

function TMemorizedTransactionsProperties.Get_Account: WideString;
begin
    Result := DefaultInterface.Account;
end;

procedure TMemorizedTransactionsProperties.Set_Account(const Param1: WideString);
begin
  DefaultInterface.Set_Account(Param1);
end;

function TMemorizedTransactionsProperties.Get_AddrAddr1: WideString;
begin
    Result := DefaultInterface.AddrAddr1;
end;

procedure TMemorizedTransactionsProperties.Set_AddrAddr1(const Param1: WideString);
begin
  DefaultInterface.Set_AddrAddr1(Param1);
end;

function TMemorizedTransactionsProperties.Get_AddrAddr2: WideString;
begin
    Result := DefaultInterface.AddrAddr2;
end;

procedure TMemorizedTransactionsProperties.Set_AddrAddr2(const Param1: WideString);
begin
  DefaultInterface.Set_AddrAddr2(Param1);
end;

function TMemorizedTransactionsProperties.Get_AddrCity: WideString;
begin
    Result := DefaultInterface.AddrCity;
end;

procedure TMemorizedTransactionsProperties.Set_AddrCity(const Param1: WideString);
begin
  DefaultInterface.Set_AddrCity(Param1);
end;

function TMemorizedTransactionsProperties.Get_AddrCountry: WideString;
begin
    Result := DefaultInterface.AddrCountry;
end;

procedure TMemorizedTransactionsProperties.Set_AddrCountry(const Param1: WideString);
begin
  DefaultInterface.Set_AddrCountry(Param1);
end;

function TMemorizedTransactionsProperties.Get_AddressPresent: WordBool;
begin
    Result := DefaultInterface.AddressPresent;
end;

procedure TMemorizedTransactionsProperties.Set_AddressPresent(Param1: WordBool);
begin
  DefaultInterface.Set_AddressPresent(Param1);
end;

function TMemorizedTransactionsProperties.Get_AddrName: WideString;
begin
    Result := DefaultInterface.AddrName;
end;

procedure TMemorizedTransactionsProperties.Set_AddrName(const Param1: WideString);
begin
  DefaultInterface.Set_AddrName(Param1);
end;

function TMemorizedTransactionsProperties.Get_AddrState: WideString;
begin
    Result := DefaultInterface.AddrState;
end;

procedure TMemorizedTransactionsProperties.Set_AddrState(const Param1: WideString);
begin
  DefaultInterface.Set_AddrState(Param1);
end;

function TMemorizedTransactionsProperties.Get_AddrZipCode: WideString;
begin
    Result := DefaultInterface.AddrZipCode;
end;

procedure TMemorizedTransactionsProperties.Set_AddrZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_AddrZipCode(Param1);
end;

function TMemorizedTransactionsProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TMemorizedTransactionsProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TMemorizedTransactionsProperties.Get_DetailAmount(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailAmount[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailAmount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailAmount[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailCostIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailCostIndex[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailCostIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailCostIndex[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailDescription(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailDescription[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailDescription(Index: Smallint; 
                                                                 const Param2: WideString);
begin
  DefaultInterface.Set_DetailDescription(Index,Param2);
end;

function TMemorizedTransactionsProperties.Get_DetailFreightFlag(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.DetailFreightFlag[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailFreightFlag(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.DetailFreightFlag[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailGLAccount(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailGLAccount[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailGLAccount(Index: Smallint; 
                                                               const Param2: WideString);
begin
  DefaultInterface.Set_DetailGLAccount(Index,Param2);
end;

function TMemorizedTransactionsProperties.Get_DetailItemIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailItemIndex[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailItemIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailItemIndex[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailJobIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailJobIndex[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailJobIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailJobIndex[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailPhaseIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.DetailPhaseIndex[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailPhaseIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.DetailPhaseIndex[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailQuantity[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailQuantity[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailStockingQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingQuantity[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailStockingQuantity(Index: Smallint; 
                                                                      Param2: Double);
begin
  DefaultInterface.DetailStockingQuantity[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailStockingUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailStockingUnitPrice[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailStockingUnitPrice(Index: Smallint; 
                                                                       Param2: Double);
begin
  DefaultInterface.DetailStockingUnitPrice[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailTaxCode(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailTaxCode[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailTaxCode(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailTaxCode[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailUMGUID(Index: Smallint): WideString;
begin
    Result := DefaultInterface.DetailUMGUID[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailUMGUID(Index: Smallint; 
                                                            const Param2: WideString);
begin
  DefaultInterface.Set_DetailUMGUID(Index,Param2);
end;

function TMemorizedTransactionsProperties.Get_DetailUnitPrice(Index: Smallint): Double;
begin
    Result := DefaultInterface.DetailUnitPrice[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailUnitPrice(Index: Smallint; Param2: Double);
begin
  DefaultInterface.DetailUnitPrice[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailUnused1(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailUnused1[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailUnused1(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailUnused1[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailUnused2(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused2[Index1, Index2];
end;

procedure TMemorizedTransactionsProperties.Set_DetailUnused2(Index1: Smallint; Index2: Smallint; 
                                                             Param3: Byte);
begin
  DefaultInterface.DetailUnused2[Index1, Index2] := Param3;
end;

function TMemorizedTransactionsProperties.Get_DetailUnused3(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.DetailUnused3[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailUnused3(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.DetailUnused3[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailUnused4(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused4[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailUnused4(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused4[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailUnused5(Index: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused5[Index];
end;

procedure TMemorizedTransactionsProperties.Set_DetailUnused5(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.DetailUnused5[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_DetailUnused6(Index1: Smallint; Index2: Smallint): Byte;
begin
    Result := DefaultInterface.DetailUnused6[Index1, Index2];
end;

procedure TMemorizedTransactionsProperties.Set_DetailUnused6(Index1: Smallint; Index2: Smallint; 
                                                             Param3: Byte);
begin
  DefaultInterface.DetailUnused6[Index1, Index2] := Param3;
end;

function TMemorizedTransactionsProperties.Get_DropShip: WordBool;
begin
    Result := DefaultInterface.DropShip;
end;

procedure TMemorizedTransactionsProperties.Set_DropShip(Param1: WordBool);
begin
  DefaultInterface.Set_DropShip(Param1);
end;

function TMemorizedTransactionsProperties.Get_DropShipCustomerIndex: Integer;
begin
    Result := DefaultInterface.DropShipCustomerIndex;
end;

procedure TMemorizedTransactionsProperties.Set_DropShipCustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_DropShipCustomerIndex(Param1);
end;

function TMemorizedTransactionsProperties.Get_ID: WideString;
begin
    Result := DefaultInterface.ID;
end;

procedure TMemorizedTransactionsProperties.Set_ID(const Param1: WideString);
begin
  DefaultInterface.Set_ID(Param1);
end;

function TMemorizedTransactionsProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TMemorizedTransactionsProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TMemorizedTransactionsProperties.Get_Memo: WideString;
begin
    Result := DefaultInterface.Memo;
end;

procedure TMemorizedTransactionsProperties.Set_Memo(const Param1: WideString);
begin
  DefaultInterface.Set_Memo(Param1);
end;

function TMemorizedTransactionsProperties.Get_NDistributions: Smallint;
begin
    Result := DefaultInterface.NDistributions;
end;

procedure TMemorizedTransactionsProperties.Set_NDistributions(Param1: Smallint);
begin
  DefaultInterface.Set_NDistributions(Param1);
end;

function TMemorizedTransactionsProperties.Get_RecordType: Smallint;
begin
    Result := DefaultInterface.RecordType;
end;

procedure TMemorizedTransactionsProperties.Set_RecordType(Param1: Smallint);
begin
  DefaultInterface.Set_RecordType(Param1);
end;

function TMemorizedTransactionsProperties.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TMemorizedTransactionsProperties.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TMemorizedTransactionsProperties.Get_ReverseTransaction: WordBool;
begin
    Result := DefaultInterface.ReverseTransaction;
end;

procedure TMemorizedTransactionsProperties.Set_ReverseTransaction(Param1: WordBool);
begin
  DefaultInterface.Set_ReverseTransaction(Param1);
end;

function TMemorizedTransactionsProperties.Get_ShipToIndex: Smallint;
begin
    Result := DefaultInterface.ShipToIndex;
end;

procedure TMemorizedTransactionsProperties.Set_ShipToIndex(Param1: Smallint);
begin
  DefaultInterface.Set_ShipToIndex(Param1);
end;

function TMemorizedTransactionsProperties.Get_TotalAmount: Double;
begin
    Result := DefaultInterface.TotalAmount;
end;

procedure TMemorizedTransactionsProperties.Set_TotalAmount(Param1: Double);
begin
  DefaultInterface.Set_TotalAmount(Param1);
end;

function TMemorizedTransactionsProperties.Get_TransactionID: WideString;
begin
    Result := DefaultInterface.TransactionID;
end;

procedure TMemorizedTransactionsProperties.Set_TransactionID(const Param1: WideString);
begin
  DefaultInterface.Set_TransactionID(Param1);
end;

function TMemorizedTransactionsProperties.Get_Unknown1: Smallint;
begin
    Result := DefaultInterface.Unknown1;
end;

procedure TMemorizedTransactionsProperties.Set_Unknown1(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown1(Param1);
end;

function TMemorizedTransactionsProperties.Get_Unknown2: Smallint;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TMemorizedTransactionsProperties.Set_Unknown2(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TMemorizedTransactionsProperties.Get_Unused3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused3[Index];
end;

procedure TMemorizedTransactionsProperties.Set_Unused3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused3[Index] := Param2;
end;

function TMemorizedTransactionsProperties.Get_Unused4: Smallint;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TMemorizedTransactionsProperties.Set_Unused4(Param1: Smallint);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TMemorizedTransactionsProperties.Get_Unused5: Byte;
begin
    Result := DefaultInterface.Unused5;
end;

procedure TMemorizedTransactionsProperties.Set_Unused5(Param1: Byte);
begin
  DefaultInterface.Set_Unused5(Param1);
end;

{$ENDIF}

class function CoTaxTable.Create: _TaxTable;
begin
  Result := CreateComObject(CLASS_TaxTable) as _TaxTable;
end;

class function CoTaxTable.CreateRemote(const MachineName: string): _TaxTable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TaxTable) as _TaxTable;
end;

procedure TTaxTable.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9F2D622F-BDE1-477D-9042-D2EFE4444F95}';
    IntfIID:   '{C30F17E2-96ED-4431-B27F-5435B8F51BDC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTaxTable.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TaxTable;
  end;
end;

procedure TTaxTable.ConnectTo(svrIntf: _TaxTable);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTaxTable.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTaxTable.GetDefaultInterface: _TaxTable;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTaxTable.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTaxTableProperties.Create(Self);
{$ENDIF}
end;

destructor TTaxTable.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTaxTable.GetServerProperties: TTaxTableProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTaxTable.Get_Appears: WordBool;
begin
    Result := DefaultInterface.Appears;
end;

procedure TTaxTable.Set_Appears(Param1: WordBool);
begin
  DefaultInterface.Set_Appears(Param1);
end;

function TTaxTable.Get_CodeID: WideString;
begin
    Result := DefaultInterface.CodeID;
end;

procedure TTaxTable.Set_CodeID(const Param1: WideString);
begin
  DefaultInterface.Set_CodeID(Param1);
end;

function TTaxTable.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TTaxTable.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TTaxTable.Get_FilingStatus: Smallint;
begin
    Result := DefaultInterface.FilingStatus;
end;

procedure TTaxTable.Set_FilingStatus(Param1: Smallint);
begin
  DefaultInterface.Set_FilingStatus(Param1);
end;

function TTaxTable.Get_Formula: WideString;
begin
    Result := DefaultInterface.Formula;
end;

procedure TTaxTable.Set_Formula(const Param1: WideString);
begin
  DefaultInterface.Set_Formula(Param1);
end;

function TTaxTable.Get_Government: Smallint;
begin
    Result := DefaultInterface.Government;
end;

procedure TTaxTable.Set_Government(Param1: Smallint);
begin
  DefaultInterface.Set_Government(Param1);
end;

function TTaxTable.Get_GrossMoreThan(Index: Smallint): Double;
begin
    Result := DefaultInterface.GrossMoreThan[Index];
end;

procedure TTaxTable.Set_GrossMoreThan(Index: Smallint; Param2: Double);
begin
  DefaultInterface.GrossMoreThan[Index] := Param2;
end;

function TTaxTable.Get_LocalName: WideString;
begin
    Result := DefaultInterface.LocalName;
end;

procedure TTaxTable.Set_LocalName(const Param1: WideString);
begin
  DefaultInterface.Set_LocalName(Param1);
end;

function TTaxTable.Get_Plus(Index: Smallint): Double;
begin
    Result := DefaultInterface.Plus[Index];
end;

procedure TTaxTable.Set_Plus(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Plus[Index] := Param2;
end;

function TTaxTable.Get_StateName: WideString;
begin
    Result := DefaultInterface.StateName;
end;

procedure TTaxTable.Set_StateName(const Param1: WideString);
begin
  DefaultInterface.Set_StateName(Param1);
end;

function TTaxTable.Get_V9Flag(Index: Smallint): Byte;
begin
    Result := DefaultInterface.V9Flag[Index];
end;

procedure TTaxTable.Set_V9Flag(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.V9Flag[Index] := Param2;
end;

function TTaxTable.Get_Withhold(Index: Smallint): Double;
begin
    Result := DefaultInterface.Withhold[Index];
end;

procedure TTaxTable.Set_Withhold(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Withhold[Index] := Param2;
end;

function TTaxTable.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TTaxTable.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TTaxTable.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TTaxTable.GetEqual(const ID: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(ID);
end;

function TTaxTable.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TTaxTable.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TTaxTable.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TTaxTable.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TTaxTable.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TTaxTable.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TTaxTable.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTaxTableProperties.Create(AServer: TTaxTable);
begin
  inherited Create;
  FServer := AServer;
end;

function TTaxTableProperties.GetDefaultInterface: _TaxTable;
begin
  Result := FServer.DefaultInterface;
end;

function TTaxTableProperties.Get_Appears: WordBool;
begin
    Result := DefaultInterface.Appears;
end;

procedure TTaxTableProperties.Set_Appears(Param1: WordBool);
begin
  DefaultInterface.Set_Appears(Param1);
end;

function TTaxTableProperties.Get_CodeID: WideString;
begin
    Result := DefaultInterface.CodeID;
end;

procedure TTaxTableProperties.Set_CodeID(const Param1: WideString);
begin
  DefaultInterface.Set_CodeID(Param1);
end;

function TTaxTableProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TTaxTableProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TTaxTableProperties.Get_FilingStatus: Smallint;
begin
    Result := DefaultInterface.FilingStatus;
end;

procedure TTaxTableProperties.Set_FilingStatus(Param1: Smallint);
begin
  DefaultInterface.Set_FilingStatus(Param1);
end;

function TTaxTableProperties.Get_Formula: WideString;
begin
    Result := DefaultInterface.Formula;
end;

procedure TTaxTableProperties.Set_Formula(const Param1: WideString);
begin
  DefaultInterface.Set_Formula(Param1);
end;

function TTaxTableProperties.Get_Government: Smallint;
begin
    Result := DefaultInterface.Government;
end;

procedure TTaxTableProperties.Set_Government(Param1: Smallint);
begin
  DefaultInterface.Set_Government(Param1);
end;

function TTaxTableProperties.Get_GrossMoreThan(Index: Smallint): Double;
begin
    Result := DefaultInterface.GrossMoreThan[Index];
end;

procedure TTaxTableProperties.Set_GrossMoreThan(Index: Smallint; Param2: Double);
begin
  DefaultInterface.GrossMoreThan[Index] := Param2;
end;

function TTaxTableProperties.Get_LocalName: WideString;
begin
    Result := DefaultInterface.LocalName;
end;

procedure TTaxTableProperties.Set_LocalName(const Param1: WideString);
begin
  DefaultInterface.Set_LocalName(Param1);
end;

function TTaxTableProperties.Get_Plus(Index: Smallint): Double;
begin
    Result := DefaultInterface.Plus[Index];
end;

procedure TTaxTableProperties.Set_Plus(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Plus[Index] := Param2;
end;

function TTaxTableProperties.Get_StateName: WideString;
begin
    Result := DefaultInterface.StateName;
end;

procedure TTaxTableProperties.Set_StateName(const Param1: WideString);
begin
  DefaultInterface.Set_StateName(Param1);
end;

function TTaxTableProperties.Get_V9Flag(Index: Smallint): Byte;
begin
    Result := DefaultInterface.V9Flag[Index];
end;

procedure TTaxTableProperties.Set_V9Flag(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.V9Flag[Index] := Param2;
end;

function TTaxTableProperties.Get_Withhold(Index: Smallint): Double;
begin
    Result := DefaultInterface.Withhold[Index];
end;

procedure TTaxTableProperties.Set_Withhold(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Withhold[Index] := Param2;
end;

{$ENDIF}

class function CoTicket.Create: _Ticket;
begin
  Result := CreateComObject(CLASS_Ticket) as _Ticket;
end;

class function CoTicket.CreateRemote(const MachineName: string): _Ticket;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Ticket) as _Ticket;
end;

procedure TTicket.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EA040264-B44A-486B-8354-4833D8112FD9}';
    IntfIID:   '{F3A0D161-AC06-4746-9571-DA53CC94D4D6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTicket.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Ticket;
  end;
end;

procedure TTicket.ConnectTo(svrIntf: _Ticket);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTicket.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTicket.GetDefaultInterface: _Ticket;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTicket.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTicketProperties.Create(Self);
{$ENDIF}
end;

destructor TTicket.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTicket.GetServerProperties: TTicketProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTicket.Get_ARUsed: WordBool;
begin
    Result := DefaultInterface.ARUsed;
end;

procedure TTicket.Set_ARUsed(Param1: WordBool);
begin
  DefaultInterface.Set_ARUsed(Param1);
end;

function TTicket.Get_BillingAmount: Double;
begin
    Result := DefaultInterface.BillingAmount;
end;

procedure TTicket.Set_BillingAmount(Param1: Double);
begin
  DefaultInterface.Set_BillingAmount(Param1);
end;

function TTicket.Get_BillingRate: Double;
begin
    Result := DefaultInterface.BillingRate;
end;

procedure TTicket.Set_BillingRate(Param1: Double);
begin
  DefaultInterface.Set_BillingRate(Param1);
end;

function TTicket.Get_BillingStatus: Smallint;
begin
    Result := DefaultInterface.BillingStatus;
end;

procedure TTicket.Set_BillingStatus(Param1: Smallint);
begin
  DefaultInterface.Set_BillingStatus(Param1);
end;

function TTicket.Get_BillingType: Smallint;
begin
    Result := DefaultInterface.BillingType;
end;

procedure TTicket.Set_BillingType(Param1: Smallint);
begin
  DefaultInterface.Set_BillingType(Param1);
end;

function TTicket.Get_BillingUnit: Double;
begin
    Result := DefaultInterface.BillingUnit;
end;

procedure TTicket.Set_BillingUnit(Param1: Double);
begin
  DefaultInterface.Set_BillingUnit(Param1);
end;

function TTicket.Get_BreakHours: Smallint;
begin
    Result := DefaultInterface.BreakHours;
end;

procedure TTicket.Set_BreakHours(Param1: Smallint);
begin
  DefaultInterface.Set_BreakHours(Param1);
end;

function TTicket.Get_BreakMinutes: Smallint;
begin
    Result := DefaultInterface.BreakMinutes;
end;

procedure TTicket.Set_BreakMinutes(Param1: Smallint);
begin
  DefaultInterface.Set_BreakMinutes(Param1);
end;

function TTicket.Get_BreakSeconds: Smallint;
begin
    Result := DefaultInterface.BreakSeconds;
end;

procedure TTicket.Set_BreakSeconds(Param1: Smallint);
begin
  DefaultInterface.Set_BreakSeconds(Param1);
end;

function TTicket.Get_CompletedForID: WideString;
begin
    Result := DefaultInterface.CompletedForID;
end;

procedure TTicket.Set_CompletedForID(const Param1: WideString);
begin
  DefaultInterface.Set_CompletedForID(Param1);
end;

function TTicket.Get_CostID: WideString;
begin
    Result := DefaultInterface.CostID;
end;

procedure TTicket.Set_CostID(const Param1: WideString);
begin
  DefaultInterface.Set_CostID(Param1);
end;

function TTicket.Get_CustJobAdmin: Smallint;
begin
    Result := DefaultInterface.CustJobAdmin;
end;

procedure TTicket.Set_CustJobAdmin(Param1: Smallint);
begin
  DefaultInterface.Set_CustJobAdmin(Param1);
end;

function TTicket.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TTicket.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TTicket.Get_DurationHours: Smallint;
begin
    Result := DefaultInterface.DurationHours;
end;

procedure TTicket.Set_DurationHours(Param1: Smallint);
begin
  DefaultInterface.Set_DurationHours(Param1);
end;

function TTicket.Get_DurationMinutes: Smallint;
begin
    Result := DefaultInterface.DurationMinutes;
end;

procedure TTicket.Set_DurationMinutes(Param1: Smallint);
begin
  DefaultInterface.Set_DurationMinutes(Param1);
end;

function TTicket.Get_DurationSeconds: Smallint;
begin
    Result := DefaultInterface.DurationSeconds;
end;

procedure TTicket.Set_DurationSeconds(Param1: Smallint);
begin
  DefaultInterface.Set_DurationSeconds(Param1);
end;

function TTicket.Get_ItemClass: Smallint;
begin
    Result := DefaultInterface.ItemClass;
end;

procedure TTicket.Set_ItemClass(Param1: Smallint);
begin
  DefaultInterface.Set_ItemClass(Param1);
end;

function TTicket.Get_ItemIndex: Integer;
begin
    Result := DefaultInterface.ItemIndex;
end;

procedure TTicket.Set_ItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_ItemIndex(Param1);
end;

function TTicket.Get_LastTicketNumber: WideString;
begin
    Result := DefaultInterface.LastTicketNumber;
end;

function TTicket.Get_Memo: WideString;
begin
    Result := DefaultInterface.Memo;
end;

procedure TTicket.Set_Memo(const Param1: WideString);
begin
  DefaultInterface.Set_Memo(Param1);
end;

function TTicket.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TTicket.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TTicket.Get_PayLevel: Smallint;
begin
    Result := DefaultInterface.PayLevel;
end;

procedure TTicket.Set_PayLevel(Param1: Smallint);
begin
  DefaultInterface.Set_PayLevel(Param1);
end;

function TTicket.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TTicket.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TTicket.Get_PhaseID: WideString;
begin
    Result := DefaultInterface.PhaseID;
end;

procedure TTicket.Set_PhaseID(const Param1: WideString);
begin
  DefaultInterface.Set_PhaseID(Param1);
end;

function TTicket.Get_PRUsed: WordBool;
begin
    Result := DefaultInterface.PRUsed;
end;

procedure TTicket.Set_PRUsed(Param1: WordBool);
begin
  DefaultInterface.Set_PRUsed(Param1);
end;

function TTicket.Get_RecordedByID: WideString;
begin
    Result := DefaultInterface.RecordedByID;
end;

procedure TTicket.Set_RecordedByID(const Param1: WideString);
begin
  DefaultInterface.Set_RecordedByID(Param1);
end;

function TTicket.Get_Reimburse: WordBool;
begin
    Result := DefaultInterface.Reimburse;
end;

procedure TTicket.Set_Reimburse(Param1: WordBool);
begin
  DefaultInterface.Set_Reimburse(Param1);
end;

function TTicket.Get_StartHours: Smallint;
begin
    Result := DefaultInterface.StartHours;
end;

procedure TTicket.Set_StartHours(Param1: Smallint);
begin
  DefaultInterface.Set_StartHours(Param1);
end;

function TTicket.Get_StartMinutes: Smallint;
begin
    Result := DefaultInterface.StartMinutes;
end;

procedure TTicket.Set_StartMinutes(Param1: Smallint);
begin
  DefaultInterface.Set_StartMinutes(Param1);
end;

function TTicket.Get_StartSeconds: Smallint;
begin
    Result := DefaultInterface.StartSeconds;
end;

procedure TTicket.Set_StartSeconds(Param1: Smallint);
begin
  DefaultInterface.Set_StartSeconds(Param1);
end;

function TTicket.Get_StartPM: Smallint;
begin
    Result := DefaultInterface.StartPM;
end;

procedure TTicket.Set_StartPM(Param1: Smallint);
begin
  DefaultInterface.Set_StartPM(Param1);
end;

function TTicket.Get_StopHours: Smallint;
begin
    Result := DefaultInterface.StopHours;
end;

procedure TTicket.Set_StopHours(Param1: Smallint);
begin
  DefaultInterface.Set_StopHours(Param1);
end;

function TTicket.Get_StopMinutes: Smallint;
begin
    Result := DefaultInterface.StopMinutes;
end;

procedure TTicket.Set_StopMinutes(Param1: Smallint);
begin
  DefaultInterface.Set_StopMinutes(Param1);
end;

function TTicket.Get_StopSeconds: Smallint;
begin
    Result := DefaultInterface.StopSeconds;
end;

procedure TTicket.Set_StopSeconds(Param1: Smallint);
begin
  DefaultInterface.Set_StopSeconds(Param1);
end;

function TTicket.Get_StopPM: Smallint;
begin
    Result := DefaultInterface.StopPM;
end;

procedure TTicket.Set_StopPM(Param1: Smallint);
begin
  DefaultInterface.Set_StopPM(Param1);
end;

function TTicket.Get_TicketDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TicketDate;
end;

procedure TTicket.Set_TicketDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TicketDate(Param1);
end;

function TTicket.Get_TicketNumber: WideString;
begin
    Result := DefaultInterface.TicketNumber;
end;

procedure TTicket.Set_TicketNumber(const Param1: WideString);
begin
  DefaultInterface.Set_TicketNumber(Param1);
end;

function TTicket.Get_TimedDuration: WordBool;
begin
    Result := DefaultInterface.TimedDuration;
end;

procedure TTicket.Set_TimedDuration(Param1: WordBool);
begin
  DefaultInterface.Set_TimedDuration(Param1);
end;

function TTicket.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TTicket.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TTicket.Get_Unused2: Smallint;
begin
    Result := DefaultInterface.Unused2;
end;

procedure TTicket.Set_Unused2(Param1: Smallint);
begin
  DefaultInterface.Set_Unused2(Param1);
end;

function TTicket.Get_Unused3: Smallint;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TTicket.Set_Unused3(Param1: Smallint);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TTicket.Get_Unused4: Smallint;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TTicket.Set_Unused4(Param1: Smallint);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TTicket.Get_Unused5: Smallint;
begin
    Result := DefaultInterface.Unused5;
end;

procedure TTicket.Set_Unused5(Param1: Smallint);
begin
  DefaultInterface.Set_Unused5(Param1);
end;

function TTicket.Get_Unknown6: Byte;
begin
    Result := DefaultInterface.Unknown6;
end;

procedure TTicket.Set_Unknown6(Param1: Byte);
begin
  DefaultInterface.Set_Unknown6(Param1);
end;

function TTicket.Get_Unused7: Smallint;
begin
    Result := DefaultInterface.Unused7;
end;

procedure TTicket.Set_Unused7(Param1: Smallint);
begin
  DefaultInterface.Set_Unused7(Param1);
end;

function TTicket.Get_VendorFlag: WordBool;
begin
    Result := DefaultInterface.VendorFlag;
end;

procedure TTicket.Set_VendorFlag(Param1: WordBool);
begin
  DefaultInterface.Set_VendorFlag(Param1);
end;

function TTicket.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TTicket.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TTicket.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TTicket.GetEqual(const TicketNumber: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(TicketNumber);
end;

function TTicket.GetFirst: Smallint;
begin
  Result := DefaultInterface.GetFirst;
end;

function TTicket.GetGreaterThan(const TicketNumber: WideString): Smallint;
begin
  Result := DefaultInterface.GetGreaterThan(TicketNumber);
end;

function TTicket.GetGreaterThanOrEqual(const TicketNumber: WideString): Smallint;
begin
  Result := DefaultInterface.GetGreaterThanOrEqual(TicketNumber);
end;

function TTicket.GetLast: Smallint;
begin
  Result := DefaultInterface.GetLast;
end;

function TTicket.GetLessThan(const TicketNumber: WideString): Smallint;
begin
  Result := DefaultInterface.GetLessThan(TicketNumber);
end;

function TTicket.GetLessThanOrEqual(const TicketNumber: WideString): Smallint;
begin
  Result := DefaultInterface.GetLessThanOrEqual(TicketNumber);
end;

function TTicket.GetNext: Smallint;
begin
  Result := DefaultInterface.GetNext;
end;

function TTicket.GetPrevious: Smallint;
begin
  Result := DefaultInterface.GetPrevious;
end;

function TTicket.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TTicket.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TTicket.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TTicket.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TTicket.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TTicket.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TTicket.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTicketProperties.Create(AServer: TTicket);
begin
  inherited Create;
  FServer := AServer;
end;

function TTicketProperties.GetDefaultInterface: _Ticket;
begin
  Result := FServer.DefaultInterface;
end;

function TTicketProperties.Get_ARUsed: WordBool;
begin
    Result := DefaultInterface.ARUsed;
end;

procedure TTicketProperties.Set_ARUsed(Param1: WordBool);
begin
  DefaultInterface.Set_ARUsed(Param1);
end;

function TTicketProperties.Get_BillingAmount: Double;
begin
    Result := DefaultInterface.BillingAmount;
end;

procedure TTicketProperties.Set_BillingAmount(Param1: Double);
begin
  DefaultInterface.Set_BillingAmount(Param1);
end;

function TTicketProperties.Get_BillingRate: Double;
begin
    Result := DefaultInterface.BillingRate;
end;

procedure TTicketProperties.Set_BillingRate(Param1: Double);
begin
  DefaultInterface.Set_BillingRate(Param1);
end;

function TTicketProperties.Get_BillingStatus: Smallint;
begin
    Result := DefaultInterface.BillingStatus;
end;

procedure TTicketProperties.Set_BillingStatus(Param1: Smallint);
begin
  DefaultInterface.Set_BillingStatus(Param1);
end;

function TTicketProperties.Get_BillingType: Smallint;
begin
    Result := DefaultInterface.BillingType;
end;

procedure TTicketProperties.Set_BillingType(Param1: Smallint);
begin
  DefaultInterface.Set_BillingType(Param1);
end;

function TTicketProperties.Get_BillingUnit: Double;
begin
    Result := DefaultInterface.BillingUnit;
end;

procedure TTicketProperties.Set_BillingUnit(Param1: Double);
begin
  DefaultInterface.Set_BillingUnit(Param1);
end;

function TTicketProperties.Get_BreakHours: Smallint;
begin
    Result := DefaultInterface.BreakHours;
end;

procedure TTicketProperties.Set_BreakHours(Param1: Smallint);
begin
  DefaultInterface.Set_BreakHours(Param1);
end;

function TTicketProperties.Get_BreakMinutes: Smallint;
begin
    Result := DefaultInterface.BreakMinutes;
end;

procedure TTicketProperties.Set_BreakMinutes(Param1: Smallint);
begin
  DefaultInterface.Set_BreakMinutes(Param1);
end;

function TTicketProperties.Get_BreakSeconds: Smallint;
begin
    Result := DefaultInterface.BreakSeconds;
end;

procedure TTicketProperties.Set_BreakSeconds(Param1: Smallint);
begin
  DefaultInterface.Set_BreakSeconds(Param1);
end;

function TTicketProperties.Get_CompletedForID: WideString;
begin
    Result := DefaultInterface.CompletedForID;
end;

procedure TTicketProperties.Set_CompletedForID(const Param1: WideString);
begin
  DefaultInterface.Set_CompletedForID(Param1);
end;

function TTicketProperties.Get_CostID: WideString;
begin
    Result := DefaultInterface.CostID;
end;

procedure TTicketProperties.Set_CostID(const Param1: WideString);
begin
  DefaultInterface.Set_CostID(Param1);
end;

function TTicketProperties.Get_CustJobAdmin: Smallint;
begin
    Result := DefaultInterface.CustJobAdmin;
end;

procedure TTicketProperties.Set_CustJobAdmin(Param1: Smallint);
begin
  DefaultInterface.Set_CustJobAdmin(Param1);
end;

function TTicketProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TTicketProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TTicketProperties.Get_DurationHours: Smallint;
begin
    Result := DefaultInterface.DurationHours;
end;

procedure TTicketProperties.Set_DurationHours(Param1: Smallint);
begin
  DefaultInterface.Set_DurationHours(Param1);
end;

function TTicketProperties.Get_DurationMinutes: Smallint;
begin
    Result := DefaultInterface.DurationMinutes;
end;

procedure TTicketProperties.Set_DurationMinutes(Param1: Smallint);
begin
  DefaultInterface.Set_DurationMinutes(Param1);
end;

function TTicketProperties.Get_DurationSeconds: Smallint;
begin
    Result := DefaultInterface.DurationSeconds;
end;

procedure TTicketProperties.Set_DurationSeconds(Param1: Smallint);
begin
  DefaultInterface.Set_DurationSeconds(Param1);
end;

function TTicketProperties.Get_ItemClass: Smallint;
begin
    Result := DefaultInterface.ItemClass;
end;

procedure TTicketProperties.Set_ItemClass(Param1: Smallint);
begin
  DefaultInterface.Set_ItemClass(Param1);
end;

function TTicketProperties.Get_ItemIndex: Integer;
begin
    Result := DefaultInterface.ItemIndex;
end;

procedure TTicketProperties.Set_ItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_ItemIndex(Param1);
end;

function TTicketProperties.Get_LastTicketNumber: WideString;
begin
    Result := DefaultInterface.LastTicketNumber;
end;

function TTicketProperties.Get_Memo: WideString;
begin
    Result := DefaultInterface.Memo;
end;

procedure TTicketProperties.Set_Memo(const Param1: WideString);
begin
  DefaultInterface.Set_Memo(Param1);
end;

function TTicketProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TTicketProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TTicketProperties.Get_PayLevel: Smallint;
begin
    Result := DefaultInterface.PayLevel;
end;

procedure TTicketProperties.Set_PayLevel(Param1: Smallint);
begin
  DefaultInterface.Set_PayLevel(Param1);
end;

function TTicketProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TTicketProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TTicketProperties.Get_PhaseID: WideString;
begin
    Result := DefaultInterface.PhaseID;
end;

procedure TTicketProperties.Set_PhaseID(const Param1: WideString);
begin
  DefaultInterface.Set_PhaseID(Param1);
end;

function TTicketProperties.Get_PRUsed: WordBool;
begin
    Result := DefaultInterface.PRUsed;
end;

procedure TTicketProperties.Set_PRUsed(Param1: WordBool);
begin
  DefaultInterface.Set_PRUsed(Param1);
end;

function TTicketProperties.Get_RecordedByID: WideString;
begin
    Result := DefaultInterface.RecordedByID;
end;

procedure TTicketProperties.Set_RecordedByID(const Param1: WideString);
begin
  DefaultInterface.Set_RecordedByID(Param1);
end;

function TTicketProperties.Get_Reimburse: WordBool;
begin
    Result := DefaultInterface.Reimburse;
end;

procedure TTicketProperties.Set_Reimburse(Param1: WordBool);
begin
  DefaultInterface.Set_Reimburse(Param1);
end;

function TTicketProperties.Get_StartHours: Smallint;
begin
    Result := DefaultInterface.StartHours;
end;

procedure TTicketProperties.Set_StartHours(Param1: Smallint);
begin
  DefaultInterface.Set_StartHours(Param1);
end;

function TTicketProperties.Get_StartMinutes: Smallint;
begin
    Result := DefaultInterface.StartMinutes;
end;

procedure TTicketProperties.Set_StartMinutes(Param1: Smallint);
begin
  DefaultInterface.Set_StartMinutes(Param1);
end;

function TTicketProperties.Get_StartSeconds: Smallint;
begin
    Result := DefaultInterface.StartSeconds;
end;

procedure TTicketProperties.Set_StartSeconds(Param1: Smallint);
begin
  DefaultInterface.Set_StartSeconds(Param1);
end;

function TTicketProperties.Get_StartPM: Smallint;
begin
    Result := DefaultInterface.StartPM;
end;

procedure TTicketProperties.Set_StartPM(Param1: Smallint);
begin
  DefaultInterface.Set_StartPM(Param1);
end;

function TTicketProperties.Get_StopHours: Smallint;
begin
    Result := DefaultInterface.StopHours;
end;

procedure TTicketProperties.Set_StopHours(Param1: Smallint);
begin
  DefaultInterface.Set_StopHours(Param1);
end;

function TTicketProperties.Get_StopMinutes: Smallint;
begin
    Result := DefaultInterface.StopMinutes;
end;

procedure TTicketProperties.Set_StopMinutes(Param1: Smallint);
begin
  DefaultInterface.Set_StopMinutes(Param1);
end;

function TTicketProperties.Get_StopSeconds: Smallint;
begin
    Result := DefaultInterface.StopSeconds;
end;

procedure TTicketProperties.Set_StopSeconds(Param1: Smallint);
begin
  DefaultInterface.Set_StopSeconds(Param1);
end;

function TTicketProperties.Get_StopPM: Smallint;
begin
    Result := DefaultInterface.StopPM;
end;

procedure TTicketProperties.Set_StopPM(Param1: Smallint);
begin
  DefaultInterface.Set_StopPM(Param1);
end;

function TTicketProperties.Get_TicketDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TicketDate;
end;

procedure TTicketProperties.Set_TicketDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TicketDate(Param1);
end;

function TTicketProperties.Get_TicketNumber: WideString;
begin
    Result := DefaultInterface.TicketNumber;
end;

procedure TTicketProperties.Set_TicketNumber(const Param1: WideString);
begin
  DefaultInterface.Set_TicketNumber(Param1);
end;

function TTicketProperties.Get_TimedDuration: WordBool;
begin
    Result := DefaultInterface.TimedDuration;
end;

procedure TTicketProperties.Set_TimedDuration(Param1: WordBool);
begin
  DefaultInterface.Set_TimedDuration(Param1);
end;

function TTicketProperties.Get_Unused1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TTicketProperties.Set_Unused1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TTicketProperties.Get_Unused2: Smallint;
begin
    Result := DefaultInterface.Unused2;
end;

procedure TTicketProperties.Set_Unused2(Param1: Smallint);
begin
  DefaultInterface.Set_Unused2(Param1);
end;

function TTicketProperties.Get_Unused3: Smallint;
begin
    Result := DefaultInterface.Unused3;
end;

procedure TTicketProperties.Set_Unused3(Param1: Smallint);
begin
  DefaultInterface.Set_Unused3(Param1);
end;

function TTicketProperties.Get_Unused4: Smallint;
begin
    Result := DefaultInterface.Unused4;
end;

procedure TTicketProperties.Set_Unused4(Param1: Smallint);
begin
  DefaultInterface.Set_Unused4(Param1);
end;

function TTicketProperties.Get_Unused5: Smallint;
begin
    Result := DefaultInterface.Unused5;
end;

procedure TTicketProperties.Set_Unused5(Param1: Smallint);
begin
  DefaultInterface.Set_Unused5(Param1);
end;

function TTicketProperties.Get_Unknown6: Byte;
begin
    Result := DefaultInterface.Unknown6;
end;

procedure TTicketProperties.Set_Unknown6(Param1: Byte);
begin
  DefaultInterface.Set_Unknown6(Param1);
end;

function TTicketProperties.Get_Unused7: Smallint;
begin
    Result := DefaultInterface.Unused7;
end;

procedure TTicketProperties.Set_Unused7(Param1: Smallint);
begin
  DefaultInterface.Set_Unused7(Param1);
end;

function TTicketProperties.Get_VendorFlag: WordBool;
begin
    Result := DefaultInterface.VendorFlag;
end;

procedure TTicketProperties.Set_VendorFlag(Param1: WordBool);
begin
  DefaultInterface.Set_VendorFlag(Param1);
end;

{$ENDIF}

class function CoUser.Create: _User;
begin
  Result := CreateComObject(CLASS_User) as _User;
end;

class function CoUser.CreateRemote(const MachineName: string): _User;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_User) as _User;
end;

procedure TUser.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EEBBB557-D8B2-43B7-B0D7-ED0C731FA600}';
    IntfIID:   '{589B7A79-192C-4B3C-877F-45BE473C4EC6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUser.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _User;
  end;
end;

procedure TUser.ConnectTo(svrIntf: _User);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUser.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUser.GetDefaultInterface: _User;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TUser.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TUserProperties.Create(Self);
{$ENDIF}
end;

destructor TUser.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TUser.GetServerProperties: TUserProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TUser.Get_AccessToMaintainUsers: WordBool;
begin
    Result := DefaultInterface.AccessToMaintainUsers;
end;

procedure TUser.Set_AccessToMaintainUsers(Param1: WordBool);
begin
  DefaultInterface.Set_AccessToMaintainUsers(Param1);
end;

function TUser.Get_CreditCardAccess: Smallint;
begin
    Result := DefaultInterface.CreditCardAccess;
end;

procedure TUser.Set_CreditCardAccess(Param1: Smallint);
begin
  DefaultInterface.Set_CreditCardAccess(Param1);
end;

function TUser.Get_CrystalAccess: Smallint;
begin
    Result := DefaultInterface.CrystalAccess;
end;

procedure TUser.Set_CrystalAccess(Param1: Smallint);
begin
  DefaultInterface.Set_CrystalAccess(Param1);
end;

function TUser.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TUser.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TUser.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TUser.Set_Password(const Param1: WideString);
begin
  DefaultInterface.Set_Password(Param1);
end;

function TUser.Get_GeneralLedger_Maint_Budgets: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Maint_Budgets;
end;

procedure TUser.Set_GeneralLedger_Maint_Budgets(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Maint_Budgets(Param1);
end;

function TUser.Get_GeneralLedger_Maint_ChartOfAccounts: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Maint_ChartOfAccounts;
end;

procedure TUser.Set_GeneralLedger_Maint_ChartOfAccounts(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Maint_ChartOfAccounts(Param1);
end;

function TUser.Get_GeneralLedger_Maint_ChartOfAccountsBB: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Maint_ChartOfAccountsBB;
end;

procedure TUser.Set_GeneralLedger_Maint_ChartOfAccountsBB(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Maint_ChartOfAccountsBB(Param1);
end;

function TUser.Get_GeneralLedger_Reports_AccountReconcil: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Reports_AccountReconcil;
end;

procedure TUser.Set_GeneralLedger_Reports_AccountReconcil(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Reports_AccountReconcil(Param1);
end;

function TUser.Get_GeneralLedger_Reports_FinancialStatement: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Reports_FinancialStatement;
end;

procedure TUser.Set_GeneralLedger_Reports_FinancialStatement(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Reports_FinancialStatement(Param1);
end;

function TUser.Get_GeneralLedger_Reports_MasterLists: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Reports_MasterLists;
end;

procedure TUser.Set_GeneralLedger_Reports_MasterLists(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Reports_MasterLists(Param1);
end;

function TUser.Get_GeneralLedger_Reports_TransactionLists: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Reports_TransactionLists;
end;

procedure TUser.Set_GeneralLedger_Reports_TransactionLists(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Reports_TransactionLists(Param1);
end;

function TUser.Get_GeneralLedger_Tasks_GeneralJournal: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Tasks_GeneralJournal;
end;

procedure TUser.Set_GeneralLedger_Tasks_GeneralJournal(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Tasks_GeneralJournal(Param1);
end;

function TUser.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TUser.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TUser.Get_Inventory_Maint_InventoryItems: Smallint;
begin
    Result := DefaultInterface.Inventory_Maint_InventoryItems;
end;

procedure TUser.Set_Inventory_Maint_InventoryItems(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Maint_InventoryItems(Param1);
end;

function TUser.Get_Inventory_Maint_InventoryItemsBB: Smallint;
begin
    Result := DefaultInterface.Inventory_Maint_InventoryItemsBB;
end;

procedure TUser.Set_Inventory_Maint_InventoryItemsBB(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Maint_InventoryItemsBB(Param1);
end;

function TUser.Get_Inventory_Maint_MultipleItemPrices: Smallint;
begin
    Result := DefaultInterface.Inventory_Maint_MultipleItemPrices;
end;

procedure TUser.Set_Inventory_Maint_MultipleItemPrices(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Maint_MultipleItemPrices(Param1);
end;

function TUser.Get_Inventory_Maint_Revisions: Smallint;
begin
    Result := DefaultInterface.Inventory_Maint_Revisions;
end;

procedure TUser.Set_Inventory_Maint_Revisions(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Maint_Revisions(Param1);
end;

function TUser.Get_Inventory_Maint_UnitMeasures: Smallint;
begin
    Result := DefaultInterface.Inventory_Maint_UnitMeasures;
end;

procedure TUser.Set_Inventory_Maint_UnitMeasures(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Maint_UnitMeasures(Param1);
end;

function TUser.Get_Inventory_Reports_Forms: Smallint;
begin
    Result := DefaultInterface.Inventory_Reports_Forms;
end;

procedure TUser.Set_Inventory_Reports_Forms(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Reports_Forms(Param1);
end;

function TUser.Get_Inventory_Reports_MasterLists: Smallint;
begin
    Result := DefaultInterface.Inventory_Reports_MasterLists;
end;

procedure TUser.Set_Inventory_Reports_MasterLists(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Reports_MasterLists(Param1);
end;

function TUser.Get_Inventory_Reports_OtherReports: Smallint;
begin
    Result := DefaultInterface.Inventory_Reports_OtherReports;
end;

procedure TUser.Set_Inventory_Reports_OtherReports(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Reports_OtherReports(Param1);
end;

function TUser.Get_Inventory_Reports_TransactionLists: Smallint;
begin
    Result := DefaultInterface.Inventory_Reports_TransactionLists;
end;

procedure TUser.Set_Inventory_Reports_TransactionLists(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Reports_TransactionLists(Param1);
end;

function TUser.Get_Inventory_Tasks_Inventory: Smallint;
begin
    Result := DefaultInterface.Inventory_Tasks_Inventory;
end;

procedure TUser.Set_Inventory_Tasks_Inventory(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Tasks_Inventory(Param1);
end;

function TUser.Get_Inventory_Tasks_WorkTickets: Smallint;
begin
    Result := DefaultInterface.Inventory_Tasks_WorkTickets;
end;

procedure TUser.Set_Inventory_Tasks_WorkTickets(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Tasks_WorkTickets(Param1);
end;

function TUser.Get_Payroll_Maint_EmployeesSalesReps: Smallint;
begin
    Result := DefaultInterface.Payroll_Maint_EmployeesSalesReps;
end;

procedure TUser.Set_Payroll_Maint_EmployeesSalesReps(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Maint_EmployeesSalesReps(Param1);
end;

function TUser.Get_Payroll_Maint_EmployeesSalesRepsBB: Smallint;
begin
    Result := DefaultInterface.Payroll_Maint_EmployeesSalesRepsBB;
end;

procedure TUser.Set_Payroll_Maint_EmployeesSalesRepsBB(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Maint_EmployeesSalesRepsBB(Param1);
end;

function TUser.Get_Payroll_Maint_PayrollTaxTables: Smallint;
begin
    Result := DefaultInterface.Payroll_Maint_PayrollTaxTables;
end;

procedure TUser.Set_Payroll_Maint_PayrollTaxTables(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Maint_PayrollTaxTables(Param1);
end;

function TUser.Get_Payroll_Reports_Forms: Smallint;
begin
    Result := DefaultInterface.Payroll_Reports_Forms;
end;

procedure TUser.Set_Payroll_Reports_Forms(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Reports_Forms(Param1);
end;

function TUser.Get_Payroll_Reports_MasterLists: Smallint;
begin
    Result := DefaultInterface.Payroll_Reports_MasterLists;
end;

procedure TUser.Set_Payroll_Reports_MasterLists(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Reports_MasterLists(Param1);
end;

function TUser.Get_Payroll_Reports_MailMerge: Smallint;
begin
    Result := DefaultInterface.Payroll_Reports_MailMerge;
end;

procedure TUser.Set_Payroll_Reports_MailMerge(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Reports_MailMerge(Param1);
end;

function TUser.Get_Payroll_Reports_OtherReports: Smallint;
begin
    Result := DefaultInterface.Payroll_Reports_OtherReports;
end;

procedure TUser.Set_Payroll_Reports_OtherReports(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Reports_OtherReports(Param1);
end;

function TUser.Get_Payroll_Reports_TransactionLists: Smallint;
begin
    Result := DefaultInterface.Payroll_Reports_TransactionLists;
end;

procedure TUser.Set_Payroll_Reports_TransactionLists(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Reports_TransactionLists(Param1);
end;

function TUser.Get_Payroll_Tasks_PayrollEntry: Smallint;
begin
    Result := DefaultInterface.Payroll_Tasks_PayrollEntry;
end;

procedure TUser.Set_Payroll_Tasks_PayrollEntry(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Tasks_PayrollEntry(Param1);
end;

function TUser.Get_Payroll_Tasks_VoidPRChecks: Smallint;
begin
    Result := DefaultInterface.Payroll_Tasks_VoidPRChecks;
end;

procedure TUser.Set_Payroll_Tasks_VoidPRChecks(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Tasks_VoidPRChecks(Param1);
end;

function TUser.Get_Purchases_Maint_Vendors: Smallint;
begin
    Result := DefaultInterface.Purchases_Maint_Vendors;
end;

procedure TUser.Set_Purchases_Maint_Vendors(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Maint_Vendors(Param1);
end;

function TUser.Get_Purchases_Maint_VendorsBB: Smallint;
begin
    Result := DefaultInterface.Purchases_Maint_VendorsBB;
end;

procedure TUser.Set_Purchases_Maint_VendorsBB(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Maint_VendorsBB(Param1);
end;

function TUser.Get_Purchases_Reports_Forms: Smallint;
begin
    Result := DefaultInterface.Purchases_Reports_Forms;
end;

procedure TUser.Set_Purchases_Reports_Forms(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Reports_Forms(Param1);
end;

function TUser.Get_Purchases_Reports_MasterLists: Smallint;
begin
    Result := DefaultInterface.Purchases_Reports_MasterLists;
end;

procedure TUser.Set_Purchases_Reports_MasterLists(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Reports_MasterLists(Param1);
end;

function TUser.Get_Purchases_Reports_MailMerge: Smallint;
begin
    Result := DefaultInterface.Purchases_Reports_MailMerge;
end;

procedure TUser.Set_Purchases_Reports_MailMerge(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Reports_MailMerge(Param1);
end;

function TUser.Get_Purchases_Reports_OtherReports: Smallint;
begin
    Result := DefaultInterface.Purchases_Reports_OtherReports;
end;

procedure TUser.Set_Purchases_Reports_OtherReports(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Reports_OtherReports(Param1);
end;

function TUser.Get_Purchases_Reports_TransactionLists: Smallint;
begin
    Result := DefaultInterface.Purchases_Reports_TransactionLists;
end;

procedure TUser.Set_Purchases_Reports_TransactionLists(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Reports_TransactionLists(Param1);
end;

function TUser.Get_Purchases_Tasks_Payments: Smallint;
begin
    Result := DefaultInterface.Purchases_Tasks_Payments;
end;

procedure TUser.Set_Purchases_Tasks_Payments(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Tasks_Payments(Param1);
end;

function TUser.Get_Purchases_Tasks_PurchaseOrders: Smallint;
begin
    Result := DefaultInterface.Purchases_Tasks_PurchaseOrders;
end;

procedure TUser.Set_Purchases_Tasks_PurchaseOrders(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Tasks_PurchaseOrders(Param1);
end;

function TUser.Get_Purchases_Tasks_PurchasesInventory: Smallint;
begin
    Result := DefaultInterface.Purchases_Tasks_PurchasesInventory;
end;

procedure TUser.Set_Purchases_Tasks_PurchasesInventory(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Tasks_PurchasesInventory(Param1);
end;

function TUser.Get_Purchases_Tasks_VendorCreditMemos: Smallint;
begin
    Result := DefaultInterface.Purchases_Tasks_VendorCreditMemos;
end;

procedure TUser.Set_Purchases_Tasks_VendorCreditMemos(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Tasks_VendorCreditMemos(Param1);
end;

function TUser.Get_Purchases_Tasks_VoidChecks: Smallint;
begin
    Result := DefaultInterface.Purchases_Tasks_VoidChecks;
end;

procedure TUser.Set_Purchases_Tasks_VoidChecks(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Tasks_VoidChecks(Param1);
end;

function TUser.Get_Sales_Maint_CustomerPaymentDefaults: Smallint;
begin
    Result := DefaultInterface.Sales_Maint_CustomerPaymentDefaults;
end;

procedure TUser.Set_Sales_Maint_CustomerPaymentDefaults(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Maint_CustomerPaymentDefaults(Param1);
end;

function TUser.Get_Sales_Maint_Customers: Smallint;
begin
    Result := DefaultInterface.Sales_Maint_Customers;
end;

procedure TUser.Set_Sales_Maint_Customers(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Maint_Customers(Param1);
end;

function TUser.Get_Sales_Maint_CustomersProspectsBB: Smallint;
begin
    Result := DefaultInterface.Sales_Maint_CustomersProspectsBB;
end;

procedure TUser.Set_Sales_Maint_CustomersProspectsBB(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Maint_CustomersProspectsBB(Param1);
end;

function TUser.Get_Sales_Reports_Forms: Smallint;
begin
    Result := DefaultInterface.Sales_Reports_Forms;
end;

procedure TUser.Set_Sales_Reports_Forms(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Reports_Forms(Param1);
end;

function TUser.Get_Sales_Reports_MailMerge: Smallint;
begin
    Result := DefaultInterface.Sales_Reports_MailMerge;
end;

procedure TUser.Set_Sales_Reports_MailMerge(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Reports_MailMerge(Param1);
end;

function TUser.Get_Sales_Reports_MasterLists: Smallint;
begin
    Result := DefaultInterface.Sales_Reports_MasterLists;
end;

procedure TUser.Set_Sales_Reports_MasterLists(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Reports_MasterLists(Param1);
end;

function TUser.Get_Sales_Reports_OtherReports: Smallint;
begin
    Result := DefaultInterface.Sales_Reports_OtherReports;
end;

procedure TUser.Set_Sales_Reports_OtherReports(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Reports_OtherReports(Param1);
end;

function TUser.Get_Sales_Reports_TransactionLists: Smallint;
begin
    Result := DefaultInterface.Sales_Reports_TransactionLists;
end;

procedure TUser.Set_Sales_Reports_TransactionLists(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Reports_TransactionLists(Param1);
end;

function TUser.Get_Sales_Tasks_CreditMemos: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_CreditMemos;
end;

procedure TUser.Set_Sales_Tasks_CreditMemos(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_CreditMemos(Param1);
end;

function TUser.Get_Sales_Tasks_Quotes: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_Quotes;
end;

procedure TUser.Set_Sales_Tasks_Quotes(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_Quotes(Param1);
end;

function TUser.Get_Sales_Tasks_Receipts: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_Receipts;
end;

procedure TUser.Set_Sales_Tasks_Receipts(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_Receipts(Param1);
end;

function TUser.Get_Sales_Tasks_SalesInvoicing: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_SalesInvoicing;
end;

procedure TUser.Set_Sales_Tasks_SalesInvoicing(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_SalesInvoicing(Param1);
end;

function TUser.Get_Sales_Tasks_SalesOrders: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_SalesOrders;
end;

procedure TUser.Set_Sales_Tasks_SalesOrders(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_SalesOrders(Param1);
end;

function TUser.Get_Sales_Tasks_Shipment: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_Shipment;
end;

procedure TUser.Set_Sales_Tasks_Shipment(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_Shipment(Param1);
end;

function TUser.Get_Sales_Tasks_ShipmentRegistrationWizard: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_ShipmentRegistrationWizard;
end;

procedure TUser.Set_Sales_Tasks_ShipmentRegistrationWizard(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_ShipmentRegistrationWizard(Param1);
end;

function TUser.Get_System_Analysis_CashManager: Smallint;
begin
    Result := DefaultInterface.System_Analysis_CashManager;
end;

procedure TUser.Set_System_Analysis_CashManager(Param1: Smallint);
begin
  DefaultInterface.Set_System_Analysis_CashManager(Param1);
end;

function TUser.Get_System_Analysis_CollectionManager: Smallint;
begin
    Result := DefaultInterface.System_Analysis_CollectionManager;
end;

procedure TUser.Set_System_Analysis_CollectionManager(Param1: Smallint);
begin
  DefaultInterface.Set_System_Analysis_CollectionManager(Param1);
end;

function TUser.Get_System_Analysis_FinancialManager: Smallint;
begin
    Result := DefaultInterface.System_Analysis_FinancialManager;
end;

procedure TUser.Set_System_Analysis_FinancialManager(Param1: Smallint);
begin
  DefaultInterface.Set_System_Analysis_FinancialManager(Param1);
end;

function TUser.Get_System_Analysis_PaymentManager: Smallint;
begin
    Result := DefaultInterface.System_Analysis_PaymentManager;
end;

procedure TUser.Set_System_Analysis_PaymentManager(Param1: Smallint);
begin
  DefaultInterface.Set_System_Analysis_PaymentManager(Param1);
end;

function TUser.Get_System_File_ArchiveCompany: Smallint;
begin
    Result := DefaultInterface.System_File_ArchiveCompany;
end;

procedure TUser.Set_System_File_ArchiveCompany(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_ArchiveCompany(Param1);
end;

function TUser.Get_System_File_Backup: Smallint;
begin
    Result := DefaultInterface.System_File_Backup;
end;

procedure TUser.Set_System_File_Backup(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_Backup(Param1);
end;

function TUser.Get_System_File_ImportExport: Smallint;
begin
    Result := DefaultInterface.System_File_ImportExport;
end;

procedure TUser.Set_System_File_ImportExport(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_ImportExport(Param1);
end;

function TUser.Get_System_File_IntegrityCheck: Smallint;
begin
    Result := DefaultInterface.System_File_IntegrityCheck;
end;

procedure TUser.Set_System_File_IntegrityCheck(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_IntegrityCheck(Param1);
end;

function TUser.Get_System_File_NewCompany: Smallint;
begin
    Result := DefaultInterface.System_File_NewCompany;
end;

procedure TUser.Set_System_File_NewCompany(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_NewCompany(Param1);
end;

function TUser.Get_System_File_OnlineBackup: Smallint;
begin
    Result := DefaultInterface.System_File_OnlineBackup;
end;

procedure TUser.Set_System_File_OnlineBackup(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_OnlineBackup(Param1);
end;

function TUser.Get_System_File_ReconsolidateCompany: Smallint;
begin
    Result := DefaultInterface.System_File_ReconsolidateCompany;
end;

procedure TUser.Set_System_File_ReconsolidateCompany(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_ReconsolidateCompany(Param1);
end;

function TUser.Get_System_File_Restore: Smallint;
begin
    Result := DefaultInterface.System_File_Restore;
end;

procedure TUser.Set_System_File_Restore(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_Restore(Param1);
end;

function TUser.Get_System_Modem: Smallint;
begin
    Result := DefaultInterface.System_Modem;
end;

procedure TUser.Set_System_Modem(Param1: Smallint);
begin
  DefaultInterface.Set_System_Modem(Param1);
end;

function TUser.Get_System_Maint_CompanyInformation: Smallint;
begin
    Result := DefaultInterface.System_Maint_CompanyInformation;
end;

procedure TUser.Set_System_Maint_CompanyInformation(Param1: Smallint);
begin
  DefaultInterface.Set_System_Maint_CompanyInformation(Param1);
end;

function TUser.Get_System_Maint_ElectronicPayments: Smallint;
begin
    Result := DefaultInterface.System_Maint_ElectronicPayments;
end;

procedure TUser.Set_System_Maint_ElectronicPayments(Param1: Smallint);
begin
  DefaultInterface.Set_System_Maint_ElectronicPayments(Param1);
end;

function TUser.Get_System_Maint_Jobs: Smallint;
begin
    Result := DefaultInterface.System_Maint_Jobs;
end;

procedure TUser.Set_System_Maint_Jobs(Param1: Smallint);
begin
  DefaultInterface.Set_System_Maint_Jobs(Param1);
end;

function TUser.Get_System_Options_ActionItemsEventLog: Smallint;
begin
    Result := DefaultInterface.System_Options_ActionItemsEventLog;
end;

procedure TUser.Set_System_Options_ActionItemsEventLog(Param1: Smallint);
begin
  DefaultInterface.Set_System_Options_ActionItemsEventLog(Param1);
end;

function TUser.Get_System_Options_ChangeSystemDate: Smallint;
begin
    Result := DefaultInterface.System_Options_ChangeSystemDate;
end;

procedure TUser.Set_System_Options_ChangeSystemDate(Param1: Smallint);
begin
  DefaultInterface.Set_System_Options_ChangeSystemDate(Param1);
end;

function TUser.Get_System_Reports_AccountReconcil: Smallint;
begin
    Result := DefaultInterface.System_Reports_AccountReconcil;
end;

procedure TUser.Set_System_Reports_AccountReconcil(Param1: Smallint);
begin
  DefaultInterface.Set_System_Reports_AccountReconcil(Param1);
end;

function TUser.Get_System_Reports_AuditTrail: Smallint;
begin
    Result := DefaultInterface.System_Reports_AuditTrail;
end;

procedure TUser.Set_System_Reports_AuditTrail(Param1: Smallint);
begin
  DefaultInterface.Set_System_Reports_AuditTrail(Param1);
end;

function TUser.Get_System_Reports_ElectronicBillPayment: Smallint;
begin
    Result := DefaultInterface.System_Reports_ElectronicBillPayment;
end;

procedure TUser.Set_System_Reports_ElectronicBillPayment(Param1: Smallint);
begin
  DefaultInterface.Set_System_Reports_ElectronicBillPayment(Param1);
end;

function TUser.Get_System_Reports_Jobs: Smallint;
begin
    Result := DefaultInterface.System_Reports_Jobs;
end;

procedure TUser.Set_System_Reports_Jobs(Param1: Smallint);
begin
  DefaultInterface.Set_System_Reports_Jobs(Param1);
end;

function TUser.Get_System_Reports_ReportGroups: Smallint;
begin
    Result := DefaultInterface.System_Reports_ReportGroups;
end;

procedure TUser.Set_System_Reports_ReportGroups(Param1: Smallint);
begin
  DefaultInterface.Set_System_Reports_ReportGroups(Param1);
end;

function TUser.Get_System_Reports_TimeExpense: Smallint;
begin
    Result := DefaultInterface.System_Reports_TimeExpense;
end;

procedure TUser.Set_System_Reports_TimeExpense(Param1: Smallint);
begin
  DefaultInterface.Set_System_Reports_TimeExpense(Param1);
end;

function TUser.Get_System_Tasks_AccountReconciliation: Smallint;
begin
    Result := DefaultInterface.System_Tasks_AccountReconciliation;
end;

procedure TUser.Set_System_Tasks_AccountReconciliation(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_AccountReconciliation(Param1);
end;

function TUser.Get_System_Tasks_ActionItems: Smallint;
begin
    Result := DefaultInterface.System_Tasks_ActionItems;
end;

procedure TUser.Set_System_Tasks_ActionItems(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_ActionItems(Param1);
end;

function TUser.Get_System_Tasks_ChangeAccountingPeriod: Smallint;
begin
    Result := DefaultInterface.System_Tasks_ChangeAccountingPeriod;
end;

procedure TUser.Set_System_Tasks_ChangeAccountingPeriod(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_ChangeAccountingPeriod(Param1);
end;

function TUser.Get_System_Tasks_CloseFiscalYear: Smallint;
begin
    Result := DefaultInterface.System_Tasks_CloseFiscalYear;
end;

procedure TUser.Set_System_Tasks_CloseFiscalYear(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_CloseFiscalYear(Param1);
end;

function TUser.Get_System_Tasks_ClosePayrollYear: Smallint;
begin
    Result := DefaultInterface.System_Tasks_ClosePayrollYear;
end;

procedure TUser.Set_System_Tasks_ClosePayrollYear(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_ClosePayrollYear(Param1);
end;

function TUser.Get_System_Tasks_ElectronicBillPayment: Smallint;
begin
    Result := DefaultInterface.System_Tasks_ElectronicBillPayment;
end;

procedure TUser.Set_System_Tasks_ElectronicBillPayment(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_ElectronicBillPayment(Param1);
end;

function TUser.Get_System_Tasks_FindTransactions: Smallint;
begin
    Result := DefaultInterface.System_Tasks_FindTransactions;
end;

procedure TUser.Set_System_Tasks_FindTransactions(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_FindTransactions(Param1);
end;

function TUser.Get_System_Tasks_LinkToOtherApps: Smallint;
begin
    Result := DefaultInterface.System_Tasks_LinkToOtherApps;
end;

procedure TUser.Set_System_Tasks_LinkToOtherApps(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_LinkToOtherApps(Param1);
end;

function TUser.Get_System_Tasks_Post: Smallint;
begin
    Result := DefaultInterface.System_Tasks_Post;
end;

procedure TUser.Set_System_Tasks_Post(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_Post(Param1);
end;

function TUser.Get_System_Tasks_Purge: Smallint;
begin
    Result := DefaultInterface.System_Tasks_Purge;
end;

procedure TUser.Set_System_Tasks_Purge(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_Purge(Param1);
end;

function TUser.Get_System_Tasks_TimeAndExpenseTickets: Smallint;
begin
    Result := DefaultInterface.System_Tasks_TimeAndExpenseTickets;
end;

procedure TUser.Set_System_Tasks_TimeAndExpenseTickets(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_TimeAndExpenseTickets(Param1);
end;

function TUser.Get_System_Tasks_TransactionsInPriorPeriods: Smallint;
begin
    Result := DefaultInterface.System_Tasks_TransactionsInPriorPeriods;
end;

procedure TUser.Set_System_Tasks_TransactionsInPriorPeriods(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_TransactionsInPriorPeriods(Param1);
end;

function TUser.Get_System_Tasks_Unpost: Smallint;
begin
    Result := DefaultInterface.System_Tasks_Unpost;
end;

procedure TUser.Set_System_Tasks_Unpost(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_Unpost(Param1);
end;

function TUser.Get_Unknown1: Smallint;
begin
    Result := DefaultInterface.Unknown1;
end;

procedure TUser.Set_Unknown1(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown1(Param1);
end;

function TUser.Get_Unknown2: Smallint;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TUser.Set_Unknown2(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TUser.Get_Unknown3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown3[Index];
end;

procedure TUser.Set_Unknown3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown3[Index] := Param2;
end;

function TUser.Get_Unknown4: Smallint;
begin
    Result := DefaultInterface.Unknown4;
end;

procedure TUser.Set_Unknown4(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown4(Param1);
end;

function TUser.Get_UserName: WideString;
begin
    Result := DefaultInterface.UserName;
end;

procedure TUser.Set_UserName(const Param1: WideString);
begin
  DefaultInterface.Set_UserName(Param1);
end;

function TUser.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TUser.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TUser.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TUser.GetEqual(const ID: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(ID);
end;

function TUser.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TUser.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TUser.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TUser.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TUser.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TUser.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TUser.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TUserProperties.Create(AServer: TUser);
begin
  inherited Create;
  FServer := AServer;
end;

function TUserProperties.GetDefaultInterface: _User;
begin
  Result := FServer.DefaultInterface;
end;

function TUserProperties.Get_AccessToMaintainUsers: WordBool;
begin
    Result := DefaultInterface.AccessToMaintainUsers;
end;

procedure TUserProperties.Set_AccessToMaintainUsers(Param1: WordBool);
begin
  DefaultInterface.Set_AccessToMaintainUsers(Param1);
end;

function TUserProperties.Get_CreditCardAccess: Smallint;
begin
    Result := DefaultInterface.CreditCardAccess;
end;

procedure TUserProperties.Set_CreditCardAccess(Param1: Smallint);
begin
  DefaultInterface.Set_CreditCardAccess(Param1);
end;

function TUserProperties.Get_CrystalAccess: Smallint;
begin
    Result := DefaultInterface.CrystalAccess;
end;

procedure TUserProperties.Set_CrystalAccess(Param1: Smallint);
begin
  DefaultInterface.Set_CrystalAccess(Param1);
end;

function TUserProperties.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TUserProperties.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TUserProperties.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TUserProperties.Set_Password(const Param1: WideString);
begin
  DefaultInterface.Set_Password(Param1);
end;

function TUserProperties.Get_GeneralLedger_Maint_Budgets: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Maint_Budgets;
end;

procedure TUserProperties.Set_GeneralLedger_Maint_Budgets(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Maint_Budgets(Param1);
end;

function TUserProperties.Get_GeneralLedger_Maint_ChartOfAccounts: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Maint_ChartOfAccounts;
end;

procedure TUserProperties.Set_GeneralLedger_Maint_ChartOfAccounts(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Maint_ChartOfAccounts(Param1);
end;

function TUserProperties.Get_GeneralLedger_Maint_ChartOfAccountsBB: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Maint_ChartOfAccountsBB;
end;

procedure TUserProperties.Set_GeneralLedger_Maint_ChartOfAccountsBB(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Maint_ChartOfAccountsBB(Param1);
end;

function TUserProperties.Get_GeneralLedger_Reports_AccountReconcil: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Reports_AccountReconcil;
end;

procedure TUserProperties.Set_GeneralLedger_Reports_AccountReconcil(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Reports_AccountReconcil(Param1);
end;

function TUserProperties.Get_GeneralLedger_Reports_FinancialStatement: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Reports_FinancialStatement;
end;

procedure TUserProperties.Set_GeneralLedger_Reports_FinancialStatement(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Reports_FinancialStatement(Param1);
end;

function TUserProperties.Get_GeneralLedger_Reports_MasterLists: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Reports_MasterLists;
end;

procedure TUserProperties.Set_GeneralLedger_Reports_MasterLists(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Reports_MasterLists(Param1);
end;

function TUserProperties.Get_GeneralLedger_Reports_TransactionLists: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Reports_TransactionLists;
end;

procedure TUserProperties.Set_GeneralLedger_Reports_TransactionLists(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Reports_TransactionLists(Param1);
end;

function TUserProperties.Get_GeneralLedger_Tasks_GeneralJournal: Smallint;
begin
    Result := DefaultInterface.GeneralLedger_Tasks_GeneralJournal;
end;

procedure TUserProperties.Set_GeneralLedger_Tasks_GeneralJournal(Param1: Smallint);
begin
  DefaultInterface.Set_GeneralLedger_Tasks_GeneralJournal(Param1);
end;

function TUserProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TUserProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TUserProperties.Get_Inventory_Maint_InventoryItems: Smallint;
begin
    Result := DefaultInterface.Inventory_Maint_InventoryItems;
end;

procedure TUserProperties.Set_Inventory_Maint_InventoryItems(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Maint_InventoryItems(Param1);
end;

function TUserProperties.Get_Inventory_Maint_InventoryItemsBB: Smallint;
begin
    Result := DefaultInterface.Inventory_Maint_InventoryItemsBB;
end;

procedure TUserProperties.Set_Inventory_Maint_InventoryItemsBB(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Maint_InventoryItemsBB(Param1);
end;

function TUserProperties.Get_Inventory_Maint_MultipleItemPrices: Smallint;
begin
    Result := DefaultInterface.Inventory_Maint_MultipleItemPrices;
end;

procedure TUserProperties.Set_Inventory_Maint_MultipleItemPrices(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Maint_MultipleItemPrices(Param1);
end;

function TUserProperties.Get_Inventory_Maint_Revisions: Smallint;
begin
    Result := DefaultInterface.Inventory_Maint_Revisions;
end;

procedure TUserProperties.Set_Inventory_Maint_Revisions(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Maint_Revisions(Param1);
end;

function TUserProperties.Get_Inventory_Maint_UnitMeasures: Smallint;
begin
    Result := DefaultInterface.Inventory_Maint_UnitMeasures;
end;

procedure TUserProperties.Set_Inventory_Maint_UnitMeasures(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Maint_UnitMeasures(Param1);
end;

function TUserProperties.Get_Inventory_Reports_Forms: Smallint;
begin
    Result := DefaultInterface.Inventory_Reports_Forms;
end;

procedure TUserProperties.Set_Inventory_Reports_Forms(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Reports_Forms(Param1);
end;

function TUserProperties.Get_Inventory_Reports_MasterLists: Smallint;
begin
    Result := DefaultInterface.Inventory_Reports_MasterLists;
end;

procedure TUserProperties.Set_Inventory_Reports_MasterLists(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Reports_MasterLists(Param1);
end;

function TUserProperties.Get_Inventory_Reports_OtherReports: Smallint;
begin
    Result := DefaultInterface.Inventory_Reports_OtherReports;
end;

procedure TUserProperties.Set_Inventory_Reports_OtherReports(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Reports_OtherReports(Param1);
end;

function TUserProperties.Get_Inventory_Reports_TransactionLists: Smallint;
begin
    Result := DefaultInterface.Inventory_Reports_TransactionLists;
end;

procedure TUserProperties.Set_Inventory_Reports_TransactionLists(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Reports_TransactionLists(Param1);
end;

function TUserProperties.Get_Inventory_Tasks_Inventory: Smallint;
begin
    Result := DefaultInterface.Inventory_Tasks_Inventory;
end;

procedure TUserProperties.Set_Inventory_Tasks_Inventory(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Tasks_Inventory(Param1);
end;

function TUserProperties.Get_Inventory_Tasks_WorkTickets: Smallint;
begin
    Result := DefaultInterface.Inventory_Tasks_WorkTickets;
end;

procedure TUserProperties.Set_Inventory_Tasks_WorkTickets(Param1: Smallint);
begin
  DefaultInterface.Set_Inventory_Tasks_WorkTickets(Param1);
end;

function TUserProperties.Get_Payroll_Maint_EmployeesSalesReps: Smallint;
begin
    Result := DefaultInterface.Payroll_Maint_EmployeesSalesReps;
end;

procedure TUserProperties.Set_Payroll_Maint_EmployeesSalesReps(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Maint_EmployeesSalesReps(Param1);
end;

function TUserProperties.Get_Payroll_Maint_EmployeesSalesRepsBB: Smallint;
begin
    Result := DefaultInterface.Payroll_Maint_EmployeesSalesRepsBB;
end;

procedure TUserProperties.Set_Payroll_Maint_EmployeesSalesRepsBB(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Maint_EmployeesSalesRepsBB(Param1);
end;

function TUserProperties.Get_Payroll_Maint_PayrollTaxTables: Smallint;
begin
    Result := DefaultInterface.Payroll_Maint_PayrollTaxTables;
end;

procedure TUserProperties.Set_Payroll_Maint_PayrollTaxTables(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Maint_PayrollTaxTables(Param1);
end;

function TUserProperties.Get_Payroll_Reports_Forms: Smallint;
begin
    Result := DefaultInterface.Payroll_Reports_Forms;
end;

procedure TUserProperties.Set_Payroll_Reports_Forms(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Reports_Forms(Param1);
end;

function TUserProperties.Get_Payroll_Reports_MasterLists: Smallint;
begin
    Result := DefaultInterface.Payroll_Reports_MasterLists;
end;

procedure TUserProperties.Set_Payroll_Reports_MasterLists(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Reports_MasterLists(Param1);
end;

function TUserProperties.Get_Payroll_Reports_MailMerge: Smallint;
begin
    Result := DefaultInterface.Payroll_Reports_MailMerge;
end;

procedure TUserProperties.Set_Payroll_Reports_MailMerge(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Reports_MailMerge(Param1);
end;

function TUserProperties.Get_Payroll_Reports_OtherReports: Smallint;
begin
    Result := DefaultInterface.Payroll_Reports_OtherReports;
end;

procedure TUserProperties.Set_Payroll_Reports_OtherReports(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Reports_OtherReports(Param1);
end;

function TUserProperties.Get_Payroll_Reports_TransactionLists: Smallint;
begin
    Result := DefaultInterface.Payroll_Reports_TransactionLists;
end;

procedure TUserProperties.Set_Payroll_Reports_TransactionLists(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Reports_TransactionLists(Param1);
end;

function TUserProperties.Get_Payroll_Tasks_PayrollEntry: Smallint;
begin
    Result := DefaultInterface.Payroll_Tasks_PayrollEntry;
end;

procedure TUserProperties.Set_Payroll_Tasks_PayrollEntry(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Tasks_PayrollEntry(Param1);
end;

function TUserProperties.Get_Payroll_Tasks_VoidPRChecks: Smallint;
begin
    Result := DefaultInterface.Payroll_Tasks_VoidPRChecks;
end;

procedure TUserProperties.Set_Payroll_Tasks_VoidPRChecks(Param1: Smallint);
begin
  DefaultInterface.Set_Payroll_Tasks_VoidPRChecks(Param1);
end;

function TUserProperties.Get_Purchases_Maint_Vendors: Smallint;
begin
    Result := DefaultInterface.Purchases_Maint_Vendors;
end;

procedure TUserProperties.Set_Purchases_Maint_Vendors(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Maint_Vendors(Param1);
end;

function TUserProperties.Get_Purchases_Maint_VendorsBB: Smallint;
begin
    Result := DefaultInterface.Purchases_Maint_VendorsBB;
end;

procedure TUserProperties.Set_Purchases_Maint_VendorsBB(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Maint_VendorsBB(Param1);
end;

function TUserProperties.Get_Purchases_Reports_Forms: Smallint;
begin
    Result := DefaultInterface.Purchases_Reports_Forms;
end;

procedure TUserProperties.Set_Purchases_Reports_Forms(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Reports_Forms(Param1);
end;

function TUserProperties.Get_Purchases_Reports_MasterLists: Smallint;
begin
    Result := DefaultInterface.Purchases_Reports_MasterLists;
end;

procedure TUserProperties.Set_Purchases_Reports_MasterLists(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Reports_MasterLists(Param1);
end;

function TUserProperties.Get_Purchases_Reports_MailMerge: Smallint;
begin
    Result := DefaultInterface.Purchases_Reports_MailMerge;
end;

procedure TUserProperties.Set_Purchases_Reports_MailMerge(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Reports_MailMerge(Param1);
end;

function TUserProperties.Get_Purchases_Reports_OtherReports: Smallint;
begin
    Result := DefaultInterface.Purchases_Reports_OtherReports;
end;

procedure TUserProperties.Set_Purchases_Reports_OtherReports(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Reports_OtherReports(Param1);
end;

function TUserProperties.Get_Purchases_Reports_TransactionLists: Smallint;
begin
    Result := DefaultInterface.Purchases_Reports_TransactionLists;
end;

procedure TUserProperties.Set_Purchases_Reports_TransactionLists(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Reports_TransactionLists(Param1);
end;

function TUserProperties.Get_Purchases_Tasks_Payments: Smallint;
begin
    Result := DefaultInterface.Purchases_Tasks_Payments;
end;

procedure TUserProperties.Set_Purchases_Tasks_Payments(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Tasks_Payments(Param1);
end;

function TUserProperties.Get_Purchases_Tasks_PurchaseOrders: Smallint;
begin
    Result := DefaultInterface.Purchases_Tasks_PurchaseOrders;
end;

procedure TUserProperties.Set_Purchases_Tasks_PurchaseOrders(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Tasks_PurchaseOrders(Param1);
end;

function TUserProperties.Get_Purchases_Tasks_PurchasesInventory: Smallint;
begin
    Result := DefaultInterface.Purchases_Tasks_PurchasesInventory;
end;

procedure TUserProperties.Set_Purchases_Tasks_PurchasesInventory(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Tasks_PurchasesInventory(Param1);
end;

function TUserProperties.Get_Purchases_Tasks_VendorCreditMemos: Smallint;
begin
    Result := DefaultInterface.Purchases_Tasks_VendorCreditMemos;
end;

procedure TUserProperties.Set_Purchases_Tasks_VendorCreditMemos(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Tasks_VendorCreditMemos(Param1);
end;

function TUserProperties.Get_Purchases_Tasks_VoidChecks: Smallint;
begin
    Result := DefaultInterface.Purchases_Tasks_VoidChecks;
end;

procedure TUserProperties.Set_Purchases_Tasks_VoidChecks(Param1: Smallint);
begin
  DefaultInterface.Set_Purchases_Tasks_VoidChecks(Param1);
end;

function TUserProperties.Get_Sales_Maint_CustomerPaymentDefaults: Smallint;
begin
    Result := DefaultInterface.Sales_Maint_CustomerPaymentDefaults;
end;

procedure TUserProperties.Set_Sales_Maint_CustomerPaymentDefaults(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Maint_CustomerPaymentDefaults(Param1);
end;

function TUserProperties.Get_Sales_Maint_Customers: Smallint;
begin
    Result := DefaultInterface.Sales_Maint_Customers;
end;

procedure TUserProperties.Set_Sales_Maint_Customers(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Maint_Customers(Param1);
end;

function TUserProperties.Get_Sales_Maint_CustomersProspectsBB: Smallint;
begin
    Result := DefaultInterface.Sales_Maint_CustomersProspectsBB;
end;

procedure TUserProperties.Set_Sales_Maint_CustomersProspectsBB(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Maint_CustomersProspectsBB(Param1);
end;

function TUserProperties.Get_Sales_Reports_Forms: Smallint;
begin
    Result := DefaultInterface.Sales_Reports_Forms;
end;

procedure TUserProperties.Set_Sales_Reports_Forms(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Reports_Forms(Param1);
end;

function TUserProperties.Get_Sales_Reports_MailMerge: Smallint;
begin
    Result := DefaultInterface.Sales_Reports_MailMerge;
end;

procedure TUserProperties.Set_Sales_Reports_MailMerge(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Reports_MailMerge(Param1);
end;

function TUserProperties.Get_Sales_Reports_MasterLists: Smallint;
begin
    Result := DefaultInterface.Sales_Reports_MasterLists;
end;

procedure TUserProperties.Set_Sales_Reports_MasterLists(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Reports_MasterLists(Param1);
end;

function TUserProperties.Get_Sales_Reports_OtherReports: Smallint;
begin
    Result := DefaultInterface.Sales_Reports_OtherReports;
end;

procedure TUserProperties.Set_Sales_Reports_OtherReports(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Reports_OtherReports(Param1);
end;

function TUserProperties.Get_Sales_Reports_TransactionLists: Smallint;
begin
    Result := DefaultInterface.Sales_Reports_TransactionLists;
end;

procedure TUserProperties.Set_Sales_Reports_TransactionLists(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Reports_TransactionLists(Param1);
end;

function TUserProperties.Get_Sales_Tasks_CreditMemos: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_CreditMemos;
end;

procedure TUserProperties.Set_Sales_Tasks_CreditMemos(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_CreditMemos(Param1);
end;

function TUserProperties.Get_Sales_Tasks_Quotes: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_Quotes;
end;

procedure TUserProperties.Set_Sales_Tasks_Quotes(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_Quotes(Param1);
end;

function TUserProperties.Get_Sales_Tasks_Receipts: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_Receipts;
end;

procedure TUserProperties.Set_Sales_Tasks_Receipts(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_Receipts(Param1);
end;

function TUserProperties.Get_Sales_Tasks_SalesInvoicing: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_SalesInvoicing;
end;

procedure TUserProperties.Set_Sales_Tasks_SalesInvoicing(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_SalesInvoicing(Param1);
end;

function TUserProperties.Get_Sales_Tasks_SalesOrders: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_SalesOrders;
end;

procedure TUserProperties.Set_Sales_Tasks_SalesOrders(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_SalesOrders(Param1);
end;

function TUserProperties.Get_Sales_Tasks_Shipment: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_Shipment;
end;

procedure TUserProperties.Set_Sales_Tasks_Shipment(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_Shipment(Param1);
end;

function TUserProperties.Get_Sales_Tasks_ShipmentRegistrationWizard: Smallint;
begin
    Result := DefaultInterface.Sales_Tasks_ShipmentRegistrationWizard;
end;

procedure TUserProperties.Set_Sales_Tasks_ShipmentRegistrationWizard(Param1: Smallint);
begin
  DefaultInterface.Set_Sales_Tasks_ShipmentRegistrationWizard(Param1);
end;

function TUserProperties.Get_System_Analysis_CashManager: Smallint;
begin
    Result := DefaultInterface.System_Analysis_CashManager;
end;

procedure TUserProperties.Set_System_Analysis_CashManager(Param1: Smallint);
begin
  DefaultInterface.Set_System_Analysis_CashManager(Param1);
end;

function TUserProperties.Get_System_Analysis_CollectionManager: Smallint;
begin
    Result := DefaultInterface.System_Analysis_CollectionManager;
end;

procedure TUserProperties.Set_System_Analysis_CollectionManager(Param1: Smallint);
begin
  DefaultInterface.Set_System_Analysis_CollectionManager(Param1);
end;

function TUserProperties.Get_System_Analysis_FinancialManager: Smallint;
begin
    Result := DefaultInterface.System_Analysis_FinancialManager;
end;

procedure TUserProperties.Set_System_Analysis_FinancialManager(Param1: Smallint);
begin
  DefaultInterface.Set_System_Analysis_FinancialManager(Param1);
end;

function TUserProperties.Get_System_Analysis_PaymentManager: Smallint;
begin
    Result := DefaultInterface.System_Analysis_PaymentManager;
end;

procedure TUserProperties.Set_System_Analysis_PaymentManager(Param1: Smallint);
begin
  DefaultInterface.Set_System_Analysis_PaymentManager(Param1);
end;

function TUserProperties.Get_System_File_ArchiveCompany: Smallint;
begin
    Result := DefaultInterface.System_File_ArchiveCompany;
end;

procedure TUserProperties.Set_System_File_ArchiveCompany(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_ArchiveCompany(Param1);
end;

function TUserProperties.Get_System_File_Backup: Smallint;
begin
    Result := DefaultInterface.System_File_Backup;
end;

procedure TUserProperties.Set_System_File_Backup(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_Backup(Param1);
end;

function TUserProperties.Get_System_File_ImportExport: Smallint;
begin
    Result := DefaultInterface.System_File_ImportExport;
end;

procedure TUserProperties.Set_System_File_ImportExport(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_ImportExport(Param1);
end;

function TUserProperties.Get_System_File_IntegrityCheck: Smallint;
begin
    Result := DefaultInterface.System_File_IntegrityCheck;
end;

procedure TUserProperties.Set_System_File_IntegrityCheck(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_IntegrityCheck(Param1);
end;

function TUserProperties.Get_System_File_NewCompany: Smallint;
begin
    Result := DefaultInterface.System_File_NewCompany;
end;

procedure TUserProperties.Set_System_File_NewCompany(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_NewCompany(Param1);
end;

function TUserProperties.Get_System_File_OnlineBackup: Smallint;
begin
    Result := DefaultInterface.System_File_OnlineBackup;
end;

procedure TUserProperties.Set_System_File_OnlineBackup(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_OnlineBackup(Param1);
end;

function TUserProperties.Get_System_File_ReconsolidateCompany: Smallint;
begin
    Result := DefaultInterface.System_File_ReconsolidateCompany;
end;

procedure TUserProperties.Set_System_File_ReconsolidateCompany(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_ReconsolidateCompany(Param1);
end;

function TUserProperties.Get_System_File_Restore: Smallint;
begin
    Result := DefaultInterface.System_File_Restore;
end;

procedure TUserProperties.Set_System_File_Restore(Param1: Smallint);
begin
  DefaultInterface.Set_System_File_Restore(Param1);
end;

function TUserProperties.Get_System_Modem: Smallint;
begin
    Result := DefaultInterface.System_Modem;
end;

procedure TUserProperties.Set_System_Modem(Param1: Smallint);
begin
  DefaultInterface.Set_System_Modem(Param1);
end;

function TUserProperties.Get_System_Maint_CompanyInformation: Smallint;
begin
    Result := DefaultInterface.System_Maint_CompanyInformation;
end;

procedure TUserProperties.Set_System_Maint_CompanyInformation(Param1: Smallint);
begin
  DefaultInterface.Set_System_Maint_CompanyInformation(Param1);
end;

function TUserProperties.Get_System_Maint_ElectronicPayments: Smallint;
begin
    Result := DefaultInterface.System_Maint_ElectronicPayments;
end;

procedure TUserProperties.Set_System_Maint_ElectronicPayments(Param1: Smallint);
begin
  DefaultInterface.Set_System_Maint_ElectronicPayments(Param1);
end;

function TUserProperties.Get_System_Maint_Jobs: Smallint;
begin
    Result := DefaultInterface.System_Maint_Jobs;
end;

procedure TUserProperties.Set_System_Maint_Jobs(Param1: Smallint);
begin
  DefaultInterface.Set_System_Maint_Jobs(Param1);
end;

function TUserProperties.Get_System_Options_ActionItemsEventLog: Smallint;
begin
    Result := DefaultInterface.System_Options_ActionItemsEventLog;
end;

procedure TUserProperties.Set_System_Options_ActionItemsEventLog(Param1: Smallint);
begin
  DefaultInterface.Set_System_Options_ActionItemsEventLog(Param1);
end;

function TUserProperties.Get_System_Options_ChangeSystemDate: Smallint;
begin
    Result := DefaultInterface.System_Options_ChangeSystemDate;
end;

procedure TUserProperties.Set_System_Options_ChangeSystemDate(Param1: Smallint);
begin
  DefaultInterface.Set_System_Options_ChangeSystemDate(Param1);
end;

function TUserProperties.Get_System_Reports_AccountReconcil: Smallint;
begin
    Result := DefaultInterface.System_Reports_AccountReconcil;
end;

procedure TUserProperties.Set_System_Reports_AccountReconcil(Param1: Smallint);
begin
  DefaultInterface.Set_System_Reports_AccountReconcil(Param1);
end;

function TUserProperties.Get_System_Reports_AuditTrail: Smallint;
begin
    Result := DefaultInterface.System_Reports_AuditTrail;
end;

procedure TUserProperties.Set_System_Reports_AuditTrail(Param1: Smallint);
begin
  DefaultInterface.Set_System_Reports_AuditTrail(Param1);
end;

function TUserProperties.Get_System_Reports_ElectronicBillPayment: Smallint;
begin
    Result := DefaultInterface.System_Reports_ElectronicBillPayment;
end;

procedure TUserProperties.Set_System_Reports_ElectronicBillPayment(Param1: Smallint);
begin
  DefaultInterface.Set_System_Reports_ElectronicBillPayment(Param1);
end;

function TUserProperties.Get_System_Reports_Jobs: Smallint;
begin
    Result := DefaultInterface.System_Reports_Jobs;
end;

procedure TUserProperties.Set_System_Reports_Jobs(Param1: Smallint);
begin
  DefaultInterface.Set_System_Reports_Jobs(Param1);
end;

function TUserProperties.Get_System_Reports_ReportGroups: Smallint;
begin
    Result := DefaultInterface.System_Reports_ReportGroups;
end;

procedure TUserProperties.Set_System_Reports_ReportGroups(Param1: Smallint);
begin
  DefaultInterface.Set_System_Reports_ReportGroups(Param1);
end;

function TUserProperties.Get_System_Reports_TimeExpense: Smallint;
begin
    Result := DefaultInterface.System_Reports_TimeExpense;
end;

procedure TUserProperties.Set_System_Reports_TimeExpense(Param1: Smallint);
begin
  DefaultInterface.Set_System_Reports_TimeExpense(Param1);
end;

function TUserProperties.Get_System_Tasks_AccountReconciliation: Smallint;
begin
    Result := DefaultInterface.System_Tasks_AccountReconciliation;
end;

procedure TUserProperties.Set_System_Tasks_AccountReconciliation(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_AccountReconciliation(Param1);
end;

function TUserProperties.Get_System_Tasks_ActionItems: Smallint;
begin
    Result := DefaultInterface.System_Tasks_ActionItems;
end;

procedure TUserProperties.Set_System_Tasks_ActionItems(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_ActionItems(Param1);
end;

function TUserProperties.Get_System_Tasks_ChangeAccountingPeriod: Smallint;
begin
    Result := DefaultInterface.System_Tasks_ChangeAccountingPeriod;
end;

procedure TUserProperties.Set_System_Tasks_ChangeAccountingPeriod(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_ChangeAccountingPeriod(Param1);
end;

function TUserProperties.Get_System_Tasks_CloseFiscalYear: Smallint;
begin
    Result := DefaultInterface.System_Tasks_CloseFiscalYear;
end;

procedure TUserProperties.Set_System_Tasks_CloseFiscalYear(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_CloseFiscalYear(Param1);
end;

function TUserProperties.Get_System_Tasks_ClosePayrollYear: Smallint;
begin
    Result := DefaultInterface.System_Tasks_ClosePayrollYear;
end;

procedure TUserProperties.Set_System_Tasks_ClosePayrollYear(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_ClosePayrollYear(Param1);
end;

function TUserProperties.Get_System_Tasks_ElectronicBillPayment: Smallint;
begin
    Result := DefaultInterface.System_Tasks_ElectronicBillPayment;
end;

procedure TUserProperties.Set_System_Tasks_ElectronicBillPayment(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_ElectronicBillPayment(Param1);
end;

function TUserProperties.Get_System_Tasks_FindTransactions: Smallint;
begin
    Result := DefaultInterface.System_Tasks_FindTransactions;
end;

procedure TUserProperties.Set_System_Tasks_FindTransactions(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_FindTransactions(Param1);
end;

function TUserProperties.Get_System_Tasks_LinkToOtherApps: Smallint;
begin
    Result := DefaultInterface.System_Tasks_LinkToOtherApps;
end;

procedure TUserProperties.Set_System_Tasks_LinkToOtherApps(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_LinkToOtherApps(Param1);
end;

function TUserProperties.Get_System_Tasks_Post: Smallint;
begin
    Result := DefaultInterface.System_Tasks_Post;
end;

procedure TUserProperties.Set_System_Tasks_Post(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_Post(Param1);
end;

function TUserProperties.Get_System_Tasks_Purge: Smallint;
begin
    Result := DefaultInterface.System_Tasks_Purge;
end;

procedure TUserProperties.Set_System_Tasks_Purge(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_Purge(Param1);
end;

function TUserProperties.Get_System_Tasks_TimeAndExpenseTickets: Smallint;
begin
    Result := DefaultInterface.System_Tasks_TimeAndExpenseTickets;
end;

procedure TUserProperties.Set_System_Tasks_TimeAndExpenseTickets(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_TimeAndExpenseTickets(Param1);
end;

function TUserProperties.Get_System_Tasks_TransactionsInPriorPeriods: Smallint;
begin
    Result := DefaultInterface.System_Tasks_TransactionsInPriorPeriods;
end;

procedure TUserProperties.Set_System_Tasks_TransactionsInPriorPeriods(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_TransactionsInPriorPeriods(Param1);
end;

function TUserProperties.Get_System_Tasks_Unpost: Smallint;
begin
    Result := DefaultInterface.System_Tasks_Unpost;
end;

procedure TUserProperties.Set_System_Tasks_Unpost(Param1: Smallint);
begin
  DefaultInterface.Set_System_Tasks_Unpost(Param1);
end;

function TUserProperties.Get_Unknown1: Smallint;
begin
    Result := DefaultInterface.Unknown1;
end;

procedure TUserProperties.Set_Unknown1(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown1(Param1);
end;

function TUserProperties.Get_Unknown2: Smallint;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TUserProperties.Set_Unknown2(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TUserProperties.Get_Unknown3(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown3[Index];
end;

procedure TUserProperties.Set_Unknown3(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown3[Index] := Param2;
end;

function TUserProperties.Get_Unknown4: Smallint;
begin
    Result := DefaultInterface.Unknown4;
end;

procedure TUserProperties.Set_Unknown4(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown4(Param1);
end;

function TUserProperties.Get_UserName: WideString;
begin
    Result := DefaultInterface.UserName;
end;

procedure TUserProperties.Set_UserName(const Param1: WideString);
begin
  DefaultInterface.Set_UserName(Param1);
end;

{$ENDIF}

class function CoSortJob.Create: _SortJob;
begin
  Result := CreateComObject(CLASS_SortJob) as _SortJob;
end;

class function CoSortJob.CreateRemote(const MachineName: string): _SortJob;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SortJob) as _SortJob;
end;

procedure TSortJob.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E2CA2970-881F-4EFE-A4E6-2059623A9561}';
    IntfIID:   '{8166AFE8-8596-4A5F-B297-B3DAE7BB8255}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSortJob.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SortJob;
  end;
end;

procedure TSortJob.ConnectTo(svrIntf: _SortJob);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSortJob.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSortJob.GetDefaultInterface: _SortJob;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSortJob.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSortJobProperties.Create(Self);
{$ENDIF}
end;

destructor TSortJob.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSortJob.GetServerProperties: TSortJobProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSortJob.Get_Account: WideString;
begin
    Result := DefaultInterface.Account;
end;

procedure TSortJob.Set_Account(const Param1: WideString);
begin
  DefaultInterface.Set_Account(Param1);
end;

function TSortJob.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TSortJob.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TSortJob.Get_AmountType: Smallint;
begin
    Result := DefaultInterface.AmountType;
end;

procedure TSortJob.Set_AmountType(Param1: Smallint);
begin
  DefaultInterface.Set_AmountType(Param1);
end;

function TSortJob.Get_CostDescription: WideString;
begin
    Result := DefaultInterface.CostDescription;
end;

procedure TSortJob.Set_CostDescription(const Param1: WideString);
begin
  DefaultInterface.Set_CostDescription(Param1);
end;

function TSortJob.Get_CostIndex: Integer;
begin
    Result := DefaultInterface.CostIndex;
end;

procedure TSortJob.Set_CostIndex(Param1: Integer);
begin
  DefaultInterface.Set_CostIndex(Param1);
end;

function TSortJob.Get_CostOfSalesTrx: Byte;
begin
    Result := DefaultInterface.CostOfSalesTrx;
end;

procedure TSortJob.Set_CostOfSalesTrx(Param1: Byte);
begin
  DefaultInterface.Set_CostOfSalesTrx(Param1);
end;

function TSortJob.Get_ID: WideString;
begin
    Result := DefaultInterface.ID;
end;

procedure TSortJob.Set_ID(const Param1: WideString);
begin
  DefaultInterface.Set_ID(Param1);
end;

function TSortJob.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TSortJob.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TSortJob.Get_Invoice: WideString;
begin
    Result := DefaultInterface.Invoice;
end;

procedure TSortJob.Set_Invoice(const Param1: WideString);
begin
  DefaultInterface.Set_Invoice(Param1);
end;

function TSortJob.Get_ItemIndex: Integer;
begin
    Result := DefaultInterface.ItemIndex;
end;

procedure TSortJob.Set_ItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_ItemIndex(Param1);
end;

function TSortJob.Get_JobDescription: WideString;
begin
    Result := DefaultInterface.JobDescription;
end;

procedure TSortJob.Set_JobDescription(const Param1: WideString);
begin
  DefaultInterface.Set_JobDescription(Param1);
end;

function TSortJob.Get_JobIndex: Integer;
begin
    Result := DefaultInterface.JobIndex;
end;

procedure TSortJob.Set_JobIndex(Param1: Integer);
begin
  DefaultInterface.Set_JobIndex(Param1);
end;

function TSortJob.Get_JournalCode: Byte;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TSortJob.Set_JournalCode(Param1: Byte);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TSortJob.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TSortJob.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TSortJob.Get_Line: Smallint;
begin
    Result := DefaultInterface.Line;
end;

procedure TSortJob.Set_Line(Param1: Smallint);
begin
  DefaultInterface.Set_Line(Param1);
end;

function TSortJob.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TSortJob.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TSortJob.Get_PhaseDescription: WideString;
begin
    Result := DefaultInterface.PhaseDescription;
end;

procedure TSortJob.Set_PhaseDescription(const Param1: WideString);
begin
  DefaultInterface.Set_PhaseDescription(Param1);
end;

function TSortJob.Get_PhaseIndex: Integer;
begin
    Result := DefaultInterface.PhaseIndex;
end;

procedure TSortJob.Set_PhaseIndex(Param1: Integer);
begin
  DefaultInterface.Set_PhaseIndex(Param1);
end;

function TSortJob.Get_Posted: Byte;
begin
    Result := DefaultInterface.Posted;
end;

procedure TSortJob.Set_Posted(Param1: Byte);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TSortJob.Get_Quote: Byte;
begin
    Result := DefaultInterface.Quote;
end;

procedure TSortJob.Set_Quote(Param1: Byte);
begin
  DefaultInterface.Set_Quote(Param1);
end;

function TSortJob.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TSortJob.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TSortJob.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TSortJob.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TSortJob.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TSortJob.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TSortJob.Get_Unknown1: Integer;
begin
    Result := DefaultInterface.Unknown1;
end;

procedure TSortJob.Set_Unknown1(Param1: Integer);
begin
  DefaultInterface.Set_Unknown1(Param1);
end;

function TSortJob.Get_Unknown2: Byte;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TSortJob.Set_Unknown2(Param1: Byte);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TSortJob.Get_Unknown3: Byte;
begin
    Result := DefaultInterface.Unknown3;
end;

procedure TSortJob.Set_Unknown3(Param1: Byte);
begin
  DefaultInterface.Set_Unknown3(Param1);
end;

function TSortJob.Get_Unknown4: Smallint;
begin
    Result := DefaultInterface.Unknown4;
end;

procedure TSortJob.Set_Unknown4(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown4(Param1);
end;

function TSortJob.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TSortJob.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TSortJob.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TSortJob.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TSortJob.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TSortJob.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TSortJob.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TSortJob.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TSortJob.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TSortJob.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSortJobProperties.Create(AServer: TSortJob);
begin
  inherited Create;
  FServer := AServer;
end;

function TSortJobProperties.GetDefaultInterface: _SortJob;
begin
  Result := FServer.DefaultInterface;
end;

function TSortJobProperties.Get_Account: WideString;
begin
    Result := DefaultInterface.Account;
end;

procedure TSortJobProperties.Set_Account(const Param1: WideString);
begin
  DefaultInterface.Set_Account(Param1);
end;

function TSortJobProperties.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TSortJobProperties.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TSortJobProperties.Get_AmountType: Smallint;
begin
    Result := DefaultInterface.AmountType;
end;

procedure TSortJobProperties.Set_AmountType(Param1: Smallint);
begin
  DefaultInterface.Set_AmountType(Param1);
end;

function TSortJobProperties.Get_CostDescription: WideString;
begin
    Result := DefaultInterface.CostDescription;
end;

procedure TSortJobProperties.Set_CostDescription(const Param1: WideString);
begin
  DefaultInterface.Set_CostDescription(Param1);
end;

function TSortJobProperties.Get_CostIndex: Integer;
begin
    Result := DefaultInterface.CostIndex;
end;

procedure TSortJobProperties.Set_CostIndex(Param1: Integer);
begin
  DefaultInterface.Set_CostIndex(Param1);
end;

function TSortJobProperties.Get_CostOfSalesTrx: Byte;
begin
    Result := DefaultInterface.CostOfSalesTrx;
end;

procedure TSortJobProperties.Set_CostOfSalesTrx(Param1: Byte);
begin
  DefaultInterface.Set_CostOfSalesTrx(Param1);
end;

function TSortJobProperties.Get_ID: WideString;
begin
    Result := DefaultInterface.ID;
end;

procedure TSortJobProperties.Set_ID(const Param1: WideString);
begin
  DefaultInterface.Set_ID(Param1);
end;

function TSortJobProperties.Get_Index: Integer;
begin
    Result := DefaultInterface.Index;
end;

procedure TSortJobProperties.Set_Index(Param1: Integer);
begin
  DefaultInterface.Set_Index(Param1);
end;

function TSortJobProperties.Get_Invoice: WideString;
begin
    Result := DefaultInterface.Invoice;
end;

procedure TSortJobProperties.Set_Invoice(const Param1: WideString);
begin
  DefaultInterface.Set_Invoice(Param1);
end;

function TSortJobProperties.Get_ItemIndex: Integer;
begin
    Result := DefaultInterface.ItemIndex;
end;

procedure TSortJobProperties.Set_ItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_ItemIndex(Param1);
end;

function TSortJobProperties.Get_JobDescription: WideString;
begin
    Result := DefaultInterface.JobDescription;
end;

procedure TSortJobProperties.Set_JobDescription(const Param1: WideString);
begin
  DefaultInterface.Set_JobDescription(Param1);
end;

function TSortJobProperties.Get_JobIndex: Integer;
begin
    Result := DefaultInterface.JobIndex;
end;

procedure TSortJobProperties.Set_JobIndex(Param1: Integer);
begin
  DefaultInterface.Set_JobIndex(Param1);
end;

function TSortJobProperties.Get_JournalCode: Byte;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TSortJobProperties.Set_JournalCode(Param1: Byte);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TSortJobProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TSortJobProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TSortJobProperties.Get_Line: Smallint;
begin
    Result := DefaultInterface.Line;
end;

procedure TSortJobProperties.Set_Line(Param1: Smallint);
begin
  DefaultInterface.Set_Line(Param1);
end;

function TSortJobProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TSortJobProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TSortJobProperties.Get_PhaseDescription: WideString;
begin
    Result := DefaultInterface.PhaseDescription;
end;

procedure TSortJobProperties.Set_PhaseDescription(const Param1: WideString);
begin
  DefaultInterface.Set_PhaseDescription(Param1);
end;

function TSortJobProperties.Get_PhaseIndex: Integer;
begin
    Result := DefaultInterface.PhaseIndex;
end;

procedure TSortJobProperties.Set_PhaseIndex(Param1: Integer);
begin
  DefaultInterface.Set_PhaseIndex(Param1);
end;

function TSortJobProperties.Get_Posted: Byte;
begin
    Result := DefaultInterface.Posted;
end;

procedure TSortJobProperties.Set_Posted(Param1: Byte);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TSortJobProperties.Get_Quote: Byte;
begin
    Result := DefaultInterface.Quote;
end;

procedure TSortJobProperties.Set_Quote(Param1: Byte);
begin
  DefaultInterface.Set_Quote(Param1);
end;

function TSortJobProperties.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TSortJobProperties.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TSortJobProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TSortJobProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TSortJobProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TSortJobProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TSortJobProperties.Get_Unknown1: Integer;
begin
    Result := DefaultInterface.Unknown1;
end;

procedure TSortJobProperties.Set_Unknown1(Param1: Integer);
begin
  DefaultInterface.Set_Unknown1(Param1);
end;

function TSortJobProperties.Get_Unknown2: Byte;
begin
    Result := DefaultInterface.Unknown2;
end;

procedure TSortJobProperties.Set_Unknown2(Param1: Byte);
begin
  DefaultInterface.Set_Unknown2(Param1);
end;

function TSortJobProperties.Get_Unknown3: Byte;
begin
    Result := DefaultInterface.Unknown3;
end;

procedure TSortJobProperties.Set_Unknown3(Param1: Byte);
begin
  DefaultInterface.Set_Unknown3(Param1);
end;

function TSortJobProperties.Get_Unknown4: Smallint;
begin
    Result := DefaultInterface.Unknown4;
end;

procedure TSortJobProperties.Set_Unknown4(Param1: Smallint);
begin
  DefaultInterface.Set_Unknown4(Param1);
end;

{$ENDIF}

class function CoSelectVendor.Create: _SelectVendor;
begin
  Result := CreateComObject(CLASS_SelectVendor) as _SelectVendor;
end;

class function CoSelectVendor.CreateRemote(const MachineName: string): _SelectVendor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectVendor) as _SelectVendor;
end;

procedure TSelectVendor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{42E9681B-F32F-412A-BB9C-D49285D36F2A}';
    IntfIID:   '{BB18B622-0E50-425E-92AB-A98D71577173}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSelectVendor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SelectVendor;
  end;
end;

procedure TSelectVendor.ConnectTo(svrIntf: _SelectVendor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSelectVendor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSelectVendor.GetDefaultInterface: _SelectVendor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSelectVendor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSelectVendorProperties.Create(Self);
{$ENDIF}
end;

destructor TSelectVendor.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSelectVendor.GetServerProperties: TSelectVendorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSelectVendor.Get_VendorID: WideString;
begin
    Result := DefaultInterface.VendorID;
end;

procedure TSelectVendor.Set_VendorID(const Param1: WideString);
begin
  DefaultInterface.Set_VendorID(Param1);
end;

procedure TSelectVendor.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

function TSelectVendor.ShowOpen: OleVariant;
begin
  Result := DefaultInterface.ShowOpen;
end;

function TSelectVendor.Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
begin
  Result := DefaultInterface.Location(hwnd, left, top);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSelectVendorProperties.Create(AServer: TSelectVendor);
begin
  inherited Create;
  FServer := AServer;
end;

function TSelectVendorProperties.GetDefaultInterface: _SelectVendor;
begin
  Result := FServer.DefaultInterface;
end;

function TSelectVendorProperties.Get_VendorID: WideString;
begin
    Result := DefaultInterface.VendorID;
end;

procedure TSelectVendorProperties.Set_VendorID(const Param1: WideString);
begin
  DefaultInterface.Set_VendorID(Param1);
end;

procedure TSelectVendorProperties.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

{$ENDIF}

class function CoSelectLineItem.Create: _SelectLineItem;
begin
  Result := CreateComObject(CLASS_SelectLineItem) as _SelectLineItem;
end;

class function CoSelectLineItem.CreateRemote(const MachineName: string): _SelectLineItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectLineItem) as _SelectLineItem;
end;

procedure TSelectLineItem.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8B3C6604-07D3-4523-91A3-4A751037A7ED}';
    IntfIID:   '{AC6315A9-0948-4D8C-A3CF-FF87DE45C155}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSelectLineItem.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SelectLineItem;
  end;
end;

procedure TSelectLineItem.ConnectTo(svrIntf: _SelectLineItem);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSelectLineItem.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSelectLineItem.GetDefaultInterface: _SelectLineItem;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSelectLineItem.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSelectLineItemProperties.Create(Self);
{$ENDIF}
end;

destructor TSelectLineItem.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSelectLineItem.GetServerProperties: TSelectLineItemProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSelectLineItem.Get_ItemID: WideString;
begin
    Result := DefaultInterface.ItemID;
end;

procedure TSelectLineItem.Set_ItemID(const Param1: WideString);
begin
  DefaultInterface.Set_ItemID(Param1);
end;

procedure TSelectLineItem.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

function TSelectLineItem.ShowOpen: OleVariant;
begin
  Result := DefaultInterface.ShowOpen;
end;

function TSelectLineItem.Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
begin
  Result := DefaultInterface.Location(hwnd, left, top);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSelectLineItemProperties.Create(AServer: TSelectLineItem);
begin
  inherited Create;
  FServer := AServer;
end;

function TSelectLineItemProperties.GetDefaultInterface: _SelectLineItem;
begin
  Result := FServer.DefaultInterface;
end;

function TSelectLineItemProperties.Get_ItemID: WideString;
begin
    Result := DefaultInterface.ItemID;
end;

procedure TSelectLineItemProperties.Set_ItemID(const Param1: WideString);
begin
  DefaultInterface.Set_ItemID(Param1);
end;

procedure TSelectLineItemProperties.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

{$ENDIF}

class function CoSelectEmployee.Create: _SelectEmployee;
begin
  Result := CreateComObject(CLASS_SelectEmployee) as _SelectEmployee;
end;

class function CoSelectEmployee.CreateRemote(const MachineName: string): _SelectEmployee;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectEmployee) as _SelectEmployee;
end;

procedure TSelectEmployee.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A133126B-6247-48FD-BE36-06793EA2306A}';
    IntfIID:   '{D13855A6-6CD1-4EC8-9AFB-A62093BF27A9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSelectEmployee.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SelectEmployee;
  end;
end;

procedure TSelectEmployee.ConnectTo(svrIntf: _SelectEmployee);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSelectEmployee.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSelectEmployee.GetDefaultInterface: _SelectEmployee;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSelectEmployee.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSelectEmployeeProperties.Create(Self);
{$ENDIF}
end;

destructor TSelectEmployee.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSelectEmployee.GetServerProperties: TSelectEmployeeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSelectEmployee.Get_EmployeeID: WideString;
begin
    Result := DefaultInterface.EmployeeID;
end;

procedure TSelectEmployee.Set_EmployeeID(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeID(Param1);
end;

procedure TSelectEmployee.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

function TSelectEmployee.ShowOpen: OleVariant;
begin
  Result := DefaultInterface.ShowOpen;
end;

function TSelectEmployee.Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
begin
  Result := DefaultInterface.Location(hwnd, left, top);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSelectEmployeeProperties.Create(AServer: TSelectEmployee);
begin
  inherited Create;
  FServer := AServer;
end;

function TSelectEmployeeProperties.GetDefaultInterface: _SelectEmployee;
begin
  Result := FServer.DefaultInterface;
end;

function TSelectEmployeeProperties.Get_EmployeeID: WideString;
begin
    Result := DefaultInterface.EmployeeID;
end;

procedure TSelectEmployeeProperties.Set_EmployeeID(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeID(Param1);
end;

procedure TSelectEmployeeProperties.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

{$ENDIF}

class function CoJrnlHdr.Create: _JrnlHdr;
begin
  Result := CreateComObject(CLASS_JrnlHdr) as _JrnlHdr;
end;

class function CoJrnlHdr.CreateRemote(const MachineName: string): _JrnlHdr;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_JrnlHdr) as _JrnlHdr;
end;

procedure TJrnlHdr.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{82E9BC8E-3A9B-42B1-96EE-B535F9A6156B}';
    IntfIID:   '{13A31E87-9BD4-4E4D-A26C-C5F16A2A5E5F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TJrnlHdr.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _JrnlHdr;
  end;
end;

procedure TJrnlHdr.ConnectTo(svrIntf: _JrnlHdr);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TJrnlHdr.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TJrnlHdr.GetDefaultInterface: _JrnlHdr;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TJrnlHdr.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TJrnlHdrProperties.Create(Self);
{$ENDIF}
end;

destructor TJrnlHdr.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TJrnlHdr.GetServerProperties: TJrnlHdrProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TJrnlHdr.Get_ActualLength: Integer;
begin
    Result := DefaultInterface.ActualLength;
end;

function TJrnlHdr.Get_Address1: WideString;
begin
    Result := DefaultInterface.Address1;
end;

procedure TJrnlHdr.Set_Address1(const Param1: WideString);
begin
  DefaultInterface.Set_Address1(Param1);
end;

function TJrnlHdr.Get_Address2: WideString;
begin
    Result := DefaultInterface.Address2;
end;

procedure TJrnlHdr.Set_Address2(const Param1: WideString);
begin
  DefaultInterface.Set_Address2(Param1);
end;

function TJrnlHdr.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TJrnlHdr.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TJrnlHdr.Get_AmountPaid: Double;
begin
    Result := DefaultInterface.AmountPaid;
end;

procedure TJrnlHdr.Set_AmountPaid(Param1: Double);
begin
  DefaultInterface.Set_AmountPaid(Param1);
end;

function TJrnlHdr.Get_AppName: WideString;
begin
    Result := DefaultInterface.AppName;
end;

procedure TJrnlHdr.Set_AppName(const Param1: WideString);
begin
  DefaultInterface.Set_AppName(Param1);
end;

function TJrnlHdr.Get_BeginningBalance: WordBool;
begin
    Result := DefaultInterface.BeginningBalance;
end;

procedure TJrnlHdr.Set_BeginningBalance(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalance(Param1);
end;

function TJrnlHdr.Get_CCAddress1: WideString;
begin
    Result := DefaultInterface.CCAddress1;
end;

procedure TJrnlHdr.Set_CCAddress1(const Param1: WideString);
begin
  DefaultInterface.Set_CCAddress1(Param1);
end;

function TJrnlHdr.Get_CCAddress2: WideString;
begin
    Result := DefaultInterface.CCAddress2;
end;

procedure TJrnlHdr.Set_CCAddress2(const Param1: WideString);
begin
  DefaultInterface.Set_CCAddress2(Param1);
end;

function TJrnlHdr.Get_CCAuthorization: WideString;
begin
    Result := DefaultInterface.CCAuthorization;
end;

procedure TJrnlHdr.Set_CCAuthorization(const Param1: WideString);
begin
  DefaultInterface.Set_CCAuthorization(Param1);
end;

function TJrnlHdr.Get_CCCity: WideString;
begin
    Result := DefaultInterface.CCCity;
end;

procedure TJrnlHdr.Set_CCCity(const Param1: WideString);
begin
  DefaultInterface.Set_CCCity(Param1);
end;

function TJrnlHdr.Get_CCComment: WideString;
begin
    Result := DefaultInterface.CCComment;
end;

procedure TJrnlHdr.Set_CCComment(const Param1: WideString);
begin
  DefaultInterface.Set_CCComment(Param1);
end;

function TJrnlHdr.Get_CCCountry: WideString;
begin
    Result := DefaultInterface.CCCountry;
end;

procedure TJrnlHdr.Set_CCCountry(const Param1: WideString);
begin
  DefaultInterface.Set_CCCountry(Param1);
end;

function TJrnlHdr.Get_CCEncryptedCard: WideString;
begin
    Result := DefaultInterface.CCEncryptedCard;
end;

procedure TJrnlHdr.Set_CCEncryptedCard(const Param1: WideString);
begin
  DefaultInterface.Set_CCEncryptedCard(Param1);
end;

function TJrnlHdr.Get_CCExpirationDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.CCExpirationDate;
end;

procedure TJrnlHdr.Set_CCExpirationDate(Param1: OleVariant);
begin
  DefaultInterface.Set_CCExpirationDate(Param1);
end;

function TJrnlHdr.Get_CCFlag: Byte;
begin
    Result := DefaultInterface.CCFlag;
end;

procedure TJrnlHdr.Set_CCFlag(Param1: Byte);
begin
  DefaultInterface.Set_CCFlag(Param1);
end;

function TJrnlHdr.Get_CCName: WideString;
begin
    Result := DefaultInterface.CCName;
end;

procedure TJrnlHdr.Set_CCName(const Param1: WideString);
begin
  DefaultInterface.Set_CCName(Param1);
end;

function TJrnlHdr.Get_CCNumber: WideString;
begin
    Result := DefaultInterface.CCNumber;
end;

procedure TJrnlHdr.Set_CCNumber(const Param1: WideString);
begin
  DefaultInterface.Set_CCNumber(Param1);
end;

function TJrnlHdr.Get_CCState: WideString;
begin
    Result := DefaultInterface.CCState;
end;

procedure TJrnlHdr.Set_CCState(const Param1: WideString);
begin
  DefaultInterface.Set_CCState(Param1);
end;

function TJrnlHdr.Get_CCZipcode: WideString;
begin
    Result := DefaultInterface.CCZipcode;
end;

procedure TJrnlHdr.Set_CCZipcode(const Param1: WideString);
begin
  DefaultInterface.Set_CCZipcode(Param1);
end;

function TJrnlHdr.Get_City: WideString;
begin
    Result := DefaultInterface.City;
end;

procedure TJrnlHdr.Set_City(const Param1: WideString);
begin
  DefaultInterface.Set_City(Param1);
end;

function TJrnlHdr.Get_CloseOrder: WordBool;
begin
    Result := DefaultInterface.CloseOrder;
end;

procedure TJrnlHdr.Set_CloseOrder(Param1: WordBool);
begin
  DefaultInterface.Set_CloseOrder(Param1);
end;

function TJrnlHdr.Get_Country: WideString;
begin
    Result := DefaultInterface.Country;
end;

procedure TJrnlHdr.Set_Country(const Param1: WideString);
begin
  DefaultInterface.Set_Country(Param1);
end;

function TJrnlHdr.Get_CustomerSONo: WideString;
begin
    Result := DefaultInterface.CustomerSONo;
end;

procedure TJrnlHdr.Set_CustomerSONo(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerSONo(Param1);
end;

function TJrnlHdr.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TJrnlHdr.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TJrnlHdr.Get_DateDue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateDue;
end;

procedure TJrnlHdr.Set_DateDue(Param1: OleVariant);
begin
  DefaultInterface.Set_DateDue(Param1);
end;

function TJrnlHdr.Get_DepositDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DepositDate;
end;

procedure TJrnlHdr.Set_DepositDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DepositDate(Param1);
end;

function TJrnlHdr.Get_DepositTicketID: WideString;
begin
    Result := DefaultInterface.DepositTicketID;
end;

procedure TJrnlHdr.Set_DepositTicketID(const Param1: WideString);
begin
  DefaultInterface.Set_DepositTicketID(Param1);
end;

function TJrnlHdr.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TJrnlHdr.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TJrnlHdr.Get_DiscountAmount: Double;
begin
    Result := DefaultInterface.DiscountAmount;
end;

procedure TJrnlHdr.Set_DiscountAmount(Param1: Double);
begin
  DefaultInterface.Set_DiscountAmount(Param1);
end;

function TJrnlHdr.Get_DiscountDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DiscountDate;
end;

procedure TJrnlHdr.Set_DiscountDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DiscountDate(Param1);
end;

function TJrnlHdr.Get_DropShip: Byte;
begin
    Result := DefaultInterface.DropShip;
end;

procedure TJrnlHdr.Set_DropShip(Param1: Byte);
begin
  DefaultInterface.Set_DropShip(Param1);
end;

function TJrnlHdr.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TJrnlHdr.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TJrnlHdr.Get_GoodThruDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.GoodThruDate;
end;

procedure TJrnlHdr.Set_GoodThruDate(Param1: OleVariant);
begin
  DefaultInterface.Set_GoodThruDate(Param1);
end;

function TJrnlHdr.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TJrnlHdr.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TJrnlHdr.Get_HasPartner: WordBool;
begin
    Result := DefaultInterface.HasPartner;
end;

procedure TJrnlHdr.Set_HasPartner(Param1: WordBool);
begin
  DefaultInterface.Set_HasPartner(Param1);
end;

function TJrnlHdr.Get_IDNumber: Integer;
begin
    Result := DefaultInterface.IDNumber;
end;

procedure TJrnlHdr.Set_IDNumber(Param1: Integer);
begin
  DefaultInterface.Set_IDNumber(Param1);
end;

function TJrnlHdr.Get_IDText: WideString;
begin
    Result := DefaultInterface.IDText;
end;

procedure TJrnlHdr.Set_IDText(const Param1: WideString);
begin
  DefaultInterface.Set_IDText(Param1);
end;

function TJrnlHdr.Get_InternalNote: WideString;
begin
    Result := DefaultInterface.InternalNote;
end;

procedure TJrnlHdr.Set_InternalNote(const Param1: WideString);
begin
  DefaultInterface.Set_InternalNote(Param1);
end;

function TJrnlHdr.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TJrnlHdr.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TJrnlHdr.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TJrnlHdr.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TJrnlHdr.Get_JrnlTypeEx: Integer;
begin
    Result := DefaultInterface.JrnlTypeEx;
end;

procedure TJrnlHdr.Set_JrnlTypeEx(Param1: Integer);
begin
  DefaultInterface.Set_JrnlTypeEx(Param1);
end;

function TJrnlHdr.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TJrnlHdr.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TJrnlHdr.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TJrnlHdr.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TJrnlHdr.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TJrnlHdr.Get_MaxTrxNumberL(Period: Smallint; var JournalCode: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period, JournalCode];
end;

function TJrnlHdr.Get_Memo: WideString;
begin
    Result := DefaultInterface.Memo;
end;

procedure TJrnlHdr.Set_Memo(const Param1: WideString);
begin
  DefaultInterface.Set_Memo(Param1);
end;

function TJrnlHdr.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TJrnlHdr.Set_Name(const Param1: WideString);
begin
  DefaultInterface.Set_Name(Param1);
end;

function TJrnlHdr.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TJrnlHdr.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TJrnlHdr.Get_NotePrintsAfterItems: WordBool;
begin
    Result := DefaultInterface.NotePrintsAfterItems;
end;

procedure TJrnlHdr.Set_NotePrintsAfterItems(Param1: WordBool);
begin
  DefaultInterface.Set_NotePrintsAfterItems(Param1);
end;

function TJrnlHdr.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TJrnlHdr.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TJrnlHdr.Get_NumOrderLines: Smallint;
begin
    Result := DefaultInterface.NumOrderLines;
end;

procedure TJrnlHdr.Set_NumOrderLines(Param1: Smallint);
begin
  DefaultInterface.Set_NumOrderLines(Param1);
end;

function TJrnlHdr.Get_OrderNumber: WideString;
begin
    Result := DefaultInterface.OrderNumber;
end;

procedure TJrnlHdr.Set_OrderNumber(const Param1: WideString);
begin
  DefaultInterface.Set_OrderNumber(Param1);
end;

function TJrnlHdr.Get_OtherIndex: Integer;
begin
    Result := DefaultInterface.OtherIndex;
end;

procedure TJrnlHdr.Set_OtherIndex(Param1: Integer);
begin
  DefaultInterface.Set_OtherIndex(Param1);
end;

function TJrnlHdr.Get_OtherReceipt: WordBool;
begin
    Result := DefaultInterface.OtherReceipt;
end;

procedure TJrnlHdr.Set_OtherReceipt(Param1: WordBool);
begin
  DefaultInterface.Set_OtherReceipt(Param1);
end;

function TJrnlHdr.Get_PaidOnInvoice: Double;
begin
    Result := DefaultInterface.PaidOnInvoice;
end;

procedure TJrnlHdr.Set_PaidOnInvoice(Param1: Double);
begin
  DefaultInterface.Set_PaidOnInvoice(Param1);
end;

function TJrnlHdr.Get_PaymentDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PaymentDate;
end;

procedure TJrnlHdr.Set_PaymentDate(Param1: OleVariant);
begin
  DefaultInterface.Set_PaymentDate(Param1);
end;

function TJrnlHdr.Get_PayLevel(Index: Smallint): Double;
begin
    Result := DefaultInterface.PayLevel[Index];
end;

procedure TJrnlHdr.Set_PayLevel(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PayLevel[Index] := Param2;
end;

function TJrnlHdr.Get_PaymentMethod: WideString;
begin
    Result := DefaultInterface.PaymentMethod;
end;

procedure TJrnlHdr.Set_PaymentMethod(const Param1: WideString);
begin
  DefaultInterface.Set_PaymentMethod(Param1);
end;

function TJrnlHdr.Get_PayPeriodEnd: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PayPeriodEnd;
end;

procedure TJrnlHdr.Set_PayPeriodEnd(Param1: OleVariant);
begin
  DefaultInterface.Set_PayPeriodEnd(Param1);
end;

function TJrnlHdr.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TJrnlHdr.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TJrnlHdr.Get_PONumber: WideString;
begin
    Result := DefaultInterface.PONumber;
end;

procedure TJrnlHdr.Set_PONumber(const Param1: WideString);
begin
  DefaultInterface.Set_PONumber(Param1);
end;

function TJrnlHdr.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TJrnlHdr.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TJrnlHdr.Get_Prepayment: WordBool;
begin
    Result := DefaultInterface.Prepayment;
end;

procedure TJrnlHdr.Set_Prepayment(Param1: WordBool);
begin
  DefaultInterface.Set_Prepayment(Param1);
end;

function TJrnlHdr.Get_PrintBeforeInvoiceReference: WordBool;
begin
    Result := DefaultInterface.PrintBeforeInvoiceReference;
end;

procedure TJrnlHdr.Set_PrintBeforeInvoiceReference(Param1: WordBool);
begin
  DefaultInterface.Set_PrintBeforeInvoiceReference(Param1);
end;

function TJrnlHdr.Get_PrintCheck: WordBool;
begin
    Result := DefaultInterface.PrintCheck;
end;

procedure TJrnlHdr.Set_PrintCheck(Param1: WordBool);
begin
  DefaultInterface.Set_PrintCheck(Param1);
end;

function TJrnlHdr.Get_PurchaseOrderNumber: WideString;
begin
    Result := DefaultInterface.PurchaseOrderNumber;
end;

procedure TJrnlHdr.Set_PurchaseOrderNumber(const Param1: WideString);
begin
  DefaultInterface.Set_PurchaseOrderNumber(Param1);
end;

function TJrnlHdr.Get_QuoteNumber: WideString;
begin
    Result := DefaultInterface.QuoteNumber;
end;

procedure TJrnlHdr.Set_QuoteNumber(const Param1: WideString);
begin
  DefaultInterface.Set_QuoteNumber(Param1);
end;

function TJrnlHdr.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TJrnlHdr.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TJrnlHdr.Get_ReceiptNum: WideString;
begin
    Result := DefaultInterface.ReceiptNum;
end;

procedure TJrnlHdr.Set_ReceiptNum(const Param1: WideString);
begin
  DefaultInterface.Set_ReceiptNum(Param1);
end;

function TJrnlHdr.Get_RecordByte(Index: Integer): Byte;
begin
    Result := DefaultInterface.RecordByte[Index];
end;

function TJrnlHdr.Get_RecurrenceIndex: Integer;
begin
    Result := DefaultInterface.RecurrenceIndex;
end;

procedure TJrnlHdr.Set_RecurrenceIndex(Param1: Integer);
begin
  DefaultInterface.Set_RecurrenceIndex(Param1);
end;

function TJrnlHdr.Get_RecurrenceRate: Smallint;
begin
    Result := DefaultInterface.RecurrenceRate;
end;

procedure TJrnlHdr.Set_RecurrenceRate(Param1: Smallint);
begin
  DefaultInterface.Set_RecurrenceRate(Param1);
end;

function TJrnlHdr.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TJrnlHdr.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TJrnlHdr.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TJrnlHdr.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TJrnlHdr.Get_ReturnAuthorization: WideString;
begin
    Result := DefaultInterface.ReturnAuthorization;
end;

procedure TJrnlHdr.Set_ReturnAuthorization(const Param1: WideString);
begin
  DefaultInterface.Set_ReturnAuthorization(Param1);
end;

function TJrnlHdr.Get_Reversed: WordBool;
begin
    Result := DefaultInterface.Reversed;
end;

procedure TJrnlHdr.Set_Reversed(Param1: WordBool);
begin
  DefaultInterface.Set_Reversed(Param1);
end;

function TJrnlHdr.Get_SalesRepID: WideString;
begin
    Result := DefaultInterface.SalesRepID;
end;

procedure TJrnlHdr.Set_SalesRepID(const Param1: WideString);
begin
  DefaultInterface.Set_SalesRepID(Param1);
end;

function TJrnlHdr.Get_SalesTaxCode: WideString;
begin
    Result := DefaultInterface.SalesTaxCode;
end;

procedure TJrnlHdr.Set_SalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_SalesTaxCode(Param1);
end;

function TJrnlHdr.Get_ShipByDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShipByDate;
end;

procedure TJrnlHdr.Set_ShipByDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ShipByDate(Param1);
end;

function TJrnlHdr.Get_ShipDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShipDate;
end;

procedure TJrnlHdr.Set_ShipDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ShipDate(Param1);
end;

function TJrnlHdr.Get_ShipIndex: Integer;
begin
    Result := DefaultInterface.ShipIndex;
end;

procedure TJrnlHdr.Set_ShipIndex(Param1: Integer);
begin
  DefaultInterface.Set_ShipIndex(Param1);
end;

function TJrnlHdr.Get_ShipToAddress1: WideString;
begin
    Result := DefaultInterface.ShipToAddress1;
end;

procedure TJrnlHdr.Set_ShipToAddress1(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddress1(Param1);
end;

function TJrnlHdr.Get_ShipToAddress2: WideString;
begin
    Result := DefaultInterface.ShipToAddress2;
end;

procedure TJrnlHdr.Set_ShipToAddress2(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddress2(Param1);
end;

function TJrnlHdr.Get_ShipToCity: WideString;
begin
    Result := DefaultInterface.ShipToCity;
end;

procedure TJrnlHdr.Set_ShipToCity(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCity(Param1);
end;

function TJrnlHdr.Get_ShipToCountry: WideString;
begin
    Result := DefaultInterface.ShipToCountry;
end;

procedure TJrnlHdr.Set_ShipToCountry(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCountry(Param1);
end;

function TJrnlHdr.Get_ShipToName: WideString;
begin
    Result := DefaultInterface.ShipToName;
end;

procedure TJrnlHdr.Set_ShipToName(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToName(Param1);
end;

function TJrnlHdr.Get_ShipToState: WideString;
begin
    Result := DefaultInterface.ShipToState;
end;

procedure TJrnlHdr.Set_ShipToState(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToState(Param1);
end;

function TJrnlHdr.Get_ShipToZipCode: WideString;
begin
    Result := DefaultInterface.ShipToZipCode;
end;

procedure TJrnlHdr.Set_ShipToZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToZipCode(Param1);
end;

function TJrnlHdr.Get_ShipVia: WideString;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TJrnlHdr.Set_ShipVia(const Param1: WideString);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TJrnlHdr.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TJrnlHdr.Set_State(const Param1: WideString);
begin
  DefaultInterface.Set_State(Param1);
end;

function TJrnlHdr.Get_StatementNote: WideString;
begin
    Result := DefaultInterface.StatementNote;
end;

procedure TJrnlHdr.Set_StatementNote(const Param1: WideString);
begin
  DefaultInterface.Set_StatementNote(Param1);
end;

function TJrnlHdr.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TJrnlHdr.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TJrnlHdr.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TJrnlHdr.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TJrnlHdr.Get_SuperRecordNumber: Integer;
begin
    Result := DefaultInterface.SuperRecordNumber;
end;

procedure TJrnlHdr.Set_SuperRecordNumber(Param1: Integer);
begin
  DefaultInterface.Set_SuperRecordNumber(Param1);
end;

function TJrnlHdr.Get_Terms: WideString;
begin
    Result := DefaultInterface.Terms;
end;

procedure TJrnlHdr.Set_Terms(const Param1: WideString);
begin
  DefaultInterface.Set_Terms(Param1);
end;

function TJrnlHdr.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TJrnlHdr.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TJrnlHdr.Get_TrxIsReadOnly: Smallint;
begin
    Result := DefaultInterface.TrxIsReadOnly;
end;

procedure TJrnlHdr.Set_TrxIsReadOnly(Param1: Smallint);
begin
  DefaultInterface.Set_TrxIsReadOnly(Param1);
end;

function TJrnlHdr.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TJrnlHdr.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TJrnlHdr.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TJrnlHdr.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TJrnlHdr.Get_TrxVoidedBy: Integer;
begin
    Result := DefaultInterface.TrxVoidedBy;
end;

procedure TJrnlHdr.Set_TrxVoidedBy(Param1: Integer);
begin
  DefaultInterface.Set_TrxVoidedBy(Param1);
end;

function TJrnlHdr.Get_Unknown1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown1[Index];
end;

procedure TJrnlHdr.Set_Unknown1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown1[Index] := Param2;
end;

function TJrnlHdr.Get_UnusedInteger3: Smallint;
begin
    Result := DefaultInterface.UnusedInteger3;
end;

procedure TJrnlHdr.Set_UnusedInteger3(Param1: Smallint);
begin
  DefaultInterface.Set_UnusedInteger3(Param1);
end;

function TJrnlHdr.Get_UnusedByte10: Byte;
begin
    Result := DefaultInterface.UnusedByte10;
end;

procedure TJrnlHdr.Set_UnusedByte10(Param1: Byte);
begin
  DefaultInterface.Set_UnusedByte10(Param1);
end;

function TJrnlHdr.Get_UnknownLong11: Integer;
begin
    Result := DefaultInterface.UnknownLong11;
end;

procedure TJrnlHdr.Set_UnknownLong11(Param1: Integer);
begin
  DefaultInterface.Set_UnknownLong11(Param1);
end;

function TJrnlHdr.Get_UnknownLong12: Integer;
begin
    Result := DefaultInterface.UnknownLong12;
end;

procedure TJrnlHdr.Set_UnknownLong12(Param1: Integer);
begin
  DefaultInterface.Set_UnknownLong12(Param1);
end;

function TJrnlHdr.Get_Unknown13(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown13[Index];
end;

procedure TJrnlHdr.Set_Unknown13(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown13[Index] := Param2;
end;

function TJrnlHdr.Get_Unknown14(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown14[Index];
end;

procedure TJrnlHdr.Set_Unknown14(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown14[Index] := Param2;
end;

function TJrnlHdr.Get_Unknown15(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown15[Index];
end;

procedure TJrnlHdr.Set_Unknown15(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown15[Index] := Param2;
end;

function TJrnlHdr.Get_Unknown16(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown16[Index];
end;

procedure TJrnlHdr.Set_Unknown16(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown16[Index] := Param2;
end;

function TJrnlHdr.Get_Unknown17: Byte;
begin
    Result := DefaultInterface.Unknown17;
end;

procedure TJrnlHdr.Set_Unknown17(Param1: Byte);
begin
  DefaultInterface.Set_Unknown17(Param1);
end;

function TJrnlHdr.Get_UPSShipmentRecNum: Integer;
begin
    Result := DefaultInterface.UPSShipmentRecNum;
end;

procedure TJrnlHdr.Set_UPSShipmentRecNum(Param1: Integer);
begin
  DefaultInterface.Set_UPSShipmentRecNum(Param1);
end;

function TJrnlHdr.Get_WaitingOnBill: WordBool;
begin
    Result := DefaultInterface.WaitingOnBill;
end;

procedure TJrnlHdr.Set_WaitingOnBill(Param1: WordBool);
begin
  DefaultInterface.Set_WaitingOnBill(Param1);
end;

function TJrnlHdr.Get_WeeksInPayPeriod: Smallint;
begin
    Result := DefaultInterface.WeeksInPayPeriod;
end;

procedure TJrnlHdr.Set_WeeksInPayPeriod(Param1: Smallint);
begin
  DefaultInterface.Set_WeeksInPayPeriod(Param1);
end;

function TJrnlHdr.Get_Zipcode: WideString;
begin
    Result := DefaultInterface.Zipcode;
end;

procedure TJrnlHdr.Set_Zipcode(const Param1: WideString);
begin
  DefaultInterface.Set_Zipcode(Param1);
end;

function TJrnlHdr.ClearRecord: Smallint;
begin
  Result := DefaultInterface.ClearRecord;
end;

function TJrnlHdr.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TJrnlHdr.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TJrnlHdr.GetEqual(NRecord: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(NRecord);
end;

function TJrnlHdr.GetForKeyL(Subindex1: Byte; TrxNumber: Integer; Period: Smallint; 
                             JournalID: Smallint; Subindex2: Smallint): OleVariant;
begin
  Result := DefaultInterface.GetForKeyL(Subindex1, TrxNumber, Period, JournalID, Subindex2);
end;

function TJrnlHdr.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TJrnlHdr.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TJrnlHdr.ReadBytes: Smallint;
begin
  Result := DefaultInterface.ReadBytes;
end;

function TJrnlHdr.ReadFirst(JrnlCode: Smallint; Period: Smallint): Smallint;
begin
  Result := DefaultInterface.ReadFirst(JrnlCode, Period);
end;

function TJrnlHdr.ReadFirstForIDIndex(JrnlCode: Smallint; Index: Integer): Smallint;
begin
  Result := DefaultInterface.ReadFirstForIDIndex(JrnlCode, Index);
end;

function TJrnlHdr.ReadFirstForInvoice(const Invoice: WideString): Smallint;
begin
  Result := DefaultInterface.ReadFirstForInvoice(Invoice);
end;

function TJrnlHdr.ReadNext: Smallint;
begin
  Result := DefaultInterface.ReadNext;
end;

function TJrnlHdr.ReadNextForIDIndex: Smallint;
begin
  Result := DefaultInterface.ReadNextForIDIndex;
end;

function TJrnlHdr.ReadNextForInvoice: Smallint;
begin
  Result := DefaultInterface.ReadNextForInvoice;
end;

function TJrnlHdr.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TJrnlHdr.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TJrnlHdr.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TJrnlHdr.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TJrnlHdr.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TJrnlHdr.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TJrnlHdrProperties.Create(AServer: TJrnlHdr);
begin
  inherited Create;
  FServer := AServer;
end;

function TJrnlHdrProperties.GetDefaultInterface: _JrnlHdr;
begin
  Result := FServer.DefaultInterface;
end;

function TJrnlHdrProperties.Get_ActualLength: Integer;
begin
    Result := DefaultInterface.ActualLength;
end;

function TJrnlHdrProperties.Get_Address1: WideString;
begin
    Result := DefaultInterface.Address1;
end;

procedure TJrnlHdrProperties.Set_Address1(const Param1: WideString);
begin
  DefaultInterface.Set_Address1(Param1);
end;

function TJrnlHdrProperties.Get_Address2: WideString;
begin
    Result := DefaultInterface.Address2;
end;

procedure TJrnlHdrProperties.Set_Address2(const Param1: WideString);
begin
  DefaultInterface.Set_Address2(Param1);
end;

function TJrnlHdrProperties.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TJrnlHdrProperties.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TJrnlHdrProperties.Get_AmountPaid: Double;
begin
    Result := DefaultInterface.AmountPaid;
end;

procedure TJrnlHdrProperties.Set_AmountPaid(Param1: Double);
begin
  DefaultInterface.Set_AmountPaid(Param1);
end;

function TJrnlHdrProperties.Get_AppName: WideString;
begin
    Result := DefaultInterface.AppName;
end;

procedure TJrnlHdrProperties.Set_AppName(const Param1: WideString);
begin
  DefaultInterface.Set_AppName(Param1);
end;

function TJrnlHdrProperties.Get_BeginningBalance: WordBool;
begin
    Result := DefaultInterface.BeginningBalance;
end;

procedure TJrnlHdrProperties.Set_BeginningBalance(Param1: WordBool);
begin
  DefaultInterface.Set_BeginningBalance(Param1);
end;

function TJrnlHdrProperties.Get_CCAddress1: WideString;
begin
    Result := DefaultInterface.CCAddress1;
end;

procedure TJrnlHdrProperties.Set_CCAddress1(const Param1: WideString);
begin
  DefaultInterface.Set_CCAddress1(Param1);
end;

function TJrnlHdrProperties.Get_CCAddress2: WideString;
begin
    Result := DefaultInterface.CCAddress2;
end;

procedure TJrnlHdrProperties.Set_CCAddress2(const Param1: WideString);
begin
  DefaultInterface.Set_CCAddress2(Param1);
end;

function TJrnlHdrProperties.Get_CCAuthorization: WideString;
begin
    Result := DefaultInterface.CCAuthorization;
end;

procedure TJrnlHdrProperties.Set_CCAuthorization(const Param1: WideString);
begin
  DefaultInterface.Set_CCAuthorization(Param1);
end;

function TJrnlHdrProperties.Get_CCCity: WideString;
begin
    Result := DefaultInterface.CCCity;
end;

procedure TJrnlHdrProperties.Set_CCCity(const Param1: WideString);
begin
  DefaultInterface.Set_CCCity(Param1);
end;

function TJrnlHdrProperties.Get_CCComment: WideString;
begin
    Result := DefaultInterface.CCComment;
end;

procedure TJrnlHdrProperties.Set_CCComment(const Param1: WideString);
begin
  DefaultInterface.Set_CCComment(Param1);
end;

function TJrnlHdrProperties.Get_CCCountry: WideString;
begin
    Result := DefaultInterface.CCCountry;
end;

procedure TJrnlHdrProperties.Set_CCCountry(const Param1: WideString);
begin
  DefaultInterface.Set_CCCountry(Param1);
end;

function TJrnlHdrProperties.Get_CCEncryptedCard: WideString;
begin
    Result := DefaultInterface.CCEncryptedCard;
end;

procedure TJrnlHdrProperties.Set_CCEncryptedCard(const Param1: WideString);
begin
  DefaultInterface.Set_CCEncryptedCard(Param1);
end;

function TJrnlHdrProperties.Get_CCExpirationDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.CCExpirationDate;
end;

procedure TJrnlHdrProperties.Set_CCExpirationDate(Param1: OleVariant);
begin
  DefaultInterface.Set_CCExpirationDate(Param1);
end;

function TJrnlHdrProperties.Get_CCFlag: Byte;
begin
    Result := DefaultInterface.CCFlag;
end;

procedure TJrnlHdrProperties.Set_CCFlag(Param1: Byte);
begin
  DefaultInterface.Set_CCFlag(Param1);
end;

function TJrnlHdrProperties.Get_CCName: WideString;
begin
    Result := DefaultInterface.CCName;
end;

procedure TJrnlHdrProperties.Set_CCName(const Param1: WideString);
begin
  DefaultInterface.Set_CCName(Param1);
end;

function TJrnlHdrProperties.Get_CCNumber: WideString;
begin
    Result := DefaultInterface.CCNumber;
end;

procedure TJrnlHdrProperties.Set_CCNumber(const Param1: WideString);
begin
  DefaultInterface.Set_CCNumber(Param1);
end;

function TJrnlHdrProperties.Get_CCState: WideString;
begin
    Result := DefaultInterface.CCState;
end;

procedure TJrnlHdrProperties.Set_CCState(const Param1: WideString);
begin
  DefaultInterface.Set_CCState(Param1);
end;

function TJrnlHdrProperties.Get_CCZipcode: WideString;
begin
    Result := DefaultInterface.CCZipcode;
end;

procedure TJrnlHdrProperties.Set_CCZipcode(const Param1: WideString);
begin
  DefaultInterface.Set_CCZipcode(Param1);
end;

function TJrnlHdrProperties.Get_City: WideString;
begin
    Result := DefaultInterface.City;
end;

procedure TJrnlHdrProperties.Set_City(const Param1: WideString);
begin
  DefaultInterface.Set_City(Param1);
end;

function TJrnlHdrProperties.Get_CloseOrder: WordBool;
begin
    Result := DefaultInterface.CloseOrder;
end;

procedure TJrnlHdrProperties.Set_CloseOrder(Param1: WordBool);
begin
  DefaultInterface.Set_CloseOrder(Param1);
end;

function TJrnlHdrProperties.Get_Country: WideString;
begin
    Result := DefaultInterface.Country;
end;

procedure TJrnlHdrProperties.Set_Country(const Param1: WideString);
begin
  DefaultInterface.Set_Country(Param1);
end;

function TJrnlHdrProperties.Get_CustomerSONo: WideString;
begin
    Result := DefaultInterface.CustomerSONo;
end;

procedure TJrnlHdrProperties.Set_CustomerSONo(const Param1: WideString);
begin
  DefaultInterface.Set_CustomerSONo(Param1);
end;

function TJrnlHdrProperties.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TJrnlHdrProperties.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TJrnlHdrProperties.Get_DateDue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateDue;
end;

procedure TJrnlHdrProperties.Set_DateDue(Param1: OleVariant);
begin
  DefaultInterface.Set_DateDue(Param1);
end;

function TJrnlHdrProperties.Get_DepositDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DepositDate;
end;

procedure TJrnlHdrProperties.Set_DepositDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DepositDate(Param1);
end;

function TJrnlHdrProperties.Get_DepositTicketID: WideString;
begin
    Result := DefaultInterface.DepositTicketID;
end;

procedure TJrnlHdrProperties.Set_DepositTicketID(const Param1: WideString);
begin
  DefaultInterface.Set_DepositTicketID(Param1);
end;

function TJrnlHdrProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TJrnlHdrProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TJrnlHdrProperties.Get_DiscountAmount: Double;
begin
    Result := DefaultInterface.DiscountAmount;
end;

procedure TJrnlHdrProperties.Set_DiscountAmount(Param1: Double);
begin
  DefaultInterface.Set_DiscountAmount(Param1);
end;

function TJrnlHdrProperties.Get_DiscountDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DiscountDate;
end;

procedure TJrnlHdrProperties.Set_DiscountDate(Param1: OleVariant);
begin
  DefaultInterface.Set_DiscountDate(Param1);
end;

function TJrnlHdrProperties.Get_DropShip: Byte;
begin
    Result := DefaultInterface.DropShip;
end;

procedure TJrnlHdrProperties.Set_DropShip(Param1: Byte);
begin
  DefaultInterface.Set_DropShip(Param1);
end;

function TJrnlHdrProperties.Get_EditCount: Integer;
begin
    Result := DefaultInterface.EditCount;
end;

procedure TJrnlHdrProperties.Set_EditCount(Param1: Integer);
begin
  DefaultInterface.Set_EditCount(Param1);
end;

function TJrnlHdrProperties.Get_GoodThruDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.GoodThruDate;
end;

procedure TJrnlHdrProperties.Set_GoodThruDate(Param1: OleVariant);
begin
  DefaultInterface.Set_GoodThruDate(Param1);
end;

function TJrnlHdrProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TJrnlHdrProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TJrnlHdrProperties.Get_HasPartner: WordBool;
begin
    Result := DefaultInterface.HasPartner;
end;

procedure TJrnlHdrProperties.Set_HasPartner(Param1: WordBool);
begin
  DefaultInterface.Set_HasPartner(Param1);
end;

function TJrnlHdrProperties.Get_IDNumber: Integer;
begin
    Result := DefaultInterface.IDNumber;
end;

procedure TJrnlHdrProperties.Set_IDNumber(Param1: Integer);
begin
  DefaultInterface.Set_IDNumber(Param1);
end;

function TJrnlHdrProperties.Get_IDText: WideString;
begin
    Result := DefaultInterface.IDText;
end;

procedure TJrnlHdrProperties.Set_IDText(const Param1: WideString);
begin
  DefaultInterface.Set_IDText(Param1);
end;

function TJrnlHdrProperties.Get_InternalNote: WideString;
begin
    Result := DefaultInterface.InternalNote;
end;

procedure TJrnlHdrProperties.Set_InternalNote(const Param1: WideString);
begin
  DefaultInterface.Set_InternalNote(Param1);
end;

function TJrnlHdrProperties.Get_JournalCode: WideString;
begin
    Result := DefaultInterface.JournalCode;
end;

procedure TJrnlHdrProperties.Set_JournalCode(const Param1: WideString);
begin
  DefaultInterface.Set_JournalCode(Param1);
end;

function TJrnlHdrProperties.Get_JournalID: Smallint;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TJrnlHdrProperties.Set_JournalID(Param1: Smallint);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TJrnlHdrProperties.Get_JrnlTypeEx: Integer;
begin
    Result := DefaultInterface.JrnlTypeEx;
end;

procedure TJrnlHdrProperties.Set_JrnlTypeEx(Param1: Integer);
begin
  DefaultInterface.Set_JrnlTypeEx(Param1);
end;

function TJrnlHdrProperties.Get_Key: Double;
begin
    Result := DefaultInterface.Key;
end;

procedure TJrnlHdrProperties.Set_Key(Param1: Double);
begin
  DefaultInterface.Set_Key(Param1);
end;

function TJrnlHdrProperties.Get_MainAccount: WideString;
begin
    Result := DefaultInterface.MainAccount;
end;

procedure TJrnlHdrProperties.Set_MainAccount(const Param1: WideString);
begin
  DefaultInterface.Set_MainAccount(Param1);
end;

function TJrnlHdrProperties.Get_MaxNRecord: Integer;
begin
    Result := DefaultInterface.MaxNRecord;
end;

function TJrnlHdrProperties.Get_MaxTrxNumberL(Period: Smallint; var JournalCode: Smallint): Integer;
begin
    Result := DefaultInterface.MaxTrxNumberL[Period, JournalCode];
end;

function TJrnlHdrProperties.Get_Memo: WideString;
begin
    Result := DefaultInterface.Memo;
end;

procedure TJrnlHdrProperties.Set_Memo(const Param1: WideString);
begin
  DefaultInterface.Set_Memo(Param1);
end;

function TJrnlHdrProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TJrnlHdrProperties.Set_Name(const Param1: WideString);
begin
  DefaultInterface.Set_Name(Param1);
end;

function TJrnlHdrProperties.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TJrnlHdrProperties.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TJrnlHdrProperties.Get_NotePrintsAfterItems: WordBool;
begin
    Result := DefaultInterface.NotePrintsAfterItems;
end;

procedure TJrnlHdrProperties.Set_NotePrintsAfterItems(Param1: WordBool);
begin
  DefaultInterface.Set_NotePrintsAfterItems(Param1);
end;

function TJrnlHdrProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TJrnlHdrProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TJrnlHdrProperties.Get_NumOrderLines: Smallint;
begin
    Result := DefaultInterface.NumOrderLines;
end;

procedure TJrnlHdrProperties.Set_NumOrderLines(Param1: Smallint);
begin
  DefaultInterface.Set_NumOrderLines(Param1);
end;

function TJrnlHdrProperties.Get_OrderNumber: WideString;
begin
    Result := DefaultInterface.OrderNumber;
end;

procedure TJrnlHdrProperties.Set_OrderNumber(const Param1: WideString);
begin
  DefaultInterface.Set_OrderNumber(Param1);
end;

function TJrnlHdrProperties.Get_OtherIndex: Integer;
begin
    Result := DefaultInterface.OtherIndex;
end;

procedure TJrnlHdrProperties.Set_OtherIndex(Param1: Integer);
begin
  DefaultInterface.Set_OtherIndex(Param1);
end;

function TJrnlHdrProperties.Get_OtherReceipt: WordBool;
begin
    Result := DefaultInterface.OtherReceipt;
end;

procedure TJrnlHdrProperties.Set_OtherReceipt(Param1: WordBool);
begin
  DefaultInterface.Set_OtherReceipt(Param1);
end;

function TJrnlHdrProperties.Get_PaidOnInvoice: Double;
begin
    Result := DefaultInterface.PaidOnInvoice;
end;

procedure TJrnlHdrProperties.Set_PaidOnInvoice(Param1: Double);
begin
  DefaultInterface.Set_PaidOnInvoice(Param1);
end;

function TJrnlHdrProperties.Get_PaymentDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PaymentDate;
end;

procedure TJrnlHdrProperties.Set_PaymentDate(Param1: OleVariant);
begin
  DefaultInterface.Set_PaymentDate(Param1);
end;

function TJrnlHdrProperties.Get_PayLevel(Index: Smallint): Double;
begin
    Result := DefaultInterface.PayLevel[Index];
end;

procedure TJrnlHdrProperties.Set_PayLevel(Index: Smallint; Param2: Double);
begin
  DefaultInterface.PayLevel[Index] := Param2;
end;

function TJrnlHdrProperties.Get_PaymentMethod: WideString;
begin
    Result := DefaultInterface.PaymentMethod;
end;

procedure TJrnlHdrProperties.Set_PaymentMethod(const Param1: WideString);
begin
  DefaultInterface.Set_PaymentMethod(Param1);
end;

function TJrnlHdrProperties.Get_PayPeriodEnd: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PayPeriodEnd;
end;

procedure TJrnlHdrProperties.Set_PayPeriodEnd(Param1: OleVariant);
begin
  DefaultInterface.Set_PayPeriodEnd(Param1);
end;

function TJrnlHdrProperties.Get_Period: Smallint;
begin
    Result := DefaultInterface.Period;
end;

procedure TJrnlHdrProperties.Set_Period(Param1: Smallint);
begin
  DefaultInterface.Set_Period(Param1);
end;

function TJrnlHdrProperties.Get_PONumber: WideString;
begin
    Result := DefaultInterface.PONumber;
end;

procedure TJrnlHdrProperties.Set_PONumber(const Param1: WideString);
begin
  DefaultInterface.Set_PONumber(Param1);
end;

function TJrnlHdrProperties.Get_Posted: WordBool;
begin
    Result := DefaultInterface.Posted;
end;

procedure TJrnlHdrProperties.Set_Posted(Param1: WordBool);
begin
  DefaultInterface.Set_Posted(Param1);
end;

function TJrnlHdrProperties.Get_Prepayment: WordBool;
begin
    Result := DefaultInterface.Prepayment;
end;

procedure TJrnlHdrProperties.Set_Prepayment(Param1: WordBool);
begin
  DefaultInterface.Set_Prepayment(Param1);
end;

function TJrnlHdrProperties.Get_PrintBeforeInvoiceReference: WordBool;
begin
    Result := DefaultInterface.PrintBeforeInvoiceReference;
end;

procedure TJrnlHdrProperties.Set_PrintBeforeInvoiceReference(Param1: WordBool);
begin
  DefaultInterface.Set_PrintBeforeInvoiceReference(Param1);
end;

function TJrnlHdrProperties.Get_PrintCheck: WordBool;
begin
    Result := DefaultInterface.PrintCheck;
end;

procedure TJrnlHdrProperties.Set_PrintCheck(Param1: WordBool);
begin
  DefaultInterface.Set_PrintCheck(Param1);
end;

function TJrnlHdrProperties.Get_PurchaseOrderNumber: WideString;
begin
    Result := DefaultInterface.PurchaseOrderNumber;
end;

procedure TJrnlHdrProperties.Set_PurchaseOrderNumber(const Param1: WideString);
begin
  DefaultInterface.Set_PurchaseOrderNumber(Param1);
end;

function TJrnlHdrProperties.Get_QuoteNumber: WideString;
begin
    Result := DefaultInterface.QuoteNumber;
end;

procedure TJrnlHdrProperties.Set_QuoteNumber(const Param1: WideString);
begin
  DefaultInterface.Set_QuoteNumber(Param1);
end;

function TJrnlHdrProperties.Get_ReceiptDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ReceiptDate;
end;

procedure TJrnlHdrProperties.Set_ReceiptDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ReceiptDate(Param1);
end;

function TJrnlHdrProperties.Get_ReceiptNum: WideString;
begin
    Result := DefaultInterface.ReceiptNum;
end;

procedure TJrnlHdrProperties.Set_ReceiptNum(const Param1: WideString);
begin
  DefaultInterface.Set_ReceiptNum(Param1);
end;

function TJrnlHdrProperties.Get_RecordByte(Index: Integer): Byte;
begin
    Result := DefaultInterface.RecordByte[Index];
end;

function TJrnlHdrProperties.Get_RecurrenceIndex: Integer;
begin
    Result := DefaultInterface.RecurrenceIndex;
end;

procedure TJrnlHdrProperties.Set_RecurrenceIndex(Param1: Integer);
begin
  DefaultInterface.Set_RecurrenceIndex(Param1);
end;

function TJrnlHdrProperties.Get_RecurrenceRate: Smallint;
begin
    Result := DefaultInterface.RecurrenceRate;
end;

procedure TJrnlHdrProperties.Set_RecurrenceRate(Param1: Smallint);
begin
  DefaultInterface.Set_RecurrenceRate(Param1);
end;

function TJrnlHdrProperties.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TJrnlHdrProperties.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TJrnlHdrProperties.Get_Reference: WideString;
begin
    Result := DefaultInterface.Reference;
end;

procedure TJrnlHdrProperties.Set_Reference(const Param1: WideString);
begin
  DefaultInterface.Set_Reference(Param1);
end;

function TJrnlHdrProperties.Get_ReturnAuthorization: WideString;
begin
    Result := DefaultInterface.ReturnAuthorization;
end;

procedure TJrnlHdrProperties.Set_ReturnAuthorization(const Param1: WideString);
begin
  DefaultInterface.Set_ReturnAuthorization(Param1);
end;

function TJrnlHdrProperties.Get_Reversed: WordBool;
begin
    Result := DefaultInterface.Reversed;
end;

procedure TJrnlHdrProperties.Set_Reversed(Param1: WordBool);
begin
  DefaultInterface.Set_Reversed(Param1);
end;

function TJrnlHdrProperties.Get_SalesRepID: WideString;
begin
    Result := DefaultInterface.SalesRepID;
end;

procedure TJrnlHdrProperties.Set_SalesRepID(const Param1: WideString);
begin
  DefaultInterface.Set_SalesRepID(Param1);
end;

function TJrnlHdrProperties.Get_SalesTaxCode: WideString;
begin
    Result := DefaultInterface.SalesTaxCode;
end;

procedure TJrnlHdrProperties.Set_SalesTaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_SalesTaxCode(Param1);
end;

function TJrnlHdrProperties.Get_ShipByDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShipByDate;
end;

procedure TJrnlHdrProperties.Set_ShipByDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ShipByDate(Param1);
end;

function TJrnlHdrProperties.Get_ShipDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ShipDate;
end;

procedure TJrnlHdrProperties.Set_ShipDate(Param1: OleVariant);
begin
  DefaultInterface.Set_ShipDate(Param1);
end;

function TJrnlHdrProperties.Get_ShipIndex: Integer;
begin
    Result := DefaultInterface.ShipIndex;
end;

procedure TJrnlHdrProperties.Set_ShipIndex(Param1: Integer);
begin
  DefaultInterface.Set_ShipIndex(Param1);
end;

function TJrnlHdrProperties.Get_ShipToAddress1: WideString;
begin
    Result := DefaultInterface.ShipToAddress1;
end;

procedure TJrnlHdrProperties.Set_ShipToAddress1(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddress1(Param1);
end;

function TJrnlHdrProperties.Get_ShipToAddress2: WideString;
begin
    Result := DefaultInterface.ShipToAddress2;
end;

procedure TJrnlHdrProperties.Set_ShipToAddress2(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToAddress2(Param1);
end;

function TJrnlHdrProperties.Get_ShipToCity: WideString;
begin
    Result := DefaultInterface.ShipToCity;
end;

procedure TJrnlHdrProperties.Set_ShipToCity(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCity(Param1);
end;

function TJrnlHdrProperties.Get_ShipToCountry: WideString;
begin
    Result := DefaultInterface.ShipToCountry;
end;

procedure TJrnlHdrProperties.Set_ShipToCountry(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToCountry(Param1);
end;

function TJrnlHdrProperties.Get_ShipToName: WideString;
begin
    Result := DefaultInterface.ShipToName;
end;

procedure TJrnlHdrProperties.Set_ShipToName(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToName(Param1);
end;

function TJrnlHdrProperties.Get_ShipToState: WideString;
begin
    Result := DefaultInterface.ShipToState;
end;

procedure TJrnlHdrProperties.Set_ShipToState(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToState(Param1);
end;

function TJrnlHdrProperties.Get_ShipToZipCode: WideString;
begin
    Result := DefaultInterface.ShipToZipCode;
end;

procedure TJrnlHdrProperties.Set_ShipToZipCode(const Param1: WideString);
begin
  DefaultInterface.Set_ShipToZipCode(Param1);
end;

function TJrnlHdrProperties.Get_ShipVia: WideString;
begin
    Result := DefaultInterface.ShipVia;
end;

procedure TJrnlHdrProperties.Set_ShipVia(const Param1: WideString);
begin
  DefaultInterface.Set_ShipVia(Param1);
end;

function TJrnlHdrProperties.Get_State: WideString;
begin
    Result := DefaultInterface.State;
end;

procedure TJrnlHdrProperties.Set_State(const Param1: WideString);
begin
  DefaultInterface.Set_State(Param1);
end;

function TJrnlHdrProperties.Get_StatementNote: WideString;
begin
    Result := DefaultInterface.StatementNote;
end;

procedure TJrnlHdrProperties.Set_StatementNote(const Param1: WideString);
begin
  DefaultInterface.Set_StatementNote(Param1);
end;

function TJrnlHdrProperties.Get_Subindex1: Byte;
begin
    Result := DefaultInterface.Subindex1;
end;

procedure TJrnlHdrProperties.Set_Subindex1(Param1: Byte);
begin
  DefaultInterface.Set_Subindex1(Param1);
end;

function TJrnlHdrProperties.Get_Subindex2: Byte;
begin
    Result := DefaultInterface.Subindex2;
end;

procedure TJrnlHdrProperties.Set_Subindex2(Param1: Byte);
begin
  DefaultInterface.Set_Subindex2(Param1);
end;

function TJrnlHdrProperties.Get_SuperRecordNumber: Integer;
begin
    Result := DefaultInterface.SuperRecordNumber;
end;

procedure TJrnlHdrProperties.Set_SuperRecordNumber(Param1: Integer);
begin
  DefaultInterface.Set_SuperRecordNumber(Param1);
end;

function TJrnlHdrProperties.Get_Terms: WideString;
begin
    Result := DefaultInterface.Terms;
end;

procedure TJrnlHdrProperties.Set_Terms(const Param1: WideString);
begin
  DefaultInterface.Set_Terms(Param1);
end;

function TJrnlHdrProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TJrnlHdrProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TJrnlHdrProperties.Get_TrxIsReadOnly: Smallint;
begin
    Result := DefaultInterface.TrxIsReadOnly;
end;

procedure TJrnlHdrProperties.Set_TrxIsReadOnly(Param1: Smallint);
begin
  DefaultInterface.Set_TrxIsReadOnly(Param1);
end;

function TJrnlHdrProperties.Get_TrxNumber: Smallint;
begin
    Result := DefaultInterface.TrxNumber;
end;

procedure TJrnlHdrProperties.Set_TrxNumber(Param1: Smallint);
begin
  DefaultInterface.Set_TrxNumber(Param1);
end;

function TJrnlHdrProperties.Get_TrxNumberL: Integer;
begin
    Result := DefaultInterface.TrxNumberL;
end;

procedure TJrnlHdrProperties.Set_TrxNumberL(Param1: Integer);
begin
  DefaultInterface.Set_TrxNumberL(Param1);
end;

function TJrnlHdrProperties.Get_TrxVoidedBy: Integer;
begin
    Result := DefaultInterface.TrxVoidedBy;
end;

procedure TJrnlHdrProperties.Set_TrxVoidedBy(Param1: Integer);
begin
  DefaultInterface.Set_TrxVoidedBy(Param1);
end;

function TJrnlHdrProperties.Get_Unknown1(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown1[Index];
end;

procedure TJrnlHdrProperties.Set_Unknown1(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown1[Index] := Param2;
end;

function TJrnlHdrProperties.Get_UnusedInteger3: Smallint;
begin
    Result := DefaultInterface.UnusedInteger3;
end;

procedure TJrnlHdrProperties.Set_UnusedInteger3(Param1: Smallint);
begin
  DefaultInterface.Set_UnusedInteger3(Param1);
end;

function TJrnlHdrProperties.Get_UnusedByte10: Byte;
begin
    Result := DefaultInterface.UnusedByte10;
end;

procedure TJrnlHdrProperties.Set_UnusedByte10(Param1: Byte);
begin
  DefaultInterface.Set_UnusedByte10(Param1);
end;

function TJrnlHdrProperties.Get_UnknownLong11: Integer;
begin
    Result := DefaultInterface.UnknownLong11;
end;

procedure TJrnlHdrProperties.Set_UnknownLong11(Param1: Integer);
begin
  DefaultInterface.Set_UnknownLong11(Param1);
end;

function TJrnlHdrProperties.Get_UnknownLong12: Integer;
begin
    Result := DefaultInterface.UnknownLong12;
end;

procedure TJrnlHdrProperties.Set_UnknownLong12(Param1: Integer);
begin
  DefaultInterface.Set_UnknownLong12(Param1);
end;

function TJrnlHdrProperties.Get_Unknown13(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown13[Index];
end;

procedure TJrnlHdrProperties.Set_Unknown13(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown13[Index] := Param2;
end;

function TJrnlHdrProperties.Get_Unknown14(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown14[Index];
end;

procedure TJrnlHdrProperties.Set_Unknown14(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown14[Index] := Param2;
end;

function TJrnlHdrProperties.Get_Unknown15(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown15[Index];
end;

procedure TJrnlHdrProperties.Set_Unknown15(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown15[Index] := Param2;
end;

function TJrnlHdrProperties.Get_Unknown16(Index: Smallint): Byte;
begin
    Result := DefaultInterface.Unknown16[Index];
end;

procedure TJrnlHdrProperties.Set_Unknown16(Index: Smallint; Param2: Byte);
begin
  DefaultInterface.Unknown16[Index] := Param2;
end;

function TJrnlHdrProperties.Get_Unknown17: Byte;
begin
    Result := DefaultInterface.Unknown17;
end;

procedure TJrnlHdrProperties.Set_Unknown17(Param1: Byte);
begin
  DefaultInterface.Set_Unknown17(Param1);
end;

function TJrnlHdrProperties.Get_UPSShipmentRecNum: Integer;
begin
    Result := DefaultInterface.UPSShipmentRecNum;
end;

procedure TJrnlHdrProperties.Set_UPSShipmentRecNum(Param1: Integer);
begin
  DefaultInterface.Set_UPSShipmentRecNum(Param1);
end;

function TJrnlHdrProperties.Get_WaitingOnBill: WordBool;
begin
    Result := DefaultInterface.WaitingOnBill;
end;

procedure TJrnlHdrProperties.Set_WaitingOnBill(Param1: WordBool);
begin
  DefaultInterface.Set_WaitingOnBill(Param1);
end;

function TJrnlHdrProperties.Get_WeeksInPayPeriod: Smallint;
begin
    Result := DefaultInterface.WeeksInPayPeriod;
end;

procedure TJrnlHdrProperties.Set_WeeksInPayPeriod(Param1: Smallint);
begin
  DefaultInterface.Set_WeeksInPayPeriod(Param1);
end;

function TJrnlHdrProperties.Get_Zipcode: WideString;
begin
    Result := DefaultInterface.Zipcode;
end;

procedure TJrnlHdrProperties.Set_Zipcode(const Param1: WideString);
begin
  DefaultInterface.Set_Zipcode(Param1);
end;

{$ENDIF}

class function CoJrnlRow.Create: _JrnlRow;
begin
  Result := CreateComObject(CLASS_JrnlRow) as _JrnlRow;
end;

class function CoJrnlRow.CreateRemote(const MachineName: string): _JrnlRow;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_JrnlRow) as _JrnlRow;
end;

procedure TJrnlRow.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4CA09D61-02CB-4571-95B8-604CF4C75F59}';
    IntfIID:   '{410EED2D-74A6-4CF9-AF64-9B945AB6A785}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TJrnlRow.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _JrnlRow;
  end;
end;

procedure TJrnlRow.ConnectTo(svrIntf: _JrnlRow);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TJrnlRow.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TJrnlRow.GetDefaultInterface: _JrnlRow;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TJrnlRow.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TJrnlRowProperties.Create(Self);
{$ENDIF}
end;

destructor TJrnlRow.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TJrnlRow.GetServerProperties: TJrnlRowProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TJrnlRow.Get_AccountID: WideString;
begin
    Result := DefaultInterface.AccountID;
end;

procedure TJrnlRow.Set_AccountID(const Param1: WideString);
begin
  DefaultInterface.Set_AccountID(Param1);
end;

function TJrnlRow.Get_AccountIndex: Integer;
begin
    Result := DefaultInterface.AccountIndex;
end;

procedure TJrnlRow.Set_AccountIndex(Param1: Integer);
begin
  DefaultInterface.Set_AccountIndex(Param1);
end;

function TJrnlRow.Get_ActualLength: Integer;
begin
    Result := DefaultInterface.ActualLength;
end;

function TJrnlRow.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TJrnlRow.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TJrnlRow.Get_AmountShipped: Double;
begin
    Result := DefaultInterface.AmountShipped;
end;

procedure TJrnlRow.Set_AmountShipped(Param1: Double);
begin
  DefaultInterface.Set_AmountShipped(Param1);
end;

function TJrnlRow.Get_CloseOrder: WordBool;
begin
    Result := DefaultInterface.CloseOrder;
end;

procedure TJrnlRow.Set_CloseOrder(Param1: WordBool);
begin
  DefaultInterface.Set_CloseOrder(Param1);
end;

function TJrnlRow.Get_CostID: WideString;
begin
    Result := DefaultInterface.CostID;
end;

procedure TJrnlRow.Set_CostID(const Param1: WideString);
begin
  DefaultInterface.Set_CostID(Param1);
end;

function TJrnlRow.Get_CostOfSalesTrx: WordBool;
begin
    Result := DefaultInterface.CostOfSalesTrx;
end;

procedure TJrnlRow.Set_CostOfSalesTrx(Param1: WordBool);
begin
  DefaultInterface.Set_CostOfSalesTrx(Param1);
end;

function TJrnlRow.Get_CustomerIndex: Integer;
begin
    Result := DefaultInterface.CustomerIndex;
end;

procedure TJrnlRow.Set_CustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_CustomerIndex(Param1);
end;

function TJrnlRow.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TJrnlRow.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TJrnlRow.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TJrnlRow.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TJrnlRow.Get_EmployeeID: WideString;
begin
    Result := DefaultInterface.EmployeeID;
end;

procedure TJrnlRow.Set_EmployeeID(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeID(Param1);
end;

function TJrnlRow.Get_Extension: Double;
begin
    Result := DefaultInterface.Extension;
end;

procedure TJrnlRow.Set_Extension(Param1: Double);
begin
  DefaultInterface.Set_Extension(Param1);
end;

function TJrnlRow.Get_Flag1: WordBool;
begin
    Result := DefaultInterface.Flag1;
end;

procedure TJrnlRow.Set_Flag1(Param1: WordBool);
begin
  DefaultInterface.Set_Flag1(Param1);
end;

function TJrnlRow.Get_Flag2: WordBool;
begin
    Result := DefaultInterface.Flag2;
end;

procedure TJrnlRow.Set_Flag2(Param1: WordBool);
begin
  DefaultInterface.Set_Flag2(Param1);
end;

function TJrnlRow.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TJrnlRow.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TJrnlRow.Get_HasSerialNumbers: WordBool;
begin
    Result := DefaultInterface.HasSerialNumbers;
end;

procedure TJrnlRow.Set_HasSerialNumbers(Param1: WordBool);
begin
  DefaultInterface.Set_HasSerialNumbers(Param1);
end;

function TJrnlRow.Get_InvoiceNumber: WideString;
begin
    Result := DefaultInterface.InvoiceNumber;
end;

procedure TJrnlRow.Set_InvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_InvoiceNumber(Param1);
end;

function TJrnlRow.Get_ItemIndex: Integer;
begin
    Result := DefaultInterface.ItemIndex;
end;

procedure TJrnlRow.Set_ItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_ItemIndex(Param1);
end;

function TJrnlRow.Get_JobIndex: Integer;
begin
    Result := DefaultInterface.JobIndex;
end;

procedure TJrnlRow.Set_JobIndex(Param1: Integer);
begin
  DefaultInterface.Set_JobIndex(Param1);
end;

function TJrnlRow.Get_JournalID: Integer;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TJrnlRow.Set_JournalID(Param1: Integer);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TJrnlRow.Get_LineNo: Smallint;
begin
    Result := DefaultInterface.LineNo;
end;

procedure TJrnlRow.Set_LineNo(Param1: Smallint);
begin
  DefaultInterface.Set_LineNo(Param1);
end;

function TJrnlRow.Get_LinkToOtherTrxIndex: Smallint;
begin
    Result := DefaultInterface.LinkToOtherTrxIndex;
end;

procedure TJrnlRow.Set_LinkToOtherTrxIndex(Param1: Smallint);
begin
  DefaultInterface.Set_LinkToOtherTrxIndex(Param1);
end;

function TJrnlRow.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TJrnlRow.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TJrnlRow.Get_OrderLine: Smallint;
begin
    Result := DefaultInterface.OrderLine;
end;

procedure TJrnlRow.Set_OrderLine(Param1: Smallint);
begin
  DefaultInterface.Set_OrderLine(Param1);
end;

function TJrnlRow.Get_OtherNRecord: Integer;
begin
    Result := DefaultInterface.OtherNRecord;
end;

procedure TJrnlRow.Set_OtherNRecord(Param1: Integer);
begin
  DefaultInterface.Set_OtherNRecord(Param1);
end;

function TJrnlRow.Get_PayrollItemIndex: Smallint;
begin
    Result := DefaultInterface.PayrollItemIndex;
end;

procedure TJrnlRow.Set_PayrollItemIndex(Param1: Smallint);
begin
  DefaultInterface.Set_PayrollItemIndex(Param1);
end;

function TJrnlRow.Get_PhaseID: WideString;
begin
    Result := DefaultInterface.PhaseID;
end;

procedure TJrnlRow.Set_PhaseID(const Param1: WideString);
begin
  DefaultInterface.Set_PhaseID(Param1);
end;

function TJrnlRow.Get_POCreated: WordBool;
begin
    Result := DefaultInterface.POCreated;
end;

procedure TJrnlRow.Set_POCreated(Param1: WordBool);
begin
  DefaultInterface.Set_POCreated(Param1);
end;

function TJrnlRow.Get_Quantity: Double;
begin
    Result := DefaultInterface.Quantity;
end;

procedure TJrnlRow.Set_Quantity(Param1: Double);
begin
  DefaultInterface.Set_Quantity(Param1);
end;

function TJrnlRow.Get_QuantityOrdered: Double;
begin
    Result := DefaultInterface.QuantityOrdered;
end;

procedure TJrnlRow.Set_QuantityOrdered(Param1: Double);
begin
  DefaultInterface.Set_QuantityOrdered(Param1);
end;

function TJrnlRow.Get_QuantityShipped: Double;
begin
    Result := DefaultInterface.QuantityShipped;
end;

procedure TJrnlRow.Set_QuantityShipped(Param1: Double);
begin
  DefaultInterface.Set_QuantityShipped(Param1);
end;

function TJrnlRow.Get_RecordByte(Index: Integer): Byte;
begin
    Result := DefaultInterface.RecordByte[Index];
end;

function TJrnlRow.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TJrnlRow.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TJrnlRow.Get_StockingQuantityOrdered: Double;
begin
    Result := DefaultInterface.StockingQuantityOrdered;
end;

procedure TJrnlRow.Set_StockingQuantityOrdered(Param1: Double);
begin
  DefaultInterface.Set_StockingQuantityOrdered(Param1);
end;

function TJrnlRow.Get_StockingQuantityShipped: Double;
begin
    Result := DefaultInterface.StockingQuantityShipped;
end;

procedure TJrnlRow.Set_StockingQuantityShipped(Param1: Double);
begin
  DefaultInterface.Set_StockingQuantityShipped(Param1);
end;

function TJrnlRow.Get_StockingQuantity: Double;
begin
    Result := DefaultInterface.StockingQuantity;
end;

procedure TJrnlRow.Set_StockingQuantity(Param1: Double);
begin
  DefaultInterface.Set_StockingQuantity(Param1);
end;

function TJrnlRow.Get_StockingUnitPrice: Double;
begin
    Result := DefaultInterface.StockingUnitPrice;
end;

procedure TJrnlRow.Set_StockingUnitPrice(Param1: Double);
begin
  DefaultInterface.Set_StockingUnitPrice(Param1);
end;

function TJrnlRow.Get_TaxCode: WideString;
begin
    Result := DefaultInterface.TaxCode;
end;

procedure TJrnlRow.Set_TaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_TaxCode(Param1);
end;

function TJrnlRow.Get_TaxType: Smallint;
begin
    Result := DefaultInterface.TaxType;
end;

procedure TJrnlRow.Set_TaxType(Param1: Smallint);
begin
  DefaultInterface.Set_TaxType(Param1);
end;

function TJrnlRow.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TJrnlRow.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TJrnlRow.Get_TrxType: Integer;
begin
    Result := DefaultInterface.TrxType;
end;

procedure TJrnlRow.Set_TrxType(Param1: Integer);
begin
  DefaultInterface.Set_TrxType(Param1);
end;

function TJrnlRow.Get_UMGUID: WideString;
begin
    Result := DefaultInterface.UMGUID;
end;

procedure TJrnlRow.Set_UMGUID(const Param1: WideString);
begin
  DefaultInterface.Set_UMGUID(Param1);
end;

function TJrnlRow.Get_UnitPrice: Double;
begin
    Result := DefaultInterface.UnitPrice;
end;

procedure TJrnlRow.Set_UnitPrice(Param1: Double);
begin
  DefaultInterface.Set_UnitPrice(Param1);
end;

function TJrnlRow.Get_UnusedInteger2: Smallint;
begin
    Result := DefaultInterface.UnusedInteger2;
end;

procedure TJrnlRow.Set_UnusedInteger2(Param1: Smallint);
begin
  DefaultInterface.Set_UnusedInteger2(Param1);
end;

function TJrnlRow.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TJrnlRow.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

function TJrnlRow.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TJrnlRow.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TJrnlRow.GetFirst(NRecord: Integer): Smallint;
begin
  Result := DefaultInterface.GetFirst(NRecord);
end;

function TJrnlRow.GetFirstForJob(JobIndex: Integer; const PhaseID: WideString; 
                                 const CostID: WideString; TrxDate: OleVariant): Smallint;
begin
  Result := DefaultInterface.GetFirstForJob(JobIndex, PhaseID, CostID, TrxDate);
end;

function TJrnlRow.GetNext: Smallint;
begin
  Result := DefaultInterface.GetNext;
end;

function TJrnlRow.GetNextByJob: Smallint;
begin
  Result := DefaultInterface.GetNextByJob;
end;

function TJrnlRow.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TJrnlRow.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TJrnlRow.ReadBytes: Smallint;
begin
  Result := DefaultInterface.ReadBytes;
end;

function TJrnlRow.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TJrnlRow.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TJrnlRow.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TJrnlRow.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TJrnlRow.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TJrnlRow.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TJrnlRowProperties.Create(AServer: TJrnlRow);
begin
  inherited Create;
  FServer := AServer;
end;

function TJrnlRowProperties.GetDefaultInterface: _JrnlRow;
begin
  Result := FServer.DefaultInterface;
end;

function TJrnlRowProperties.Get_AccountID: WideString;
begin
    Result := DefaultInterface.AccountID;
end;

procedure TJrnlRowProperties.Set_AccountID(const Param1: WideString);
begin
  DefaultInterface.Set_AccountID(Param1);
end;

function TJrnlRowProperties.Get_AccountIndex: Integer;
begin
    Result := DefaultInterface.AccountIndex;
end;

procedure TJrnlRowProperties.Set_AccountIndex(Param1: Integer);
begin
  DefaultInterface.Set_AccountIndex(Param1);
end;

function TJrnlRowProperties.Get_ActualLength: Integer;
begin
    Result := DefaultInterface.ActualLength;
end;

function TJrnlRowProperties.Get_Amount: Double;
begin
    Result := DefaultInterface.Amount;
end;

procedure TJrnlRowProperties.Set_Amount(Param1: Double);
begin
  DefaultInterface.Set_Amount(Param1);
end;

function TJrnlRowProperties.Get_AmountShipped: Double;
begin
    Result := DefaultInterface.AmountShipped;
end;

procedure TJrnlRowProperties.Set_AmountShipped(Param1: Double);
begin
  DefaultInterface.Set_AmountShipped(Param1);
end;

function TJrnlRowProperties.Get_CloseOrder: WordBool;
begin
    Result := DefaultInterface.CloseOrder;
end;

procedure TJrnlRowProperties.Set_CloseOrder(Param1: WordBool);
begin
  DefaultInterface.Set_CloseOrder(Param1);
end;

function TJrnlRowProperties.Get_CostID: WideString;
begin
    Result := DefaultInterface.CostID;
end;

procedure TJrnlRowProperties.Set_CostID(const Param1: WideString);
begin
  DefaultInterface.Set_CostID(Param1);
end;

function TJrnlRowProperties.Get_CostOfSalesTrx: WordBool;
begin
    Result := DefaultInterface.CostOfSalesTrx;
end;

procedure TJrnlRowProperties.Set_CostOfSalesTrx(Param1: WordBool);
begin
  DefaultInterface.Set_CostOfSalesTrx(Param1);
end;

function TJrnlRowProperties.Get_CustomerIndex: Integer;
begin
    Result := DefaultInterface.CustomerIndex;
end;

procedure TJrnlRowProperties.Set_CustomerIndex(Param1: Integer);
begin
  DefaultInterface.Set_CustomerIndex(Param1);
end;

function TJrnlRowProperties.Get_DateCleared: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateCleared;
end;

procedure TJrnlRowProperties.Set_DateCleared(Param1: OleVariant);
begin
  DefaultInterface.Set_DateCleared(Param1);
end;

function TJrnlRowProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TJrnlRowProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TJrnlRowProperties.Get_EmployeeID: WideString;
begin
    Result := DefaultInterface.EmployeeID;
end;

procedure TJrnlRowProperties.Set_EmployeeID(const Param1: WideString);
begin
  DefaultInterface.Set_EmployeeID(Param1);
end;

function TJrnlRowProperties.Get_Extension: Double;
begin
    Result := DefaultInterface.Extension;
end;

procedure TJrnlRowProperties.Set_Extension(Param1: Double);
begin
  DefaultInterface.Set_Extension(Param1);
end;

function TJrnlRowProperties.Get_Flag1: WordBool;
begin
    Result := DefaultInterface.Flag1;
end;

procedure TJrnlRowProperties.Set_Flag1(Param1: WordBool);
begin
  DefaultInterface.Set_Flag1(Param1);
end;

function TJrnlRowProperties.Get_Flag2: WordBool;
begin
    Result := DefaultInterface.Flag2;
end;

procedure TJrnlRowProperties.Set_Flag2(Param1: WordBool);
begin
  DefaultInterface.Set_Flag2(Param1);
end;

function TJrnlRowProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TJrnlRowProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TJrnlRowProperties.Get_HasSerialNumbers: WordBool;
begin
    Result := DefaultInterface.HasSerialNumbers;
end;

procedure TJrnlRowProperties.Set_HasSerialNumbers(Param1: WordBool);
begin
  DefaultInterface.Set_HasSerialNumbers(Param1);
end;

function TJrnlRowProperties.Get_InvoiceNumber: WideString;
begin
    Result := DefaultInterface.InvoiceNumber;
end;

procedure TJrnlRowProperties.Set_InvoiceNumber(const Param1: WideString);
begin
  DefaultInterface.Set_InvoiceNumber(Param1);
end;

function TJrnlRowProperties.Get_ItemIndex: Integer;
begin
    Result := DefaultInterface.ItemIndex;
end;

procedure TJrnlRowProperties.Set_ItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_ItemIndex(Param1);
end;

function TJrnlRowProperties.Get_JobIndex: Integer;
begin
    Result := DefaultInterface.JobIndex;
end;

procedure TJrnlRowProperties.Set_JobIndex(Param1: Integer);
begin
  DefaultInterface.Set_JobIndex(Param1);
end;

function TJrnlRowProperties.Get_JournalID: Integer;
begin
    Result := DefaultInterface.JournalID;
end;

procedure TJrnlRowProperties.Set_JournalID(Param1: Integer);
begin
  DefaultInterface.Set_JournalID(Param1);
end;

function TJrnlRowProperties.Get_LineNo: Smallint;
begin
    Result := DefaultInterface.LineNo;
end;

procedure TJrnlRowProperties.Set_LineNo(Param1: Smallint);
begin
  DefaultInterface.Set_LineNo(Param1);
end;

function TJrnlRowProperties.Get_LinkToOtherTrxIndex: Smallint;
begin
    Result := DefaultInterface.LinkToOtherTrxIndex;
end;

procedure TJrnlRowProperties.Set_LinkToOtherTrxIndex(Param1: Smallint);
begin
  DefaultInterface.Set_LinkToOtherTrxIndex(Param1);
end;

function TJrnlRowProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TJrnlRowProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TJrnlRowProperties.Get_OrderLine: Smallint;
begin
    Result := DefaultInterface.OrderLine;
end;

procedure TJrnlRowProperties.Set_OrderLine(Param1: Smallint);
begin
  DefaultInterface.Set_OrderLine(Param1);
end;

function TJrnlRowProperties.Get_OtherNRecord: Integer;
begin
    Result := DefaultInterface.OtherNRecord;
end;

procedure TJrnlRowProperties.Set_OtherNRecord(Param1: Integer);
begin
  DefaultInterface.Set_OtherNRecord(Param1);
end;

function TJrnlRowProperties.Get_PayrollItemIndex: Smallint;
begin
    Result := DefaultInterface.PayrollItemIndex;
end;

procedure TJrnlRowProperties.Set_PayrollItemIndex(Param1: Smallint);
begin
  DefaultInterface.Set_PayrollItemIndex(Param1);
end;

function TJrnlRowProperties.Get_PhaseID: WideString;
begin
    Result := DefaultInterface.PhaseID;
end;

procedure TJrnlRowProperties.Set_PhaseID(const Param1: WideString);
begin
  DefaultInterface.Set_PhaseID(Param1);
end;

function TJrnlRowProperties.Get_POCreated: WordBool;
begin
    Result := DefaultInterface.POCreated;
end;

procedure TJrnlRowProperties.Set_POCreated(Param1: WordBool);
begin
  DefaultInterface.Set_POCreated(Param1);
end;

function TJrnlRowProperties.Get_Quantity: Double;
begin
    Result := DefaultInterface.Quantity;
end;

procedure TJrnlRowProperties.Set_Quantity(Param1: Double);
begin
  DefaultInterface.Set_Quantity(Param1);
end;

function TJrnlRowProperties.Get_QuantityOrdered: Double;
begin
    Result := DefaultInterface.QuantityOrdered;
end;

procedure TJrnlRowProperties.Set_QuantityOrdered(Param1: Double);
begin
  DefaultInterface.Set_QuantityOrdered(Param1);
end;

function TJrnlRowProperties.Get_QuantityShipped: Double;
begin
    Result := DefaultInterface.QuantityShipped;
end;

procedure TJrnlRowProperties.Set_QuantityShipped(Param1: Double);
begin
  DefaultInterface.Set_QuantityShipped(Param1);
end;

function TJrnlRowProperties.Get_RecordByte(Index: Integer): Byte;
begin
    Result := DefaultInterface.RecordByte[Index];
end;

function TJrnlRowProperties.Get_ReimbursableExpense: WordBool;
begin
    Result := DefaultInterface.ReimbursableExpense;
end;

procedure TJrnlRowProperties.Set_ReimbursableExpense(Param1: WordBool);
begin
  DefaultInterface.Set_ReimbursableExpense(Param1);
end;

function TJrnlRowProperties.Get_StockingQuantityOrdered: Double;
begin
    Result := DefaultInterface.StockingQuantityOrdered;
end;

procedure TJrnlRowProperties.Set_StockingQuantityOrdered(Param1: Double);
begin
  DefaultInterface.Set_StockingQuantityOrdered(Param1);
end;

function TJrnlRowProperties.Get_StockingQuantityShipped: Double;
begin
    Result := DefaultInterface.StockingQuantityShipped;
end;

procedure TJrnlRowProperties.Set_StockingQuantityShipped(Param1: Double);
begin
  DefaultInterface.Set_StockingQuantityShipped(Param1);
end;

function TJrnlRowProperties.Get_StockingQuantity: Double;
begin
    Result := DefaultInterface.StockingQuantity;
end;

procedure TJrnlRowProperties.Set_StockingQuantity(Param1: Double);
begin
  DefaultInterface.Set_StockingQuantity(Param1);
end;

function TJrnlRowProperties.Get_StockingUnitPrice: Double;
begin
    Result := DefaultInterface.StockingUnitPrice;
end;

procedure TJrnlRowProperties.Set_StockingUnitPrice(Param1: Double);
begin
  DefaultInterface.Set_StockingUnitPrice(Param1);
end;

function TJrnlRowProperties.Get_TaxCode: WideString;
begin
    Result := DefaultInterface.TaxCode;
end;

procedure TJrnlRowProperties.Set_TaxCode(const Param1: WideString);
begin
  DefaultInterface.Set_TaxCode(Param1);
end;

function TJrnlRowProperties.Get_TaxType: Smallint;
begin
    Result := DefaultInterface.TaxType;
end;

procedure TJrnlRowProperties.Set_TaxType(Param1: Smallint);
begin
  DefaultInterface.Set_TaxType(Param1);
end;

function TJrnlRowProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TJrnlRowProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TJrnlRowProperties.Get_TrxType: Integer;
begin
    Result := DefaultInterface.TrxType;
end;

procedure TJrnlRowProperties.Set_TrxType(Param1: Integer);
begin
  DefaultInterface.Set_TrxType(Param1);
end;

function TJrnlRowProperties.Get_UMGUID: WideString;
begin
    Result := DefaultInterface.UMGUID;
end;

procedure TJrnlRowProperties.Set_UMGUID(const Param1: WideString);
begin
  DefaultInterface.Set_UMGUID(Param1);
end;

function TJrnlRowProperties.Get_UnitPrice: Double;
begin
    Result := DefaultInterface.UnitPrice;
end;

procedure TJrnlRowProperties.Set_UnitPrice(Param1: Double);
begin
  DefaultInterface.Set_UnitPrice(Param1);
end;

function TJrnlRowProperties.Get_UnusedInteger2: Smallint;
begin
    Result := DefaultInterface.UnusedInteger2;
end;

procedure TJrnlRowProperties.Set_UnusedInteger2(Param1: Smallint);
begin
  DefaultInterface.Set_UnusedInteger2(Param1);
end;

function TJrnlRowProperties.Get_VendorIndex: Integer;
begin
    Result := DefaultInterface.VendorIndex;
end;

procedure TJrnlRowProperties.Set_VendorIndex(Param1: Integer);
begin
  DefaultInterface.Set_VendorIndex(Param1);
end;

{$ENDIF}

class function CoDefaultPriceLevels.Create: _DefaultPriceLevels;
begin
  Result := CreateComObject(CLASS_DefaultPriceLevels) as _DefaultPriceLevels;
end;

class function CoDefaultPriceLevels.CreateRemote(const MachineName: string): _DefaultPriceLevels;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DefaultPriceLevels) as _DefaultPriceLevels;
end;

procedure TDefaultPriceLevels.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7CB0C3F2-B4E9-4E96-A868-A6EEC581823F}';
    IntfIID:   '{C4D13436-3E5C-490A-8FFB-0C3E213DF341}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDefaultPriceLevels.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DefaultPriceLevels;
  end;
end;

procedure TDefaultPriceLevels.ConnectTo(svrIntf: _DefaultPriceLevels);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDefaultPriceLevels.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDefaultPriceLevels.GetDefaultInterface: _DefaultPriceLevels;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDefaultPriceLevels.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDefaultPriceLevelsProperties.Create(Self);
{$ENDIF}
end;

destructor TDefaultPriceLevels.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDefaultPriceLevels.GetServerProperties: TDefaultPriceLevelsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDefaultPriceLevels.Get_Amount(Index: Smallint): Double;
begin
    Result := DefaultInterface.Amount[Index];
end;

procedure TDefaultPriceLevels.Set_Amount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Amount[Index] := Param2;
end;

function TDefaultPriceLevels.Get_Enabled(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Enabled[Index];
end;

procedure TDefaultPriceLevels.Set_Enabled(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Enabled[Index] := Param2;
end;

function TDefaultPriceLevels.Get_Level(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Level[Index];
end;

procedure TDefaultPriceLevels.Set_Level(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Level[Index] := Param2;
end;

function TDefaultPriceLevels.Get_Method(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Method[Index];
end;

procedure TDefaultPriceLevels.Set_Method(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Method[Index] := Param2;
end;

function TDefaultPriceLevels.Get_Name(Index: Smallint): WideString;
begin
    Result := DefaultInterface.Name[Index];
end;

procedure TDefaultPriceLevels.Set_Name(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_Name(Index,Param2);
end;

function TDefaultPriceLevels.Get_RoundBy(Index: Smallint): Double;
begin
    Result := DefaultInterface.RoundBy[Index];
end;

procedure TDefaultPriceLevels.Set_RoundBy(Index: Smallint; Param2: Double);
begin
  DefaultInterface.RoundBy[Index] := Param2;
end;

function TDefaultPriceLevels.Get_Rounding(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Rounding[Index];
end;

procedure TDefaultPriceLevels.Set_Rounding(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Rounding[Index] := Param2;
end;

function TDefaultPriceLevels.Get_Use(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Use[Index];
end;

procedure TDefaultPriceLevels.Set_Use(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Use[Index] := Param2;
end;

function TDefaultPriceLevels.Get_Unused1(Index: Smallint): Double;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TDefaultPriceLevels.Set_Unused1(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TDefaultPriceLevels.Get_Unused2(Index: Smallint): Double;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TDefaultPriceLevels.Set_Unused2(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TDefaultPriceLevels.Get_Unused3(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Unused3[Index];
end;

procedure TDefaultPriceLevels.Set_Unused3(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Unused3[Index] := Param2;
end;

function TDefaultPriceLevels.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TDefaultPriceLevels.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TDefaultPriceLevels.Read: Smallint;
begin
  Result := DefaultInterface.Read;
end;

function TDefaultPriceLevels.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDefaultPriceLevelsProperties.Create(AServer: TDefaultPriceLevels);
begin
  inherited Create;
  FServer := AServer;
end;

function TDefaultPriceLevelsProperties.GetDefaultInterface: _DefaultPriceLevels;
begin
  Result := FServer.DefaultInterface;
end;

function TDefaultPriceLevelsProperties.Get_Amount(Index: Smallint): Double;
begin
    Result := DefaultInterface.Amount[Index];
end;

procedure TDefaultPriceLevelsProperties.Set_Amount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Amount[Index] := Param2;
end;

function TDefaultPriceLevelsProperties.Get_Enabled(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Enabled[Index];
end;

procedure TDefaultPriceLevelsProperties.Set_Enabled(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Enabled[Index] := Param2;
end;

function TDefaultPriceLevelsProperties.Get_Level(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Level[Index];
end;

procedure TDefaultPriceLevelsProperties.Set_Level(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Level[Index] := Param2;
end;

function TDefaultPriceLevelsProperties.Get_Method(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Method[Index];
end;

procedure TDefaultPriceLevelsProperties.Set_Method(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Method[Index] := Param2;
end;

function TDefaultPriceLevelsProperties.Get_Name(Index: Smallint): WideString;
begin
    Result := DefaultInterface.Name[Index];
end;

procedure TDefaultPriceLevelsProperties.Set_Name(Index: Smallint; const Param2: WideString);
begin
  DefaultInterface.Set_Name(Index,Param2);
end;

function TDefaultPriceLevelsProperties.Get_RoundBy(Index: Smallint): Double;
begin
    Result := DefaultInterface.RoundBy[Index];
end;

procedure TDefaultPriceLevelsProperties.Set_RoundBy(Index: Smallint; Param2: Double);
begin
  DefaultInterface.RoundBy[Index] := Param2;
end;

function TDefaultPriceLevelsProperties.Get_Rounding(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Rounding[Index];
end;

procedure TDefaultPriceLevelsProperties.Set_Rounding(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Rounding[Index] := Param2;
end;

function TDefaultPriceLevelsProperties.Get_Use(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Use[Index];
end;

procedure TDefaultPriceLevelsProperties.Set_Use(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Use[Index] := Param2;
end;

function TDefaultPriceLevelsProperties.Get_Unused1(Index: Smallint): Double;
begin
    Result := DefaultInterface.Unused1[Index];
end;

procedure TDefaultPriceLevelsProperties.Set_Unused1(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Unused1[Index] := Param2;
end;

function TDefaultPriceLevelsProperties.Get_Unused2(Index: Smallint): Double;
begin
    Result := DefaultInterface.Unused2[Index];
end;

procedure TDefaultPriceLevelsProperties.Set_Unused2(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Unused2[Index] := Param2;
end;

function TDefaultPriceLevelsProperties.Get_Unused3(Index: Smallint): Smallint;
begin
    Result := DefaultInterface.Unused3[Index];
end;

procedure TDefaultPriceLevelsProperties.Set_Unused3(Index: Smallint; Param2: Smallint);
begin
  DefaultInterface.Unused3[Index] := Param2;
end;

{$ENDIF}

class function CoRaiseHistory.Create: _RaiseHistory;
begin
  Result := CreateComObject(CLASS_RaiseHistory) as _RaiseHistory;
end;

class function CoRaiseHistory.CreateRemote(const MachineName: string): _RaiseHistory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RaiseHistory) as _RaiseHistory;
end;

procedure TRaiseHistory.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9524FD3D-FD56-4612-A0C9-9FF8E98158D1}';
    IntfIID:   '{8574F6FB-F69A-4B62-90F5-9F80ED9660FE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRaiseHistory.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _RaiseHistory;
  end;
end;

procedure TRaiseHistory.ConnectTo(svrIntf: _RaiseHistory);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRaiseHistory.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRaiseHistory.GetDefaultInterface: _RaiseHistory;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRaiseHistory.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRaiseHistoryProperties.Create(Self);
{$ENDIF}
end;

destructor TRaiseHistory.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRaiseHistory.GetServerProperties: TRaiseHistoryProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TRaiseHistory.Get_BaseAmount: Double;
begin
    Result := DefaultInterface.BaseAmount;
end;

procedure TRaiseHistory.Set_BaseAmount(Param1: Double);
begin
  DefaultInterface.Set_BaseAmount(Param1);
end;

function TRaiseHistory.Get_DateLastRaise: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateLastRaise;
end;

procedure TRaiseHistory.Set_DateLastRaise(Param1: OleVariant);
begin
  DefaultInterface.Set_DateLastRaise(Param1);
end;

function TRaiseHistory.Get_EmployeeIndex: Integer;
begin
    Result := DefaultInterface.EmployeeIndex;
end;

procedure TRaiseHistory.Set_EmployeeIndex(Param1: Integer);
begin
  DefaultInterface.Set_EmployeeIndex(Param1);
end;

function TRaiseHistory.Get_NewAmount: Double;
begin
    Result := DefaultInterface.NewAmount;
end;

procedure TRaiseHistory.Set_NewAmount(Param1: Double);
begin
  DefaultInterface.Set_NewAmount(Param1);
end;

function TRaiseHistory.Get_RaiseNote: WideString;
begin
    Result := DefaultInterface.RaiseNote;
end;

procedure TRaiseHistory.Set_RaiseNote(const Param1: WideString);
begin
  DefaultInterface.Set_RaiseNote(Param1);
end;

function TRaiseHistory.Get_RaiseAmount: Double;
begin
    Result := DefaultInterface.RaiseAmount;
end;

procedure TRaiseHistory.Set_RaiseAmount(Param1: Double);
begin
  DefaultInterface.Set_RaiseAmount(Param1);
end;

function TRaiseHistory.Get_RaisePercent: Double;
begin
    Result := DefaultInterface.RaisePercent;
end;

procedure TRaiseHistory.Set_RaisePercent(Param1: Double);
begin
  DefaultInterface.Set_RaisePercent(Param1);
end;

function TRaiseHistory.Get_Rate: Smallint;
begin
    Result := DefaultInterface.Rate;
end;

procedure TRaiseHistory.Set_Rate(Param1: Smallint);
begin
  DefaultInterface.Set_Rate(Param1);
end;

function TRaiseHistory.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TRaiseHistory.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TRaiseHistory.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TRaiseHistory.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TRaiseHistory.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TRaiseHistory.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TRaiseHistory.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TRaiseHistory.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TRaiseHistory.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TRaiseHistory.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRaiseHistoryProperties.Create(AServer: TRaiseHistory);
begin
  inherited Create;
  FServer := AServer;
end;

function TRaiseHistoryProperties.GetDefaultInterface: _RaiseHistory;
begin
  Result := FServer.DefaultInterface;
end;

function TRaiseHistoryProperties.Get_BaseAmount: Double;
begin
    Result := DefaultInterface.BaseAmount;
end;

procedure TRaiseHistoryProperties.Set_BaseAmount(Param1: Double);
begin
  DefaultInterface.Set_BaseAmount(Param1);
end;

function TRaiseHistoryProperties.Get_DateLastRaise: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateLastRaise;
end;

procedure TRaiseHistoryProperties.Set_DateLastRaise(Param1: OleVariant);
begin
  DefaultInterface.Set_DateLastRaise(Param1);
end;

function TRaiseHistoryProperties.Get_EmployeeIndex: Integer;
begin
    Result := DefaultInterface.EmployeeIndex;
end;

procedure TRaiseHistoryProperties.Set_EmployeeIndex(Param1: Integer);
begin
  DefaultInterface.Set_EmployeeIndex(Param1);
end;

function TRaiseHistoryProperties.Get_NewAmount: Double;
begin
    Result := DefaultInterface.NewAmount;
end;

procedure TRaiseHistoryProperties.Set_NewAmount(Param1: Double);
begin
  DefaultInterface.Set_NewAmount(Param1);
end;

function TRaiseHistoryProperties.Get_RaiseNote: WideString;
begin
    Result := DefaultInterface.RaiseNote;
end;

procedure TRaiseHistoryProperties.Set_RaiseNote(const Param1: WideString);
begin
  DefaultInterface.Set_RaiseNote(Param1);
end;

function TRaiseHistoryProperties.Get_RaiseAmount: Double;
begin
    Result := DefaultInterface.RaiseAmount;
end;

procedure TRaiseHistoryProperties.Set_RaiseAmount(Param1: Double);
begin
  DefaultInterface.Set_RaiseAmount(Param1);
end;

function TRaiseHistoryProperties.Get_RaisePercent: Double;
begin
    Result := DefaultInterface.RaisePercent;
end;

procedure TRaiseHistoryProperties.Set_RaisePercent(Param1: Double);
begin
  DefaultInterface.Set_RaisePercent(Param1);
end;

function TRaiseHistoryProperties.Get_Rate: Smallint;
begin
    Result := DefaultInterface.Rate;
end;

procedure TRaiseHistoryProperties.Set_Rate(Param1: Smallint);
begin
  DefaultInterface.Set_Rate(Param1);
end;

{$ENDIF}

class function CoBOMHistory.Create: _BOMHistory;
begin
  Result := CreateComObject(CLASS_BOMHistory) as _BOMHistory;
end;

class function CoBOMHistory.CreateRemote(const MachineName: string): _BOMHistory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BOMHistory) as _BOMHistory;
end;

procedure TBOMHistory.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7B5F7B39-FBED-470D-8375-A1D671A33C45}';
    IntfIID:   '{DDCDC5E2-2F2F-490B-A89C-634E2BDE7F34}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBOMHistory.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _BOMHistory;
  end;
end;

procedure TBOMHistory.ConnectTo(svrIntf: _BOMHistory);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TBOMHistory.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TBOMHistory.GetDefaultInterface: _BOMHistory;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBOMHistory.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBOMHistoryProperties.Create(Self);
{$ENDIF}
end;

destructor TBOMHistory.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBOMHistory.GetServerProperties: TBOMHistoryProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TBOMHistory.Get_AssemblyRecordNo: Integer;
begin
    Result := DefaultInterface.AssemblyRecordNo;
end;

procedure TBOMHistory.Set_AssemblyRecordNo(Param1: Integer);
begin
  DefaultInterface.Set_AssemblyRecordNo(Param1);
end;

function TBOMHistory.Get_ComponentQtyRequired(Index: Smallint): Double;
begin
    Result := DefaultInterface.ComponentQtyRequired[Index];
end;

procedure TBOMHistory.Set_ComponentQtyRequired(Index: Smallint; Param2: Double);
begin
  DefaultInterface.ComponentQtyRequired[Index] := Param2;
end;

function TBOMHistory.Get_ComponentRecordNumber(Index: Smallint): Integer;
begin
    Result := DefaultInterface.ComponentRecordNumber[Index];
end;

procedure TBOMHistory.Set_ComponentRecordNumber(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.ComponentRecordNumber[Index] := Param2;
end;

function TBOMHistory.Get_EffectiveDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EffectiveDate;
end;

procedure TBOMHistory.Set_EffectiveDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EffectiveDate(Param1);
end;

function TBOMHistory.Get_LastUpdateCounter: Integer;
begin
    Result := DefaultInterface.LastUpdateCounter;
end;

procedure TBOMHistory.Set_LastUpdateCounter(Param1: Integer);
begin
  DefaultInterface.Set_LastUpdateCounter(Param1);
end;

function TBOMHistory.Get_NoComponents: Integer;
begin
    Result := DefaultInterface.NoComponents;
end;

procedure TBOMHistory.Set_NoComponents(Param1: Integer);
begin
  DefaultInterface.Set_NoComponents(Param1);
end;

function TBOMHistory.Get_RecordNumber: Integer;
begin
    Result := DefaultInterface.RecordNumber;
end;

procedure TBOMHistory.Set_RecordNumber(Param1: Integer);
begin
  DefaultInterface.Set_RecordNumber(Param1);
end;

function TBOMHistory.Get_RevisionNote: WideString;
begin
    Result := DefaultInterface.RevisionNote;
end;

procedure TBOMHistory.Set_RevisionNote(const Param1: WideString);
begin
  DefaultInterface.Set_RevisionNote(Param1);
end;

function TBOMHistory.Get_RevisionNumber: Integer;
begin
    Result := DefaultInterface.RevisionNumber;
end;

procedure TBOMHistory.Set_RevisionNumber(Param1: Integer);
begin
  DefaultInterface.Set_RevisionNumber(Param1);
end;

function TBOMHistory.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TBOMHistory.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TBOMHistory.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TBOMHistory.GetEqual(RecordNumber: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(RecordNumber);
end;

function TBOMHistory.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TBOMHistory.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TBOMHistory.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TBOMHistory.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TBOMHistory.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TBOMHistory.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TBOMHistory.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBOMHistoryProperties.Create(AServer: TBOMHistory);
begin
  inherited Create;
  FServer := AServer;
end;

function TBOMHistoryProperties.GetDefaultInterface: _BOMHistory;
begin
  Result := FServer.DefaultInterface;
end;

function TBOMHistoryProperties.Get_AssemblyRecordNo: Integer;
begin
    Result := DefaultInterface.AssemblyRecordNo;
end;

procedure TBOMHistoryProperties.Set_AssemblyRecordNo(Param1: Integer);
begin
  DefaultInterface.Set_AssemblyRecordNo(Param1);
end;

function TBOMHistoryProperties.Get_ComponentQtyRequired(Index: Smallint): Double;
begin
    Result := DefaultInterface.ComponentQtyRequired[Index];
end;

procedure TBOMHistoryProperties.Set_ComponentQtyRequired(Index: Smallint; Param2: Double);
begin
  DefaultInterface.ComponentQtyRequired[Index] := Param2;
end;

function TBOMHistoryProperties.Get_ComponentRecordNumber(Index: Smallint): Integer;
begin
    Result := DefaultInterface.ComponentRecordNumber[Index];
end;

procedure TBOMHistoryProperties.Set_ComponentRecordNumber(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.ComponentRecordNumber[Index] := Param2;
end;

function TBOMHistoryProperties.Get_EffectiveDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EffectiveDate;
end;

procedure TBOMHistoryProperties.Set_EffectiveDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EffectiveDate(Param1);
end;

function TBOMHistoryProperties.Get_LastUpdateCounter: Integer;
begin
    Result := DefaultInterface.LastUpdateCounter;
end;

procedure TBOMHistoryProperties.Set_LastUpdateCounter(Param1: Integer);
begin
  DefaultInterface.Set_LastUpdateCounter(Param1);
end;

function TBOMHistoryProperties.Get_NoComponents: Integer;
begin
    Result := DefaultInterface.NoComponents;
end;

procedure TBOMHistoryProperties.Set_NoComponents(Param1: Integer);
begin
  DefaultInterface.Set_NoComponents(Param1);
end;

function TBOMHistoryProperties.Get_RecordNumber: Integer;
begin
    Result := DefaultInterface.RecordNumber;
end;

procedure TBOMHistoryProperties.Set_RecordNumber(Param1: Integer);
begin
  DefaultInterface.Set_RecordNumber(Param1);
end;

function TBOMHistoryProperties.Get_RevisionNote: WideString;
begin
    Result := DefaultInterface.RevisionNote;
end;

procedure TBOMHistoryProperties.Set_RevisionNote(const Param1: WideString);
begin
  DefaultInterface.Set_RevisionNote(Param1);
end;

function TBOMHistoryProperties.Get_RevisionNumber: Integer;
begin
    Result := DefaultInterface.RevisionNumber;
end;

procedure TBOMHistoryProperties.Set_RevisionNumber(Param1: Integer);
begin
  DefaultInterface.Set_RevisionNumber(Param1);
end;

{$ENDIF}

class function CoBOMItems.Create: _BOMItems;
begin
  Result := CreateComObject(CLASS_BOMItems) as _BOMItems;
end;

class function CoBOMItems.CreateRemote(const MachineName: string): _BOMItems;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BOMItems) as _BOMItems;
end;

procedure TBOMItems.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E233FF76-BC3A-4517-80A4-9BEBF1B92E70}';
    IntfIID:   '{A4C9C3FE-2F45-4486-BD10-B1872E62663A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBOMItems.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _BOMItems;
  end;
end;

procedure TBOMItems.ConnectTo(svrIntf: _BOMItems);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TBOMItems.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TBOMItems.GetDefaultInterface: _BOMItems;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBOMItems.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBOMItemsProperties.Create(Self);
{$ENDIF}
end;

destructor TBOMItems.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBOMItems.GetServerProperties: TBOMItemsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TBOMItems.Get_AssemblyRecordNo: Integer;
begin
    Result := DefaultInterface.AssemblyRecordNo;
end;

procedure TBOMItems.Set_AssemblyRecordNo(Param1: Integer);
begin
  DefaultInterface.Set_AssemblyRecordNo(Param1);
end;

function TBOMItems.Get_ComponentNumber: Integer;
begin
    Result := DefaultInterface.ComponentNumber;
end;

procedure TBOMItems.Set_ComponentNumber(Param1: Integer);
begin
  DefaultInterface.Set_ComponentNumber(Param1);
end;

function TBOMItems.Get_ComponentRecordNo: Integer;
begin
    Result := DefaultInterface.ComponentRecordNo;
end;

procedure TBOMItems.Set_ComponentRecordNo(Param1: Integer);
begin
  DefaultInterface.Set_ComponentRecordNo(Param1);
end;

function TBOMItems.Get_EffectiveDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EffectiveDate;
end;

procedure TBOMItems.Set_EffectiveDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EffectiveDate(Param1);
end;

function TBOMItems.Get_QtyRequired: Double;
begin
    Result := DefaultInterface.QtyRequired;
end;

procedure TBOMItems.Set_QtyRequired(Param1: Double);
begin
  DefaultInterface.Set_QtyRequired(Param1);
end;

function TBOMItems.Get_RecordNumber: Integer;
begin
    Result := DefaultInterface.RecordNumber;
end;

procedure TBOMItems.Set_RecordNumber(Param1: Integer);
begin
  DefaultInterface.Set_RecordNumber(Param1);
end;

function TBOMItems.Get_RevisionNumber: Integer;
begin
    Result := DefaultInterface.RevisionNumber;
end;

procedure TBOMItems.Set_RevisionNumber(Param1: Integer);
begin
  DefaultInterface.Set_RevisionNumber(Param1);
end;

function TBOMItems.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TBOMItems.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TBOMItems.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TBOMItems.GetEqual(RecordNumber: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(RecordNumber);
end;

function TBOMItems.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TBOMItems.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TBOMItems.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TBOMItems.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TBOMItems.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TBOMItems.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TBOMItems.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBOMItemsProperties.Create(AServer: TBOMItems);
begin
  inherited Create;
  FServer := AServer;
end;

function TBOMItemsProperties.GetDefaultInterface: _BOMItems;
begin
  Result := FServer.DefaultInterface;
end;

function TBOMItemsProperties.Get_AssemblyRecordNo: Integer;
begin
    Result := DefaultInterface.AssemblyRecordNo;
end;

procedure TBOMItemsProperties.Set_AssemblyRecordNo(Param1: Integer);
begin
  DefaultInterface.Set_AssemblyRecordNo(Param1);
end;

function TBOMItemsProperties.Get_ComponentNumber: Integer;
begin
    Result := DefaultInterface.ComponentNumber;
end;

procedure TBOMItemsProperties.Set_ComponentNumber(Param1: Integer);
begin
  DefaultInterface.Set_ComponentNumber(Param1);
end;

function TBOMItemsProperties.Get_ComponentRecordNo: Integer;
begin
    Result := DefaultInterface.ComponentRecordNo;
end;

procedure TBOMItemsProperties.Set_ComponentRecordNo(Param1: Integer);
begin
  DefaultInterface.Set_ComponentRecordNo(Param1);
end;

function TBOMItemsProperties.Get_EffectiveDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EffectiveDate;
end;

procedure TBOMItemsProperties.Set_EffectiveDate(Param1: OleVariant);
begin
  DefaultInterface.Set_EffectiveDate(Param1);
end;

function TBOMItemsProperties.Get_QtyRequired: Double;
begin
    Result := DefaultInterface.QtyRequired;
end;

procedure TBOMItemsProperties.Set_QtyRequired(Param1: Double);
begin
  DefaultInterface.Set_QtyRequired(Param1);
end;

function TBOMItemsProperties.Get_RecordNumber: Integer;
begin
    Result := DefaultInterface.RecordNumber;
end;

procedure TBOMItemsProperties.Set_RecordNumber(Param1: Integer);
begin
  DefaultInterface.Set_RecordNumber(Param1);
end;

function TBOMItemsProperties.Get_RevisionNumber: Integer;
begin
    Result := DefaultInterface.RevisionNumber;
end;

procedure TBOMItemsProperties.Set_RevisionNumber(Param1: Integer);
begin
  DefaultInterface.Set_RevisionNumber(Param1);
end;

{$ENDIF}

class function CoQuantityDiscount.Create: _QuantityDiscount;
begin
  Result := CreateComObject(CLASS_QuantityDiscount) as _QuantityDiscount;
end;

class function CoQuantityDiscount.CreateRemote(const MachineName: string): _QuantityDiscount;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_QuantityDiscount) as _QuantityDiscount;
end;

procedure TQuantityDiscount.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A34676E0-A112-45A2-AA25-2B29690DA5C2}';
    IntfIID:   '{56FD6770-B7B7-46F3-ABBD-A3A22C89654B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TQuantityDiscount.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _QuantityDiscount;
  end;
end;

procedure TQuantityDiscount.ConnectTo(svrIntf: _QuantityDiscount);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TQuantityDiscount.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TQuantityDiscount.GetDefaultInterface: _QuantityDiscount;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TQuantityDiscount.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TQuantityDiscountProperties.Create(Self);
{$ENDIF}
end;

destructor TQuantityDiscount.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TQuantityDiscount.GetServerProperties: TQuantityDiscountProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TQuantityDiscount.Get_CalcMethod: Smallint;
begin
    Result := DefaultInterface.CalcMethod;
end;

procedure TQuantityDiscount.Set_CalcMethod(Param1: Smallint);
begin
  DefaultInterface.Set_CalcMethod(Param1);
end;

function TQuantityDiscount.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TQuantityDiscount.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TQuantityDiscount.Get_Discount(Index: Smallint): Double;
begin
    Result := DefaultInterface.Discount[Index];
end;

procedure TQuantityDiscount.Set_Discount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Discount[Index] := Param2;
end;

function TQuantityDiscount.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TQuantityDiscount.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TQuantityDiscount.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TQuantityDiscount.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TQuantityDiscount.Get_MinQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.MinQuantity[Index];
end;

procedure TQuantityDiscount.Set_MinQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.MinQuantity[Index] := Param2;
end;

function TQuantityDiscount.Get_PriceLevelSelected(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.PriceLevelSelected[Index];
end;

procedure TQuantityDiscount.Set_PriceLevelSelected(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.PriceLevelSelected[Index] := Param2;
end;

function TQuantityDiscount.Get_RecordNumber: WideString;
begin
    Result := DefaultInterface.RecordNumber;
end;

procedure TQuantityDiscount.Set_RecordNumber(const Param1: WideString);
begin
  DefaultInterface.Set_RecordNumber(Param1);
end;

function TQuantityDiscount.Get_RoundingCents: Double;
begin
    Result := DefaultInterface.RoundingCents;
end;

procedure TQuantityDiscount.Set_RoundingCents(Param1: Double);
begin
  DefaultInterface.Set_RoundingCents(Param1);
end;

function TQuantityDiscount.Get_RoundingMethod: Smallint;
begin
    Result := DefaultInterface.RoundingMethod;
end;

procedure TQuantityDiscount.Set_RoundingMethod(Param1: Smallint);
begin
  DefaultInterface.Set_RoundingMethod(Param1);
end;

function TQuantityDiscount.Get_Unused1: Integer;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TQuantityDiscount.Set_Unused1(Param1: Integer);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TQuantityDiscount.Get_QuantitySpecified(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.QuantitySpecified[Index];
end;

procedure TQuantityDiscount.Set_QuantitySpecified(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.QuantitySpecified[Index] := Param2;
end;

function TQuantityDiscount.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TQuantityDiscount.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TQuantityDiscount.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TQuantityDiscount.GetEqual(const RecordNumber: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(RecordNumber);
end;

function TQuantityDiscount.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TQuantityDiscount.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TQuantityDiscount.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TQuantityDiscount.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TQuantityDiscount.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TQuantityDiscount.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TQuantityDiscount.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TQuantityDiscountProperties.Create(AServer: TQuantityDiscount);
begin
  inherited Create;
  FServer := AServer;
end;

function TQuantityDiscountProperties.GetDefaultInterface: _QuantityDiscount;
begin
  Result := FServer.DefaultInterface;
end;

function TQuantityDiscountProperties.Get_CalcMethod: Smallint;
begin
    Result := DefaultInterface.CalcMethod;
end;

procedure TQuantityDiscountProperties.Set_CalcMethod(Param1: Smallint);
begin
  DefaultInterface.Set_CalcMethod(Param1);
end;

function TQuantityDiscountProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TQuantityDiscountProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TQuantityDiscountProperties.Get_Discount(Index: Smallint): Double;
begin
    Result := DefaultInterface.Discount[Index];
end;

procedure TQuantityDiscountProperties.Set_Discount(Index: Smallint; Param2: Double);
begin
  DefaultInterface.Discount[Index] := Param2;
end;

function TQuantityDiscountProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TQuantityDiscountProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TQuantityDiscountProperties.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TQuantityDiscountProperties.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TQuantityDiscountProperties.Get_MinQuantity(Index: Smallint): Double;
begin
    Result := DefaultInterface.MinQuantity[Index];
end;

procedure TQuantityDiscountProperties.Set_MinQuantity(Index: Smallint; Param2: Double);
begin
  DefaultInterface.MinQuantity[Index] := Param2;
end;

function TQuantityDiscountProperties.Get_PriceLevelSelected(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.PriceLevelSelected[Index];
end;

procedure TQuantityDiscountProperties.Set_PriceLevelSelected(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.PriceLevelSelected[Index] := Param2;
end;

function TQuantityDiscountProperties.Get_RecordNumber: WideString;
begin
    Result := DefaultInterface.RecordNumber;
end;

procedure TQuantityDiscountProperties.Set_RecordNumber(const Param1: WideString);
begin
  DefaultInterface.Set_RecordNumber(Param1);
end;

function TQuantityDiscountProperties.Get_RoundingCents: Double;
begin
    Result := DefaultInterface.RoundingCents;
end;

procedure TQuantityDiscountProperties.Set_RoundingCents(Param1: Double);
begin
  DefaultInterface.Set_RoundingCents(Param1);
end;

function TQuantityDiscountProperties.Get_RoundingMethod: Smallint;
begin
    Result := DefaultInterface.RoundingMethod;
end;

procedure TQuantityDiscountProperties.Set_RoundingMethod(Param1: Smallint);
begin
  DefaultInterface.Set_RoundingMethod(Param1);
end;

function TQuantityDiscountProperties.Get_Unused1: Integer;
begin
    Result := DefaultInterface.Unused1;
end;

procedure TQuantityDiscountProperties.Set_Unused1(Param1: Integer);
begin
  DefaultInterface.Set_Unused1(Param1);
end;

function TQuantityDiscountProperties.Get_QuantitySpecified(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.QuantitySpecified[Index];
end;

procedure TQuantityDiscountProperties.Set_QuantitySpecified(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.QuantitySpecified[Index] := Param2;
end;

{$ENDIF}

class function CoUnitMeasure.Create: _UnitMeasure;
begin
  Result := CreateComObject(CLASS_UnitMeasure) as _UnitMeasure;
end;

class function CoUnitMeasure.CreateRemote(const MachineName: string): _UnitMeasure;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UnitMeasure) as _UnitMeasure;
end;

procedure TUnitMeasure.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{83C4299F-D624-44E1-BC81-286DCCDA48C9}';
    IntfIID:   '{6612DC34-5B03-4093-8084-1262B6202C97}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUnitMeasure.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UnitMeasure;
  end;
end;

procedure TUnitMeasure.ConnectTo(svrIntf: _UnitMeasure);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUnitMeasure.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUnitMeasure.GetDefaultInterface: _UnitMeasure;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TUnitMeasure.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TUnitMeasureProperties.Create(Self);
{$ENDIF}
end;

destructor TUnitMeasure.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TUnitMeasure.GetServerProperties: TUnitMeasureProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TUnitMeasure.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TUnitMeasure.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TUnitMeasure.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TUnitMeasure.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TUnitMeasure.Get_ID: WideString;
begin
    Result := DefaultInterface.ID;
end;

procedure TUnitMeasure.Set_ID(const Param1: WideString);
begin
  DefaultInterface.Set_ID(Param1);
end;

function TUnitMeasure.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TUnitMeasure.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TUnitMeasure.Get_NoStockingUnits: Double;
begin
    Result := DefaultInterface.NoStockingUnits;
end;

procedure TUnitMeasure.Set_NoStockingUnits(Param1: Double);
begin
  DefaultInterface.Set_NoStockingUnits(Param1);
end;

function TUnitMeasure.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TUnitMeasure.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TUnitMeasure.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TUnitMeasure.GetEqual(const ID: WideString): Smallint;
begin
  Result := DefaultInterface.GetEqual(ID);
end;

function TUnitMeasure.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TUnitMeasure.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TUnitMeasure.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TUnitMeasure.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TUnitMeasure.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TUnitMeasure.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TUnitMeasure.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TUnitMeasureProperties.Create(AServer: TUnitMeasure);
begin
  inherited Create;
  FServer := AServer;
end;

function TUnitMeasureProperties.GetDefaultInterface: _UnitMeasure;
begin
  Result := FServer.DefaultInterface;
end;

function TUnitMeasureProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TUnitMeasureProperties.Set_Description(const Param1: WideString);
begin
  DefaultInterface.Set_Description(Param1);
end;

function TUnitMeasureProperties.Get_GUID: WideString;
begin
    Result := DefaultInterface.GUID;
end;

procedure TUnitMeasureProperties.Set_GUID(const Param1: WideString);
begin
  DefaultInterface.Set_GUID(Param1);
end;

function TUnitMeasureProperties.Get_ID: WideString;
begin
    Result := DefaultInterface.ID;
end;

procedure TUnitMeasureProperties.Set_ID(const Param1: WideString);
begin
  DefaultInterface.Set_ID(Param1);
end;

function TUnitMeasureProperties.Get_Inactive: WordBool;
begin
    Result := DefaultInterface.Inactive;
end;

procedure TUnitMeasureProperties.Set_Inactive(Param1: WordBool);
begin
  DefaultInterface.Set_Inactive(Param1);
end;

function TUnitMeasureProperties.Get_NoStockingUnits: Double;
begin
    Result := DefaultInterface.NoStockingUnits;
end;

procedure TUnitMeasureProperties.Set_NoStockingUnits(Param1: Double);
begin
  DefaultInterface.Set_NoStockingUnits(Param1);
end;

{$ENDIF}

class function CoWorkTicket.Create: _WorkTicket;
begin
  Result := CreateComObject(CLASS_WorkTicket) as _WorkTicket;
end;

class function CoWorkTicket.CreateRemote(const MachineName: string): _WorkTicket;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WorkTicket) as _WorkTicket;
end;

procedure TWorkTicket.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{19FFABB7-AD64-4CF9-A7A6-227EBCCCACAE}';
    IntfIID:   '{1BCB22F2-AD72-4D87-AC16-605C15E938D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TWorkTicket.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _WorkTicket;
  end;
end;

procedure TWorkTicket.ConnectTo(svrIntf: _WorkTicket);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TWorkTicket.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TWorkTicket.GetDefaultInterface: _WorkTicket;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TWorkTicket.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TWorkTicketProperties.Create(Self);
{$ENDIF}
end;

destructor TWorkTicket.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TWorkTicket.GetServerProperties: TWorkTicketProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TWorkTicket.Get_AssemblyRevNo: Integer;
begin
    Result := DefaultInterface.AssemblyRevNo;
end;

procedure TWorkTicket.Set_AssemblyRevNo(Param1: Integer);
begin
  DefaultInterface.Set_AssemblyRevNo(Param1);
end;

function TWorkTicket.Get_Closed: WordBool;
begin
    Result := DefaultInterface.Closed;
end;

procedure TWorkTicket.Set_Closed(Param1: WordBool);
begin
  DefaultInterface.Set_Closed(Param1);
end;

function TWorkTicket.Get_ComponentActualHours(Index: Smallint): Double;
begin
    Result := DefaultInterface.ComponentActualHours[Index];
end;

procedure TWorkTicket.Set_ComponentActualHours(Index: Smallint; Param2: Double);
begin
  DefaultInterface.ComponentActualHours[Index] := Param2;
end;

function TWorkTicket.Get_ComponentFinished(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.ComponentFinished[Index];
end;

procedure TWorkTicket.Set_ComponentFinished(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.ComponentFinished[Index] := Param2;
end;

function TWorkTicket.Get_ComponentPOCreated(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.ComponentPOCreated[Index];
end;

procedure TWorkTicket.Set_ComponentPOCreated(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.ComponentPOCreated[Index] := Param2;
end;

function TWorkTicket.Get_ComponentIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.ComponentIndex[Index];
end;

procedure TWorkTicket.Set_ComponentIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.ComponentIndex[Index] := Param2;
end;

function TWorkTicket.Get_ComponentQuantityRequired(Index: Smallint): Double;
begin
    Result := DefaultInterface.ComponentQuantityRequired[Index];
end;

procedure TWorkTicket.Set_ComponentQuantityRequired(Index: Smallint; Param2: Double);
begin
  DefaultInterface.ComponentQuantityRequired[Index] := Param2;
end;

function TWorkTicket.Get_DateComplete: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateComplete;
end;

procedure TWorkTicket.Set_DateComplete(Param1: OleVariant);
begin
  DefaultInterface.Set_DateComplete(Param1);
end;

function TWorkTicket.Get_DateNeededBy: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateNeededBy;
end;

procedure TWorkTicket.Set_DateNeededBy(Param1: OleVariant);
begin
  DefaultInterface.Set_DateNeededBy(Param1);
end;

function TWorkTicket.Get_DateStarted: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateStarted;
end;

procedure TWorkTicket.Set_DateStarted(Param1: OleVariant);
begin
  DefaultInterface.Set_DateStarted(Param1);
end;

function TWorkTicket.Get_EmployeeIndex: Integer;
begin
    Result := DefaultInterface.EmployeeIndex;
end;

procedure TWorkTicket.Set_EmployeeIndex(Param1: Integer);
begin
  DefaultInterface.Set_EmployeeIndex(Param1);
end;

function TWorkTicket.Get_Internal1: Integer;
begin
    Result := DefaultInterface.Internal1;
end;

procedure TWorkTicket.Set_Internal1(Param1: Integer);
begin
  DefaultInterface.Set_Internal1(Param1);
end;

function TWorkTicket.Get_Internal2: Integer;
begin
    Result := DefaultInterface.Internal2;
end;

procedure TWorkTicket.Set_Internal2(Param1: Integer);
begin
  DefaultInterface.Set_Internal2(Param1);
end;

function TWorkTicket.Get_Internal3: Integer;
begin
    Result := DefaultInterface.Internal3;
end;

procedure TWorkTicket.Set_Internal3(Param1: Integer);
begin
  DefaultInterface.Set_Internal3(Param1);
end;

function TWorkTicket.Get_ItemIndex: Integer;
begin
    Result := DefaultInterface.ItemIndex;
end;

procedure TWorkTicket.Set_ItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_ItemIndex(Param1);
end;

function TWorkTicket.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TWorkTicket.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TWorkTicket.Get_NComponents: Integer;
begin
    Result := DefaultInterface.NComponents;
end;

procedure TWorkTicket.Set_NComponents(Param1: Integer);
begin
  DefaultInterface.Set_NComponents(Param1);
end;

function TWorkTicket.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TWorkTicket.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TWorkTicket.Get_Number: WideString;
begin
    Result := DefaultInterface.Number;
end;

procedure TWorkTicket.Set_Number(const Param1: WideString);
begin
  DefaultInterface.Set_Number(Param1);
end;

function TWorkTicket.Get_QtyToBuild: Double;
begin
    Result := DefaultInterface.QtyToBuild;
end;

procedure TWorkTicket.Set_QtyToBuild(Param1: Double);
begin
  DefaultInterface.Set_QtyToBuild(Param1);
end;

function TWorkTicket.Get_RecordNumber: Integer;
begin
    Result := DefaultInterface.RecordNumber;
end;

procedure TWorkTicket.Set_RecordNumber(Param1: Integer);
begin
  DefaultInterface.Set_RecordNumber(Param1);
end;

function TWorkTicket.Get_TotalEstHours: Double;
begin
    Result := DefaultInterface.TotalEstHours;
end;

procedure TWorkTicket.Set_TotalEstHours(Param1: Double);
begin
  DefaultInterface.Set_TotalEstHours(Param1);
end;

function TWorkTicket.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TWorkTicket.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

function TWorkTicket.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TWorkTicket.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TWorkTicket.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TWorkTicket.GetEqual(RecordNumber: Integer): Smallint;
begin
  Result := DefaultInterface.GetEqual(RecordNumber);
end;

function TWorkTicket.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TWorkTicket.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TWorkTicket.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TWorkTicket.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TWorkTicket.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TWorkTicket.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TWorkTicket.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TWorkTicketProperties.Create(AServer: TWorkTicket);
begin
  inherited Create;
  FServer := AServer;
end;

function TWorkTicketProperties.GetDefaultInterface: _WorkTicket;
begin
  Result := FServer.DefaultInterface;
end;

function TWorkTicketProperties.Get_AssemblyRevNo: Integer;
begin
    Result := DefaultInterface.AssemblyRevNo;
end;

procedure TWorkTicketProperties.Set_AssemblyRevNo(Param1: Integer);
begin
  DefaultInterface.Set_AssemblyRevNo(Param1);
end;

function TWorkTicketProperties.Get_Closed: WordBool;
begin
    Result := DefaultInterface.Closed;
end;

procedure TWorkTicketProperties.Set_Closed(Param1: WordBool);
begin
  DefaultInterface.Set_Closed(Param1);
end;

function TWorkTicketProperties.Get_ComponentActualHours(Index: Smallint): Double;
begin
    Result := DefaultInterface.ComponentActualHours[Index];
end;

procedure TWorkTicketProperties.Set_ComponentActualHours(Index: Smallint; Param2: Double);
begin
  DefaultInterface.ComponentActualHours[Index] := Param2;
end;

function TWorkTicketProperties.Get_ComponentFinished(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.ComponentFinished[Index];
end;

procedure TWorkTicketProperties.Set_ComponentFinished(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.ComponentFinished[Index] := Param2;
end;

function TWorkTicketProperties.Get_ComponentPOCreated(Index: Smallint): WordBool;
begin
    Result := DefaultInterface.ComponentPOCreated[Index];
end;

procedure TWorkTicketProperties.Set_ComponentPOCreated(Index: Smallint; Param2: WordBool);
begin
  DefaultInterface.ComponentPOCreated[Index] := Param2;
end;

function TWorkTicketProperties.Get_ComponentIndex(Index: Smallint): Integer;
begin
    Result := DefaultInterface.ComponentIndex[Index];
end;

procedure TWorkTicketProperties.Set_ComponentIndex(Index: Smallint; Param2: Integer);
begin
  DefaultInterface.ComponentIndex[Index] := Param2;
end;

function TWorkTicketProperties.Get_ComponentQuantityRequired(Index: Smallint): Double;
begin
    Result := DefaultInterface.ComponentQuantityRequired[Index];
end;

procedure TWorkTicketProperties.Set_ComponentQuantityRequired(Index: Smallint; Param2: Double);
begin
  DefaultInterface.ComponentQuantityRequired[Index] := Param2;
end;

function TWorkTicketProperties.Get_DateComplete: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateComplete;
end;

procedure TWorkTicketProperties.Set_DateComplete(Param1: OleVariant);
begin
  DefaultInterface.Set_DateComplete(Param1);
end;

function TWorkTicketProperties.Get_DateNeededBy: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateNeededBy;
end;

procedure TWorkTicketProperties.Set_DateNeededBy(Param1: OleVariant);
begin
  DefaultInterface.Set_DateNeededBy(Param1);
end;

function TWorkTicketProperties.Get_DateStarted: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateStarted;
end;

procedure TWorkTicketProperties.Set_DateStarted(Param1: OleVariant);
begin
  DefaultInterface.Set_DateStarted(Param1);
end;

function TWorkTicketProperties.Get_EmployeeIndex: Integer;
begin
    Result := DefaultInterface.EmployeeIndex;
end;

procedure TWorkTicketProperties.Set_EmployeeIndex(Param1: Integer);
begin
  DefaultInterface.Set_EmployeeIndex(Param1);
end;

function TWorkTicketProperties.Get_Internal1: Integer;
begin
    Result := DefaultInterface.Internal1;
end;

procedure TWorkTicketProperties.Set_Internal1(Param1: Integer);
begin
  DefaultInterface.Set_Internal1(Param1);
end;

function TWorkTicketProperties.Get_Internal2: Integer;
begin
    Result := DefaultInterface.Internal2;
end;

procedure TWorkTicketProperties.Set_Internal2(Param1: Integer);
begin
  DefaultInterface.Set_Internal2(Param1);
end;

function TWorkTicketProperties.Get_Internal3: Integer;
begin
    Result := DefaultInterface.Internal3;
end;

procedure TWorkTicketProperties.Set_Internal3(Param1: Integer);
begin
  DefaultInterface.Set_Internal3(Param1);
end;

function TWorkTicketProperties.Get_ItemIndex: Integer;
begin
    Result := DefaultInterface.ItemIndex;
end;

procedure TWorkTicketProperties.Set_ItemIndex(Param1: Integer);
begin
  DefaultInterface.Set_ItemIndex(Param1);
end;

function TWorkTicketProperties.Get_Note: WideString;
begin
    Result := DefaultInterface.Note;
end;

procedure TWorkTicketProperties.Set_Note(const Param1: WideString);
begin
  DefaultInterface.Set_Note(Param1);
end;

function TWorkTicketProperties.Get_NComponents: Integer;
begin
    Result := DefaultInterface.NComponents;
end;

procedure TWorkTicketProperties.Set_NComponents(Param1: Integer);
begin
  DefaultInterface.Set_NComponents(Param1);
end;

function TWorkTicketProperties.Get_NRecord: Integer;
begin
    Result := DefaultInterface.NRecord;
end;

procedure TWorkTicketProperties.Set_NRecord(Param1: Integer);
begin
  DefaultInterface.Set_NRecord(Param1);
end;

function TWorkTicketProperties.Get_Number: WideString;
begin
    Result := DefaultInterface.Number;
end;

procedure TWorkTicketProperties.Set_Number(const Param1: WideString);
begin
  DefaultInterface.Set_Number(Param1);
end;

function TWorkTicketProperties.Get_QtyToBuild: Double;
begin
    Result := DefaultInterface.QtyToBuild;
end;

procedure TWorkTicketProperties.Set_QtyToBuild(Param1: Double);
begin
  DefaultInterface.Set_QtyToBuild(Param1);
end;

function TWorkTicketProperties.Get_RecordNumber: Integer;
begin
    Result := DefaultInterface.RecordNumber;
end;

procedure TWorkTicketProperties.Set_RecordNumber(Param1: Integer);
begin
  DefaultInterface.Set_RecordNumber(Param1);
end;

function TWorkTicketProperties.Get_TotalEstHours: Double;
begin
    Result := DefaultInterface.TotalEstHours;
end;

procedure TWorkTicketProperties.Set_TotalEstHours(Param1: Double);
begin
  DefaultInterface.Set_TotalEstHours(Param1);
end;

function TWorkTicketProperties.Get_TrxDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TrxDate;
end;

procedure TWorkTicketProperties.Set_TrxDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TrxDate(Param1);
end;

{$ENDIF}

class function CoSelectJob.Create: _SelectJob;
begin
  Result := CreateComObject(CLASS_SelectJob) as _SelectJob;
end;

class function CoSelectJob.CreateRemote(const MachineName: string): _SelectJob;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectJob) as _SelectJob;
end;

procedure TSelectJob.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{711DC818-04BC-445A-AEB2-3789714724CC}';
    IntfIID:   '{A1FC6EE3-9A7F-4C51-AAC0-C1375E8840E5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSelectJob.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SelectJob;
  end;
end;

procedure TSelectJob.ConnectTo(svrIntf: _SelectJob);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSelectJob.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSelectJob.GetDefaultInterface: _SelectJob;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSelectJob.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSelectJobProperties.Create(Self);
{$ENDIF}
end;

destructor TSelectJob.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSelectJob.GetServerProperties: TSelectJobProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSelectJob.Get_CostIndex: Integer;
begin
    Result := DefaultInterface.CostIndex;
end;

procedure TSelectJob.Set_CostIndex(Param1: Integer);
begin
  DefaultInterface.Set_CostIndex(Param1);
end;

procedure TSelectJob.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

function TSelectJob.Get_JobIndex: Integer;
begin
    Result := DefaultInterface.JobIndex;
end;

procedure TSelectJob.Set_JobIndex(Param1: Integer);
begin
  DefaultInterface.Set_JobIndex(Param1);
end;

function TSelectJob.Get_PhaseIndex: Integer;
begin
    Result := DefaultInterface.PhaseIndex;
end;

procedure TSelectJob.Set_PhaseIndex(Param1: Integer);
begin
  DefaultInterface.Set_PhaseIndex(Param1);
end;

function TSelectJob.ShowOpen: OleVariant;
begin
  Result := DefaultInterface.ShowOpen;
end;

function TSelectJob.Location(hwnd: Integer; left: Integer; top: Integer): OleVariant;
begin
  Result := DefaultInterface.Location(hwnd, left, top);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSelectJobProperties.Create(AServer: TSelectJob);
begin
  inherited Create;
  FServer := AServer;
end;

function TSelectJobProperties.GetDefaultInterface: _SelectJob;
begin
  Result := FServer.DefaultInterface;
end;

function TSelectJobProperties.Get_CostIndex: Integer;
begin
    Result := DefaultInterface.CostIndex;
end;

procedure TSelectJobProperties.Set_CostIndex(Param1: Integer);
begin
  DefaultInterface.Set_CostIndex(Param1);
end;

procedure TSelectJobProperties.Set_ExcludeInactive(Param1: WordBool);
begin
  DefaultInterface.Set_ExcludeInactive(Param1);
end;

function TSelectJobProperties.Get_JobIndex: Integer;
begin
    Result := DefaultInterface.JobIndex;
end;

procedure TSelectJobProperties.Set_JobIndex(Param1: Integer);
begin
  DefaultInterface.Set_JobIndex(Param1);
end;

function TSelectJobProperties.Get_PhaseIndex: Integer;
begin
    Result := DefaultInterface.PhaseIndex;
end;

procedure TSelectJobProperties.Set_PhaseIndex(Param1: Integer);
begin
  DefaultInterface.Set_PhaseIndex(Param1);
end;

{$ENDIF}

class function CoJrnlSNo.Create: _JrnlSNo;
begin
  Result := CreateComObject(CLASS_JrnlSNo) as _JrnlSNo;
end;

class function CoJrnlSNo.CreateRemote(const MachineName: string): _JrnlSNo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_JrnlSNo) as _JrnlSNo;
end;

procedure TJrnlSNo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A61AEE9E-CD45-4AC3-94DB-52C0F331F5CE}';
    IntfIID:   '{539D2157-A6A7-4DBC-BDF6-C517DF39C45B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TJrnlSNo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _JrnlSNo;
  end;
end;

procedure TJrnlSNo.ConnectTo(svrIntf: _JrnlSNo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TJrnlSNo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TJrnlSNo.GetDefaultInterface: _JrnlSNo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TJrnlSNo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TJrnlSNoProperties.Create(Self);
{$ENDIF}
end;

destructor TJrnlSNo.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TJrnlSNo.GetServerProperties: TJrnlSNoProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TJrnlSNo.Get_ItemRecordNumber: Integer;
begin
    Result := DefaultInterface.ItemRecordNumber;
end;

procedure TJrnlSNo.Set_ItemRecordNumber(Param1: Integer);
begin
  DefaultInterface.Set_ItemRecordNumber(Param1);
end;

function TJrnlSNo.Get_JrnlPostOrder: Integer;
begin
    Result := DefaultInterface.JrnlPostOrder;
end;

procedure TJrnlSNo.Set_JrnlPostOrder(Param1: Integer);
begin
  DefaultInterface.Set_JrnlPostOrder(Param1);
end;

function TJrnlSNo.Get_JrnlRowIndex: Integer;
begin
    Result := DefaultInterface.JrnlRowIndex;
end;

procedure TJrnlSNo.Set_JrnlRowIndex(Param1: Integer);
begin
  DefaultInterface.Set_JrnlRowIndex(Param1);
end;

function TJrnlSNo.Get_SerialNumber: WideString;
begin
    Result := DefaultInterface.SerialNumber;
end;

procedure TJrnlSNo.Set_SerialNumber(const Param1: WideString);
begin
  DefaultInterface.Set_SerialNumber(Param1);
end;

function TJrnlSNo.Get_SerialRecordNumber: Integer;
begin
    Result := DefaultInterface.SerialRecordNumber;
end;

procedure TJrnlSNo.Set_SerialRecordNumber(Param1: Integer);
begin
  DefaultInterface.Set_SerialRecordNumber(Param1);
end;

function TJrnlSNo.Get_TransactionClass: Integer;
begin
    Result := DefaultInterface.TransactionClass;
end;

procedure TJrnlSNo.Set_TransactionClass(Param1: Integer);
begin
  DefaultInterface.Set_TransactionClass(Param1);
end;

function TJrnlSNo.Get_TransactionCost: Double;
begin
    Result := DefaultInterface.TransactionCost;
end;

procedure TJrnlSNo.Set_TransactionCost(Param1: Double);
begin
  DefaultInterface.Set_TransactionCost(Param1);
end;

function TJrnlSNo.Get_TransactionDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TransactionDate;
end;

procedure TJrnlSNo.Set_TransactionDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TransactionDate(Param1);
end;

function TJrnlSNo.Get_WorkTktReferenceNo: Integer;
begin
    Result := DefaultInterface.WorkTktReferenceNo;
end;

procedure TJrnlSNo.Set_WorkTktReferenceNo(Param1: Integer);
begin
  DefaultInterface.Set_WorkTktReferenceNo(Param1);
end;

function TJrnlSNo.CloseFile: Smallint;
begin
  Result := DefaultInterface.CloseFile;
end;

function TJrnlSNo.OpenFile: Smallint;
begin
  Result := DefaultInterface.OpenFile;
end;

function TJrnlSNo.Delete: Smallint;
begin
  Result := DefaultInterface.Delete;
end;

function TJrnlSNo.Insert: Smallint;
begin
  Result := DefaultInterface.Insert;
end;

function TJrnlSNo.RecordCount: Integer;
begin
  Result := DefaultInterface.RecordCount;
end;

function TJrnlSNo.StepFirst: Smallint;
begin
  Result := DefaultInterface.StepFirst;
end;

function TJrnlSNo.StepLast: Smallint;
begin
  Result := DefaultInterface.StepLast;
end;

function TJrnlSNo.StepNext: Smallint;
begin
  Result := DefaultInterface.StepNext;
end;

function TJrnlSNo.StepPrevious: Smallint;
begin
  Result := DefaultInterface.StepPrevious;
end;

function TJrnlSNo.Update: Smallint;
begin
  Result := DefaultInterface.Update;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TJrnlSNoProperties.Create(AServer: TJrnlSNo);
begin
  inherited Create;
  FServer := AServer;
end;

function TJrnlSNoProperties.GetDefaultInterface: _JrnlSNo;
begin
  Result := FServer.DefaultInterface;
end;

function TJrnlSNoProperties.Get_ItemRecordNumber: Integer;
begin
    Result := DefaultInterface.ItemRecordNumber;
end;

procedure TJrnlSNoProperties.Set_ItemRecordNumber(Param1: Integer);
begin
  DefaultInterface.Set_ItemRecordNumber(Param1);
end;

function TJrnlSNoProperties.Get_JrnlPostOrder: Integer;
begin
    Result := DefaultInterface.JrnlPostOrder;
end;

procedure TJrnlSNoProperties.Set_JrnlPostOrder(Param1: Integer);
begin
  DefaultInterface.Set_JrnlPostOrder(Param1);
end;

function TJrnlSNoProperties.Get_JrnlRowIndex: Integer;
begin
    Result := DefaultInterface.JrnlRowIndex;
end;

procedure TJrnlSNoProperties.Set_JrnlRowIndex(Param1: Integer);
begin
  DefaultInterface.Set_JrnlRowIndex(Param1);
end;

function TJrnlSNoProperties.Get_SerialNumber: WideString;
begin
    Result := DefaultInterface.SerialNumber;
end;

procedure TJrnlSNoProperties.Set_SerialNumber(const Param1: WideString);
begin
  DefaultInterface.Set_SerialNumber(Param1);
end;

function TJrnlSNoProperties.Get_SerialRecordNumber: Integer;
begin
    Result := DefaultInterface.SerialRecordNumber;
end;

procedure TJrnlSNoProperties.Set_SerialRecordNumber(Param1: Integer);
begin
  DefaultInterface.Set_SerialRecordNumber(Param1);
end;

function TJrnlSNoProperties.Get_TransactionClass: Integer;
begin
    Result := DefaultInterface.TransactionClass;
end;

procedure TJrnlSNoProperties.Set_TransactionClass(Param1: Integer);
begin
  DefaultInterface.Set_TransactionClass(Param1);
end;

function TJrnlSNoProperties.Get_TransactionCost: Double;
begin
    Result := DefaultInterface.TransactionCost;
end;

procedure TJrnlSNoProperties.Set_TransactionCost(Param1: Double);
begin
  DefaultInterface.Set_TransactionCost(Param1);
end;

function TJrnlSNoProperties.Get_TransactionDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TransactionDate;
end;

procedure TJrnlSNoProperties.Set_TransactionDate(Param1: OleVariant);
begin
  DefaultInterface.Set_TransactionDate(Param1);
end;

function TJrnlSNoProperties.Get_WorkTktReferenceNo: Integer;
begin
    Result := DefaultInterface.WorkTktReferenceNo;
end;

procedure TJrnlSNoProperties.Set_WorkTktReferenceNo(Param1: Integer);
begin
  DefaultInterface.Set_WorkTktReferenceNo(Param1);
end;

{$ENDIF}

procedure Register;
begin
  RegisterComponents(dtlServerPage, [TCompanyInformation, TBtrieve, TSelectCompany, TPeachw, 
    TDefaultCustomerData, TChart, TCustomer, TAlarm, TSalesTaxCode, 
    TEmployee, TTaxAuthority, TVendor, TLineItem, TGeneralData, 
    TSelectCustomer, TSelectDate, TSelectSalesTaxCode, TDefaultShipMethod, TSelectSalesRep, 
    TSelectAccount, TSalesJournal, TJournal, TAlert, TEventlog, 
    TAuditTrail, TCost, TAssemblyAdjustmentJournal, TFAAsset, TFABook, 
    TFABusUse, TFAClass, TFAComp, TFAPost, TFAPrePst, 
    TDefaultStatementData, TDefaultTaxTypes, TDefaultVendorData, TDefaultInventoryData, TDefaultGLAccounts, 
    TDefaultJobData, TDefaultEmployeeData, TeCheckData, TGroupData, TInventoryChain, 
    TInventoryComponent, TInventoryCost, TENums, TJobData, TJobEstimate, 
    TJobTag, TCashDisbursementJournal, TCashReceiptJournal, TGeneralJournal, TInventoryAdjustmentJournal, 
    TPayrollJournal, TPurchaseJournal, TPurchaseOrderJournal, TSalesOrderJournal, TPhase, 
    TReceiptTag, TMemorizedTransactions, TTaxTable, TTicket, TUser, 
    TSortJob, TSelectVendor, TSelectLineItem, TSelectEmployee, TJrnlHdr, 
    TJrnlRow, TDefaultPriceLevels, TRaiseHistory, TBOMHistory, TBOMItems, 
    TQuantityDiscount, TUnitMeasure, TWorkTicket, TSelectJob, TJrnlSNo]);
end;

end.
